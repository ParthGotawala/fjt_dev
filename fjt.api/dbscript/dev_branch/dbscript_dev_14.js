(function (maxBuildNumber, userid, requiredDet) {
    let allDbChangesArray = [];
    switch (maxBuildNumber) {
        case 2561:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 15-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2562,'2.00','V1',' Sample entry - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2562:
            allDbChangesArray.push(
                /* **************************** new script -> 16-07-2020 *********************************** */
                "DROP TABLE IF EXISTS `inspection_mst`;  \n" +
                "CREATE TABLE `inspection_mst`(   \n" +
                "   `id` INT NOT NULL AUTO_INCREMENT ,   \n" +
                "   `requirement` VARCHAR(255) NOT NULL ,   \n" +
                "   `createdBy` VARCHAR(255) NOT NULL ,   \n" +
                "   `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ,   \n" +
                "   `updatedBy` VARCHAR(255) ,   \n" +
                "   `updatedAt` DATETIME DEFAULT CURRENT_TIMESTAMP ,   \n" +
                "   `updateByRoleId` INT(11) ,   \n" +
                "   `isDeleted` TINYINT(1) NOT NULL DEFAULT '0' ,   \n" +
                "   `deletedAt` DATETIME ,   \n" +
                "   `deletedBy` VARCHAR(255) ,   \n" +
                "   `deleteByRoleId` INT(11) ,   \n" +
                "   `createByRoleId` INT(11) ,   \n" +
                "   PRIMARY KEY (`id`)  \n" +
                " );  \n" +
                /* **************************** new script -> 16-07-2020 *********************************** */
                "DROP TABLE IF EXISTS `inspection_template_mst`;  \n" +
                "CREATE TABLE `inspection_template_mst`(   \n" +
                "   `id` INT NOT NULL AUTO_INCREMENT ,   \n" +
                "   `name` VARCHAR(255) NOT NULL ,   \n" +
                "   `createdBy` VARCHAR(255) NOT NULL ,   \n" +
                "   `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ,   \n" +
                "   `updatedBy` VARCHAR(255) ,   \n" +
                "   `updatedAt` DATETIME DEFAULT CURRENT_TIMESTAMP ,   \n" +
                "   `updateByRoleId` INT(11) ,   \n" +
                "   `isDeleted` TINYINT(1) NOT NULL DEFAULT '0' ,   \n" +
                "   `deletedAt` DATETIME ,   \n" +
                "   `deletedBy` VARCHAR(255) ,   \n" +
                "   `deleteByRoleId` INT(11) ,   \n" +
                "   `createByRoleId` INT(11) ,   \n" +
                "   PRIMARY KEY (`id`)  \n" +
                "   );  \n" +
                /* **************************** new script -> 16-07-2020 *********************************** */
                "DROP TABLE IF EXISTS `inspection_template_requirement_Det`;  \n" +
                "CREATE TABLE `inspection_template_requirement_Det`(   \n" +
                "   `id` INT NOT NULL AUTO_INCREMENT ,   \n" +
                "   `inspenctionTemplateId` INT NOT NULL ,   \n" +
                "   `requirement` VARCHAR(255) NOT NULL ,   \n" +
                "   `createdBy` VARCHAR(255) NOT NULL ,   \n" +
                "   `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ,   \n" +
                "   `updatedBy` VARCHAR(255) ,   \n" +
                "   `updatedAt` DATETIME DEFAULT CURRENT_TIMESTAMP ,   \n" +
                "   `updateByRoleId` INT(11) ,   \n" +
                "   `isDeleted` TINYINT(1) NOT NULL DEFAULT '0' ,   \n" +
                "   `deletedAt` DATETIME ,   \n" +
                "   `deletedBy` VARCHAR(255) ,   \n" +
                "   `deleteByRoleId` INT(11) ,   \n" +
                "   `createByRoleId` INT(11) ,   \n" +
                "   PRIMARY KEY (`id`),  \n" +
                "   KEY `FK_inspection_template_requirement_Det_inspenctionTemplateId` (`inspenctionTemplateId`),  \n" +
                "   CONSTRAINT `FK_inspection_template_requirement_Det_inspenctionTemplateId` FOREIGN KEY (`inspenctionTemplateId`) REFERENCES `inspection_template_mst` (`id`)  \n" +
                " );  \n" +
                /* **************************** add script version -> 15-07-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2563,'2.00','v1',' Purchase/Inspection Requirement and Template page related table - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2563:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "ALTER TABLE rfqforms  \n" +
                "ADD COLUMN salesCommissionTo INT(11) NOT NULL;  \n" +
                "  \n" +
                "UPDATE rfqforms  \n" +
                "SET salesCommissionTo = employeeID;  \n" +
                "  \n" +
                "ALTER TABLE rfqforms  \n" +
                "ADD CONSTRAINT FK_rfqforms_salesCommissionTo  \n" +
                "FOREIGN KEY (salesCommissionTo) REFERENCES employees(id);  \n" +
                "  \n" +
                "ALTER TABLE mfgcodemst  \n" +
                "ADD COLUMN salesCommissionTo INT(11) DEFAULT NULL;  \n" +
                "  \n" +
                "ALTER TABLE mfgcodemst  \n" +
                "ADD CONSTRAINT FK_mfgcodemst_salesCommissionTo  \n" +
                "FOREIGN KEY (salesCommissionTo) REFERENCES employees(id);  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2564,'2.00','V1','Sales Commission to changes in Customer and RFQ page - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2564:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetEmployeelistBasedOnCustomerMapping`;  \n" +
                "CREATE PROCEDURE `Sproc_GetEmployeelistBasedOnCustomerMapping`(  \n" +
                "IN pCustomerID INT(11)  \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE vMappingCount INT(11);  \n" +
                "IF (pCustomerID IS NOT NULL) THEN  \n" +
                "	SELECT COUNT(1) INTO vMappingCount FROM employee_mfg_mapping WHERE mfgCodeID = pCustomerID AND isdeleted = 0;  \n" +
                "ELSE   \n" +
                "	SET vMappingCount = 0;  \n" +
                "END IF;  \n" +
                "	SELECT CONCAT(\"(\",emp.initialName,\") \", emp.firstName,\" \", emp.lastName) AS `name`, emp.id, emp.profileImg   \n" +
                "    FROM employees emp  \n" +
                "	WHERE emp.isdeleted = 0 AND   \n" +
                "	(CASE  WHEN vMappingCount >0 THEN  \n" +
                "	emp.id IN (SELECT employeeID FROM employee_mfg_mapping WHERE mfgCodeID = pCustomerID AND isdeleted = 0)  \n" +
                "	ELSE 1=1 END);  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetMfgCodeDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetMfgCodeDetailForElastic`(	                                                                                  \n" +
                "	IN pId INT(11),          \n" +
                "    IN pIsCustOrDisty BIT,          \n" +
                "    IN pmfgType NVARCHAR(10)          \n" +
                ")  \n" +
                "BEGIN                                                                               \n" +
                "			SELECT  id,mfgCode,mfgName,primaryContactName,contact,faxNumber,isActive,mfgType,isCustOrDisty  ,   \n" +
                "            fun_getUserNameByEmployeID(salesCommissionTo) salesCommissionTo,  \n" +
                "(SELECT gencCategoryName FROM genericcategory WHERE gencCategoryID = paymentTermsID) Terms FROM mfgcodemst              \n" +
                "		WHERE IFNULL(isDeleted,0) = 0 AND  id = IFNULL(pId,id) AND     \n" +
                "	IFNULL(isCustOrDisty,0) = IFNULL(pIsCustOrDisty,IFNULL(isCustOrDisty,0))     \n" +
                "    AND mfgType = IFNULL(pmfgType, mfgType);           \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetManufacturer`;  \n" +
                "CREATE PROCEDURE `Sproc_GetManufacturer`(    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	-- IN pIsMFG TINYINT(1),    \n" +
                "	IN pmfgType VARCHAR(20),    \n" +
                "	IN pisCustOrDisty TINYINT(1)    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "	/* DECLARE SQLStatement varchar(255); */    \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);           \n" +
                "    DECLARE vTimeZone VARCHAR(50);           \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;            \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;   \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(\"    \n" +
                "  \n" +
                "       SELECT mc.id,mc.mfgCode,mc.mfgType,mc.mfgName,emp.firstName, emp.lastName,mc.customerType, (case when  mc.customerType='B'  then 'Broker' when   mc.customerType='E' then 'End Customer'  else '' end) as customerTypeName,      \n" +
                "       (CASE WHEN (mc.isPricingApi=1) THEN 1 ELSE 0 END) isDisabledDelete, mc.isPricingApi , mc.systemGenerated,fun_getDateCodeFormatById(mc.dateCodeFormatID) dateCodeFormat,                \n" +
                "		fun_getUserNameByEmployeID(mc.salesCommissionTo) salesCommissionTo,  \n" +
                "        fun_getUserNameByID(mc.updatedBy) updatedby,                \n" +
                "		fun_getUserNameByID(mc.createdBy) createdby,               \n" +
                "		fun_getRoleByID(mc.createByRoleId) createdbyRole,                \n" +
                "		fun_getRoleByID(mc.updateByRoleId) updatedbyRole,                \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(mc.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                      \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(mc.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,                     \n" +
                "       CASE WHEN mc.authorizeType=1 THEN 'Authorized'                            \n" +
                "            WHEN mc.authorizeType=2 THEN 'Independent'                            \n" +
                "            WHEN mc.authorizeType=3 THEN 'Authorized & Independent'                             \n" +
                "            ELSE '' END   authorizeTypeTxt,mc.authorizeType,                                        \n" +
                "		    CONCAT(emp.firstName, ' ', emp.lastName) AS fullName, wbw.buyBy,wbw.buyDate,wbw.description,wbw.id AS `acquiredID`,              \n" +
                "            wbw.acquired,                                             \n" +
                "		(SELECT GROUP_CONCAT(CONCAT(alias,'@@@',fun_getMappingManufacturerCount(id)) SEPARATOR '!!!!')  FROM mfgcodealias                                               \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND mfgcodeId = mc.id  GROUP BY mfgcodeId) AS aliaslist  ,                                        \n" +
                "		mc.primaryContactName, mc.email , mc.website, mc.contact, mc.comments , mc.phExtension,                                         \n" +
                "		mc.contactCountryCode,mc.faxNumber, mc.faxCountryCode,mc.isActive, mc.isCompany,                     \n" +
                "        (CASE WHEN (mc.`isCompany` = 0) THEN 'No'                                           \n" +
                "				WHEN (mc.`isCompany` = 1) THEN 'Yes' ELSE '' END) AS `isCompanyConvertedValue`,              \n" +
                "		(CASE WHEN (mc.systemGenerated = 0) THEN 'No'    \n" +
                "				WHEN (mc.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SyatemGeneratedValue`,              \n" +
                "		(CASE WHEN (mc.`isActive` = 0) THEN 'Inactive'    \n" +
                "				WHEN (mc.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`                                 \n" +
                "		 ,gc.gencCategoryName,    \n" +
                "		 CASE WHEN mc.isCustOrDisty = 1 THEN 'Both'    \n" +
                "			WHEN mc.isCustOrDisty = 0 OR mc.isCustOrDisty IS NULL THEN 'Manufacturer Only'    \n" +
                "		END AS isCustOrDistyText,    \n" +
                "        mc.displayOrder    \n" +
                "	FROM mfgcodemst mc    \n" +
                "		JOIN users us ON mc.createdBy = us.id AND us.deletedAt IS NULL    \n" +
                "		JOIN employees emp ON us.employeeID = emp.id AND emp.deletedAt IS NULL    \n" +
                "		LEFT JOIN (SELECT wbwi.buyBy,wbwi.buyDate,wbwi.description,wbwi.id , wbwi.buyTo ,    \n" +
                "				CONCAT('(', mci.mfgcode,')' , ' ' ,mci.mfgName ) AS `acquired`    \n" +
                "			FROM  who_bought_who wbwi    \n" +
                "            JOIN mfgcodemst mci ON wbwi.buyBy = mci.id    \n" +
                "            AND wbwi.isDeleted = 0) wbw    \n" +
                "			ON wbw.buyTo = mc.id    \n" +
                "		LEFT JOIN genericcategory gc ON gc.gencCategoryID = mc.paymentTermsID AND gc.deletedAt IS NULL                                                \n" +
                "	WHERE IFNULL(mc.isdeleted,0) = 0                                         \n" +
                "	AND mc.deletedAt IS NULL                                        \n" +
                "	AND mc.mfgType = '\", pmfgType ,                                        \n" +
                "	\"'                        \n" +
                "	\");                              \n" +
                "  \n" +
                "        IF(pisCustOrDisty IS NOT NULL OR pisCustOrDisty != '') THEN                        \n" +
                "		SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(@temp_Sproc_RetriveWhereUsedComponents,\" and mc.isCustOrDisty = \",pisCustOrDisty);                         \n" +
                "	END IF;                              \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                              \n" +
                "	ELSE                                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" ,\"displayOrder IS NULL, displayOrder ASC ,mfgName ASC\");    \n" +
                "	END IF;	                                              \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                              \n" +
                "		SET pWhereClause = '1=1' ;                                              \n" +
                "	END IF;	                                              \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                              \n" +
                "	ELSE	                                              \n" +
                "		SET rowNumWhere = '';                                              \n" +
                "	END IF;	                                              \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                             \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetriveWhereUsedComponents,\" ) c where 1=1 and \", pWhereClause);                      \n" +
                "	PREPARE query2 FROM @SQLStatement2;                            \n" +
                "	EXECUTE query2;                            \n" +
                "	DEALLOCATE PREPARE query2;                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetriveWhereUsedComponents,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                        \n" +
                "	PREPARE query1 FROM @SQLStatement2;                            \n" +
                "	EXECUTE query1;                            \n" +
                "	DEALLOCATE PREPARE query1; 	                      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(                              \n" +
                "	IN ppageIndex INT(11),                              \n" +
                "	IN precordPerPage INT(11),                              \n" +
                "	IN pOrderBy VARCHAR(255),                              \n" +
                "	IN pWhereClause VARCHAR(16383),                    \n" +
                "    IN pEmployeeID INT(11),        \n" +
                "	IN pCustomerIds VARCHAR(16383),                                                                        \n" +
                "	IN pAssyTypeIds VARCHAR(16383),            \n" +
                "	IN pRfqTypeIds VARCHAR(16383),            \n" +
                "	IN pJobTypeIds VARCHAR(16383),            \n" +
                "	IN pAssyIds VARCHAR(16383),           \n" +
                "	IN pAssyNicknameIds LONGTEXT,       \n" +
                "    IN pIsExportControlled TINYINT(1),        \n" +
                "    IN pIsQuoteOverdue TINYINT(1),        \n" +
                "    IN pIsSubAssemblyBOMs TINYINT(1),        \n" +
                "    IN pIsPriceGroupQuoteAssembly TINYINT(1),  \n" +
                "     IN pFromDate DATE,            \n" +
                "    IN pToDate DATE,  \n" +
                "    IN pOlderThenDays INT(11)        \n" +
                "    )  \n" +
                "BEGIN                                                                                                    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                              \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;       \n" +
                "	DECLARE vTextAngularKeyCode VARCHAR(500);        \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);           \n" +
                "    DECLARE vTimeZone VARCHAR(50);           \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;            \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;         \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                              \n" +
                "  		SET pWhereClause = '1=1' ;                              \n" +
                "	END IF;        \n" +
                "  \n" +
                "    IF(pCustomerIds IS NOT NULL AND pCustomerIds != '') THEN                                                                         \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (', pCustomerIds, ') ');                                                                        \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF(pAssyTypeIds IS NOT NULL AND pAssyTypeIds != '') THEN                                                                         \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assemblyTypeID in (', pAssyTypeIds, ') ');                                                                        \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF(pRfqTypeIds IS NOT NULL AND pRfqTypeIds != '') THEN                                                                         \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND RFQTypeID in (', pRfqTypeIds, ') ');                                                                        \n" +
                "	END IF;       \n" +
                "  \n" +
                "    IF(pJobTypeIds IS NOT NULL AND pJobTypeIds != '') THEN                                                                         \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND jobTypeID in (', pJobTypeIds, ') ');                                                                        \n" +
                "	END IF;        \n" +
                "  \n" +
                "     IF(pAssyIds IS NOT NULL AND pAssyIds != '') THEN                                                                         \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND partID in (', pAssyIds, ') ');                                                                        \n" +
                "	 END IF;        \n" +
                "  \n" +
                "     IF(pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN        \n" +
                "		SET pWhereClause=CONCAT(pWhereClause,' and partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' ))');        \n" +
                "	 END IF;   \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND      \n" +
                "		   (CASE    \n" +
                "			WHEN rfq_statusID = 1 THEN    \n" +
                "				DATE(quoteDueDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN    \n" +
                "				DATE(quoteSubmitDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN    \n" +
                "				DATE(quoteClosedDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "		    END)');        \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pOlderThenDays IS NOT NULL) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND   \n" +
                "		 (CASE    \n" +
                "			WHEN rfq_statusID = 1 THEN    \n" +
                "				DATEDIFF(fun_DatetimetoUTCDateTime(), quoteDueDate) > ',pOlderThenDays,'  \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN    \n" +
                "				DATEDIFF(fun_DatetimetoUTCDateTime(), quoteSubmitDate) > ',pOlderThenDays,'  \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN    \n" +
                "				DATEDIFF(fun_DatetimetoUTCDateTime(), quoteClosedDate) > ',pOlderThenDays,'  \n" +
                "		    END)  \n" +
                "  \n" +
                "		');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsQuoteOverdue = 1 THEN     		            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND      \n" +
                "        (CASE    \n" +
                "        WHEN rfq_statusID = 1 THEN    \n" +
                "				quoteDueDate < fun_DatetimetoUTCDateTime()     \n" +
                "         WHEN (rfq_statusID = 2 OR rfq_statusID = 3 ) THEN    \n" +
                "				quoteSubmitDate > quoteDueDate     \n" +
                "		WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN    \n" +
                "				quoteClosedDate	> quoteDueDate		    \n" +
                "            END)');        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF pIsSubAssemblyBOMs = 1 THEN         \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assyLevel > 1');        \n" +
                "	END IF;       \n" +
                "  \n" +
                "    /* IF pIsPriceGroupQuoteAssembly = 1 THEN         \n" +
                "		SET pWhereClause = concat(pWhereClause, ' AND assyLevel > 1');        \n" +
                "	END IF; */      \n" +
                "  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();                              \n" +
                "	/* DECLARE SQLStatement varchar(255); */                              \n" +
                "   #DROP TEMPORARY TABLE IF EXISTS Results;                              \n" +
                "    SET @temp_Sproc_GetRFQList = CONCAT(\"SELECT (select COUNT(1) from rfq_lineitems rl where rl.partID = ra.partID and rl.isDeleted = 0) AS lineItemCount, rf.id, ra.partID,                              \n" +
                "			count(1) over (partition by rf.id) AS quoteGroupAssyCount,    \n" +
                "            fun_getUserNameByEmployeID(rf.salesCommissionTo) salesCommissionTo,  \n" +
                "            (select count(1) from rfq_price_group rpg where refRFQID = rf.id and rpg.isDeleted = 0) priceGroupCount,      \n" +
                "            fun_getExportControlDetailFromPartID(ra.partID) as isExportControl,        \n" +
                "			#(SELECT COUNT(1) FROM rfq_assemblies WHERE rfqrefID = rf.id AND isDeleted = 0) AS quoteGroupAssyCount,                              \n" +
                "			(SELECT MAX(pr.`level`)+1 FROM part_sub_assy_relationship pr WHERE pr.partID = ra.partID AND isDeleted = 0) AS assyLevel,                              \n" +
                "			(SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id AND quoteNumber IS NOT NULL) AS revisedQuoteCount,                              \n" +
                "			(SELECT max(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id) AS lastQuoteID, ra.isSummaryComplete,                              \n" +
                "			part.PIDCode,part.isCustom,part.RoHSStatusID, part.mfgPN, part.custAssyPN, part.mfgPNDescription,part.rev,part.assyCode,part.nickName,ro.rohsIcon,                              \n" +
                "			fun_getUserNameByEmployeID(rf.employeeID) AS rfqCreatedBy,                              \n" +
                "			fun_getUserNameByID(ra.Updatedby) AS rfqModifiedBy,                              \n" +
                "			part.liveVersion AS liveInternalVersion,                              \n" +
                "			(SELECT fun_getBomProgressBar(IFNULL(ra.partID,0))) AS bomProgress,                              \n" +
                "			(SELECT fun_getMaterialProgress(ra.id))AS materialProgress,                              \n" +
                "			(CASE WHEN (SELECT fun_getCustomPartProgress(ra.id)) = -1 THEN 'N/A' ELSE (SELECT fun_getCustomPartProgress(ra.id)) END)AS customPartProgress,                              \n" +
                "			(CASE WHEN ra.status = 1 THEN 'In Progress'                              \n" +
                "				  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'                              \n" +
                "				  WHEN ra.status = 3 THEN 'Won'                             \n" +
                "				  WHEN ra.status = 4 THEN 'Lost'                              \n" +
                "				  WHEN ra.status = 5 THEN 'Canceled' END) `status` ,                              \n" +
                "			ra.status rfq_statusID,                        \n" +
                "			(CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending'                              \n" +
                "					WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote'                              \n" +
                "					WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'                              \n" +
                "					WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,                              \n" +
                "			ro.name AS `rohsComplientConvertedValue`,                              \n" +
                "			(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'                              \n" +
                "				WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,                              \n" +
                "			(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'                              \n" +
                "				WHEN (`ra`.`timePeriod` = 1) THEN 'W'                              \n" +
                "				WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,ra.jobTypeID,ra.assemblyTypeID,ra.RFQTypeID,      \n" +
                "			fun_getjobTypeByID(ra.jobTypeID) AS JobType, fun_getrfqTypeByID(ra.RFQTypeID) AS OrderType, CONCAT('(',cu.mfgCode,') ',cu.mfgName) AS Customer, cu.id customerID,                              \n" +
                "			fun_getUserNameByID(ra.quoteSubmittedBy) AS RFQ_SubmitedBy, ra.winPrice,ra.winQuantity,                              \n" +
                "			ra.quoteInDate, cast(ra.quoteDueDate as DATE) as quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,                              \n" +
                "			part.isActivityStart, fun_getMfgCodeByPartID(ra.partID) customerCode,                \n" +
                "			(CASE WHEN part.isActivityStart THEN u.username ELSE '' END )AS username, part.activityStartBy,                           \n" +
                "			TIMESTAMPDIFF(SECOND, part.activityStartAt,fun_DatetimetoUTCDateTime()) activityStartAt,                          \n" +
                "			ra.isBOMVerified,fun_getTextAngularData(ra.reason,'\",vTextAngularKeyCode,\"') reason, fun_getUserNameByID(ra.quoteClosedBy) AS RFQ_ClosedBy,ra.quoteClosedDate,                             \n" +
                "            fun_getUserNameByID(ra.updatedBy) updatedby,                      \n" +
                "			fun_getUserNameByID(ra.createdBy) createdby,                       \n" +
                "			fun_getRoleByID(ra.createByRoleId) createdbyRole,                      \n" +
                "			fun_getRoleByID(ra.updateByRoleId) updatedbyRole,                      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,                     \n" +
                "			fun_getRfqLabourPercentage(ra.id) laborPercentage                      \n" +
                "		FROM rfqforms rf                              \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND ra.isdeleted = 0                              \n" +
                "		JOIN mfgcodemst cu ON cu.id = rf.customerId AND cu.isdeleted = 0                              \n" +
                "		JOIN component part ON part.id = ra.partID AND part.category = 3 AND part.isdeleted = 0                              \n" +
                "		JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0                              \n" +
                "		LEFT OUTER JOIN users u ON  u.id = part.activityStartBy                              \n" +
                "		WHERE rf.isdeleted = 0                    \n" +
                "        and (case when (select count(1) from employee_mfg_mapping where employeeId = \",pEmployeeID,\" and isDeleted = 0) > 0 then                     \n" +
                "		exists (select 1 from employee_mfg_mapping where mfgCodeId =  cu.id and employeeId = \",pEmployeeID,\" and isDeleted = 0)                    \n" +
                "		else 1=1 end)                    \n" +
                "        \");                              \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                              \n" +
                "	ELSE                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"quoteDueDate DESC\") ;                              \n" +
                "	END IF;                              \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                              \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                              \n" +
                "	ELSE                              \n" +
                "		SET rowNumWhere = '';                              \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF pIsExportControlled = 1  AND pIsPriceGroupQuoteAssembly = 1 THEN         \n" +
                "		SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\" AND priceGroupCount > 1 ');        \n" +
                "	ELSEIF pIsExportControlled = 1 THEN      \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\"');            \n" +
                "	ELSEIF pIsExportControlled = 0 AND pIsPriceGroupQuoteAssembly = 1 THEN      \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having priceGroupCount > 0 ');              \n" +
                "	END IF;      \n" +
                "	/* to get total count of rows */                                 \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause);		  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                \n" +
                "			EXECUTE query2;                                \n" +
                "			DEALLOCATE PREPARE query2;                              \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetRFQList,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                          			                        			                               \n" +
                "			PREPARE query1 FROM @SQLStatement2;                                \n" +
                "			EXECUTE query1;                                \n" +
                "			DEALLOCATE PREPARE query1;                              \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getCustomerListbyEmployee`;  \n" +
                "CREATE PROCEDURE `Sproc_getCustomerListbyEmployee`(        \n" +
                "	IN pEmployeeID INT(11)    \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "		SELECT * FROM mfgcodemst mc WHERE isDeleted = 0 AND isActive = 1 AND isCustOrDisty = 1 AND mfgType = 'MFG'    \n" +
                "		AND (CASE WHEN (SELECT COUNT(1) FROM employee_mfg_mapping WHERE employeeId = pEmployeeID AND isDeleted = 0) > 0 THEN     \n" +
                "		EXISTS (SELECT 1 FROM employee_mfg_mapping WHERE mfgCodeId =  mc.id AND employeeId = pEmployeeID AND isDeleted = 0)    \n" +
                "		ELSE 1=1 END);    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2565,'2.00','V1','Sales Commission to changes in Customer and RFQ page - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2565:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-07-2020 *********************************** */
                "DROP TABLE IF EXISTS componenet_inspection_requirement_det;  \n" +
                "CREATE TABLE componenet_inspection_requirement_det (  \n" +
                "	id INT(11) NOT NULL AUTO_INCREMENT,  \n" +
                "	partId INT(11) NOT NULL,  \n" +
                "	requirement VARCHAR(255),  \n" +
                "	createdBy VARCHAR(255),  \n" +
                "	createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,   \n" +
                "	createByRoleId INT(11),  \n" +
                "	updatedBy VARCHAR(255),  \n" +
                "	updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,  \n" +
                "	updateByRoleId INT(11),  \n" +
                "	isDeleted TINYINT(1) DEFAULT 0,  \n" +
                "	deletedAt DATETIME,  \n" +
                "	deletedBy VARCHAR(255),  \n" +
                "	deleteByRoleId	INT(11),  \n" +
                "	PRIMARY KEY (id),  \n" +
                "	KEY FK_componenet_inspection_requirement_det_partId (partId),  \n" +
                "	CONSTRAINT FK_componenet_inspection_requirement_det_partId FOREIGN KEY (partId) REFERENCES component (id)  \n" +
                ") ENGINE=INNODB DEFAULT CHARSET=utf8;  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2566,'2.00','V1','Changes of purchase inspection requiremet detail - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2566:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-07-2020 *********************************** */
                "UPDATE page_detail SET pageURL = '/managecomponent' WHERE pageName = 'Manage Parts' AND pageRoute = 'app.component.managecomponent' AND deletedAt IS NULL;  \n" +
                "UPDATE page_detail SET pageURL = '/detail/:mfgType/:coid' WHERE pageName = 'Manage Parts Detail' AND pageRoute = 'app.component.managecomponent.detail' AND deletedAt IS NULL;  \n" +
                "UPDATE page_detail SET pageURL = '/alternategroup/:mfgType/:coid/:subTab' WHERE pageName = 'Manage Parts Alias & Alternate Groups' AND pageRoute = 'app.component.managecomponent.alternategroup' AND deletedAt IS NULL;  \n" +
                "UPDATE page_detail SET pageURL = '/standards/:mfgType/:coid' WHERE pageName = 'Manage Parts Standards' AND pageRoute = 'app.component.managecomponent.standards' AND deletedAt IS NULL;  \n" +
                "UPDATE page_detail SET pageURL = '/documents/:mfgType/:coid/:docOpenType' WHERE pageName = 'Manage Parts Document' AND pageRoute = 'app.component.managecomponent.document' AND deletedAt IS NULL;  \n" +
                "UPDATE page_detail SET pageURL = '/datafields/:mfgType/:coid' WHERE pageName = 'Manage Parts DataFields' AND pageRoute = 'app.component.managecomponent.datafields' AND deletedAt IS NULL;  \n" +
                "UPDATE page_detail SET pageURL = '/otherdetail/:mfgType/:coid' WHERE pageName = 'Manage Parts Miscellaneous' AND pageRoute = 'app.component.managecomponent.otherdetail' AND deletedAt IS NULL;  \n" +
                "UPDATE page_detail SET pageURL = '/pricinghistory/:mfgType/:coid' WHERE pageName = 'Manage Parts Pricing History' AND pageRoute = 'app.component.managecomponent.pricinghistory' AND deletedAt IS NULL;  \n" +
                "UPDATE page_detail SET pageURL = '/customerloa/:mfgType/:coid' WHERE pageName = 'Manage Parts Customer LOA' AND pageRoute = 'app.component.managecomponent.customerloa' AND deletedAt IS NULL;  \n" +
                "UPDATE page_detail SET pageURL = '/comments/:mfgType/:coid' WHERE pageName = 'Manage Parts Comments' AND pageRoute = 'app.component.managecomponent.comments' AND deletedAt IS NULL;  \n" +
                "UPDATE page_detail SET pageURL = '/bom/:mfgType/:coid/:subTab' WHERE pageName = 'Manage Parts BOM' AND pageRoute = 'app.component.managecomponent.bom' AND deletedAt IS NULL;  \n" +
                "UPDATE page_detail SET pageURL = '/openingstock/:mfgType/:coid' WHERE pageName = 'Manage Parts Opening Stock' AND pageRoute = 'app.component.managecomponent.openingstock' AND deletedAt IS NULL;  \n" +
                "UPDATE page_detail SET pageURL = '/supplierapiresponse/:mfgType/:coid' WHERE pageName = 'Manage Parts Supplier API Response' AND pageRoute = 'app.component.managecomponent.supplierapiresponse' AND deletedAt IS NULL;  \n" +
                "UPDATE page_detail SET pageURL = '/componenthistory/:mfgType/:coid' WHERE pageName = 'Manage Parts History' AND pageRoute = 'app.component.managecomponent.history' AND deletedAt IS NULL;  \n" +
                "UPDATE page_detail SET pageURL = '/kitallocation/:mfgType/:coid' WHERE pageName = 'Manage Parts Kit Allocation' AND pageRoute = 'app.component.managecomponent.kitallocation' AND deletedAt IS NULL;  \n" +
                "UPDATE page_detail SET pageURL = '/umidlist/:mfgType/:coid' WHERE pageName = 'Manage Parts UMID List' AND pageRoute = 'app.component.managecomponent.umidlist' AND deletedAt IS NULL;  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2567,'2.00','V1','Changes of purchase inspection requiremet detail - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2567:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-07-2020 *********************************** */
                "SELECT pageID INTO @ManageParts FROM page_detail WHERE deletedAt IS NULL AND pageName = 'Manage Parts';  \n" +
                "INSERT  INTO `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`, `isAllowAsHomePage`)   \n" +
                "VALUES ('Manage Parts Purchase Inspection Requirement',0,0,NULL,'app.component.managecomponent.purchaseinspectionrequirement','/purchaseinspectionrequirement/:mfgType/:coid','Manage Parts Purchase Inspection Requirement',NULL,@ManageParts,0,NULL,NULL,'icons-manage-parts',1,UTC_TIMESTAMP,UTC_TIMESTAMP,NULL,'1',NULL,NULL,0,NULL,1,'Part', 0);  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2568,'2.00','V1','Changes of purchase inspection requiremet detail - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2568:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-07-2020 *********************************** */
                "INSERT INTO table_mapping_details (tabel_name, display_page_name) VALUES ('componenet_inspection_requirement_det', 'Purchase Inspection Requirement');  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2569,'2.00','V1','Changes of purchase inspection requiremet detail - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2569:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetStockStatus` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockStatus`(                  \n" +
                "	pComponentID INT(11)        \n" +
                ")  \n" +
                "BEGIN           \n" +
                "	DECLARE v_TotalStockInSystemRecord DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalReservedStock DECIMAL(18,8);  \n" +
                "	DECLARE v_ReservedPhysicalStock DECIMAL(18,8);  \n" +
                "	DECLARE v_AllocatedToKitStock DECIMAL(18,8);  \n" +
                "	DECLARE v_AllocatedReservedStock DECIMAL(18,8);  \n" +
                "	DECLARE v_AvailableStock DECIMAL(18,8);  \n" +
                "	DECLARE v_PackaginggroupID INT;  \n" +
                "	DECLARE v_TotalPackagingStockInSystemRecord DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalPackagingReservedStock DECIMAL(18,8);  \n" +
                "	DECLARE v_AllocatedPackagingStockToKitStock DECIMAL(18,8);  \n" +
                "	DECLARE v_AllocatedReservedPackagingStock DECIMAL(18,8);  \n" +
                "	DECLARE v_ReservedPackagingPhysicalStock DECIMAL(18,8);  \n" +
                "	DECLARE v_PackagingAliasStock DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalInHouseStock DECIMAL(18,8);  \n" +
                "	DECLARE v_SafetyStock DECIMAL(18,8);  \n" +
                "	DECLARE v_ReservedLogicalStock DECIMAL(18,8);  \n" +
                "	DECLARE v_Shortage DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalUnitInUmid DECIMAL(18,8);  \n" +
                "	DECLARE v_MainPartNonUmidStock DECIMAL(18,8);  \n" +
                "	DECLARE v_PackagingPartNonUMIDStock DECIMAL(18,8);  \n" +
                "	DECLARE v_PackagingPartNonUMIDStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalPackagingStockInSystemRecordInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalPackagingReservedStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_AllocatedReservedPackagingStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_AllocatedPackagingStockToKitStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_ReservedPackagingPhysicalStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_TotalInHouseStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_AvailableStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_PackagingAliasStockInUnit DECIMAL(18,8);  \n" +
                "	DECLARE v_IsCPN TINYINT;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempPartIDs;                     \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempPartIDs (                              \n" +
                "		partId INT(11)                              \n" +
                "	);       \n" +
                "  \n" +
                "	SELECT isCPN INTO v_IsCPN FROM component WHERE id = pComponentID AND isDeleted = 0;  \n" +
                "	IF (v_IsCPN = 1) THEN  \n" +
                "		INSERT INTO tempPartIDs (partId)	  \n" +
                "		SELECT refComponentID FROM component_cust_alias_rev_pn WHERE refCPNPartID = pComponentID AND isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		INSERT INTO tempPartIDs (partId) VALUES (pComponentID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempStockRawDet;      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempStockRawDet AS                      \n" +
                "	SELECT 	id,	  \n" +
                "		receiveMaterialType,	  \n" +
                "		pkgQty,		  \n" +
                "		pkgUnit            \n" +
                "	FROM 	component_sid_stock                   \n" +
                "	WHERE 	refcompid IN (SELECT partId FROM tempPartIDs)                   \n" +
                "			AND IFNULL(isDeleted,0) = 0;                  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(pkgQty), 0) INTO v_TotalStockInSystemRecord FROM tempStockRawDet;                  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(pkgQty), 0) INTO v_TotalReservedStock FROM tempStockRawDet WHERE receiveMaterialType = 'PR';                  \n" +
                "  \n" +
                "	SELECT 	IFNULL(SUM(allocatedQty), 0) INTO v_AllocatedToKitStock                \n" +
                "	FROM 	kit_allocation                   \n" +
                "	WHERE 	refUIDId IN (SELECT id FROM tempStockRawDet)                   \n" +
                "			AND `status` = 'A';               \n" +
                "  \n" +
                "	SELECT 	IFNULL(SUM(pkgQty), 0) INTO v_AllocatedReservedStock               \n" +
                "	FROM 	tempStockRawDet               \n" +
                "	WHERE 	receiveMaterialType = 'PR'              \n" +
                "			AND id IN (  \n" +
                "				SELECT 	refUIDId   \n" +
                "				FROM 	kit_allocation                   \n" +
                "				WHERE 	`status` = 'A'  \n" +
                "			);              \n" +
                "  \n" +
                "	SET v_ReservedPhysicalStock = v_TotalReservedStock - v_AllocatedReservedStock;                  \n" +
                "	SET v_AvailableStock = (v_TotalStockInSystemRecord - v_ReservedPhysicalStock - v_AllocatedToKitStock);                  \n" +
                "  \n" +
                "	-- Calculate Cumulative Stock                  \n" +
                "	SELECT packaginggroupID INTO v_PackaginggroupID FROM component WHERE id = pComponentID;                  \n" +
                "  \n" +
                "	SELECT 		IFNULL(SUM(vu.BalanceQty), 0) nonUMIDStock  \n" +
                "	INTO 		v_MainPartNonUmidStock	  \n" +
                "	FROM 		vu_umid_creation_pending vu      \n" +
                "	WHERE 		vu.PartId IN (SELECT partId FROM tempPartIDs)  \n" +
                "				AND BalanceQty > 0;   \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempPackagingAliasStockRawDet;      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempPackagingAliasStockRawDet AS                      \n" +
                "	SELECT 	c.id,		  \n" +
                "		c.refcompid,	  \n" +
                "		c.receiveMaterialType, 		  \n" +
                "		c.pkgQty,  \n" +
                "		c.pkgUnit  \n" +
                "	FROM 	component_sid_stock c, component_packagingalias cp                  \n" +
                "	WHERE 	c.refcompid = cp.componentID                  \n" +
                "			AND IFNULL(c.isDeleted,0) = 0                  \n" +
                "			AND cp.componentID NOT IN (SELECT partId FROM tempPartIDs)  \n" +
                "			AND cp.aliasgroupID = v_PackaginggroupID                  \n" +
                "			AND IFNULL(cp.isDeleted,0) = 0;                  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(pkgQty), 0) INTO v_TotalPackagingStockInSystemRecord FROM tempPackagingAliasStockRawDet;   \n" +
                "	SELECT IFNULL(SUM(pkgUnit), 0) INTO v_TotalPackagingStockInSystemRecordInUnit FROM tempPackagingAliasStockRawDet;   \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(pkgQty), 0) INTO v_TotalPackagingReservedStock FROM tempPackagingAliasStockRawDet WHERE receiveMaterialType = 'PR';          \n" +
                "	SELECT IFNULL(SUM(pkgUnit), 0) INTO v_TotalPackagingReservedStockInUnit FROM tempPackagingAliasStockRawDet WHERE receiveMaterialType = 'PR';          \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(allocatedQty), 0), IFNULL(SUM(allocatedUnit), 0)   \n" +
                "	INTO v_AllocatedPackagingStockToKitStock, v_AllocatedPackagingStockToKitStockInUnit                   \n" +
                "	FROM 	kit_allocation                   \n" +
                "	WHERE 	refUIDId IN (  \n" +
                "			SELECT 	id   \n" +
                "			FROM 	tempPackagingAliasStockRawDet  \n" +
                "		)                   \n" +
                "		AND `status` = 'A';                  \n" +
                "  \n" +
                "	SELECT 	IFNULL(SUM(pkgQty), 0), IFNULL(SUM(pkgUnit), 0)   \n" +
                "	INTO 	v_AllocatedReservedPackagingStock, v_AllocatedReservedPackagingStockInUnit  \n" +
                "	FROM 	tempPackagingAliasStockRawDet               \n" +
                "	WHERE 	receiveMaterialType = 'PR'               \n" +
                "			AND id  IN (  \n" +
                "				SELECT 	refUIDId   \n" +
                "				FROM 	kit_allocation                   \n" +
                "				WHERE 	`status`  = 'A'  \n" +
                "			) ;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempPackagingNonUMID;      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempPackagingNonUMID AS  \n" +
                "	SELECT partId FROM tempPartIDs;			  \n" +
                "  \n" +
                "	SELECT 		IFNULL(SUM(vu.BalanceQty), 0) AS packagingNonUMIDStock, SUM((IFNULL(vu.BalanceQty, 1) * IFNULL(c.unit, 1))) AS packagingNonUMIDStockInUnit  \n" +
                "	INTO	 	v_PackagingPartNonUMIDStock, v_PackagingPartNonUMIDStockInUnit  \n" +
                "	FROM 		vu_umid_creation_pending vu     \n" +
                "	INNER JOIN 	component c ON c.id = vu.PartId             \n" +
                "	WHERE 		vu.PartId IN (  \n" +
                "					SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (                                    \n" +
                "						SELECT aliasgroupID FROM component_packagingalias WHERE componentID IN (SELECT partId FROM tempPartIDs)  \n" +
                "					) AND deletedAt IS NULL AND componentID NOT IN (SELECT partId FROM tempPackagingNonUMID)   \n" +
                "				)  \n" +
                "				AND BalanceQty > 0;   \n" +
                "	SET v_ReservedPackagingPhysicalStock = v_TotalPackagingReservedStock - v_AllocatedReservedPackagingStock;                  \n" +
                "	SET v_PackagingAliasStock = (v_TotalPackagingStockInSystemRecord - v_ReservedPackagingPhysicalStock - v_AllocatedPackagingStockToKitStock);  \n" +
                "	SET v_ReservedPackagingPhysicalStockInUnit = v_TotalPackagingReservedStockInUnit - v_AllocatedReservedPackagingStockInUnit;                  \n" +
                "	SET v_PackagingAliasStockInUnit = (v_TotalPackagingStockInSystemRecordInUnit - v_ReservedPackagingPhysicalStockInUnit - v_AllocatedPackagingStockToKitStockInUnit);  \n" +
                "  \n" +
                "	-- End Calculate Cumulative Stock                   \n" +
                "  \n" +
                "	SELECT IFNULL(fun_getStockInDefaultUnit(pComponentID,v_AvailableStock),0) INTO v_AvailableStockInUnit;  \n" +
                "  \n" +
                "	SET v_TotalInHouseStock = v_AvailableStock + v_PackagingAliasStock;  \n" +
                "	SET v_TotalInHouseStockInUnit = v_AvailableStockInUnit + v_PackagingAliasStockInUnit;  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(saftyStock),0) INTO v_SafetyStock FROM component WHERE id IN (SELECT partId FROM tempPartIDs);              \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(r.count), 0) INTO v_ReservedLogicalStock FROM reserve_stock_request r WHERE r.partid IN (SELECT partId FROM tempPartIDs) AND r.deletedAt IS NULL;        \n" +
                "  \n" +
                "	SET v_Shortage = (v_AvailableStock + v_MainPartNonUmidStock) - (v_SafetyStock + v_ReservedLogicalStock);        \n" +
                "  \n" +
                "	SELECT 	IFNULL(SUM(pkgUnit), 0) INTO v_TotalUnitInUmid FROM tempStockRawDet;            \n" +
                "  \n" +
                "	SELECT 	v_AvailableStock availableStock,  		v_ReservedLogicalStock reservedLogicalStock,                  \n" +
                "		v_ReservedPhysicalStock reservedPhysicalStock,	v_AllocatedToKitStock allocatedStock,              \n" +
                "		v_PackagingAliasStock packagingAliasStock,	v_TotalInHouseStock totalInHouseStock,                  \n" +
                "		v_SafetyStock safetyStock,			v_Shortage shortage,            \n" +
                "		v_TotalUnitInUmid totalUnitInUmid,		v_MainPartNonUmidStock mainPartNonUmidStock,  \n" +
                "		v_PackagingPartNonUMIDStock packagingPartNonUMIDStock;             \n" +
                "  \n" +
                "	SELECT 	v_AvailableStockInUnit availableStock,  							fun_getStockInDefaultUnit(pComponentID,v_ReservedLogicalStock) reservedLogicalStock,                  \n" +
                "		fun_getStockInDefaultUnit(pComponentID,v_ReservedPhysicalStock) reservedPhysicalStock,		fun_getStockInDefaultUnit(pComponentID,v_AllocatedToKitStock) allocatedStock,              \n" +
                "		v_PackagingAliasStockInUnit packagingAliasStock,						v_TotalInHouseStockInUnit totalInHouseStock,                  \n" +
                "		fun_getStockInDefaultUnit(pComponentID,v_SafetyStock) safetyStock,				fun_getStockInDefaultUnit(pComponentID,v_Shortage) shortage,            \n" +
                "		fun_getStockInDefaultUnit(pComponentID,v_TotalUnitInUmid) totalUnitInUmid, 			fun_getStockInDefaultUnit(pComponentID,v_MainPartNonUmidStock) mainPartNonUmidStock,  \n" +
                "		v_PackagingPartNonUMIDStockInUnit packagingPartNonUMIDStock;             \n" +
                "  \n" +
                "	SELECT 	abbreviation, v_IsCPN isCPNStock     \n" +
                "	FROM 	uoms     \n" +
                "	WHERE 	measurementTypeID = (    \n" +
                "			SELECT 	measurementTypeID     \n" +
                "			FROM 	uoms     \n" +
                "			WHERE 	id = (    \n" +
                "				SELECT 	uom     \n" +
                "				FROM 	component     \n" +
                "				WHERE 	id = pComponentID     \n" +
                "						AND deletedAt IS NULL    \n" +
                "				)     \n" +
                "				AND deletedAt IS NULL    \n" +
                "			)     \n" +
                "			AND defaultUOM = 1     \n" +
                "			AND deletedAt IS NULL;            \n" +
                "  \n" +
                "    -- DROP TEMPORARY TABLE IF EXISTS tempStockRawDet;                  \n" +
                "    -- DROP TEMPORARY TABLE IF EXISTS tempPackagingAliasStockRawDet;                  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrievePurchaseInspectionRequirementList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseInspectionRequirementList`(                          \n" +
                "	IN pPageIndex INT(11),                          \n" +
                "	IN pRecordPerPage INT(11),                          \n" +
                "	IN pOrderBy VARCHAR(255),                          \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "	IN pPartId INT(11)      \n" +
                ")  \n" +
                "BEGIN                          \n" +
                "	DECLARE pOffset INT(11);              \n" +
                "	DECLARE rowNumWhere VARCHAR(255);              \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseInspectionRequirementList = CONCAT(\"   \n" +
                "		SELECT 	cird.id,  \n" +
                "			cird.partId,  \n" +
                "			cird.requirement,  \n" +
                "			fun_getUserNameByID(cird.updatedBy) updatedby,                      \n" +
                "			fun_getUserNameByID(cird.createdBy) createdby,                      \n" +
                "			fun_getUserNameByID(cird.deletedBy) deletedby,                      \n" +
                "			fun_getRoleByID(cird.createByRoleId) createdbyRole,                      \n" +
                "			fun_getRoleByID(cird.updateByRoleId) updatedbyRole,                      \n" +
                "			fun_getRoleByID(cird.deleteByRoleId) deletedbyRole,                      \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(cird.createdAt) createdAt,                      \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(cird.UpdatedAt) updatedAt,                      \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(cird.deletedAt) deletedAt   \n" +
                "		FROM 	componenet_inspection_requirement_det cird  \n" +
                "		WHERE	partId = \", pPartId ,\"  \n" +
                "				AND isDeleted = 0  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                            \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \",\" requirement ASC \") ;                                            \n" +
                "	ELSE                                            \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;                                            \n" +
                "	END IF;	                                            \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN              \n" +
                "		SET pWhereClause = ' 1=1 ' ;              \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                            \n" +
                "	ELSE	                                            \n" +
                "		SET rowNumWhere = '';                                            \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseInspectionRequirementList,\" ) c where 1=1 and \", pWhereClause);      \n" +
                "	PREPARE query1 FROM @SQLStatement1;                              \n" +
                "	EXECUTE query1;                              \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT a.* FROM ( \", @temp_Sproc_RetrievePurchaseInspectionRequirementList,\" ) a WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query2;                   \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(                                                                                                                        \n" +
                "    IN tableName VARCHAR(255),                                                                                                                        \n" +
                "    IN IDs LONGTEXT,                                                                                                                        \n" +
                "    IN deletedBy INT,                                                                                                                        \n" +
                "    IN entityID VARCHAR(255),                                                                                                                        \n" +
                "    IN refrenceIDs LONGTEXT,                                            \n" +
                "    IN countList INT,                  \n" +
                "    IN pRoleID INT                  \n" +
                ")  \n" +
                "BEGIN                                              \n" +
                "IF tableName=\"employees\" THEN                                                                                                                        \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                   \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"eco_type_category\" THEN                                                                                                                        \n" +
                "     CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                    \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"eco_type_values\" THEN                                                                                                                        \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                  \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"customers\" THEN                                                                                                                        \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                                                                      \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"certificate_standards\" THEN                                                                                                                        \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                    \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"department\" THEN                                                                                                                        \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                        \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"genericcategory\" THEN                                                                                                                        \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                   \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"equipment\" THEN                                                                                                                        \n" +
                "    CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                        \n" +
                "END IF;                                                                                                                                                                                                                             \n" +
                "IF tableName=\"master_templates\" THEN                                                                                                                        \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                   \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"operations\" THEN                                                                                                                        \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                  \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"workorder\" THEN                                                                                                                        \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                     \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"roles\" THEN                                                                                                                       \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"standard_class\" THEN                                                                                                                        \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"dataelement\" THEN                                                                                                                        \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                  \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN                                                                                                                        \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                                                                   \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"component\" THEN                                                                                                                        \n" +
                "    CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                            \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"workorder_cluster\" THEN                                                                                                                         \n" +
                "    CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                  \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"workorder_operation\" THEN                                                                                                                       \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                  \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"workorder_operation_part\" THEN                                                                                                                        \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                                                                    \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN                                                                                                                        \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                                                                      \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"workorder_operation_employee\" THEN                                                                                                                        \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                          \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN                                                                                                                        \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                                                                    \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"entity\" THEN                                                                                                                        \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                   \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"salesordermst\" THEN                                                                                                                        \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                      \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"mfgcodemst\" THEN                                                                                                                        \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                  \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN                                                                                                                        \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                    \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"shippedassembly\" THEN                                                                                                                        \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                  \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN                                                                                                                        \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                   \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"br_label_template\" THEN                                                                                                                        \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                   \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"measurement_types\" THEN                                                                                                                        \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                      \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"uoms\" THEN                                                                                                                        \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                     \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"jobtypes\" THEN                                                                                                                        \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                     \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"rfqtype\" THEN                                                                                                                        \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                      \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"reasonmst\" THEN                                                                                                                        \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                  \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"component_sid_stock\" THEN                                                                                                                           \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                            \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN                                                                                                                            \n" +
                "    CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                                                                \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"chart_templatemst\" THEN                                                                                                                         \n" +
                "    CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                                                                       \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"shipping_requestdet\" THEN                                                                                                                        \n" +
                "    CALL Sproc_checkDelete_shipping_requestdet(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                     \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"chart_rawdata_category\" THEN                                                                                                                        \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                                                                  \n" +
                "END IF;                                                                                                                                                                                                                                                                    \n" +
                "IF tableName=\"rfq_lineitems\" THEN                                                                                                                        \n" +
                "      CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                                                                                          \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"requirement\" THEN                                                                                                                        \n" +
                "    CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                 \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN                                                                                                                   \n" +
                "    CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                                                                                   \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"customer_addresses\" THEN                                                                                                                        \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                      \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"rfqforms\" THEN                                                                                                                        \n" +
                "    CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                      \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN                                                                                                                        \n" +
                "    CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                  \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"who_bought_who\" THEN                                                                                                                        \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                  \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"rfq_parttypemst\" THEN                                                                                                                        \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                  \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN                                                                                                                        \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                  \n" +
                "END IF;                                                                                                                        \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN                                                                                                                        \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                  \n" +
                "END IF;                                                                                                                  \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                                                                                                                        \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                      \n" +
                "END IF;                                                                                                    \n" +
                "IF tableName=\"cost_category\" THEN                                                                                                                        \n" +
                "    CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                       \n" +
                "END IF;                                                                                     \n" +
                "IF tableName=\"chartypemst\" THEN                                                                                                                        \n" +
                "    CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                                    \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"countrymst\" THEN                                                                    \n" +
                "     CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                  \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN                                                                    \n" +
                "     CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                  \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"rfq_assy_typemst\" THEN                                                                \n" +
                "     CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                              \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"warehousemst\" THEN                                                                \n" +
                "     CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                               \n" +
                "END IF;                                                         \n" +
                "IF tableName=\"binmst\" THEN                                                                \n" +
                "     CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                              \n" +
                "END IF;                                                     \n" +
                "IF tableName=\"rackmst\" THEN                                                                \n" +
                "     CALL Sproc_checkDelete_rackmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                              \n" +
                "END IF;        \n" +
                "IF tableName=\"component_logicalgroup\" THEN                                                        \n" +
                "     CALL Sproc_checkDelete_component_logical_group(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                              \n" +
                "END IF;                                                     \n" +
                "IF tableName=\"packing_slip_material_receive\" THEN                                                        \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                 \n" +
                "END IF;                                                \n" +
                "IF tableName=\"packing_slip_material_receive_det\" THEN                                                        \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive_det(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                              \n" +
                "END IF;                                                \n" +
                "IF tableName=\"packing_slip_track_number\" THEN                                                        \n" +
                "     CALL Sproc_checkDelete_packing_slip_track_number(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                              \n" +
                "END IF;                                             \n" +
                "IF tableName=\"reserve_stock_request\" THEN                                            \n" +
                "       	 CALL Sproc_checkDelete_reserve_stock_request(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                            \n" +
                "END IF;                                                                       \n" +
                "IF tableName=\"component_packagingmst\" THEN                                                          \n" +
                "     CALL Sproc_checkDelete_component_packagingmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                \n" +
                "END IF;                                                                     \n" +
                "IF tableName=\"workorder_trans_narrative_history\" THEN                                                          \n" +
                "     CALL Sproc_checkDelete_workorder_trans_narrative_history(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                \n" +
                "END IF;                                         \n" +
                "IF tableName=\"scannermst\" THEN                                                          \n" +
                "     CALL Sproc_checkDelete_Scanner(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                \n" +
                "END IF;                                        \n" +
                "IF tableName=\"component_alternatepn_validations\" THEN                                                         \n" +
                "     CALL Sproc_checkDelete_Alias_Parts_Validation(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                \n" +
                "END IF;                                                                                                             \n" +
                "IF tableName=\"workorder_operation_equipment_feeder_details\" THEN                                                                                                                         \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment_feeder_details(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                                                                       \n" +
                "END IF;                                \n" +
                "IF tableName=\"component_price_break_details\" THEN                                                                                                                         \n" +
                "    CALL Sproc_checkDelete_component_price_break_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                       \n" +
                "END IF;                                 \n" +
                "IF tableName=\"department_location\" THEN                                                                                                                         \n" +
                "    CALL Sproc_checkDelete_department_location(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                       \n" +
                "END IF;                                             \n" +
                "IF tableName=\"purchase_parts_details\" THEN                                                                                                                         \n" +
                "    CALL Sproc_checkDelete_purchase_parts_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                       \n" +
                "END IF;                                             \n" +
                "IF tableName=\"rfq_rohsmst\" THEN                                                                                                                         \n" +
                "    CALL Sproc_checkDelete_rfq_rohsmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                       \n" +
                "END IF;                        \n" +
                "IF tableName=\"component_partstatusmst\" THEN                                                                                                                         \n" +
                "    CALL Sproc_checkDelete_component_partstatusmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                       \n" +
                "END IF;                        \n" +
                "IF tableName=\"workorder_trans_umid_details\" THEN                                                                                                                         \n" +
                "    CALL Sproc_checkDelete_workorder_trans_umid_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                       \n" +
                "END IF;                 \n" +
                "IF tableName=\"labor_cost_template\" THEN                                                                                                                         \n" +
                "    CALL Sproc_checkDelete_labor_cost_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                       \n" +
                "END IF;                                                \n" +
                "IF tableName=\"rfq_packagecasetypemst\" THEN              \n" +
                "    CALL Sproc_checkDelete_rfq_packagecasetypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;            \n" +
                "IF tableName=\"component_dynamic_attribute\" THEN              \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;            \n" +
                "IF tableName=\"component_dynamic_attribute_mapping_part\" THEN              \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute_mapping_part(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;          \n" +
                "IF tableName=\"labeltemplatesmst\" THEN          \n" +
                "    CALL Sproc_checkDelete_labeltemplates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                   \n" +
                "END IF;       \n" +
                "IF tableName=\"reportmaster\" THEN          \n" +
                "    CALL Sproc_checkDelete_reportMaster(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                   \n" +
                "END IF;  \n" +
                "IF tableName=\"componenet_inspection_requirement_det\" THEN          \n" +
                "    CALL Sproc_checkDelete_componenet_inspection_requirement_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                                                                   \n" +
                "END IF;         \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_component` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component`(    \n" +
                "	IN tableName VARCHAR(255),    \n" +
                "	IN IDs LONGTEXT,    \n" +
                "	IN deletedBy INT,    \n" +
                "	IN entityID VARCHAR(255),    \n" +
                "	IN refrenceIDs LONGTEXT,    \n" +
                "	IN countList INT,    \n" +
                "    IN pRoleID INT    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION    \n" +
                "BEGIN    \n" +
                "	ROLLBACK;    \n" +
                "	RESIGNAL;    \n" +
                "END;    \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING    \n" +
                "BEGIN    \n" +
                "	ROLLBACK;    \n" +
                "	RESIGNAL;    \n" +
                "END;    \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempComponentIds;    \n" +
                "SET @sqlIds = CONCAT(' create temporary table tempComponentIds      \n" +
                "					select GROUP_CONCAT(id) id      \n" +
                "					  from component      \n" +
                "					 where systemGenerated = false    \n" +
                "                       and id in (',IDs,')      \n" +
                "						or refSupplierMfgpnComponentID in (',IDs,') ');      \n" +
                "		PREPARE stmt FROM @sqlIds;      \n" +
                "        EXECUTE stmt;      \n" +
                "  \n" +
                "	SELECT id INTO IDs      \n" +
                "    FROM tempComponentIds;      \n" +
                "    SET @deletedByUser = deletedBy;    \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempComponent;    \n" +
                "	SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as    \n" +
                "				select sum(cnt) cnt, msg    \n" +
                "                from (    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                      \n" +
                "					UNION ALL                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component_alternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                      \n" +
                "					UNION ALL                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component_packagingalias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                      \n" +
                "					UNION ALL                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component_processmaterial WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                      \n" +
                "					UNION ALL                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component_rohsalternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                      \n" +
                "					UNION ALL                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)                      \n" +
                "					UNION ALL                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component_drivetools WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                      \n" +
                "					UNION ALL                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                      \n" +
                "					union all                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg FROM eco_request WHERE deletedAt IS NULL AND (fromPartID IN(',IDs,') or toPartID IN(',IDs,')) LIMIT 1)                      \n" +
                "					union all                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg FROM rfq_lineitems_additional_comment WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                      \n" +
                "					union all                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assembly_excessstock_location\" else \"\" end as msg FROM workorder_assembly_excessstock_location WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                      \n" +
                "					union all                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component_cust_alias_rev_pn WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                      \n" +
                "					union all                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                      \n" +
                "					union all                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                      \n" +
                "					union all                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg FROM rfq_bom_header_component_configuration WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                      \n" +
                "					union all                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                      \n" +
                "					union all                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                      \n" +
                "					union all                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"kit_allocation\" else \"\" end as msg FROM kit_allocation WHERE assyID IN(',IDs,') LIMIT 1)                      \n" +
                "					union all                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg FROM rfq_assemblies WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                      \n" +
                "					union all                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg FROM salesorderdet WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                      \n" +
                "					union all                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det\" else \"\" end as msg FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                      \n" +
                "					union all                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg FROM rfq_lineitems WHERE deletedAt IS NULL AND (custPNID IN(',IDs,') OR partID IN(',IDs,')) LIMIT 1)                      \n" +
                "					union all                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND (distMfgPNID IN(',IDs,') OR mfgPNID IN(',IDs,') OR partID IN(',IDs,')) LIMIT 1)                      \n" +
                "					union all                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg FROM component_sid_stock WHERE deletedAt IS NULL AND (assyID IN(',IDs,') OR refcompid IN(',IDs,') OR RefCPNMFGPNID IN(',IDs,') OR refSupplierPartId IN(',IDs,')) LIMIT 1)                      \n" +
                "					union all                     \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND replacementPartID IN(',IDs,') LIMIT 1)          \n" +
                "					union all          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL and equipmentAs =''S'' AND assyId IN(',IDs,') LIMIT 1)        \n" +
                "					union all          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"componenet_inspection_requirement_det\" else \"\" end as msg FROM componenet_inspection_requirement_det WHERE deletedAt IS NULL AND partId IN(',IDs,') LIMIT 1)        \n" +
                "                ) q group by msg');        \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;        \n" +
                "        EXECUTE stmt;        \n" +
                "        IF (countList=FALSE) THEN        \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempComponent t)=0 THEN        \n" +
                "				START TRANSACTION;        \n" +
                "				SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" , packaginggroupID = null  where id IN(',IDs,') and deletedAt is NULL');        \n" +
                "						PREPARE stmt1 FROM @SQL1;        \n" +
                "						EXECUTE stmt1;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update part_sub_assy_relationship set  isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where (partID IN(',IDs,') or prPerPartID IN (',IDs,'))and deletedAt is NULL');        \n" +
                "						PREPARE stmt1 FROM @SQL1;        \n" +
                "						EXECUTE stmt1;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_alternatepn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');        \n" +
                "						PREPARE stmt1 FROM @SQL1;        \n" +
                "						EXECUTE stmt1;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_processmaterial set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');        \n" +
                "						PREPARE stmt1 FROM @SQL1;        \n" +
                "						EXECUTE stmt1;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_drivetools set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');        \n" +
                "						PREPARE stmt1 FROM @SQL1;        \n" +
                "						EXECUTE stmt1;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_cust_alias_rev_pn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refCPNPartID IN(',IDs,') and deletedAt is NULL');        \n" +
                "						PREPARE stmt1 FROM @SQL1;        \n" +
                "						EXECUTE stmt1;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');        \n" +
                "						PREPARE stmt1 FROM @SQL1;        \n" +
                "						EXECUTE stmt1;        \n" +
                "  \n" +
                "				-- start delete packaging alias        \n" +
                "                SET @SQl1 = CONCAT('update component_packagingalias set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');        \n" +
                "						PREPARE stmt1 FROM @SQL1;        \n" +
                "						EXECUTE stmt1;        \n" +
                "					UPDATE component        \n" +
                "					   SET packaginggroupID = NULL,        \n" +
                "							updatedBy = @deletedByUser,        \n" +
                "							updateByRoleId = pRoleID,        \n" +
                "							updatedAt = fun_DatetimetoUTCDateTime()        \n" +
                "					 WHERE isdeleted = FALSE        \n" +
                "					   AND id IN (SELECT c1.componentID         \n" +
                "							 FROM component_packagingalias c1        \n" +
                "								WHERE c1.isdeleted = FALSE        \n" +
                "								  AND c1.aliasgroupID IN        \n" +
                "										(SELECT c2.aliasgroupID        \n" +
                "										   FROM component_packagingalias c2        \n" +
                "										  WHERE c2.isdeleted = FALSE        \n" +
                "										  GROUP BY c2.aliasgroupID        \n" +
                "										 HAVING COUNT(1)=1));        \n" +
                "  \n" +
                "				UPDATE component_packagingalias a        \n" +
                "                JOIN (SELECT c2.aliasgroupID        \n" +
                "							FROM component_packagingalias c2        \n" +
                "							WHERE c2.isdeleted = FALSE        \n" +
                "							GROUP BY c2.aliasgroupID        \n" +
                "							HAVING COUNT(1)=1) b        \n" +
                "				   SET a.isDeleted = 1,        \n" +
                "						a.deletedBy = @deletedByUser,        \n" +
                "						a.deleteByRoleId = pRoleID,        \n" +
                "						a.deletedAt = fun_DatetimetoUTCDateTime()        \n" +
                "					WHERE a.isdeleted = FALSE        \n" +
                "					AND a.aliasgroupID = b.aliasgroupID;        \n" +
                "				-- end delete packaging alias        \n" +
                "  \n" +
                "                -- start delete RoHS alias        \n" +
                "                SET @SQl1 = CONCAT('update component_rohsalternatepn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');        \n" +
                "						PREPARE stmt1 FROM @SQL1;        \n" +
                "						EXECUTE stmt1;        \n" +
                "  \n" +
                "				UPDATE component        \n" +
                "				 SET rohsgroupID = NULL,        \n" +
                "					updatedBy = @deletedByUser,        \n" +
                "					updateByRoleId = pRoleID,        \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()        \n" +
                "					WHERE isdeleted = FALSE        \n" +
                "					  AND id IN (        \n" +
                "						SELECT c1.componentID        \n" +
                "						 FROM component_rohsalternatepn c1        \n" +
                "						WHERE c1.isdeleted = FALSE        \n" +
                "						  AND c1.aliasgroupID IN        \n" +
                "								(SELECT c2.aliasgroupID        \n" +
                "								   FROM component_rohsalternatepn c2        \n" +
                "									WHERE c2.isdeleted = FALSE        \n" +
                "									GROUP BY c2.aliasgroupID        \n" +
                "									HAVING COUNT(1)=1));        \n" +
                "  \n" +
                "				UPDATE component_rohsalternatepn a        \n" +
                "                JOIN (SELECT c2.aliasgroupID        \n" +
                "							   FROM component_rohsalternatepn c2        \n" +
                "								WHERE c2.isdeleted = FALSE        \n" +
                "								GROUP BY c2.aliasgroupID        \n" +
                "								HAVING COUNT(1)=1) b        \n" +
                "					SET a.isDeleted = 1,        \n" +
                "						a.deletedBy = @deletedByUser,        \n" +
                "						a.deleteByRoleId = pRoleID,        \n" +
                "						a.deletedAt = fun_DatetimetoUTCDateTime()        \n" +
                "					WHERE a.isdeleted = FALSE        \n" +
                "					  AND a.aliasgroupID = b.aliasgroupID;        \n" +
                "                -- start delete RoHS alias        \n" +
                "  \n" +
                "                SET @SQl1 = CONCAT('update component_otherpn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');        \n" +
                "						PREPARE stmt1 FROM @SQL1;        \n" +
                "						EXECUTE stmt1;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update Component_FunctionalTestingEquipment set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');        \n" +
                "						PREPARE stmt1 FROM @SQL1;        \n" +
                "						EXECUTE stmt1;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_requirefunctionaltype set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');        \n" +
                "						PREPARE stmt1 FROM @SQL1;        \n" +
                "						EXECUTE stmt1;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_requiremountingtype set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');        \n" +
                "						PREPARE stmt1 FROM @SQL1;        \n" +
                "						EXECUTE stmt1;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_standard_details set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');        \n" +
                "						PREPARE stmt1 FROM @SQL1;        \n" +
                "						EXECUTE stmt1;        \n" +
                "  \n" +
                "				SELECT * FROM tempComponent WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";                    \n" +
                "				COMMIT;                    \n" +
                "			ELSE                    \n" +
                "					SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempComponent t;                    \n" +
                "			END IF;                    \n" +
                "		ELSE                    \n" +
                "				SELECT t1.cnt,t2.display_page_name AS msg                    \n" +
                "				   FROM tempComponent t1                    \n" +
                "					INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name                    \n" +
                "					WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"                    \n" +
                "					ORDER BY t2.display_page_name;                    \n" +
                "		END IF;                    \n" +
                "		DROP TEMPORARY TABLE tempComponent;                    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_componenet_inspection_requirement_det` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_componenet_inspection_requirement_det`(                                                                  \n" +
                "	IN tableName VARCHAR(255),                                                                  \n" +
                "	IN IDs LONGTEXT,                                                                  \n" +
                "	IN deletedBy INT,                                                                  \n" +
                "	IN entityID VARCHAR(255),                                                                  \n" +
                "	IN refrenceIDs LONGTEXT,         \n" +
                "	IN countList INT,    \n" +
                "	IN pRoleID INT    \n" +
                ")  \n" +
                "BEGIN             \n" +
                "	SET @SQL = CONCAT('  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_delete_componenet_inspection_requirement_det AS                                                                  \n" +
                "				SELECT 0 cnt, \"\" as msg;    \n" +
                "		       ');                                                                \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                                  \n" +
                "	EXECUTE stmt;     \n" +
                "  \n" +
                "	IF (countList = FALSE) THEN  \n" +
                "		IF (SELECT SUM(t.cnt) FROM temp_delete_componenet_inspection_requirement_det t) = 0 THEN   \n" +
                "			SET @SQl1 = CONCAT('  \n" +
                "					UPDATE 	componenet_inspection_requirement_det   \n" +
                "					SET 	isDeleted=',1,',  \n" +
                "						deletedBy=',deletedBy,',   \n" +
                "						deleteByRoleId = ',pRoleID,',   \n" +
                "						deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"   \n" +
                "					where 	id IN(',IDs,') and deletedAt is NULL  \n" +
                "				');		                                                                  \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                                  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			SELECT * FROM temp_delete_componenet_inspection_requirement_det WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM temp_delete_componenet_inspection_requirement_det t;    \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT 		t1.cnt,  \n" +
                "				t2.display_page_name AS msg          \n" +
                "		FROM 		tempbr_label_template t1          \n" +
                "		INNER JOIN 	temp_delete_componenet_inspection_requirement_det t2 ON t1.msg=t2.tabel_name          \n" +
                "		WHERE 		IFNULL(cnt,0) > 0 AND msg IS NOT NULL 	  \n" +
                "					AND msg != \"\"          \n" +
                "		ORDER BY 	t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TABLE temp_delete_componenet_inspection_requirement_det;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2570,'2.00','V1','Changes of purchase inspection requiremet detail - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2570:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-07-2020 *********************************** */
                "CREATE TABLE `operating_temperature_conversion_mst` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `externalTemperatureValue` varchar(255) NOT NULL,  \n" +
                "  `minTemperature` int(11) NOT NULL,  \n" +
                "  `maxTemperature` int(11) NOT NULL,  \n" +
                "  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `createByRoleId` int(11) NOT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updateByRoleId` int(11) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deleteByRoleId` int(11) DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  UNIQUE KEY `UK_operatingTemperatureConversionMst` (`externalTemperatureValue`,`deletedAt`)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2571,'2.00','V1','created operating_temperature_conversion_mst table - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2571:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-07-2020 *********************************** */
                "INSERT INTO `page_detail`(`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`)   \n" +
                "VALUES ('Operating Temperature Conversion', '0', '0', 'setting.partmaintenance.operatingtemperatureconversion',   \n" +
                "		'app.operatingtemperatureconversion', '/operatingtemperatureconversion', 'Operating Temperature Conversion',   \n" +
                "		(select p.pageID from page_detail p where p.menuRoute = 'setting.partmaintenance'),   \n" +
                "		'0', '36', '1', 'icon-puzzle', '1', '1', '0', '1', 'Operating Temperature Conversion', '1');  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2572,'2.00','V1','created menu for Temperature Conversion master - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2572:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-07-2020 *********************************** */
                "drop procedure if exists `Sproc_GetOperatingTemperatureConversionList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetOperatingTemperatureConversionList`(      \n" +
                "IN ppageIndex INT(11),      \n" +
                "IN precordPerPage INT(11),      \n" +
                "IN pOrderBy VARCHAR(255),      \n" +
                "IN pWhereClause VARCHAR(16383)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetOperatingTemperatureConversionList =  \n" +
                "    CONCAT(\" select ot.id,  \n" +
                "					ot.externalTemperatureValue,  \n" +
                "					ot.minTemperature,  \n" +
                "					ot.maxTemperature,  \n" +
                "					fun_getUserNameByID(ot.createdBy) createdbyValue,  \n" +
                "					fun_getUserNameByID(ot.updatedBy) updatedbyValue,  \n" +
                "					fun_getRoleByID(ot.createByRoleId) createdbyRoleValue,  \n" +
                "					fun_getRoleByID(ot.updateByRoleId) updatedbyRoleValue,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(ot.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(ot.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue  \n" +
                "			  from operating_temperature_conversion_mst ot  \n" +
                "			 where ot.isDeleted = 0  \n" +
                "	\");  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY externalTemperatureValue ASC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN   \n" +
                "		SET pWhereClause = ' 1=1 ';  \n" +
                "	END IF;      \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN      \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;      \n" +
                "	/* to get total count of rows */      \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetOperatingTemperatureConversionList,\" ) c where \", pWhereClause);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetOperatingTemperatureConversionList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query1 FROM @SQLStatement2;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_checkDelete_operating_temperature_conversion_mst`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_operating_temperature_conversion_mst`(    \n" +
                "	IN tableName VARCHAR(255),    \n" +
                "	IN IDs LONGTEXT,    \n" +
                "	IN deletedBy INT,    \n" +
                "	IN entityID VARCHAR(255),    \n" +
                "	IN refrenceIDs LONGTEXT,    \n" +
                "	IN countList INT,    \n" +
                "    IN pRoleID INT    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION    \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "    set @deletedByUser = deletedBy;    \n" +
                "    DROP TEMPORARY TABLE if exists tempOperatingTemperature;    \n" +
                "	SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempOperatingTemperature as    \n" +
                "				select sum(cnt) cnt, msg    \n" +
                "                from (  \n" +
                "                    (SELECT 0 cnt ,CASE WHEN 0 > 0 then \"dummy\" else \"\" end as msg)  \n" +
                "                ) q group by msg');        \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "        EXECUTE stmt;  \n" +
                "        IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempOperatingTemperature t) = 0 THEN  \n" +
                "				START TRANSACTION;  \n" +
                "				SET @SQl1 = CONCAT('update operating_temperature_conversion_mst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "  \n" +
                "				SELECT * FROM tempOperatingTemperature WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "				COMMIT;  \n" +
                "			ELSE  \n" +
                "					SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempOperatingTemperature t;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "				SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "				   FROM tempOperatingTemperature t1  \n" +
                "					INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "					WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "					ORDER BY t2.display_page_name;  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE tempOperatingTemperature;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2573,'2.00','V1','created Sproc_GetOperatingTemperatureConversionList and delete SP - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2573:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-07-2020 *********************************** */
                "drop procedure if exists `Sproc_GetComponentExternalValues`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentExternalValues`(          \n" +
                "	IN ppageIndex INT(11),            \n" +
                "	IN precordPerPage INT(11),            \n" +
                "	IN pOrderBy VARCHAR(255),            \n" +
                "	IN pWhereClause VARCHAR(16383),            \n" +
                "	IN pFieldName VARCHAR(500)          \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "	DECLARE pOffset INT(11);          \n" +
                "	DECLARE rowNumWhere VARCHAR(255);          \n" +
                "	DECLARE vJoinTable VARCHAR(500);          \n" +
                "	DECLARE vWhereCriteria VARCHAR(500);          \n" +
                "    DECLARE vSelectFields VARCHAR(500);          \n" +
                "    DECLARE vGroupByFields VARCHAR(500);          \n" +
                "	IF (pFieldName = 'connectertype') THEN          \n" +
                "		SET vJoinTable = 'left join rfq_connectertypemst con on con.id = co.connecterTypeID ';          \n" +
                "		SET vSelectFields = 'co.connecterTypeID id, con.name internalName, co.connectorTypeText externalValue ';          \n" +
                "        SET vWhereCriteria = ' where co.connectorTypeText is not null or co.connecterTypeID is not null ';    \n" +
                "        SET vGroupByFields = 'co.connecterTypeID, con.name, co.connectorTypeText ';          \n" +
                "	ELSEIF (pFieldName = 'functionaltype') THEN          \n" +
                "		SET vJoinTable = 'left join rfq_parttypemst ft on ft.id = co.functionalCategoryID ';          \n" +
                "		SET vSelectFields = 'co.functionalCategoryID id, ft.partTypeName internalName, co.functionalCategoryText externalValue ';          \n" +
                "        SET vWhereCriteria = ' where co.functionalCategoryText is not null or co.functionalCategoryID is not null ';    \n" +
                "        SET vGroupByFields = 'co.functionalCategoryID, ft.partTypeName, co.functionalCategoryText ';          \n" +
                "	ELSEIF (pFieldName = 'mountingtype') THEN          \n" +
                "		SET vJoinTable = 'left join rfq_mountingtypemst mt on mt.id = co.mountingTypeID ';          \n" +
                "		SET vSelectFields = 'co.mountingTypeID id, mt.name internalName, co.mountingTypeText externalValue ';          \n" +
                "        SET vWhereCriteria = ' where co.mountingTypeText is not null or co.mountingTypeID is not null ';    \n" +
                "        SET vGroupByFields = 'co.mountingTypeID, mt.name, co.mountingTypeText ';          \n" +
                "	ELSEIF (pFieldName = 'operatingtemperature') THEN          \n" +
                "		SET vJoinTable = ' ';          \n" +
                "		SET vSelectFields = ' 0 id, co.operatingTemp externalValue, concat(round(co.minOperatingTemp),\"°C\") internalName, concat(round(co.minOperatingTemp),\"°C\") minOperatingTemp, concat(round(co.maxOperatingTemp),\"°C\") maxOperatingTemp ';  \n" +
                "        SET vWhereCriteria = ' where co.isdeleted = 0 and (co.operatingTemp is not null and co.operatingTemp != \"\") OR co.minOperatingTemp is not null or co.maxOperatingTemp is not null ';  \n" +
                "        SET vGroupByFields = ' co.operatingTemp, co.minOperatingTemp, co.maxOperatingTemp ';  \n" +
                "    ELSEIF (pFieldName = 'partstatus') THEN          \n" +
                "		SET vJoinTable = 'left join component_partstatusmst gc on gc.id = co.partStatus ';          \n" +
                "		SET vSelectFields = 'co.partStatus id, gc.name internalName, co.partStatusText externalValue ';          \n" +
                "        SET vWhereCriteria = ' where co.partStatusText is not null or co.partStatus is not null ';    \n" +
                "        SET vGroupByFields = 'co.partStatus, gc.name, co.partStatusText ';          \n" +
                "	ELSEIF (pFieldName = 'rohsstatus') THEN          \n" +
                "		SET vJoinTable = 'left join rfq_rohsmst ro on ro.id = co.RoHSStatusID ';          \n" +
                "		SET vSelectFields = 'co.RoHSStatusID id, ro.name internalName, co.rohsText externalValue ';          \n" +
                "        SET vWhereCriteria = ' where co.rohsText is not null or co.RoHSStatusID is not null ';    \n" +
                "        SET vGroupByFields = 'co.RoHSStatusID, ro.name, co.rohsText ';          \n" +
                "	ELSEIF (pFieldName = 'unit') THEN          \n" +
                "		SET vJoinTable = 'left join uoms u on u.id = co.uom ';          \n" +
                "		SET vSelectFields = 'co.uom id, u.unitName internalName, co.uomText externalValue ';         \n" +
                "        SET vWhereCriteria = ' where co.uomText is not null or co.uom is not null ';    \n" +
                "        SET vGroupByFields = 'co.uom, u.unitName, co.uomText ';          \n" +
                "    END IF;        \n" +
                "  \n" +
                "	SET @temp_Sproc_GetComponentExternalValues = CONCAT(\"select \",vSelectFields,          \n" +
                "						\"from component co \",          \n" +
                "						vJoinTable,          \n" +
                "						vWhereCriteria ,\"      \n" +
                "                        group by \",vGroupByFields);          \n" +
                "   # PREPARE SQLStatement FROM @vQuery;          \n" +
                "	#EXECUTE SQLStatement;          \n" +
                "	#DEALLOCATE PREPARE SQLStatement;          \n" +
                "    IF (pOrderBy IS NOT NULL) THEN          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "	ELSE          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgPN DESC\") ;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN          \n" +
                "		SET pWhereClause = '1=1' ;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN          \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
                "	ELSE          \n" +
                "		SET rowNumWhere = '';          \n" +
                "	END IF;          \n" +
                "  \n" +
                "    /* to get total count of rows */           \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetComponentExternalValues,\" ) c where 1=1 and \", pWhereClause);          \n" +
                "    PREPARE query2 FROM @SQLStatement2;          \n" +
                "	EXECUTE query2;          \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetComponentExternalValues,\" ) c          \n" +
                "		where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
                "	PREPARE query1 FROM @SQLStatement2;          \n" +
                "	EXECUTE query1;          \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2574,'2.00','V1','changes in Sproc_GetComponentExternalValues - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2574:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-07-2020 *********************************** */
                "drop procedure if exists `Sproc_checkDelete`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(             \n" +
                "    IN tableName VARCHAR(255),             \n" +
                "    IN IDs LONGTEXT,             \n" +
                "    IN deletedBy INT,             \n" +
                "    IN entityID VARCHAR(255),             \n" +
                "    IN refrenceIDs LONGTEXT,  \n" +
                "    IN countList INT,                  \n" +
                "    IN pRoleID INT                  \n" +
                ")  \n" +
                "BEGIN                                              \n" +
                "IF tableName=\"employees\" THEN             \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;             \n" +
                "IF tableName=\"eco_type_category\" THEN             \n" +
                "     CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);         \n" +
                "END IF;             \n" +
                "IF tableName=\"eco_type_values\" THEN             \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);       \n" +
                "END IF;             \n" +
                "IF tableName=\"customers\" THEN             \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);           \n" +
                "END IF;             \n" +
                "IF tableName=\"certificate_standards\" THEN             \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);         \n" +
                "END IF;             \n" +
                "IF tableName=\"department\" THEN             \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);             \n" +
                "END IF;             \n" +
                "IF tableName=\"genericcategory\" THEN             \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;             \n" +
                "IF tableName=\"equipment\" THEN             \n" +
                "    CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;                                     \n" +
                "IF tableName=\"master_templates\" THEN             \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;             \n" +
                "IF tableName=\"operations\" THEN             \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);       \n" +
                "END IF;             \n" +
                "IF tableName=\"workorder\" THEN             \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;             \n" +
                "IF tableName=\"roles\" THEN            \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;             \n" +
                "IF tableName=\"standard_class\" THEN             \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;             \n" +
                "IF tableName=\"dataelement\" THEN             \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;             \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN             \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);        \n" +
                "END IF;             \n" +
                "IF tableName=\"component\" THEN             \n" +
                "    CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;             \n" +
                "IF tableName=\"workorder_cluster\" THEN              \n" +
                "    CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;             \n" +
                "IF tableName=\"workorder_operation\" THEN            \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;             \n" +
                "IF tableName=\"workorder_operation_part\" THEN             \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);         \n" +
                "END IF;             \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN             \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);           \n" +
                "END IF;             \n" +
                "IF tableName=\"workorder_operation_employee\" THEN             \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);          \n" +
                "END IF;             \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN             \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);         \n" +
                "END IF;             \n" +
                "IF tableName=\"entity\" THEN             \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;             \n" +
                "IF tableName=\"salesordermst\" THEN             \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);           \n" +
                "END IF;             \n" +
                "IF tableName=\"mfgcodemst\" THEN             \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);       \n" +
                "END IF;             \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN             \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);    \n" +
                "END IF;             \n" +
                "IF tableName=\"shippedassembly\" THEN             \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;             \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN             \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);   \n" +
                "END IF;             \n" +
                "IF tableName=\"br_label_template\" THEN             \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);   \n" +
                "END IF;             \n" +
                "IF tableName=\"measurement_types\" THEN             \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);           \n" +
                "END IF;             \n" +
                "IF tableName=\"uoms\" THEN             \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;             \n" +
                "IF tableName=\"jobtypes\" THEN             \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;             \n" +
                "IF tableName=\"rfqtype\" THEN             \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);           \n" +
                "END IF;             \n" +
                "IF tableName=\"reasonmst\" THEN             \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;             \n" +
                "IF tableName=\"component_sid_stock\" THEN   \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;             \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN    \n" +
                "    CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);     \n" +
                "END IF;             \n" +
                "IF tableName=\"chart_templatemst\" THEN              \n" +
                "    CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);            \n" +
                "END IF;             \n" +
                "IF tableName=\"shipping_requestdet\" THEN             \n" +
                "    CALL Sproc_checkDelete_shipping_requestdet(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;             \n" +
                "IF tableName=\"chart_rawdata_category\" THEN             \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);       \n" +
                "END IF;                    \n" +
                "IF tableName=\"rfq_lineitems\" THEN             \n" +
                "      CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;             \n" +
                "IF tableName=\"requirement\" THEN             \n" +
                "    CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);   \n" +
                "END IF;             \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN        \n" +
                "    CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);           \n" +
                "END IF;             \n" +
                "IF tableName=\"customer_addresses\" THEN             \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);           \n" +
                "END IF;             \n" +
                "IF tableName=\"rfqforms\" THEN             \n" +
                "    CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);           \n" +
                "END IF;             \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN             \n" +
                "    CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;             \n" +
                "IF tableName=\"who_bought_who\" THEN             \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;             \n" +
                "IF tableName=\"rfq_parttypemst\" THEN             \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;             \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN             \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;             \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN             \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;       \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN             \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);           \n" +
                "END IF;                                    \n" +
                "IF tableName=\"cost_category\" THEN             \n" +
                "    CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                       \n" +
                "END IF;                     \n" +
                "IF tableName=\"chartypemst\" THEN             \n" +
                "    CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                    \n" +
                "END IF;    \n" +
                "IF tableName=\"countrymst\" THEN    \n" +
                "     CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN    \n" +
                "     CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_assy_typemst\" THEN  \n" +
                "     CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                              \n" +
                "END IF;                                                            \n" +
                "IF tableName=\"warehousemst\" THEN  \n" +
                "     CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                               \n" +
                "END IF;                                                         \n" +
                "IF tableName=\"binmst\" THEN  \n" +
                "     CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                              \n" +
                "END IF;                                                     \n" +
                "IF tableName=\"rackmst\" THEN  \n" +
                "     CALL Sproc_checkDelete_rackmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                              \n" +
                "END IF;        \n" +
                "IF tableName=\"component_logicalgroup\" THEN                                                        \n" +
                "     CALL Sproc_checkDelete_component_logical_group(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                              \n" +
                "END IF;                                                     \n" +
                "IF tableName=\"packing_slip_material_receive\" THEN                                                        \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);   \n" +
                "END IF;                                                \n" +
                "IF tableName=\"packing_slip_material_receive_det\" THEN                                                        \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive_det(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                              \n" +
                "END IF;                                                \n" +
                "IF tableName=\"packing_slip_track_number\" THEN                                                        \n" +
                "     CALL Sproc_checkDelete_packing_slip_track_number(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                              \n" +
                "END IF;                                             \n" +
                "IF tableName=\"reserve_stock_request\" THEN                                            \n" +
                "       	 CALL Sproc_checkDelete_reserve_stock_request(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                            \n" +
                "END IF;       \n" +
                "IF tableName=\"component_packagingmst\" THEN                                                          \n" +
                "     CALL Sproc_checkDelete_component_packagingmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;     \n" +
                "IF tableName=\"workorder_trans_narrative_history\" THEN                                                          \n" +
                "     CALL Sproc_checkDelete_workorder_trans_narrative_history(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;                                         \n" +
                "IF tableName=\"scannermst\" THEN                                                          \n" +
                "     CALL Sproc_checkDelete_Scanner(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;                                        \n" +
                "IF tableName=\"component_alternatepn_validations\" THEN                                                         \n" +
                "     CALL Sproc_checkDelete_Alias_Parts_Validation(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_equipment_feeder_details\" THEN              \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment_feeder_details(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);            \n" +
                "END IF;                                \n" +
                "IF tableName=\"component_price_break_details\" THEN              \n" +
                "    CALL Sproc_checkDelete_component_price_break_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                                 \n" +
                "IF tableName=\"department_location\" THEN              \n" +
                "    CALL Sproc_checkDelete_department_location(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                                             \n" +
                "IF tableName=\"purchase_parts_details\" THEN              \n" +
                "    CALL Sproc_checkDelete_purchase_parts_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                                             \n" +
                "IF tableName=\"rfq_rohsmst\" THEN              \n" +
                "    CALL Sproc_checkDelete_rfq_rohsmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                        \n" +
                "IF tableName=\"component_partstatusmst\" THEN              \n" +
                "    CALL Sproc_checkDelete_component_partstatusmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                        \n" +
                "IF tableName=\"workorder_trans_umid_details\" THEN              \n" +
                "    CALL Sproc_checkDelete_workorder_trans_umid_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                 \n" +
                "IF tableName=\"labor_cost_template\" THEN              \n" +
                "    CALL Sproc_checkDelete_labor_cost_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                                                \n" +
                "IF tableName=\"rfq_packagecasetypemst\" THEN              \n" +
                "    CALL Sproc_checkDelete_rfq_packagecasetypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;            \n" +
                "IF tableName=\"component_dynamic_attribute\" THEN              \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;            \n" +
                "IF tableName=\"component_dynamic_attribute_mapping_part\" THEN              \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute_mapping_part(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;          \n" +
                "IF tableName=\"labeltemplatesmst\" THEN          \n" +
                "    CALL Sproc_checkDelete_labeltemplates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;       \n" +
                "IF tableName=\"reportmaster\" THEN          \n" +
                "    CALL Sproc_checkDelete_reportMaster(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;         \n" +
                "IF tableName=\"operating_temperature_conversion_mst\" THEN          \n" +
                "    CALL Sproc_checkDelete_operating_temperature_conversion_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2575,'2.00','V1','change Sproc_checkDelete SP - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2575:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-07-2020 *********************************** */
                "drop procedure if exists `Sproc_GetComponentList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentList`(            \n" +
                "	IN ppageIndex INT(11),            \n" +
                "	IN precordPerPage INT(11),            \n" +
                "	IN pOrderBy VARCHAR(255),            \n" +
                "	IN pWhereClause VARCHAR(16383),            \n" +
                "	IN pIsMFG TINYINT(1),            \n" +
                "    IN pMfgCodeIDs LONGTEXT,            \n" +
                "    IN pMfgCodeIdsForSupplierParts LONGTEXT,            \n" +
                "    IN pPackagingIDs LONGTEXT,            \n" +
                "    IN pPartStatusIDs LONGTEXT,            \n" +
                "    IN pMountingTypeIDs LONGTEXT,            \n" +
                "    IN pExternalMountingTypeValues LONGTEXT,            \n" +
                "    IN pFunctionalTypeIDs LONGTEXT,            \n" +
                "    IN pExternalFunctionalTypeValues LONGTEXT,            \n" +
                "    IN pAttributesSearchHeader LONGTEXT,            \n" +
                "    IN pAttributesSearch LONGTEXT,            \n" +
                "    IN pPackagingAlias TEXT,            \n" +
                "    IN pAlternatePart TEXT,            \n" +
                "    IN pRoHSAlternatePart TEXT,            \n" +
                "    IN pPartUsedInAssembly TEXT,            \n" +
                "    IN pMultiplePartNumbers LONGTEXT,            \n" +
                "    IN pStockQuantity TEXT,            \n" +
                "    IN pPartTypeIDs LONGTEXT,            \n" +
                "    IN pCertificateStandardsIds LONGTEXT,            \n" +
                "    IN pStandardsClassIds LONGTEXT,            \n" +
                "    IN pAssemblyIds LONGTEXT,            \n" +
                "    IN pAssemblyTypeIds LONGTEXT,            \n" +
                "    IN pRohsIds LONGTEXT,            \n" +
                "    IN pExternalRoHSStatusListValues LONGTEXT,            \n" +
                "    IN pOperationalAttributeIds LONGTEXT,            \n" +
                "    IN pAcceptableShippingCountryIds LONGTEXT,            \n" +
                "    IN pComponentOrdering TEXT,            \n" +
                "    IN pComponentUsageCriteria TEXT,            \n" +
                "    IN pIsRefreshMasterFilters TINYINT(1),            \n" +
                "    IN pFromDate DATE,            \n" +
                "    IN pToDate DATE,            \n" +
                "    IN pIsReversal TINYINT(1),            \n" +
                "    IN pIsBOMActivityStarted TINYINT(1),            \n" +
                "    IN pIsEcoDfmColumnVisible TINYINT(1),            \n" +
                "    IN pIsSearchFromHeader TINYINT(1),            \n" +
                "    IN pIsExportControl TINYINT(1),            \n" +
                "    IN pObsoleteDate DATE,  \n" +
                "    IN pIsOperatingTemperatureBlank TINYINT(1)  \n" +
                "    )  \n" +
                "BEGIN            \n" +
                "	DECLARE pOffset INT(11);            \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                        \n" +
                "    DECLARE attributeSearchString LONGTEXT;                        \n" +
                "    DECLARE attributeSearchLength INT DEFAULT 0;                        \n" +
                "    DECLARE attributeSearchChip    VARCHAR(100) DEFAULT NULL;                        \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;                        \n" +
                "    DECLARE vPartUsedInAssemblyExists VARCHAR(20);                        \n" +
                "    DECLARE vPartUsedInAssemblyAndOR VARCHAR(20);                        \n" +
                "  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);           \n" +
                "    DECLARE vTimeZone VARCHAR(50);           \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "  SET @SQLStatement1=\"                                \n" +
                "	SELECT co.*, mf.mfgCode, mf.mfgName as manufacturerName, mf.displayOrder mfgDisplayOrder,             \n" +
                "		(case when isGoodPart!=2 and mf.mfgType = 'MFG' then 1 else 0 end) as isCopyPart,                                \n" +
                "		gc.name AS partStatusValue,            \n" +
                "        gc.displayOrder parStatusDisplayOrder,            \n" +
                "		mf.mfgType \";                \n" +
                "	IF pIsMFG = TRUE THEN            \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                \n" +
                "			null AliasMFGPN,                \n" +
                "			null AliasMFGCode,            \n" +
                "			null AliasMFGCodeID,            \n" +
                "			null AliascompID,            \n" +
                "			null AliasMFGName,            \n" +
                "            null AliasMFGDisplayOrder\");             \n" +
                "    ELSE            \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                \n" +
                "		(case when (mf.mfgType = 'DIST' and co.refSupplierMfgpnComponentID is not null) then (select MFGPN from component vu_co where vu_co.id = co.refSupplierMfgpnComponentID limit 1) else null end) AliasMFGPN,                \n" +
                "         mfc.mfgCode AliasMFGCode,            \n" +
                "        mfc.id AliasMFGCodeID,            \n" +
                "	    co.refSupplierMfgpnComponentID AliascompID,            \n" +
                "        mfc.mfgName as AliasMFGName,            \n" +
                "        mfc.displayOrder AliasMFGDisplayOrder \");             \n" +
                "	END IF;                \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                \n" +
                "		ro.name AS `rohsComplientConvertedValue`,              \n" +
                "        ro.displayOrder rohsDisplayOrder,            \n" +
                "		ro.rohsIcon AS `rohsIcon`,                \n" +
                "		(CASE WHEN (`co`.`isGoodPart` = 1) THEN 'Correct Part'                \n" +
                "					WHEN (`co`.`isGoodPart` = 2) THEN 'Incorrect Part'                \n" +
                "					WHEN (`co`.`isGoodPart` = 3) THEN 'TBD Part'                \n" +
                "					ELSE '' END) AS `isGoodPartValue`,                \n" +
                "		case when co.isCustom = 1 then            \n" +
                "				'Yes'            \n" +
                "			else 'No' end as isCustomValue,            \n" +
                "		case when co.isLeadFree = 1 then            \n" +
                "				'Yes'            \n" +
                "			else 'No' end as isLeadFreeValue,            \n" +
                "		case when co.isCPN = 1 then            \n" +
                "				'Yes'            \n" +
                "			else 'No' end as isCPNValue,            \n" +
                "		pt.partTypeName functionalCategoryName,                \n" +
                "        pt.displayOrder functionalCategoryDisplayOrder,            \n" +
                "		mt.name mountingTypeName,                \n" +
                "        mt.displayOrder mountingTypeDisplayOrder,            \n" +
                "		pc.categoryName,                \n" +
                "		rct.name connecterTypeName,                \n" +
                "		u.unitName,                \n" +
                "		CONCAT(cmsl.levelRating,' (', cmsl.time,')') mslName,                \n" +
                "		pck.name packagingName,                \n" +
                "        pck.displayOrder packagingDisplayOrder,            \n" +
                "			(CASE WHEN (`co`.`isReversal` = 1) THEN 'Yes'                \n" +
                "					ELSE 'No' END) AS `reversalPart`,                \n" +
                "		fun_getExportControlDetailFromPartID(co.id) as isExportControl,                \n" +
                "		fun_getUserNameByID(co.updatedBy) updatedbyValue,                \n" +
                "		fun_getUserNameByID(co.createdBy) createdbyValue,                \n" +
                "		fun_getRoleByID(co.createByRoleId) createdbyRoleValue,                \n" +
                "		fun_getRoleByID(co.updateByRoleId) updatedbyRoleValue,                \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(co.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,          \n" +
                " 		fun_ApplyCommonDateTimeFormatByParaValue(co.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue,          \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(co.updatedAtApi,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtApiValue,          \n" +
                "		/*fun_ConvertUTCDatetimeToDataKeyTimeZone(co.createdAt) createdAtValue,                \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(co.UpdatedAt) updatedAtValue,                \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(co.updatedAtApi) updatedAtApiValue,*/          \n" +
                "		(CASE WHEN (co.systemGenerated = 0) THEN 'No'                \n" +
                "		WHEN (co.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SystemGeneratedValue`,                \n" +
                "        pct.name packageCaseTypeValue,                \n" +
                "        concat(pt.partTypeName,' - ',mt.name) groupName,                \n" +
                "		case when co.category = 3 then                \n" +
                "			fun_getSamplePicturesUploadCount(co.id)                \n" +
                "		end uploadedSamplePicturesCount,                \n" +
                "		case when co.category = 3 then                \n" +
                "			fun_getRFQAssemblyListByPartID(co.id)                \n" +
                "		end assemblyCount,                \n" +
                "		case when co.category = 3 then                \n" +
                "			fun_getBOMLineCountByPartID(co.id)                \n" +
                "		end bomLineCount,                \n" +
                "		case when co.category = 3 then                \n" +
                "			fun_getRFQStatusByPartID(co.id)                \n" +
                "		end quoteProgress,          \n" +
                "		CASE when co.category = 3 then                \n" +
                "		 	fun_getRFQIDByPartID(co.id)               \n" +
                "		END rfqAssyID,                 \n" +
                "		/*case when co.category = 3 then                \n" +
                "			(select id from rfq_assemblies WHERE partId = co.id AND isDeleted = 0 LIMIT 1)                \n" +
                "		end rfqAssyID,*/          \n" +
                "		concat(usr.firstName, ' ', usr.lastName) activityStartedByUserName,                \n" +
                "		case when co.isActivityStart=true then                \n" +
                "				TIMESTAMPDIFF(SECOND, co.activityStartAt,fun_DatetimetoUTCDateTime())                \n" +
                "			else null end activityStartTime,                \n" +
                "		rat.name assemblyTypeName \");                \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') OR pComponentOrdering = 'STOCK' THEN                \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentStock(co.id) partStock \");                \n" +
                "	END IF;                \n" +
                "    IF pComponentOrdering = 'USAGE' THEN                \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentUsage(co.id,'\",pFromDate,\"','\",pToDate,\"','\",pComponentUsageCriteria,\"') partUsage \");                                  \n" +
                "	END IF;                \n" +
                "  \n" +
                "    IF pIsEcoDfmColumnVisible = TRUE THEN                \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , (select count(1)                \n" +
                "													  from eco_request ec                \n" +
                "													 where ec.isdeleted = 0                \n" +
                "													   and ec.finalstatus = 'P'                \n" +
                "													   and ec.fromPartID = co.id) activeEcoDfmCount \");                \n" +
                "	END IF;                \n" +
                "  \n" +
                "SET @SQLStatement1=CONCAT(@SQLStatement1,\"                \n" +
                "	FROM component co                \n" +
                "		LEFT JOIN rfq_partcategory pc ON pc.id = co.partType                \n" +
                "		JOIN mfgcodemst mf ON co.mfgcodeID = mf.id                    \n" +
                "		LEFT JOIN component_partstatusmst gc ON gc.id = co.partStatus                    \n" +
                "		LEFT JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id                    \n" +
                "		LEFT JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID                    \n" +
                "		LEFT JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID                    \n" +
                "		LEFT JOIN rfq_connectertypemst rct ON co.connecterTypeID = rct.id                \n" +
                "		LEFT JOIN uoms u ON u.id = co.uom                \n" +
                "		LEFT JOIN component_mslmst cmsl ON cmsl.id = co.mslID                \n" +
                "        left join rfq_packagecasetypemst pct ON pct.id = co.partPackageID                \n" +
                "        LEFT JOIN users usr ON usr.id = co.activityStartBy                \n" +
                "        left join rfq_assy_typemst rat ON rat.id = co.assemblyType                \n" +
                "		LEFT JOIN component_packagingmst pck ON pck.id = co.packagingID \");            \n" +
                "    IF pIsMFG = FALSE THEN          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1,\"          \n" +
                "			JOIN mfgcodemst mfc ON mfc.id = co.refMfgPNMfgCodeId \");          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@SQLStatement1,\"          \n" +
                "    WHERE co.isdeleted = 0 \");          \n" +
                "  \n" +
                "	IF pIsMFG = TRUE THEN          \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''MFG'' ');          \n" +
                "    ELSE          \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''DIST'' ');          \n" +
                "    END IF;          \n" +
                "   #select @SQLStatement1;          \n" +
                "	IF (pOrderBy IS NOT NULL) THEN          \n" +
                "		IF pComponentOrdering = 'MFG' THEN          \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN          \n" +
                "				SET pOrderBy = CONCAT(\"MFGCode asc, \" , pOrderBy);          \n" +
                "            END IF;          \n" +
                "		ELSEIF pComponentOrdering = 'MFGPN' THEN          \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN          \n" +
                "				SET pOrderBy = CONCAT(\"mfgPN asc, \" , pOrderBy);          \n" +
                "			END IF;          \n" +
                "		ELSEIF pComponentOrdering = 'USAGE' THEN          \n" +
                "			SET pOrderBy = CONCAT(\"partUsage desc, \" , pOrderBy);          \n" +
                "		ELSEIF pComponentOrdering = 'STOCK' THEN          \n" +
                "			SET pOrderBy = CONCAT(\"partStock desc, \" , pOrderBy);          \n" +
                "		END IF;          \n" +
                "        SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);          \n" +
                "	ELSE          \n" +
                "		SET pOrderBy = \"ORDER BY mfgPN DESC\" ;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                \n" +
                "		SET pWhereClause = '1=1' ;                                \n" +
                "	END IF;                                \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN            \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
                "	ELSE            \n" +
                "		SET rowNumWhere = '';            \n" +
                "	END IF;            \n" +
                "  \n" +
                "    IF (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN            \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mfgcodeID in (', pMfgCodeIDs, ' )');            \n" +
                "    END IF;            \n" +
                "    IF (pMfgCodeIdsForSupplierParts IS NOT NULL AND pMfgCodeIdsForSupplierParts != '') THEN            \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND refMfgPNMfgCodeId in (', pMfgCodeIdsForSupplierParts, ' )');            \n" +
                "    END IF;            \n" +
                "    IF (pPackagingIDs IS NOT NULL AND pPackagingIDs != '') THEN                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND packagingID in (', pPackagingIDs, ' )');                                \n" +
                "    END IF;                                \n" +
                "    IF (pPartStatusIDs IS NOT NULL AND pPartStatusIDs != '') THEN                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND partStatus in (', pPartStatusIDs, ' )');                                \n" +
                "    END IF;                                \n" +
                "    IF (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND mountingTypeID in (', pMountingTypeIDs, ' )');                                \n" +
                "    END IF;                                \n" +
                "    IF (pExternalMountingTypeValues IS NOT NULL AND pExternalMountingTypeValues != '') THEN                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND mountingTypeText in (', pExternalMountingTypeValues, ' )');                                \n" +
                "    END IF;                                \n" +
                "    IF (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND functionalCategoryID in (', pFunctionalTypeIDs, ' )');                                \n" +
                "    END IF;                                \n" +
                "    IF (pExternalFunctionalTypeValues IS NOT NULL AND pExternalFunctionalTypeValues != '') THEN                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND functionalCategoryText in (', pExternalFunctionalTypeValues, ' )');                                \n" +
                "    END IF;                                \n" +
                "    IF (pMultiplePartNumbers IS NOT NULL AND pMultiplePartNumbers != '') THEN                                \n" +
                "		IF pIsMFG = TRUE THEN                                \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (mfgPN in (', pMultiplePartNumbers, ' )                              \n" +
                "																OR exists (select 1 from component_otherpn cp                              \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))                              \n" +
                "																)');                                \n" +
                "		ELSE                                \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (mfgPN in (', pMultiplePartNumbers, ' )                                \n" +
                "																OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID              \n" +
                "																and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null              \n" +
                "                                                                and cc.mfgpn in (', pMultiplePartNumbers, '))                              \n" +
                "                                                                OR exists (select 1 from component_otherpn cp                              \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))                              \n" +
                "                                                                )');                                \n" +
                "        END IF;                                \n" +
                "    END IF;                                \n" +
                "    IF (pPartTypeIDs IS NOT NULL AND pPartTypeIDs != '') THEN                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND partType in (', pPartTypeIDs, ' )');                                \n" +
                "    END IF;                                \n" +
                "    IF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '' AND                                \n" +
                "		pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' ) and csd.ClassID in (', pStandardsClassIds, ' )) ');                                \n" +
                "	ELSEIF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '') THEN                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' )) ');                                \n" +
                "	ELSEIF (pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.ClassID in (', pStandardsClassIds, ' )) ');                                \n" +
                "    END IF;                                \n" +
                "  \n" +
                "    IF (pAssemblyIds IS NOT NULL AND pAssemblyIds != '') THEN                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))                    \n" +
                "															or exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))                    \n" +
                "															or exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and rl.partID in (', pAssemblyIds, '))) ');                    \n" +
                "    END IF;                    \n" +
                "  \n" +
                "    IF (pAssemblyTypeIds IS NOT NULL AND pAssemblyTypeIds != '') THEN                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.assemblyType in (', pAssemblyTypeIds, ' )');                    \n" +
                "    END IF;                    \n" +
                "  \n" +
                "    IF (pRohsIds IS NOT NULL AND pRohsIds != '') THEN                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.RoHSStatusID in (', pRohsIds, ' )');                                \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pExternalRoHSStatusListValues IS NOT NULL AND pExternalRoHSStatusListValues != '') THEN                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsText in (', pExternalRoHSStatusListValues, ' )');                                \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsReversal = TRUE THEN                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isReversal = true');                      \n" +
                "    END IF;  \n" +
                "    IF pIsBOMActivityStarted = TRUE THEN                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isActivityStart = true');                      \n" +
                "    END IF;  \n" +
                "    IF pIsOperatingTemperatureBlank = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.operatingTemp is not null and co.operatingTemp != \"\" and (co.minOperatingTemp is null or co.maxOperatingTemp is null) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pObsoleteDate IS NOT NULL THEN                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, \" AND co.obsoleteDate >= '\",pObsoleteDate,\"'\");                        \n" +
                "    END IF;                        \n" +
                "  \n" +
                "    IF (pOperationalAttributeIds IS NOT NULL AND pOperationalAttributeIds != '') THEN                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_dynamic_attribute_mapping_part cd                               \n" +
                "													   where cd.mfgPNID=co.id and cd.isdeleted=false                               \n" +
                "														 and cd.deletedat is null                               \n" +
                "                                                         and cd.attributeID in (',pOperationalAttributeIds,'))');                              \n" +
                "    END IF;                                \n" +
                "  \n" +
                "    IF (pAcceptableShippingCountryIds IS NOT NULL AND pAcceptableShippingCountryIds != '') THEN                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_acceptable_shipping_countries ca                              \n" +
                "														  where ca.isdeleted = false                              \n" +
                "															and ca.deletedat is null                              \n" +
                "															and ca.refComponentID = co.id                              \n" +
                "															and ca.countryID in (',pAcceptableShippingCountryIds,'))');                              \n" +
                "    END IF;                                \n" +
                "  \n" +
                "	IF (pAttributesSearchHeader IS NOT NULL AND pAttributesSearchHeader != '') THEN                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (functionalCategoryText like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName like ''%', pAttributesSearchHeader, '%'' ');                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id                          \n" +
                "																		AND isdeleted = 0                         \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mountingTypeText like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name like ''%', pAttributesSearchHeader, '%'' ');                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id                          \n" +
                "																		AND isdeleted = 0                        \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR operatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR minOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR maxOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficient like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficientValue like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficientUnit like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR connectorTypeText like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR noOfPosition like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR noOfRows like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitch like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitchMating like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR sizeDimension like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR length like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR width like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR heightText like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR height like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR tolerance like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR voltage like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR value like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR partPackage like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR powerRating like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR weight like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR feature like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR color like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR PIDCode like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPNDescription like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR detailDescription like ''%', pAttributesSearchHeader, '%'' ');                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR specialNote like ''%', pAttributesSearchHeader, '%'' ');                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR serialNumber like ''%', pAttributesSearchHeader, '%'' ');                                  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode like ''%', pAttributesSearchHeader, '%'' ');                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName like ''%', pAttributesSearchHeader, '%'' ');                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name like ''%', pAttributesSearchHeader, '%'' ');                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name like ''%', pAttributesSearchHeader, '%'' ');                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName like ''%', pAttributesSearchHeader, '%'' ');                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName like ''%', pAttributesSearchHeader, '%'' ');                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name like ''%', pAttributesSearchHeader, '%'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp                              \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name like (''%', pAttributesSearchHeader, '%'' )) ');                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPN like ''%', pAttributesSearchHeader, '%'' )');                              \n" +
                "          IF pIsMFG = FALSE THEN                      \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc                               \n" +
                "																			where cc.id = co.refSupplierMfgpnComponentID               \n" +
                "                                                                            and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null               \n" +
                "                                                                            and cc.mfgPN like ''%', pAttributesSearchHeader, '%'' )                              \n" +
                "														      OR exists (select 1 from component_otherpn cp where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.refSupplierMfgpnComponentID and cp.name like (''%', pAttributesSearchHeader, '%'' ))                              \n" +
                "																		');                                \n" +
                "          END IF;                        \n" +
                "    END IF;                        \n" +
                "    #select pAttributesSearch;                      \n" +
                "    IF (pAttributesSearch IS NOT NULL AND pAttributesSearch != '') THEN                        \n" +
                "		SET attributeSearchString = pAttributesSearch;                        \n" +
                "       do_this:                        \n" +
                "	  LOOP                        \n" +
                "		SET attributeSearchLength = LENGTH(attributeSearchString);                        \n" +
                "		SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, ',', 1);                        \n" +
                "		SET attributeSearchSubLength = LENGTH(attributeSearchChip);                        \n" +
                "		SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+2), attributeSearchLength);                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (functionalCategoryText like ''%', attributeSearchChip, '%'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName like ''%', attributeSearchChip, '%'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id                          \n" +
                "																		AND isdeleted = 0                        \n" +
                "            and alias like ''%', attributeSearchChip, '%'') ');                        \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mountingTypeText like ''%', attributeSearchChip, '%'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name like ''%', attributeSearchChip, '%'' ');                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id                         \n" +
                "																		AND  isdeleted = 0                        \n" +
                "            and alias like ''%', attributeSearchChip, '%'') ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR operatingTemp like ''%', attributeSearchChip, '%'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR minOperatingTemp like ''%', attributeSearchChip, '%'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR maxOperatingTemp like ''%', attributeSearchChip, '%'' ');                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficient like ''%', attributeSearchChip, '%'' ');                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficientValue like ''%', attributeSearchChip, '%'' ');                        \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficientUnit like ''%', attributeSearchChip, '%'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR connectorTypeText like ''%', attributeSearchChip, '%'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name like ''%', attributeSearchChip, '%'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR noOfPosition like ''%', attributeSearchChip, '%'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR noOfRows like ''%', attributeSearchChip, '%'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitch like ''%', attributeSearchChip, '%'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitchMating like ''%', attributeSearchChip, '%'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR sizeDimension like ''%', attributeSearchChip, '%'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR length like ''%', attributeSearchChip, '%'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR width like ''%', attributeSearchChip, '%'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR heightText like ''%', attributeSearchChip, '%'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR height like ''%', attributeSearchChip, '%'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR tolerance like ''%', attributeSearchChip, '%'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR voltage like ''%', attributeSearchChip, '%'' ');                        \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR value like ''%', attributeSearchChip, '%'' ');                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR partPackage like ''%', attributeSearchChip, '%'' ');                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR powerRating like ''%', attributeSearchChip, '%'' ');                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR weight like ''%', attributeSearchChip, '%'' ');                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR feature like ''%', attributeSearchChip, '%'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR color like ''%', attributeSearchChip, '%'' ');                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR PIDCode like ''%', attributeSearchChip, '%'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPNDescription like ''%', attributeSearchChip, '%'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR detailDescription like ''%', attributeSearchChip, '%'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR specialNote like ''%', attributeSearchChip, '%'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR serialNumber like ''%', attributeSearchChip, '%'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode like ''%', attributeSearchChip, '%'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName like ''%', attributeSearchChip, '%'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name like ''%', attributeSearchChip, '%'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name like ''%', attributeSearchChip, '%'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName like ''%', attributeSearchChip, '%'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName like ''%', attributeSearchChip, '%'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name like ''%', attributeSearchChip, '%'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp                              \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name like (''%', attributeSearchChip, '%'' )) ');                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPN like ''%', attributeSearchChip, '%'' )');                \n" +
                "          /*IF pIsMFG = FALSE THEN                \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID and cc.mfgPN like ''%', attributeSearchChip, '%'' )');                \n" +
                "          END IF;  */            \n" +
                "		IF attributeSearchString = NULL OR attributeSearchString = \"\" THEN                \n" +
                "		  LEAVE do_this;                \n" +
                "		END IF;                \n" +
                "	  END LOOP do_this;                \n" +
                "    END IF;                                \n" +
                "  \n" +
                "    IF (pPackagingAlias IS NOT NULL AND pPackagingAlias != '') THEN                                \n" +
                "		IF (pPackagingAlias = '1') THEN                                \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is not null ');                                \n" +
                "		ELSE                                \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is null ');                                \n" +
                "		END IF;                                \n" +
                "	END IF;                                \n" +
                "		IF (pAlternatePart IS NOT NULL AND pAlternatePart != '') THEN                                \n" +
                "			IF (pAlternatePart = '1') THEN                                \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');                                \n" +
                "			ELSE                                \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');                                \n" +
                "			END IF;                                \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 1 and ca.isDeleted = 0) ');                                \n" +
                "		END IF;                                \n" +
                "		IF (pRoHSAlternatePart IS NOT NULL AND pRoHSAlternatePart != '') THEN                                \n" +
                "			IF (pRoHSAlternatePart = '1') THEN                                \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsgroupID is not null ');                                \n" +
                "			ELSE                                \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsgroupID is null ');                                \n" +
                "			END IF;                                \n" +
                "		END IF;                                \n" +
                "  \n" +
                "        IF (pPartUsedInAssembly IS NOT NULL AND pPartUsedInAssembly != '') THEN                                      \n" +
                "			SET vPartUsedInAssemblyExists = \" \";                                      \n" +
                "            SET vPartUsedInAssemblyAndOR = \" \";                                      \n" +
                "			IF (pPartUsedInAssembly = '1') THEN                                      \n" +
                "				SET vPartUsedInAssemblyExists = \" \";                                      \n" +
                "				SET vPartUsedInAssemblyAndOR = \" OR \";                                      \n" +
                "			ELSEIF (pPartUsedInAssembly = '2') THEN                                      \n" +
                "				SET vPartUsedInAssemblyExists = \" NOT \";                                      \n" +
                "				SET vPartUsedInAssemblyAndOR = \" AND \";                                      \n" +
                "            END IF;                                      \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, 'AND co.category = 2                                       \n" +
                "															AND ( ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))                                      \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))                                      \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and exists (select 1 from component c where c.id = rl.partid and c.partStatus = 1))) ');                                      \n" +
                "  \n" +
                "		END IF;                                      \n" +
                "  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') THEN                                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.partStock >= \", pStockQuantity);                                \n" +
                "	END IF;                                \n" +
                "   IF pIsExportControl = 1 THEN                          \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1,' ','Having fun_getExportControlDetailFromPartID(co.id) = \"yes\" ');                          \n" +
                "   END IF;                          \n" +
                "  \n" +
                "  /* to get total count of rows */                                \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) from ( \",@SQLStatement1,\" ) c where \", pWhereClause);                                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                \n" +
                "	EXECUTE query2;                                \n" +
                "	DEALLOCATE PREPARE query2;                                \n" +
                "  \n" +
                "  #select @SQLStatement2;            \n" +
                "  \n" +
                "  SET @SQLStatement2 = CONCAT(\"select c.*,      \n" +
                "								( select GROUP_CONCAT(cs.fullName ,' ' , CASE WHEN csd.classID IS NULL THEN ''      \n" +
                "													ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,''))      \n" +
                "														FROM standard_class WHERE classID = csd.classID) END      \n" +
                "														ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@') certificatelist      \n" +
                "										  from component_standard_details csd      \n" +
                "										  join certificate_standards cs on cs.certificateStandardID = csd.certificateStandardID and cs.isdeleted=0      \n" +
                "										 where csd.componentID = c.id      \n" +
                "										 and csd.isdeleted = 0) certificatelist      \n" +
                "									from ( \", @SQLStatement1,\" ) c      \n" +
                "		where \", pWhereClause , \" \", pOrderBy , rowNumWhere);      \n" +
                "  \n" +
                "    /*main query create temp table*/                                \n" +
                "	PREPARE query1 FROM @SQLStatement2;            \n" +
                "	EXECUTE query1;                                \n" +
                "	DEALLOCATE PREPARE query1;                                \n" +
                "  \n" +
                "	IF pIsRefreshMasterFilters = TRUE THEN                                            \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT distinct mfgCodeID, mfgCode, manufacturerName as mfgName, mfgDisplayOrder,            \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,            \n" +
                "											packagingID,packagingName, packagingDisplayOrder,               \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,               \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,               \n" +
                "											partType,categoryName,                \n" +
                "											functionalCategoryText,                \n" +
                "											mountingTypeText,                \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,               \n" +
                "											  rohsText,            \n" +
                "                                            AliasMFGCodeID,            \n" +
                "                                            AliasMFGCode,            \n" +
                "                                            AliasMFGName,            \n" +
                "                                            AliasMFGDisplayOrder            \n" +
                "										from ( \",@SQLStatement1,\" ) c where \", pWhereClause);                \n" +
                "		PREPARE query3 FROM @SQLStatement2;                \n" +
                "		EXECUTE query3;                \n" +
                "		DEALLOCATE PREPARE query3;                \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" with cte as ( SELECT id from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\" )                \n" +
                "									select * from                \n" +
                "										(select case when stdc.classID is not null then                \n" +
                "													concat(cs.certificateStandardID,':',stdc.classID)                \n" +
                "													else cs.certificateStandardID end certificateStandardID,                \n" +
                "												case when stdc.classID is not null then                \n" +
                "													concat(cs.fullName,' ',stdc.classname)                \n" +
                "													else cs.fullName end fullName,                \n" +
                "												cs.displayOrder                \n" +
                "										  from certificate_standards cs                \n" +
                "										  join component_standard_details csd on csd.certificateStandardID = cs.certificateStandardID                \n" +
                "										  left join standard_class stdc on csd.ClassID = stdc.classID                \n" +
                "										where csd.isDeleted = 0 and csd.deletedAt is null and csd.componentID in (select id from cte)                \n" +
                "										) a group by certificateStandardID, fullName, displayOrder                \n" +
                "										order by displayOrder,fullName\");                \n" +
                "		PREPARE query3 FROM @SQLStatement2;                \n" +
                "		EXECUTE query3;                \n" +
                "		DEALLOCATE PREPARE query3;  */              \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" select distinct cm.countryID, cm.countryName                \n" +
                "					  from component_acceptable_shipping_countries casc                \n" +
                "					  join countrymst cm ON cm.countryid = casc.countryid                \n" +
                "					 where casc.isdeleted = false                \n" +
                "					   and casc.deletedat is null                \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c                \n" +
                "									where c.id = casc.refComponentID and \", pWhereClause,\" )                \n" +
                "                                    order by cm.countryName\");                \n" +
                "		PREPARE query3 FROM @SQLStatement2;                \n" +
                "		EXECUTE query3;                \n" +
                "		DEALLOCATE PREPARE query3;  */              \n" +
                "  \n" +
                "         /*SET @SQLStatement2 = CONCAT(\" select distinct cda.id, cda.attributeName                \n" +
                "					  from component_dynamic_attribute_mapping_part cdam                \n" +
                "					  join component_dynamic_attribute cda ON cda.id = cdam.attributeID                \n" +
                "					 where cdam.isdeleted = false                \n" +
                "					   and cdam.deletedat is null                \n" +
                "					   and cda.isdeleted = false                \n" +
                "					   and cda.deletedat is null                \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c                \n" +
                "                                     where c.id = cdam.mfgPNID and \", pWhereClause,\" )                \n" +
                "                                     order by cda.attributeName\");                \n" +
                "		PREPARE query3 FROM @SQLStatement2;                \n" +
                "		EXECUTE query3;                \n" +
                "		DEALLOCATE PREPARE query3;  */              \n" +
                "    END IF;                \n" +
                "  \n" +
                "		IF (pIsSearchFromHeader = TRUE) THEN                \n" +
                "			/*Fetch Functional Type and Mounting Type wise grouping*/                \n" +
                "			SET @SQLStatement2 = CONCAT(\" select concat(functionalCategoryName,' - ',mountingTypeName) groupName,                \n" +
                "											/*concat(functionalCategoryText,' - ',mountingTypeText)*/null groupNameText,                \n" +
                "											functionalCategoryID, mountingTypeID,                \n" +
                "											count(1) recCount                \n" +
                "											from ( \",@SQLStatement1,\" ) c where \", pWhereClause,                \n" +
                "										' group by functionalCategoryName,mountingTypeName, /*functionalCategoryText, mountingTypeText,*/                \n" +
                "													functionalCategoryID, mountingTypeID                \n" +
                "											order by groupName, groupNameText, recCount desc');                \n" +
                "  \n" +
                "            PREPARE query3 FROM @SQLStatement2;                \n" +
                "			EXECUTE query3;                \n" +
                "			DEALLOCATE PREPARE query3;                \n" +
                "        END IF;                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2576,'2.00','V1','added operating temperature in Sproc_GetComponentList SP - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2576:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-07-2020 *********************************** */

                "drop procedure if exists `Sproc_RetrieveBin`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveBin`(              \n" +
                "	IN ppageIndex INT(11),              \n" +
                "	IN precordPerPage INT(11),              \n" +
                "	IN pOrderBy VARCHAR(255),              \n" +
                "	IN pWhereClause VARCHAR(16383),              \n" +
                "	IN pWarehouseId INT(11),              \n" +
                "    IN pSearchOnlyEmptyBin TINYINT(1)              \n" +
                ")  \n" +
                "BEGIN              \n" +
                "	DECLARE pOffset INT(11);              \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;              \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveBin = CONCAT(\"              \n" +
                "		SELECT 		`binm`.`id`,		`binm`.`Name` AS `Name`,	`binm`.`Description`,              \n" +
                "				`binm`.`WarehouseID`,	`binm`.`isActive`,		`binm`.`isPermanentBin`,              \n" +
                "				`warem`.`warehouseType`,          \n" +
                "				fun_getWarehouseTypeByKey(`warem`.warehouseType)  AS warehouseTypeValue,          \n" +
                "				`warem`.`Name` AS wareHoueseName,              \n" +
                "				`binm`.`isRandom`,         \n" +
                "				(CASE WHEN (binm.isRandom = 1) THEN 'Random' ELSE 'Sequence' END) AS `binGenerateType`,        \n" +
                "				(              \n" +
                "					CASE 	WHEN (binm.isActive= 0) THEN              \n" +
                "							'Inactive'              \n" +
                "						WHEN (binm.isActive = 1) THEN              \n" +
                "							'Active'              \n" +
                "						ELSE              \n" +
                "							''              \n" +
                "					END              \n" +
                "				) AS `isActiveConvertedValue`,              \n" +
                "				(                        \n" +
                "					CASE 	WHEN (isPermanentBin = 0) THEN                         \n" +
                "							'Movable'                         \n" +
                "						WHEN (isPermanentBin = 1) THEN                         \n" +
                "							'Non-Movable'                         \n" +
                "						ELSE                         \n" +
                "							''                         \n" +
                "					END                        \n" +
                "				) AS `isPermanentBinConvertedValue`,                  \n" +
                "				`binm`.`systemGenerated` as `systemGenerated`,                  \n" +
                "				(                \n" +
                "					CASE 	WHEN (`binm`.`systemGenerated` = 0) THEN                 \n" +
                "							'No'                 \n" +
                "						WHEN (`binm`.`systemGenerated` = 1) THEN                 \n" +
                "							'Yes'                 \n" +
                "						ELSE                 \n" +
                "							''                 \n" +
                "						END                \n" +
                "				) AS `systemGeneratedConvertedValue`,                  \n" +
                "				`binm`.`nickname`, 		`binm`.`prefix`,`binm`.`suffix`,                        \n" +
                "				`warem`.`parentWHID`,	        fun_getWarehouseNameByID(`warem`.`parentWHID`) parentWHName,                      \n" +
                "				fun_getUserNameByID(binm.updatedBy) updatedby,                      \n" +
                "				fun_getUserNameByID(binm.createdBy) createdby,                      \n" +
                "				fun_getUserNameByID(binm.deletedBy) deletedby,                      \n" +
                "				fun_getRoleByID(binm.createByRoleId) createdbyRole,                      \n" +
                "				fun_getRoleByID(binm.updateByRoleId) updatedbyRole,                      \n" +
                "				fun_getRoleByID(binm.deleteByRoleId) deletedbyRole,                      \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(binm.createdAt) createdAt,                      \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(binm.UpdatedAt) updatedAt,                      \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(binm.deletedAt) deletedAt,                      \n" +
                "				(case     \n" +
                "					when \",pSearchOnlyEmptyBin,\" = true then              \n" +
                "						fun_getBinEmptyStatusByBinId(binm.id)              \n" +
                "					 else 0     \n" +
                "				end) binIsEmpty,              \n" +
                "				binm.isActive binIsActive,              \n" +
                "				binm.isPermanentBin binIsPermanentBin,              \n" +
                "				binm.systemGenerated binSystemGenerated,      \n" +
                "				(SELECT uid       \n" +
                "					 FROM component_sid_stock css      \n" +
                "					 WHERE binm.id = css.binID AND css.isDeleted = 0 AND warem.warehouseType = 'SMC'      \n" +
                "				 ) AS uid,      \n" +
                "				(case  when  warem.warehouseType = 'SMC' then   \n" +
                "					( SELECT max(fun_getUMIDTransitStatus(uid))       \n" +
                "					 FROM component_sid_stock css      \n" +
                "					 WHERE binm.id = css.binID AND css.isDeleted = 0   LIMIT 1)  \n" +
                "                 else  \n" +
                "                  0 end  \n" +
                "				 ) AS isTransit,     \n" +
                "				fun_getDepartmentIDByBinID(binm.id) departmentID             \n" +
                "		FROM 		binmst binm                          \n" +
                "		LEFT JOIN 	warehousemst warem ON `binm`.`WarehouseID` = `warem`.`ID`                          \n" +
                "		WHERE 		binm.deletedAt IS NULL                          \n" +
                "	\");                                          \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY\",\"Name ASC\") ;                                            \n" +
                "	ELSE                                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                            \n" +
                "	END IF;	                                            \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN              \n" +
                "		SET pWhereClause = '1=1' ;              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF(pWarehouseId IS NOT NULL) THEN              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND WarehouseID = '\", pWarehouseId, \"'\");              \n" +
                "	END IF;              \n" +
                "    IF(pSearchOnlyEmptyBin = TRUE) THEN              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND binIsEmpty = 1\");              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                            \n" +
                "	ELSE	                                            \n" +
                "		SET rowNumWhere = '';                                            \n" +
                "	END IF;	                                            \n" +
                "  \n" +
                "	/* to get total count of rows */                               \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveBin,\" ) c where 1=1 and \", pWhereClause);      \n" +
                "    PREPARE query2 FROM @SQLStatement2;                              \n" +
                "	 EXECUTE query2;                              \n" +
                "	DEALLOCATE PREPARE query2;                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT c.*,              \n" +
                "										case when             \n" +
                "													binIsActive = 1 and               \n" +
                "													binIsPermanentBin = 0 and              \n" +
                "													binSystemGenerated = 0 and              \n" +
                "													warehouseType != 'SMC'              \n" +
                "												then              \n" +
                "													1              \n" +
                "												else 0 end allowBinTransfer              \n" +
                "									FROM ( \", @temp_Sproc_RetrieveBin,\" ) c WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                              \n" +
                "	PREPARE query1 FROM @SQLStatement2;                              \n" +
                "	 EXECUTE query1;                   \n" +
                " 	DEALLOCATE PREPARE query1;                             \n" +
                "    END ; \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2577,'2.00','V1',' Sproc_RetrieveBin - DP change related to InTransit'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2577:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-07-2020 *********************************** */
                "ALTER TABLE inspection_template_requirement_Det RENAME COLUMN inspenctionTemplateId TO inspectionTemplateId;  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2578,'2.00','V1','Change the field name - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2578:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-07-2020  *********************************** */
                "ALTER TABLE quotecharges_dynamic_fields_mst ADD COLUMN isCommission TINYINT(1) DEFAULT 0;  \n" +
                "ALTER TABLE quotecharges_dynamic_fields_mst ADD COLUMN isIncludeInOtherAttribute TINYINT(1) DEFAULT 0;  \n" +
                "ALTER TABLE quotecharges_dynamic_fields_mst ADD COLUMN refAttributeID INT(11) DEFAULT NULL;  \n" +
                "ALTER TABLE quotecharges_dynamic_fields_mst ADD COLUMN quoteAttributeType VARCHAR(1) COMMENT 'R(RFQ), S(Supplier)' ;  \n" +
                "ALTER TABLE quotecharges_dynamic_fields_mst ADD CONSTRAINT `FK_quotemst_refAttributeID`   \n" +
                "FOREIGN KEY (`refAttributeID`)    \n" +
                "REFERENCES `quotecharges_dynamic_fields_mst` (`id`);  \n" +
                "UPDATE quotecharges_dynamic_fields_mst SET quoteAttributeType = 'R';  \n" +
                /* **************************** Add Script Version -> 10-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2579,'2.00','V1','User Story 22198: Quote Attribute Master changes DB chanegs - Jignesh K '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2579:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-07-2020  *********************************** */
                "ALTER TABLE rfq_assemblies ADD COLUMN isCustomPartDetShowInReport TINYINT(1) DEFAULT 0;  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2580,'2.00','V1','Task 22708: DB and Model Changes : Cost-Summary Tab Changes for Custom Part. - Jignesh K '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2580:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-07-2020  *********************************** */
                "CREATE TABLE `rfq_assy_quotations_customparts` (  \n" +
                "  `id` INT(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `rfqAssyQuoteId` INT(11) NOT NULL,  \n" +
                "  `mfgPNID` INT(11) NOT NULL,  \n" +
                "  `unitPrice` DECIMAL(16,6) DEFAULT NULL,  \n" +
                "  `totalPrice` DECIMAL(16,6) DEFAULT NULL,  \n" +
                "  `leadTimeDays` INT(11) DEFAULT NULL,  \n" +
                "  `totalLeadTimeDays` INT(11) DEFAULT NULL,  \n" +
                "  `createdBy` VARCHAR(255) NOT NULL,  \n" +
                "  `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` VARCHAR(255) DEFAULT NULL,  \n" +
                "  `updatedAt` DATETIME DEFAULT NULL,  \n" +
                "  `deletedBy` VARCHAR(255) DEFAULT NULL,  \n" +
                "  `deletedAt` DATETIME DEFAULT NULL,  \n" +
                "  `isDeleted` TINYINT(1) NOT NULL DEFAULT '0',  \n" +
                "  `createByRoleId` INT(11) DEFAULT NULL,  \n" +
                "  `updateByRoleId` INT(11) DEFAULT NULL,  \n" +
                "  `deleteByRoleId` INT(11) DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_rfq_assy_quote_rfqAssyQuoteId` (`rfqAssyQuoteId`),  \n" +
                "  CONSTRAINT `FK_rfq_assy_quote_rfqAssyQuoteId` FOREIGN KEY (`rfqAssyQuoteId`) REFERENCES `rfq_assy_quotations` (`id`),  \n" +
                "  KEY `FK_component_mfgPNID` (`mfgPNID`),  \n" +
                "  CONSTRAINT `FK_component_mfgPNID` FOREIGN KEY (`mfgPNID`) REFERENCES `component` (`id`)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2581,'2.00','V1','Task 22708: DB and Model Changes : Cost-Summary Tab Changes for Custom Part. - Jignesh K '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2581:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-07-2020  *********************************** */
                "ALTER TABLE rfq_assy_quotations_additionalcost ADD COLUMN refCustomPartQuoteID INT(11) DEFAULT NULL;  \n" +
                "ALTER TABLE rfq_assy_quotations_additionalcost ADD CONSTRAINT `FK_rfq_quote_parts_refCustomPartQuoteID`   \n" +
                "FOREIGN KEY (`refCustomPartQuoteID`)    \n" +
                "REFERENCES `rfq_assy_quotations_customparts` (`id`);  \n" +
                /* **************************** Add Script Version -> 17-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2582,'2.00','V1','Task 22708: DB and Model Changes : Cost-Summary Tab Changes for Custom Part. - Jignesh K '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2582:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 21-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),                    \n" +
                "    IN pEmployeeID INT(11),        \n" +
                "	IN pCustomerIds VARCHAR(16383),  \n" +
                "	IN pAssyTypeIds VARCHAR(16383),            \n" +
                "	IN pRfqTypeIds VARCHAR(16383),            \n" +
                "	IN pJobTypeIds VARCHAR(16383),            \n" +
                "	IN pAssyIds VARCHAR(16383),           \n" +
                "	IN pAssyNicknameIds LONGTEXT,       \n" +
                "    IN pIsExportControlled TINYINT(1),        \n" +
                "    IN pIsQuoteOverdue TINYINT(1),        \n" +
                "    IN pIsSubAssemblyBOMs TINYINT(1),        \n" +
                "    IN pIsPriceGroupQuoteAssembly TINYINT(1),  \n" +
                "     IN pFromDate DATE,            \n" +
                "    IN pToDate DATE,  \n" +
                "    IN pOlderThenDays int(11)        \n" +
                "    )  \n" +
                "BEGIN                \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;       \n" +
                "	DECLARE vTextAngularKeyCode VARCHAR(500);        \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);           \n" +
                "    DECLARE vTimeZone VARCHAR(50);           \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;            \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;         \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;        \n" +
                "  \n" +
                "    IF(pCustomerIds IS NOT NULL AND pCustomerIds != '') THEN                 \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (', pCustomerIds, ') ');                \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF(pAssyTypeIds IS NOT NULL AND pAssyTypeIds != '') THEN                 \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assemblyTypeID in (', pAssyTypeIds, ') ');                \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF(pRfqTypeIds IS NOT NULL AND pRfqTypeIds != '') THEN                 \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND RFQTypeID in (', pRfqTypeIds, ') ');                \n" +
                "	END IF;       \n" +
                "  \n" +
                "    IF(pJobTypeIds IS NOT NULL AND pJobTypeIds != '') THEN                 \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND jobTypeID in (', pJobTypeIds, ') ');                \n" +
                "	END IF;        \n" +
                "  \n" +
                "     IF(pAssyIds IS NOT NULL AND pAssyIds != '') THEN                 \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND partID in (', pAssyIds, ') ');                \n" +
                "	 END IF;        \n" +
                "  \n" +
                "     IF(pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN        \n" +
                "		SET pWhereClause=CONCAT(pWhereClause,' and partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' ))');        \n" +
                "	 END IF;   \n" +
                "  \n" +
                "	if (pFromDate is not null and pToDate is not null) then  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND      \n" +
                "		   (CASE    \n" +
                "			WHEN rfq_statusID = 1 THEN    \n" +
                "				DATE(quoteDueDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN    \n" +
                "				DATE(quoteSubmitDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN    \n" +
                "				DATE(quoteClosedDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "		    END)');        \n" +
                "	end if;  \n" +
                "  \n" +
                "	if(pOlderThenDays is not null) then  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND   \n" +
                "		 (CASE    \n" +
                "			WHEN rfq_statusID = 1 THEN    \n" +
                "				DATEDIFF(fun_DatetimetoUTCDateTime(), quoteDueDate) > ',pOlderThenDays,'  \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN    \n" +
                "				DATEDIFF(fun_DatetimetoUTCDateTime(), quoteSubmitDate) > ',pOlderThenDays,'  \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN    \n" +
                "				DATEDIFF(fun_DatetimetoUTCDateTime(), quoteClosedDate) > ',pOlderThenDays,'  \n" +
                "		    END)  \n" +
                "  \n" +
                "		');  \n" +
                "	end if;  \n" +
                "  \n" +
                "	IF pIsQuoteOverdue = 1 THEN     		            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND      \n" +
                "        (CASE    \n" +
                "        WHEN rfq_statusID = 1 THEN    \n" +
                "				quoteDueDate < fun_DatetimetoUTCDateTime()     \n" +
                "         WHEN (rfq_statusID = 2 OR rfq_statusID = 3 ) THEN    \n" +
                "				quoteSubmitDate > quoteDueDate     \n" +
                "		WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN    \n" +
                "				quoteClosedDate	> quoteDueDate		    \n" +
                "            END)');        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF pIsSubAssemblyBOMs = 1 THEN         \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assyLevel > 1');        \n" +
                "	END IF;       \n" +
                "  \n" +
                "    /* IF pIsPriceGroupQuoteAssembly = 1 THEN         \n" +
                "		SET pWhereClause = concat(pWhereClause, ' AND assyLevel > 1');        \n" +
                "	END IF; */      \n" +
                "  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                "	/* DECLARE SQLStatement varchar(255); */  \n" +
                "   #DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "    SET @temp_Sproc_GetRFQList = CONCAT(\"SELECT (select COUNT(1) from rfq_lineitems rl where rl.partID = ra.partID and rl.isDeleted = 0) AS lineItemCount, rf.id, ra.partID,  \n" +
                "			count(1) over (partition by rf.id) AS quoteGroupAssyCount,    \n" +
                "            fun_getUserNameByEmployeID(rf.salesCommissionTo) salesCommissionTo,  \n" +
                "            (select count(1) from rfq_price_group rpg where refRFQID = rf.id and rpg.isDeleted = 0) priceGroupCount,      \n" +
                "            fun_getExportControlDetailFromPartID(ra.partID) as isExportControl,        \n" +
                "			#(SELECT COUNT(1) FROM rfq_assemblies WHERE rfqrefID = rf.id AND isDeleted = 0) AS quoteGroupAssyCount,  \n" +
                "			(SELECT MAX(pr.`level`)+1 FROM part_sub_assy_relationship pr WHERE pr.partID = ra.partID AND isDeleted = 0) AS assyLevel,  \n" +
                "			(SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id AND quoteNumber IS NOT NULL) AS revisedQuoteCount,  \n" +
                "			(SELECT max(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id) AS lastQuoteID, ra.isSummaryComplete,  \n" +
                "			part.PIDCode,part.isCustom,part.RoHSStatusID, part.mfgPN, part.custAssyPN, part.mfgPNDescription,part.rev,part.assyCode,part.nickName,ro.rohsIcon,  \n" +
                "			fun_getUserNameByEmployeID(rf.employeeID) AS rfqCreatedBy,  \n" +
                "			fun_getUserNameByID(ra.Updatedby) AS rfqModifiedBy,  \n" +
                "			part.liveVersion AS liveInternalVersion,  \n" +
                "			(SELECT fun_getBomProgressBar(IFNULL(ra.partID,0))) AS bomProgress,  \n" +
                "			(SELECT fun_getMaterialProgress(ra.id))AS materialProgress,  \n" +
                "			(CASE WHEN (SELECT fun_getCustomPartProgress(ra.id)) = -1 THEN 'N/A' ELSE (SELECT fun_getCustomPartProgress(ra.id)) END)AS customPartProgress,  \n" +
                "			(CASE WHEN ra.status = 1 THEN 'In Progress'  \n" +
                "				  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'  \n" +
                "				  WHEN ra.status = 3 THEN 'Won'                             \n" +
                "				  WHEN ra.status = 4 THEN 'Lost'  \n" +
                "				  WHEN ra.status = 5 THEN 'Canceled' END) `status` ,  \n" +
                "			ra.status rfq_statusID,                        \n" +
                "			(CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending'  \n" +
                "					WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote'  \n" +
                "					WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'  \n" +
                "					WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,  \n" +
                "			ro.name AS `rohsComplientConvertedValue`,  \n" +
                "			(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'  \n" +
                "				WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,  \n" +
                "			(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'  \n" +
                "				WHEN (`ra`.`timePeriod` = 1) THEN 'W'  \n" +
                "				WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,ra.jobTypeID,ra.assemblyTypeID,ra.RFQTypeID,      \n" +
                "			fun_getjobTypeByID(ra.jobTypeID) AS JobType, fun_getrfqTypeByID(ra.RFQTypeID) AS OrderType, CONCAT('(',cu.mfgCode,') ',cu.mfgName) AS Customer, cu.id customerID,  \n" +
                "			fun_getUserNameByID(ra.quoteSubmittedBy) AS RFQ_SubmitedBy, ra.winPrice,ra.winQuantity,  \n" +
                "			ra.quoteInDate, cast(ra.quoteDueDate as DATE) as quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,  \n" +
                "			part.isActivityStart, fun_getMfgCodeByPartID(ra.partID) customerCode,                \n" +
                "			(CASE WHEN part.isActivityStart THEN u.username ELSE '' END )AS username, part.activityStartBy,                           \n" +
                "			TIMESTAMPDIFF(SECOND, part.activityStartAt,fun_DatetimetoUTCDateTime()) activityStartAt,                          \n" +
                "			ra.isBOMVerified,fun_getTextAngularData(ra.reason,'\",vTextAngularKeyCode,\"') reason, fun_getUserNameByID(ra.quoteClosedBy) AS RFQ_ClosedBy,ra.quoteClosedDate,                             \n" +
                "            fun_getUserNameByID(ra.updatedBy) updatedby,                      \n" +
                "			fun_getUserNameByID(ra.createdBy) createdby,                       \n" +
                "			fun_getRoleByID(ra.createByRoleId) createdbyRole,                      \n" +
                "			fun_getRoleByID(ra.updateByRoleId) updatedbyRole,                      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,                     \n" +
                "			fun_getRfqLabourPercentage(ra.id) laborPercentage                      \n" +
                "		FROM rfqforms rf  \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND ra.isdeleted = 0  \n" +
                "		JOIN mfgcodemst cu ON cu.id = rf.customerId AND cu.isdeleted = 0  \n" +
                "		JOIN component part ON part.id = ra.partID AND part.category = 3 AND part.isdeleted = 0  \n" +
                "		JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "		LEFT OUTER JOIN users u ON  u.id = part.activityStartBy  \n" +
                "		WHERE rf.isdeleted = 0                    \n" +
                "        and (case when (select count(1) from employee_mfg_mapping where employeeId = \",pEmployeeID,\" and isDeleted = 0) > 0 then                     \n" +
                "		exists (select 1 from employee_mfg_mapping where mfgCodeId =  cu.id and employeeId = \",pEmployeeID,\" and isDeleted = 0)                    \n" +
                "		else 1=1 end)                    \n" +
                "        \");  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"quoteDueDate DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF pIsExportControlled = 1  AND pIsPriceGroupQuoteAssembly = 1 THEN         \n" +
                "		SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\" AND priceGroupCount > 1 ');        \n" +
                "	ELSEIF pIsExportControlled = 1 THEN      \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\"');            \n" +
                "	ELSEIF pIsExportControlled = 0 AND pIsPriceGroupQuoteAssembly = 1 THEN      \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having priceGroupCount > 0 ');              \n" +
                "	END IF;      \n" +
                "	/* to get total count of rows */     \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause);		  \n" +
                "			PREPARE query2 FROM @SQLStatement2;    \n" +
                "			EXECUTE query2;    \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetRFQList,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                          			                        			   \n" +
                "			PREPARE query1 FROM @SQLStatement2;    \n" +
                "			EXECUTE query1;    \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 21-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2583,'2.00','V1','RFQ List New Filter related chagnge - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2583:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 21-07-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getRfqStatusByID`;  \n" +
                "CREATE FUNCTION `fun_getRfqStatusByID`(       \n" +
                "quoteStatus INT(11)      \n" +
                ") RETURNS char(50) CHARSET utf8mb4  \n" +
                "BEGIN        \n" +
                "	DECLARE result NVARCHAR(50);        \n" +
                "  \n" +
                "	SELECT (CASE WHEN (quoteStatus = 1) THEN 'In Progress'         \n" +
                "		WHEN (quoteStatus = 2) THEN 'Follow up Submitted RFQ'         \n" +
                "		WHEN (quoteStatus = 3) THEN 'Won'       \n" +
                "		WHEN (quoteStatus = 4) THEN 'Lost'       \n" +
                "		WHEN (quoteStatus = 5) THEN 'Canceled' ELSE '' END) INTO @result;        \n" +
                "      	SET result = @result;        \n" +
                "  \n" +
                "	RETURN result;        \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 21-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2584,'2.00','V1','RFQ Filter related change - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2584:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-07-2020  *********************************** */
                "UPDATE page_detail SET pageURL=\"/rfqsetting/quote-dynamic-fields/:type\" WHERE pageRoute = \"app.quotedynamicfields\";  \n" +
                "INSERT INTO page_detail  \n" +
                "(pagename,RO,RW,pageRoute,pageURL,menuName,parentPageID,iconClass,IsActive,createdBy,isDisplay,displayMenuName,isAllowAsHomePage)  \n" +
                "SELECT 'Supplier Dynamic Fields', RO, RW, \"app.supplierdynamicfields\" ,pageURL, menuName, parentPageID, iconClass,   \n" +
                "IsActive, createdBy, 0, displayMenuName, isAllowAsHomePage  \n" +
                "FROM page_detail WHERE pageRoute = \"app.quotedynamicfields\";  \n" +
                "SELECT pageID INTO @pageid FROM page_detail WHERE pageRoute=\"app.supplierdynamicfields\";  \n" +
                "INSERT INTO userpagedetail  \n" +
                "(userID,pageID,RO,RW,isActive, createdAt,createdBy,IsShortcut,roleID,IsShowInHomePage)  \n" +
                "SELECT userID,@pageid,RO,RW,isActive,createdAt,createdBy,IsShortcut,roleID,IsShowInHomePage FROM userpagedetail WHERE pageID IN (SELECT pageId FROM page_detail WHERE pageRoute = \"app.quotedynamicfields\");  \n" +
                "ALTER TABLE quotecharges_dynamic_fields_mst MODIFY displayOrder DECIMAL(16,6);  \n" +
                /* **************************** Add Script Version -> 21-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2585,'2.00','V1','User Story 22198: Quote Attribute Master changes - Jignesh K '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2585:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-07-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveQuoteDynamicFields` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveQuoteDynamicFields`(                            \n" +
                "	IN ppageIndex INT(11),                            \n" +
                "	IN precordPerPage INT(11),                            \n" +
                "	IN pOrderBy VARCHAR(255),                            \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pAttributeType VARCHAR(1)      \n" +
                "	)  \n" +
                "BEGIN                            \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);                            \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;                            \n" +
                "  \n" +
                "		SET @temp_Sproc_RetrieveQuoteDynamicFields = CONCAT(\"SELECT qc.id, qc.fieldName, qc.dataType, qc.costingType, qc.displayPercentage,      \n" +
                "			qc.displayMargin, qc.displayOrder,qc.isDaysRequire, qc.affectType, qc.isActive,qc.applyToAll,qc.toolingQty,qc.toolingPrice,  \n" +
                "			qc.isCommission, qc.isIncludeInOtherAttribute, qc.refAttributeID, ref.fieldName AS refQuoteAttributeName,qc.quoteAttributeType,  \n" +
                "			fun_getUserNameByID(qc.updatedBy) updatedby,      \n" +
                "			fun_getUserNameByID(qc.createdBy) createdby,      \n" +
                "			fun_getUserNameByID(qc.deletedBy) deletedby,      \n" +
                "			fun_getRoleByID(qc.createByRoleId) createdbyRole,      \n" +
                "			fun_getRoleByID(qc.updateByRoleId) updatedbyRole,      \n" +
                "			fun_getRoleByID(qc.deleteByRoleId) deletedbyRole,      \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(qc.createdAt) createdAt,      \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(qc.UpdatedAt) updatedAt,      \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(qc.deletedAt) deletedAt,      \n" +
                "			(CASE WHEN (qc.displayPercentage = 0) THEN 'No'            \n" +
                "				WHEN (qc.displayPercentage = 1) THEN 'Yes' ELSE '' END) AS `displayPercentageConvertedValue`,            \n" +
                "				(CASE WHEN (qc.affectType  = 'L') THEN 'Labor'            \n" +
                "				WHEN (qc.affectType = 'M') THEN 'Material' ELSE '' END) AS `displayAffectType`,            \n" +
                "				(CASE WHEN (qc.selectionType  = 1) THEN 'Whichever is greater'            \n" +
                "				WHEN (qc.selectionType = 2) THEN 'Add to Lead Time' ELSE '' END) AS `displaySelectionType`,            \n" +
                "                (CASE WHEN (qc.isActive  = 1) THEN 'Active'            \n" +
                "				WHEN (qc.isActive = 0) THEN 'Inactive' ELSE '' END) AS `activeConvertedValue`,          \n" +
                "                (CASE WHEN (qc.applyToAll  = 1) THEN 'Yes'            \n" +
                "				WHEN (qc.applyToAll = 0) THEN 'No' ELSE '' END) AS `applyToAllConvertedValue`,  \n" +
                "		(CASE WHEN (qc.isCommission  = 1) THEN 'Yes'            \n" +
                "				WHEN (qc.isCommission = 0) THEN 'No' ELSE '' END) AS `commissionConvertedValue`,          \n" +
                "                (CASE WHEN (qc.isIncludeInOtherAttribute  = 1) THEN 'Yes'            \n" +
                "				WHEN (qc.isIncludeInOtherAttribute = 0) THEN 'No' ELSE '' END) AS `includeInOtherAttributeValue`,          \n" +
                "			(CASE WHEN (qc.displayMargin = 0) THEN 'No'            \n" +
                "					WHEN (qc.displayMargin = 1) THEN 'Yes' ELSE '' END) AS `displayMarginConvertedValue`  \n" +
                "			FROM `quotecharges_dynamic_fields_mst` AS qc  \n" +
                "			LEFT JOIN quotecharges_dynamic_fields_mst ref ON ref.id = qc.refAttributeID            \n" +
                "			WHERE qc.`deletedAt` IS NULL AND qc.quoteAttributeType='\",pAttributeType,\"'\");            \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" ,\"displayOrder IS NULL, displayOrder ASC ,fieldName ASC\") ;                            \n" +
                "		ELSE                            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                            \n" +
                "		END IF;	                            \n" +
                "  \n" +
                "  \n" +
                "       # select @temp_Sproc_RetrieveQuoteDynamicFields;        \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                            \n" +
                "			SET pWhereClause = '1=1' ;                            \n" +
                "		END IF;	                            \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                             \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                            \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                            \n" +
                "		ELSE	                            \n" +
                "			SET rowNumWhere = '';                            \n" +
                "		END IF;	                            \n" +
                "  \n" +
                "		/* to get total count of rows */                 \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveQuoteDynamicFields,\" ) c where 1=1 and \", pWhereClause);                \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                \n" +
                "			EXECUTE query2;                \n" +
                "			DEALLOCATE PREPARE query2;              \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveQuoteDynamicFields,\" ) c                \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement2;                \n" +
                "			EXECUTE query1;                \n" +
                "			DEALLOCATE PREPARE query1;                \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script -> 21-07-2020 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_BI_quotecharges_dynamic_fields_mst` ;  \n" +
                "CREATE TRIGGER `Trg_BI_quotecharges_dynamic_fields_mst` BEFORE INSERT ON `quotecharges_dynamic_fields_mst`   \n" +
                "    FOR EACH ROW BEGIN                \n" +
                "	IF (SELECT COUNT(1) FROM quotecharges_dynamic_fields_mst WHERE `fieldName`=NEW.fieldName AND `quoteAttributeType`=NEW.quoteAttributeType  AND deletedAt IS NULL)>0 THEN         \n" +
                "  \n" +
                "            SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';       \n" +
                "  \n" +
                "	 END IF;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script -> 21-07-2020 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_BU_quotecharges_dynamic_fields_mst` ;  \n" +
                "CREATE TRIGGER `Trg_BU_quotecharges_dynamic_fields_mst` BEFORE UPDATE ON `quotecharges_dynamic_fields_mst`   \n" +
                "    FOR EACH ROW BEGIN                  \n" +
                "	IF ((NEW.isDeleted = 0 AND NEW.deletedAt IS NULL)     \n" +
                "		AND (SELECT COUNT(1) FROM quotecharges_dynamic_fields_mst WHERE `fieldName`=NEW.fieldName  AND `quoteAttributeType`=NEW.quoteAttributeType AND deletedAt IS NULL AND id!=NEW.id))>0 THEN           \n" +
                "  \n" +
                "            SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';         \n" +
                "  \n" +
                "	 END IF;            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2586,'2.00','V1','User Story 22198: Quote Attribute Master changes - Jignesh K '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2586:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 21-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyBOMHeaderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyBOMHeaderList`(                                                    \n" +
                "	IN prfqAssyID INT(11),                                  \n" +
                "	IN pcustomerID INT(11)                              \n" +
                ")  \n" +
                "BEGIN                                            \n" +
                "	   SELECT   ra.rfqrefID AS quoteGroupNumber,ra.quoteinDate,ra.quoteDueDate,ra.partID,ra.quoteFinalStatus, ra.isSummaryComplete, c.mfgpn AS assyNumber,c.rev AS revision,        \n" +
                "	   jt.name AS jobType,            \n" +
                "CASE WHEN c.bomLock=0 THEN '' ELSE 'BOM is locked' END bomlockStatus,                                  \n" +
                "	   c.PIDCode AS assyID,c.mfgPNDescription,c.specialNote,ra.assemblyTypeID,rat.name AS assyType,       \n" +
                "       fun_getSamplePicturesUploadCount(ra.partID) sampleImageCnt,      \n" +
                "       (SELECT mfgType FROM mfgCodeMst mfg WHERE mfg.id  = c.mfgcodeID ) mfgType,      \n" +
                "	   (SELECT (MAX(LEVEL)+1) FROM part_sub_assy_relationship psar WHERE psar.partID =ra.partID AND psar.isdeleted=0) AS assyLevel,                                  \n" +
                "	   (SELECT COUNT(1) FROM rfq_assemblies rfqs WHERE rfqs.rfqrefID =ra.rfqrefID AND rfqs.isdeleted=0) AS assyCount,                                   \n" +
                "	   c.liveVersion AS liveInternalVersion,rh.id,rh.name AS rohs,rh.rohsIcon,c.rev,c.nickname,c.businessRisk,                                  \n" +
                "	   (SELECT COUNT(1) FROM rfq_assemblies_quotation_submitted raqs WHERE raqs.rfqAssyID=ra.id AND quoteNumber IS NOT NULL AND isDeleted = 0) AS totalQuoteCount,                                  \n" +
                "	   (SELECT rasp.quoteNumber FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id AND quoteNumber IS NOT NULL ORDER BY rasp.id DESC LIMIT 1) AS quoteNumber,                                  \n" +
                "	   (SELECT rasp.bomLastVersion FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id AND quoteNumber IS NOT NULL ORDER BY rasp.id DESC LIMIT 1) AS bomLastVersion,                                  \n" +
                "	   (SELECT rasp.quoteSubmitDate FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id AND quoteNumber IS NOT NULL ORDER BY rasp.id DESC LIMIT 1) AS quoteSubmitDate,                                  \n" +
                "	   (SELECT rasp.bomInternalVersion FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id AND quoteNumber IS NOT NULL ORDER BY rasp.id DESC LIMIT 1) AS bomInternalVersion,                                  \n" +
                "	   (SELECT CONCAT('(',mm.mfgCode,') ',mm.mfgName) FROM mfgcodemst mm WHERE mm.id=pcustomerID) AS customerName,                               \n" +
                "	   (CASE WHEN ra.status = 1 THEN 'In Progress'                                       \n" +
                "			  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'                                     \n" +
                "			  WHEN ra.status = 3 THEN 'Won'                                      \n" +
                "			  WHEN ra.status = 4 THEN 'Lost'                                     \n" +
                "		 WHEN ra.status = 5 THEN 'Canceled' END) `status` ,                                    \n" +
                "	   (CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending'                                \n" +
                "		 WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote'                                 \n" +
                "	 	 WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'                                  \n" +
                "		 WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,                  \n" +
                "         (                  \n" +
                "			CASE  WHEN IFNULL(ra.isSummaryComplete,0)=0 THEN                   \n" +
                "			(                  \n" +
                "                SELECT GROUP_CONCAT(CONCAT(IFNULL(cs.fullName,''),' ',IFNULL(css.className,''), '######', IFNULL(css.colorCode,'')) ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@')                  \n" +
                "                FROM component_standard_details csd                     \n" +
                "                LEFT JOIN certificate_standards cs ON csd.certificatestandardID=cs.certificatestandardid                     \n" +
                "                LEFT JOIN standard_class css ON csd.classID=css.classID WHERE csd.componentid= ra.partID AND csd.isDeleted = 0                    \n" +
                "			)                  \n" +
                "            ELSE                              \n" +
                "            (                  \n" +
                "				SELECT GROUP_CONCAT(CONCAT(IFNULL(cs.fullName,''),' ',IFNULL(css.className,''), '######', IFNULL(css.colorCode,'')) ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@')                      \n" +
                "                FROM rfq_assy_standard_class_detail csd                     \n" +
                "                LEFT JOIN certificate_standards cs ON csd.standardID=cs.certificatestandardid                     \n" +
                "                LEFT JOIN standard_class css ON csd.standardClassIds=css.classID                     \n" +
                "                WHERE csd.refSubmittedQuoteID=(SELECT id FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1)                    \n" +
                "			)                              \n" +
                "			END                  \n" +
                "		)AS standards                                  \n" +
                "	   FROM rfq_assemblies ra  LEFT JOIN component c                                  \n" +
                "	   ON c.id=ra.partID LEFT JOIN rfq_assy_typemst rat                                   \n" +
                "          ON rat.id=ra.assemblyTypeID LEFT JOIN rfq_rohsmst rh                                  \n" +
                "          ON rh.id=c.RoHSStatusID LEFT JOIN jobtype jt                                  \n" +
                "          ON jt.id = ra.jobTypeID        \n" +
                "  \n" +
                "           WHERE ra.id= prfqAssyID AND ra.isdeleted=0;                                                       \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetQuoteSummaryDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetQuoteSummaryDetails`(                \n" +
                "	IN prfqAssyID INT(11),                \n" +
                "    IN pAssyQuoteSubmittedID INT(11)                \n" +
                "    )  \n" +
                "BEGIN                \n" +
                "  \n" +
                "  DECLARE vTextAngularKeyCode VARCHAR(500);              \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();               \n" +
                "		# select list for quote summary details of last submitted quote                \n" +
                "			SELECT unitPrice, qty, turnTime,priceGroup,               \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN CEILING(7*(turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))                \n" +
                "            WHEN qo.turnType = 'D' THEN turntime                \n" +
                "            WHEN qo.turnType = 'W' THEN (turntime*7) END) turntimedays,                \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN 'Business Days'                \n" +
                "            WHEN qo.turnType = 'D' THEN 'Week Days'                \n" +
                "            WHEN qo.turnType = 'W' THEN 'Week' END) turnType,                \n" +
                "            qo.excessMaterialCost, qo.extendedCost, (qo.nreCost + qo.toolingCost) nreCost ,(qo.nreDays + qo.toolingDays) nreDays, qo.nretoolingdescription,                \n" +
                "            qo.additionalCost,qo.materialCost,qo.materialLeadTime,qo.laborCost,qo.laborLeadTime,qo.customItemLeadTime,qo.totalLeadTime                \n" +
                "			FROM rfq_assy_quote_submitted_assydetail qo                \n" +
                "			JOIN rfq_assemblies_quotation_submitted sb ON sb.id = qo.refSubmittedQuoteID                \n" +
                "			WHERE refSubmittedQuoteID = pAssyQuoteSubmittedID                \n" +
                "            ORDER BY qo.rfqPriceGroupId,qo.qty, qo.turnTime;                \n" +
                "  \n" +
                "  \n" +
                "        # select details for assembly,customer, submitted quote of selected rfq assy                \n" +
                "			SELECT ra.id rfqAssyID, ra.partID, rf.id quoteID, part.PIDCode , part.isCustom , part.nickName, part.liveInternalVersion, part.mfgPNDescription, part.mfgPN, part.rev,part.assyCode,                \n" +
                "            part.custAssyPN, cu.mfgName,cu.mfgCode,rf.customerid,rqs.custBillingAddressID, IFNULL(rqs.custTermsID, cu.custTermsID) AS custTermsID, rqs.custShippingAddressID,                \n" +
                "            (CASE WHEN rqs.quoteNumber IS NOT NULL THEN IFNULL(rqs.BOMIssues,'')                \n" +
                "            WHEN rqs.quoteNumber IS NULL THEN IFNULL(fun_getQuoteSubjectToFollowing(ra.id),'') END) AS BOMIssues,                \n" +
                "            (                \n" +
                "				(                \n" +
                "					CASE WHEN rqs.custTermsID IS NULL THEN                \n" +
                "                    (                \n" +
                "						SELECT gencCategoryName FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = (SELECT custTermsID FROM mfgcodemst WHERE id = rf.customerid)                \n" +
                "					)                \n" +
                "                    ELSE                \n" +
                "                    (                \n" +
                "                    	SELECT gencCategoryName FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = rqs.custTermsID                \n" +
                "                    )                \n" +
                "                    END                \n" +
                "				)                \n" +
                "			)paymentTerm,                \n" +
                "            (                \n" +
                "				(                \n" +
                "					CASE WHEN rqs.custTermsID IS NULL THEN                \n" +
                "                    (                \n" +
                "						SELECT termsDays FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = (SELECT custTermsID FROM mfgcodemst WHERE id = rf.customerid)                \n" +
                "					)                \n" +
                "                    ELSE                \n" +
                "                    (                \n" +
                "                    	SELECT termsDays FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = rqs.custTermsID                \n" +
                "                    )                \n" +
                "                    END                \n" +
                "				)                \n" +
                "			)termDays,                \n" +
                "            rqs.bomInternalVersion, rqs.quoteSubmitDate, rqs.quoteNumber, rqs.id quoteSubmittedID, ra.assyNote,             \n" +
                "            fun_getTextAngularData(ra.additionalRequirement, vTextAngularKeyCode) additionalRequirement ,                        \n" +
                "            rf.quoteNote, rt.name RFQType, jt.name JobType, rat.name AssyType,             \n" +
                "            fun_getTextAngularData(rqs.OtherNotes, vTextAngularKeyCode) OtherNotes,            \n" +
                "            ra.isSummaryComplete, ra.isReadyForPricing, CONCAT(su.firstName,' ',su.lastName) `submittedBy`, su.emailAddress,                \n" +
                "            ra.quoteFinalStatus,            \n" +
                "            fun_getTextAngularData(rqs.promotions, vTextAngularKeyCode) promotions,            \n" +
                "            ra.assyNote,    part.RoHSStatusID, ro.name AS rohsComplientConvertedValue, ro.rohsIcon AS rohsIconPath,                \n" +
                "            ro.rohsIcon AS rohsIcon,                \n" +
                "            (                \n" +
                "				(                \n" +
                "					CASE WHEN rqs.custBillingAddressID IS NULL THEN                \n" +
                "					(                \n" +
                "						SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                             \n" +
                "						IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))                           \n" +
                "						FROM customer_addresses ca                \n" +
                "						JOIN countrymst co ON co.countryID = ca.countryID                \n" +
                "						WHERE customerID = rf.customerid AND ca.isDefault = 1 AND ca.isDeleted = 0 AND ca.addressType = 'B'                \n" +
                "					)                \n" +
                "					ELSE                \n" +
                "					(                \n" +
                "						SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                             \n" +
                "						IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))                           \n" +
                "						FROM customer_addresses ca                \n" +
                "						JOIN countrymst co ON co.countryID = ca.countryID                \n" +
                "						WHERE id = rqs.custBillingAddressID                \n" +
                "					)                \n" +
                "					END                \n" +
                "				)                \n" +
                "			) billingAddress,                \n" +
                "            (                \n" +
                "				(                \n" +
                "					CASE WHEN rqs.custBillingAddressID IS NULL THEN                \n" +
                "						(                \n" +
                "							SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                             \n" +
                "							IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))                           \n" +
                "							FROM customer_addresses ca                \n" +
                "							JOIN countrymst co ON co.countryID = ca.countryID                \n" +
                "							WHERE customerID = rf.customerid AND ca.isDefault = 1 AND ca.isDeleted = 0 AND ca.addressType = 'S'                \n" +
                "						)                \n" +
                "					ELSE                \n" +
                "						(                \n" +
                "							SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                             \n" +
                "							IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))                                            \n" +
                "							FROM customer_addresses ca                \n" +
                "							JOIN countrymst co ON co.countryID = ca.countryID                \n" +
                "							WHERE id = rqs.custShippingAddressID                \n" +
                "						)                \n" +
                "					END                \n" +
                "                )                \n" +
                "			) shippingAddress,                \n" +
                "            (                \n" +
                "				(                \n" +
                "				CASE WHEN ra.isSummaryComplete = 1 THEN                \n" +
                "					(                \n" +
                "						SELECT GROUP_CONCAT(CONCAT(cs.fullName,(CASE WHEN sc.className IS NULL THEN '' ELSE ' ' END),IFNULL(sc.className,'')) SEPARATOR ' | ') standards                \n" +
                "						FROM rfq_assy_standard_class_detail csd                \n" +
                "						JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0                \n" +
                "						LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0                \n" +
                "						WHERE csd.refSubmittedQuoteID = rqs.id                \n" +
                "					)                \n" +
                "					ELSE                \n" +
                "					(                \n" +
                "						SELECT GROUP_CONCAT(CONCAT(cs.fullName,(CASE WHEN sc.className IS NULL THEN '' ELSE ' ' END),IFNULL(sc.className,'')) SEPARATOR ' | ') standards                \n" +
                "						FROM component_standard_details  csd                \n" +
                "						JOIN certificate_standards cs ON cs.certificateStandardID =  csd.certificateStandardID AND cs.isDeleted = 0                \n" +
                "						LEFT JOIN standard_class sc  ON sc.classID =  csd.ClassID AND cs.isDeleted = 0                \n" +
                "						WHERE csd.isDeleted = 0 AND csd.componentID = (SELECT partID FROM rfq_assemblies WHERE id = ra.id)                \n" +
                "					)                \n" +
                "                END                \n" +
                "				)                \n" +
                "			) standards,                \n" +
                "            (                \n" +
                "				(                \n" +
                "				CASE WHEN ra.isSummaryComplete = 0 AND (SELECT MAX(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyId = ra.id) = rqs.id THEN                \n" +
                "					(                \n" +
                "						(SELECT GROUP_CONCAT(dataelement SEPARATOR '<br/>') dataelementdata FROM (                \n" +
                "						SELECT CONCAT((CASE WHEN subFormName ='' THEN '' ELSE CONCAT('<b>',subFormName,'</b><br/>') END), GROUP_CONCAT(dataelement SEPARATOR '<br/>')) dataelement                \n" +
                "						FROM (SELECT (CASE WHEN refSubFormTransID IS NOT NULL THEN fun_getDataElementSubFormNameByID(refSubFormTransID) ELSE '' END) subFormName,                \n" +
                "						CONCAT(fun_getDataElementNameByID(dataElementID),': ',`value`) dataelement                \n" +
                "						FROM dataelement_transactionvalues WHERE entityID = -12 AND isDeleted = 0 AND refTransID = (SELECT rfqrefID FROM rfq_assemblies WHERE id = ra.id)                \n" +
                "						)dataelementForms                \n" +
                "						GROUP BY subFormName                \n" +
                "						)a)                \n" +
                "					)                \n" +
                "					ELSE                \n" +
                "					(                \n" +
                "						   rqs.RFQMISCData                \n" +
                "					)                \n" +
                "                END                \n" +
                "				)                \n" +
                "			) dataelementdata,                \n" +
                "            (SELECT COUNT(1) > 0 FROM rfq_assemblies_quotation_submitted WHERE id>rqs.id AND rfqAssyID = ra.id AND isDeleted = 0 AND quoteNumber IS NOT NULL) isQuoteHistory,                \n" +
                "            (CASE WHEN ra.status = 1 THEN 'In Progress'                \n" +
                "			  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'                \n" +
                "			  WHEN ra.status = 3 THEN 'Won'                \n" +
                "			  WHEN ra.status = 4 THEN 'Lost'                \n" +
                "              WHEN ra.status = 5 THEN 'Canceled' END) `status` ,                \n" +
                "			ra.status rfq_statusID,                \n" +
                "            ra.winPrice,                \n" +
                "            ra.winQuantity,                \n" +
                "            fun_getTextAngularData(ra.reason,vTextAngularKeyCode) reason                          \n" +
                "            FROM rfq_assemblies ra                \n" +
                "            JOIN rfq_assemblies_quotation_submitted rqs ON rqs.rfqAssyID = ra.id                \n" +
                "			JOIN rfqforms rf ON rf.id = ra.rfqrefID AND rf.isDeleted = 0                \n" +
                "            JOIN rfqtype rt ON rt.id = ra.rfqTypeID AND rt.isDeleted = 0                \n" +
                "            JOIN jobtype jt ON jt.id = ra.jobTypeID AND jt.isDeleted = 0                \n" +
                "            JOIN rfq_assy_typemst rat ON rat.id = ra.assemblyTypeID AND rat.isDeleted = 0                \n" +
                "			JOIN mfgcodemst cu ON cu.id = rf.customerid AND cu.isDeleted = 0                \n" +
                "			JOIN component part ON part.id = ra.partID AND part.isDeleted = 0                \n" +
                "            LEFT JOIN rfq_rohsmst ro ON ro.id = part.RoHSStatusID                \n" +
                "            LEFT JOIN users su ON su.id = ra.quoteSubmittedBy                \n" +
                "			WHERE ra.id= prfqAssyID AND rqs.id = pAssyQuoteSubmittedID;                \n" +
                "  \n" +
                "  \n" +
                "        # select list of submitted quote summary                                                            \n" +
                "			SELECT bomInternalVersion,            \n" +
                "					BOMIssues,            \n" +
                "					bomLastVersion,            \n" +
                "					createByRoleId,            \n" +
                "					createdAt,            \n" +
                "					createdBy,            \n" +
                "					custBillingAddressID,            \n" +
                "					custShippingAddressID,            \n" +
                "					custTermsID,            \n" +
                "					deleteByRoleId,            \n" +
                "					deletedAt,            \n" +
                "					deletedBy,            \n" +
                "					id,            \n" +
                "					isDeleted,            \n" +
                "					fun_getTextAngularData(OtherNotes, vTextAngularKeyCode) OtherNotes,            \n" +
                "					fun_getTextAngularData(promotions, vTextAngularKeyCode) promotions,            \n" +
                "					quoteDueDate,            \n" +
                "					quoteInDate,            \n" +
                "					quoteNumber,            \n" +
                "					quoteSubmitDate,            \n" +
                "					rfqAssyID,            \n" +
                "					RFQMISCData,            \n" +
                "					updateByRoleId,            \n" +
                "					updatedAt,            \n" +
                "					updatedBy             \n" +
                "            FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND id = pAssyQuoteSubmittedID ;                                                            \n" +
                "  \n" +
                "   # select list select terms and conditions of submitted quote summary                                                              \n" +
                "			SELECT qst.*, ec.name ecoTypeName, CONCAT('<ul><li>', GROUP_CONCAT(CONCAT(ecv.name, (CASE WHEN qst.note IS NOT NULL THEN CONCAT(' <b>Note:</b>', qst.note) ELSE '' END)) SEPARATOR '</li><li>'),'</li></ul>') ecoTypeValues                                               \n" +
                "            FROM rfq_assy_quote_submitted_termsconditions qst                                              \n" +
                "            JOIN eco_type_category ec ON qst.termsconditionCatID = ec.ecoTypeCatID                                              \n" +
                "            JOIN eco_type_values ecv ON qst.termsconditionTypeValueID = ecv.ecoTypeValID                                              \n" +
                "            WHERE qst.isDeleted = 0                                                              \n" +
                "            AND RefSubmittedQuoteID = pAssyQuoteSubmittedID                                              \n" +
                "            GROUP BY ecv.ecoTypeCatID;                                              \n" +
                "  \n" +
                "  \n" +
                "		#select list of standard certification detail of submitted quote                                                            \n" +
                "			SELECT csd.id, csd.refSubmittedQuoteID, csd.standardID, csd.standardClassIDs, cs.fullName standard,sc.className stdclass                                                 \n" +
                "            FROM rfq_assy_standard_class_detail csd                                                            \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0                                                            \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0                                                            \n" +
                "			WHERE csd.refSubmittedQuoteID = pAssyQuoteSubmittedID;                                                            \n" +
                "  \n" +
                "		# select letest submited quote summary detail                                                        \n" +
                "			SELECT bomInternalVersion,            \n" +
                "					BOMIssues,            \n" +
                "					bomLastVersion,            \n" +
                "					createByRoleId,            \n" +
                "					createdAt,            \n" +
                "					createdBy,            \n" +
                "					custBillingAddressID,            \n" +
                "					custShippingAddressID,            \n" +
                "					custTermsID,            \n" +
                "					deleteByRoleId,            \n" +
                "					deletedAt,            \n" +
                "					deletedBy,            \n" +
                "					id,            \n" +
                "					isDeleted,            \n" +
                "					fun_getTextAngularData(OtherNotes, vTextAngularKeyCode) OtherNotes,            \n" +
                "					fun_getTextAngularData(promotions, vTextAngularKeyCode) promotions,            \n" +
                "					quoteDueDate,            \n" +
                "					quoteInDate,            \n" +
                "					quoteNumber,            \n" +
                "					quoteSubmitDate,            \n" +
                "					rfqAssyID,            \n" +
                "					RFQMISCData,            \n" +
                "					updateByRoleId,            \n" +
                "					updatedAt,            \n" +
                "					updatedBy              \n" +
                "            FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1;                                                \n" +
                "  \n" +
                "		#select list of NRE detail of assembly.                                            \n" +
                "  \n" +
                "            SELECT *, (amount*toolingQty) AS extendedCost FROM (                                  \n" +
                "				SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,                                            \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,                                           \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days,                                            \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))                                                            \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime                                                      \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime , qoa.toolingQty                                  \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa                                             \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0                                            \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'NRE'                                  \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID                                      \n" +
                "				HAVING amount>0                                  \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime                                  \n" +
                "            ) a                                  \n" +
                "            GROUP BY fieldName,amount;                                  \n" +
                "  \n" +
                "  \n" +
                "		#select list of NRE detail of assembly.                                            \n" +
                "  \n" +
                "            SELECT *, (amount*toolingQty) AS extendedCost FROM (                                  \n" +
                "				SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,                                            \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,                                           \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days,                                            \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))                                                            \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime                                                      \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime , qoa.toolingQty                                               \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa                                             \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0                                            \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'TooLing'                                  \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID                                      \n" +
                "				HAVING amount>0                                  \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime                                  \n" +
                "            ) a                                  \n" +
                "            GROUP BY fieldName,amount,toolingQty;                                  \n" +
                "  \n" +
                "		# Company detail                                  \n" +
                "			SELECT CONCAT(street1,', ',city,', ',state,' ',postcode)AS address,cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo                              \n" +
                "			FROM customer_addresses cua                                  \n" +
                "			JOIN mfgcodemst cu ON cu.id = cua.customerId                                  \n" +
                "			WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1  AND cua.isDeleted = 0;                                  \n" +
                "		# select list of price Group detail        \n" +
                "            SELECT rpg.id priceGroupID, rpg.name priceGroup, rpg.qty, rpg.rfqAssyID,         \n" +
                "			com.mfgPN, com.PIDCode, ro.name rohsName, ro.rohsIcon, ra.partID        \n" +
                "			FROM rfq_assy_submitted_price_group_detail rpg        \n" +
                "			JOIN rfq_assemblies ra ON ra.id = rpg.rfqAssyID        \n" +
                "			JOIN component com ON com.id = ra.partID        \n" +
                "			JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID        \n" +
                "			WHERE rpg.refSubmittedQuoteID = pAssyQuoteSubmittedID        \n" +
                "            ORDER BY rpg.name;        \n" +
                "  \n" +
                "        # select list of price Group         \n" +
                "			SELECT DISTINCT `name` FROM rfq_assy_submitted_price_group_detail        \n" +
                "			WHERE refSubmittedQuoteID = pAssyQuoteSubmittedID        \n" +
                "            ORDER BY NAME;        \n" +
                "  \n" +
                "        # select list select terms and conditions of submitted quote summary                                                            \n" +
                "			SELECT qst.*, ec.name ecoTypeName, ecv.name ecoTypeValues FROM rfq_assy_quote_submitted_termsconditions qst                                            \n" +
                "            JOIN eco_type_category ec ON qst.termsconditionCatID = ec.ecoTypeCatID                                            \n" +
                "            JOIN eco_type_values ecv ON qst.termsconditionTypeValueID = ecv.ecoTypeValID                                            \n" +
                "            WHERE qst.isDeleted = 0                                                            \n" +
                "            AND RefSubmittedQuoteID = pAssyQuoteSubmittedID;                                                \n" +
                "  \n" +
                "  \n" +
                "		# total requote count                                                 \n" +
                "			SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL AND isDeleted = 0;                                                \n" +
                "  \n" +
                "		#select list of standard certification detail of assembly for not submitted quote                                                \n" +
                "			SELECT csd.id, csd.certificateStandardID, csd.ClassID, cs.fullName standard,sc.className stdclass                                                \n" +
                "            FROM component_standard_details  csd                                                            \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.certificateStandardID AND cs.isDeleted = 0                                                            \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.ClassID AND cs.isDeleted = 0                                                            \n" +
                "			WHERE csd.isDeleted = 0 AND csd.componentID = (SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID);        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2587,'2.00','V1','RFQ Filter related change - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2587:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_scanClearMaterial` ;  \n" +
                "CREATE PROCEDURE `Sproc_scanClearMaterial`(                                                                    \n" +
                "	IN pRackNumber VARCHAR(100),          \n" +
                "	IN pwoTransID INT(11),          \n" +
                "	IN pisClean TINYINT(1),          \n" +
                "	IN puserID INT(11),  \n" +
                "	IN pissuperadmin TINYINT(1)            \n" +
                ")  \n" +
                "BEGIN                     \n" +
                "	DECLARE pRackID INT;          \n" +
                "	DECLARE pStatus INT;          \n" +
                "	DECLARE pResult INT DEFAULT 1;          \n" +
                "	DECLARE pwoOperationName VARCHAR(100);          \n" +
                "	DECLARE puserName VARCHAR(100);          \n" +
                "	DECLARE prackStatus VARCHAR(255);        \n" +
                "	DECLARE pwonumber VARCHAR(50);      \n" +
                "	DECLARE pwtrID INT;      \n" +
                "	DECLARE pcurrentWoID INT;      \n" +
                "	DECLARE pisStrictlyFollowRackValidation TINYINT DEFAULT 0;      \n" +
                "	DECLARE pcurrentwoOPID INT;      \n" +
                "	DECLARE plastOperation INT;       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_scanrack_error;             \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE temp_scanrack_error                                                                  \n" +
                "	(                                                                  \n" +
                "	     errorText VARCHAR(2000),                                                                  \n" +
                "	     isOutError INT(11),                                                                \n" +
                "	     isInError INT(11),                                                                \n" +
                "	     isConfirmation INT(11),                                                                 \n" +
                "	     isMessage INT(11),                                                                 \n" +
                "	     isInformation INT(11),          \n" +
                "	     operation VARCHAR(200),          \n" +
                "	     rackStatus INT ,          \n" +
                "	     userName VARCHAR(100),        \n" +
                "	     workorderName VARCHAR(50)                                      \n" +
                "	);           \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		            SELECT rk.id,rk.opStatus,fun_getOperationNameByWOOPID(rk.woOPID),(SELECT fun_getUserNameByID(wtr.createdBy) FROM workorder_trans_rack wtr WHERE wtr.deletedat IS NULL AND           \n" +
                "				wtr.rackID=rk.id ORDER BY wtr.id DESC LIMIT 1),          \n" +
                "				(SELECT wtr.id FROM workorder_trans_rack wtr WHERE wtr.deletedat IS NULL AND           \n" +
                "				wtr.rackID=rk.id ORDER BY wtr.id DESC LIMIT 1),fun_getWorkorderNumberWithRevByID(rk.woID),rk.woID,rk.woOPID          \n" +
                "				INTO pRackID,pStatus,pwoOperationName,puserName,pwtrID,pwonumber,pcurrentWoID,pcurrentwoOPID          \n" +
                "				 FROM rackmst rk WHERE rk.`name`=pRackNumber AND rk.deletedAt IS NULL AND rk.isActive=1;       \n" +
                "  \n" +
                "				 DROP TEMPORARY TABLE IF EXISTS temp_workorder_trans_rack_status_details;      \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS  temp_workorder_trans_rack_status_details AS      \n" +
                "				SELECT `status`,fun_getRackStatusbyID(`status`) statusName FROM workorder_trans_rack_status_details WHERE woTransRackID=pwtrID;      \n" +
                "  \n" +
                "				SELECT GROUP_CONCAT(statusName) INTO prackStatus  FROM temp_workorder_trans_rack_status_details;      \n" +
                "  \n" +
                "				IF(pcurrentWoID IS NOT NULL)THEN      \n" +
                "				 SELECT isStrictlyFollowRackValidation INTO pisStrictlyFollowRackValidation FROM workorder  WHERE woID=pcurrentWoID;       \n" +
                "				 SELECT woopid INTO plastOperation  FROM workorder_operation WHERE qtyControl=1 AND woID=pcurrentWoID ORDER BY opnumber DESC LIMIT 1;        \n" +
                "				 END IF;      \n" +
                "  \n" +
                "			IF(pRackID IS NULL) THEN           \n" +
                "			SET pResult=fun_checkAndInsertRackError(CONCAT('Rack# <b>',pRackNumber, '</b> not found'),1,0,0,1,0,NULL,NULL,NULL,NULL);          \n" +
                "			END IF;				          \n" +
                "  \n" +
                "				IF(pStatus=1)THEN          \n" +
                "						SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is empty. Empty rack cannot be clear.');          \n" +
                "  \n" +
                "						SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,NULL,NULL,NULL,NULL);          \n" +
                "				END IF;      \n" +
                "				IF(pisStrictlyFollowRackValidation=1 AND plastOperation!=pcurrentwoOPID AND pStatus=3 AND pisClean=1 AND pissuperadmin=0)THEN      \n" +
                "				SET @message=CONCAT('Workorder <b>',pwonumber,'</b> is configured as <b>Strictly Follow Rack Validation</b>. Completed rack cannot be clear, Rack status must be WIP.');       \n" +
                "				SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,NULL,NULL,NULL,NULL);      \n" +
                "				END IF;	      \n" +
                "  \n" +
                "  \n" +
                "			IF(pResult =1 AND pisClean=0)THEN          \n" +
                "			SELECT 'Sucess' `status`,200 statusCode,prackStatus AS rackStatus,pwoOperationName AS currentOperation,puserName AS userName,pwonumber AS workorderName ;      \n" +
                "		        ELSEIF(pResult =1 AND pisClean=1) THEN          \n" +
                "				UPDATE rackmst SET woTransID=pwoTransID,woID=(NULL),woOPID=(NULL),partID=(NULL),opStatus=1,updatedBy=puserID,updatedAt=CURRENT_TIMESTAMP	 WHERE          \n" +
                "							id=pRackID;          \n" +
                "				SELECT 'Sucess' `status`,200 statusCode;          \n" +
                "			END IF;          \n" +
                "		IF(pResult!=1)THEN          \n" +
                "			SELECT 	tse.*,201 statusCode FROM temp_scanrack_error tse;          \n" +
                "		END IF;	          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRackHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRackHistory`(                                      \n" +
                "	IN ppageIndex INT(11),                                      \n" +
                "	IN precordPerPage INT(11),                                      \n" +
                "	IN pOrderBy VARCHAR(255),                                      \n" +
                "	IN pWhereClause VARCHAR(16383),          \n" +
                "	IN pwoOPID INT(11),        \n" +
                "	IN pwoID INT(11),        \n" +
                "	IN prackID INT(11)              \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "	DECLARE pOffset INT(11);                                      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;         \n" +
                "  \n" +
                "	SET @temp_Sproc_rackhistorysp = CONCAT(\"                  \n" +
                "		SELECT rh.id,rh.rackName,rh.woNumber,rh.woID,rh.pidCode,rh.rackID,rh.partID,fun_getRoHSNameByPartID(rh.partID) rohsName,fun_getRoHSIconByPartID(rh.partID) rohsIcon,fun_getComponentNameByID(rh.partID),        \n" +
                " fun_getOperationNameByWOOPID(rh.woOPID) operationName,fun_getrackHistoryOperationStatus(rh.id) opstatusName,rh.assyStatus,        \n" +
                "				       (CASE WHEN rh.assyStatus=1 THEN 'Empty'        \n" +
                "				       WHEN rh.assyStatus=2 THEN 'WIP'        \n" +
                "				       WHEN rh.assyStatus=3 THEN 'Completed'ELSE '' END) assyStatusName,       \n" +
                "  fun_getRoleByID(rh.createByRoleId) createdbyRole,        \n" +
                "		fun_getRoleByID(rh.updateByRoleId) updatedbyRole,   \n" +
                "				       fun_getUserNameByID(rh.createdBy) userName,fun_ConvertUTCDatetimeToDataKeyTimeZone(rh.createdAt) createdAt,        \n" +
                "				       (SELECT GROUP_CONCAT(cs.fullName ,' ' , CASE WHEN wc.classIDs IS NULL THEN ''                                  \n" +
                "							ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,''))                   \n" +
                "							FROM standard_class WHERE classID = wc.classIDs) END                                  \n" +
                "							ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@')								                  \n" +
                "				   FROM `workorder_certification` wc                                    \n" +
                "					   JOIN certificate_standards cs ON  wc.certificateStandardID = cs.certificateStandardID                                    \n" +
                "				   WHERE wc.deletedAt IS NULL AND wc.woID = `rh`.`woID`) AS `workCertificationList` , null flux            \n" +
                "  \n" +
                "FROM rackmst_history rh LEFT JOIN workorder w ON w.woID=rh.woID where rh.rackID=\",IFNULL(prackID,'rh.rackID'),\" and rh.woOPID=\",IFNULL(pwoOPID,'rh.woOPID'),\" and rh.woID=\",IFNULL(pwoID,'rh.woID'));           \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY\",\" id DESC\") ;                                      \n" +
                "	ELSE                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                      \n" +
                "		SET pWhereClause = '1=1' ;                                      \n" +
                "	END IF;	           \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                      \n" +
                "	ELSE	                                      \n" +
                "		SET rowNumWhere = '';                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "	/* to get total count of rows */                         \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_rackhistorysp,\" ) c where 1=1 and \", pWhereClause);                        \n" +
                "	PREPARE query2 FROM @SQLStatement2;                        \n" +
                "	EXECUTE query2;                        \n" +
                "	DEALLOCATE PREPARE query2;                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_rackhistorysp,\" ) c WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                        \n" +
                "	PREPARE query1 FROM @SQLStatement2;                        \n" +
                "	EXECUTE query1;             \n" +
                "	DEALLOCATE PREPARE query1;                             \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_IncomingOutgoingRackList` ;  \n" +
                "CREATE PROCEDURE `Sproc_IncomingOutgoingRackList`(                                      \n" +
                "	IN ppageIndex INT(11),                                      \n" +
                "	IN precordPerPage INT(11),                                      \n" +
                "	IN pOrderBy VARCHAR(255),                                      \n" +
                "	IN pWhereClause VARCHAR(16383),          \n" +
                "	IN pwoOPID INT(11),        \n" +
                "	IN ptransactionType VARCHAR(4)                                      \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "	DECLARE pOffset INT(11);                                      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                      \n" +
                "  \n" +
                "	SET @temp_Sproc_icomingOutgoingSp = CONCAT(\"                  \n" +
                "		SELECT 		`wtr`.`id`,		`wtr`.`rackID` ,	`wtr`.`woTransID`,                    \n" +
                "				`wtr`.`employeeID`,		              \n" +
                "				   rk.name as rackName,           \n" +
                "				fun_getUserNameByID(wtr.createdBy) createdby,        \n" +
                "				fun_getRoleByID(wtr.createByRoleId) createdbyRole,        \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(wtr.createdAt) createdAt,       \n" +
                "				fun_getOutgoingOperationStatus(wtr.rackid,wtr.woopid) as rackStatus,  \n" +
                "				fun_getRoleByID(wtr.createByRoleId) updatedbyRole        \n" +
                "  \n" +
                "		FROM 		workorder_trans_rack wtr                    \n" +
                "		LEFT JOIN 	rackmst rk ON `rk`.`id` = `wtr`.`rackID`                    \n" +
                "		WHERE 		wtr.deletedAt IS NULL and wtr.transactionType='\",ptransactionType,\"'  and wtr.woOPID=\",pwoOPID);                     \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY\",\" id DESC\") ;                                      \n" +
                "	ELSE                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                      \n" +
                "		SET pWhereClause = '1=1' ;                                      \n" +
                "	END IF;	           \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                      \n" +
                "	ELSE	                                      \n" +
                "		SET rowNumWhere = '';                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "	/* to get total count of rows */                         \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_icomingOutgoingSp,\" ) c where 1=1 and \", pWhereClause);                        \n" +
                "	PREPARE query2 FROM @SQLStatement2;                        \n" +
                "	EXECUTE query2;                        \n" +
                "	DEALLOCATE PREPARE query2;                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_icomingOutgoingSp,\" ) c WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                        \n" +
                "	PREPARE query1 FROM @SQLStatement2;                        \n" +
                "	EXECUTE query1;             \n" +
                "	DEALLOCATE PREPARE query1;                             \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetClearRackHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetClearRackHistory`(                                    \n" +
                "	IN ppageIndex INT(11),                                    \n" +
                "	IN precordPerPage INT(11),                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                    \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "	IN pwoOPID INT(11)              \n" +
                ")  \n" +
                "BEGIN                    \n" +
                "	DECLARE pOffset INT(11);                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                    \n" +
                "  \n" +
                "	SET @temp_Sproc_clearRackHistory = CONCAT(\"                \n" +
                "		SELECT 		`rh`.`id`,		`rh`.`rackID` ,	        \n" +
                "				   rk.name as rackName,         \n" +
                "				fun_getUserNameByID(rh.createdBy) createdby,      \n" +
                "				fun_getRoleByID(rh.createByRoleId) createdbyRole,      \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(rh.createdAt) createdAt,    \n" +
                "		fun_getRoleByID(rh.updateByRoleId) updatedbyRole   \n" +
                "  \n" +
                "		FROM 		rackmst_history rh                  \n" +
                "		LEFT JOIN 	rackmst rk ON `rk`.`id` = `rh`.`rackID` and rk.deletedAt is null                  \n" +
                "		WHERE 		rh.deletedAt IS NULL and rh.assyStatus=1  and rh.woOPID=\",pwoOPID);                   \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY\",\" id DESC\") ;                                    \n" +
                "	ELSE                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                    \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                    \n" +
                "		SET pWhereClause = '1=1' ;                                    \n" +
                "	END IF;	         \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                    \n" +
                "	ELSE	                                    \n" +
                "		SET rowNumWhere = '';                                    \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "	/* to get total count of rows */                       \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_clearRackHistory,\" ) c where 1=1 and \", pWhereClause);                      \n" +
                "	PREPARE query2 FROM @SQLStatement2;                      \n" +
                "	EXECUTE query2;                      \n" +
                "	DEALLOCATE PREPARE query2;                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_clearRackHistory,\" ) c WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                      \n" +
                "	PREPARE query1 FROM @SQLStatement2;                      \n" +
                "	EXECUTE query1;           \n" +
                "	DEALLOCATE PREPARE query1;                           \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCurrentRackDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCurrentRackDetails`(                                          \n" +
                "	IN prackNumber VARCHAR(50)                                        \n" +
                "  \n" +
                ")  \n" +
                "BEGIN         \n" +
                "	DECLARE prackStatus VARCHAR(255);    \n" +
                "		DECLARE pRackID INT(11);      \n" +
                "		DECLARE pStatus INT(11);     \n" +
                "		DECLARE pcurWoOPID INT(11);    \n" +
                "		DECLARE pwoID INT(11);    \n" +
                "		DECLARE pwtrID INT(11);  \n" +
                "		DECLARE pwoName VARCHAR(50);  \n" +
                "		DECLARE pwoOperationName VARCHAR(100);  \n" +
                "		DECLARE  puserName VARCHAR(50);  \n" +
                "		DECLARE pidcode VARCHAR(100);    \n" +
                "		DECLARE partID INT;   \n" +
                "  \n" +
                "             SELECT rk.id,rk.opStatus,fun_getWorkorderNumberWithRevByID(wo.woID) woNumber,fun_getOperationNameByWOOPID(rk.woOPID),        \n" +
                "             (CASE WHEN (`rk`.`opStatus` = 1) THEN `fun_getUserNameByID`(`rk`.`updatedBy`) ELSE        \n" +
                "		(SELECT fun_getUserNameByID(wtr.createdBy) FROM workorder_trans_rack wtr WHERE wtr.deletedat IS NULL AND           \n" +
                "				wtr.rackID=rk.id ORDER BY wtr.id DESC LIMIT 1)END),          \n" +
                "				(SELECT wtr.id FROM workorder_trans_rack wtr WHERE wtr.deletedat IS NULL AND           \n" +
                "				wtr.rackID=rk.id AND wtr.woOPID=rk.woOPID ORDER BY wtr.id DESC LIMIT 1),      \n" +
                "				rk.woOPID ,      \n" +
                "				(SELECT GROUP_CONCAT(cs.fullName ,' ' , CASE WHEN wc.classIDs IS NULL THEN ''                                    \n" +
                "							ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,''))                     \n" +
                "							FROM standard_class WHERE classID = wc.classIDs) END                                    \n" +
                "							ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@')								                    \n" +
                "				   FROM `workorder_certification` wc                                      \n" +
                "					   JOIN certificate_standards cs ON  wc.certificateStandardID = cs.certificateStandardID                                      \n" +
                "				   WHERE wc.deletedAt IS NULL AND wc.woID = `wo`.`woID`) ,c.pidcode,fun_getRoHSIconByID(c.rohsstatusid),fun_getRoHSNameByID(c.rohsstatusid),      \n" +
                "				   (CASE WHEN (`rk`.`opStatus` = 1) THEN `fun_ConvertUTCDatetimeToDataKeyTimeZone`(`rk`.`updatedAt`) ELSE      \n" +
                "				   (SELECT `fun_ConvertUTCDatetimeToDataKeyTimeZone`(`wtr`.`createdAt`)       \n" +
                "					FROM `workorder_trans_rack` `wtr` WHERE wtr.deletedat IS NULL AND           \n" +
                "				wtr.rackID=rk.id AND wtr.woOPID=rk.woOPID ORDER BY wtr.id DESC LIMIT 1) END),c.id,rk.woID               \n" +
                "				INTO pRackID,pStatus,pwoName,pwoOperationName,puserName,pwtrID,pcurWoOPID,@pwocerti,pidcode,@rohsicon,@prohsName,@scanTime,partID,pwoID          \n" +
                "				 FROM rackmst rk LEFT JOIN workorder wo ON wo.woid=rk.woid AND wo.deletedAt IS NULL      \n" +
                "				LEFT JOIN component c ON c.id=wo.partid AND c.deletedat IS NULL      \n" +
                "				  WHERE rk.`name`=pRackNumber AND rk.isdeleted=0 AND rk.isActive=1;         \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				 DROP TEMPORARY TABLE IF EXISTS temp_workorder_trans_rack_status_details;    \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS  temp_workorder_trans_rack_status_details AS    \n" +
                "				SELECT `status`,fun_getRackStatusbyID(`status`) statusName  FROM workorder_trans_rack_status_details WHERE woTransRackID=pwtrID;     \n" +
                "  \n" +
                "				SELECT GROUP_CONCAT(statusName) INTO prackStatus  FROM temp_workorder_trans_rack_status_details; 				    \n" +
                "  \n" +
                "				SELECT pRackID ,pStatus,pwoName,pwoOperationName,puserName,prackStatus,pcurWoOPID,@pwocerti pwocerti,      \n" +
                "				 pidcode,@rohsicon rohsicon,@prohsName prohsName,@scanTime scantime,partID,pwoID woID;        \n" +
                "  \n" +
                "				 -- get available operation detail only for rack completed      \n" +
                "  \n" +
                "	       IF(pStatus=3 AND (SELECT COUNT(1) FROM temp_workorder_trans_rack_status_details WHERE `status` NOT IN(4))>0)THEN      \n" +
                "  \n" +
                "			/*check current operation parameter have cluster */        		           \n" +
                "			SELECT a.isteamoperation,  a.isrework,  a.qtyControl,                 \n" +
                "				b.ClusterID,  b.isparellelOperation, a.isIssueQty,                  \n" +
                "				a.opNumber, a.isLoopOperation               \n" +
                "				INTO               \n" +
                "				@pisteamoperation ,@pisrework,@pqtyControl,              \n" +
                "				@pclusterID,@pisparellelOperation,@pisIssueQty,              \n" +
                "				@popNumber, @pisloopoperation                \n" +
                "			FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                   \n" +
                "			a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID  AND   IFNULL(a.isdeleted,0) = 0                  \n" +
                "			WHERE  a.woid = pwoID   AND a.woOPID = pcurWoOPID  AND  IFNULL(a.isdeleted,0) = 0 ;                  \n" +
                "  \n" +
                "	/*check previous operation parameter have cluster */                  \n" +
                "			SELECT a.woOPID, a.opNumber, a.isteamoperation,              \n" +
                "					a.isrework,a.qtyControl,b.ClusterID,               \n" +
                "				b.isparellelOperation, a.isLoopOperation                   \n" +
                "			INTO               \n" +
                "				@prevwoOPID, @prevopnumber,@previsteamoperation,              \n" +
                "				@prevpisrework, @prevpqtyControl,@prevpclusterID,              \n" +
                "				@prevpisparellelOperation, @prevpisloopoperation                  \n" +
                "				FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                   \n" +
                "				a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID                  \n" +
                "			WHERE  a.woid = pwoID AND  IFNULL(a.isdeleted,0) = 0                  \n" +
                "			AND  a.opNumber  = (SELECT MAX(opNumber)                  \n" +
                "			    FROM workorder_operation b                   \n" +
                "			    WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0                  \n" +
                "				 AND b.qtyControl = 1 AND b.opNumber < @popNumber);                   \n" +
                "  \n" +
                "	/*check next operation Pramtere have loop operation */                  \n" +
                "			SELECT a.woOPID, a.opNumber, a.isteamoperation,              \n" +
                "			a.isrework,a.qtyControl,b.ClusterID,               \n" +
                "			b.isparellelOperation, a.isLoopOperation                   \n" +
                "		INTO               \n" +
                "			@nextwoOPID, @nextopnumber,@nextisteamoperation,              \n" +
                "			@nextpisrework, @nextpqtyControl,@nextpclusterID,              \n" +
                "			@nextpisparellelOperation, @nextpisloopoperation                  \n" +
                "			FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                   \n" +
                "			a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID                  \n" +
                "			WHERE  a.woid = pwoID  AND  IFNULL(a.isdeleted,0) = 0                  \n" +
                "			AND  a.opNumber  = (SELECT MIN(opNumber)                  \n" +
                "			    FROM workorder_operation b                   \n" +
                "			    WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0                  \n" +
                "				 AND b.qtyControl = 1 AND b.opNumber > @popNumber);      \n" +
                "				 IF(IFNULL(@pisrework,0)=0 AND IFNULL(@pisparellelOperation,0)=0)THEN      \n" +
                "					IF(IFNULL(@nextpisparellelOperation,0)=1)THEN      \n" +
                "						DROP TEMPORARY TABLE IF EXISTS tempRacktbl;          \n" +
                "						CREATE TEMPORARY TABLE IF NOT EXISTS tempRacktbl          \n" +
                "						SELECT MAX(wtr.id) wtrID FROM workorder_trans_rack wtr           \n" +
                "							WHERE wtr.woopid IN (SELECT woc.woopid FROM workorder_operation_cluster woc             \n" +
                "							WHERE woc.clusterID=@nextpclusterID AND woc.deletedAt IS NULL) AND wtr.rackid=pRackID;      \n" +
                "						SELECT  GROUP_CONCAT(wtr.woOPID) INTO @currwoopIds FROM workorder_trans_rack wtr WHERE wtr.id IN (SELECT wtrID FROM tempRacktbl)      \n" +
                "						AND EXISTS(SELECT 1 FROM workorder_trans_rack_status_details wtrs WHERE wtrs.woTransRackID=wtr.id AND wtrs.status=0);   	      \n" +
                "						SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid IN (      \n" +
                "						SELECT woc.woOPID FROM workorder_operation_cluster woc WHERE woc.clusterID=@nextpclusterID AND woc.deletedAt IS NULL)AND      \n" +
                "						woOpid NOT IN (IFNULL(@currwoopIds,0));      \n" +
                "					END IF;      \n" +
                "  \n" +
                "					IF(IFNULL(@nextpisrework,0)=1)THEN      \n" +
                "						IF(SELECT COUNT(1) FROM temp_workorder_trans_rack_status_details WHERE `status`  IN(3,5))>0 THEN      \n" +
                "							SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid=@nextwoOPID;      \n" +
                "						ELSE      \n" +
                "							SELECT a.woOPID, a.opNumber,a.qtyControl,b.ClusterID,                \n" +
                "							b.isparellelOperation, a.isLoopOperation            \n" +
                "							INTO @prlwoOPID, @prlopnumber,                \n" +
                "							@prlpqtyControl,@prlpclusterID,                \n" +
                "							@prlpisparellelOperation, @prlpisloopoperation                    \n" +
                "							FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                     \n" +
                "							a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID                    \n" +
                "							WHERE  a.woid = pwoID  AND  IFNULL(a.isdeleted,0) = 0                    \n" +
                "							AND  a.opNumber  = (SELECT MAX(opNumber)                    \n" +
                "							FROM workorder_operation b                     \n" +
                "							WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0                    \n" +
                "							AND b.qtyControl = 1 AND b.opNumber > @nextopnumber);       \n" +
                "  \n" +
                "								IF(IFNULL(@prlpisparellelOperation,0)=1)THEN      \n" +
                "  \n" +
                "									DROP TEMPORARY TABLE IF EXISTS tempRacktbl;          \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS tempRacktbl          \n" +
                "								SELECT MAX(wtr.id) wtrID FROM workorder_trans_rack wtr           \n" +
                "							WHERE wtr.woopid IN (SELECT woc.woopid FROM workorder_operation_cluster woc             \n" +
                "							WHERE woc.clusterID=@prlpclusterID AND woc.deletedAt IS NULL) AND wtr.rackid=pRackID;      \n" +
                "  \n" +
                "							SELECT  GROUP_CONCAT(wtr.woOPID) INTO @currwoopIds FROM workorder_trans_rack wtr WHERE wtr.id IN (SELECT wtrID FROM tempRacktbl)  AND     \n" +
                "							EXISTS(SELECT 1 FROM workorder_trans_rack_status_details wtrs WHERE wtrs.woTransRackID=wtr.id AND wtrs.status=0);      \n" +
                "  \n" +
                "							SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid IN (      \n" +
                "							SELECT woc.woOPID FROM workorder_operation_cluster woc WHERE woc.clusterID=@prlpclusterID AND woc.deletedAt IS NULL)AND      \n" +
                "							woOpid NOT IN (IFNULL(@currwoopIds,0));      \n" +
                "								ELSE      \n" +
                "								SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid=@prlwoOPID;      \n" +
                "								END IF;      \n" +
                "  \n" +
                "						END IF;      \n" +
                "					END IF;      \n" +
                "					IF(IFNULL(@nextpisparellelOperation,0)=0 AND IFNULL(@nextpisrework,0)=0)THEN      \n" +
                "					SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid=@nextwoOPID;      \n" +
                "					END IF;      \n" +
                "				 END IF;      \n" +
                "				 IF(IFNULL(@pisrework,0)=1 AND IFNULL(@pisloopoperation,0)=1)THEN      \n" +
                "					SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid=@prevwoOPID;      \n" +
                "				 END IF;      \n" +
                "				 IF(IFNULL(@pisrework,0)=1 AND IFNULL(@pisloopoperation,0)=0)THEN      \n" +
                "					SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid=@nextwoOPID;      \n" +
                "				 END IF;      \n" +
                "				 IF(IFNULL(@pisparellelOperation,0)=1)THEN      \n" +
                "  \n" +
                "				 SELECT woc.woopid INTO @usedwoopid FROM workorder_trans_rack woc WHERE woc.rackid=pRackID ORDER BY woc.id DESC LIMIT 1;      \n" +
                "						SELECT MAX(wo.opNumber) INTO @parallelOPNumber FROM workorder_operation_cluster woc LEFT JOIN workorder_operation wo ON wo.woOPID=woc.woOPID AND wo.deletedAt IS NULL              \n" +
                "					WHERE woc.clusterID = @pclusterID AND woc.deletedAt IS NULL;      \n" +
                "  \n" +
                "						SELECT a.woOPID, a.opNumber, a.isteamoperation,              \n" +
                "						a.isrework,a.qtyControl,b.ClusterID,               \n" +
                "						b.isparellelOperation, a.isLoopOperation                   \n" +
                "						INTO   	            \n" +
                "					@nextwoOPID, @nextopnumber,@nextisteamoperation,              \n" +
                "					@nextpisrework, @nextpqtyControl,@nextpclusterID,              \n" +
                "					@nextpisparellelOperation, @nextpisloopoperation                  \n" +
                "						FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                   \n" +
                "					a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID                  \n" +
                "					WHERE  a.woid = pwoID  AND  IFNULL(a.isdeleted,0) = 0                  \n" +
                "					AND  a.opNumber  = (SELECT MIN(opNumber)                  \n" +
                "					FROM workorder_operation b                   \n" +
                "					WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0                  \n" +
                "						AND b.qtyControl = 1 AND b.opNumber > @parallelOPNumber);      \n" +
                "  \n" +
                "						IF(IFNULL(@nextpisrework,0)=1)  THEN      \n" +
                "							IF(SELECT COUNT(1) FROM temp_workorder_trans_rack_status_details WHERE `status`  IN(3,5))>0 THEN      \n" +
                "							SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE       \n" +
                "							(woOpid=@nextwoOPID OR (woOPID IN (      \n" +
                "							SELECT woc.woOPID FROM workorder_operation_cluster woc WHERE woc.clusterID=@pclusterID AND woc.deletedAt IS NULL)AND      \n" +
                "							 woopid NOT IN (@usedwoopid)AND      \n" +
                "							woOpid NOT IN (IFNULL(pcurWoOPID,0))));      \n" +
                "						      ELSE      \n" +
                "							SELECT a.woOPID, a.opNumber,a.qtyControl,b.ClusterID,                \n" +
                "							b.isparellelOperation, a.isLoopOperation            \n" +
                "							INTO @prlwoOPID, @prlopnumber,                \n" +
                "							@prlpqtyControl,@prlpclusterID,                \n" +
                "							@prlpisparellelOperation, @prlpisloopoperation                    \n" +
                "							FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                     \n" +
                "							a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID                    \n" +
                "							WHERE  a.woid = pwoID  AND  IFNULL(a.isdeleted,0) = 0                    \n" +
                "							AND  a.opNumber  = (SELECT MIN(opNumber)                    \n" +
                "							FROM workorder_operation b                     \n" +
                "							WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0                    \n" +
                "							AND b.qtyControl = 1 AND b.opNumber > @nextopnumber);       \n" +
                "  \n" +
                "							SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE       \n" +
                "							(woOpid=@prlwoOPID OR (woOPID IN (      \n" +
                "							SELECT woc.woOPID FROM workorder_operation_cluster woc WHERE woc.clusterID=@pclusterID AND woc.deletedAt IS NULL)      \n" +
                "							AND      \n" +
                "						     woopid NOT IN (@usedwoopid)AND      \n" +
                "							woOpid NOT IN (IFNULL(pcurWoOPID,0))));      \n" +
                "						    END IF;      \n" +
                "						END IF;	      \n" +
                "						IF(IFNULL(@nextpisrework,0)=0)THEN      \n" +
                "						SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE       \n" +
                "							(woOpid=@nextwoOPID OR (woOPID IN (      \n" +
                "							SELECT woc.woOPID FROM workorder_operation_cluster woc WHERE woc.clusterID=@pclusterID AND woc.deletedAt IS NULL)AND      \n" +
                "							woOpid NOT IN (IFNULL(pcurWoOPID,0))      \n" +
                "							AND  woopid NOT IN (@usedwoopid)));      \n" +
                "						END IF;      \n" +
                "  \n" +
                "				 END IF;      \n" +
                "  \n" +
                "	       END IF;      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2588,'2.00','V1','Clear Rack Procedure-Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2588:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 22-07-2020 *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_inspectionRequirementMst`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_inspectionRequirementMst`(  \n" +
                "	IN tableName VARCHAR(255),        \n" +
                "	IN IDs LONGTEXT,        \n" +
                "	IN deletedBy INT,        \n" +
                "	IN entityID VARCHAR(255),        \n" +
                "	IN refrenceIDs LONGTEXT,        \n" +
                "	IN countList INT,        \n" +
                "    IN pRoleID INT        \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SET @SQl1 = CONCAT('update inspection_mst     \n" +
                "								set isDeleted=1,    \n" +
                "                                deletedBy=',deletedBy,',    \n" +
                "                                deleteByRoleId = ',pRoleID,',    \n" +
                "                                deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"    \n" +
                "						 where (id in (',IDs,') and deletedAt is null ) ');   \n" +
                "  \n" +
                "	        PREPARE stmt1 FROM @SQL1;    \n" +
                "	        EXECUTE stmt1;    \n" +
                "  \n" +
                "END;  \n" +

                /* **************************** Add Script Version -> 22-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2589,'2.00','V1','Delete Purchase/Incoming Ispection Requirement(s) - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2589:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 22-07-2020 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPurchaseIncomingInspectionList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPurchaseIncomingInspectionList`(  \n" +
                "    IN ppageIndex INT(11),                          \n" +
                "	IN precordPerPage INT(11),                          \n" +
                "	IN pOrderBy VARCHAR(255),                          \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);                          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "	SET @tempQuery = CONCAT(\"SELECT id, requirement,					      \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(createdAt) createdAt,       \n" +
                "			fun_getUserNameByID(createdBy) createdBy,         							  \n" +
                "			fun_getUserNameByID(updatedBy) updatedBy,      \n" +
                "			fun_getUserNameByID(deletedBy) deletedBy,            \n" +
                "			fun_getRoleByID(createByRoleId) createByRoleId,            \n" +
                "			fun_getRoleByID(updateByRoleId) updateByRoleId,            \n" +
                "			fun_getRoleByID(deleteByRoleId) deleteByRoleId,           \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(UpdatedAt) updatedAt,            \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(deletedAt) deletedAt  \n" +
                "            FROM `inspection_mst`              \n" +
                "			WHERE IFNULL(isDeleted,0) = 0  \");        \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                          \n" +
                "			SET pWhereClause = '1=1' ;                          \n" +
                "		END IF;	                          \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"requirement ASC\") ;                          \n" +
                "		ELSE                          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                          \n" +
                "		END IF;	        \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                           \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                          \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                          \n" +
                "		ELSE	                          \n" +
                "			SET rowNumWhere = '';                          \n" +
                "		END IF;	                          \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);                    \n" +
                "			PREPARE query2 FROM @SQLStatement2;                  \n" +
                "			EXECUTE query2;                  \n" +
                "			DEALLOCATE PREPARE query2;                \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c                  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                  \n" +
                "			EXECUTE query1;                  \n" +
                "			DEALLOCATE PREPARE query1;         \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2590,'2.00','V1','get data of Purchase/Incoming Ispection Requirement(s) - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2590:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 22-07-2020 *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_inspectionRequirementTemplate`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_inspectionRequirementTemplate`(  \n" +
                "	IN tableName VARCHAR(255),        \n" +
                "	IN IDs LONGTEXT,        \n" +
                "	IN deletedBy INT,        \n" +
                "	IN entityID VARCHAR(255),        \n" +
                "	IN refrenceIDs LONGTEXT,        \n" +
                "	IN countList INT,        \n" +
                "    IN pRoleID INT        \n" +
                ")  \n" +
                "BEGIN		  \n" +
                "	   SET @SQl2 = CONCAT('update   inspection_template_mst set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where (id  IN(',IDs,') and deletedAt is NULL)');		                                                                        \n" +
                "				PREPARE stmt2 FROM @SQL2;                                                                        \n" +
                "				EXECUTE stmt2;	      \n" +
                "  \n" +
                "		SET @SQl3 = CONCAT('update  inspection_template_requirement_det set isDeleted=1,deletedBy=',deletedBy,',deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where inspectionTemplateId IN(',IDs,') and deletedAt is null');    \n" +
                "				PREPARE stmt3 FROM @SQl3;    \n" +
                "				EXECUTE stmt3;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2591,'2.00','V1','Purchase/Incoming Ispection Requirement Template delete - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2591:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 22-07-2020 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPurchaseInspectionTemplateList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPurchaseInspectionTemplateList`(  \n" +
                "	IN ppageIndex INT(11),                          \n" +
                "	IN precordPerPage INT(11),                          \n" +
                "	IN pOrderBy VARCHAR(255),                          \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "    DECLARE pOffset INT(11);                          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;      \n" +
                "	SET @tempQuery = CONCAT(\"SELECT id,name,  \n" +
                "				(select group_concat(concat(id, '$#$',requirement) SEPARATOR '#$#')  \n" +
                "				from inspection_template_requirement_det itrd  \n" +
                "					where IFNULL(isDeleted,0) = 0  and itrd.inspectionTemplateId = itm.id) as requirement,	  \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(createdAt) createdAt,       \n" +
                "			fun_getUserNameByID(createdBy) createdBy,         							  \n" +
                "			fun_getUserNameByID(updatedBy) updatedBy,      \n" +
                "			fun_getUserNameByID(deletedBy) deletedBy,            \n" +
                "			fun_getRoleByID(createByRoleId) createByRoleId,            \n" +
                "			fun_getRoleByID(updateByRoleId) updateByRoleId,            \n" +
                "			fun_getRoleByID(deleteByRoleId) deleteByRoleId,           \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(UpdatedAt) updatedAt,            \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(deletedAt) deletedAt  \n" +
                "            FROM `inspection_template_mst`  itm           \n" +
                "			WHERE IFNULL(isDeleted,0) = 0\");        \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                          \n" +
                "			SET pWhereClause = '1=1' ;                          \n" +
                "		END IF;	                          \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;                          \n" +
                "		ELSE                          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                          \n" +
                "		END IF;	        \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                           \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                          \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                          \n" +
                "		ELSE	                          \n" +
                "			SET rowNumWhere = '';                          \n" +
                "		END IF;	                          \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);                    \n" +
                "  \n" +
                "            PREPARE query2 FROM @SQLStatement2;                  \n" +
                "			EXECUTE query2;                  \n" +
                "			DEALLOCATE PREPARE query2;                \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c                  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                  \n" +
                "			EXECUTE query1;                  \n" +
                "			DEALLOCATE PREPARE query1;         \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2592,'2.00','V1','get list Purchase/Incoming Ispection Requirement Template - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2592:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 22-07-2020 *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(               \n" +
                "    IN tableName VARCHAR(255),               \n" +
                "    IN IDs LONGTEXT,               \n" +
                "    IN deletedBy INT,               \n" +
                "    IN entityID VARCHAR(255),               \n" +
                "    IN refrenceIDs LONGTEXT,    \n" +
                "    IN countList INT,                    \n" +
                "    IN pRoleID INT                    \n" +
                ")  \n" +
                "BEGIN                                                \n" +
                "IF tableName=\"employees\" THEN               \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;               \n" +
                "IF tableName=\"eco_type_category\" THEN               \n" +
                "     CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);           \n" +
                "END IF;               \n" +
                "IF tableName=\"eco_type_values\" THEN               \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);         \n" +
                "END IF;               \n" +
                "IF tableName=\"customers\" THEN               \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);             \n" +
                "END IF;               \n" +
                "IF tableName=\"certificate_standards\" THEN               \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);           \n" +
                "END IF;               \n" +
                "IF tableName=\"department\" THEN               \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);               \n" +
                "END IF;               \n" +
                "IF tableName=\"genericcategory\" THEN               \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;               \n" +
                "IF tableName=\"equipment\" THEN               \n" +
                "    CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;                                       \n" +
                "IF tableName=\"master_templates\" THEN               \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;               \n" +
                "IF tableName=\"operations\" THEN               \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);         \n" +
                "END IF;               \n" +
                "IF tableName=\"workorder\" THEN               \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;               \n" +
                "IF tableName=\"roles\" THEN              \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;               \n" +
                "IF tableName=\"standard_class\" THEN               \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;               \n" +
                "IF tableName=\"dataelement\" THEN               \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);    \n" +
                "END IF;               \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN               \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);          \n" +
                "END IF;               \n" +
                "IF tableName=\"component\" THEN               \n" +
                "    CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);      \n" +
                "END IF;               \n" +
                "IF tableName=\"workorder_cluster\" THEN                \n" +
                "    CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);    \n" +
                "END IF;               \n" +
                "IF tableName=\"workorder_operation\" THEN              \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);    \n" +
                "END IF;               \n" +
                "IF tableName=\"workorder_operation_part\" THEN               \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);           \n" +
                "END IF;               \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN               \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);             \n" +
                "END IF;               \n" +
                "IF tableName=\"workorder_operation_employee\" THEN               \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);            \n" +
                "END IF;               \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN               \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);           \n" +
                "END IF;               \n" +
                "IF tableName=\"entity\" THEN               \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;               \n" +
                "IF tableName=\"salesordermst\" THEN               \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);             \n" +
                "END IF;               \n" +
                "IF tableName=\"mfgcodemst\" THEN               \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);         \n" +
                "END IF;               \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN               \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);      \n" +
                "END IF;               \n" +
                "IF tableName=\"shippedassembly\" THEN               \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;               \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN               \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);     \n" +
                "END IF;               \n" +
                "IF tableName=\"br_label_template\" THEN               \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);     \n" +
                "END IF;               \n" +
                "IF tableName=\"measurement_types\" THEN               \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);             \n" +
                "END IF;               \n" +
                "IF tableName=\"uoms\" THEN               \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;               \n" +
                "IF tableName=\"jobtypes\" THEN               \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;               \n" +
                "IF tableName=\"rfqtype\" THEN               \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);             \n" +
                "END IF;               \n" +
                "IF tableName=\"reasonmst\" THEN               \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;               \n" +
                "IF tableName=\"component_sid_stock\" THEN     \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);      \n" +
                "END IF;               \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN      \n" +
                "    CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);       \n" +
                "END IF;               \n" +
                "IF tableName=\"chart_templatemst\" THEN                \n" +
                "    CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);              \n" +
                "END IF;               \n" +
                "IF tableName=\"shipping_requestdet\" THEN               \n" +
                "    CALL Sproc_checkDelete_shipping_requestdet(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;               \n" +
                "IF tableName=\"chart_rawdata_category\" THEN               \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);         \n" +
                "END IF;                      \n" +
                "IF tableName=\"rfq_lineitems\" THEN               \n" +
                "      CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                    \n" +
                "END IF;               \n" +
                "IF tableName=\"requirement\" THEN               \n" +
                "    CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);     \n" +
                "END IF;               \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN          \n" +
                "    CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);             \n" +
                "END IF;               \n" +
                "IF tableName=\"customer_addresses\" THEN               \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);             \n" +
                "END IF;               \n" +
                "IF tableName=\"rfqforms\" THEN               \n" +
                "    CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);             \n" +
                "END IF;               \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN               \n" +
                "    CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;               \n" +
                "IF tableName=\"who_bought_who\" THEN               \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);    \n" +
                "END IF;               \n" +
                "IF tableName=\"rfq_parttypemst\" THEN               \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;               \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN               \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);    \n" +
                "END IF;               \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN               \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;         \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN               \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);             \n" +
                "END IF;                                      \n" +
                "IF tableName=\"cost_category\" THEN               \n" +
                "    CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                         \n" +
                "END IF;                       \n" +
                "IF tableName=\"chartypemst\" THEN               \n" +
                "    CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                      \n" +
                "END IF;      \n" +
                "IF tableName=\"countrymst\" THEN      \n" +
                "     CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;    \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN      \n" +
                "     CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;    \n" +
                "IF tableName=\"rfq_assy_typemst\" THEN    \n" +
                "     CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                \n" +
                "END IF;                                                              \n" +
                "IF tableName=\"warehousemst\" THEN    \n" +
                "     CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                 \n" +
                "END IF;                                                           \n" +
                "IF tableName=\"binmst\" THEN    \n" +
                "     CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                \n" +
                "END IF;                                                       \n" +
                "IF tableName=\"rackmst\" THEN    \n" +
                "     CALL Sproc_checkDelete_rackmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                \n" +
                "END IF;          \n" +
                "IF tableName=\"component_logicalgroup\" THEN                                                          \n" +
                "     CALL Sproc_checkDelete_component_logical_group(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                \n" +
                "END IF;                                                       \n" +
                "IF tableName=\"packing_slip_material_receive\" THEN                                                          \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);     \n" +
                "END IF;                                                  \n" +
                "IF tableName=\"packing_slip_material_receive_det\" THEN                                                          \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive_det(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                \n" +
                "END IF;                                                  \n" +
                "IF tableName=\"packing_slip_track_number\" THEN                                                          \n" +
                "     CALL Sproc_checkDelete_packing_slip_track_number(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                \n" +
                "END IF;                                               \n" +
                "IF tableName=\"reserve_stock_request\" THEN                                              \n" +
                "       	 CALL Sproc_checkDelete_reserve_stock_request(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                              \n" +
                "END IF;         \n" +
                "IF tableName=\"component_packagingmst\" THEN                                                            \n" +
                "     CALL Sproc_checkDelete_component_packagingmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;       \n" +
                "IF tableName=\"workorder_trans_narrative_history\" THEN                                                            \n" +
                "     CALL Sproc_checkDelete_workorder_trans_narrative_history(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;                                           \n" +
                "IF tableName=\"scannermst\" THEN                                                            \n" +
                "     CALL Sproc_checkDelete_Scanner(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;                                          \n" +
                "IF tableName=\"component_alternatepn_validations\" THEN                                                           \n" +
                "     CALL Sproc_checkDelete_Alias_Parts_Validation(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;    \n" +
                "IF tableName=\"workorder_operation_equipment_feeder_details\" THEN                \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment_feeder_details(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);              \n" +
                "END IF;                                  \n" +
                "IF tableName=\"component_price_break_details\" THEN                \n" +
                "    CALL Sproc_checkDelete_component_price_break_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;                                   \n" +
                "IF tableName=\"department_location\" THEN                \n" +
                "    CALL Sproc_checkDelete_department_location(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;                                               \n" +
                "IF tableName=\"purchase_parts_details\" THEN                \n" +
                "    CALL Sproc_checkDelete_purchase_parts_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;                                               \n" +
                "IF tableName=\"rfq_rohsmst\" THEN                \n" +
                "    CALL Sproc_checkDelete_rfq_rohsmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;                          \n" +
                "IF tableName=\"component_partstatusmst\" THEN                \n" +
                "    CALL Sproc_checkDelete_component_partstatusmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;                          \n" +
                "IF tableName=\"workorder_trans_umid_details\" THEN                \n" +
                "    CALL Sproc_checkDelete_workorder_trans_umid_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;                   \n" +
                "IF tableName=\"labor_cost_template\" THEN                \n" +
                "    CALL Sproc_checkDelete_labor_cost_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;                                                  \n" +
                "IF tableName=\"rfq_packagecasetypemst\" THEN                \n" +
                "    CALL Sproc_checkDelete_rfq_packagecasetypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;              \n" +
                "IF tableName=\"component_dynamic_attribute\" THEN                \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;              \n" +
                "IF tableName=\"component_dynamic_attribute_mapping_part\" THEN                \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute_mapping_part(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;            \n" +
                "IF tableName=\"labeltemplatesmst\" THEN            \n" +
                "    CALL Sproc_checkDelete_labeltemplates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;         \n" +
                "IF tableName=\"reportmaster\" THEN            \n" +
                "    CALL Sproc_checkDelete_reportMaster(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;           \n" +
                "IF tableName=\"operating_temperature_conversion_mst\" THEN            \n" +
                "    CALL Sproc_checkDelete_operating_temperature_conversion_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;     \n" +
                "IF tableName=\"inspection_mst\" THEN            \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementMst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;           \n" +
                "IF tableName=\"inspection_template_mst\" THEN            \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementTemplate(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2593,'2.00','V1','get list Purchase/Incoming Ispection Requirement Template - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2593:
            allDbChangesArray.push(
                /* **************************** new script -> 22-07-2020 *********************************** */
                "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`,  \n" +
                " `menuName`, `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdBy`, `isDeleted`,   \n" +
                " `isDisplay`, `displayMenuName`, `isAllowAsHomePage`) VALUES ('Purchase/ Incoming Inspection Requirement(s)', '0', '0',  \n" +
                " 'setting.partmaintenance.purchaseincominginspectionreq', 'app.purchaseincominginspectionreq',  \n" +
                " '/purchaseincominginspectionreq', 'Purchase/ Incoming Inspection Requirement(s)', '175', '0', '32.55', '0',   \n" +
                " 'material-icons icon-leaf', '1', '1', '0', '1', 'Purchase/ Incoming Inspection Requirement(s)', '1');  \n" +
                /* **************************** add script version -> 22-07-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2594,'2.00','v1',' Purchase/Inspection Requirement Page - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2594:
            allDbChangesArray.push(
                /* **************************** new script -> 22-07-2020 *********************************** */
                "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`,  \n" +
                " `menuName`, `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdBy`, `isDeleted`,   \n" +
                " `isDisplay`, `displayMenuName`, `isAllowAsHomePage`) VALUES ('Purchase/Incoming Inspection Requirement Template', '0', '0',  \n" +
                " 'setting.partmaintenance.purchaseinspectiontemplate', 'app.purchaseinspectiontemplate',  \n" +
                " '/purchaseinspectiontemplate', 'Purchase/Incoming Inspection Requirement Template', '175', '0', '32.56', '0',   \n" +
                " 'material-icons icon-leaf', '1', '1', '0', '1', 'Purchase/Incoming Inspection Requirement Template', '1');  \n" +
                /* **************************** add script version -> 22-07-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2595,'2.00','v1',' Purchase/Inspection Requirement Template Page - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2595:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GenerateInternalDateCodeFromMFRDateCode` ;  \n" +
                "CREATE PROCEDURE `Sproc_GenerateInternalDateCodeFromMFRDateCode`(          \n" +
                "	IN pMFRDateCodeFormatId INT(11),          \n" +
                "	IN pMFRDateCode VARCHAR(50),      \n" +
                "	IN pIsCallFromAPI BOOLEAN          \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	DECLARE vDateFormat VARCHAR(50);          \n" +
                "	DECLARE pMFRConvertedDateCode VARCHAR(50);          \n" +
                "	DECLARE vInternalDateCodeFormat VARCHAR(4);          \n" +
                "	DECLARE vStrMFRDate VARCHAR(50);    \n" +
                "	DECLARE vMFRDate DATETIME;      \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR 1411    \n" +
                "	BEGIN    \n" +
                "		SELECT 	pMFRDateCodeFormatId mfrDateCodeFormatId,       \n" +
                "			(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE id = pMFRDateCodeFormatId) mfrDateCodeFormat,           \n" +
                "			pMFRDateCode mfrDateCode,           \n" +
                "			'WWYY' internalDateCodeFormat,           \n" +
                "			NULL internalDateCode,    \n" +
                "			'ERROR01' errorMessageCode;     \n" +
                "	END;    \n" +
                "  \n" +
                "	SET vInternalDateCodeFormat = 'WWYY';          \n" +
                "  \n" +
                "	SELECT dateCodeFormat INTO vDateFormat FROM dateCodeFormatMst WHERE id = pMFRDateCodeFormatId;          \n" +
                "  \n" +
                "	IF (vDateFormat = 'WWYY') THEN          \n" +
                "		SET pMFRConvertedDateCode = CONCAT(YEAR(STR_TO_DATE(RIGHT(pMFRDateCode, 2),'%Y')),LEFT(pMFRDateCode, 2),' Monday');          \n" +
                "		SELECT STR_TO_DATE(pMFRConvertedDateCode,'%x%v %W') INTO vMFRDate;             \n" +
                "	ELSEIF (vDateFormat = 'YYWW') THEN          \n" +
                "		SET pMFRConvertedDateCode = CONCAT(YEAR(STR_TO_DATE(LEFT(pMFRDateCode, 2),'%Y')),RIGHT(pMFRDateCode, 2),' Monday');          \n" +
                "		SELECT STR_TO_DATE(pMFRConvertedDateCode,'%x%v %W') INTO vMFRDate;             \n" +
                "	ELSEIF (vDateFormat = 'MMYY') THEN          \n" +
                "		SET pMFRConvertedDateCode = CONCAT('01',pMFRDateCode);          \n" +
                "		SELECT STR_TO_DATE(pMFRConvertedDateCode,'%d%m%y') INTO vMFRDate;          \n" +
                "	ELSEIF (vDateFormat = 'YYMM') THEN          \n" +
                "		SET pMFRConvertedDateCode = CONCAT('01',pMFRDateCode);          \n" +
                "		SELECT STR_TO_DATE(pMFRConvertedDateCode,'%d%y%m') INTO vMFRDate;          \n" +
                "	ELSEIF (vDateFormat = 'DDMMYY') THEN          \n" +
                "		SET pMFRConvertedDateCode = pMFRDateCode;          \n" +
                "		SELECT STR_TO_DATE(pMFRConvertedDateCode,'%d%m%y') INTO vMFRDate;          \n" +
                "	END IF;     \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_InternalDateCodeFromMFRDateCode;	                                \n" +
                "	CREATE 	TEMPORARY TABLE IF NOT EXISTS temp_InternalDateCodeFromMFRDateCode AS                                \n" +
                "	SELECT 	pMFRDateCodeFormatId mfrDateCodeFormatId,       \n" +
                "			vDateFormat mfrDateCodeFormat,           \n" +
                "			pMFRDateCode mfrDateCode,           \n" +
                "			'WWYY' internalDateCodeFormat,           \n" +
                "			(CASE WHEN vMFRDate IS NOT NULL THEN DATE_FORMAT(vMFRDate,'%u%y') ELSE NULL END) AS internalDateCode;    \n" +
                "	IF (pIsCallFromAPI) THEN      \n" +
                "		SELECT 	* FROM temp_InternalDateCodeFromMFRDateCode;          \n" +
                "	END IF;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2596,'2.00','V1','Sproc_GenerateInternalDateCodeFromMFRDateCode - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2596:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2020 *********************************** */
                "ALTER TABLE warehousemst ADD COLUMN leftSideWHRows INT;  \n" +
                "ALTER TABLE warehousemst ADD COLUMN rightSideWHRows INT;  \n" +

                "DROP PROCEDURE IF EXISTS `Sproc_SaveCartSlotDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCartSlotDetail`(    \n" +
                "	IN pSlotList JSON,    \n" +
                "    IN pUpdatedBy VARCHAR(255)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	IF(pSlotList IS NOT NULL) THEN     \n" +
                "  \n" +
                "		#Insert slot detail in temporary table     \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempSlotDetail;    \n" +
                "		CREATE TEMPORARY TABLE tempSlotDetail    \n" +
                "		SELECT *, 0 WarehouseID    \n" +
                "		FROM    \n" +
                "		JSON_TABLE(pSlotList, \"$[*]\"    \n" +
                "			COLUMNS(    \n" +
                "				uniqueCartID VARCHAR(100) PATH \"$.TowerID\",    \n" +
                "				binName VARCHAR(100) PATH \"$.SlotID\",  \n" +
                "				sideName INT PATH \"$.Side\"    \n" +
                "			)    \n" +
                "		) AS tt;    \n" +
                "  \n" +
                "  #Update slot id for all old record temporary code will remove once all record update  \n" +
                "  DROP TEMPORARY TABLE IF EXISTS tempOlderSlotDetail;   \n" +
                "  CREATE TEMPORARY TABLE tempOlderSlotDetail  \n" +
                "  SELECT * FROM   tempSlotDetail;  \n" +
                "  \n" +
                "  \n" +
                "  UPDATE binmst b,tempOlderSlotDetail tsd  \n" +
                "  SET b.smartcartside=tsd.sideName WHERE b.name=tsd.binName;  \n" +
                "  \n" +
                "		#Update warehouse id of cart    \n" +
                "        UPDATE 	tempSlotDetail t, warehousemst w                \n" +
                "		SET   	t.WarehouseID = w.id             \n" +
                "		WHERE	t.uniqueCartID = w.uniqueCartID;         \n" +
                "  \n" +
                "        #Get warehousID of slots (Bin)    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempSlotWarehouseDetail;    \n" +
                "		CREATE TEMPORARY TABLE tempSlotWarehouseDetail    \n" +
                "		SELECT WarehouseID    \n" +
                "		FROM tempSlotDetail;    \n" +
                "		#Update slots(Bin) to inactive which is not in input(pSlotList) list(based on give slot detail)    \n" +
                "		UPDATE binmst b SET b.isActive = FALSE, updatedBy = pUpdatedBy,	updatedAt = UTC_TIMESTAMP()	    \n" +
                "		WHERE NOT EXISTS (SELECT 1 FROM tempSlotDetail t  WHERE t.binName = b.Name)    \n" +
                "		AND b.warehouseid IN (SELECT WarehouseID FROM tempSlotWarehouseDetail);    \n" +
                "  \n" +
                "        #Update slots(Bin) to active which is in input(pSlotList) list(based on give slot detail) but already exists on our db    \n" +
                "		UPDATE binmst b  \n" +
                "        SET b.isActive = TRUE, updatedBy = pUpdatedBy,	updatedAt = UTC_TIMESTAMP()  \n" +
                "		WHERE EXISTS (SELECT 1 FROM tempSlotDetail t  WHERE t.binName = b.Name)    \n" +
                "		AND b.warehouseid IN (SELECT WarehouseID FROM tempSlotWarehouseDetail);    \n" +
                "		#Remove recore from temp table if cart not exists or bin already created    \n" +
                "		DELETE FROM tempSlotDetail    \n" +
                "		WHERE EXISTS (SELECT 1 FROM binmst b WHERE b.Name = tempSlotDetail.binName)    \n" +
                "		OR NOT EXISTS (SELECT 1 FROM warehousemst w WHERE w.uniqueCartID = tempSlotDetail.uniqueCartID) ;    \n" +
                "  \n" +
                "		#Insert remaaining bin into bin table    \n" +
                "		INSERT INTO binmst (    \n" +
                "			NAME, 			WarehouseID, 		isActive, 		isPermanentBin,     \n" +
                "            createdBy,		createdAt, 			updatedBy,		updatedAt, 			    \n" +
                "            isDeleted, 		isRandom ,      smartCartSide   \n" +
                "        )    \n" +
                "        SELECT    \n" +
                "			t.binName, 		t.WarehouseID,		TRUE,			TRUE,    \n" +
                "            pUpdatedBy,		UTC_TIMESTAMP(),	pUpdatedBy,		UTC_TIMESTAMP(),	    \n" +
                "            FALSE,			TRUE,    t.sideName    \n" +
                "        FROM tempSlotDetail t;    \n" +
                "  \n" +
                "        UPDATE warehousemst w SET w.leftSideWHRows=(SELECT COUNT(DISTINCT (SUBSTRING(b.name, 6, 1)))  FROM binmst b  WHERE b.warehouseid=w.id AND b.smartcartside=0),  \n" +
                "        w.rightSideWHRows=(SELECT COUNT(DISTINCT (SUBSTRING(b.name, 6, 1)))  FROM binmst b  WHERE b.warehouseid=w.id AND b.smartcartside=1) WHERE  \n" +
                "        w.uniqueCartID IN (SELECT uniqueCartID FROM tempOlderSlotDetail);  \n" +
                "  \n" +
                "    END IF;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2597,'2.00','V1',' Warehouse Master Changes for smart cart-champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2597:
            allDbChangesArray.push(
                /* **************************** New Script ->24-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_scanAndTransferRackMaterial` ;  \n" +
                "CREATE PROCEDURE `Sproc_scanAndTransferRackMaterial`(                                                                      \n" +
                "	IN pRackNumber VARCHAR(100),                    \n" +
                "	IN pScanType VARCHAR(4),            \n" +
                "	IN pwoTransID INT(11),            \n" +
                "	IN pwoOPID INT(11),            \n" +
                "	IN pwoID INT(11),            \n" +
                "	IN ppartID INT (11),             \n" +
                "	IN popStatus VARCHAR(255),            \n" +
                "	IN pemployeeID INT(11),            \n" +
                "	IN puserId INT(11),            \n" +
                "	IN proleID INT(11),             \n" +
                "	IN pConfirm TINYINT (1)	              \n" +
                ")  \n" +
                "BEGIN                       \n" +
                "	DECLARE pRackID INT;            \n" +
                "	DECLARE pStatus INT;            \n" +
                "	DECLARE pResult INT DEFAULT 1;            \n" +
                "	DECLARE pwoName VARCHAR(100);            \n" +
                "	DECLARE pwoOperationName VARCHAR(100);            \n" +
                "	DECLARE puserName VARCHAR(100);            \n" +
                "	DECLARE pisStrictlyFollowRackValidation TINYINT(1) DEFAULT 0;            \n" +
                "	DECLARE pwtrID INT;            \n" +
                "	DECLARE pcurWoOPID INT;            \n" +
                "	DECLARE wtemployeeID INT;        \n" +
                "	DECLARE prackStatus VARCHAR(255);    \n" +
                "	DECLARE pcurrwoID INT;        \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_scanrack_error;               \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE temp_scanrack_error                                                                    \n" +
                "	(                                                                    \n" +
                "	     errorText VARCHAR(2000),                                                                    \n" +
                "	     isOutError INT(11),                                                                  \n" +
                "	     isInError INT(11),                                                                  \n" +
                "	     isConfirmation INT(11),                                                                   \n" +
                "	     isMessage INT(11),                                                                   \n" +
                "	     isInformation INT(11),            \n" +
                "	     operation VARCHAR(200),            \n" +
                "	     rackStatus VARCHAR(255) ,            \n" +
                "	     userName VARCHAR(100),            \n" +
                "	     workorderName VARCHAR(50)                                        \n" +
                "	);             \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		SELECT rk.id,rk.opStatus,fun_getWorkorderNumberWithRevByID(rk.woID),fun_getOperationNameByWOOPID(rk.woOPID),            \n" +
                "		(SELECT fun_getUserNameByID(wtr.createdBy) FROM workorder_trans_rack wtr WHERE wtr.deletedat IS NULL AND             \n" +
                "				wtr.rackID=rk.id ORDER BY wtr.id DESC LIMIT 1),            \n" +
                "				(SELECT MAX(wtr.id) FROM workorder_trans_rack wtr WHERE wtr.deletedat IS NULL AND             \n" +
                "				wtr.rackID=rk.id AND wtr.woOPID=rk.woOPID),            \n" +
                "				(SELECT wtr.employeeID FROM workorder_trans_rack wtr WHERE wtr.deletedat IS NULL AND             \n" +
                "				wtr.rackID=rk.id AND wtr.woOPID=rk.woOPID ORDER BY wtr.id DESC LIMIT 1),    \n" +
                "				rk.woOPID,rk.woID             \n" +
                "				INTO pRackID,pStatus,pwoName,pwoOperationName,puserName,pwtrID,wtemployeeID,pcurWoOPID,pcurrwoID            \n" +
                "				 FROM rackmst rk WHERE rk.`name`=pRackNumber AND rk.deletedAt IS NULL AND rk.isActive=1;            \n" +
                "  \n" +
                "				 IF(pcurrwoID IS NOT NULL)THEN      \n" +
                "				 SELECT isStrictlyFollowRackValidation INTO pisStrictlyFollowRackValidation FROM workorder  WHERE woID=pcurrwoID;         \n" +
                "				 END IF;      \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_workorder_trans_rack_status_details	;      \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS  temp_workorder_trans_rack_status_details AS      \n" +
                "				SELECT `status`,fun_getRackStatusbyID(`status`) statusName FROM workorder_trans_rack_status_details WHERE woTransRackID=pwtrID;      \n" +
                "  \n" +
                "				SELECT GROUP_CONCAT(statusName) INTO prackStatus  FROM temp_workorder_trans_rack_status_details;       \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempRackStatus;      \n" +
                "				CREATE TEMPORARY TABLE tempRackStatus(val INT(11) );      \n" +
                "				SET @SQL = CONCAT(\"insert into tempRackStatus (val) values ('\", REPLACE(( popStatus), \",\", \"'),('\"),\"');\");      \n" +
                "					PREPARE stmt1 FROM @SQL;      \n" +
                "				EXECUTE stmt1;      \n" +
                "  \n" +
                "		/*check current operation parameter have cluster */        		             \n" +
                "		SELECT a.isteamoperation,  a.isrework,  a.qtyControl,                   \n" +
                "	  b.ClusterID,  b.isparellelOperation, a.isIssueQty,                    \n" +
                "	  a.opNumber, a.isLoopOperation                 \n" +
                "	  INTO                 \n" +
                "	  @pisteamoperation ,@pisrework,@pqtyControl,                \n" +
                "	  @pclusterID,@pisparellelOperation,@pisIssueQty,                \n" +
                "	  @popNumber, @pisloopoperation                  \n" +
                "	 FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                     \n" +
                "	 a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID  AND   IFNULL(a.isdeleted,0) = 0                    \n" +
                "	WHERE  a.woid = pwoID AND a.woOPID = pwoOPID  AND  IFNULL(a.isdeleted,0) = 0 ;                    \n" +
                "  \n" +
                "	/*check previous operation parameter have cluster */                    \n" +
                "	  SELECT a.woOPID, a.opNumber, a.isteamoperation,                \n" +
                "		 a.isrework,a.qtyControl,b.ClusterID,                 \n" +
                "		 b.isparellelOperation, a.isLoopOperation                     \n" +
                "	  INTO                 \n" +
                "		@prevwoOPID, @prevopnumber,@previsteamoperation,                \n" +
                "		@prevpisrework, @prevpqtyControl,@prevpclusterID,                \n" +
                "		@prevpisparellelOperation, @prevpisloopoperation                    \n" +
                "	 FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                     \n" +
                "	 a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID                    \n" +
                "	WHERE  a.woid = pwoID  AND  IFNULL(a.isdeleted,0) = 0                    \n" +
                "	AND  a.opNumber  = (SELECT MAX(opNumber)                    \n" +
                "			    FROM workorder_operation b                     \n" +
                "			    WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0                    \n" +
                "				 AND b.qtyControl = 1 AND b.opNumber < @popNumber);                     \n" +
                "  \n" +
                "	/*check next operation Pramtere have loop operation */                    \n" +
                "	  SELECT a.woOPID, a.opNumber, a.isteamoperation,                \n" +
                "		 a.isrework,a.qtyControl,b.ClusterID,                 \n" +
                "		 b.isparellelOperation, a.isLoopOperation                     \n" +
                "	  INTO                 \n" +
                "	 	@nextwoOPID, @nextopnumber,@nextisteamoperation,                \n" +
                "	 	@nextpisrework, @nextpqtyControl,@nextpclusterID,                \n" +
                "	 	@nextpisparellelOperation, @nextpisloopoperation                    \n" +
                "	 FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                     \n" +
                "	 a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID                    \n" +
                "	WHERE  a.woid = pwoID  AND  IFNULL(a.isdeleted,0) = 0                    \n" +
                "	AND  a.opNumber  = (SELECT MIN(opNumber)                    \n" +
                "			    FROM workorder_operation b                     \n" +
                "			    WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0                    \n" +
                "				 AND b.qtyControl = 1 AND b.opNumber > @popNumber);   		             \n" +
                "		IF(pRackID IS NULL) THEN             \n" +
                "			SET pResult=fun_checkAndInsertRackError(CONCAT('Rack# <b>',pRackNumber, '</b> not found'),1,0,0,1,0,NULL,NULL,NULL,NULL);            \n" +
                "		END IF;            \n" +
                "	    	IF (pScanType='O' AND pRackID IS NOT NULL)THEN     \n" +
                "  \n" +
                "						IF(pStatus!=1 AND pConfirm=0)THEN            \n" +
                "						SET @statusName=prackStatus;       \n" +
                "						    IF((pcurWoOPID!=pwoOPID OR pemployeeID!=wtemployeeID))THEN            \n" +
                "						     SET @incomingRack=CONCAT('Outgoing Rack(',@statusName,')');            \n" +
                "						    IF(pStatus=2)THEN            \n" +
                "							SET  @incomingRack='Incoming Rack';            \n" +
                "						   END IF;            \n" +
                "							SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is already assigned to ','<b>',pwoOperationName,'</b>',' operation of workorder ','<b>',pwoName,'</b> as <b>',@incomingRack,'</b>',' by user ','<b>',puserName,'</b>','.');            \n" +
                "							IF(pisStrictlyFollowRackValidation=1)THEN            \n" +
                "								SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "  \n" +
                "							ELSE            \n" +
                "								SET pResult=fun_checkAndInsertRackError(CONCAT(@message,' To clear assigned rack details and assign to current operation. Press Yes to continue.'),1,0,1,0,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "  \n" +
                "							END IF;            \n" +
                "						    END IF;            \n" +
                "						     IF(pcurWoOPID=pwoOPID AND pemployeeID=wtemployeeID AND prackStatus='-' AND pStatus!=3)THEN            \n" +
                "							 IF(pisStrictlyFollowRackValidation=1)THEN            \n" +
                "								 SET pResult=fun_checkAndInsertRackError(CONCAT('Rack# <b>',pRackNumber,'</b> already scanned by <b>',puserName,'</b> in <b>',pwoOperationName,'</b> as <b>Incoming rack</b>.'),1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "  \n" +
                "								 ELSE            \n" +
                "								SET pResult=fun_checkAndInsertRackError(CONCAT('Rack# <b>',pRackNumber,'</b> already scanned by <b>',puserName,'</b> in <b>',pwoOperationName,'</b> as <b>Incoming rack</b>. To clear assigned rack details and assign to current operation.             \n" +
                "								Press Yes to continue.'),1,0,1,0,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "							 END IF;            \n" +
                "  \n" +
                "						   END IF;            \n" +
                "						     IF(pcurWoOPID=pwoOPID AND pemployeeID=wtemployeeID AND prackStatus!='-' AND pStatus=3)THEN            \n" +
                "						     SET pResult=fun_checkAndInsertRackError(CONCAT('Rack# <b>',pRackNumber,'</b> already scanned by <b>',puserName,'</b> in <b>',pwoOperationName,'</b> as <b>Outgoing rack(',@statusName,').</b>'),1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "						     END IF;            \n" +
                "  \n" +
                "						END IF;            \n" +
                "						IF(pStatus!=1 AND pConfirm=1)THEN            \n" +
                "							UPDATE rackmst SET woTransID=pwoTransID,woID=(NULL),woOPID=(NULL),partID=(NULL),opStatus=1,updateByRoleId=proleID,updatedBy=puserId,updatedAt=CURRENT_TIMESTAMP	 WHERE            \n" +
                "							id=pRackID;            \n" +
                "  \n" +
                "						        INSERT INTO workorder_trans_rack(rackID,woTransID,woOPID,employeeID,transactionType,createdby,            \n" +
                "							updatedBy,createByRoleId,updateByRoleId)VALUES            \n" +
                "							(pRackID,pwoTransID,pwoOPID,pemployeeID,'O',puserId,puserId,proleID,proleID);      \n" +
                "  \n" +
                "							INSERT INTO workorder_trans_rack_status_details(woTransRackID,`status`,createdby,updatedBy,createByRoleId,updateByRoleId)       \n" +
                "							SELECT LAST_INSERT_ID(),val,puserId,puserId,proleID,proleID FROM tempRackStatus;            \n" +
                "  \n" +
                "  \n" +
                "							UPDATE rackmst SET woTransID=pwoTransID, woID=pwoID,woOPID=pwoOPID,partID=ppartID,opStatus=3,updateByRoleId=proleID,updatedBy=puserId,updatedAt=CURRENT_TIMESTAMP WHERE            \n" +
                "							id=pRackID;            \n" +
                "  \n" +
                "  \n" +
                "						END IF;            \n" +
                "						IF(pStatus=1)THEN            \n" +
                "  \n" +
                "						INSERT INTO workorder_trans_rack(rackID,woTransID,woOPID,employeeID,transactionType,createdby,            \n" +
                "							updatedBy,createByRoleId,updateByRoleId)VALUES            \n" +
                "							(pRackID,pwoTransID,pwoOPID,pemployeeID,'O',puserId,puserId,proleID,proleID);       \n" +
                "  \n" +
                "							INSERT INTO workorder_trans_rack_status_details(woTransRackID,`status`,createdby,updatedBy,createByRoleId,updateByRoleId)       \n" +
                "							SELECT LAST_INSERT_ID(),val,puserId,puserId,proleID,proleID FROM tempRackStatus;             \n" +
                "  \n" +
                "							UPDATE rackmst SET woTransID=pwoTransID,woID=pwoID,woOPID=pwoOPID,partID=ppartID,opStatus=3,updateByRoleId=proleID,updatedAt=CURRENT_TIMESTAMP WHERE            \n" +
                "							id=pRackID;            \n" +
                "  \n" +
                "  \n" +
                "						END IF;            \n" +
                "			END IF;	            \n" +
                "		 IF(pScanType='I' AND pRackID IS NOT NULL)THEN            \n" +
                "  \n" +
                "					SET @statusName=prackStatus;            \n" +
                "  \n" +
                "		 SET @currIncominfScanStatus=0;            \n" +
                "				IF(pStatus=1)THEN            \n" +
                "				SET @currIncominfScanStatus=1;            \n" +
                "						SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is empty. Empty rack cannot be assign as incoming rack.');            \n" +
                "  \n" +
                "						SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,NULL,NULL,NULL,NULL);            \n" +
                "				END IF;            \n" +
                "				IF((pStatus=2 AND pcurWoOPID!=pwoOPID) AND @currIncominfScanStatus=0)THEN            \n" +
                "				SET @currIncominfScanStatus=1;            \n" +
                "					SET @incomeoutStatus='Incoming Rack';            \n" +
                "  \n" +
                "					SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is not allowed in current operation as incoming rack because it is already assigned in ','<b>',pwoOperationName,'</b>',' operation of workorder ','<b>',pwoName,            \n" +
                "					'</b>',' as <b>',@incomeoutStatus,'</b> by user ','<b>',puserName,'</b>','.');            \n" +
                "  \n" +
                "					SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "				END IF;            \n" +
                "  \n" +
                "				IF((pStatus=2 AND pcurWoOPID=pwoOPID) AND @currIncominfScanStatus=0)THEN            \n" +
                "				SET @currIncominfScanStatus=1;            \n" +
                "				 SET pResult=fun_checkAndInsertRackError(CONCAT('Rack# <b>',pRackNumber,'</b> already scanned by <b>',puserName,'</b> in <b>',pwoOperationName,'</b> as <b>Incoming rack.</b>'),1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "  \n" +
                "				END IF;            \n" +
                "  \n" +
                "				IF((pStatus=3 AND pcurWoOPID=pwoOPID) AND @currIncominfScanStatus=0)THEN            \n" +
                "				SET @currIncominfScanStatus=1;            \n" +
                "				SET @incomeoutStatus='Outgoing Rack';            \n" +
                "					SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is not allowed in current operation as incoming rack because it is already assigned in ','<b>',pwoOperationName,'</b>',' operation of workorder ','<b>',pwoName,            \n" +
                "					'</b>',' as <b>',@incomeoutStatus,'(',@statusName,')</b> by user ','<b>',puserName,'</b>','.');            \n" +
                "  \n" +
                "					SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "				END IF;            \n" +
                "				IF(@prevwoOPID IS NULL AND @currIncominfScanStatus=0)THEN             \n" +
                "				SET @currIncominfScanStatus=1;            \n" +
                "				SET @incomeoutStatus='Outgoing Rack';            \n" +
                "					SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is not allowed in current operation as incoming rack because it is already assigned in ','<b>',pwoOperationName,'</b>',' operation of workorder ','<b>',pwoName,            \n" +
                "					'</b>',' as <b>',@incomeoutStatus,'(',@statusName,')</b> by user ','<b>',puserName,'</b>','.');            \n" +
                "  \n" +
                "					SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "				END IF;            \n" +
                "				IF(@pisparellelOperation=1 AND pStatus=3 AND pResult=1 AND @currIncominfScanStatus=0)THEN            \n" +
                "				SET @currIncominfScanStatus=1;            \n" +
                "					SELECT MIN(wo.opNumber) INTO @parallelOPNumber FROM workorder_operation_cluster woc LEFT JOIN workorder_operation wo ON wo.woOPID=woc.woOPID AND wo.deletedAt IS NULL              \n" +
                "					WHERE woc.clusterID = @pclusterID AND woc.deletedAt IS NULL;            \n" +
                "  \n" +
                "					SELECT wo.woOPID,wo.isLoopOperation,wo.opNumber INTO @lastwoOPID,@lstloopoperation,@lstopNumber FROM workorder_operation wo LEFT JOIN workorder w ON wo.woiD=w.woID AND w.deletedAt IS NULL            \n" +
                "					WHERE w.isRackTrackingRequired=1 AND wo.qtycontrol=1 AND wo.deletedAt IS NULL AND wo.opNumber<@parallelOPNumber  AND wo.woID=pwoID ORDER BY wo.opNumber DESC LIMIT 1;            \n" +
                "  \n" +
                "					IF(IFNULL(@lstloopoperation,0)=1)THEN            \n" +
                "						SELECT wo.woOPID INTO @lastwoOPID FROM workorder_operation wo LEFT JOIN workorder w ON wo.woiD=w.woID AND w.deletedAt IS NULL            \n" +
                "						WHERE w.isRackTrackingRequired=1 AND wo.qtycontrol=1 AND wo.deletedAt IS NULL AND wo.opNumber<@lstopNumber  AND wo.woID=pwoID ORDER BY wo.opNumber DESC LIMIT 1;            \n" +
                "					END IF;            \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempRacktbl;          \n" +
                "				   CREATE TEMPORARY TABLE IF NOT EXISTS tempRacktbl          \n" +
                "				    SELECT MAX(wtr.id) wtrID FROM workorder_trans_rack wtr           \n" +
                "				     WHERE    (wtr.woopid=IFNULL(@lastwoOPID,0) OR wtr.woopid IN (SELECT woc.woOPID FROM  workorder_operation_cluster woc             \n" +
                "					WHERE woc.clusterID=@pclusterID             \n" +
                "					AND woc.deletedAt IS NULL)) GROUP BY wtr.rackid ;						          \n" +
                "  \n" +
                "					IF(SELECT COUNT(1) FROM  workorder_trans_rack wtr WHERE wtr.rackid=pRackID AND wtr.id IN (SELECT wtrID FROM tempRacktbl) AND EXISTS (SELECT 1 FROM workorder_trans_rack_status_details wtrs WHERE wtrs.woTransRackID=wtr.id AND        \n" +
                "					wtrs.status  NOT IN (4)))>0 THEN            \n" +
                "  \n" +
                "							SELECT wtr.woOPID,(SELECT GROUP_CONCAT(`status`) FROM workorder_trans_rack_status_details wtrs WHERE wtrs.woTransRackID=wtr.id),fun_getWorkorderNumberWithRevByID(rk.woID),fun_getOperationNameByWOOPID(wtr.woOPID),      \n" +
                "							rk.opStatus INTO @paralWoOPID,prackStatus,pwoName,pwoOperationName,pStatus             \n" +
                "							FROM workorder_trans_rack wtr LEFT JOIN rackmst rk ON rk.id=wtr.rackid AND rk.deletedAt IS NULL WHERE wtr.deletedat IS NULL AND             \n" +
                "							wtr.rackID=pRackID  ORDER BY wtr.id DESC LIMIT 1;            \n" +
                "  \n" +
                "					SET @statusName=prackStatus;      \n" +
                "  \n" +
                "							IF(IFNULL(@paralWoOPID,0)!=pwoOPID)THEN            \n" +
                "							INSERT INTO workorder_trans_rack(rackID,woTransID,woOPID,employeeID,transactionType,createdby,            \n" +
                "							updatedBy,createByRoleId,updateByRoleId)VALUES            \n" +
                "							(pRackID,pwoTransID,pwoOPID,pemployeeID,'I',puserId,puserId,proleID,proleID);	      \n" +
                "  \n" +
                "							INSERT INTO workorder_trans_rack_status_details(woTransRackID,`status`,createdby,updatedBy,createByRoleId,updateByRoleId)VALUES      \n" +
                "							(LAST_INSERT_ID(),0,puserId,puserId,proleID,proleID);       \n" +
                "  \n" +
                "  \n" +
                "							SELECT COUNT(1) INTO @totalscanparallelop FROM workorder_trans_rack wtr WHERE wtr.id>pwtrID AND wtr.rackid=pRackID AND wtr.transactiontype='I'         \n" +
                "							AND  wtr.woopid IN (SELECT woc.woopid FROM workorder_operation_cluster woc            \n" +
                "							WHERE woc.clusterID=@pclusterID AND woc.deletedAt IS NULL);            \n" +
                "							SELECT COUNT(1) INTO @totalparallelop  FROM workorder_operation_cluster woc            \n" +
                "							WHERE woc.clusterID=@pclusterID AND woc.deletedAt IS NULL;            \n" +
                "								IF(@totalparallelop=@totalscanparallelop)THEN            \n" +
                "									UPDATE rackmst SET woTransID=pwoTransID,woID=pwoID,woOPID=pwoOPID,partID=ppartID,opStatus=2,updatedBy=puserId,updateByRoleId=proleID,updatedAt=CURRENT_TIMESTAMP WHERE            \n" +
                "									id=pRackID;            \n" +
                "								END IF;            \n" +
                "								ELSE            \n" +
                "								SET @incomeoutStatus='Incoming Rack';            \n" +
                "								IF(pStatus=2)THEN            \n" +
                "								SET @incomeoutStatus=CONCAT('Outgoing Rack(',@statusName,')');            \n" +
                "								END IF;            \n" +
                "  \n" +
                "						SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is not allowed in current operation as incoming rack because it is already assigned in ','<b>',pwoOperationName,'</b>',' operation of workorder ','<b>',pwoName,            \n" +
                "						'</b>',' as <b>',@incomeoutStatus,'</b> by user ','<b>',puserName,'</b>','.');            \n" +
                "  \n" +
                "						SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "				                    END IF;             \n" +
                "				                    ELSE            \n" +
                "				                    SET @incomeoutStatus='Outgoing Rack';            \n" +
                "  \n" +
                "						SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is not allowed in current operation as incoming rack because it is already assigned in ','<b>',pwoOperationName,'</b>',' operation of workorder ','<b>',pwoName,            \n" +
                "						'</b>',' as <b>',@incomeoutStatus,'(',@statusName,')</b> by user ','<b>',puserName,'</b>','.');            \n" +
                "  \n" +
                "						SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "						END IF;	            \n" +
                "				END IF;            \n" +
                "				IF(@pisrework=1 AND  pStatus=3 AND pResult=1 AND @currIncominfScanStatus=0)THEN            \n" +
                "				SET @currIncominfScanStatus=1;            \n" +
                "					IF(@prevpisparellelOperation=1)THEN           \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempRacktbl;          \n" +
                "				   CREATE TEMPORARY TABLE IF NOT EXISTS tempRacktbl          \n" +
                "				    SELECT MAX(wtr.id) wtrID FROM workorder_trans_rack wtr           \n" +
                "				     WHERE wtr.woopid IN (SELECT woc.woopid            \n" +
                "							FROM workorder_operation_cluster woc WHERE woc.clusterID=@prevpclusterID AND woc.deletedAt IS NULL) GROUP BY wtr.rackid ;          \n" +
                "  \n" +
                "						IF(SELECT COUNT(1) FROM  workorder_trans_rack wtr WHERE wtr.rackid=pRackID AND wtr.id IN (SELECT wtrID FROM tempRacktbl) AND EXISTS(SELECT 1 FROM workorder_trans_rack_status_details wtrs WHERE wtrs.woTransRackID=wtr.id       \n" +
                "						AND wtrs.status IN (3,5)))>0 THEN            \n" +
                "							INSERT INTO workorder_trans_rack(rackID,woTransID,woOPID,employeeID,transactionType,createdby,            \n" +
                "												updatedBy,createByRoleId,updateByRoleId)VALUES            \n" +
                "												(pRackID,pwoTransID,pwoOPID,pemployeeID,'I',puserId,puserId,proleID,proleID);	            \n" +
                "  \n" +
                "								INSERT INTO workorder_trans_rack_status_details(woTransRackID,`status`,createdby,updatedBy,createByRoleId,updateByRoleId) VALUES      \n" +
                "								(LAST_INSERT_ID(),0,puserId,puserId,proleID,proleID);      \n" +
                "  \n" +
                "												UPDATE rackmst SET woTransID=pwoTransID,woID=pwoID,woOPID=pwoOPID,partID=ppartID,opStatus=2,updateByRoleId=proleID,updatedBy=puserId,updatedAt=CURRENT_TIMESTAMP WHERE            \n" +
                "												id=pRackID;            \n" +
                "						ELSE            \n" +
                "							SET @incomeoutStatus='Outgoing Rack';            \n" +
                "							SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is not allowed in current operation as incoming rack# because it is already assigned in ','<b>',pwoOperationName,'</b>',' operation of workorder ','<b>',pwoName,            \n" +
                "							'</b>',' as <b>',@incomeoutStatus,'(',@statusName,')</b> by user ','<b>',puserName,'</b>','.');            \n" +
                "  \n" +
                "							SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "						END IF;	            \n" +
                "  \n" +
                "					END IF;            \n" +
                "					IF(IFNULL(@prevpisparellelOperation,0)=0 AND @prevwoOPID=pcurWoOPID)THEN            \n" +
                "						IF(SELECT COUNT(1) FROM temp_workorder_trans_rack_status_details WHERE `status` IN (3,5))>0 THEN            \n" +
                "							INSERT INTO workorder_trans_rack(rackID,woTransID,woOPID,employeeID,transactionType,createdby,            \n" +
                "							updatedBy,createByRoleId,updateByRoleId)VALUES            \n" +
                "							(pRackID,pwoTransID,pwoOPID,pemployeeID,'I',puserId,puserId,proleID,proleID);	      \n" +
                "  \n" +
                "							INSERT INTO workorder_trans_rack_status_details(woTransRackID,`status`,createdby,updatedBy,createByRoleId,updateByRoleId) VALUES      \n" +
                "								(LAST_INSERT_ID(),0,puserId,puserId,proleID,proleID);            \n" +
                "  \n" +
                "							UPDATE rackmst SET woTransID=pwoTransID,woID=pwoID,woOPID=pwoOPID,partID=ppartID,opStatus=2,updateByRoleId=proleID,updatedBy=puserId,updatedAt=CURRENT_TIMESTAMP WHERE            \n" +
                "							id=pRackID;            \n" +
                "						ELSE            \n" +
                "						    SET @incomeoutStatus='Outgoing Rack';            \n" +
                "							SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is not allowed in current operation as incoming rack# because it is already assigned in ','<b>',pwoOperationName,'</b>',' operation of workorder ','<b>',pwoName,            \n" +
                "							'</b>',' as <b>',@incomeoutStatus,'(',@statusName,')</b> by user ','<b>',puserName,'</b>','.');            \n" +
                "  \n" +
                "							SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);              \n" +
                "					        END IF;            \n" +
                "					END IF;            \n" +
                "				END IF;            \n" +
                "  \n" +
                "  \n" +
                "				IF(pStatus=3 AND @currIncominfScanStatus=0)THEN            \n" +
                "				SET @currIncominfScanStatus=1;           \n" +
                "				SET @executed=0;            \n" +
                "					IF(IFNULL(@prevpisparellelOperation,0)=1 AND IFNULL(@nextpisloopoperation,0)=1 AND @executed=0)THEN            \n" +
                "					SET @executed=1;           \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempRacktbl;          \n" +
                "				   CREATE TEMPORARY TABLE IF NOT EXISTS tempRacktbl          \n" +
                "				    SELECT MAX(wtr.id) wtrID FROM workorder_trans_rack wtr           \n" +
                "				     WHERE wtr.woopid=IFNULL(@nextwoOPID,0) OR wtr.woopid IN (SELECT woc.woopid            \n" +
                "							FROM workorder_operation_cluster woc WHERE woc.clusterID=@prevpclusterID AND woc.deletedAt IS NULL) GROUP BY wtr.rackid ;           \n" +
                "						IF(SELECT COUNT(1) FROM  workorder_trans_rack wtr WHERE wtr.rackid=pRackID AND wtr.id IN (SELECT wtrID FROM tempRacktbl) AND EXISTS       \n" +
                "						(SELECT 1 FROM  workorder_trans_rack_status_details wtrs WHERE wtrs.woTransRackID=wtr.id AND wtrs.status NOT IN (4)))>0 THEN            \n" +
                "							INSERT INTO workorder_trans_rack(rackID,woTransID,woOPID,employeeID,transactionType,createdby,            \n" +
                "												updatedBy,createByRoleId,updateByRoleId)VALUES            \n" +
                "												(pRackID,pwoTransID,pwoOPID,pemployeeID,'I',puserId,puserId,proleID,proleID);      \n" +
                "  \n" +
                "							INSERT INTO workorder_trans_rack_status_details(woTransRackID,`status`,createdby,updatedBy,createByRoleId,updateByRoleId) VALUES      \n" +
                "								(LAST_INSERT_ID(),0,puserId,puserId,proleID,proleID);		            \n" +
                "  \n" +
                "							UPDATE rackmst SET woTransID=pwoTransID,woID=pwoID,woOPID=pwoOPID,partID=ppartID,opStatus=2,updatedBy=puserId,updateByRoleId=proleID,updatedAt=CURRENT_TIMESTAMP WHERE            \n" +
                "							id=pRackID;            \n" +
                "						ELSE            \n" +
                "							SET @incomeoutStatus='Outgoing Rack';            \n" +
                "							SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is not allowed in current operation as incoming rack# because it is already assigned in ','<b>',pwoOperationName,'</b>',' operation of workorder ','<b>',pwoName,            \n" +
                "							'</b>',' as <b>',@incomeoutStatus,'(',@statusName,')</b> by user ','<b>',puserName,'</b>','.');            \n" +
                "  \n" +
                "							SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "						END IF;	            \n" +
                "  \n" +
                "					END IF;    \n" +
                "					IF(IFNULL(@prevpisrework,0)=1 AND IFNULL(@nextpisloopoperation,0)=1 AND @executed=0)THEN    \n" +
                "					SET @executed=1;     \n" +
                "					SELECT a.woOPID, a.opNumber,a.qtyControl,b.ClusterID,                \n" +
                "						 b.isparellelOperation, a.isLoopOperation            \n" +
                "							INTO @prlwoOPID, @prlopnumber,                \n" +
                "						 @prlpqtyControl,@prlpclusterID,                \n" +
                "						@prlpisparellelOperation, @prlpisloopoperation                    \n" +
                "						FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                     \n" +
                "						a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID                    \n" +
                "						WHERE  a.woid = pwoID  AND  IFNULL(a.isdeleted,0) = 0                    \n" +
                "						AND  a.opNumber  = (SELECT MAX(opNumber)                    \n" +
                "							FROM workorder_operation b                     \n" +
                "							WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0                    \n" +
                "							AND b.qtyControl = 1 AND b.opNumber < @prevopnumber);      \n" +
                "  \n" +
                "							IF(IFNULL(@prlpisparellelOperation,0)=1)THEN           \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempRacktbl;          \n" +
                "				   CREATE TEMPORARY TABLE IF NOT EXISTS tempRacktbl          \n" +
                "				    SELECT MAX(wtr.id) wtrID FROM workorder_trans_rack wtr           \n" +
                "				     WHERE wtr.woopid=IFNULL(@prevwoOPID,0) OR wtr.woopid=IFNULL(@nextwoOPID,0) OR wtr.woopid IN (SELECT woc.woopid            \n" +
                "							FROM workorder_operation_cluster woc WHERE woc.clusterID=@prlpclusterID AND woc.deletedAt IS NULL)  GROUP BY wtr.rackid ; 						          \n" +
                "  \n" +
                "							IF(SELECT COUNT(1) FROM  workorder_trans_rack wtr WHERE wtr.rackid=pRackID AND wtr.id IN (SELECT wtrID FROM tempRacktbl) AND EXISTS       \n" +
                "							(SELECT 1 FROM workorder_trans_rack_status_details wtrs WHERE wtrs.woTransRackID=wtr.id AND wtrs.status IN (0,1,2,6,7)))>0 THEN            \n" +
                "  \n" +
                "							INSERT INTO workorder_trans_rack(rackID,woTransID,woOPID,employeeID,transactionType,createdby,            \n" +
                "												updatedBy,createByRoleId,updateByRoleId)VALUES            \n" +
                "												(pRackID,pwoTransID,pwoOPID,pemployeeID,'I',puserId,puserId,proleID,proleID);	      \n" +
                "  \n" +
                "						      INSERT INTO workorder_trans_rack_status_details(woTransRackID,`status`,createdby,updatedBy,createByRoleId,updateByRoleId) VALUES      \n" +
                "								(LAST_INSERT_ID(),0,puserId,puserId,proleID,proleID);	      \n" +
                "  \n" +
                "							UPDATE rackmst SET woTransID=pwoTransID,woID=pwoID,woOPID=pwoOPID,partID=ppartID,opStatus=2,updatedBy=puserId,updateByRoleId=proleID,updatedAt=CURRENT_TIMESTAMP WHERE            \n" +
                "							id=pRackID;            \n" +
                "							ELSE            \n" +
                "							SET @incomeoutStatus='Outgoing Rack';            \n" +
                "							SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is not allowed in current operation as incoming rack# because it is already assigned in ','<b>',pwoOperationName,'</b>',' operation of workorder ','<b>',pwoName,            \n" +
                "							'</b>',' as <b>',@incomeoutStatus,'(',@statusName,')</b> by user ','<b>',puserName,'</b>','.');            \n" +
                "  \n" +
                "							SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "							END IF;            \n" +
                "						END IF;	    \n" +
                "  \n" +
                "						IF(IFNULL(@prlpisparellelOperation,0)=0)THEN           \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempRacktbl;          \n" +
                "				   CREATE TEMPORARY TABLE IF NOT EXISTS tempRacktbl          \n" +
                "				    SELECT MAX(wtr.id) wtrID FROM workorder_trans_rack wtr           \n" +
                "				     WHERE wtr.woopid=IFNULL(@prevwoOPID,0) OR wtr.woopid =IFNULL(@prlwoOPID,0) OR wtr.woopid=IFNULL(@nextwoOPID,0)  GROUP BY wtr.rackid ; 						          \n" +
                "  \n" +
                "							IF(SELECT COUNT(1) FROM  workorder_trans_rack wtr WHERE wtr.rackid=pRackID AND wtr.id IN (SELECT wtrID FROM tempRacktbl)             \n" +
                "							AND EXISTS (SELECT 1 FROM workorder_trans_rack_status_details wtrs WHERE wtrs.woTransRackID=wtr.id AND wtrs.status IN (1,2,6,7)))>0 THEN            \n" +
                "							INSERT INTO workorder_trans_rack(rackID,woTransID,woOPID,employeeID,transactionType,createdby,            \n" +
                "												updatedBy,createByRoleId,updateByRoleId)VALUES            \n" +
                "												(pRackID,pwoTransID,pwoOPID,pemployeeID,'I',puserId,puserId,proleID,proleID);      \n" +
                "  \n" +
                "						      INSERT INTO workorder_trans_rack_status_details(woTransRackID,`status`,createdby,updatedBy,createByRoleId,updateByRoleId) VALUES      \n" +
                "								(LAST_INSERT_ID(),0,puserId,puserId,proleID,proleID);	      \n" +
                "  \n" +
                "							UPDATE rackmst SET woTransID=pwoTransID,woID=pwoID,woOPID=pwoOPID,partID=ppartID,opStatus=2,updatedBy=puserId,updateByRoleId=proleID,updatedAt=CURRENT_TIMESTAMP WHERE            \n" +
                "							id=pRackID;            \n" +
                "							ELSE             \n" +
                "							SET @incomeoutStatus='Outgoing Rack';            \n" +
                "							SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is not allowed in current operation as incoming rack# because it is already assigned in ','<b>',pwoOperationName,'</b>',' operation of workorder ','<b>',pwoName,            \n" +
                "							'</b>',' as <b>',@incomeoutStatus,'(',@statusName,')</b> by user ','<b>',puserName,'</b>','.');            \n" +
                "  \n" +
                "							SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "							END IF;            \n" +
                "						END IF;    \n" +
                "  \n" +
                "					END IF;            \n" +
                "					IF(IFNULL(@prevpisloopoperation ,0)=1 AND @executed=0)THEN            \n" +
                "					SET @executed=1;            \n" +
                "						SELECT wo.woOPID INTO @lastwoOPID FROM workorder_operation wo LEFT JOIN workorder w ON wo.woiD=w.woID AND w.deletedAt IS NULL            \n" +
                "						WHERE w.isRackTrackingRequired=1 AND wo.qtycontrol=1 AND wo.deletedAt IS NULL AND wo.opNumber<@prevopnumber  AND wo.woID=pwoID ORDER BY wo.opNumber DESC LIMIT 1;            \n" +
                "  \n" +
                "							DROP TEMPORARY TABLE IF EXISTS tempRacktbl;          \n" +
                "				   CREATE TEMPORARY TABLE IF NOT EXISTS tempRacktbl          \n" +
                "				    SELECT MAX(wtr.id) wtrID FROM workorder_trans_rack wtr           \n" +
                "				     WHERE wtr.woopid=IFNULL(@lastwoOPID,0)  GROUP BY wtr.rackid ;           \n" +
                "						IF(SELECT COUNT(1) FROM  workorder_trans_rack wtr WHERE wtr.rackid=pRackID AND wtr.id IN (SELECT wtrId FROM tempRacktbl) AND EXISTS      \n" +
                "						(SELECT 1 FROM workorder_trans_rack_status_details wtrs WHERE wtrs.woTransRackID=wtr.id AND wtrs.status =1))>0 THEN            \n" +
                "							INSERT INTO workorder_trans_rack(rackID,woTransID,woOPID,employeeID,transactionType,createdby,            \n" +
                "												updatedBy,createByRoleId,updateByRoleId)VALUES            \n" +
                "												(pRackID,pwoTransID,pwoOPID,pemployeeID,'I',puserId,puserId,proleID,proleID);      \n" +
                "  \n" +
                "						      INSERT INTO workorder_trans_rack_status_details(woTransRackID,`status`,createdby,updatedBy,createByRoleId,updateByRoleId) VALUES      \n" +
                "								(LAST_INSERT_ID(),0,puserId,puserId,proleID,proleID);	      \n" +
                "  \n" +
                "							UPDATE rackmst SET woTransID=pwoTransID,woID=pwoID,woOPID=pwoOPID,partID=ppartID,opStatus=2,updatedBy=puserId,updateByRoleId=proleID,updatedAt=CURRENT_TIMESTAMP WHERE            \n" +
                "							id=pRackID;            \n" +
                "						ELSE            \n" +
                "							SET @incomeoutStatus='Outgoing Rack';            \n" +
                "							SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is not allowed in current operation as incoming rack# because it is already assigned in ','<b>',pwoOperationName,'</b>',' operation of workorder ','<b>',pwoName,            \n" +
                "							'</b>',' as <b>',@incomeoutStatus,'(',@statusName,')</b> by user ','<b>',puserName,'</b>','.');            \n" +
                "  \n" +
                "							SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "						END IF;	            \n" +
                "					END IF;            \n" +
                "					IF(IFNULL(@prevpisrework,0)=1 AND IFNULL(@prevpisloopoperation ,0)=0 AND @executed=0)THEN            \n" +
                "				       SET @executed=1;            \n" +
                "  \n" +
                "						 SELECT a.woOPID, a.opNumber,a.qtyControl,b.ClusterID,                \n" +
                "						 b.isparellelOperation, a.isLoopOperation            \n" +
                "							INTO @prlwoOPID, @prlopnumber,                \n" +
                "						 @prlpqtyControl,@prlpclusterID,                \n" +
                "						@prlpisparellelOperation, @prlpisloopoperation                    \n" +
                "						FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                     \n" +
                "						a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID                    \n" +
                "						WHERE  a.woid = pwoID  AND  IFNULL(a.isdeleted,0) = 0                    \n" +
                "						AND  a.opNumber  = (SELECT MAX(opNumber)                    \n" +
                "							FROM workorder_operation b                     \n" +
                "							WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0                    \n" +
                "							AND b.qtyControl = 1 AND b.opNumber < @prevopnumber);             \n" +
                "  \n" +
                "						IF(IFNULL(@prlpisparellelOperation,0)=1)THEN           \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempRacktbl;          \n" +
                "				   CREATE TEMPORARY TABLE IF NOT EXISTS tempRacktbl          \n" +
                "				    SELECT MAX(wtr.id) wtrID FROM workorder_trans_rack wtr           \n" +
                "				     WHERE wtr.woopid=IFNULL(@prevwoOPID,0) OR wtr.woopid IN (SELECT woc.woopid            \n" +
                "							FROM workorder_operation_cluster woc WHERE woc.clusterID=@prlpclusterID AND woc.deletedAt IS NULL)  GROUP BY wtr.rackid ; 						          \n" +
                "  \n" +
                "							IF(SELECT COUNT(1) FROM  workorder_trans_rack wtr WHERE wtr.rackid=pRackID AND wtr.id IN (SELECT wtrID FROM tempRacktbl) AND EXISTS       \n" +
                "							(SELECT 1 FROM workorder_trans_rack_status_details wtrs WHERE wtrs.woTransRackID=wtr.id AND wtrs.status IN (1,2,6,7)))>0 THEN            \n" +
                "  \n" +
                "							INSERT INTO workorder_trans_rack(rackID,woTransID,woOPID,employeeID,transactionType,createdby,            \n" +
                "												updatedBy,createByRoleId,updateByRoleId)VALUES            \n" +
                "												(pRackID,pwoTransID,pwoOPID,pemployeeID,'I',puserId,puserId,proleID,proleID);	      \n" +
                "  \n" +
                "						      INSERT INTO workorder_trans_rack_status_details(woTransRackID,`status`,createdby,updatedBy,createByRoleId,updateByRoleId) VALUES      \n" +
                "								(LAST_INSERT_ID(),0,puserId,puserId,proleID,proleID);	      \n" +
                "  \n" +
                "							UPDATE rackmst SET woTransID=pwoTransID,woID=pwoID,woOPID=pwoOPID,partID=ppartID,opStatus=2,updatedBy=puserId,updateByRoleId=proleID,updatedAt=CURRENT_TIMESTAMP WHERE            \n" +
                "							id=pRackID;            \n" +
                "							ELSE            \n" +
                "							SET @incomeoutStatus='Outgoing Rack';            \n" +
                "							SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is not allowed in current operation as incoming rack# because it is already assigned in ','<b>',pwoOperationName,'</b>',' operation of workorder ','<b>',pwoName,            \n" +
                "							'</b>',' as <b>',@incomeoutStatus,'(',@statusName,')</b> by user ','<b>',puserName,'</b>','.');            \n" +
                "  \n" +
                "							SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "							END IF;            \n" +
                "						END IF;	            \n" +
                "						IF(IFNULL(@prlpisparellelOperation,0)=0)THEN           \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempRacktbl;          \n" +
                "				   CREATE TEMPORARY TABLE IF NOT EXISTS tempRacktbl          \n" +
                "				    SELECT MAX(wtr.id) wtrID FROM workorder_trans_rack wtr           \n" +
                "				     WHERE wtr.woopid=IFNULL(@prevwoOPID,0) OR wtr.woopid =IFNULL(@prlwoOPID,0)  GROUP BY wtr.rackid ; 						          \n" +
                "  \n" +
                "							IF(SELECT COUNT(1) FROM  workorder_trans_rack wtr WHERE wtr.rackid=pRackID AND wtr.id IN (SELECT wtrID FROM tempRacktbl)             \n" +
                "							AND EXISTS (SELECT 1 FROM workorder_trans_rack_status_details wtrs WHERE wtrs.woTransRackID=wtr.id AND wtrs.status IN (1,2,6,7)))>0 THEN            \n" +
                "							INSERT INTO workorder_trans_rack(rackID,woTransID,woOPID,employeeID,transactionType,createdby,            \n" +
                "												updatedBy,createByRoleId,updateByRoleId)VALUES            \n" +
                "												(pRackID,pwoTransID,pwoOPID,pemployeeID,'I',puserId,puserId,proleID,proleID);      \n" +
                "  \n" +
                "						      INSERT INTO workorder_trans_rack_status_details(woTransRackID,`status`,createdby,updatedBy,createByRoleId,updateByRoleId) VALUES      \n" +
                "								(LAST_INSERT_ID(),0,puserId,puserId,proleID,proleID);	      \n" +
                "  \n" +
                "							UPDATE rackmst SET woTransID=pwoTransID,woID=pwoID,woOPID=pwoOPID,partID=ppartID,opStatus=2,updatedBy=puserId,updateByRoleId=proleID,updatedAt=CURRENT_TIMESTAMP WHERE            \n" +
                "							id=pRackID;            \n" +
                "							ELSE             \n" +
                "							SET @incomeoutStatus='Outgoing Rack';            \n" +
                "							SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is not allowed in current operation as incoming rack# because it is already assigned in ','<b>',pwoOperationName,'</b>',' operation of workorder ','<b>',pwoName,            \n" +
                "							'</b>',' as <b>',@incomeoutStatus,'(',@statusName,')</b> by user ','<b>',puserName,'</b>','.');            \n" +
                "  \n" +
                "							SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "							END IF;            \n" +
                "						END IF;               \n" +
                "  \n" +
                "				END IF;		            \n" +
                "					IF(IFNULL(@prevpisparellelOperation,0)=1 AND IFNULL(@nextpisloopoperation,0)=0 AND @executed=0)THEN            \n" +
                "					SET @executed=1;           \n" +
                "  \n" +
                "							DROP TEMPORARY TABLE IF EXISTS tempRacktbl;          \n" +
                "				   CREATE TEMPORARY TABLE IF NOT EXISTS tempRacktbl          \n" +
                "				    SELECT MAX(wtr.id) wtrID FROM workorder_trans_rack wtr           \n" +
                "				     WHERE wtr.woopid IN (SELECT woc.woopid            \n" +
                "							FROM workorder_operation_cluster woc WHERE woc.clusterID=@prevpclusterID AND woc.deletedAt IS NULL)  GROUP BY wtr.rackid ;          \n" +
                "  \n" +
                "						IF(SELECT COUNT(1) FROM  workorder_trans_rack wtr WHERE wtr.rackid=pRackID AND wtr.id IN (SELECT wtrID FROM tempRacktbl) AND EXISTS       \n" +
                "						(SELECT 1 FROM workorder_trans_rack_status_details wtrs WHERE wtrs.woTransRackID=wtr.id AND wtrs.status NOT IN (4)))>0 THEN            \n" +
                "							INSERT INTO workorder_trans_rack(rackID,woTransID,woOPID,employeeID,transactionType,createdby,            \n" +
                "												updatedBy,createByRoleId,updateByRoleId)VALUES            \n" +
                "												(pRackID,pwoTransID,pwoOPID,pemployeeID,'I',puserId,puserId,proleID,proleID);	      \n" +
                "  \n" +
                "						      INSERT INTO workorder_trans_rack_status_details(woTransRackID,`status`,createdby,updatedBy,createByRoleId,updateByRoleId) VALUES      \n" +
                "								(LAST_INSERT_ID(),0,puserId,puserId,proleID,proleID);      \n" +
                "  \n" +
                "							UPDATE rackmst SET woTransID=pwoTransID,woID=pwoID,woOPID=pwoOPID,partID=ppartID,opStatus=2,updatedBy=puserId,updateByRoleId=proleID,updatedAt=CURRENT_TIMESTAMP WHERE            \n" +
                "							id=pRackID;            \n" +
                "						ELSE            \n" +
                "							SET @incomeoutStatus='Outgoing Rack';            \n" +
                "							SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is not allowed in current operation as incoming rack# because it is already assigned in ','<b>',pwoOperationName,'</b>',' operation of workorder ','<b>',pwoName,            \n" +
                "							'</b>',' as <b>',@incomeoutStatus,'(',@statusName,')</b> by user ','<b>',puserName,'</b>','.');            \n" +
                "  \n" +
                "							SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "						END IF;	            \n" +
                "					END IF;	            \n" +
                "  \n" +
                "					IF(IFNULL(@prevpisparellelOperation,0)=0 AND IFNULL(@nextpisloopoperation,0)=1 AND @executed=0)THEN            \n" +
                "					SET @executed=1;           \n" +
                "					IF(SELECT COUNT(1) FROM  workorder_trans_rack wtr WHERE rackid=pRackID AND EXISTS       \n" +
                "					(SELECT 1 FROM workorder_trans_rack_status_details wtrs WHERE wtrs.woTransRackID=wtr.id AND wtrs.status NOT IN (4)) ORDER BY id DESC LIMIT 1)>0 THEN          \n" +
                "							DROP TEMPORARY TABLE IF EXISTS tempRacktbl;          \n" +
                "				   CREATE TEMPORARY TABLE IF NOT EXISTS tempRacktbl          \n" +
                "				    SELECT MAX(wtr.id) wtrID FROM workorder_trans_rack wtr           \n" +
                "				     WHERE wtr.woopid=IFNULL(@nextwoOPID,0) OR wtr.woopid =IFNULL(@prevwoOPID,0)  GROUP BY wtr.rackid ; 	          \n" +
                "  \n" +
                "						IF(SELECT COUNT(1) FROM  workorder_trans_rack wtr WHERE wtr.rackid=pRackID AND wtr.id IN (SELECT wtrID FROM tempRacktbl) AND ((wtr.woOPID=@nextwoOPID AND       \n" +
                "						EXISTS(SELECT 1 FROM workorder_trans_rack_status_details wtrs WHERE wtrs.woTransRackID=wtr.id AND wtrs.status=1)) OR (wtr.woopid=@prevwoOPID AND       \n" +
                "						EXISTS (SELECT 1 FROM workorder_trans_rack_status_details wtrs WHERE wtrs.woTransRackID=wtr.id AND wtrs.status NOT IN (4)))))>0 THEN           \n" +
                "  \n" +
                "							INSERT INTO workorder_trans_rack(rackID,woTransID,woOPID,employeeID,transactionType,createdby,            \n" +
                "												updatedBy,createByRoleId,updateByRoleId)VALUES            \n" +
                "												(pRackID,pwoTransID,pwoOPID,pemployeeID,'I',puserId,puserId,proleID,proleID);	      \n" +
                "  \n" +
                "						      INSERT INTO workorder_trans_rack_status_details(woTransRackID,`status`,createdby,updatedBy,createByRoleId,updateByRoleId) VALUES      \n" +
                "								(LAST_INSERT_ID(),0,puserId,puserId,proleID,proleID);      \n" +
                "  \n" +
                "							UPDATE rackmst SET woTransID=pwoTransID,woID=pwoID,woOPID=pwoOPID,partID=ppartID,opStatus=2,updatedBy=puserId,updateByRoleId=proleID,updatedAt=CURRENT_TIMESTAMP WHERE            \n" +
                "							id=pRackID;            \n" +
                "						ELSE            \n" +
                "							SET @incomeoutStatus='Outgoing Rack';            \n" +
                "							SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is not allowed in current operation as incoming rack# because it is already assigned in ','<b>',pwoOperationName,'</b>',' operation of workorder ','<b>',pwoName,            \n" +
                "							'</b>',' as <b>',@incomeoutStatus,'(',@statusName,')</b> by user ','<b>',puserName,'</b>','.');            \n" +
                "  \n" +
                "							SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "  \n" +
                "						END IF;	          \n" +
                "						ELSE          \n" +
                "						SET @incomeoutStatus='Outgoing Rack';            \n" +
                "							SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is not allowed in current operation as incoming rack# because it is already assigned in ','<b>',pwoOperationName,'</b>',' operation of workorder ','<b>',pwoName,            \n" +
                "							'</b>',' as <b>',@incomeoutStatus,'(',@statusName,')</b> by user ','<b>',puserName,'</b>','.');            \n" +
                "  \n" +
                "							SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "						END IF;            \n" +
                "					END IF;	            \n" +
                "					IF(IFNULL(@prevpisparellelOperation,0)=0 AND IFNULL(@nextpisloopoperation,0)=0 AND @prevwoOPID!=pcurWoOPID AND @executed=0)THEN            \n" +
                "					SET @executed=1;            \n" +
                "						SET @incomeoutStatus='Outgoing Rack';            \n" +
                "							SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is not allowed in current operation as incoming rack# because it is already assigned in ','<b>',pwoOperationName,'</b>',' operation of workorder ','<b>',pwoName,            \n" +
                "							'</b>',' as <b>',@incomeoutStatus,'(',@statusName,')</b> by user ','<b>',puserName,'</b>','.');            \n" +
                "  \n" +
                "							SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "					END IF;            \n" +
                "					IF(IFNULL(@prevpisparellelOperation,0)=0 AND IFNULL(@nextpisloopoperation,0)=0 AND @prevwoOPID=pcurWoOPID AND @executed=0)THEN            \n" +
                "					SET @executed=1;            \n" +
                "					IF(SELECT COUNT(1) FROM temp_workorder_trans_rack_status_details WHERE `status` NOT IN (4)) >0 THEN            \n" +
                "						INSERT INTO workorder_trans_rack(rackID,woTransID,woOPID,employeeID,transactionType,createdby,            \n" +
                "												updatedBy,createByRoleId,updateByRoleId)VALUES            \n" +
                "												(pRackID,pwoTransID,pwoOPID,pemployeeID,'I',puserId,puserId,proleID,proleID);	      \n" +
                "  \n" +
                "					      INSERT INTO workorder_trans_rack_status_details(woTransRackID,`status`,createdby,updatedBy,createByRoleId,updateByRoleId) VALUES      \n" +
                "								(LAST_INSERT_ID(),0,puserId,puserId,proleID,proleID);      \n" +
                "  \n" +
                "						UPDATE rackmst SET woTransID=pwoTransID,woID=pwoID,woOPID=pwoOPID,partID=ppartID,opStatus=2,updatedBy=puserId,updateByRoleId=proleID,updatedAt=CURRENT_TIMESTAMP WHERE            \n" +
                "						id=pRackID;            \n" +
                "						ELSE            \n" +
                "						SET @incomeoutStatus='Outgoing Rack';            \n" +
                "							SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is not allowed in current operation as incoming rack# because it is already assigned in ','<b>',pwoOperationName,'</b>',' operation of workorder ','<b>',pwoName,            \n" +
                "							'</b>',' as <b>',@incomeoutStatus,'(',@statusName,')</b> by user ','<b>',puserName,'</b>','.');            \n" +
                "  \n" +
                "							SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,pwoOperationName,prackStatus,puserName,pwoName);            \n" +
                "						END IF;            \n" +
                "					END IF;            \n" +
                "  \n" +
                "				END IF;            \n" +
                "  \n" +
                "			END IF;	            \n" +
                "	    	IF(pResult =1)THEN            \n" +
                "		SELECT 'Sucess' `status`,200 statusCode,prackStatus AS rackStatus ;            \n" +
                "		ELSE            \n" +
                "		SELECT 	tse.*,201 statusCode FROM temp_scanrack_error tse;            \n" +
                "		END IF;	        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_scanClearMaterial` ;  \n" +
                "CREATE PROCEDURE `Sproc_scanClearMaterial`(                                                                      \n" +
                "	IN pRackNumber VARCHAR(100),            \n" +
                "	IN pwoTransID INT(11),            \n" +
                "	IN pisClean TINYINT(1),            \n" +
                "	IN puserID INT(11),    \n" +
                "	IN pissuperadmin TINYINT(1),  \n" +
                "	IN puserroleID INT              \n" +
                ")  \n" +
                "BEGIN                       \n" +
                "	DECLARE pRackID INT;            \n" +
                "	DECLARE pStatus INT;            \n" +
                "	DECLARE pResult INT DEFAULT 1;            \n" +
                "	DECLARE pwoOperationName VARCHAR(100);            \n" +
                "	DECLARE puserName VARCHAR(100);            \n" +
                "	DECLARE prackStatus VARCHAR(255);          \n" +
                "	DECLARE pwonumber VARCHAR(50);        \n" +
                "	DECLARE pwtrID INT;        \n" +
                "	DECLARE pcurrentWoID INT;        \n" +
                "	DECLARE pisStrictlyFollowRackValidation TINYINT DEFAULT 0;        \n" +
                "	DECLARE pcurrentwoOPID INT;        \n" +
                "	DECLARE plastOperation INT;         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_scanrack_error;               \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE temp_scanrack_error                                                                    \n" +
                "	(                                                                    \n" +
                "	     errorText VARCHAR(2000),                                                                    \n" +
                "	     isOutError INT(11),                                                                  \n" +
                "	     isInError INT(11),                                                                  \n" +
                "	     isConfirmation INT(11),                                                                   \n" +
                "	     isMessage INT(11),                                                                   \n" +
                "	     isInformation INT(11),            \n" +
                "	     operation VARCHAR(200),            \n" +
                "	     rackStatus INT ,            \n" +
                "	     userName VARCHAR(100),          \n" +
                "	     workorderName VARCHAR(50)                                        \n" +
                "	);             \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		            SELECT rk.id,rk.opStatus,fun_getOperationNameByWOOPID(rk.woOPID),(SELECT fun_getUserNameByID(wtr.createdBy) FROM workorder_trans_rack wtr WHERE wtr.deletedat IS NULL AND             \n" +
                "				wtr.rackID=rk.id ORDER BY wtr.id DESC LIMIT 1),            \n" +
                "				(SELECT wtr.id FROM workorder_trans_rack wtr WHERE wtr.deletedat IS NULL AND             \n" +
                "				wtr.rackID=rk.id ORDER BY wtr.id DESC LIMIT 1),fun_getWorkorderNumberWithRevByID(rk.woID),rk.woID,rk.woOPID            \n" +
                "				INTO pRackID,pStatus,pwoOperationName,puserName,pwtrID,pwonumber,pcurrentWoID,pcurrentwoOPID            \n" +
                "				 FROM rackmst rk WHERE rk.`name`=pRackNumber AND rk.deletedAt IS NULL AND rk.isActive=1;         \n" +
                "  \n" +
                "				 DROP TEMPORARY TABLE IF EXISTS temp_workorder_trans_rack_status_details;        \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS  temp_workorder_trans_rack_status_details AS        \n" +
                "				SELECT `status`,fun_getRackStatusbyID(`status`) statusName FROM workorder_trans_rack_status_details WHERE woTransRackID=pwtrID;        \n" +
                "  \n" +
                "				SELECT GROUP_CONCAT(statusName) INTO prackStatus  FROM temp_workorder_trans_rack_status_details;        \n" +
                "  \n" +
                "				IF(pcurrentWoID IS NOT NULL)THEN        \n" +
                "				 SELECT isStrictlyFollowRackValidation INTO pisStrictlyFollowRackValidation FROM workorder  WHERE woID=pcurrentWoID;         \n" +
                "				 SELECT woopid INTO plastOperation  FROM workorder_operation WHERE qtyControl=1 AND woID=pcurrentWoID ORDER BY opnumber DESC LIMIT 1;          \n" +
                "				 END IF;        \n" +
                "  \n" +
                "			IF(pRackID IS NULL) THEN             \n" +
                "			SET pResult=fun_checkAndInsertRackError(CONCAT('Rack# <b>',pRackNumber, '</b> not found'),1,0,0,1,0,NULL,NULL,NULL,NULL);            \n" +
                "			END IF;				            \n" +
                "  \n" +
                "				IF(pStatus=1)THEN            \n" +
                "						SET @message=CONCAT('Rack# ','<b>',pRackNumber,'</b>',' is empty. Empty rack cannot be clear.');            \n" +
                "  \n" +
                "						SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,NULL,NULL,NULL,NULL);            \n" +
                "				END IF;        \n" +
                "				IF(pisStrictlyFollowRackValidation=1 AND plastOperation!=pcurrentwoOPID AND pStatus=3 AND pisClean=1 AND pissuperadmin=0)THEN        \n" +
                "				SET @message=CONCAT('Workorder <b>',pwonumber,'</b> is configured as <b>Strictly Follow Rack Validation</b>. Completed rack cannot be clear, Rack status must be WIP.');         \n" +
                "				SET pResult=fun_checkAndInsertRackError(@message,1,0,0,1,0,NULL,NULL,NULL,NULL);        \n" +
                "				END IF;	        \n" +
                "  \n" +
                "  \n" +
                "			IF(pResult =1 AND pisClean=0)THEN            \n" +
                "			SELECT 'Sucess' `status`,200 statusCode,prackStatus AS rackStatus,pwoOperationName AS currentOperation,puserName AS userName,pwonumber AS workorderName ;        \n" +
                "		        ELSEIF(pResult =1 AND pisClean=1) THEN            \n" +
                "				UPDATE rackmst SET woTransID=pwoTransID,woID=(NULL),woOPID=(NULL),partID=(NULL),opStatus=1,updatedBy=puserID,updatedAt=CURRENT_TIMESTAMP,updateByRoleId=puserroleID	 WHERE            \n" +
                "							id=pRackID;            \n" +
                "				SELECT 'Sucess' `status`,200 statusCode;            \n" +
                "			END IF;            \n" +
                "		IF(pResult!=1)THEN            \n" +
                "			SELECT 	tse.*,201 statusCode FROM temp_scanrack_error tse;            \n" +
                "		END IF;	            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2598,'2.00','V1',' Rack Procedure-champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2598:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2020 *********************************** */
                "drop procedure if exists `Sproc_GetComponentHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentHistory`(  \n" +
                "	IN pPartID INT(11),  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "    set @temp_Sproc_GetComponentHistory = concat(\"SELECT h.id,  \n" +
                "			h.tableName,          \n" +
                "			h.Colname,          \n" +
                "			h.Oldval,          \n" +
                "			h.Newval,          \n" +
                "			fun_getUserNameByID(h.updatedBy) ModifiedUser,          \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(h.UpdatedAt) updatedAt          \n" +
                "	FROM component_history h          \n" +
                "	LEFT OUTER JOIN users u ON u.id = h.updatedBy          \n" +
                "	WHERE h.refComponentID = \",pPartID);          \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);          \n" +
                "	ELSE          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"ID DESC\");          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN          \n" +
                "		SET pWhereClause = '1=1';          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN          \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);          \n" +
                "	ELSE          \n" +
                "		SET rowNumWhere = '';          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	 /* to get total count of rows */           \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetComponentHistory,\" ) c where 1=1 and \", pWhereClause);          \n" +
                "	PREPARE query2 FROM @SQLStatement2;          \n" +
                "	EXECUTE query2;          \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetComponentHistory,\" ) c          \n" +
                "		where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
                "	PREPARE query1 FROM @SQLStatement2;          \n" +
                "	EXECUTE query1;          \n" +
                "	DEALLOCATE PREPARE query1;           \n" +
                "  \n" +
                "	select id,   \n" +
                "			fun_getUserNameByID(co.createdBy) createdbyValue,    \n" +
                "			fun_getRoleByID(co.createByRoleId) createdbyRoleValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(co.createdAt,vTimeZone, vDateTimeDisplayFormat) createdAtValue  \n" +
                "	from component co  \n" +
                "	where co.id = pPartID;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 24-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2599,'2.00','V1','chaneg Sproc_GetComponentHistory SP - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
        case 2599:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2020 *********************************** */
                "ALTER TABLE `workorder`   \n" +
                "DROP COLUMN `sampleDetails`,  \n" +
                "DROP COLUMN `isSampleAvailable`;  \n" +
                "ALTER TABLE `workorder`   \n" +
                "ADD COLUMN `selectedSampleID` INT(11) NULL DEFAULT NULL AFTER `deleteByRoleId`,  \n" +
                "ADD INDEX `FK_workorder_sample_idx` (`selectedSampleID` ASC) VISIBLE;  \n" +
                "ALTER TABLE `workorder`   \n" +
                "ADD CONSTRAINT `FK_workorder_sample`  \n" +
                "  FOREIGN KEY (`selectedSampleID`)  \n" +
                "  REFERENCES `equipment` (`eqpID`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION;  \n" +
                /* **************************** Add Script Version -> 24-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2600,'2.00','V1','Added selectedSampleID field in work order - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
        case 2600:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2020 *********************************** */
                "drop procedure if exists Sproc_GetComponentMFGAliasSearch;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(    \n" +
                "IN pGoodPart VARCHAR(100),    \n" +
                "IN pSearch VARCHAR(100),    \n" +
                "IN pId INT(11),    \n" +
                "IN pMfgType VARCHAR(50),    \n" +
                "IN pRoHSStatusID VARCHAR(100),    \n" +
                "IN pMfgCodeId INT(11),    \n" +
                "IN pMountingType VARCHAR(50),    \n" +
                "IN pMountingTypeId INT(11),    \n" +
                "IN pCategoryID INT(11),    \n" +
                "IN pIsContainCPN TINYINT(1),    \n" +
                "IN pRohsMainCategoryID INT(11),    \n" +
                "IN pIsRohsMainCategoryInvertMatch TINYINT(1)     \n" +
                ")  \n" +
                "BEGIN    \n" +
                "   DECLARE vRohsMainCategoryID INT(11);    \n" +
                "   SET vRohsMainCategoryID = pRohsMainCategoryID;    \n" +
                "   /*===>this logic is added to compare invert rohs category*/    \n" +
                "   IF pIsRohsMainCategoryInvertMatch = FALSE  THEN    \n" +
                "		IF pRohsMainCategoryID = -1 THEN    \n" +
                "			SET vRohsMainCategoryID = -2;        \n" +
                "		ELSEIF pRohsMainCategoryID = -2 THEN        \n" +
                "			SET vRohsMainCategoryID = -1;        \n" +
                "        END IF;        \n" +
                "   END IF;        \n" +
                "   /*<===this logic is added to compare invert rohs category*/        \n" +
                "IF(pMountingType IS NOT NULL) THEN                \n" +
                " SELECT * FROM                \n" +
                " (                \n" +
                "	 SELECT `com`.`id`,                \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/                \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,                \n" +
                "		`com`.`mfgPN` orgMfgPN,    \n" +
                "		`com`.`packaginggroupID`,    \n" +
                "        `com`.`PIDCode`,  \n" +
                "		`com`.`isGoodPart`,    \n" +
                "		`com`.`RoHSStatusID`,    \n" +
                "		`com`.`rohsgroupID`,    \n" +
                "        `com`.`mfgcodeID`,    \n" +
                "		/*`mfgCodemst`.`id` AS `mfgCodeId`,*/    \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,    \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,    \n" +
                "        `com`.`tolerance`,    \n" +
                "        `com`.`minOperatingTemp`,    \n" +
                "        `com`.`maxOperatingTemp`,    \n" +
                "        `com`.`value`,    \n" +
                "        `com`.`partPackage`,    \n" +
                "        `com`.`powerRating`,    \n" +
                "        `com`.`functionalCategoryID`,    \n" +
                "        `com`.`mountingTypeID`,    \n" +
                "        `com`.`connecterTypeID`,    \n" +
                "        `com`.`noOfPosition`,    \n" +
                "        `com`.`noOfRows`,    \n" +
                "        `com`.`pitch`,    \n" +
                "        `com`.`pitchMating`,    \n" +
                "        `com`.`length`,    \n" +
                "        `com`.`width`,    \n" +
                "        `com`.`height`,    \n" +
                "        `com`.`voltage`,    \n" +
                "        `com`.`weight`,    \n" +
                "        `com`.`feature`,    \n" +
                "        `com`.`color`,    \n" +
                "        `com`.`partStatus`,    \n" +
                "        `com`.`uom`,    \n" +
                "        `com`.`uomClassID`,    \n" +
                "        `com`.`unit`,    \n" +
                "        (SELECT u.abbreviation FROM uoms u WHERE u.id = com.uom) AS uomName,    \n" +
                "        (SELECT u.unitName FROM uoms u WHERE u.id = com.uom) AS unitName,    \n" +
                "        fun_getRoHSIconByID(`com`.`RoHSStatusID`) `rohsIcon`,    \n" +
                "		fun_getRoHSNameByID(`com`.`RoHSStatusID`) `rohsName`,    \n" +
                "        `com`.`partPackageID`,    \n" +
                "        `com`.`bomLock`,    \n" +
                "		`com`.`businessRisk`,    \n" +
                "		`com`.`costCategoryID`,    \n" +
                "		`com`.`deviceMarking`,    \n" +
                "		`com`.`driverToolRequired`,    \n" +
                "		`com`.`eau`,    \n" +
                "		`com`.`epicorType`,          \n" +
                "		`com`.`functionalTestingRequired`,          \n" +
                "		`com`.`heightText`,          \n" +
                "		`com`.`isCPN`,          \n" +
                "		`com`.`isCustom`,          \n" +
                "		`com`.`isLeadFree`,          \n" +
                "		`com`.`leadTime`,          \n" +
                "		`com`.`matingPartRquired`,          \n" +
                "		`com`.`maxPriceLimit`,          \n" +
                "		`com`.`maxQtyonHand`,          \n" +
                "		`com`.`minimum`,          \n" +
                "		`com`.`mult`,          \n" +
                "		`com`.`packageQty`,          \n" +
                "		`com`.`partType`,          \n" +
                "		`com`.`pcbPerArray`,          \n" +
                "		`com`.`pickupPadRequired`,          \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,          \n" +
                "		`com`.`plannedValuePerBuild`,          \n" +
                "		`com`.`programingRequired`,          \n" +
                "		`com`.`rfqOnly`,          \n" +
                "		`com`.`saftyStock`,          \n" +
                "		`com`.`scrapRatePercentagePerBuild`,          \n" +
                "		`com`.`scrapValuePerBuild`,          \n" +
                "		`com`.`selfLifeDays`,          \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,          \n" +
                "		`com`.`temperatureCoefficient`,          \n" +
                "		`com`.`temperatureCoefficientUnit`,          \n" +
                "		`com`.`temperatureCoefficientValue`,          \n" +
                "		`com`.`trackSerialNumber`          \n" +
                "	FROM `component` AS `com`  \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND  \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))  \n" +
                "    JOIN `rfq_mountingtypemst` AS `mt` ON `mt`.`id` = `com`.`mountingTypeID` AND `mt`.`name` = pMountingType  \n" +
                "    JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID        \n" +
                "	WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))   \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))  \n" +
                "    and `com`.`mountingTypeID` = IFNULL(pMountingTypeId, `com`.`mountingTypeID`)  \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)                \n" +
                "    AND `com`.`category` = IFNULL(pCategoryID, `com`.`category`)                \n" +
                "    AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)          \n" +
                "    AND r.refMainCategoryID = IFNULL(vRohsMainCategoryID, r.refMainCategoryID)      \n" +
                "    -- `com`.`isCPN` = false                \n" +
                "    ) AS a                            \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR                            \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')                            \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a` .`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))                            \n" +
                "	)          \n" +
                "	ORDER BY mfgPN;          \n" +
                "  \n" +
                "  ELSE          \n" +
                "   SELECT * FROM          \n" +
                " (          \n" +
                "	 SELECT `com`.`id`,          \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/    \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,    \n" +
                "		`com`.`mfgPN` orgMfgPN,    \n" +
                "		`com`.`packaginggroupID`,                    \n" +
                "		`com`.`PIDCode`,                    \n" +
                "		`com`.`isGoodPart`,    \n" +
                "		`com`.`RoHSStatusID`,    \n" +
                "		`com`.`rohsgroupID`,    \n" +
                "		`com`.`mfgcodeID`,    \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,    \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,    \n" +
                "		`com`.`tolerance`,    \n" +
                "		`com`.`minOperatingTemp`,    \n" +
                "		`com`.`maxOperatingTemp`,    \n" +
                "		`com`.`value`,    \n" +
                "		`com`.`partPackage`,    \n" +
                "		`com`.`powerRating`,    \n" +
                "		`com`.`functionalCategoryID`,    \n" +
                "		`com`.`mountingTypeID`,    \n" +
                "		`com`.`connecterTypeID`,    \n" +
                "		`com`.`noOfPosition`,    \n" +
                "		`com`.`noOfRows`,    \n" +
                "		`com`.`pitch`,    \n" +
                "		`com`.`pitchMating`,    \n" +
                "		`com`.`length`,    \n" +
                "		`com`.`width`,    \n" +
                "		`com`.`height`,    \n" +
                "		`com`.`voltage`,    \n" +
                "		`com`.`weight`,    \n" +
                "		`com`.`feature`,    \n" +
                "		`com`.`color`,                                \n" +
                "		`com`.`partStatus`,                                \n" +
                "		`com`.`uom`,                              \n" +
                "        `com`.`uomClassID`,                \n" +
                "		`com`.`unit`,                      \n" +
                "		`com`.`restrictUsePermanently`,                      \n" +
                "		`com`.`restrictUSEwithpermission`,                    \n" +
                "		`com`.`restrictPackagingUsePermanently`,                    \n" +
                "		`com`.`restrictPackagingUseWithpermission`,                    \n" +
                "		`com`.`packagingID`,                  \n" +
                "		`com`.`packaging`,                  \n" +
                "		(SELECT u.abbreviation FROM uoms u WHERE u.id = com.uom) AS uomName,                          \n" +
                "		(SELECT u.unitName FROM uoms u WHERE u.id = com.uom) AS unitName,                            \n" +
                "		fun_getRoHSIconByID(`com`.`RoHSStatusID`) `rohsIcon`,                        \n" +
                "		fun_getRoHSNameByID(`com`.`RoHSStatusID`) `rohsName`,    \n" +
                "        `com`.`partPackageID`,          \n" +
                "        `com`.`bomLock`,          \n" +
                "		`com`.`businessRisk`,          \n" +
                "		`com`.`costCategoryID`,          \n" +
                "		`com`.`deviceMarking`,          \n" +
                "		`com`.`driverToolRequired`,          \n" +
                "		`com`.`eau`,          \n" +
                "		`com`.`epicorType`,          \n" +
                "		`com`.`functionalTestingRequired`,          \n" +
                "		`com`.`heightText`,          \n" +
                "		`com`.`isCPN`,          \n" +
                "		`com`.`isCustom`,          \n" +
                "		`com`.`isLeadFree`,          \n" +
                "		`com`.`leadTime`,          \n" +
                "		`com`.`matingPartRquired`,          \n" +
                "		`com`.`maxPriceLimit`,          \n" +
                "		`com`.`maxQtyonHand`,          \n" +
                "		`com`.`minimum`,          \n" +
                "		`com`.`mult`,          \n" +
                "		`com`.`packageQty`,          \n" +
                "		`com`.`partType`,          \n" +
                "		`com`.`pcbPerArray`,          \n" +
                "		`com`.`pickupPadRequired`,          \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,          \n" +
                "		`com`.`plannedValuePerBuild`,          \n" +
                "		`com`.`programingRequired`,          \n" +
                "		`com`.`rfqOnly`,          \n" +
                "		`com`.`saftyStock`,          \n" +
                "		`com`.`scrapRatePercentagePerBuild`,          \n" +
                "		`com`.`scrapValuePerBuild`,          \n" +
                "		`com`.`selfLifeDays`,          \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,          \n" +
                "		`com`.`temperatureCoefficient`,          \n" +
                "		`com`.`temperatureCoefficientUnit`,          \n" +
                "		`com`.`temperatureCoefficientValue`,          \n" +
                "		`com`.`trackSerialNumber`          \n" +
                "	FROM `component` AS `com`    \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND    \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))    \n" +
                "	JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID        \n" +
                "    WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))    \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))    \n" +
                "    and `com`.`mountingTypeID` = IFNULL(pMountingTypeId, `com`.`mountingTypeID`)  \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)                \n" +
                "    AND `com`.`category` = IFNULL(pCategoryID, `com`.`category`)                \n" +
                "    AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)        \n" +
                "    AND r.refMainCategoryID = IFNULL(vRohsMainCategoryID, r.refMainCategoryID)        \n" +
                "    -- and `com`.`isCPN` = false                \n" +
                "    ) AS a    \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR    \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')    \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a` .`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))    \n" +
                ")                            \n" +
                "ORDER BY mfgPN;    \n" +
                "END IF;    \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_GetAssemblySamplesList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblySamplesList`(  \n" +
                "	IN pWoId INT(11),  \n" +
                "	IN pAssyId INT(11),        \n" +
                "    IN pIsShowAll TINYINT(1)        \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	select eq.eqpID, gf.gencFileName, co.PIDCode, eq.assetName,         \n" +
                "		bin.Name binName, wh.Name wareHouseName, pwh.Name parentWareHouseName,         \n" +
                "		et.gencCategoryName ownership,      \n" +
                "        co.id partID,      \n" +
                "        co.mfgPN,      \n" +
                "        rr.rohsIcon,      \n" +
                "        rr.name rohsName,  \n" +
                "        (select wo.selectedSampleID from workorder wo where wo.selectedSampleID = eq.eqpID and wo.woID = pWoId) selectedSampleID  \n" +
                "	  from equipment eq        \n" +
                "	  join component co ON co.id = eq.assyId        \n" +
                "      left join rfq_rohsmst rr ON rr.id = co.RoHSStatusID  \n" +
                "	  left join binmst bin ON bin.id = eq.binId  \n" +
                "	  left join warehousemst wh ON wh.ID = bin.WarehouseID  \n" +
                "	  left join warehousemst pwh ON pwh.ID = wh.parentWHID  \n" +
                "	  left join genericcategory et ON et.gencCategoryID = eq.eqpOwnershipTypeID and et.categoryType = 'Equipment, Workstation & Sample Ownerships'  \n" +
                "	  left join genericfiles gf ON gf.refTransID = eq.eqpID and gf.gencFileOwnerType = 'equipment' and gf.deletedAt is null and gf.isdeleted = false  \n" +
                "	 where eq.equipmentAs = 'S'  \n" +
                "	   and eq.deletedAt is null  \n" +
                "	   and eq.isdeleted = false  \n" +
                "       and eq.isActive = true  \n" +
                "       and case when pIsShowAll=true then  \n" +
                "				exists (select 1 from component c where c.custAssyPN = co.custAssyPN and c.mfgcodeID = co.mfgcodeID and c.id=pAssyId)  \n" +
                "			else  \n" +
                "				co.id = pAssyId  \n" +
                "			end  \n" +
                "	order by selectedSampleID is null asc, selectedSampleID asc, co.PIDCode asc;  \n" +
                "END;  \n" +
                "DROP TRIGGER IF EXISTS `Trg_AU_WorkOrder`;  \n" +
                "CREATE TRIGGER `Trg_AU_WorkOrder` AFTER UPDATE ON `workorder` FOR EACH ROW BEGIN              \n" +
                "	IF IFNULL(OLD.WONUMBER, 0) != IFNULL(NEW.WONUMBER, 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'WONUMBER',              \n" +
                "			CAST(OLD.WONUMBER AS CHAR),CAST(NEW.WONUMBER AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.PARTID, 0) != IFNULL(NEW.PARTID, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'PARTID',              \n" +
                "			CAST(OLD.PARTID AS CHAR),CAST(NEW.PARTID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.EXCESSQTY, 0) != IFNULL(NEW.EXCESSQTY , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'EXCESSQTY',              \n" +
                "			CAST(OLD.excessQty AS CHAR),CAST(NEW.excessQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.BUILDQTY , 0)!= IFNULL(NEW.BUILDQTY , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'BUILDQTY',              \n" +
                "			CAST(OLD.buildQty AS CHAR),CAST(NEW.buildQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.STARTTIME, 0) != IFNULL(NEW.STARTTIME, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'STARTTIME',              \n" +
                "			CAST(OLD.startTime AS CHAR),CAST(NEW.startTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.ENDTIME, 0) != IFNULL(NEW.ENDTIME , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ENDTIME',              \n" +
                "			CAST(OLD.endTime AS CHAR),CAST(NEW.endTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.MASTERTEMPLATEID, 0) != IFNULL(NEW.MASTERTEMPLATEID, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'MASTERTEMPLATEID',              \n" +
                "			CAST(OLD.MASTERTEMPLATEID AS CHAR),CAST(NEW.MASTERTEMPLATEID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.REFRENCEWOID, 0) != IFNULL(NEW.REFRENCEWOID , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'REFRENCEWOID',              \n" +
                "			CAST(OLD.REFRENCEWOID AS CHAR),CAST(NEW.REFRENCEWOID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.WOVERSION, 0) != IFNULL(NEW.WOVERSION , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'WOVERSION',              \n" +
                "			CAST(OLD.woVersion AS CHAR),CAST(NEW.woVersion AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ISCLUSTERAPPLIED, 0) != IFNULL(NEW.ISCLUSTERAPPLIED, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISCLUSTERAPPLIED',              \n" +
                "			CAST(OLD.ISCLUSTERAPPLIED AS CHAR),CAST(NEW.ISCLUSTERAPPLIED AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.ROHSSTATUSID, 0) != IFNULL(NEW.ROHSSTATUSID, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ROHSSTATUSID',              \n" +
                "			CAST(OLD.ROHSSTATUSID AS CHAR),CAST(NEW.ROHSSTATUSID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.ISNOCLEAN, 0) != IFNULL(NEW.ISNOCLEAN , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISNOCLEAN',              \n" +
                "			CAST(OLD.ISNOCLEAN AS CHAR),CAST(NEW.ISNOCLEAN AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.ISWATERSOLUBLE, 0) != IFNULL(NEW.ISWATERSOLUBLE, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISWATERSOLUBLE',              \n" +
                "			CAST(OLD.ISWATERSOLUBLE AS CHAR),CAST(NEW.ISWATERSOLUBLE AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.ISOPERATIONTRACKBYSERIALNO, 0) != IFNULL(NEW.ISOPERATIONTRACKBYSERIALNO , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISOPERATIONTRACKBYSERIALNO',              \n" +
                "			CAST(OLD.ISOPERATIONTRACKBYSERIALNO AS CHAR),CAST(NEW.ISOPERATIONTRACKBYSERIALNO AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.WOSTATUS, 0) != IFNULL(NEW.WOSTATUS , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'WOSTATUS',              \n" +
                "			CAST(OLD.WOSTATUS AS CHAR),CAST(NEW.WOSTATUS AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.CUSTOMERID, 0) != IFNULL(NEW.CUSTOMERID, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'CUSTOMERID',              \n" +
                "			CAST(OLD.customerID AS CHAR),CAST(NEW.customerID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.ECOREMARK, 0) != IFNULL(NEW.ECOREMARK , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ECOREMARK',              \n" +
                "			CAST(OLD.ECORemark AS CHAR),CAST(NEW.ECORemark AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.FCOREMARK, 0) != IFNULL(NEW.FCOREMARK, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'FCOREMARK',              \n" +
                "			CAST(OLD.FCORemark AS CHAR),CAST(NEW.FCORemark AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.LOCATIONDETAILS , 0)!= IFNULL(NEW.LOCATIONDETAILS , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'LOCATIONDETAILS',              \n" +
                "			CAST(OLD.locationDetails AS CHAR),CAST(NEW.locationDetails AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.ISDELETED, 0) != IFNULL(NEW.ISDELETED , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISDELETED',              \n" +
                "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.ISSTOPWORKORDER, 0) != IFNULL(NEW.ISSTOPWORKORDER, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISSTOPWORKORDER',              \n" +
                "			CAST(OLD.isStopWorkorder AS CHAR),CAST(NEW.isStopWorkorder AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.ISREVISEDWO, 0) != IFNULL(NEW.ISREVISEDWO, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISREVISEDWO',              \n" +
                "			CAST(OLD.isRevisedWO AS CHAR),CAST(NEW.isRevisedWO AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.ISOPERATIONSVERIFIED, 0) != IFNULL(NEW.ISOPERATIONSVERIFIED, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISOPERATIONSVERIFIED',              \n" +
                "			CAST(OLD.isOperationsVerified AS CHAR),CAST(NEW.isOperationsVerified AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.TERMINATEWOID, 0) != IFNULL(NEW.TERMINATEWOID, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'TERMINATEWOID',              \n" +
                "			CAST(OLD.terminateWOID AS CHAR),CAST(NEW.terminateWOID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);              \n" +
                "	END IF;              \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2601,'2.00','V1','change Trg_AU_WorkOrder, Sproc_GetAssemblySamplesList,Sproc_GetComponentMFGAliasSearch - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
        case 2601:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-07-2020 *********************************** */
                "drop procedure if exists `Sproc_CopyWorkorder`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyWorkorder`(                                                      \n" +
                "	IN woID INT(1),                                                      \n" +
                "	IN woNumber VARCHAR(11),                                                      \n" +
                "	IN ppartID INT,                                                       \n" +
                "	IN excessQty INT(1),                                                      \n" +
                "	IN buildQty INT(1),                                                      \n" +
                "	IN userID INT(1),                                                      \n" +
                "	IN ECORemark VARCHAR(100),                                                      \n" +
                "	IN FCORemark VARCHAR(100),                                                      \n" +
                "	IN isRevision INT(1),                                                \n" +
                "	IN woType INT(11),                                              \n" +
                "	IN ecoReqID INT(11),                            \n" +
                "	IN pcustomerID INT(11),                          \n" +
                "	IN pisRevisedWO INT (11),                          \n" +
                "	IN pterminateWOID INT (11),                          \n" +
                "	IN pterminateWOOPID INT (11),                          \n" +
                "	IN pisHotJob INT (11)  ,                          \n" +
                "	IN pinitialInternalVersion VARCHAR (50),                    \n" +
                "	IN pisCopyOPFrom VARCHAR(100),                    \n" +
                "	IN pParentWOID VARCHAR(100)                       \n" +
                ")  \n" +
                "BEGIN                                                      \n" +
                "DECLARE insertedWOID INT(1);                                  \n" +
                "DECLARE refPartID INT(1);                                                    \n" +
                "DECLARE insertedSubFormTransID INT(11);                                                    \n" +
                "DECLARE lv_subFormTransID_from INT(11);                                                    \n" +
                "DECLARE lv_parentDataElementID_from INT(11);                                                    \n" +
                "DECLARE lv_rowNumber_from INT(11);                                                    \n" +
                "DECLARE exit_loop_wo BOOLEAN DEFAULT FALSE;                                                        \n" +
                "DECLARE exit_loop_woop BOOLEAN DEFAULT FALSE;                      \n" +
                "DECLARE t_lv_woOPID INT(1);                       \n" +
                "DECLARE i INT DEFAULT 0;                        \n" +
                "DECLARE totWoOPIDs INT DEFAULT 0;                      \n" +
                "  \n" +
                "  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                                                      \n" +
                "BEGIN                                                      \n" +
                "	ROLLBACK;                                                      \n" +
                "	RESIGNAL;                                                      \n" +
                "END;                                                      \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                                                      \n" +
                "  BEGIN                                                      \n" +
                "	ROLLBACK;                                                      \n" +
                "	RESIGNAL;                                                      \n" +
                "END;                                                      \n" +
                "IF (EXISTS (SELECT 1 FROM workorder wo WHERE wo.deletedAt IS NULL AND wo.woNumber = woNumber))                                                      \n" +
                "THEN SELECT 'woNumber' errorCode;                                                      \n" +
                "ELSE                                                      \n" +
                "	START TRANSACTION;                                                      \n" +
                "  \n" +
                "    # copy workorder                                                       \n" +
                "  \n" +
                "	INSERT INTO workorder (`woNumber`,`partID`,`customerID`,`buildQty`,`startTime`,`endTime`,`masterTemplateID`,`refrenceWOID`,`createdAt`,`createdBy`                                                      \n" +
                "	,`woStatus`,`excessQty`,`isClusterApplied`,`RoHSStatusID`,`woVersion`, `isDeleted`,`ECORemark`,`FCORemark`                                                      \n" +
                "	,`isOperationTrackBySerialNo`,`isNoClean`,`isWatersoluble`,`isRevisedWO`,`woType`,`ecoReqID`,`locationDetails`, `terminateWOID`                        \n" +
                "	, `terminateWOOPID`, `isHotJob`, `initialInternalVersion`,isRackTrackingRequired,isStrictlyFollowRackValidation)                                                      \n" +
                "	SELECT woNumber `woNumber`, ppartID `partID`,pcustomerID `customerID`, buildQty `buildQty`,`startTime`,`endTime`,`masterTemplateID`,woID,                                                      \n" +
                "	fun_DatetimetoUTCDateTime() `createdAt`, userID `createdBy`,0 `woStatus`,excessQty `excessQty`,`isClusterApplied`,`RoHSStatusID`,'A' `woVersion`,                                                      \n" +
                "	`isDeleted`,ECORemark `ECORemark`,FCORemark `FCORemark`,`isOperationTrackBySerialNo`,`isNoClean`,                                                      \n" +
                "	`isWatersoluble`, IFNULL(pisRevisedWO,0) `isRevisedWO` , woType `woType` , ecoReqID `ecoReqID` , `locationDetails`, pterminateWOID `terminateWOID`                        \n" +
                "	, pterminateWOOPID `terminateWOOPID`, pisHotJob `isHotJob`, pinitialInternalVersion `initialInternalVersion`,isRackTrackingRequired,isStrictlyFollowRackValidation                                               \n" +
                "	FROM workorder wo WHERE wo.woID = woID AND wo.deletedAt IS NULL;                                                      \n" +
                "	SET insertedWOID = LAST_INSERT_ID();                                                      \n" +
                "  \n" +
                "    # copy part_assembly_certification                                                      \n" +
                "  \n" +
                "	INSERT INTO workorder_certification                                                      \n" +
                "	(`woID`,`certificateStandardID`,`createdAt`,`createdBy`,`classIDs`, `isDeleted`)                                        \n" +
                "	SELECT insertedWOID `woID`,`certificateStandardID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,`ClassID` `classIDs`, `isDeleted`                       \n" +
                "	FROM component_standard_details csd WHERE csd.componentID = ppartID AND csd.deletedAt IS NULL;                                                      \n" +
                "  \n" +
                "	IF(pParentWOID IS NOT NULL) THEN                \n" +
                "		#Insert parent woID details                \n" +
                "		INSERT INTO workorder_main_assembly_mapping_details                \n" +
                "		(refWOID,parentWOID,qty, isDeleted, createdAt,createdBy,updatedBy)                 \n" +
                "		SELECT wo.woID, pParentWOID, wo.buildQty, 0, wo.createdAt,wo.createdBy,wo.updatedBy FROM workorder wo WHERE wo.woID=insertedWOID;	                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	SET refPartID = 0;                          \n" +
                "	SELECT a.partID INTO refPartID FROM workorder a WHERE a.woID = woID;                          \n" +
                "  \n" +
                "	# copy workorder_operation                            \n" +
                "	IF (refPartID = ppartID) THEN                              \n" +
                "		INSERT INTO workorder_operation                                                      \n" +
                "		(`woID`,`opID`,`createdAt`,`createdBy`,`opName`,`opNumber`,                                                      \n" +
                "		`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,                                                      \n" +
                "		`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,                                                      \n" +
                "		    `cleaningType`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,opVersion,                        \n" +
                "		    `colorcode`,`tabLimitAtTraveler`,`isMoveToStock`,`mountingTypeID`,          \n" +
                "		    `isTrackBySerialNo`,`isTrackBySerialFromWOOP`,`isAllowFinalSerialMapping`,`isLoopOperation`,`isPlacementTracking` ,    \n" +
                "		     `isAllowMissingPartQty` , `isAllowBypassQty`)                                                      \n" +
                "		SELECT insertedWOID `woID`,`opID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,`opName`,`opNumber`,                                                      \n" +
                "			`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,                                                      \n" +
                "			`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,                                                      \n" +
                "		    `cleaningType`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,                                                      \n" +
                "		    'A' opVersion, `colorCode` , IFNULL(`tabLimitAtTraveler`,1) tabLimitAtTraveler, IFNULL(isMoveToStock,0) isMoveToStock, wo.mountingTypeID,          \n" +
                "		    `isTrackBySerialNo`,`isTrackBySerialFromWOOP`,`isAllowFinalSerialMapping`,`isLoopOperation`,`isPlacementTracking` ,    \n" +
                "		    `isAllowMissingPartQty` , `isAllowBypassQty`                                                \n" +
                "		 FROM workorder_operation wo WHERE wo.woID = woID AND wo.deletedAt IS NULL;                                     \n" +
                "	ELSE                           \n" +
                "		INSERT INTO workorder_operation                                                      \n" +
                "		(`woID`,`opID`,`createdAt`,`createdBy`,`opName`,`opNumber`,                                                      \n" +
                "		`opDescription`,`opDoes`,`opDonts`,`opOrder`,                          \n" +
                "		`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,                                                      \n" +
                "		`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,                                                      \n" +
                "		`cleaningType`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,opVersion,                        \n" +
                "		`colorcode`,`tabLimitAtTraveler`, `isMoveToStock`,`mountingTypeID`,          \n" +
                "		`isTrackBySerialNo`,`isTrackBySerialFromWOOP`,`isAllowFinalSerialMapping`,`isLoopOperation`,`isPlacementTracking` ,    \n" +
                "		`isAllowMissingPartQty` , `isAllowBypassQty` )                                                      \n" +
                "		SELECT insertedWOID `woID`,`opID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,`opName`,`opNumber`,                                                      \n" +
                "			`opDescription`,(SELECT mo.`opDoes` FROM operations mo WHERE mo.opID= wo.opID) AS `opDoes`,                          \n" +
                "			(SELECT m_op.`opDonts` FROM operations m_op WHERE m_op.opID= wo.opID) AS `opDonts`,`opOrder`,                          \n" +
                "			`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,                                                      \n" +
                "			`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,                                                      \n" +
                "			`cleaningType`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,                                                      \n" +
                "			'A' opVersion, `colorCode` , IFNULL(`tabLimitAtTraveler`,1) tabLimitAtTraveler, IFNULL(isMoveToStock,0) isMoveToStock,wo.mountingTypeID,          \n" +
                "			`isTrackBySerialNo`,`isTrackBySerialFromWOOP`,`isAllowFinalSerialMapping`,`isLoopOperation`,`isPlacementTracking` ,    \n" +
                "			`isAllowMissingPartQty` , `isAllowBypassQty`                                                \n" +
                "		FROM workorder_operation wo WHERE wo.woID = woID AND wo.deletedAt IS NULL;                           \n" +
                "	END IF;                              \n" +
                "  \n" +
                "	#update work order operation details for loop operation case          \n" +
                "	UPDATE workorder_operation AS newLoopOp, (SELECT loop_op.opID, (SELECT newwoop.woopid           \n" +
                "		FROM workorder_operation newwoop           \n" +
                "		WHERE newwoop.woID = insertedWOID           \n" +
                "			AND newwoop.opID=(SELECT opID FROM workorder_operation           \n" +
                "						WHERE woopID=loop_op.refLoopWOOPID)) newrefloopwoopid          \n" +
                "				FROM workorder_operation loop_op            \n" +
                "				WHERE loop_op.woID = woID AND isLoopOperation=1 AND deletedAt IS NULL) AS b          \n" +
                "	SET newLoopOp.refLoopWOOPID = b.newrefloopwoopid          \n" +
                "	WHERE newLoopOp.isLoopOperation=1          \n" +
                "	AND b.opID=newLoopOp.opID          \n" +
                "	AND newLoopOp.deletedAt IS NULL AND newLoopOp.woID=insertedWOID;          \n" +
                "	#update work order operation details for loop operation case          \n" +
                "	# copy workorder_cluster                                                      \n" +
                "  \n" +
                "    INSERT INTO workorder_cluster                                                      \n" +
                "	(`woID`,`clusterName`,`displayOrder`,`createdAt`,`createdBy`, `isDeleted`,`isParellelOperation`)                                                      \n" +
                "	SELECT insertedWOID `woID`,`clusterName`,`displayOrder`, fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`, `isDeleted`,`isParellelOperation` FROM workorder_cluster wc WHERE wc.woID = woID AND wc.deletedAt IS NULL;                                                      \n" +
                "  \n" +
                "    # copy workorder_operation_cluster                                                      \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_cluster (`clusterID`,`opID`,`displayOrder`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)                                                      \n" +
                "	SELECT                                                       \n" +
                "	(SELECT clusterID FROM workorder_cluster w_c WHERE w_c.woID = insertedWOID                                                       \n" +
                "		AND w_c.clusterName = (SELECT clusterName FROM workorder_cluster z WHERE z.clusterID = woc.clusterID                                                       \n" +
                "		AND z.woID = woID AND z.deletedAt IS NULL)) clusterID,                                                       \n" +
                "	woc.opID, woc.displayOrder, fun_DatetimetoUTCDateTime() `createdAt`, userID `createdBy`,                                                      \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = woc.opID) woOPID, `isDeleted`                                                      \n" +
                "	FROM workorder_operation_cluster woc                                                      \n" +
                "	WHERE woc.clusterID IN (SELECT clusterID FROM workorder_cluster wc WHERE wc.woID = woID AND wc.deletedAt IS NULL)                                                      \n" +
                "	AND woc.deletedAt IS NULL;                                                      \n" +
                "  \n" +
                "    # copy workorder_operation_part                                                      \n" +
                "  \n" +
                "	INSERT INTO workorder_operation_part                                                      \n" +
                "	(`woID`,`opID`,`partID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)                                                      \n" +
                "	SELECT insertedWOID `woID`,`opID`,`partID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,                                                      \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = wop.opID) woOPID	                                                      \n" +
                "	, `isDeleted` FROM workorder_operation_part wop                 \n" +
                "	WHERE wop.woID = woID AND wop.deletedAt IS NULL                \n" +
                "	AND partID NOT IN (                \n" +
                "				SELECT id FROM component                 \n" +
                "				WHERE (restrictUSEwithpermission = 1 OR restrictPackagingUseWithpermission = 1                 \n" +
                "					OR restrictUsePermanently = 1 OR restrictPackagingUsePermanently = 1)                \n" +
                "				AND deletedAt IS NULL                 \n" +
                "				AND id IN (SELECT partID FROM workorder_operation_part                 \n" +
                "						WHERE woID = woID AND deletedAt IS NULL)                \n" +
                "			 )                \n" +
                "	AND partID NOT IN (                \n" +
                "				SELECT mfgPNID FROM rfq_lineitems_alternatepart                 \n" +
                "				WHERE partID IN (SELECT partID FROM workorder WHERE woID = woID AND deletedAt IS NULL)                \n" +
                "				AND (restrictUseInBOMWithPermissionStep = 1 OR restrictUseInBOMStep = 1)                \n" +
                "				AND deletedAt IS NULL                 \n" +
                "				)                \n" +
                "	;                                                      \n" +
                "  \n" +
                "    # copy workorder_operation_equipment                                                      \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_equipment                                                      \n" +
                "	(`woID`,`opID`,`eqpID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`,`qty`)                                                      \n" +
                "	SELECT insertedWOID `woID`,`opID`,`eqpID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,                                                      \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = we.opID) woOPID, `isDeleted`,`qty`                                                      \n" +
                "	FROM workorder_operation_equipment we WHERE we.woID = woID AND we.deletedAt IS NULL;                                                      \n" +
                "  \n" +
                "    # copy workorder_operation_employee                                                      \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_employee                                                      \n" +
                "	(`woID`,`opID`,`employeeID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)                                                      \n" +
                "	SELECT insertedWOID `woID`,`opID`,`employeeID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,                                                      \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = we.opID) woOPID, `isDeleted`                                                       \n" +
                "	FROM workorder_operation_employee we WHERE we.woID = woID AND we.deletedAt IS NULL;                                                      \n" +
                "  \n" +
                "    # copy dataelement_transactionvalues for Work order other fields                                                     \n" +
                "  \n" +
                "	INSERT INTO dataelement_transactionvalues                                                      \n" +
                "	(`dataElementID`,`value`,`refTransID`,`entityID`,`createdAt`,`createdBy`,`refSubFormTransID`, `isDeleted`)                                                      \n" +
                "	SELECT `dataElementID`,`value`,insertedWOID `refTransID`,`entityID`,fun_DatetimetoUTCDateTime() `createdAt`,                                                      \n" +
                "		userID `createdBy`,`refSubFormTransID`, `isDeleted`                                                   \n" +
                "	FROM dataelement_transactionvalues dt WHERE dt.refTransID = woID                                                      \n" +
                "	AND entityID = -7                                                      \n" +
                "	AND dt.deletedAt IS NULL;                                                      \n" +
                "  \n" +
                "  \n" +
                "	# copy subform_transaction for Work order other fields multiple row sub-form	                                                  \n" +
                "  \n" +
                "	block1:BEGIN                                                       \n" +
                "  \n" +
                "		-- declare cusrsor subform_wo_from_data_cursor (from-to sub-form data copy)                                                  \n" +
                "		DECLARE subform_wo_from_data_cursor CURSOR FOR                                                   \n" +
                "			SELECT `subFormTransID`,`parentDataElementID`,`rowNumber`                                                  \n" +
                "			FROM subform_transaction WHERE deletedAt IS NULL                                                  \n" +
                "			AND subFormTransID IN (SELECT DISTINCT refSubFormTransID FROM dataelement_transactionvalues WHERE deletedAt IS NULL                                                      \n" +
                "						AND entityID = -7                                                \n" +
                "						AND refTransID = woID                                                   \n" +
                "						ORDER BY refSubFormTransID ASC		                                                  \n" +
                "					);                                                    \n" +
                "  \n" +
                "  \n" +
                "	-- declare exit loop if data not found                                                        \n" +
                "	DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop_wo = TRUE;                                                       \n" +
                "  \n" +
                "	OPEN subform_wo_from_data_cursor;                                                        \n" +
                "	-- loop item till all records found in string match of sub-form data element                                                  \n" +
                "  \n" +
                "	wo_sub_Form_loop:LOOP                                                    \n" +
                "  \n" +
                "		 FETCH subform_wo_from_data_cursor INTO lv_subFormTransID_from,lv_parentDataElementID_from,lv_rowNumber_from;                                                    \n" +
                "  \n" +
                "		 IF exit_loop_wo THEN                                                  \n" +
                "			LEAVE wo_sub_Form_loop;                                                      \n" +
                "		 END IF;                                                          \n" +
                "  \n" +
                "		/* first insert work order sub-form entry to update row reference in dataelement */	                                                  \n" +
                "		INSERT  INTO `subform_transaction`(`parentDataElementID`,`rowNumber`,`createdAt`,`createdBy`,`isDeleted`)                                                  \n" +
                "		VALUES (lv_parentDataElementID_from,lv_rowNumber_from,fun_DatetimetoUTCDateTime(), userID,0);                                                  \n" +
                "  \n" +
                "		SET insertedSubFormTransID = LAST_INSERT_ID();	                                                  \n" +
                "  \n" +
                "		/* update new copied work order sub-form reference */                                                  \n" +
                "		UPDATE dataelement_transactionvalues                                                  \n" +
                "		SET refSubFormTransID = insertedSubFormTransID                                                  \n" +
                "		WHERE deletedAt IS NULL                                                  \n" +
                "		AND refTransID = insertedWOID                                                  \n" +
                "		AND refSubFormTransID  = lv_subFormTransID_from;                                                  \n" +
                "  \n" +
                "		SET lv_subFormTransID_from = NULL;                                                  \n" +
                "		SET lv_parentDataElementID_from = NULL;                                                  \n" +
                "		SET lv_rowNumber_from = NULL;                                                  \n" +
                "		SET insertedSubFormTransID = NULL;                                                  \n" +
                "  \n" +
                "	END LOOP wo_sub_Form_loop;	                                                  \n" +
                "	CLOSE subform_wo_from_data_cursor;	                                                  \n" +
                "  \n" +
                "	END  block1;   				                                                    \n" +
                "  \n" +
                "  \n" +
                "	# copy workorder_operation_dataelement                                                      \n" +
                "  \n" +
                "  \n" +
                "	INSERT INTO `workorder_operation_dataelement`                                                      \n" +
                "    (`woID`,`opID`,`woOPID`,`dataElementID`,`displayOrder`,`createdBy`)                                                      \n" +
                "	SELECT insertedWOID `woID`,`opID`,(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = woopd.opID) woOPID,                                                      \n" +
                "	`dataElementID`,`displayOrder`,userID `createdBy`                                                      \n" +
                "	FROM workorder_operation_dataelement woopd WHERE woopd.woID = woID AND woopd.deletedAt IS NULL;                                                          \n" +
                "  \n" +
                "    # copy workorder_operation_equipment_dataelement                                                      \n" +
                "  \n" +
                "	INSERT INTO `workorder_operation_equipment_dataelement`                                                      \n" +
                "    (`woID`,`opID`,`eqpID`,`woOPID`,`dataElementID`,`displayOrder`,`createdBy`)                                                      \n" +
                "	SELECT insertedWOID `woID`,`opID`,`eqpID`,(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = wooped.opID) woOPID,                                                      \n" +
                "	`dataElementID`,`displayOrder`,userID `createdBy`                                                      \n" +
                "	FROM workorder_operation_equipment_dataelement wooped WHERE wooped.woID = woID AND wooped.deletedAt IS NULL;                                                     \n" +
                "  \n" +
                "  \n" +
                "    # copy dataelement_transactionvalues for Work order Operation other fields                                                     \n" +
                "  \n" +
                "	INSERT INTO dataelement_transactionvalues                                                      \n" +
                "	(`dataElementID`,`value`,`refTransID`,`entityID`,`createdAt`,`createdBy`,`refSubFormTransID`, `isDeleted`)                                                      \n" +
                "	SELECT `dataElementID`,`value`,                                                  \n" +
                "		 (SELECT woOPID FROM workorder_operation wopTo                                                    \n" +
                "		 WHERE wopTo.opID IN (SELECT wopFrom.opID FROM workorder_operation wopFrom                                                       \n" +
                "		 			WHERE wopFrom.woOPID = dt.refTransID )                                                  \n" +
                "		 AND wopTo.woID = insertedWOID) `refTransID`,                                                  \n" +
                "	`entityID`,fun_DatetimetoUTCDateTime() `createdAt`, userID `createdBy`,`refSubFormTransID`, `isDeleted`                                                   \n" +
                "	FROM dataelement_transactionvalues dt                                                   \n" +
                "	WHERE dt.refTransID IN ( SELECT woOPID FROM workorder_operation wop WHERE wop.deletedAt IS NULL                                                  \n" +
                "					AND wop.woID = woID )                                                  \n" +
                "	AND entityID = -1                                                      \n" +
                "	AND dt.deletedAt IS NULL;                                                   \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	# copy subform_transaction for Work order operation other fields multiple row sub-form	                                                  \n" +
                "  \n" +
                "	block2:BEGIN                                                       \n" +
                "  \n" +
                "	-- declare cusrsor subform_woop_from_data_cursor (from-to woop sub-form data copy)                                                  \n" +
                "	DECLARE subform_woop_from_data_cursor CURSOR FOR                                                   \n" +
                "		SELECT `subFormTransID`,`parentDataElementID`,`rowNumber`                                                  \n" +
                "		FROM subform_transaction WHERE deletedAt IS NULL                                                  \n" +
                "		AND subFormTransID IN (SELECT DISTINCT refSubFormTransID FROM dataelement_transactionvalues WHERE deletedAt IS NULL                                                      \n" +
                "					AND entityID = -1                                                 \n" +
                "					AND refTransID IN (SELECT woOPID FROM workorder_operation                                                   \n" +
                "						WHERE deletedAt IS NULL AND woID = woID )                                                   \n" +
                "					ORDER BY refSubFormTransID ASC		    	                                                  \n" +
                "			);                                                   \n" +
                "  \n" +
                "  \n" +
                "	-- declare exit loop if data not found                                                        \n" +
                "	DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop_woop = TRUE;                                                       \n" +
                "  \n" +
                "	OPEN subform_woop_from_data_cursor;                                                        \n" +
                "	-- loop item till all records found in string match of sub-form data element                                                  \n" +
                "  \n" +
                "	woop_sub_Form_loop:LOOP                                                    \n" +
                "  \n" +
                "		 FETCH subform_woop_from_data_cursor INTO lv_subFormTransID_from,lv_parentDataElementID_from,lv_rowNumber_from;                                                    \n" +
                "  \n" +
                "		 IF exit_loop_woop THEN                                                  \n" +
                "			LEAVE woop_sub_Form_loop;                                                          \n" +
                "		 END IF;                                                          \n" +
                "		/* first insert work order operation sub-form entry to update row reference in dataelement */	                                                  \n" +
                "		INSERT  INTO `subform_transaction`(`parentDataElementID`,`rowNumber`,`createdAt`,`createdBy`,`isDeleted`)                                                  \n" +
                "		VALUES (lv_parentDataElementID_from,lv_rowNumber_from,fun_DatetimetoUTCDateTime(), userID,0);                                                  \n" +
                "  \n" +
                "		SET insertedSubFormTransID = LAST_INSERT_ID();	                                                  \n" +
                "  \n" +
                "		/* update new copied work order operation sub-form reference  */                                                  \n" +
                "		SET @SQl1 = CONCAT('                                                  \n" +
                "				UPDATE dataelement_transactionvalues                                                  \n" +
                "				SET refSubFormTransID = ',insertedSubFormTransID,                                                  \n" +
                "				' WHERE deletedAt IS NULL                                                  \n" +
                "				AND refTransID IN (SELECT woOPID FROM workorder_operation                                                  \n" +
                "							WHERE deletedAt IS NULL AND woID = ',insertedWOID,' )                                                  \n" +
                "				AND refSubFormTransID  = ',lv_subFormTransID_from,';		                                                  \n" +
                "			');		                                                                                      \n" +
                "		PREPARE stmt1 FROM @SQL1;                                                                                      \n" +
                "		EXECUTE stmt1;     		                                                  \n" +
                "  \n" +
                "		SET lv_subFormTransID_from = NULL;                                                  \n" +
                "		SET lv_parentDataElementID_from = NULL;                                                  \n" +
                "		SET lv_rowNumber_from = NULL;                                                  \n" +
                "		SET insertedSubFormTransID = NULL;                                                  \n" +
                "  \n" +
                "	END LOOP woop_sub_Form_loop;	                                                  \n" +
                "	CLOSE subform_woop_from_data_cursor;	                                                  \n" +
                "  \n" +
                "	END  block2;                                                    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    # copy workorder_preprogcomp                                                      \n" +
                "  \n" +
                "    -- add component selected operation too while copy component added subquery                                                      \n" +
                "  \n" +
                "    INSERT INTO `workorder_preprogcomp`                                                      \n" +
                "    (`woID`,`mfgPNID`,`woMultiplier`,`displayOrder`,`createdBy`,`createdAt`,`programName`, `refStkWOOPID`)                                                      \n" +
                "	SELECT                                                       \n" +
                "    insertedWOID `woID`,`mfgPNID`,`woMultiplier`,`displayOrder`,userID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`,`programName`,                                                      \n" +
                "    (SELECT woOPID FROM                                                       \n" +
                "    workorder_operation wop                                                       \n" +
                "	WHERE wop.opID IN (                                                      \n" +
                "		SELECT opID FROM workorder_operation wo                                                       \n" +
                "			WHERE wo.woOPID = wp.refStkWOOPID                                                      \n" +
                "		)                                                      \n" +
                "	AND wop.woID = insertedWOID) refStkWOOPID                                                      \n" +
                "	FROM workorder_preprogcomp wp                                                       \n" +
                "    WHERE wp.woID = woID AND wp.deletedAt IS NULL;                                                        \n" +
                "  \n" +
                "    # copy workorder_preprogcomp_designator                                                      \n" +
                "  \n" +
                "    INSERT INTO `workorder_preprogcomp_designator`                                                      \n" +
                "	(`woID`,`designatorName`,`woPreProgCompID`,`createdBy`,`createdAt`)                                                      \n" +
                "    SELECT insertedWOID `woID`,`designatorName`,                                                      \n" +
                "	(SELECT wp.woPreProgCompID FROM workorder_preprogcomp wp WHERE wp.woID = insertedWOID AND wp.mfgPNID =                                                       \n" +
                "	(SELECT swp.mfgPNID FROM workorder_preprogcomp swp WHERE swp.woID = woID AND                                                      \n" +
                "    swp.woPreProgCompID = wpd.woPreProgCompID) LIMIT 1) woPreProgCompID,                                                      \n" +
                "	userID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`                                                      \n" +
                "	FROM workorder_preprogcomp_designator wpd                                                       \n" +
                "    WHERE wpd.woID = woID AND wpd.deletedAt IS NULL;                                                      \n" +
                "  \n" +
                "	/* IFNULL(isRevision,0) = 0 : isRevision means \"isNewRevision\"  */                      \n" +
                "    IF (pisCopyOPFrom=\"W\" OR pisCopyOPFrom=\"PW\") THEN     /* W : work order , PW : previous work order */                                                 \n" +
                "  \n" +
                "	 /* copy all op master folder to wo op level */                    \n" +
                "	INSERT INTO generic_folder                                                      \n" +
                "	(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                                      \n" +
                "	`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)                                                      \n" +
                "	SELECT  gf.gencFolderName, ( SELECT woopt1.woOPID FROM workorder_operation woopt1 WHERE woopt1.deletedAt IS NULL AND woopt1.woID = insertedWOID                    \n" +
                "					AND woopt1.opID = gf.refTransID) refTransID ,                     \n" +
                "	NULL, 'workorder_operation' gencFileOwnerType, gf.roleId, gf.refParentId,                                                      \n" +
                "	0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, userID createdBy, gf.gencFolderID copyGencFolderID ,                    \n" +
                "         gf.refTransID refCopyTransID, gf.gencFileOwnerType refCopyGencFileOwnerType                                     \n" +
                "	FROM generic_folder gf                    \n" +
                "	WHERE gf.refTransID IN (SELECT woopt7.opID FROM workorder_operation woopt7 WHERE woopt7.woID = woID)                    \n" +
                "	AND gf.gencFileOwnerType = 'operations'                      \n" +
                "	AND entityID = -1                    \n" +
                "	AND gf.deletedAt IS NULL ;                    \n" +
                "  \n" +
                "  \n" +
                "		# update refParentId - parent folder for work order each operation                    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_woOPIDs;                      \n" +
                "  \n" +
                "		 CREATE TEMPORARY TABLE temp_woOPIDs AS                     \n" +
                "		 SELECT DISTINCT refTransID FROM generic_folder WHERE deletedAt IS NULL                    \n" +
                "		 AND gencFileOwnerType = 'workorder_operation'                     \n" +
                "		 AND refTransID IN (SELECT woopt3.woOPID FROM workorder_operation woopt3                     \n" +
                "					WHERE woopt3.deletedAt IS NULL AND woopt3.woID = insertedWOID) ;                    \n" +
                "  \n" +
                "		SET totWoOPIDs = 0;                    \n" +
                "		SET i = 0;                    \n" +
                "		SELECT COUNT(*) FROM temp_woOPIDs INTO totWoOPIDs;                      \n" +
                "  \n" +
                "		 WHILE i < totWoOPIDs DO                         \n" +
                "		 	SET t_lv_woOPID = NULL;                    \n" +
                "		 	SELECT * INTO t_lv_woOPID FROM temp_woOPIDs LIMIT i,1 ;                    \n" +
                "  \n" +
                "			 UPDATE generic_folder gf1,                                                      \n" +
                "			 	(   SELECT a.gencFolderID, a.copyGencFolderID                                                      \n" +
                "			 		FROM generic_folder a WHERE a.refTransID = t_lv_woOPID AND a.gencFileOwnerType = 'workorder_operation'                                                      \n" +
                "			 	) gf2                                                      \n" +
                "			 	SET gf1.refParentId = gf2.gencFolderID                                                      \n" +
                "			 WHERE gf1.refParentId = gf2.copyGencFolderID                     \n" +
                "			 AND gf1.refTransID = t_lv_woOPID AND gf1.gencFileOwnerType = 'workorder_operation';                    \n" +
                "  \n" +
                "		 SET i = i + 1;                        \n" +
                "		 END WHILE;                        \n" +
                "  \n" +
                "  \n" +
                "	    # copy generic_folder from selected part/assembly level to work order level                    \n" +
                "		INSERT INTO generic_folder                                                      \n" +
                "				(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                                      \n" +
                "				`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)                                                      \n" +
                "		SELECT  a.gencFolderName, insertedWOID refTransID, '-7' , 'workorder' gencFileOwnerType, a.roleId, a.refParentId,                                                      \n" +
                "				0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, userID createdBy, a.gencFolderID copyGencFolderID ,                    \n" +
                "				a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType                                                     \n" +
                "		FROM generic_folder a                     \n" +
                "		WHERE a.refTransID = ppartID                     \n" +
                "		AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.deletedAt IS NULL;                                                      \n" +
                "  \n" +
                "		UPDATE generic_folder gf1,                                                      \n" +
                "			(   SELECT a.gencFolderID, a.copyGencFolderID                                                      \n" +
                "				FROM generic_folder a WHERE a.refTransID = insertedWOID AND a.gencFileOwnerType = 'workorder'                                                      \n" +
                "			) gf2                                                      \n" +
                "			SET gf1.refParentId = gf2.gencFolderID                                                      \n" +
                "			WHERE gf1.refParentId = gf2.copyGencFolderID                     \n" +
                "			AND gf1.refTransID = insertedWOID AND gf1.gencFileOwnerType = 'workorder';                     \n" +
                "  \n" +
                "	 END IF;                     \n" +
                "  \n" +
                "	IF (pisCopyOPFrom=\"PW\") THEN         /* PW : previous work order */                    \n" +
                "  \n" +
                "	   # copy generic_folder from old work order to new work order                                                     \n" +
                "	    INSERT INTO generic_folder                                                      \n" +
                "			(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                                      \n" +
                "			`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)                                                      \n" +
                "		SELECT  a.gencFolderName, insertedWOID refTransID, a.entityID, a.gencFileOwnerType, a.roleId, a.refParentId,                                                      \n" +
                "		0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, userID createdBy, a.gencFolderID copyGencFolderID ,                    \n" +
                "		a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType                                                      \n" +
                "		FROM generic_folder a                     \n" +
                "		WHERE a.refTransID = woID                     \n" +
                "		AND a.gencFileOwnerType = 'workorder'  AND a.entityID = '-7' AND a.deletedAt IS NULL                    \n" +
                "		AND ((a.refCopyTransID IS NULL AND a.refCopyGencFileOwnerType IS NULL)                    \n" +
                "			OR (a.refCopyGencFileOwnerType = 'workorder' AND a.refCopyTransID IS NOT NULL)) ;                    \n" +
                "  \n" +
                "	UPDATE generic_folder gf1,                                                      \n" +
                "		(   SELECT a.gencFolderID, a.copyGencFolderID                                                      \n" +
                "			FROM generic_folder a WHERE a.refTransID = insertedWOID AND a.gencFileOwnerType = 'workorder'                                                      \n" +
                "		) gf2                                                      \n" +
                "		SET gf1.refParentId = gf2.gencFolderID                                                      \n" +
                "		WHERE gf1.refParentId = gf2.copyGencFolderID AND gf1.refTransID = insertedWOID AND gf1.gencFileOwnerType = 'workorder';                                                      \n" +
                "  \n" +
                "  \n" +
                "	# copy generic_folder from old wo op to new wo op                     \n" +
                "  \n" +
                "	INSERT INTO generic_folder                                                      \n" +
                "		(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                                      \n" +
                "		`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)                                                      \n" +
                "		SELECT  gf.gencFolderName, ( SELECT woopt1.woOPID FROM workorder_operation woopt1 WHERE woopt1.deletedAt IS NULL AND woopt1.woID = insertedWOID                    \n" +
                "						AND woopt1.opID = (SELECT woopt2.opID FROM workorder_operation woopt2 WHERE woopt2.deletedAt IS NULL                     \n" +
                "									AND woopt2.woOPID = gf.refTransID)) refTransID ,                     \n" +
                "		gf.entityID, gf.gencFileOwnerType, gf.roleId, gf.refParentId,                                                      \n" +
                "		0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, userID createdBy, gf.gencFolderID copyGencFolderID ,                    \n" +
                "		gf.refTransID refCopyTransID, gf.gencFileOwnerType refCopyGencFileOwnerType                                                     \n" +
                "		FROM generic_folder gf                    \n" +
                "		WHERE gf.refTransID IN (SELECT woop.woOPID FROM workorder_operation woop WHERE woop.deletedAt IS NULL AND woop.woID = woID)                     \n" +
                "		AND gf.gencFileOwnerType = 'workorder_operation'                      \n" +
                "		AND gf.deletedAt IS NULL                    \n" +
                "		AND ((gf.refCopyTransID IS NULL AND gf.refCopyGencFileOwnerType IS NULL)                    \n" +
                "			OR (gf.refCopyGencFileOwnerType = 'workorder_operation' AND gf.refCopyTransID IS NOT NULL));                      \n" +
                "  \n" +
                "		# update refParentId - parent folder for work order each operation                    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_woOPIDs;                      \n" +
                "  \n" +
                "		 CREATE TEMPORARY TABLE temp_woOPIDs AS                     \n" +
                "		 SELECT DISTINCT refTransID FROM generic_folder WHERE deletedAt IS NULL                    \n" +
                "		 AND gencFileOwnerType = 'workorder_operation'                     \n" +
                "		 AND refTransID IN (SELECT woopt3.woOPID FROM workorder_operation woopt3 WHERE woopt3.deletedAt IS NULL AND woopt3.woID = insertedWOID) ;                    \n" +
                "  \n" +
                "		SET totWoOPIDs = 0;                    \n" +
                "		SET i = 0;                    \n" +
                "		 SELECT COUNT(*) FROM temp_woOPIDs INTO totWoOPIDs;                      \n" +
                "  \n" +
                "		 WHILE i < totWoOPIDs DO                         \n" +
                "		 	SET t_lv_woOPID = NULL;                    \n" +
                "		 	SELECT * INTO t_lv_woOPID FROM temp_woOPIDs LIMIT i,1 ;                    \n" +
                "  \n" +
                "			 UPDATE generic_folder gf1,                                                      \n" +
                "			 	(   SELECT a.gencFolderID, a.copyGencFolderID                                                      \n" +
                "			 		FROM generic_folder a WHERE a.refTransID = t_lv_woOPID AND a.gencFileOwnerType = 'workorder_operation'                                                      \n" +
                "			 	) gf2                                                      \n" +
                "			 	SET gf1.refParentId = gf2.gencFolderID                                                      \n" +
                "			 WHERE gf1.refParentId = gf2.copyGencFolderID                     \n" +
                "			 AND gf1.refTransID = t_lv_woOPID AND gf1.gencFileOwnerType = 'workorder_operation';                    \n" +
                "  \n" +
                "		 SET i = i + 1;                        \n" +
                "		 END WHILE;                    \n" +
                "  \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_woOPIDs;                     \n" +
                "  \n" +
                "	COMMIT;                                                      \n" +
                "	SELECT * FROM workorder wo WHERE wo.woID = insertedWOID;                                                      \n" +
                "  \n" +
                "END IF;                                                   \n" +
                "  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_GetWorkorderEmployeeDetailsByEmpCode`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorderEmployeeDetailsByEmpCode`(                                      \n" +
                "    IN pcodeDigest VARCHAR(1000),                                  \n" +
                "    IN pisUserAdmin INT(11))  \n" +
                "BEGIN                            \n" +
                "  \n" +
                "DECLARE whereClause1 VARCHAR(255) ;                                \n" +
                "DECLARE whereClause2 VARCHAR(255) ;                       \n" +
                "  \n" +
                "/************************ Save Employee Details in Temp Table ************************************/                      \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_employeedetails;                              \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_employeedetails (                              \n" +
                "		employeeID INT(11),		firstName VARCHAR(255),		lastName VARCHAR(255),                              \n" +
                "		profileImg VARCHAR(255),	deptName VARCHAR(255),		titleName VARCHAR(255)                              \n" +
                ");                              \n" +
                "INSERT INTO temp_sproc_employeedetails                         \n" +
                "SELECT emp.id, emp.firstname, emp.lastname,                               \n" +
                "			emp.profileimg, dep.deptName, gc.gencCategoryName                              \n" +
                "FROM employees emp                              \n" +
                "LEFT JOIN employee_department empdep ON emp.id = empdep.employeeID AND (empdep.deletedAt IS NULL AND empdep.isdefault = 1)                        \n" +
                "LEFT JOIN department dep ON empdep.departmentID = dep.deptID AND dep.deletedAt IS NULL                              \n" +
                "LEFT JOIN genericcategory gc ON gc.gencCategoryID = empdep.titleID AND (gc.deletedAt IS NULL)                       \n" +
                "WHERE emp.codeDigest=pcodeDigest AND emp.isActive = 1;                          \n" +
                "/************************ Create Temp Table for Workorder Details ************************************/                      \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workorderdetails;                              \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workorderdetails (                              \n" +
                "		woID INT(11),			woNumber VARCHAR(255),			woVersion VARCHAR(255),                              \n" +
                "		buildQty INT(11),		woStatus INT(100),			isClusterApplied VARCHAR(255),                              \n" +
                "		isStopWorkorder INT(11),		createdAt DATETIME,                              \n" +
                "		mfgPN VARCHAR(100),		PIDCode VARCHAR(50),			rev VARCHAR(10),                              \n" +
                "		nickName VARCHAR(50),		liveVersion VARCHAR(100),		imageURL VARCHAR(1000),                              \n" +
                "		documentPath VARCHAR(500),  	isCustom INT(1),         \n" +
                "		rohsStatus VARCHAR(50),		rohsIcon VARCHAR(255),			woAllStandardsWithClass VARCHAR(10000),                              \n" +
                "		poQty INT(11),			poNumber VARCHAR(1000), 		partID INT(11),            \n" +
                "		isAssigned INT(11)	                              \n" +
                ");                                    \n" +
                "/************************ save all workorder details in temp table for further use ************************************/                                \n" +
                "INSERT INTO temp_sproc_workorderdetails                              \n" +
                "SELECT 	wo.woID,		wo.woNumber,	 							wo.woVersion,                              \n" +
                "	wo.buildQty,		wo.woStatus,								wo.isClusterApplied,                               \n" +
                "	wo.isStopWorkorder,							wo.createdAt,                              \n" +
                "	c.mfgPN, 		c.PIDCode, 								c.rev,                               \n" +
                "	c.nickName,		c.liveVersion,								c.imageURL,                              \n" +
                "	c.documentPath,  	c.isCustom,        \n" +
                "	rohs.name, 		rohs.rohsIcon,								NULL,                              \n" +
                "	NULL,                   NULL,									wo.partID,            \n" +
                "	(SELECT COUNT(*) FROM workorder_operation_employee woemp WHERE woemp.woID = wo.woID AND woemp.deletedAt IS NULL                  \n" +
                "		AND woemp.employeeID IN (SELECT tempDet.employeeID FROM temp_sproc_employeedetails tempDet))						                             \n" +
                "FROM workorder wo                              \n" +
                "LEFT JOIN component c ON wo.partID = c.id                               \n" +
                "LEFT JOIN rfq_rohsmst rohs ON wo.RoHSStatusID=rohs.id                               \n" +
                "WHERE c.deletedAt IS NULL AND rohs.deletedAt IS NULL AND wo.deletedAt IS NULL AND wo.woStatus IN (1, 6);                  \n" +
                "/************************ 1. Get all employee details ************************************/                                \n" +
                "SELECT * FROM temp_sproc_employeedetails;                              \n" +
                "/************************ 1. Get all employee details ************************************/                                \n" +
                "/************************ save all salesorder details in temp table for further use ************************************/                       \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workordersalesorderdetails;                              \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workordersalesorderdetails (                              \n" +
                "		poQty INT(11),		refPONumber VARCHAR(10000), 		woID INT(11)                              \n" +
                ");                              \n" +
                "INSERT INTO temp_sproc_workordersalesorderdetails                              \n" +
                "SELECT SUM(poQty), GROUP_CONCAT(refPONumber), wosd.woID                               \n" +
                "FROM workorder_salesorder_details wosd                               \n" +
                "WHERE wosd.deletedAt IS NULL                               \n" +
                "AND wosd.woID IN (SELECT tempWO.woID FROM temp_sproc_workorderdetails tempWO)                              \n" +
                "GROUP BY wosd.woID;                         \n" +
                "/************************ save all certificate details in temp table for further use ************************************/                       \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_certificatedetails;                              \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_certificatedetails (                              \n" +
                "		woAllStandardsWithClass VARCHAR(10000),		woID INT(11)                              \n" +
                ");                              \n" +
                "INSERT INTO temp_sproc_certificatedetails                              \n" +
                "SELECT GROUP_CONCAT(cs.fullName ,' ' , CASE WHEN wc.classIDs IS NULL THEN ''                                  \n" +
                "	ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,'')) FROM standard_class WHERE classID = wc.classIDs) END                                  \n" +
                "	ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@') AS woAllStandardsWithClass, tempWO.woID                               \n" +
                "	FROM temp_sproc_workorderdetails tempWO                              \n" +
                "	LEFT JOIN workorder_certification wc ON wc.woID = tempWO.woID AND wc.deletedAt IS NULL                              \n" +
                "	LEFT JOIN certificate_standards cs ON cs.certificateStandardID = wc.certificateStandardID AND cs.deletedAt IS NULL             \n" +
                "GROUP BY tempWO.woID;              \n" +
                "/************************ 2.1 Update details in workorder details from certificate tables ************************************/                                \n" +
                "UPDATE temp_sproc_workorderdetails tempWO1,                               \n" +
                "(SELECT * FROM temp_sproc_certificatedetails) AS result                              \n" +
                "SET tempWO1.woAllStandardsWithClass = result.woAllStandardsWithClass            \n" +
                "WHERE tempWO1.woID = result.woID;                              \n" +
                "/************************ 2.2 Update details in workorder details from sales order tables ************************************/                                \n" +
                "UPDATE temp_sproc_workorderdetails tempWO1,                              \n" +
                "(SELECT * FROM temp_sproc_workordersalesorderdetails) AS result1                              \n" +
                "SET tempWO1.poQty = result1.poQty,                              \n" +
                "tempWO1.poNumber = result1.refPONumber                              \n" +
                "WHERE tempWO1.woID = result1.woID;                              \n" +
                "/************************ 2. Get all workroder list ************************************/                                \n" +
                "/************************ If user is not admin than whereclause ************************************/                            \n" +
                "IF pisUserAdmin = 1 THEN                              \n" +
                "	SET whereClause1 = '';                                \n" +
                "ELSE                              \n" +
                "	SET whereClause1 = ' AND isAssigned > 0';                              \n" +
                "END IF;                     \n" +
                "SET @SQLStatement1 = CONCAT(\"SELECT * FROM temp_sproc_workorderdetails where 1=1 \", whereClause1);                                                          \n" +
                "PREPARE query1 FROM @SQLStatement1;                                                          \n" +
                "EXECUTE query1;                                                          \n" +
                "DEALLOCATE PREPARE query1;                               \n" +
                "/************************ 2. Get all workroder list ************************************/                                \n" +
                "/************************ 3. Get all active operation list ************************************/                                \n" +
                "IF pisUserAdmin = 1 THEN                              \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';                                \n" +
                "ELSE                              \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';                              \n" +
                "END IF;                           \n" +
                "  \n" +
                "SET @SQLStatement2 = CONCAT(\"SELECT wte.woTransinoutID, wte.woID, wte.woOPID,       \n" +
                "fun_ConvertUTCDatetimeToDataKeyTimeZone(wte.checkinTime) checkinTime, wte.isPaused,                               \n" +
                "wtep.woTransemppausedID,fun_getwoAvailableRackDetails(wte.woOPID,wte.woID) totalAvailable,      \n" +
                "fun_ConvertUTCDatetimeToDataKeyTimeZone(wtep.pausedTime) pausedTime,                               \n" +
                "woop.opNumber, woop.opName, woop.opStatus, woop.opVersion, woop.isStopOperation, woop.isTeamOperation                              \n" +
                "FROM workorder_trans_empinout wte                              \n" +
                "LEFT JOIN workorder_operation woop ON woop.woOPID = wte.woOPID AND woop.deletedAt IS NULL                               \n" +
                "LEFT JOIN workorder_trans_emp_pausedet wtep ON wtep.woTransinoutID = wte.woTransinoutID  AND wtep.resumeTime IS NULL AND wtep.deletedAt IS NULL                              \n" +
                "WHERE wte.deletedAt IS NULL                               \n" +
                "AND wte.checkoutTime IS NULL                               \n" +
                " \", whereClause2, \" GROUP BY wte.woTransinoutID\");                                                      \n" +
                " /************************ 3. Get all active operation list ************************************/                                \n" +
                "  \n" +
                "PREPARE query2 FROM @SQLStatement2;                                       \n" +
                "EXECUTE query2;                                                          \n" +
                "DEALLOCATE PREPARE query2;                                \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_AddWorkorder`;  \n" +
                "CREATE PROCEDURE `Sproc_AddWorkorder`(                                                \n" +
                "	IN pcustomerID INT(11),                                                \n" +
                "	IN ppartID INT(11),                                                \n" +
                "	IN pRoHSStatusID INT(11),                                                 \n" +
                "	IN pwoNumber VARCHAR(1000),                                                \n" +
                "	IN pbuildQty INT(11),                                                \n" +
                "	IN pexcessQty INT(11),                                           \n" +
                "	IN pisRevision INT(1),                                                \n" +
                "	IN pwoType VARCHAR(100),                                                \n" +
                "	IN pisCopyOPFrom VARCHAR(100),                                                \n" +
                "	IN prefrenceWOID INT(11),                      \n" +
                "	IN pmasterTemplateID INT(11),                      \n" +
                "	IN puserID VARCHAR(500),                  \n" +
                "	IN pisRevisedWO INT(11),                  \n" +
                "	IN pterminateWOID INT(11) ,                  \n" +
                "	IN pterminateWOOPID INT(11),                  \n" +
                "	IN pisHotJob INT(11),                  \n" +
                "	IN pinitialInternalVersion VARCHAR(50)  ,                  \n" +
                "	IN pParentWOID INT(11)                    \n" +
                ")  \n" +
                "BEGIN                                                \n" +
                "DECLARE insertedWOID INT(11);                                            \n" +
                "DECLARE strOPID VARCHAR(10000);                                            \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                                                \n" +
                "BEGIN                                                \n" +
                "	ROLLBACK;                                                \n" +
                "	RESIGNAL;                                                \n" +
                "END;                                                \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                                                \n" +
                "  BEGIN                                                \n" +
                "	ROLLBACK;                                                \n" +
                "	RESIGNAL;                                                \n" +
                "END;                        \n" +
                "	IF (EXISTS (SELECT 1 FROM workorder wo WHERE wo.deletedAt IS NULL AND wo.woNumber = pwoNumber))                              \n" +
                "		THEN SELECT 'Work Order already exsist' errorCode;                              \n" +
                "	ELSE                        \n" +
                "		START TRANSACTION;                        \n" +
                "			-- select w.woNumber into refwoNumber from workorder w where w.woID = prefrenceWOID and w.deletedAt IS NULL;                      \n" +
                "			IF(prefrenceWOID IS NOT NULL AND (pisCopyOPFrom=\"W\" OR pisCopyOPFrom=\"PW\")) THEN                      \n" +
                "				IF (pisRevisedWO = 1) THEN                  \n" +
                "					# Update from work order status to 'Under Termination'                      \n" +
                "					UPDATE Workorder                   \n" +
                "					SET woStatus = 6,                   \n" +
                "					updatedAt =  fun_DatetimetoUTCDateTime(),                   \n" +
                "					updatedBy = puserID                   \n" +
                "					WHERE woID = pterminateWOID                   \n" +
                "					AND IFNULL(isDeleted, 0) = 0;                      \n" +
                "				END IF;                  \n" +
                "				CALL Sproc_CopyWorkorder(prefrenceWOID, pwoNumber, ppartID, pexcessQty, pbuildQty, puserID, NULL, NULL, pisRevision, pwoType, NULL, pcustomerID, pisRevisedWO, pterminateWOID, pterminateWOOPID, pisHotJob, pinitialInternalVersion,pisCopyOPFrom, pParentWOID);                      \n" +
                "			ELSE                       \n" +
                "				SET insertedWOID = NULL;                      \n" +
                "				SET strOPID = NULL;                     \n" +
                "  \n" +
                "				IF (pisRevisedWO = 1) THEN                  \n" +
                "					# Update from work order status to 'Under Termination'                      \n" +
                "					UPDATE Workorder                   \n" +
                "					SET woStatus = 6,                   \n" +
                "					updatedAt =  fun_DatetimetoUTCDateTime(),                   \n" +
                "					updatedBy = puserID                   \n" +
                "					WHERE woID = pterminateWOID                   \n" +
                "					AND IFNULL(isDeleted, 0) = 0;                      \n" +
                "				END IF;                  \n" +
                "  \n" +
                "				# add workorder                                                 \n" +
                "  \n" +
                "				INSERT INTO workorder (                      \n" +
                "				`woNumber`,			`partID`,		`customerID`,		`buildQty`,                      \n" +
                "				`startTime`,			`endTime`,		`masterTemplateID`,                      \n" +
                "				`refrenceWOID`,			`createdAt`,		`createdBy`,		`woStatus`,                      \n" +
                "				`excessQty`,			`isClusterApplied`,	`RoHSStatusID`,		`woVersion`,                       \n" +
                "				`isDeleted`,			`ECORemark`,		`FCORemark`  \n" +
                "				,`isOperationTrackBySerialNo`,	`isNoClean`,		`isWatersoluble`,	`isRevisedWO`,                      \n" +
                "				`woType`,			`updatedAt`,		`updatedBy`,		`terminateWOID`,                \n" +
                "				`terminateWOOPID`,		`isHotJob`,		`initialInternalVersion`)                       \n" +
                "  \n" +
                "				VALUES                       \n" +
                "				(                      \n" +
                "				pwoNumber,			ppartID,		pcustomerID,		pbuildQty,                      \n" +
                "				NULL,				NULL,			pmasterTemplateID,	                      \n" +
                "				prefrenceWOID,			fun_DatetimetoUTCDateTime(),		puserID,		0,                      \n" +
                "				pexcessQty,			0,			pRoHSStatusID,		'A',                      \n" +
                "				0,				NULL,			NULL,			           \n" +
                "				0,				0,			0,			IFNULL(pisRevisedWO,0),                      \n" +
                "				pwoType,			fun_DatetimetoUTCDateTime(),		puserID,		pterminateWOID,                \n" +
                "				pterminateWOOPID,		pisHotJob,		pinitialInternalVersion							                      \n" +
                "				);                                  \n" +
                "				-- get inseterted record from selected autocomplete                      \n" +
                "				-- SELECT LAST_INSERT_ID() into insertedWOID;                         \n" +
                "				SET insertedWOID = LAST_INSERT_ID();                                    \n" +
                "				SELECT w.woID AS woID FROM workorder w WHERE w.woID = insertedWOID;                 \n" +
                "  \n" +
                "				# copy part_assembly_certification              \n" +
                "				INSERT INTO workorder_certification                                              \n" +
                "				(`woID`,`certificateStandardID`,`createdAt`,`createdBy`,`classIDs`, `isDeleted`)                                \n" +
                "				SELECT insertedWOID `woID`,`certificateStandardID`,fun_DatetimetoUTCDateTime() `createdAt`,puserID `createdBy`,            \n" +
                "						`ClassID` `classIDs`, `isDeleted`               \n" +
                "				FROM component_standard_details csd WHERE csd.componentID = ppartID AND csd.deletedAt IS NULL;                       \n" +
                "  \n" +
                "				IF(pParentWOID IS NOT NULL) THEN      \n" +
                "					#Insert parent woID details      \n" +
                "					INSERT INTO workorder_main_assembly_mapping_details      \n" +
                "					(refWOID,parentWOID,qty, isDeleted, createdAt,createdBy,updatedBy)       \n" +
                "					SELECT wo.woID, pParentWOID, wo.buildQty, 0, wo.createdAt,wo.createdBy,wo.updatedBy FROM workorder wo WHERE wo.woID=insertedWOID;	      \n" +
                "				END IF;      \n" +
                "  \n" +
                "				# [S] - copy document_folder from selected part/assembly level to work order level          \n" +
                "				INSERT INTO generic_folder                                            \n" +
                "						(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                            \n" +
                "						`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)                                            \n" +
                "				SELECT  a.gencFolderName, insertedWOID refTransID, '-7' , 'workorder' gencFileOwnerType, a.roleId, a.refParentId,                                            \n" +
                "						0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, puserID createdBy, a.gencFolderID copyGencFolderID ,          \n" +
                "						a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType                                           \n" +
                "				FROM generic_folder a           \n" +
                "				WHERE a.refTransID = ppartID           \n" +
                "				AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.deletedAt IS NULL;                                            \n" +
                "  \n" +
                "				UPDATE generic_folder gf1,                                            \n" +
                "				(   SELECT a.gencFolderID, a.copyGencFolderID                                            \n" +
                "					FROM generic_folder a WHERE a.refTransID = insertedWOID       \n" +
                "					AND a.gencFileOwnerType = 'workorder' AND a.deletedAt IS NULL      \n" +
                "				) gf2                                            \n" +
                "				SET gf1.refParentId = gf2.gencFolderID                                            \n" +
                "				WHERE gf1.refParentId = gf2.copyGencFolderID           \n" +
                "				AND gf1.refTransID = insertedWOID       \n" +
                "				AND gf1.gencFileOwnerType = 'workorder' AND gf1.deletedAt IS NULL;           \n" +
                "			# [E] - copy generic_folder from selected part/assembly level to work order level          \n" +
                "  \n" +
                "				-- copy operation from operation master templates by pmasterTemplateID                      \n" +
                "				IF (insertedWOID > 0 AND pisCopyOPFrom = \"M\") THEN                       \n" +
                "					-- copy operation from workorder operation by prefrenceWOID                      \n" +
                "					-- if(pisCopyOPFrom = \"W\") then                      \n" +
                "					-- 	select GROUP_concat(wo.opID) into strOPID from workorder_operation wo where wo.woID=prefrenceWOID and wo.deletedAt IS NULL and IFNULL(wo.isDeleted,0)=0;                      \n" +
                "					-- 	IF (strOPID IS NOT NULL) THEN                      \n" +
                "					-- 		CALL Sproc_AddOperationInWorkOrder(insertedWOID, strOPID, puserID);                      \n" +
                "					-- 	END IF;                      \n" +
                "  \n" +
                "					SELECT GROUP_CONCAT(opmt.operationID) INTO strOPID FROM operation_master_templates opmt WHERE opmt.masterTemplateId=pmasterTemplateID AND opmt.deletedAt IS NULL AND IFNULL(opmt.isDeleted,0)=0;                      \n" +
                "					IF (strOPID IS NOT NULL) THEN                      \n" +
                "						CALL Sproc_AddOperationInWorkOrder(insertedWOID, strOPID, puserID);                      \n" +
                "					END IF;                      \n" +
                "				END IF;                      \n" +
                "			END IF;                      \n" +
                "		COMMIT;                       \n" +
                "	END IF;                       \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2602,'2.00','V1','change Sproc_AddWorkorder,Sproc_GetWorkorderEmployeeDetailsByEmpCode,Sproc_CopyWorkorder SP - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2602:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "CREATE TABLE `rfq_rohsmst_peer` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `rohsID` int(11) DEFAULT NULL,  \n" +
                "  `rohsPeerID` int(11) DEFAULT NULL,  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  `createByRoleId` int(11) DEFAULT NULL,  \n" +
                "  `updateByRoleId` int(11) DEFAULT NULL,  \n" +
                "  `deleteByRoleId` int(11) DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_rfq_rohsmst_rohsID` (`rohsID`),  \n" +
                "  KEY `FK_rfq_rohsmst_rohsPeerID` (`rohsPeerID`),  \n" +
                "  CONSTRAINT `FK_rfq_rohsmst_rohsID` FOREIGN KEY (`rohsID`) REFERENCES `rfq_rohsmst` (`id`),  \n" +
                "  CONSTRAINT `FK_rfq_rohsmst_rohsPeerID` FOREIGN KEY (`rohsPeerID`) REFERENCES `rfq_rohsmst` (`id`)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "INSERT INTO `table_mapping_details` (`tabel_name`, `display_page_name`) VALUES ('rfq_rohsmst', 'RoHS Status');  \n" +
                "INSERT INTO `table_mapping_details` (`tabel_name`, `display_page_name`) VALUES ('rfq_rohsmst_peer', 'RoHS Status');  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "ALTER TABLE rfq_rohsmst ADD COLUMN refParentID INT(11) DEFAULT NULL;  \n" +
                "  \n" +
                "ALTER TABLE rfq_rohsmst   \n" +
                "ADD CONSTRAINT `FK_rfq_rohsmst_refParentID`  \n" +
                "FOREIGN KEY (`refParentID`) REFERENCES `rfq_rohsmst` (`id`);  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2603,'2.00','V1','RoHS Master related change - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2603:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRohsList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRohsList`(                          \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "    IN psourceDetails VARCHAR(50)  \n" +
                "	)  \n" +
                "BEGIN                          \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);                          \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;   \n" +
                "        DECLARE vDateTimeDisplayFormat VARCHAR(100);           \n" +
                "		DECLARE vTimeZone VARCHAR(50);           \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;            \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempMoutingType;      \n" +
                "  \n" +
                "		SET @tempMountQuery=CONCAT(\"create temporary table if not exists  tempMoutingType as      \n" +
                "		select id,refTableName,refId,alias,isdeleted from component_fields_genericalias_mst where deletedAt is NULL\");       \n" +
                "  \n" +
                "		IF(psourceDetails IS NOT NULL OR psourceDetails!='')THEN      \n" +
                "			SET @tempMountQuery=CONCAT(@tempMountQuery,\" and id in (select refAliasID from  component_attributes_source_mapping where mfgcodeid in (\",psourceDetails,\"))\");      \n" +
                "  \n" +
                "		END IF;        \n" +
                "  \n" +
                "		        PREPARE queryMount FROM @tempMountQuery;                  \n" +
                "			EXECUTE queryMount;                  \n" +
                "			DEALLOCATE PREPARE queryMount;                    \n" +
                "  \n" +
                "		set @tempQuery = concat(\"SELECT ro.id,ro.name,ro.description,ro.isActive,ro.systemGenerated,ro.rohsIcon,ro.refMainCategoryID,  \n" +
                "        displayOrder,fun_getRoHSNameByID(ro.refParentID) parentRoHS,  \n" +
                "        (select group_concat(fun_getRoHSNameByID(rohsPeerID) separator '@@@') from rfq_rohsmst_peer  \n" +
                "		where rohsID = ro.id and isdeleted = 0) RoHSPeers,          \n" +
                "        (case when ro.systemGenerated = 1 then 'Yes' else 'No' end) SyatemGeneratedValue,  \n" +
                "        fun_getUserNameByID(ro.updatedBy) updatedby,  \n" +
                "        fun_getUserNameByID(ro.createdBy) createdby,  \n" +
                "		fun_getRoleByID(ro.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(ro.updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(ro.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(ro.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		(SELECT `name` FROM rfq_rohs_main_categorymst WHERE id=  ro.`refMainCategoryID`) AS category,  \n" +
                "		(CASE WHEN (ro.`isActive` = 0) THEN 'Disable'  \n" +
                "		WHEN (ro.`isActive` = 1) THEN 'Enable' ELSE '' END) AS `activeConvertedValue`,  \n" +
                "		(#SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist  \n" +
                "          SELECT GROUP_CONCAT(concat(alias,'@@@', ifnull((select GROUP_CONCAT(m.mfgCode SEPARATOR '#$#') AS mfgCodelist  \n" +
                "			  from component_attributes_source_mapping c1      \n" +
                "				join mfgcodemst m on m.id = c1.mfgCodeID      \n" +
                "				where c1.refAliasID = cfg.id      \n" +
                "				 GROUP BY refAliasID),''))  SEPARATOR '##') AS aliaslist      \n" +
                "						  FROM tempMoutingType cfg WHERE IFNULL(isdeleted,0) = 0       \n" +
                "						  AND  refTableName ='rfq_rohsmst'                 \n" +
                "          AND refId= ro.`id` GROUP BY refId ) AS aliaslist          \n" +
                "		FROM `rfq_rohsmst` ro         \n" +
                "		WHERE ro.`isDeleted` = 0 \");          \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                          \n" +
                "			SET pOrderBy = \"ORDER BY displayOrder IS NULL, displayOrder ASC ,name ASC\";    \n" +
                "		ELSE                          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                          \n" +
                "		END IF;	                          \n" +
                "  \n" +
                "  		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                          \n" +
                "			SET pWhereClause = '1=1' ;                          \n" +
                "		END IF;	                          \n" +
                "  \n" +
                "  		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                           \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                          \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                          \n" +
                "		ELSE	                          \n" +
                "			SET rowNumWhere = '';                          \n" +
                "		END IF;	                          \n" +
                "  \n" +
                "         IF(psourceDetails IS NOT NULL)THEN      \n" +
                "			SET pWhereClause=CONCAT(pWhereClause,\" and aliaslist is not null\");      \n" +
                "		END IF;      \n" +
                "  \n" +
                "		/* to get total count of rows */               \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);              \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;              \n" +
                "			EXECUTE query2;              \n" +
                "			DEALLOCATE PREPARE query2;            \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c              \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);              \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement2;              \n" +
                "			EXECUTE query1;              \n" +
                "			DEALLOCATE PREPARE query1;           \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_validateParentRohs`;  \n" +
                "CREATE PROCEDURE `Sproc_validateParentRohs`(  \n" +
                "	IN pRoHSID INT(11),  \n" +
                "	IN pParentRoHSID text  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		DROP temporary table if exists temp_ParentRoHS;  \n" +
                "		Create temporary table temp_ParentRoHS  \n" +
                "		WITH RECURSIVE cte AS  \n" +
                "        (  \n" +
                "			(  \n" +
                "				select id,refParentID from rfq_rohsmst where id = pParentRoHSID and isdeleted = 0  \n" +
                "			)  \n" +
                "			union all  \n" +
                "			(  \n" +
                "				select ro.id, ro.refParentID from rfq_rohsmst ro   \n" +
                "				join cte cte on cte.refParentID = ro.id  \n" +
                "				where ro.isdeleted = 0  \n" +
                "			)  \n" +
                "		)  \n" +
                "		SELECT cte.* FROM cte;  \n" +
                "select max(itemCount) itemCount from(   \n" +
                "		select Count(1) as itemCount from temp_ParentRoHS where (refParentID = pRoHSID or id = pRoHSID)  \n" +
                "        union all  \n" +
                "        select count(1) as itemCount from rfq_rohsmst_peer where rohsID = pRoHSID and rohsPeerID = pParentRoHSID and isdeleted = 0  \n" +
                "        )a;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_validatePeerRohs`;  \n" +
                "CREATE PROCEDURE `Sproc_validatePeerRohs`(  \n" +
                "	IN pRoHSID INT(11),  \n" +
                "	IN pPeerRoHSIDs text  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		DROP temporary table if exists temp_PeerRoHS;  \n" +
                "		set @tempPeerValidationQuery = concat(\"Create temporary table temp_PeerRoHS  \n" +
                "		WITH RECURSIVE cte AS  \n" +
                "        (  \n" +
                "			(  \n" +
                "				select id,refParentID from rfq_rohsmst where id in (\",pPeerRoHSIDs,\") and refParentID is not null and isdeleted = 0  \n" +
                "			)  \n" +
                "			union all  \n" +
                "			(  \n" +
                "				select ro.id, ro.refParentID from rfq_rohsmst ro   \n" +
                "				join cte cte on cte.refParentID = ro.id  \n" +
                "				where ro.isdeleted = 0  \n" +
                "			)  \n" +
                "		)  \n" +
                "		SELECT cte.* FROM cte\");  \n" +
                "  \n" +
                "			PREPARE query1 FROM @tempPeerValidationQuery;              \n" +
                "			EXECUTE query1;              \n" +
                "			DEALLOCATE PREPARE query1;   \n" +
                "        set @tempPeerCount = concat(\"select max(itemCount) itemCount from(   \n" +
                "		select Count(1) as itemCount from temp_PeerRoHS where (refParentID in  (\",pPeerRoHSIDs,\") or id in  (\",pPeerRoHSIDs,\"))  \n" +
                "        union all  \n" +
                "        select count(1) as itemCount from rfq_rohsmst_peer where rohsID in (\",pPeerRoHSIDs,\") and rohsPeerID = \",pRoHSID,\" and isdeleted = 0  \n" +
                "        )a\");  \n" +
                "  \n" +
                "			PREPARE query2 FROM @tempPeerCount;              \n" +
                "			EXECUTE query2;              \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRohsListForParentRoHS`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRohsListForParentRoHS`(                          \n" +
                "	IN pRoHSID int(11)  \n" +
                ")  \n" +
                "BEGIN                          \n" +
                "  \n" +
                "select * from rfq_rohsmst where isDeleted = 0  \n" +
                "and (case when pRoHSID is not null then  \n" +
                "		id != pRoHSID and refMainCategoryID = (select refMainCategoryID from rfq_rohsmst where id = pRoHSID)  \n" +
                "	else   \n" +
                "		1=1  \n" +
                "	end);    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_rfq_rohsmst`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_rfq_rohsmst`(                \n" +
                "	IN tableName VARCHAR(255),                \n" +
                "	IN IDs LONGTEXT,                \n" +
                "	IN deletedBy INT,                \n" +
                "	IN entityID VARCHAR(255),                \n" +
                "	IN refrenceIDs LONGTEXT,              \n" +
                "	IN countList INT,      \n" +
                "    IN pRoleID INT      \n" +
                "    )  \n" +
                "BEGIN             \n" +
                "DECLARE genericAliasIds VARCHAR(5000);         \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION                                  \n" +
                "	BEGIN                                  \n" +
                "		ROLLBACK;                                  \n" +
                "		RESIGNAL;                                  \n" +
                "	END;                                  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                                  \n" +
                "	BEGIN                                  \n" +
                "		ROLLBACK;                                  \n" +
                "		RESIGNAL;                                  \n" +
                "	END;            \n" +
                "	SET @SQL = CONCAT('            \n" +
                "				CREATE TEMPORARY TABLE if not exists tempRFQRoHSMst as                 \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND RoHSStatusID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL           \n" +
                "                (SELECT COUNT(1) as cnt, (case when COUNT(1) > 0 then \"rfq_rohsmst\" else \"\" end) as msg FROM rfq_rohsmst WHERE isdeleted = 0 IS NULL AND (refParentID IN(',IDs,')) LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,(CASE WHEN COUNT(1) > 0 then \"rfq_rohsmst_peer\" else \"\" end) as msg FROM rfq_rohsmst_peer WHERE isdeleted = 0 AND (rohsPeerID IN(',IDs,') or rohsID IN(',IDs,')) LIMIT 1)  \n" +
                "			');              \n" +
                "	PREPARE stmt FROM @SQL;                \n" +
                "	EXECUTE stmt;                \n" +
                "  \n" +
                "	IF (countList=FALSE) THEN                                                                       \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempRFQRoHSMst t)=0 THEN               \n" +
                "			SET @SQl1 = CONCAT('update rfq_rohsmst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');                \n" +
                "			PREPARE stmt1 FROM @SQL1;                \n" +
                "			EXECUTE stmt1;                \n" +
                "			SET @SQl2 = CONCAT('Update component_fields_genericalias_mst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refTableName = \"rfq_rohsmst\" AND  refId IN (',IDs,')');                \n" +
                "			PREPARE stmt2 FROM @SQl2;  			    \n" +
                "			SET @SQl3 = CONCAT('SELECT GROUP_CONCAT(id) into @genericAliasIds FROM component_fields_genericalias_mst where (refTableName = ''rfq_rohsmst'' AND refId IN(',IDs,'))');    \n" +
                "				PREPARE stmt3 FROM @SQl3;    \n" +
                "				EXECUTE stmt3;    \n" +
                "			SET @SQl4 = CONCAT('update  component_attributes_source_mapping set isDeleted=1,deletedBy=',deletedBy,',deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refAliasID IN (@genericAliasIds) and deletedAt is null');    \n" +
                "				PREPARE stmt4 FROM @SQl4;    \n" +
                "				EXECUTE stmt4;    \n" +
                "  \n" +
                "			EXECUTE stmt2;  \n" +
                "SELECT   \n" +
                "    *  \n" +
                "FROM  \n" +
                "    tempRFQRoHSMst  \n" +
                "WHERE  \n" +
                "    IFNULL(cnt, 0) > 0 AND msg IS NOT NULL  \n" +
                "        AND msg != '';                                                                        \n" +
                "                        COMMIT;            \n" +
                "		ELSE                                                                        \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempRFQRoHSMst t;                  \n" +
                "		END IF;                \n" +
                "	ELSE              \n" +
                "		SELECT 		t1.cnt,t2.display_page_name AS msg              \n" +
                "		FROM 		tempRFQRoHSMst t1              \n" +
                "		INNER JOIN 	table_mapping_details t2 ON t1.msg=t2.tabel_name              \n" +
                "		WHERE 		IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"              \n" +
                "		ORDER BY 	t2.display_page_name;                            \n" +
                "	END IF;               \n" +
                "  \n" +
                "	DROP TABLE tempRFQRoHSMst;                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCommonTypes`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCommonTypes`(                  \n" +
                "	IN ppageIndex INT(11),                  \n" +
                "	IN precordPerPage INT(11),                  \n" +
                "	IN pOrderBy VARCHAR(255),                  \n" +
                "	IN pWhereClause VARCHAR(16383),                  \n" +
                "	IN ptablename VARCHAR(100)                  \n" +
                "    )  \n" +
                "BEGIN                  \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;         \n" +
                "  SET SESSION group_concat_max_len = 1000000;                     \n" +
                "  \n" +
                "  IF(ptablename=\"rfq_parttypemst\")THEN                      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTableCommon AS                                \n" +
                "	SELECT rp.id,rp.partTypeName AS `name`,                      \n" +
                "  \n" +
                "		(#SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist    \n" +
                "		SELECT GROUP_CONCAT(concat(alias,'@@@', ifnull((select GROUP_CONCAT(m.mfgCode SEPARATOR '#$#') AS mfgCodelist    \n" +
                "		from component_attributes_source_mapping c1    \n" +
                "		join mfgcodemst m on m.id = c1.mfgCodeID    \n" +
                "		where c1.refAliasID = cfg.id	    \n" +
                "		GROUP BY refAliasID),'')) SEPARATOR '##') AS aliaslist    \n" +
                "		FROM component_fields_genericalias_mst cfg     \n" +
                "				WHERE IFNULL(isdeleted,0) = 0 AND refId =rp.id      \n" +
                "					AND refTableName='rfq_parttypemst' GROUP BY refId) AS aliaslist    \n" +
                "        ,rp.isActive,rp.systemGenerated,rp.isTemperatureSensitive                                \n" +
                "	FROM rfq_parttypemst rp	                            \n" +
                "	WHERE IFNULL(rp.isdeleted,0) = 0                            \n" +
                "	AND  rp.deletedAt IS NULL;                      \n" +
                "	END IF;                            \n" +
                "  \n" +
                "  IF(ptablename=\"rfq_mountingtypemst\")THEN                      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTableCommon AS                                \n" +
                "	SELECT rm.id,rm.name,                      \n" +
                "		(#SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist     \n" +
                "          SELECT GROUP_CONCAT(concat(alias,'@@@', ifnull((select GROUP_CONCAT(m.mfgCode SEPARATOR '#$#') AS mfgCodelist     \n" +
                "			  from component_attributes_source_mapping c1    \n" +
                "				join mfgcodemst m on m.id = c1.mfgCodeID    \n" +
                "				where c1.refAliasID = cfg.id    \n" +
                "				 GROUP BY refAliasID),''))  SEPARATOR '##') AS aliaslist    \n" +
                "                 FROM component_fields_genericalias_mst cfg     \n" +
                "			WHERE IFNULL(isdeleted,0) = 0 AND refId =rm.id      \n" +
                "				AND refTableName='rfq_mountingtypemst' GROUP BY refId) AS aliaslist,                  \n" +
                "        colorCode,rm.description,rm.isCountTypeEach,rm.isActive,rm.systemGenerated                  \n" +
                "	FROM rfq_mountingtypemst rm	                            \n" +
                "	WHERE IFNULL(rm.isdeleted,0) = 0                            \n" +
                "	AND  rm.deletedAt IS NULL;                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "    IF(ptablename=\"rfq_packagecasetypemst\")THEN                      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTableCommon AS                                \n" +
                "	SELECT rm.id,rm.name,                      \n" +
                "		(#SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist     \n" +
                "          SELECT GROUP_CONCAT(concat(alias,'@@@', ifnull((select GROUP_CONCAT(m.mfgCode SEPARATOR '#$#') AS mfgCodelist     \n" +
                "			  from component_attributes_source_mapping c1    \n" +
                "				join mfgcodemst m on m.id = c1.mfgCodeID    \n" +
                "				where c1.refAliasID = cfg.id    \n" +
                "				 GROUP BY refAliasID),''))  SEPARATOR '##') AS aliaslist	    \n" +
                "                 FROM component_fields_genericalias_mst cfg     \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND refId =rm.id     \n" +
                "			AND refTableName='rfq_packagecasetypemst' GROUP BY refId) AS aliaslist,                  \n" +
                "        rm.description,rm.isXrayRequired,rm.isActive,rm.systemGenerated                  \n" +
                "	FROM rfq_packagecasetypemst rm	                            \n" +
                "	WHERE IFNULL(rm.isdeleted,0) = 0                            \n" +
                "	AND  rm.deletedAt IS NULL;        \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF(ptablename=\"rfq_connectertypemst\")THEN                      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTableCommon AS                                \n" +
                "	SELECT rc.id,rc.name,                      \n" +
                "		(#SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist     \n" +
                "          SELECT GROUP_CONCAT(concat(alias,'@@@', ifnull((select GROUP_CONCAT(m.mfgCode SEPARATOR '#$#') AS mfgCodelist     \n" +
                "			  from component_attributes_source_mapping c1    \n" +
                "				join mfgcodemst m on m.id = c1.mfgCodeID    \n" +
                "				where c1.refAliasID = cfg.id    \n" +
                "				 GROUP BY refAliasID),''))  SEPARATOR '##') AS aliaslist	    \n" +
                "                 FROM component_fields_genericalias_mst cfg     \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND refId =rc.id      \n" +
                "        AND refTableName='rfq_connectertypemst' GROUP BY refId) AS aliaslist,rc.description,          \n" +
                "		rc.isActive,rc.systemGenerated                                \n" +
                "	FROM rfq_connectertypemst rc	                            \n" +
                "	WHERE IFNULL(rc.isdeleted,0) = 0                            \n" +
                "	AND  rc.deletedAt IS NULL;                      \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF(ptablename=\"component_packagingmst\")THEN                      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTableCommon AS                                \n" +
                "	SELECT rc.id,rc.name,                      \n" +
                "		(#SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist     \n" +
                "          SELECT GROUP_CONCAT(concat(alias,'@@@', ifnull((select GROUP_CONCAT(m.mfgCode SEPARATOR '#$#') AS mfgCodelist     \n" +
                "			  from component_attributes_source_mapping c1    \n" +
                "				join mfgcodemst m on m.id = c1.mfgCodeID    \n" +
                "				where c1.refAliasID = cfg.id    \n" +
                "				 GROUP BY refAliasID),''))  SEPARATOR '##') AS aliaslist    \n" +
                "                 FROM component_fields_genericalias_mst cfg     \n" +
                "				WHERE IFNULL(isdeleted,0) = 0 AND refId =rc.id      \n" +
                "				AND refTableName='component_packagingmst' GROUP BY refId) AS aliaslist ,          \n" +
                "		rc.isActive,rc.systemGenerated                              \n" +
                "	FROM component_packagingmst rc	                            \n" +
                "	WHERE IFNULL(rc.isdeleted,0) = 0                            \n" +
                "	AND  rc.deletedAt IS NULL;                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF(ptablename=\"rfq_rohsmst\")THEN                      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTableCommon AS                                \n" +
                "	SELECT rr.id,rr.name,rr.refMainCategoryID, rc.name AS category,  \n" +
                "    fun_getRoHSNameByID(rr.refParentID) parentRoHS,  \n" +
                "	(select group_concat(fun_getRoHSNameByID(rohsPeerID) separator '@@@') from rfq_rohsmst_peer  \n" +
                "	where rohsID = rr.id and isdeleted = 0) RoHSPeers,  \n" +
                "		(#SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist     \n" +
                "          SELECT GROUP_CONCAT(concat(alias,'@@@', ifnull((select GROUP_CONCAT(m.mfgCode SEPARATOR '#$#') AS mfgCodelist     \n" +
                "			  from component_attributes_source_mapping c1    \n" +
                "				join mfgcodemst m on m.id = c1.mfgCodeID    \n" +
                "				where c1.refAliasID = cfg.id    \n" +
                "				 GROUP BY refAliasID),''))  SEPARATOR '##') AS aliaslist    \n" +
                "                 FROM component_fields_genericalias_mst cfg     \n" +
                "				WHERE IFNULL(isdeleted,0) = 0 AND refId =rr.id     \n" +
                "				AND refTableName='rfq_rohsmst' GROUP BY refId) AS aliaslist,          \n" +
                "		rr.description,rr.isActive,rr.systemGenerated,rohsIcon                                \n" +
                "	FROM rfq_rohsmst rr	            \n" +
                "	LEFT OUTER JOIN rfq_rohs_main_categorymst rc ON rc.id = rr.refMainCategoryID                            \n" +
                "	WHERE IFNULL(rr.isdeleted,0) = 0                            \n" +
                "	AND  rr.deletedAt IS NULL;                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF(ptablename=\"uoms\")THEN                    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTableCommon AS                              \n" +
                "	SELECT u.id,u.unitName AS `name`,u.abbreviation,                    \n" +
                "		(SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist FROM component_fields_genericalias_mst                               \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND refId =u.id  AND refTableName='uoms' GROUP BY refId) AS aliaslist                              \n" +
                "	FROM uoms u	                          \n" +
                "	WHERE IFNULL(u.isdeleted,0) = 0                          \n" +
                "	AND  u.deletedAt IS NULL;                    \n" +
                "	END IF;           \n" +
                "  \n" +
                "	IF(ptablename=\"component_partstatusmst\")THEN                      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTableCommon AS                                \n" +
                "	SELECT cp.id,cp.`name`,                      \n" +
                "		(#SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist     \n" +
                "          SELECT GROUP_CONCAT(concat(alias,'@@@', ifnull((select GROUP_CONCAT(m.mfgCode SEPARATOR '#$#') AS mfgCodelist     \n" +
                "			  from component_attributes_source_mapping c1    \n" +
                "				join mfgcodemst m on m.id = c1.mfgCodeID    \n" +
                "				where c1.refAliasID = cfg.id    \n" +
                "				 GROUP BY refAliasID),''))  SEPARATOR '##') AS aliaslist    \n" +
                "                 FROM component_fields_genericalias_mst cfg     \n" +
                "				WHERE IFNULL(isdeleted,0) = 0 AND refId =cp.id      \n" +
                "				AND refTableName='component_partstatusmst' GROUP BY refId) AS aliaslist,cp.colorCode ,          \n" +
                "		cp.isActive,cp.systemGenerated                               \n" +
                "	FROM component_partstatusmst cp	                            \n" +
                "	WHERE cp.isdeleted = 0                            \n" +
                "	AND  cp.deletedAt IS NULL;                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "  \n" +
                "      IF(ptablename=\"countrymst\")THEN                    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTableCommon AS                  \n" +
                "         SELECT cm.countryID,cm.countryName AS `name`,                    \n" +
                "		(SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist FROM component_fields_genericalias_mst                               \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND refId =cm.countryID  AND refTableName='countrymst' GROUP BY refId) AS aliaslist                              \n" +
                "	FROM countrymst cm	                          \n" +
                "	WHERE IFNULL(cm.isdeleted,0) = 0                          \n" +
                "	AND  cm.deletedAt IS NULL;                    \n" +
                "       END IF;     \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                \n" +
                "	ELSE                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                             \n" +
                "		SET pWhereClause = '1=1' ;                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                \n" +
                "	ELSE	                                \n" +
                "		SET rowNumWhere = '';                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "	/* to get total count of rows */                                \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM tempTableCommon where \", pWhereClause );                           \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                \n" +
                "	EXECUTE query1;                                \n" +
                "	DEALLOCATE PREPARE query1;                                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM tempTableCommon where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                \n" +
                "	EXECUTE query2;                                \n" +
                "	DEALLOCATE PREPARE query2;                                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempTableCommon;                              \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2604,'2.00','V1','RFQ Filter related change - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2604:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_verify_UID` ;  \n" +
                "CREATE PROCEDURE `Sproc_verify_UID`(                   \n" +
                "	IN pVerificationType VARCHAR(100),                   \n" +
                "	IN pUID VARCHAR(14),                   \n" +
                "	IN pScanMFGPNLabel VARCHAR(1000),                   \n" +
                "	IN pScanPID VARCHAR(50),                   \n" +
                "	IN pScanCPN VARCHAR(50),                   \n" +
                "	IN pScanUID VARCHAR(14),                   \n" +
                "	IN pScanMFGPN VARCHAR(100),                   \n" +
                "	IN pCreatedBy VARCHAR(255),    \n" +
                "	IN pMFRId INT(11),    \n" +
                "	IN pBarcodeId INT(11)                   \n" +
                ")  \n" +
                "BEGIN                   \n" +
                "	DECLARE uidVerified TINYINT(1) DEFAULT 0;                   \n" +
                "	DECLARE v_mfgcodeID INT(11);	                \n" +
                "	DECLARE v_mfgPN VARCHAR(100);                \n" +
                " 	DECLARE v_PIDCode VARCHAR(100);	                \n" +
                "	DECLARE v_RoHSStatusID INT(11);		                \n" +
                "	DECLARE v_compStockID INT(11);	                \n" +
                "	DECLARE	v_pkgQty DECIMAL(18,8);	                \n" +
                "	DECLARE v_pkgUnit DECIMAL(18,8);                \n" +
                " 	DECLARE v_uom INT(11);                   \n" +
                " 	DECLARE v_string2PartID INT(11);	                \n" +
                " 	DECLARE v_scanString2MFG VARCHAR(100);                \n" +
                " 	DECLARE v_scanString2MFGPNID VARCHAR(100);                   \n" +
                " 	DECLARE v_packingSlipId INT(11);                \n" +
                "	DECLARE	v_packingSlipNumber VARCHAR(255);                \n" +
                "	DECLARE	v_packingSlipSupplierId INT(11);                \n" +
                "	DECLARE	v_packingSlipSupplierCode VARCHAR(10);                \n" +
                "	DECLARE	v_cOfCValue VARCHAR(100);              \n" +
                "	DECLARE v_isCustom TINYINT(1) DEFAULT 0;          \n" +
                "	DECLARE v_componentId INT;      \n" +
                "	DECLARE v_successId INT;      \n" +
                "	DECLARE v_refcompid INT;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempUIDDet;                   \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempUIDHistory;                   \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDDet AS                   \n" +
                "		SELECT 		*,                \n" +
                "				fun_getMfgCodeByID(packingSlipSupplierId) supplierCode                \n" +
                "		FROM 		(                \n" +
                "					SELECT 		*,	                \n" +
                "							fun_getPackingSlipNumberById(packingSlipId) packingSlipNumber,                 \n" +
                "							fun_getPackingSlipSupplierIdBySlipId(packingSlipId) packingSlipSupplierId                \n" +
                "					FROM 		(                \n" +
                "								SELECT 		cs.id, 		cs.uid, 		cs.scanlabel, 	cs.refcompid, 	c.mfgcodeID, 	c.mfgPN,                   \n" +
                "										c.PIDCode, 	c.RoHSStatusID,		cs.pkgQty,	cs.pkgUnit,	cs.uom,        c.isCustom,        \n" +
                "										fun_getUMIDPackingSlipIdByID(cs.id) packingSlipId,                \n" +
                "										(             \n" +
                "											CASE             \n" +
                "												WHEN cs.stockInventoryType = 'NI' THEN            \n" +
                "													fun_getUMIDPackingSlipNameByID(cs.id)             \n" +
                "												ELSE            \n" +
                "													cs.uid            \n" +
                "											END            \n" +
                "										) cOfCValue            \n" +
                "								FROM 		component_sid_stock cs                   \n" +
                "								INNER JOIN 	component c ON cs.refcompid = c.id                   \n" +
                "								WHERE 		cs.uid = pUID                   \n" +
                "								AND 		cs.isDeleted = 0                   \n" +
                "								LIMIT 		1                \n" +
                "							) AS a                \n" +
                "				) AS b;                \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDHistory (                   \n" +
                "		scanString1 VARCHAR(255) NULL,                 \n" +
                "		scanString2 VARCHAR(255) NULL,                   \n" +
                "		string1PartID INT(11) NULL,	                \n" +
                "		scanString1MFG VARCHAR(100) NULL,                 \n" +
                "		scanString1MFGPNID VARCHAR(100) NULL,                   \n" +
                "		string2PartID INT(11) NULL,	                \n" +
                "		scanString2MFG VARCHAR(100) NULL,                 \n" +
                "		scanString2MFGPNID VARCHAR(100) NULL,                   \n" +
                "		STATUS VARCHAR(100) NULL,                 \n" +
                "		packingSlipId INT(11) NULL,                \n" +
                "		packingSlipNumber VARCHAR(255) NULL,                \n" +
                "		packingSlipSupplierId INT(11) NULL,                \n" +
                "		packingSlipSupplierCode VARCHAR(10) NULL,                \n" +
                "		cOfCValue VARCHAR(100) NULL,                \n" +
                "		isDeleted TINYINT(1) DEFAULT '0',                   \n" +
                "		createdBy VARCHAR(255) NULL,                 \n" +
                "		createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP                \n" +
                "	);                   \n" +
                "  \n" +
                "	INSERT INTO `tempUIDHistory`(	`scanString1`, 		`scanString2`, 		`string1PartID`,                   \n" +
                "					`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,	                  \n" +
                "					`scanString2MFG`,	`scanString2MFGPNID`,	`status`,                \n" +
                "					`packingSlipId`,	`packingSlipNumber`,	`packingSlipSupplierId`,                \n" +
                "					`packingSlipSupplierCode`,			`cOfCValue`)                   \n" +
                "	SELECT 	pUID 				scanString1, 			IFNULL(pScanMFGPNLabel,		IFNULL(pScanPID,IFNULL(pScanCPN,IFNULL(pScanUID,pScanMFGPN)))) scanString2,	                  \n" +
                "		UH.refcompid string1PartID, 	UH.mfgcodeID scanString1MFG, 	UH.mfgPN scanString1MFGPNID,                   \n" +
                "		NULL string2PartID,                   \n" +
                "		NULL scanString2MFG,		NULL scanString2MFGPNID,	NULL STATUS,                \n" +
                "		packingSlipId,			packingSlipNumber,		packingSlipSupplierId,                \n" +
                "		supplierCode,			cOfCValue                \n" +
                "	FROM 	tempUIDDet UH;                   \n" +
                "  \n" +
                "	SELECT 	u.mfgcodeID,	u.mfgPN,	u.PIDCode,	u.RoHSStatusID,		u.id,		u.pkgQty,	u.pkgUnit,	u.uom,		u.packingSlipId,	u.packingSlipNumber, 	u.packingSlipSupplierId, 	u.supplierCode, 		u.cOfCValue,	u.isCustom,	u.refcompid        \n" +
                "	INTO 	v_mfgcodeID,	v_mfgPN, 	v_PIDCode,	v_RoHSStatusID,		v_compStockID,	v_pkgQty,	v_pkgUnit, 	v_uom,   	v_packingSlipId,	v_packingSlipNumber,	v_packingSlipSupplierId,	v_packingSlipSupplierCode,	v_cOfCValue, 	v_isCustom,	v_refcompid	                \n" +
                "	FROM 	tempUIDDet u;                  \n" +
                "  \n" +
                "	IF EXISTS(SELECT 1 FROM tempUIDDet LIMIT 1) THEN                   \n" +
                "		IF (pScanMFGPNLabel IS NOT NULL) THEN                   \n" +
                "			-- IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.scanlabel = pScanMFGPNLabel LIMIT 1) THEN                   \n" +
                "				CALL Sproc_MatchBarCodeAndSaveDelimiters (pScanMFGPNLabel,1,NULL,NULL,NULL,pMFRId,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,pBarcodeId,NULL);      \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_ScanUIDValidationDetail;                   \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_ScanUIDValidationDetail AS      \n" +
                "				SELECT * FROM tempUIDSuccessDetail;      \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_ScanUIDComponentDetail;                   \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_ScanUIDComponentDetail AS      \n" +
                "				SELECT * FROM tempUIDComponentDetail;	      \n" +
                "				SELECT IsSuccess INTO v_successId FROM temp_ScanUIDValidationDetail LIMIT 1;      \n" +
                "				IF (v_successId = 1) THEN      \n" +
                "					SELECT id INTO v_componentId FROM temp_ScanUIDComponentDetail LIMIT 1;      \n" +
                "					IF (v_componentId = v_refcompid) THEN      \n" +
                "						SET uidVerified = 1;      \n" +
                "					END IF;     \n" +
                "				ELSE     \n" +
                "					SET uidVerified = 0;      \n" +
                "				END IF;      \n" +
                "			-- END IF;                   \n" +
                "		ELSEIF (pScanPID IS NOT NULL OR pScanCPN IS NOT NULL) THEN                   \n" +
                "			SELECT 	c.id, 		c.mfgcodeID, 		c.mfgPN                   \n" +
                "			INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID                   \n" +
                "			FROM 	component c                   \n" +
                "			WHERE 	c.PIDCode = IFNULL(pScanPID,pScanCPN);                   \n" +
                "			IF EXISTS (SELECT 1 FROM component c WHERE c.PIDCode = IFNULL(pScanPID,pScanCPN) AND c.mfgcodeID = v_mfgcodeID AND c.mfgPN = v_mfgPN LIMIT 1) THEN                   \n" +
                "				SET uidVerified = 1;                   \n" +
                "			END IF	;                   \n" +
                "		ELSEIF (pUID = pScanUID) THEN                   \n" +
                "			SELECT 	c.refcompid, 		c.mfgcodeID, 		c.mfgPN                   \n" +
                "			INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID                   \n" +
                "			FROM 	tempUIDDet c;                   \n" +
                "			SET uidVerified = 1;                   \n" +
                "		ELSEIF (pScanMFGPN IS NOT NULL) THEN                   \n" +
                "			IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.mfgPN = pScanMFGPN LIMIT 1) THEN                   \n" +
                "				SELECT 	c.refcompid, 	c.mfgcodeID, 		c.mfgPN                   \n" +
                "				INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID                   \n" +
                "				FROM 	tempUIDDet c;                   \n" +
                "				SET uidVerified = 1;                   \n" +
                "			ELSE                   \n" +
                "				SELECT 	c.id, 			c.mfgcodeID, 		c.mfgPN                   \n" +
                "				INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID                   \n" +
                "				FROM 	component c                   \n" +
                "				WHERE 	c.mfgPN = pScanMFGPN;                   \n" +
                "			END IF;                   \n" +
                "		END IF;                   \n" +
                "		UPDATE 	tempUIDHistory                   \n" +
                "		SET 	string2PartID = v_string2PartID,                   \n" +
                "			scanString2MFG = v_scanString2MFG,                   \n" +
                "			scanString2MFGPNID = v_scanString2MFGPNID;                   \n" +
                "	ELSE                   \n" +
                "		INSERT INTO `tempUIDHistory`(`scanString1`, `scanString2`)                   \n" +
                "				VALUES (pUID, IFNULL(pScanMFGPNLabel,IFNULL(pScanPID,IFNULL(pScanCPN,pScanUID))));                   \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	INSERT INTO `uid_verification_history`(	`scanString1`,		`scanString2`,		`verificationType`,                   \n" +
                "						`string1PartID`,	`scanString1MFG`,	`scanString1MFGPNID`,	                  \n" +
                "						`string2PartID`,	`scanString2MFG`,	`scanString2MFGPNID`,	                  \n" +
                "						`status`,	                  \n" +
                "						`isDeleted`,		`createdBy`,		`createdAt`)                   \n" +
                "	SELECT 	UH.scanString1, 	UH.scanString2,		pVerificationType,                   \n" +
                "		UH.string1PartID, 	(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString1MFG),	                \n" +
                "		UH.scanString1MFGPNID,	UH.string2PartID,	                \n" +
                "		(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString2MFG),	UH.scanString2MFGPNID,	                  \n" +
                "		CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,                   \n" +
                "		0,	IFNULL(pCreatedBy,''),	fun_DatetimetoUTCDateTime() `createdAt`                   \n" +
                "	FROM 	tempUIDHistory UH;                   \n" +
                "  \n" +
                "	SELECT 	*, 			v_mfgcodeID mfgcodeID, 		(SELECT m.mfgName FROM mfgcodemst m WHERE m.id = v_mfgcodeID) mfgName,                   \n" +
                "		v_PIDCode PIDCode, 	v_RoHSStatusID RoHSStatusID, 	v_compStockID compStockID,                   \n" +
                "		v_pkgQty pkgQty,	v_pkgUnit pkgUnit, 		fun_getUnitNameByID(v_uom) uom,                \n" +
                "		v_packingSlipId packingSlipId,				v_packingSlipNumber packingSlipNumber,                \n" +
                "		v_packingSlipSupplierId packingSlipSupplierId,		v_packingSlipSupplierCode packingSlipSupplierCode,                \n" +
                "		v_cOfCValue cOfCValue,	v_isCustom isCustom                \n" +
                "	FROM 	uid_verification_history                   \n" +
                "	WHERE 	id = LAST_INSERT_ID();	     \n" +
                "  \n" +
                "	IF (pScanMFGPNLabel IS NOT NULL AND uidVerified = 0) THEN       \n" +
                "		SELECT * FROM tempUIDSuccessDetail;    \n" +
                "	ELSE     \n" +
                "		SELECT 1;    \n" +
                "	END IF;                 \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCode` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCode`(		                                                                                                              \n" +
                "    IN pWhereClause VARCHAR(16383),                                                                                                              \n" +
                "    IN puserID VARCHAR(50),                                                                                        \n" +
                "    IN pnickName VARCHAR(20),                                                                                                        \n" +
                "    IN pprefix VARCHAR(20),                                                                                                        \n" +
                "    IN puid VARCHAR(20),                                                                                                    \n" +
                "    IN pComponentID INT,                                                                                                \n" +
                "    IN pCustomerID INT,                                                                                                \n" +
                "    IN pCPN BOOL,                                                                                                \n" +
                "    IN pMFGAvailabel BOOL,                                                                                                \n" +
                "    IN pRefCpnMfgID INT,                                                                                            \n" +
                "    IN pAssyID INT,                                                                                            \n" +
                "    IN pSalesOrderDetailID INT,		                                                                                            \n" +
                "    IN pReceiveMaterialType VARCHAR(255),                                                                                  \n" +
                "    IN pkitAssemblyID INT,                                                                            \n" +
                "    IN pBarcodeID INT,                            \n" +
                "    IN pBOMLineID INT 	                                                                                           \n" +
                "    )  \n" +
                "BEGIN                                                                                                            \n" +
                "	CALL Sproc_MatchBarCodeAndSaveDelimiters (pWhereClause,puserID,pnickName,pprefix,puid,pComponentID,pCustomerID,pCPN,pMFGAvailabel,pRefCpnMfgID,pAssyID,pSalesOrderDetailID,pReceiveMaterialType,pkitAssemblyID,pBarcodeID,pBOMLineID);	    \n" +
                "	SELECT * FROM tempUIDSuccessDetail;    \n" +
                "	SELECT * FROM tempUIDComponentDetail;  \n" +
                "	SELECT * FROM tempPurchaseInspectionDetail;									    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                                                                                                                  \n" +
                "    IN pWhereClause VARCHAR(16383),                                                                                                                  \n" +
                "    IN puserID VARCHAR(50),                                                                                            \n" +
                "    IN pnickName VARCHAR(20),                                                                                                            \n" +
                "    IN pprefix VARCHAR(20),                                                                                                            \n" +
                "    IN puid VARCHAR(20),                                                                                                        \n" +
                "    IN pComponentID INT,                                                                                                    \n" +
                "    IN pCustomerID INT,                                                                                                    \n" +
                "    IN pCPN BOOL,                                                                                                    \n" +
                "    IN pMFGAvailabel BOOL,                                                                                                    \n" +
                "    IN pRefCpnMfgID INT,                                                                                                \n" +
                "    IN pAssyID INT,                                                                                                \n" +
                "    IN pSalesOrderDetailID INT,		                                                                                                \n" +
                "    IN pReceiveMaterialType VARCHAR(255),                                                                                      \n" +
                "    IN pkitAssemblyID INT,                                                                                \n" +
                "    IN pBarcodeID INT,                                \n" +
                "    IN pBOMLineID INT 	                                                                                               \n" +
                "    )  \n" +
                "BEGIN                                                                                                                  \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                                                                                                  \n" +
                "	DECLARE v_delimiter VARCHAR(10);                                                                                                                  \n" +
                "	DECLARE v_length INT;                                                                                                                   \n" +
                "	DECLARE v_fieldType INT;                                                                                                                       \n" +
                "	DECLARE v_entityId INT;                                                                                                                  \n" +
                "	DECLARE v_dataElementId INT;                                                                                                                  \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                                                                                                                  \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                                                                                                                  \n" +
                "	DECLARE strLabel VARCHAR(2000);                                                                                                                  \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                                                                                                                  \n" +
                "	DECLARE StaticField VARCHAR(100);                                                                                            \n" +
                "	DECLARE DynamicField VARCHAR(100);		                                                                                            \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                                                                                                                  \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');                                                                                                                  \n" +
                "	DECLARE plen,slen INT;                                                                                                                  \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                                                                                                                  \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                                                                                                              \n" +
                "	DECLARE barcode_type_id INT;                                                                                                        \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);                                                                                                    \n" +
                "	DECLARE UpdateValue VARCHAR(16383);                                                                                     \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';                                                                                    \n" +
                "	DECLARE v_SupplierID INT;                                                                                \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);                                                                                  \n" +
                "	DECLARE v_barcode_id INT;                                                                                \n" +
                "	DECLARE v_barcode_count INT;                                                                                \n" +
                "	DECLARE v_NumberOfPart INT;                                                                                 \n" +
                "	DECLARE v_rfqLineItemsID INT;                                                           \n" +
                "	DECLARE v_componentCount INT;                                                        \n" +
                "	DECLARE v_componentId INT;                                                              \n" +
                "	DECLARE v_mfgPartNO VARCHAR(50);                                                        \n" +
                "	DECLARE v_partMFG INT;                                                            \n" +
                "	DECLARE v_isGoodPart TINYINT(1);                                                        \n" +
                "	DECLARE v_restrictUsePermanently TINYINT(1);                                                        \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT(1);                                                        \n" +
                "	DECLARE v_restrictUseInBOM TINYINT(1);                                                  \n" +
                "	DECLARE v_isInstall TINYINT(1);                                                   \n" +
                "	DECLARE v_isBOMLineClean TINYINT(1);                                                \n" +
                "	DECLARE v_BOMLineId INT(11);                                              \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT(1);                                              \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT(1);                                              \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;                                              \n" +
                "	DECLARE v_PIDCode VARCHAR(50);                                           \n" +
                "	DECLARE v_isPurchase TINYINT(1);                                        \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);                                   \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);                                \n" +
                "	DECLARE v_BOMLineCount INT(11);                                 \n" +
                "	DECLARE v_AlternateLineId INT(11);                               \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);                              \n" +
                "	DECLARE v_BOMAssyId INT(11);                              \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);                              \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT(1);                      \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT(1);                      \n" +
                "	DECLARE v_isCPNFlag TINYINT(1);         \n" +
                "	DECLARE v_dateCodeFormatID INT;           \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                                                                                                                   \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                                                                                                                  \n" +
                "	(                                                                                                                  \n" +
                "		errorText LONGTEXT,                                                                                                                  \n" +
                "		IsSuccess VARCHAR (2),                                                                                                        \n" +
                "		MFGPart VARCHAR(10000)                                                                                                                       \n" +
                "	);                                                                                     \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;                                                                                                                   \n" +
                "	CREATE TEMPORARY TABLE temp_Component_Sid_Stock                                                                                                                  \n" +
                "	(                                                                                                                  \n" +
                "		refcompid INT,                                                                                                                  \n" +
                "		pkgQty DECIMAL(18,6),                                                                              \n" +
                "		dateCode VARCHAR(10),                                                                              \n" +
                "		lotCode VARCHAR(255),                                                                              \n" +
                "		scanlabel VARCHAR(1000),                                                                              \n" +
                "		createdBy VARCHAR(255),                                                                              \n" +
                "		uid VARCHAR(14),                                                                              \n" +
                "		prefix VARCHAR(20),                                                                              \n" +
                "		nickName VARCHAR(50),                                                                              \n" +
                "		cpn TINYINT,                                                                              \n" +
                "		mfgAvailabel TINYINT,                                                                              \n" +
                "		refCPNMFGPNID INT,                                                                              \n" +
                "		customerID INT,                                                                              \n" +
                "		assyID INT,                                                                              \n" +
                "		salesOrderDetailID INT,                                                                              \n" +
                "		receiveMaterialType VARCHAR(255),                                                                              \n" +
                "		refSupplierPartId INT,      \n" +
                "		mfrDateCode VARCHAR(50)                                                                              \n" +
                "	);                                                                               \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;                                                                                                                   \n" +
                "	CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values                                                                                                                  \n" +
                "	(                                                                                                                  \n" +
                "		entityid INT,                                                                              \n" +
                "		dataelementid INT,                                                                              \n" +
                "		`value` LONGTEXT,                                                                              \n" +
                "		createdBy VARCHAR(255)                                                                              \n" +
                "	);                                                                                                 \n" +
                "	-- get data from barcode templates with seprator                                                                 \n" +
                "	# return error code                                                              \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found                                                              \n" +
                "	# 0: Barcode template does not exist, Please add template                                                              \n" +
                "	# 1: Validation Clear                                                              \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component                                                              \n" +
                "	# 3: Mfgcode is not found                                                              \n" +
                "	# 4: MFG PN does not exist                                                              \n" +
                "	# 5: Multiple MFG PN found                                                              \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code                                                              \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly                                                              \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer                                                              \n" +
                "	# 9:  Multiple barcode template found.                                                              \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check                                                              \n" +
                "	# 11: MFG PN is incorrect part                                                            \n" +
                "	# 12: PID PID1 was restricted part at part master level.                                                          \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.                                                     \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.                                                    \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.                                                \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.                                              \n" +
                "	# 17: PID is contain more than 1 BOM line.                         \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.                      \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.                                                     \n" +
                "  \n" +
                "	block1: BEGIN                    \n" +
                "		SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");              \n" +
                "		IF (pBarcodeID IS NULL) THEN                                                                                \n" +
                "			SELECT COUNT(*), id, barcodeType, `name` INTO v_barcode_count, v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                                                  \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);               \n" +
                "			-- AND (CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;                                                                                   \n" +
                "  \n" +
                "			IF (v_barcode_count > 1) THEN                                                                                \n" +
                "				SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                                                    \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);               \n" +
                "				-- AND (CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;                                                                                  \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                                                                                                   \n" +
                "				('Multiple barcode template found.',9,@multiple_barcode_string);	                                                                                                                  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                     \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS       \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                \n" +
                "			ELSE                                                                   \n" +
                "				/*SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                                                  \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND                                                                                \n" +
                "				(CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;   */                                                                                \n" +
                "				SET pBarcodeID = v_barcode_id;                                                                                \n" +
                "			END IF;                                                                                \n" +
                "		ELSE                                                                                 \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND id = pBarcodeID AND `status`=1;                                                                                \n" +
                "		END IF;                                                       \n" +
                "  \n" +
                "		IF (barcode_type_id IS NULL) THEN                      \n" +
                "			/*SELECT COUNT(1) INTO v_NumberOfPart FROM                                                                                           \n" +
                "			(                                                                                          \n" +
                "				SELECT c.id,c.mfgPN FROM component c WHERE c.mfgPN=pWhereClause AND c.deletedAt IS NULL                                                                                          \n" +
                "				UNION                                                                                          \n" +
                "				SELECT c.id,c.mfgPN FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID                                                                                           \n" +
                "				WHERE (c.mfgPN=pWhereClause OR co.name=pWhereClause) AND co.deletedAt IS NULL AND c.deletedAt IS NULL                                                                                          \n" +
                "			) a;                  \n" +
                "			IF (v_NumberOfPart > 0) THEN   */                                                                            \n" +
                "				SET pWhereClause = CONCAT(\"NONE\", pWhereClause);       				              \n" +
                "				SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                  \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;                                                                                \n" +
                "				SET pBarcodeID = v_barcode_id;                        \n" +
                "			/*END IF;  */            \n" +
                "		END IF;                                                                                 \n" +
                "  \n" +
                "		-- tempregexp;    	                                                                                          \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */                                                                                  \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                                                                                                                \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND id = pBarcodeID;                                                                                \n" +
                "			SET v_BarcodeType = '2D';                                                                                                        \n" +
                "		ELSE /* barcode 1D */                 \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                                                                                                                 \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND id = pBarcodeID;               \n" +
                "			SET v_BarcodeType = '1D';                                                                                                     \n" +
                "		END IF;                                                                                \n" +
                "	END block1;                    \n" +
                "  \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                                                                \n" +
                "		block2: BEGIN                                                                                \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found                                                                                                                  \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR                                                                                                                  \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                                                                                                               \n" +
                "				WHERE refbrID = pBarcodeID AND deletedAt IS NULL;                                                                                                           \n" +
                "			-- declare exit loop if data not found                                                                                                                  \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                                                                                                  \n" +
                "			-- if any record match found than  check for delimiter and its value                                                                                                             \n" +
                "			IF (pbr_template_ID > 0) THEN                                                                                                                  \n" +
                "				-- create temporary table for deliemeter and component dataelement                                                                                                                  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                                                                                                                  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                                                                                                                  \n" +
                "					pentityId INT,                                                                                                                  \n" +
                "					pdataElementId INT,                                                                                                                  \n" +
                "					pdelimiter_value VARCHAR(200)                                                                                                                  \n" +
                "				);                                                                                                             \n" +
                "				-- create temporary table for separator string values                                                                                                                  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                                                                                                                  \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));                                                                                                        \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string                                                                                                                  \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND id = pBarcodeID;                                                                                                       \n" +
                "				-- open cursor                                                                                                                  \n" +
                "				OPEN barcodeMatch_cursor;                                                                                                                  \n" +
                "				-- set str label as whereclause                                                                                                                  \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");               \n" +
                "				-- if prefix is found than remove those from actual string match                                                                                                                  \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN				                                                                                                                  \n" +
                "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                                          \n" +
                "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));                                                                                                                  \n" +
                "				 END IF;                                                                                                                 \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match                                                                                                                   \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN                                                                                                                  \n" +
                "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                                                                                                  \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                                                                                                  \n" +
                "				 END IF;	                                          \n" +
                "				-- insert all values after seprator split                                                                                        \n" +
                "  \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                                        				              \n" +
                "				PREPARE stmt1 FROM @SQL;                                                                                                                  \n" +
                "				EXECUTE stmt1;                                                                        \n" +
                "				-- create dynamic query to insert in recieving material                                                                                                                  \n" +
                "				SET QueryForStatic = 'insert into temp_Component_Sid_Stock';                                                                                             \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template                                                                                                                  \n" +
                "				barcodeMatch_loop:LOOP                                                                                               \n" +
                "					-- get all five selected values                                                                                                                  \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                                                                                                          \n" +
                "					-- exit loop if no record found for barcode match                                                                                                                  \n" +
                "					IF exit_loop THEN                                                                                                             \n" +
                "						CLOSE barcodeMatch_cursor;                                                                                                                  \n" +
                "						LEAVE barcodeMatch_loop;                                                                                                                  \n" +
                "					END IF;                                                                                                             \n" +
                "  \n" +
                "					-- dynamic query to get dellimeter string with values from string                                                                                                                  \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                                                                                                                  \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                                                                                                                  \n" +
                "					EXECUTE stmtdelimiter;                                                                                                        \n" +
                "  \n" +
                "					-- get delimiter values from string                                                                                                                  \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                                                                                                          \n" +
                "					-- check for field type is static or dynamic                                                                                                                  \n" +
                "					-- if static field than check for mfg code and mfg part number        \n" +
                "					IF v_fieldType = 0  THEN                                                                                                              \n" +
                "						-- component_sid_stock                                                                                                                   \n" +
                "						-- get static field name from barcode table delimiter data element id                                                                                                                  \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                                                                                                                    \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                                                                                                                  \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN                                                                                                        \n" +
                "							SET MFG_Part_No = delimiter_value_data;                                                                                                        \n" +
                "							IF(pComponentID = 0)THEN                                                       \n" +
                "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;                                                       \n" +
                "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS                                                      \n" +
                "								SELECT id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission FROM                                                                                           \n" +
                "								(                                                                                          \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission                                                         \n" +
                "									FROM 	component c                                                         \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL                                                                                          \n" +
                "									UNION                                                                                          \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission                                                         \n" +
                "									FROM 		component_otherpn co                                                         \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID                                                                                           \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL                                                                                          \n" +
                "								) a;                                                      \n" +
                "  \n" +
                "								SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;               \n" +
                "								IF (v_componentCount > 1) THEN                                                      \n" +
                "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;                                                       \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS                                                      \n" +
                "									SELECT * FROM temp_component_detail WHERE mfgcodeID > 0;                                                      \n" +
                "  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;                                                      \n" +
                "									IF (v_componentCount < 2) THEN                                                      \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                               \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                                        \n" +
                "										FROM 	temp_component_supplier_detail;                                                      \n" +
                "									END IF;                                                      \n" +
                "								ELSE                                                       \n" +
                "									SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                               \n" +
                "										INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                                       \n" +
                "									FROM 	temp_component_detail;                                                      \n" +
                "								END IF;                                                      \n" +
                "  \n" +
                "								/*SELECT COUNT(1), id, mfgPN, mfgcodeID, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission FROM                                                                                           \n" +
                "								(                                                                                          \n" +
                "									SELECT 	c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission                                                         \n" +
                "									FROM 	component c                                                         \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL                                                                                          \n" +
                "									UNION                                                                                          \n" +
                "									SELECT 		c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission                                                         \n" +
                "									FROM 		component_otherpn co                                                         \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID                                                                                           \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL                                                                                          \n" +
                "								) a; */                                                      \n" +
                "							ELSE                                                                                              \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                                \n" +
                "									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                                         \n" +
                "								FROM 	component                                                         \n" +
                "								WHERE 	id = pComponentID AND deletedAt IS NULL;                                                                                                        \n" +
                "							END IF;                                                                \n" +
                "  \n" +
                "							/*IF (v_componentCount > 1) THEN                                                        \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission                                                         \n" +
                "								FROM 	component                                                         \n" +
                "								WHERE 	mfgPN = delimiter_value_data AND mfgcodeID > 0 AND deletedAt IS NULL;                                                        \n" +
                "							END IF;  */                                                      \n" +
                "  \n" +
                "							IF v_componentCount > 1 THEN                                                                                                        \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                  \n" +
                "								LEAVE barcodeMatch_loop;                                                                                                        \n" +
                "							END IF;                                                      \n" +
                "  \n" +
                "							IF (v_isGoodPart != 1) THEN                                                              \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                  \n" +
                "								LEAVE barcodeMatch_loop;                                                                 \n" +
                "							END IF;                                                              \n" +
                "  \n" +
                "							IF (v_restrictUsePermanently = 1) THEN                                                            \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                  \n" +
                "								LEAVE barcodeMatch_loop;                                                            \n" +
                "							END IF;                                              \n" +
                "  \n" +
                "							IF (v_restrictPackagingAliasPermanently = 1) THEN                                                            \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                  \n" +
                "								LEAVE barcodeMatch_loop;                                                            \n" +
                "							END IF;                                                            \n" +
                "  \n" +
                "							IF (@barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN                                                                                    \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';                                                                                    \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                  \n" +
                "								LEAVE barcodeMatch_loop;                                                                                      \n" +
                "							END IF;                                                                                    \n" +
                "  \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND deletedAt IS NULL;                                                                                    \n" +
                "							IF (@MFGType = 'DIST') THEN                                                                                    \n" +
                "								SET v_SupplierID = v_componentId;                                                                                    \n" +
                "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier;                                                                                    \n" +
                "							END IF;                               \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN                                  \n" +
                "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE deletedAt IS NULL AND refSalesOrderDetID = pSalesOrderDetailID;			                              \n" +
                "								-- SELECT DISTINCT rfqLineItemsID INTO v_rfqLineItemsID FROM rfq_lineitems_alternatepart WHERE partID = pkitAssemblyID AND mfgPNID = v_componentId limit 1;				                                                                                      \n" +
                "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId   -- a.bomLineCleanStatus, a.description,                                             \n" +
                "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId  -- v_isBOMLineClean, v_bomErrorDescription,                                                                                \n" +
                "								FROM 	(                  \n" +
                "									SELECT 	*                  \n" +
                "									FROM                                    \n" +
                "										(                                                                                \n" +
                "											SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall, -- fun_getBOMLineCleanStatusErrorCategoryWise(rml.id, NULL, NULL, NULL, 3) AS bomLineCleanStatus,                                         \n" +
                "													-- CONCAT(IFNULL(rl.description, ''), IFNULL(rml.description,'')) description,                               \n" +
                "													rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId                      \n" +
                "											FROM 		component_packagingalias cp                                                                                  \n" +
                "											LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid                                                                                  \n" +
                "											LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id                                                   \n" +
                "											INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID                                                                                 \n" +
                "											WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.deletedAt IS NULL                                                        \n" +
                "											UNION                                                                                  \n" +
                "											SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall, -- fun_getBOMLineCleanStatusErrorCategoryWise(rla.id, NULL, NULL, NULL, 3) AS bomLineCleanStatus,                                         \n" +
                "													-- CONCAT(IFNULL(rl.description, ''), IFNULL(rla.description,'')) description,                               \n" +
                "													rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId                                                     \n" +
                "											FROM 		rfq_lineitems_alternatepart rla                                                  \n" +
                "											INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                                                                                                                 \n" +
                "											WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.deletedAt IS NULL                                                                      \n" +
                "											UNION                                 \n" +
                "											SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall, -- fun_getBOMLineCleanStatusErrorCategoryWise(rla.id, NULL, NULL, NULL, 3) AS bomLineCleanStatus,                                         \n" +
                "													-- CONCAT(IFNULL(rl.description, ''), IFNULL(rla.description,'')) description,                               \n" +
                "													rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId                                                      \n" +
                "											FROM 		rfq_lineitems_alternatepart rla                                                  \n" +
                "											INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                                                                                                                 \n" +
                "											WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.deletedAt IS NULL AND custPNID IS NOT NULL                                 \n" +
                "											GROUP BY 	custPNID, rla.partID                      \n" +
                "  \n" +
                "											/*SELECT 		id, custPNID AS componentID, 0 AS restrictUseInBOMStep, isInstall, 1 AS bomLineCleanStatus, description, isPurchase, isBuyDNPQty,                                   \n" +
                "													lineID                                                   \n" +
                "											FROM 		rfq_lineitems                                                                                  \n" +
                "											WHERE 		partID = pkitAssemblyID AND custPNID IS NOT NULL AND deletedAt IS NULL*/                                                                              \n" +
                "										) b WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)                  \n" +
                "										GROUP BY b.lineID, b.assyId                  \n" +
                "								) a;                  \n" +
                "  \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN                                                                                      \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                  \n" +
                "									LEAVE barcodeMatch_loop;                                                    \n" +
                "								ELSEIF (v_BOMLineCount > 1) THEN                                                \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                  \n" +
                "									LEAVE barcodeMatch_loop;                                                 \n" +
                "								ELSE                              \n" +
                "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN                                                                                      \n" +
                "										CLOSE barcodeMatch_cursor;                                                                                                                  \n" +
                "										LEAVE barcodeMatch_loop;                                                                                      \n" +
                "									END IF;                           \n" +
                "  \n" +
                "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;                              \n" +
                "									IF (v_isBOMLineClean = 0) THEN                                                \n" +
                "										CLOSE barcodeMatch_cursor;                                                                                                                  \n" +
                "										LEAVE barcodeMatch_loop;                                                 \n" +
                "									END IF;                              \n" +
                "								END IF;                                                    \n" +
                "  \n" +
                "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN                                                  \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                  \n" +
                "									LEAVE barcodeMatch_loop;                                                  \n" +
                "								END IF;                                                   \n" +
                "							END IF;                                                                                      \n" +
                "							IF  v_componentCount = 1 THEN                           \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"'); 	    				                                                                                                                  \n" +
                "							END IF;                                                                                            \n" +
                "						END IF;                                                                                                                  \n" +
                "  \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                                                                                                                  \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN                                                                                                          \n" +
                "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                                                                                                                  \n" +
                "						END IF;                                                                                                    \n" +
                "  \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                            \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                                                                                                                  \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                  \n" +
                "						END IF;      \n" +
                "  \n" +
                "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                            \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                                                                                                  \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                  \n" +
                "						END IF;                                                                                                                                                                                              \n" +
                "  \n" +
                "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                            \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');                                                                                                                  \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                  \n" +
                "  \n" +
                "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND deletedAt IS NULL;      \n" +
                "							IF (v_dateCodeFormatID IS NOT NULL) THEN      \n" +
                "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);      \n" +
                "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;      \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                                                                                                  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');      \n" +
                "							END IF;      \n" +
                "						END IF;                                                                                                                                                                                              \n" +
                "  \n" +
                "						/*IF v_componentCount > 1 THEN                                                                                                        \n" +
                "							CLOSE barcodeMatch_cursor;                                                                                                                  \n" +
                "							LEAVE barcodeMatch_loop;                                                                                                        \n" +
                "						END IF;      */                                                                                                     \n" +
                "  \n" +
                "						-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                                                                                                                  \n" +
                "						-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                                                                                                                   \n" +
                "  \n" +
                "						-- select strFeildforInsert,valuesforInsert;                                                                                                                  \n" +
                "  \n" +
                "					ELSE                                                                                              \n" +
                "						-- component_sid_stock_dataelement_Values                                                                                                                    \n" +
                "						-- dynamic fields                                                                                                 \n" +
                "						/*SET DynamicField=(SELECT dataElementName FROM dataelement WHERE dataElementID=v_dataElementId AND deletedAt IS NULL);                                                                                             \n" +
                "						IF(DynamicField=\"Mfg Date Code\" AND delimiter_value_data IS NOT NULL) THEN                                                                                                  \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                                                                                                  \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                  \n" +
                "						END IF;*/                                                                                                  \n" +
                "  \n" +
                "						/*IF(DynamicField=\"Lot Code\" AND delimiter_value_data IS NOT NULL) THEN                                                                                                  \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                                                                                                  \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                  \n" +
                "						END IF;*/                                                                                            \n" +
                "  \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE                                                                                                                   \n" +
                "							dataElementID=v_dataElementId AND deletedAt IS NULL;                                                                                                               \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                                                                                                                   \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);                                                                                                           \n" +
                "					END IF;                                                                                                                  \n" +
                "  \n" +
                "				END LOOP barcodeMatch_loop;                                                           \n" +
                "				-- check if mfg and component both found than                                                          \n" +
                "				IF v_componentCount = 0 THEN                                                                                                                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not exist',4,MFG_Part_No);                                                                                                                  \n" +
                "				ELSEIF (v_componentCount > 1) THEN                                                                                                        \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFR PN found',5,MFG_Part_No);                                                                                                                          \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                           \n" +
                "					IF (v_isGoodPart = 2) THEN                                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);                                                            \n" +
                "					ELSE                                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);                                                            \n" +
                "					END IF;                                      \n" +
                "				ELSEIF (v_restrictUsePermanently = 1) THEN                                                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);                                                            \n" +
                "				ELSEIF (v_restrictPackagingAliasPermanently = 1) THEN                           \n" +
                "					IF (v_isCPNFlag = 1) THEN                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);                                                            \n" +
                "					ELSE                       \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);                                                            \n" +
                "					END IF;                      \n" +
                "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN                                                                                  \n" +
                "					-- In this case pass the barcodeid insted of MFGPN because in this case we have to not use the MFGPN                                                                                \n" +
                "					-- if (v_BarcodeType = 1) then                                                                                \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);                                                                                      \n" +
                "					-- else                                                                                \n" +
                "					-- 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please check the manufacturer and if not exist then create new template for same manufacturer.'),8,v_barcode_id);                                                                                      \n" +
                "					-- end if;                                                                                \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN                                                                                                                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN or CPN is not found in bom of this assembly.',7,MFG_Part_No);                                                                                      \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN                                                                                                                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));                                                                                      \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN                                              \n" +
                "					-- INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Due to the below pending issues/status your BOM line is not clean. So, you can not allocate to kit.<br/><div class=\"cm-bom-error-block\">',v_bomErrorDescription,'</div>'),15,MFG_Part_No);                                                                                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line no <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> is not clean. So, you can not allocate UMID into kit.'),15,MFG_Part_No);                                                                                      \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN                                                                                                                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);                                                                                      \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN                                                                                                                  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);                                                                                     \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN                                                                                                                  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);                                                                                     \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN                                                                                                                  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);                                                                                     \n" +
                "				ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN                                                                                                                  \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                                                                                                                  \n" +
                "					IF @Mfgmatched = 0  THEN                                                                                                                  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MFR PN are avialable but not matched in component',2,MFG_Part_No);							                                                                                                                  \n" +
                "					END IF;									                                                                                                                  \n" +
                "				ELSE 		                                                                                                        \n" +
                "					IF @mfgCount = 0 THEN                                                                                                                  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);                                                                                                                  \n" +
                "					END IF;	                                                                                                                  \n" +
                "					/*IF v_componentCount = 0 THEN                                                                                                                  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not exist',4,MFG_Part_No);                                                                                                                  \n" +
                "					END IF;*/	                                                                                                                  \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND v_componentCount=0  THEN                                                                                                                    \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                                                                                                                  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MFR PN is not Found',0,MFG_Part_No);                                                                                                                  \n" +
                "					END IF;						                                                                                                                  \n" +
                "				END IF;	                                                              \n" +
                "  \n" +
                "				IF (pCPN = 1) THEN                                                                                                 \n" +
                "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;                                                                                                    \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;                                                                                                    \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN                                                                                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);                                                                                                                  \n" +
                "					END IF;                                                                       \n" +
                "  \n" +
                "					IF (@isCPNPart != 1) THEN                                                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);                                                                                                                  \n" +
                "					END IF;                                                                                                 \n" +
                "				END IF;                                                                                                \n" +
                "				IF (puid IS NOT NULL) THEN                                                 \n" +
                "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                                                                                                  \n" +
                "						IF (pprefix = '') THEN	                                                                                   \n" +
                "							CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					                                                                                                    \n" +
                "							SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;                                                                                                    \n" +
                "						END IF;                                                                                                 \n" +
                "  \n" +
                "						-- must call statements in sequence          				                                                                                                        \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',',','uid',')','VALUES','(',valuesforInsert,',',puserID,',\"',puid,'\")',';');                                                                																		        						      \n" +
                "						PREPARE stmt1 FROM @SQL1;                                                                                                                  \n" +
                "						EXECUTE stmt1;                                                                                                               \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set prefix=','\"',pprefix,'\"');                                                                                                    \n" +
                "						IF (pnickName IS NOT NULL) THEN                                                                                                    \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');                                                                                                    \n" +
                "						END IF;                                                                                      \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);                                                                                \n" +
                "  \n" +
                "						IF (pRefCpnMfgID IS NOT NULL) THEN                                                                                                    \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);                                                                                                    \n" +
                "						END IF;                                                                                       \n" +
                "  \n" +
                "						IF (pCustomerID IS NOT NULL) THEN                                                                                                    \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);                                                                                                    \n" +
                "						END IF;                                                                                   \n" +
                "  \n" +
                "						IF (pAssyID IS NOT NULL) THEN                                                                                                    \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);                                                                                                    \n" +
                "						END IF;                                                                                     \n" +
                "  \n" +
                "						IF (pSalesOrderDetailID IS NOT NULL) THEN                                                                                                    \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);                                                                                                    \n" +
                "						END IF;                                                                                      \n" +
                "  \n" +
                "						IF (pReceiveMaterialType IS NOT NULL) THEN                                                                                                    \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');                                                                                                 \n" +
                "						END IF;                                                                                   \n" +
                "  \n" +
                "						IF (v_SupplierID IS NOT NULL) THEN                                                                                                    \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);                                                                                                    \n" +
                "						END IF;                                                                                   \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue,' where uid=','\"',puid,'\"');               \n" +
                "						SET @sql2 = UpdateValue;	                                                                                                                   \n" +
                "						PREPARE stmt2 FROM @SQL2;                                                                                                                  \n" +
                "						EXECUTE stmt2;	                                                                                \n" +
                "  \n" +
                "						IF (pkitAssemblyID IS NULL) THEN                              \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                                                                                                                  \n" +
                "						ELSE                               \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));                                                                                                                  \n" +
                "						END IF;                              \n" +
                "  \n" +
                "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                                                                                                        \n" +
                "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)                                                                                                                   \n" +
                "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                                                                                                                  \n" +
                "						END IF;                                                                                                                  \n" +
                "  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                  \n" +
                "						SELECT * FROM temp_Component_Sid_Stock;                                                                                  \n" +
                "  \n" +
                "						SELECT 	c.*,            \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,            \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,             \n" +
                "							csup.packageQty AS supplierPkgQty,             \n" +
                "							csup.mfgcodeID AS supplierMfgId,             \n" +
                "							mcm.mfgcode AS supplierMFGCode,             \n" +
                "							mcm.mfgName AS supplierMFGName,             \n" +
                "							csup.mfgPN AS supplierMFGPN,             \n" +
                "							csup.packagingID AS supplierPackagingId,             \n" +
                "							fun_getPackagingNameByID(csup.packagingID) AS supplierPackagingName,             \n" +
                "							csup.minimum AS supplierMinimum,             \n" +
                "							ccpn.id AS cpnID,             \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,             \n" +
                "							rfqroh.rohsIcon AS rohsIcon,             \n" +
                "							rfqroh.name AS rohsName,             \n" +
                "							rfqmou.name AS mountingTypeName,             \n" +
                "							um.unitName AS uomName,            \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE deletedAt IS NULL AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,            \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE deletedAt IS NULL AND id = mg.dateCodeFormatID) dateCodeFormat,            \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId            \n" +
                "						FROM component AS c                                                                               \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID                                                                              \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID                                                                              \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID            \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID                                                                              \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                                                                          \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID                                                                              \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID                                                                \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom                                                                             \n" +
                "						WHERE c.id = v_componentId;                                                                              \n" +
                "  \n" +
                "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`                                                                              \n" +
                "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv                                                                               \n" +
                "						LEFT OUTER JOIN `dataelement` AS dl                                                                              \n" +
                "						ON cssdlv.dataelementid = dl.dataElementID AND dl.deletedAt IS NULL;                                                                     \n" +
                "  \n" +
                "						SELECT 	id, refComponentID, refCPNPartID                                     \n" +
                "						FROM 	component_cust_alias_rev_pn                                     \n" +
                "						WHERE 	refCPNPartID = v_componentId AND deletedAt IS NULL;                      \n" +
                "  \n" +
                "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (                                                        \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND deletedAt IS NULL                                                         \n" +
                "						) AND deletedAt IS NULL;                              \n" +
                "  \n" +
                "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,                       \n" +
                "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN                                     \n" +
                "						FROM 		rfq_lineitems_alternatepart rla                                    \n" +
                "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.deletedAt IS NULL                        \n" +
                "						WHERE 		rla.deletedAt IS NULL                                     \n" +
                "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))                                     \n" +
                "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)                                     \n" +
                "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);                                              \n" +
                "  \n" +
                "						SELECT 	id,   \n" +
                "							partId,   \n" +
                "							requirement   \n" +
                "						FROM 	componenet_inspection_requirement_det   \n" +
                "						WHERE 	partId = v_componentId  \n" +
                "								AND isDeleted = 0;  \n" +
                "					ELSE                                                                                                                 \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                                                  \n" +
                "					END IF;                                                                  \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                                                                     \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                \n" +
                "				ELSE                                                              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);         \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                     \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                     \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                             \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                     \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS        \n" +
                "					SELECT 	c.*,             \n" +
                "						fun_getPackagingNameByID(c.packagingID) AS packagingName,             \n" +
                "						CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,             \n" +
                "						csup.packageQty AS supplierPkgQty,             \n" +
                "						csup.mfgcodeID AS supplierMfgId,             \n" +
                "						mcm.mfgcode AS supplierMFGCode,             \n" +
                "						mcm.mfgName AS supplierMFGName,             \n" +
                "						csup.packagingID AS supplierPackagingId,             \n" +
                "						csup.mfgPN AS supplierMFGPN,             \n" +
                "						csup.id AS supplierMFGPNID,             \n" +
                "						fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,             \n" +
                "						fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,                       \n" +
                "						ccpn.id AS cpnID,             \n" +
                "						ccpn.mfgcodeID AS cpnMFGCodeID,             \n" +
                "						rfqroh.rohsIcon AS rohsIcon,             \n" +
                "						rfqroh.name AS rohsName,             \n" +
                "						rfqmou.name AS mountingTypeName,             \n" +
                "						um.unitName AS uomName,            \n" +
                "						(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE deletedAt IS NULL AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,            \n" +
                "						(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE deletedAt IS NULL AND id = mg.dateCodeFormatID) dateCodeFormat,            \n" +
                "						mg.dateCodeFormatID AS dateCodeFormatId            \n" +
                "					FROM component AS c                                                                               \n" +
                "					LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID                                                                              \n" +
                "					LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID                                                                              \n" +
                "					LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID            \n" +
                "					LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID                                                                              \n" +
                "					LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                                                                           \n" +
                "					LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID                                                                         \n" +
                "					LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID                                                                  \n" +
                "					LEFT JOIN uoms AS um ON um.id = c.uom                                                                \n" +
                "					WHERE c.id = v_componentId;           \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempPurchaseInspectionDetail;                   \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempPurchaseInspectionDetail AS      \n" +
                "					SELECT 	id,   \n" +
                "						partId,   \n" +
                "						requirement   \n" +
                "					FROM 	componenet_inspection_requirement_det   \n" +
                "					WHERE 	partId = v_componentId  \n" +
                "							AND isDeleted = 0;                                                       \n" +
                "  \n" +
                "				END IF;                                                                            \n" +
                "			ELSE               \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                                                                                                   \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);	                                                                                                                  \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                                                                                                                    \n" +
                "			END IF;                                                                                                                  \n" +
                "  \n" +
                "		END block2;      \n" +
                "	ELSE    \n" +
                "		IF (puid IS NOT NULL) THEN    \n" +
                "			SELECT * FROM tempUIDSuccessDetail;    \n" +
                "		ELSE     \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                     \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS    \n" +
                "			SELECT 1;    \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempPurchaseInspectionDetail;                   \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempPurchaseInspectionDetail AS   \n" +
                "			SELECT 1;     \n" +
                "		END IF;    \n" +
                "	END IF;                                                                                                                            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2605,'2.00','V1','Sproc_MatchBarCodeAndSaveDelimiters, Sproc_MatchBarCode, Sproc_verify_UID - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2605:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "DROP function IF EXISTS `fun_checkForInspectionId`;  \n" +
                "CREATE FUNCTION `fun_checkForInspectionId`(  \n" +
                "	pinspectionId INT  \n" +
                ") RETURNS tinyint(1)  \n" +
                "BEGIN  \n" +
                "	DECLARE v_RequirementCount INT;  \n" +
                "    DECLARE vIsRequirement BOOLEAN;  \n" +
                "  \n" +
                "        (SELECT COUNT(1) INTO v_RequirementCount FROM inspection_template_requirement_det   \n" +
                "        WHERE isDeleted=0 AND inspectionRequirementId IN(pinspectionId));  \n" +
                "  \n" +
                "      	IF(v_RequirementCount = 0) THEN    \n" +
                "			SET	vIsRequirement = FALSE;    \n" +
                "        ELSE    \n" +
                "			SET	vIsRequirement = TRUE;    \n" +
                "		END IF;       \n" +
                "  \n" +
                "RETURN vIsRequirement;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2606,'2.00','V1','function for check Refrence of Requirement - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2606:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "DROP function IF EXISTS `fun_getInspectionRequirementName`;  \n" +
                "CREATE FUNCTION `fun_getInspectionRequirementName`(  \n" +
                "	pTemplateId INT  \n" +
                ") RETURNS varchar(255) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vRequirement LONGTEXT;  \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(concat(itrd.id, '$#$',im.requirement) SEPARATOR '#$#') INTO @result  \n" +
                "				from inspection_template_requirement_det itrd    \n" +
                "                INNER JOIN inspection_mst im ON im.id = itrd.inspectionRequirementId AND im.isDeleted = 0  \n" +
                "					where itrd.isDeleted = 0  and itrd.inspectionTemplateId = pTemplateId;  \n" +
                "      	SET vRequirement = @result;  \n" +
                "  \n" +
                "RETURN vRequirement;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2607,'2.00','V1','Add function for get Requirement Name- CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2607:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "DROP TABLE IF EXISTS `inspection_template_requirement_Det`;  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2608,'2.00','V1','Change related to Inspection FK - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2608:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "DROP TABLE IF EXISTS `inspection_template_mst`;  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2609,'2.00','V1','Change related to Inspection FK - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2609:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "CREATE TABLE `inspection_template_mst`(   \n" +
                "   `id` INT NOT NULL AUTO_INCREMENT ,   \n" +
                "   `name` VARCHAR(255) NOT NULL ,   \n" +
                "   `createdBy` VARCHAR(255) NOT NULL ,   \n" +
                "   `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ,   \n" +
                "   `updatedBy` VARCHAR(255) ,   \n" +
                "   `updatedAt` DATETIME DEFAULT CURRENT_TIMESTAMP ,   \n" +
                "   `updateByRoleId` INT(11) ,   \n" +
                "   `isDeleted` TINYINT(1) NOT NULL DEFAULT '0' ,   \n" +
                "   `deletedAt` DATETIME ,   \n" +
                "   `deletedBy` VARCHAR(255) ,   \n" +
                "   `deleteByRoleId` INT(11) ,   \n" +
                "   `createByRoleId` INT(11) ,   \n" +
                "   PRIMARY KEY (`id`)  \n" +
                "   );  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2610,'2.00','V1','Change related to Inspection FK - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2610:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "CREATE TABLE `inspection_template_requirement_Det`(   \n" +
                "   `id` INT NOT NULL AUTO_INCREMENT ,   \n" +
                "   `inspectionTemplateId` INT NOT NULL ,   \n" +
                "   `inspectionRequirementId` INT NOT NULL ,   \n" +
                "   `createdBy` VARCHAR(255) NOT NULL ,   \n" +
                "   `createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ,   \n" +
                "   `updatedBy` VARCHAR(255) ,   \n" +
                "   `updatedAt` DATETIME DEFAULT CURRENT_TIMESTAMP ,   \n" +
                "   `updateByRoleId` INT(11) ,   \n" +
                "   `isDeleted` TINYINT(1) NOT NULL DEFAULT '0' ,   \n" +
                "   `deletedAt` DATETIME ,   \n" +
                "   `deletedBy` VARCHAR(255) ,   \n" +
                "   `deleteByRoleId` INT(11) ,   \n" +
                "   `createByRoleId` INT(11) ,   \n" +
                "   PRIMARY KEY (`id`),  \n" +
                "   KEY `FK_inspection_template_requirement_Det_inspectionTemplateId` (`inspectionTemplateId`),  \n" +
                "   CONSTRAINT `FK_inspection_template_requirement_Det_inspectionTemplateId` FOREIGN KEY (`inspectionTemplateId`) REFERENCES `inspection_template_mst` (`id`),  \n" +
                "   KEY `FK_inspection_mst_inspectionRequirementId` (`inspectionRequirementId`),  \n" +
                "   CONSTRAINT `FK_inspection_mst_inspectionRequirementId` FOREIGN KEY (`inspectionRequirementId`) REFERENCES `inspection_mst` (`id`)  \n" +
                " );  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2611,'2.00','V1','Change related to Inspection FK - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2611:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "INSERT INTO `table_mapping_details` (`tabel_name`, `display_page_name`)   \n" +
                "VALUES ('inspection_template_requirement_det', 'Purchase Inspection Requirement Template');  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2612,'2.00','V1','Add detail for Purchase Inspection Requirement Template - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2612:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPurchaseInspectionTemplateList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPurchaseInspectionTemplateList`(    \n" +
                "	IN ppageIndex INT(11),                            \n" +
                "	IN precordPerPage INT(11),                            \n" +
                "	IN pOrderBy VARCHAR(255),                            \n" +
                "	IN pWhereClause VARCHAR(16383)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "  \n" +
                "    DECLARE pOffset INT(11);                            \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;        \n" +
                "	SET @tempQuery = CONCAT(\"SELECT id,name,    \n" +
                "			fun_getInspectionRequirementName(id) requirement,  \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(createdAt) createdAt,         \n" +
                "			fun_getUserNameByID(createdBy) createdBy,         							    \n" +
                "			fun_getUserNameByID(updatedBy) updatedBy,        \n" +
                "			fun_getUserNameByID(deletedBy) deletedBy,              \n" +
                "			fun_getRoleByID(createByRoleId) createByRoleId,              \n" +
                "			fun_getRoleByID(updateByRoleId) updateByRoleId,              \n" +
                "			fun_getRoleByID(deleteByRoleId) deleteByRoleId,             \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(UpdatedAt) updatedAt,              \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(deletedAt) deletedAt    \n" +
                "            FROM `inspection_template_mst`  itm             \n" +
                "			WHERE IFNULL(isDeleted,0) = 0\");          \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                            \n" +
                "			SET pWhereClause = '1=1' ;                            \n" +
                "		END IF;	                            \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;                            \n" +
                "		ELSE                            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                            \n" +
                "		END IF;	          \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                             \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                            \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                            \n" +
                "		ELSE	                            \n" +
                "			SET rowNumWhere = '';                            \n" +
                "		END IF;	                            \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);                      \n" +
                "  \n" +
                "            PREPARE query2 FROM @SQLStatement2;                    \n" +
                "			EXECUTE query2;                    \n" +
                "			DEALLOCATE PREPARE query2;                  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c                    \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                    \n" +
                "			EXECUTE query1;                    \n" +
                "			DEALLOCATE PREPARE query1;           \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPurchaseIncomingInspectionList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPurchaseIncomingInspectionList`(    \n" +
                "    IN ppageIndex INT(11),                            \n" +
                "	IN precordPerPage INT(11),                            \n" +
                "	IN pOrderBy VARCHAR(255),                            \n" +
                "	IN pWhereClause VARCHAR(16383)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT(11);                            \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;              \n" +
                "	SET @tempQuery = CONCAT(\"SELECT id, requirement,  \n" +
                "			fun_checkForInspectionId(id) isRequirementReference,  \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(createdAt) createdAt,         \n" +
                "			fun_getUserNameByID(createdBy) createdBy,         							    \n" +
                "			fun_getUserNameByID(updatedBy) updatedBy,        \n" +
                "			fun_getUserNameByID(deletedBy) deletedBy,              \n" +
                "			fun_getRoleByID(createByRoleId) createByRoleId,              \n" +
                "			fun_getRoleByID(updateByRoleId) updateByRoleId,              \n" +
                "			fun_getRoleByID(deleteByRoleId) deleteByRoleId,             \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(UpdatedAt) updatedAt,              \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(deletedAt) deletedAt    \n" +
                "            FROM `inspection_mst`                \n" +
                "			WHERE IFNULL(isDeleted,0) = 0  \");          \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                            \n" +
                "			SET pWhereClause = '1=1' ;                            \n" +
                "		END IF;	                            \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"requirement ASC\") ;                            \n" +
                "		ELSE                            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                            \n" +
                "		END IF;	          \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                             \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                            \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                            \n" +
                "		ELSE	                            \n" +
                "			SET rowNumWhere = '';                            \n" +
                "		END IF;	                            \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);                      \n" +
                "			PREPARE query2 FROM @SQLStatement2;                    \n" +
                "			EXECUTE query2;                    \n" +
                "			DEALLOCATE PREPARE query2;                  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c                    \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                    \n" +
                "			PREPARE query1 FROM @SQLStatement1;                    \n" +
                "			EXECUTE query1;                    \n" +
                "			DEALLOCATE PREPARE query1;           \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_inspectionRequirementMst`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_inspectionRequirementMst`(    \n" +
                "	IN tableName VARCHAR(255),          \n" +
                "	IN IDs LONGTEXT,          \n" +
                "	IN deletedBy INT,          \n" +
                "	IN entityID VARCHAR(255),          \n" +
                "	IN refrenceIDs LONGTEXT,          \n" +
                "	IN countList INT,          \n" +
                "    IN pRoleID INT          \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists temprequirementcategory as                                                                                                                               \n" +
                "     (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"inspection_template_requirement_det\" else \"\" end as msg FROM inspection_template_requirement_det WHERE isDeleted=0 AND inspectionRequirementId IN(',IDs,') LIMIT 1)');                 \n" +
                "	PREPARE stmt1 FROM @SQL;                                                                        \n" +
                "	EXECUTE stmt1;	  \n" +
                "  \n" +
                "   IF (countList=FALSE) THEN                                                                       \n" +
                "   	IF (SELECT SUM(t.cnt) FROM temprequirementcategory t)=0 THEN    \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update inspection_mst       \n" +
                "								set isDeleted=1,      \n" +
                "                                deletedBy=',deletedBy,',      \n" +
                "                                deleteByRoleId = ',pRoleID,',      \n" +
                "                                deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"      \n" +
                "						 where (id in (',IDs,') and isDeleted=0 ) ');   			  \n" +
                "	        PREPARE stmt2 FROM @SQL2;      \n" +
                "	        EXECUTE stmt2;   \n" +
                "  \n" +
                "			SET @SQl3 = CONCAT('update  inspection_template_requirement_det   \n" +
                "								set isDeleted=1,  \n" +
                "                                deletedBy=',deletedBy,',  \n" +
                "                                 deleteByRoleId = ',pRoleID,',   \n" +
                "                                deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"   \n" +
                "                                where inspectionRequirementId IN(',IDs,') and deletedAt is null');    			  \n" +
                "			PREPARE stmt3 FROM @SQl3;      \n" +
                "			EXECUTE stmt3;    \n" +
                "			 SELECT * FROM temprequirementcategory WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";                                                                        \n" +
                "			ELSE                                                                        \n" +
                "					SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM temprequirementcategory t;                                                                             \n" +
                "				END IF;               \n" +
                "	ELSE              \n" +
                "		  SELECT t1.cnt,t2.display_page_name AS msg              \n" +
                "						   FROM temprequirementcategory t1              \n" +
                "							INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name              \n" +
                "							WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"              \n" +
                "							ORDER BY t2.display_page_name;                            \n" +
                "	END IF;                                                                        \n" +
                "DROP TABLE temprequirementcategory;                    \n" +
                "END;  \n" +

                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "UPDATE `page_detail` SET `menuRoute` = 'setting.partmaintenance.purchaseinspection',  \n" +
                "`pageRoute` = 'app.purchaseinspection',`pageURL` = '/purchaseincominginspectionreq/purchaseinspection',  \n" +
                "`iconClass` = 'icons-purchase-incoming-inspection-requirement'  \n" +
                "WHERE (`pageName` = 'Purchase/ Incoming Inspection Requirement(s)');  \n" +

                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "UPDATE `page_detail` SET `menuRoute` = 'setting.partmaintenance.purchaseinspectiontemplate',  \n" +
                "`pageRoute` = 'app.purchaseinspectiontemplate',`pageURL` = '/purchaseincominginspectionreq/purchaseinspectiontemplate',  \n" +
                "`iconClass` = 'icons-purchase-incoming-inspection-requirement-template'  \n" +
                "WHERE (`pageName` = 'Purchase/Incoming Inspection Requirement Template');  \n" +

                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2613,'2.00','V1','Add detail for Purchase Inspection Requirement Template - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2613:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetReferenceInspectionRequirementList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReferenceInspectionRequirementList`(  \n" +
                "	IN ID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SET @tempquery = CONCAT('SELECT name as Transaction , \"Purchase/Incoming Inspection Requirement Template\" as TransactionType from inspection_template_requirement_det itrd  \n" +
                "				INNER JOIN inspection_template_mst im ON im.id = itrd.inspectionTemplateId AND im.isDeleted = 0  \n" +
                "				where itrd.isDeleted = 0  and itrd.inspectionRequirementId = ',ID,'');                  \n" +
                "  \n" +
                "    SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c \");      \n" +
                "  \n" +
                "		PREPARE query1 FROM @SQLStatement1;                    \n" +
                "		EXECUTE query1;                    \n" +
                "		DEALLOCATE PREPARE query1;     \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2614,'2.00','V1','Requirement Reference related details - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2614:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2020 *********************************** */
                "ALTER TABLE smartcarttransaction   \n" +
                "ADD INDEX IDX_smartcarttransaction_reelbarcode_isInTrans (reelBarCode ASC, isInTransit ASC, transactionID ASC) VISIBLE;  \n" +
                /* **************************** Add Script Version -> 27-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2615,'2.00','V1','Add index in smartcarttransaction - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2615:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2020 *********************************** */
                "ALTER TABLE smartcarttransaction ALTER INDEX FK_smartcarttransaction_smartCartLedColorID INVISIBLE;  \n" +
                /* **************************** Add Script Version -> 27-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2616,'2.00','V1','Add index in smartcarttransaction - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2616:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getUMIDTransitUserName` ;  \n" +
                "CREATE FUNCTION `fun_getUMIDTransitUserName`(        \n" +
                "	puid VARCHAR(50)) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN        \n" +
                "	DECLARE result NVARCHAR(50);     \n" +
                "  \n" +
                "	SELECT 	CASE 	  \n" +
                "			WHEN messagetype=104 THEN   \n" +
                "				fun_getUserNameByID(createdBy)   \n" +
                "			ELSE 'Unauthorized'   \n" +
                "		END   \n" +
                "	INTO 	result   \n" +
                "	FROM 	smartcarttransaction   \n" +
                "	WHERE 	reelBarCode = puid   \n" +
                "			AND isintransit = 1   \n" +
                "			AND transactionid IS NOT NULL   \n" +
                "			AND (messagetype=104 OR messagetype=1001);      \n" +
                "  \n" +
                "	RETURN result;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-07-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getMFRDateCodeFormatByID` ;  \n" +
                "CREATE FUNCTION `fun_getMFRDateCodeFormatByID`(                \n" +
                "	pMFRDateCodeId INT(11)  \n" +
                ") RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN                \n" +
                "	DECLARE result VARCHAR(50);   \n" +
                "  \n" +
                "	SELECT 	dateCodeFormat   \n" +
                "	INTO 	result   \n" +
                "	FROM 	dateCodeFormatMst WHERE  id = pMFRDateCodeId  \n" +
                "			AND isDeleted = 0;  \n" +
                "  \n" +
                "	RETURN result;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-07-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getTotalUMIDScrapUnit` ;  \n" +
                "CREATE FUNCTION `fun_getTotalUMIDScrapUnit`(      \n" +
                "	pUMIDId INT(11)            \n" +
                ") RETURNS DECIMAL(18,8)  \n" +
                "BEGIN                  \n" +
                "	DECLARE v_TotalUMIDScrapUnit DECIMAL(18,8);  \n" +
                "  \n" +
                "	SELECT 		SUM(IFNULL(cssh.scrappedUnit, 0))   \n" +
                "	INTO		v_TotalUMIDScrapUnit  \n" +
                "	FROM 		component_sid_stock_history cssh   \n" +
                "	WHERE 		cssh.refUIDId = pUMIDId   \n" +
                "	GROUP BY 	cssh.refUIDId;  \n" +
                "  \n" +
                "	RETURN v_TotalUMIDScrapUnit;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-07-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCountOfRestrictUMID` ;  \n" +
                "CREATE FUNCTION `fun_getCountOfRestrictUMID`(      \n" +
                "	pUMIDId INT(11)            \n" +
                ") RETURNS INT(11)  \n" +
                "BEGIN                  \n" +
                "	DECLARE v_CountOfRestrictUMID INT(11);  \n" +
                "  \n" +
                "	SELECT 	COUNT(1)   \n" +
                "	INTO  	v_CountOfRestrictUMID  \n" +
                "	FROM 	component_sid_stock_restrict_umid   \n" +
                "	WHERE 	refUMIDId = pUMIDId  \n" +
                "			AND isDeleted = 0;  \n" +
                "  \n" +
                "	RETURN v_CountOfRestrictUMID;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2617,'2.00','V1','Add new function related to umid grid - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2617:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetReceivingMaterial` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(	                                                                                                                          \n" +
                "	IN ppageIndex INT(11),                                                                                  \n" +
                "	IN precordPerPage INT(11),                                                                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                                  \n" +
                "	IN pWHId INT(11),                                                                                 \n" +
                "	IN pBinId INT(11),                                                                      \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),                                                                      \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),                                                                      \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),                                                                      \n" +
                "	IN pAssyIDs VARCHAR(16383),                                                                     \n" +
                "	IN pRestrictPart TINYINT(1),                                                                    \n" +
                "	IN pExpireMaterial TINYINT(1),                                                                  \n" +
                "	IN pPartId INT(11),                                                                    \n" +
                "	IN pIsShowPackagingAlias TINYINT(1),                                                    \n" +
                "	IN pStandardIDs VARCHAR(16383),                                                    \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),                                                    \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),                                                    \n" +
                "	IN pDateCode VARCHAR(16383),                                                    \n" +
                "	IN pIsAvailableToSell TINYINT(1),                                            \n" +
                "	IN pIsRestrictedUMID TINYINT(1),                                    \n" +
                "	IN pdepartmentIDs VARCHAR(16383),                                    \n" +
                "	IN pwarehouseType VARCHAR(255),                              \n" +
                "	IN pWarehouse VARCHAR(16383),                              \n" +
                "	IN pExpiredDay INT(11),      \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),      \n" +
                "	IN pCustomerId INT(11)      \n" +
                ")  \n" +
                "BEGIN                                                                                                                       \n" +
                "	DECLARE pOffset INT(11);                                                                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                                                            \n" +
                "	DECLARE vInnerJoinMainQuery VARCHAR(16383) ;                                                                        \n" +
                "	DECLARE vComponentWhereClause VARCHAR(16383);                                                                      \n" +
                "	DECLARE vKitWhereClause VARCHAR(16383);                                                                      \n" +
                "	DECLARE vUMIDWhereClause VARCHAR(16383);                     \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);             \n" +
                "	DECLARE v_TimeZone VARCHAR(50);          \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    \n" +
                "  \n" +
                "	SET vInnerJoinMainQuery = ' ', vComponentWhereClause ='', vKitWhereClause='', vUMIDWhereClause = '';                                                                                        \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);                                                                      \n" +
                "	ELSE                                                                                  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";                                                                                  \n" +
                "	END IF;                                                                                  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                                                                                                          \n" +
                "		SET pWhereClause = ' 1=1';                                                                                    \n" +
                "	END IF;	                                                                      \n" +
                "  \n" +
                "	IF(pExpireMaterial = 1) THEN                              \n" +
                "		IF(pExpiredDay = 0) THEN                               \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND expiryDate is not null AND expiryDate < fun_DatetimetoUTCDateTime()');                              \n" +
                "		ELSE                              \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND expiryDate is not null AND expiryDate < fun_DatetimetoUTCDateTime() + INTERVAL ',pExpiredDay,' DAY');                              \n" +
                "		END IF;	                              \n" +
                "	END IF;	                                      \n" +
                "	IF(pWarehouse IS NOT NULL) THEN                                                                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND warehouseID in  (',pWarehouse,')');                               \n" +
                "	END IF;	                                 \n" +
                "	 IF(pwarehouseType IS NOT NULL) THEN                                                                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND warehouseType = ''',pwarehouseType,'''');                                                                                    \n" +
                "	END IF;	                                    \n" +
                "	IF(pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN                                                                                                                         \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND departmentID in (',pdepartmentIDs,')');                                                                                    \n" +
                "	END IF;	       \n" +
                "	IF(pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN                                                                                                                         \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND UMIDrohsStatusID in (',pRohsStatusIDs,')');                                                                                    \n" +
                "	END IF;	                                                                    \n" +
                "  \n" +
                "	IF(pWHId IS NOT NULL) THEN                                                                                  \n" +
                "		SET vInnerJoinMainQuery = CONCAT(vInnerJoinMainQuery,' INNER JOIN binmst b ON css.binID = b.id  and b.WarehouseID = ', pWHId,' ');                                                                                  \n" +
                "	END IF;  	                                                                                \n" +
                "  \n" +
                "	IF(pBinId IS NOT NULL) THEN                                                                                  \n" +
                "		SET @whereBin = CONCAT(' AND css.binID = ', pBinId, ' ');                                                                                  \n" +
                "	ELSE                                                                           \n" +
                "		SET @whereBin = '';                                                                                  \n" +
                "	END IF;                                                                          \n" +
                "  \n" +
                "	IF(pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN                                                                       \n" +
                "		SET vComponentWhereClause = CONCAT(vComponentWhereClause, ' AND c.mountingTypeID in (', pMountingTypeIDs, ') ');                                                                      \n" +
                "	END IF;                                                                      \n" +
                "  \n" +
                "	IF(pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN                                                                       \n" +
                "		SET vComponentWhereClause = CONCAT(vComponentWhereClause, ' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ');                                                                      \n" +
                "	END IF;                                                     \n" +
                "  \n" +
                "	IF (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN                                                        \n" +
                "		SET vComponentWhereClause = CONCAT(vComponentWhereClause, ' AND css.refcompid IN (select c.id from component_standard_details csd where csd.componentID = c.id AND csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ');                                                        \n" +
                "	ELSEIF (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN                                                        \n" +
                "		SET vComponentWhereClause = CONCAT(vComponentWhereClause, ' AND css.refcompid IN (select c.id from component_standard_details csd where csd.componentID = c.id AND csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ');                                                        \n" +
                "	ELSEIF (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN                                                        \n" +
                "		SET vComponentWhereClause = CONCAT(vComponentWhereClause, ' AND css.refcompid IN (select c.id from component_standard_details csd where csd.componentID = c.id AND csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ');                                                        \n" +
                "	END IF;                                                                       \n" +
                "  \n" +
                "	IF(pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN                                                                       \n" +
                "		SET vComponentWhereClause = CONCAT(vComponentWhereClause, ' AND css.costCategoryID in (', pCostCategoryIDs, ') ');                                                                      \n" +
                "	END IF;                                                     \n" +
                "  \n" +
                "	IF(pDateCode IS NOT NULL AND pDateCode != '') THEN                                                                       \n" +
                "		SET vComponentWhereClause = CONCAT(vComponentWhereClause, ' AND css.dateCode in (', pDateCode, ') ');                                                                      \n" +
                "	END IF;                                                     \n" +
                "  \n" +
                "	IF(pRestrictPart = 1) THEN                                                                       \n" +
                "		SET vComponentWhereClause = CONCAT(vComponentWhereClause, ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)');                                                                      \n" +
                "	END IF;                                     \n" +
                "	IF (pIsAvailableToSell = 1) THEN                                                    \n" +
                "		SET vComponentWhereClause = CONCAT(vComponentWhereClause, '                                                    \n" +
                "			AND refcompid NOT IN (                                                    \n" +
                "				SELECT 	mfgPNID                                                     \n" +
                "				FROM 	rfq_lineitems_alternatepart                                                     \n" +
                "				WHERE 	deletedAt IS NULL                                                     \n" +
                "						AND PartID IN (                                                    \n" +
                "							SELECT 	id                                                     \n" +
                "							FROM 	component                                                     \n" +
                "							WHERE 	partStatus = 1                                                     \n" +
                "									AND category = 3                                                     \n" +
                "									AND deletedAt IS NULL                                                    \n" +
                "							)                                                    \n" +
                "						AND mfgPNID IS NOT NULL		                                                    \n" +
                "				UNION                                                    \n" +
                "				SELECT 	componentID AS mfgPNID                                                     \n" +
                "				FROM 	component_packagingalias                                                     \n" +
                "				WHERE 	aliasgroupID IN (                                                                        \n" +
                "								SELECT 	aliasgroupID                                                     \n" +
                "								FROM 	component_packagingalias                                                     \n" +
                "								WHERE 	componentID IN (                                                    \n" +
                "												SELECT 	mfgPNID                                                     \n" +
                "												FROM 	rfq_lineitems_alternatepart                                                     \n" +
                "												WHERE 	deletedAt IS NULL                                                     \n" +
                "														AND PartID IN (                                                    \n" +
                "															SELECT 	id                                                     \n" +
                "															FROM 	component                                                     \n" +
                "															WHERE 	partStatus = 1                                                     \n" +
                "																	AND category = 3                                                     \n" +
                "																	AND deletedAt IS NULL                                                    \n" +
                "															)                                                    \n" +
                "														AND mfgPNID IS NOT NULL                                                    \n" +
                "											) AND deletedAt IS NULL                                                       \n" +
                "							)                                                    \n" +
                "			)                                                    \n" +
                "		');                                                    \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "	IF (pIsRestrictedUMID = 1) THEN                                            \n" +
                "		SET vComponentWhereClause = CONCAT(vComponentWhereClause, ' AND css.isUMIDRestrict = 1 ');                                                                      \n" +
                "	END IF;                                                 \n" +
                "  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN                                                                       \n" +
                "		SET vUMIDWhereClause = CONCAT(' AND (css.refcompid = ', pPartId);                                                                  \n" +
                "  \n" +
                "        IF(pIsShowPackagingAlias = 1) THEN                                                                     \n" +
                "  \n" +
                "			SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ' OR css.refcompid in (                                                                  \n" +
                "					SELECT cpa.componentID FROM component_packagingalias cpa WHERE cpa.aliasgroupID IN (                                                                              \n" +
                "						SELECT cp.aliasgroupID FROM component_packagingalias cp WHERE cp.componentID  = ', pPartId , '  AND cp.deletedAt IS NULL                                                                    \n" +
                "					) AND cpa.deletedAt IS NULL                                                                  \n" +
                "            ) ' );                                                                      \n" +
                "	END IF;                                                         \n" +
                "  \n" +
                "        SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ' ) ' );                                                                   \n" +
                "    END IF;                                                                    \n" +
                "  \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN		      \n" +
                "		SELECT GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs      \n" +
                "        FROM kit_allocation_assy_detail       \n" +
                "		WHERE deletedAt IS NULL AND partId IN (SELECT id FROM component WHERE deletedAt IS NULL AND mfgcodeid=pCustomerId);		          \n" +
                "    END IF;        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;                                                            \n" +
                "    CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT(11));                                                                      \n" +
                "    IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN                                                                       \n" +
                "		-- SET @vKitQuery =  CONCAT(\"                                                                      \n" +
                "		-- 		INSERT INTO tempAllocatedKitUIDs (refUidID)                                                                       \n" +
                "		-- 		SELECT 	k.refUIDId                                                                       \n" +
                "		-- 		FROM 	kit_allocation k                                                                      \n" +
                "		-- 		WHERE 	k.refSalesOrderDetID in (\", pRefSalesOrderDetIDs, \")                                                                      \n" +
                "		-- 		AND		k.assyID in (\", pAssyIDs, \")\");                                                                               \n" +
                "		-- PREPARE kitQuery FROM @vKitQuery;                                                                                                                        \n" +
                "		-- EXECUTE kitQuery;                                                                                                                        \n" +
                "		-- DEALLOCATE PREPARE kitQuery;                                                                          \n" +
                "  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)                                                                       \n" +
                "		SELECT 	k.refUIDId                                                                       \n" +
                "		FROM 	kit_allocation k                                                                      \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)                                                                      \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)                                                              \n" +
                "		AND	k.status = 'A';                                                                		      \n" +
                "		SET vKitWhereClause = CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs)');                                                                      \n" +
                "    END IF;      \n" +
                "  \n" +
                "    IF(pCustomerId IS NOT NULL AND (vKitWhereClause IS NULL OR  vKitWhereClause='')) THEN    \n" +
                "		SET vKitWhereClause = CONCAT(vKitWhereClause,' AND css.customerID=',pCustomerId,'');             \n" +
                "    -- END IF;        \n" +
                "	ELSEIF(pCustomerId IS NOT NULL) THEN      \n" +
                "		SET vKitWhereClause = CONCAT(vKitWhereClause,' OR css.customerID=',pCustomerId,'');         \n" +
                "    END IF;      \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                                                                           \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                                                                          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                                          \n" +
                "	ELSE	                                                                                                                          \n" +
                "		SET rowNumWhere = '';                                                                                                                          \n" +
                "	END IF;                                                                                      \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT(\"                                                                                  \n" +
                "		SELECT 			id, 				scanlabel, 		uid, 			pkgQty, 			uom, 			uomName, 			printStatus, 		costCategoryID,                                                                             \n" +
                "					costCategory, 			lotCode, 		dateCode, 		refcompid, 			mfgcodeID,		mfgPN, 				PIDCode, 		packaginggroupID,                                                                             \n" +
                "					mfg, 				packageQty, 		mslLevel, 			pictureCount, 		RoHSStatusID, 			rohsIcon, 		rohsName, 		                                                                            \n" +
                "					binID, 				warehouseID,		location, 		warehouse, 			department, 		customerID, 			receiveMaterialType,	displayReceiveMaterialType,	                          \n" +
                "					spq,				pcbPerArray, 		stockInventoryType, 	displayStockInventoryType,	                                                               \n" +
                "					customer, 			pkgUnit,   		orgPkgUnit, 		assyID, 			assembly, 		cpn, 				mfgAvailable, 		customerConsign,                                                                             \n" +
                "					refCPNMFGPNID, 			cpnMFGCode, 		cpnMFGPN, 		mfgPNDescription, 		nickName, 		refSupplierPartId, 		supplierMFGCode, 	supplieMFGPN,                                                                            \n" +
                "					packaging, 			packagingName, 		expiryDate, 		allocatedToKit, 		orgQty, 		orgRecBin,			orgRecBinName,		orgRecWarehouse,                                                                            \n" +
                "					orgRecWHName,			fromBin, 		fromBinName, 		fromWarehouse, 			fromWHName, 		fromDepartment, 		fromDepartmentName, 	specialNote, 		 		                                                                            \n" +
                "					orgRecDepartment, 		orgRecDepartmentName, 	updatedAt, 		updatedBy, 			umidModifiedBy, 	createdAt, 			createdBy, 		createdByName,                                                                        \n" +
                "					isinStk,			packingSlipId,		packingSlipName,	expiredStatus,		        umidPrefix,             createdbyRole,                  updatedbyRole,                                    \n" +
                "					refRestrictUMIDId,		isUMIDRestrict,		UMIDRestricted,		restrictUsePermanently, 	restrictUSEwithpermission,                                                   \n" +
                "					restrictPackagingUsePermanently, 			restrictPackagingUseWithpermission,			reasonUMIDRestricted,	countOfRestrictUMID,		departmentID,		warehouseType,                                \n" +
                "					totalScrapUnit,			((totalScrapUnit/orgPkgUnit)*100) perScrapQty,   \n" +
                "					tentativePrice,			((totalScrapUnit/orgPkgUnit)*tentativePrice) costScrapQty,			isTransit,		searchUser,                        \n" +
                "					mountingTypeID,			mountingTypeName,       externalPartPackage,                 \n" +
                "					partPackage,			createdUserCode, 	mfrDateCodeFormatID, 	mfrDateCodeFormat,		mfrDateCode,   side  ,fromSide,UMIDrohsStatusID,UMIDrohsStatus,isCustom 					                                                                \n" +
                "		FROM 		(		                                                                            \n" +
                "					SELECT 		css.id,					  	  \n" +
                "							css.scanlabel,						  \n" +
                "							css.uid,                                                                                    \n" +
                "							css.pkgQty,				  	  \n" +
                "							css.uom,						  \n" +
                "							fun_getUnitNameByID(css.uom) uomName,                                                                                              \n" +
                "							css.printStatus,				  \n" +
                "							css.costCategoryID,                  			  \n" +
                "							fun_getCostCategoryNameByID(css.costCategoryID, FALSE) costCategory,                                                                               \n" +
                "							css.lotCode,					  \n" +
                "							css.dateCode,                  				  \n" +
                "							css.refcompid,                                                                            \n" +
                "							c.mfgcodeID,					  \n" +
                "							c.mfgPN,                  				  \n" +
                "							c.PIDCode,                                                                            \n" +
                "							c.packaginggroupID,				  \n" +
                "							-- fun_getMfgCodeByID(c.mfgcodeID) mfgCode,		  \n" +
                "							fun_getMfgCodeAndNameByID(c.mfgcodeID) mfg,                                                                                         \n" +
                "							c.packageQty,					  \n" +
                "							fun_getMSLLevelByID(c.mslID, false) mslLevel,        	  \n" +
                "							css.prefix umidPrefix,                                                        \n" +
                "							fun_getFileCountByTransIDAndType('component_sid_stock', css.id) pictureCount,                		  \n" +
                "							-- fun_getMSLLevelByID(c.mslID, true) mslLevelForPrint,                                                            \n" +
                "							c.RoHSStatusID,					  \n" +
                "							fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,		  \n" +
                "							fun_getRoHSNameByID(c.RoHSStatusID)  rohsName,                                                                            \n" +
                "							css.binID,    					  \n" +
                "							fun_getBinNameByID(css.binID) location,			  \n" +
                "							-- fun_getRoHSCategoryByID(c.RoHSStatusID) rohsCategory,      		                                                                                           \n" +
                "							css.customerID,					  \n" +
                "							fun_getMfgCodeAndNameByID(css.customerID) customer,                                                                            \n" +
                "							IFNULL(css.orgPkgUnit, 0) orgPkgUnit,         	  \n" +
                "							css.pkgUnit,                                                                            \n" +
                "							css.assyID,				  	  \n" +
                "							fun_getAssyPIDCodeByID(css.assyID) assembly,  \n" +
                "							fun_getBinSideName(css.binID) side,                                                                                             \n" +
                "							fun_getWarehouseNameByBinID(css.binID) warehouse,                              \n" +
                "							fun_getWarehouseIDByBinID(css.binID) warehouseID,                                                                           \n" +
                "							fun_getDepartmentNameByBinID(css.binID) department,                                                                            \n" +
                "							(  \n" +
                "								CASE   \n" +
                "									WHEN (css.cpn = 0) THEN 'No'   \n" +
                "									WHEN (css.cpn = 1) THEN 'Yes'   \n" +
                "									ELSE ''   \n" +
                "								END  \n" +
                "							) AS cpn,                                                                                               \n" +
                "							(  \n" +
                "								CASE 	WHEN (css.mfgAvailabel = 0) THEN 'No'   \n" +
                "									WHEN (css.mfgAvailabel = 1) THEN 'Yes'   \n" +
                "									ELSE ''   \n" +
                "								END  \n" +
                "							) AS mfgAvailable,                                                                            \n" +
                "							(  \n" +
                "								CASE 	WHEN (css.customerConsign = 0) THEN 'No'   \n" +
                "									WHEN (css.customerConsign = 1) THEN 'Yes'   \n" +
                "									ELSE ''   \n" +
                "								END  \n" +
                "							) AS customerConsign,				                                                                                       \n" +
                "							css.refCPNMFGPNID,				  \n" +
                "							fun_getMfgCodeAndNameByPartID(css.refCPNMFGPNID) cpnMFGCode,		  \n" +
                "							fun_getMFGPNByID(css.refCPNMFGPNID) cpnMFGPN,                                                                            \n" +
                "							c.mfgPNDescription, 				  \n" +
                "							css.receiveMaterialType,			 						  \n" +
                "							css.spq,                            \n" +
                "							(                            \n" +
                "								CASE                             \n" +
                "									WHEN  css.receiveMaterialType = 'PP' THEN                            \n" +
                "										'Purchased Part'                            \n" +
                "									WHEN  css.receiveMaterialType = 'WC' THEN                            \n" +
                "										'Customer Consigned (with CPN) Part'                            \n" +
                "									WHEN  css.receiveMaterialType = 'WOC' THEN                            \n" +
                "										'Customer Consigned (without CPN) Part'                            \n" +
                "									WHEN  css.receiveMaterialType = 'PR' THEN                            \n" +
                "										'Purchased & Reserved Part'                            \n" +
                "									ELSE                            \n" +
                "										NULL                            \n" +
                "								END                            \n" +
                "  \n" +
                "							) displayReceiveMaterialType,                            \n" +
                "							css.stockInventoryType,                          \n" +
                "							(                            \n" +
                "								CASE                             \n" +
                "									WHEN  css.stockInventoryType = 'NI' THEN                            \n" +
                "										'New Stock'                            \n" +
                "									WHEN  css.stockInventoryType = 'OI' THEN                            \n" +
                "										'Existing Stock (Require to create UMID)'                            \n" +
                "									ELSE                            \n" +
                "										NULL                            \n" +
                "								END                            \n" +
                "  \n" +
                "							) displayStockInventoryType,                            \n" +
                "							css.pcbPerArray, 				  \n" +
                "							css.nickName,													                                                                                              \n" +
                "							css.packaging,					  \n" +
                "							fun_getPackagingNameByID(css.packaging) packagingName,                                                                                              \n" +
                "							css.refSupplierPartId, 				  \n" +
                "							fun_getMfgCodeAndNameByPartID(css.refSupplierPartId) supplierMFGCode,	  \n" +
                "							fun_getMFGPNByID(css.refSupplierPartId) supplieMFGPN,                                                                                              \n" +
                "							css.expiryDate,					  \n" +
                "							fun_getAllocatedKitsNameByID(css.id, 'A') allocatedToKit,                                                                            \n" +
                "							css.orgQty,				  	  \n" +
                "							css.specialNote,                                                                            \n" +
                "							css.fromBin,					  \n" +
                "							fun_getBinNameByID( css.fromBin) fromBinName,            \n" +
                "							fun_getBinSideName(css.fromBin) fromSide,                                                                             \n" +
                "							css.fromWarehouse,      			  \n" +
                "							fun_getWarehouseNameByID(css.fromWarehouse) fromWHName,                                                                                         \n" +
                "							css.fromDepartment,     			  \n" +
                "							fun_getWarehouseNameByID(css.fromDepartment) fromDepartmentName,                                                                                        \n" +
                "							css.orgRecBin,          			  \n" +
                "							fun_getBinNameByID(css.orgRecBin) orgRecBinName,            \n" +
                "							css.orgRecWarehouse,    			  \n" +
                "							fun_getWarehouseNameByID(css.orgRecWarehouse) orgRecWHName,                                                                            \n" +
                "							css.orgRecDepartment,   			  \n" +
                "							fun_getWarehouseNameByID(css.orgRecDepartment) orgRecDepartmentName,                                                                            \n" +
                "							-- fun_ConvertUTCDatetimeToDataKeyTimeZone(css.updatedAt) updatedAt,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,          					  \n" +
                "							css.updatedBy,	fun_getUserNameByID(css.updatedBy) AS umidModifiedBy,                                                                              \n" +
                "							-- fun_ConvertUTCDatetimeToDataKeyTimeZone(css.createdAt) createdAt,	  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,				  \n" +
                "							css.createdBy,	fun_getUserNameByID(css.createdBy) createdByName,                                                                        \n" +
                "							css.isinStk,                                    \n" +
                "							fun_getRoleByID(css.createByRoleId) createdbyRole,                                      \n" +
                "		                                        fun_getRoleByID(css.updateByRoleId) updatedbyRole,  					                                                        \n" +
                "							fun_getUMIDPackingSlipIdByID(css.id) packingSlipId,	                          \n" +
                "							(                          \n" +
                "								CASE                          \n" +
                "									WHEN  css.stockInventoryType = 'NI' THEN                            \n" +
                "										fun_getUMIDPackingSlipNameByID(css.id)                           \n" +
                "									WHEN  css.stockInventoryType = 'OI' THEN                            \n" +
                "										css.uid                          \n" +
                "								END                          \n" +
                "							) packingSlipName,                                     \n" +
                "							 fun_getDepartmentIDByBinID(css.binID) departmentID,                                     \n" +
                "							 fun_getWareHouseTypeByBinID(css.binID) warehouseType  ,                                                          \n" +
                "							(  \n" +
                "								CASE 	WHEN (css.expiryDate < fun_DatetimetoUTCDateTime()) THEN 'Expired'   \n" +
                "									ELSE NULL   \n" +
                "								END  \n" +
                "							) AS expiredStatus,                                                      \n" +
                "							refRestrictUMIDId, 				  \n" +
                "							isUMIDRestrict,                                                      \n" +
                "							(  \n" +
                "								CASE 	WHEN (css.isUMIDRestrict = 0) THEN 'No'   \n" +
                "									WHEN (css.isUMIDRestrict = 1) THEN 'Yes'   \n" +
                "									ELSE ''   \n" +
                "								END  \n" +
                "							) AS UMIDRestricted,                                                  \n" +
                "							c.restrictUsePermanently, 			  \n" +
                "							c.restrictUSEwithpermission,                                                   \n" +
                "							c.restrictPackagingUsePermanently, 		  \n" +
                "							c.restrictPackagingUseWithpermission,                                          \n" +
                "							fun_getReasonForRestrictUMID(css.id) reasonUMIDRestricted,                                \n" +
                "							IFNULL(c.price, 0) tentativePrice,                                \n" +
                "							-- (SELECT SUM(IFNULL(cssh.scrappedUnit, 0)) FROM component_sid_stock_history cssh WHERE cssh.refUIDId = css.id GROUP BY cssh.refUIDId) totalScrapUnit,                                \n" +
                "							-- (SELECT COUNT(1) FROM component_sid_stock_restrict_umid WHERE deletedAt IS NULL AND refUMIDId = css.id) countOfRestrictUMID,                            \n" +
                "							fun_getTotalUMIDScrapUnit(css.id) totalScrapUnit,  \n" +
                "							fun_getCountOfRestrictUMID(css.id) countOfRestrictUMID,  \n" +
                "							fun_getUMIDTransitStatus(css.uid) isTransit,         \n" +
                "							fun_getUMIDTransitUserName(css.uid) searchUser,                      \n" +
                "							c.mountingTypeID,	  \n" +
                "							fun_getMountingTypeNameByID(c.mountingTypeID) mountingTypeName,               \n" +
                "							c.partPackage externalPartPackage,              \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackage,		  \n" +
                "							fun_getUserCodeByID(css.createdBy) createdUserCode,                  \n" +
                "							css.mfrDateCodeFormatID,                        \n" +
                "							-- (SELECT dateCodeFormat FROM dateCodeFormatMst WHERE deletedAt IS NULL AND id = css.mfrDateCodeFormatID) mfrDateCodeFormat,                  \n" +
                "							fun_getMFRDateCodeFormatByID(css.mfrDateCodeFormatID) mfrDateCodeFormat,  \n" +
                "							css.mfrDateCode ,          \n" +
                "							css.rohsStatusID UMIDrohsStatusID,  \n" +
                "							fun_getRoHSNameByID(css.rohsStatusID) UMIDrohsStatus,  \n" +
                "							c.isCustom          \n" +
                "					FROM 		component_sid_stock css \", vInnerJoinMainQuery, \"                                                                             \n" +
                "					inner join 	component c on css.refcompid = c.id \", vComponentWhereClause, \"                                    \n" +
                "					WHERE 		(css.isdeleted is null or css.isdeleted = 0)\",                                                                       \n" +
                "								vUMIDWhereClause, @whereBin, vKitWhereClause,                                                                      \n" +
                "							\") As tempUMID                                                                             \n" +
                "				WHERE\", pWhereClause  \n" +
                "			);                                                              \n" +
                "  \n" +
                "	-- DROP TEMPORARY TABLE IF EXISTS temp_Sproc_GetReceivingMaterial;                                                            \n" +
                "	/*SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_GetReceivingMaterial AS \", @vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);                                                                         	  																								    \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                                                                                                                        \n" +
                "	EXECUTE mainQuery;                                                                                                                        \n" +
                "	DEALLOCATE PREPARE mainQuery; */                                                                             \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");                               \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                                                        \n" +
                "	EXECUTE query1;                                                                                                                        \n" +
                "	DEALLOCATE PREPARE query1;                                                                                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");                                                                                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                                                        \n" +
                "	EXECUTE query2;                                                                                                                        \n" +
                "	DEALLOCATE PREPARE query2;     \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);                                                                         	  																								    \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                                                                                                                        \n" +
                "	EXECUTE mainQuery;                                                                                                                        \n" +
                "	DEALLOCATE PREPARE mainQuery;                                                                                 \n" +
                "  \n" +
                "	/*SELECT * FROM temp_Sproc_GetReceivingMaterial;                                                                       \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_GetReceivingMaterial;*/                                                   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2618,'2.00','V1','Sproc_GetReceivingMaterial - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2618:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "DROP function IF EXISTS `fun_getInspectionRequirementName`;  \n" +
                "CREATE FUNCTION `fun_getInspectionRequirementName`(    \n" +
                "	pTemplateId INT    \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN    \n" +
                "	DECLARE vRequirement LONGTEXT;    \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(concat(itrd.id, '$#$',im.requirement) SEPARATOR '#$#') INTO @result    \n" +
                "				from inspection_template_requirement_det itrd      \n" +
                "                INNER JOIN inspection_mst im ON im.id = itrd.inspectionRequirementId AND im.isDeleted = 0    \n" +
                "					where itrd.isDeleted = 0  and itrd.inspectionTemplateId = pTemplateId;    \n" +
                "      	SET vRequirement = @result;    \n" +
                "  \n" +
                "RETURN vRequirement;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2619,'2.00','V1','change in Function for return type - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2619:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2020 *********************************** */
                "ALTER TABLE componenet_inspection_requirement_det ADD inspectionRequirementId INT(11) AFTER partId;  \n" +
                /* **************************** Add Script Version -> 28-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2620,'2.00','V1','Add new field purchase inspection template - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2620:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2020 *********************************** */
                "ALTER TABLE componenet_inspection_requirement_det ADD CONSTRAINT FK_componenet_inspection_requirement_det_inspectionRequirementId FOREIGN KEY (inspectionRequirementId) REFERENCES inspection_mst(id);  \n" +
                /* **************************** Add Script Version -> 28-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2621,'2.00','V1','Add new field purchase inspection template - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2621:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2020 *********************************** */
                "ALTER TABLE componenet_inspection_requirement_det DROP COLUMN requirement;  \n" +
                /* **************************** Add Script Version -> 28-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2622,'2.00','V1','Add new field purchase inspection template - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2622:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_inspectionRequirementMst` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_inspectionRequirementMst`(      \n" +
                "	IN tableName VARCHAR(255),            \n" +
                "	IN IDs LONGTEXT,            \n" +
                "	IN deletedBy INT,            \n" +
                "	IN entityID VARCHAR(255),            \n" +
                "	IN refrenceIDs LONGTEXT,            \n" +
                "	IN countList INT,            \n" +
                "    IN pRoleID INT            \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	SET @SQL = CONCAT('  \n" +
                "			CREATE TEMPORARY TABLE if not exists temprequirementcategory AS                                                                                                                                 \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"inspection_template_requirement_det\" else \"\" end as msg FROM inspection_template_requirement_det WHERE isDeleted=0 AND inspectionRequirementId IN(',IDs,') LIMIT 1)  \n" +
                "			UNION ALL   \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"componenet_inspection_requirement_det\" else \"\" end as msg FROM componenet_inspection_requirement_det WHERE isDeleted=0 AND inspectionRequirementId IN(',IDs,') LIMIT 1)  \n" +
                "		');                   \n" +
                "	PREPARE stmt1 FROM @SQL;                                                                          \n" +
                "	EXECUTE stmt1;	    \n" +
                "  \n" +
                "	IF (countList=FALSE) THEN                                                                         \n" +
                "		IF (SELECT SUM(t.cnt) FROM temprequirementcategory t)=0 THEN      \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('  \n" +
                "						update 	inspection_mst         \n" +
                "						set 	isDeleted=1,        \n" +
                "							deletedBy=',deletedBy,',        \n" +
                "							deleteByRoleId = ',pRoleID,',        \n" +
                "							deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"        \n" +
                "						where 	(id in (',IDs,') and isDeleted=0 )   \n" +
                "					');   			    \n" +
                "			PREPARE stmt2 FROM @SQL2;        \n" +
                "			EXECUTE stmt2;     \n" +
                "			SELECT * FROM temprequirementcategory WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";                                                                          \n" +
                "		ELSE                                                                          \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM temprequirementcategory t;                                                                               \n" +
                "		END IF;                 \n" +
                "	ELSE                \n" +
                "		SELECT 		t1.cnt,  \n" +
                "				t2.display_page_name AS msg                \n" +
                "		FROM 		temprequirementcategory t1                \n" +
                "		INNER JOIN 	table_mapping_details t2 ON t1.msg=t2.tabel_name                \n" +
                "		WHERE 		IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"                \n" +
                "		ORDER BY 	t2.display_page_name;                              \n" +
                "	END IF;                                                                          \n" +
                "DROP TABLE temprequirementcategory;                      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2623,'2.00','V1','Sproc_checkDelete_inspectionRequirementMst - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2623:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2020  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCustomPartData` ;  \n" +
                "CREATE FUNCTION `fun_getCustomPartData`(                          \n" +
                "	rfqAssyID INT(11)) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN                          \n" +
                "	DECLARE result NVARCHAR(16383);                        \n" +
                "	SELECT  CONCAT(\"SELECT 	rq.qtyID,   \n" +
                "				IFNULL(cqty.consolidatedQty, rl.requestQty) requestQty,   \n" +
                "				rq.unitPrice,   \n" +
                "				ra.qpa,  \n" +
                "				rl.rfqPriceGroupId,  \n" +
                "				rl.requestQty   qty,  \n" +
                "				rq.componentID,  \n" +
                "				pg.name AS priceGroupName                                           \n" +
                "			FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                                                    \n" +
                "			JOIN rfq_assy_quantity rl ON rq.qtyID=rl.id                                                      \n" +
                "			JOIN rfq_consolidated_mfgpn_lineitem ra ON rq.consolidateID=ra.id      \n" +
                "			LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity cqty ON cqty.refConsolidateLineitemQtyId = rq.id      \n" +
                "			LEFT JOIN rfq_price_group pg ON pg.id = rl.rfqPriceGroupId    \n" +
                "			JOIN component c ON c.id = rq.componentID                                                                      \n" +
                "			WHERE rl.isDeleted=0 AND ra.isdeleted=0 AND rq.isDeleted=0 AND ra.isPurchase = 1 AND rl.rfqAssyid = \",rfqAssyID,\" AND c.isCustom = TRUE;\")  INTO @result;                          \n" +
                "      	SET result = @result;                          \n" +
                "	RETURN result;                          \n" +
                "    END;  \n" +
                /* **************************** Add Script -> 28-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(                                                                  \n" +
                "	IN ppageIndex INT(11),                                                                  \n" +
                "	IN precordPerPage INT(11),                                                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                  \n" +
                "	IN rfqAssyID INT(11),                                                                  \n" +
                "	IN puserID INT (11),                \n" +
                "	IN ppackageing TINYINT(1),                \n" +
                "	IN pcustomerID INT(11)                                                                  \n" +
                "    )  \n" +
                "BEGIN                                                                  \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                                                  \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                                                  \n" +
                "	    SET @SQLString = NULL;     \n" +
                "	    SET @SQLGroupString = NULL;                                                                  \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                                                      \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                                                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                  \n" +
                "		ELSE                                                                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;                                                                   \n" +
                "		END IF;	                                                                  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                                                  \n" +
                "			SET pWhereClause = '1=1' ;                                                                  \n" +
                "		END IF;	                                                                  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                  \n" +
                "		ELSE	                                                                  \n" +
                "			SET rowNumWhere = '';                                                                  \n" +
                "		END IF;	                                                                  \n" +
                "		SELECT                                                                  \n" +
                "                     GROUP_CONCAT(DISTINCT                                                                  \n" +
                "				CONCAT(                                                                  \n" +
                "					'Max((IF(ra.requestQty = ''',                                                                  \n" +
                "						ra.requestQty,                                                                  \n" +
                "					''', rq.finalPrice, null))) AS ''',                                                                  \n" +
                "						ra.requestQty,''''                                                                  \n" +
                "					)                                                                  \n" +
                "					) INTO @SQLString                                                                  \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                                                  \n" +
                "		   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                                                  \n" +
                "		   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                                                  \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND ra.rfqPriceGroupId IS NULL;     \n" +
                "		   SELECT                                                                  \n" +
                "                     GROUP_CONCAT(DISTINCT                                                                  \n" +
                "				CONCAT(                                                                  \n" +
                "					'Max((IF(ra.requestQty = ''',                                                                  \n" +
                "						ra.requestQty,                                                                  \n" +
                "					''', rq.finalPrice, null))) AS ''',                                                                  \n" +
                "						pg.name,''''                                                                  \n" +
                "					)                                                                  \n" +
                "					) INTO @SQLGroupString                                                             \n" +
                "		   FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                                                  \n" +
                "		   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                                                  \n" +
                "		   JOIN  rfq_price_group pg ON pg.id = rq.rfqPriceGroupId    \n" +
                "		   LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity pgq ON pgq.refConsolidateLineitemQtyId = rq.id    \n" +
                "		   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                                                  \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NOT NULL;     \n" +
                "		        IF(ppackageing=1)THEN                \n" +
                "				SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItemsWithPackaging(rfqAssyID,@SQLString,pcustomerID,ppackageing,IFNULL(CONCAT(', ',@SQLGroupString),'')));                \n" +
                "				ELSE                \n" +
                "				 SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItems(rfqAssyID,@SQLString,pcustomerID,ppackageing,IFNULL(CONCAT(', ',@SQLGroupString),'')));                                                                   \n" +
                "                         END IF;                \n" +
                "  \n" +
                "                         PREPARE stmt FROM @SQLStatement;        \n" +
                "                       --   select @SQLStatement;                                                      \n" +
                "			EXECUTE stmt;	                  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM consolidatetemp where \", pWhereClause );                                                                  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                                                  \n" +
                "			EXECUTE query1;                                                                  \n" +
                "			DEALLOCATE PREPARE query1;                                                                  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                                  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                                                  \n" +
                "			EXECUTE query2;                                                                  \n" +
                "			DEALLOCATE PREPARE query2;                                                                  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID,0));                    \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                                  \n" +
                "			EXECUTE query3;                                                                  \n" +
                "			DEALLOCATE PREPARE query3;                                                                  \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                                                  \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                                                  \n" +
                "			EXECUTE query4;                                                                  \n" +
                "			DEALLOCATE PREPARE query4;                                                              \n" +
                "  \n" +
                "			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                                      \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                                          \n" +
                "			EXECUTE query5;                                                                          \n" +
                "			DEALLOCATE PREPARE query5;                                                                 \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));                  \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                                          \n" +
                "			EXECUTE query6;                                                                          \n" +
                "			DEALLOCATE PREPARE query6;                       \n" +
                "  \n" +
                "			SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));                  \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                                          \n" +
                "			EXECUTE query7;                                                                          \n" +
                "			DEALLOCATE PREPARE query7;                \n" +
                "  \n" +
                "			SET @SQLStatement8= (SELECT fun_getRestrictedParts(rfqAssyID));                  \n" +
                "			PREPARE query8 FROM @SQLStatement8;                                                                          \n" +
                "			EXECUTE query8;                                                                          \n" +
                "			DEALLOCATE PREPARE query8;                     \n" +
                "  \n" +
                "			SET @SQLStatement9= (SELECT fun_getCustomPartData(rfqAssyID));    \n" +
                "			-- select @SQLStatement9;                \n" +
                "			PREPARE query9 FROM @SQLStatement9;                                                                          \n" +
                "			EXECUTE query9;                                                                          \n" +
                "			DEALLOCATE PREPARE query9;            \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                                                    \n" +
                "    END;  \n" +
                /* **************************** Add Script -> 28-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_Update_BOM_Specific_Part_Requirement` ;  \n" +
                "CREATE PROCEDURE `Sproc_Update_BOM_Specific_Part_Requirement`(                                                            \n" +
                "	IN pPartID INT,  \n" +
                "	IN pType INT       \n" +
                ")  \n" +
                "BEGIN                 \n" +
                "	DECLARE totalMountingType INT DEFAULT 0;                   \n" +
                "	DECLARE totalFunctionalType INT DEFAULT 0;                                  \n" +
                "	DECLARE mountingTypeError TEXT;  \n" +
                "	DECLARE functionalTypeError TEXT;  \n" +
                "	DECLARE mountingTypeErrorCode VARCHAR(50);  \n" +
                "	DECLARE functionalTypeErrorCode VARCHAR(50);  \n" +
                "	DECLARE mountingTypeErrorMsg TEXT;  \n" +
                "	DECLARE functionalTypeErrorMsg TEXT;  \n" +
                "  \n" +
                "	-- Type 1 is equal to Funtional Type else Mounting Type  \n" +
                "	IF(pType = 1) THEN   \n" +
                "		SELECT COUNT(PartTypeID) INTO totalFunctionalType   \n" +
                "		FROM component_requirefunctionaltype WHERE refComponentID = pPartID AND isdeleted = 0  \n" +
                "		AND partTypeID NOT IN (SELECT c.functionalCategoryId FROM rfq_lineitems_alternatepart  ra  \n" +
                "		LEFT JOIN component c ON c.id = ra.mfgPNID  \n" +
                "		WHERE ra.partID = pPartID AND ra.isDeleted = 0);  \n" +
                "  \n" +
                "		SELECT description,errorCode INTO functionalTypeError, functionalTypeErrorCode FROM rfq_lineitems_errorcode WHERE logicID = 37;  \n" +
                "		CALL Sproc_UpdatePartInternalVersion (pPartID);	     \n" +
                "		IF(totalFunctionalType > 0) THEN  \n" +
                "			SELECT GROUP_CONCAT(`partTypeName` SEPARATOR ', ') INTO @functinalTypeStr FROM rfq_parttypemst   \n" +
                "					WHERE id IN (  \n" +
                "					SELECT PartTypeID FROM component_requirefunctionaltype WHERE refComponentID = pPartID AND isdeleted = 0  \n" +
                "					AND partTypeID NOT IN (SELECT c.mountingtypeID FROM rfq_lineitems_alternatepart  ra  \n" +
                "					LEFT JOIN component c ON c.id = ra.mfgPNID  \n" +
                "					WHERE ra.partID = pPartID AND ra.isDeleted = 0));  \n" +
                "			SET functionalTypeErrorMsg = CONCAT(functionalTypeErrorCode, ': ', REPLACE(functionalTypeError, \"<% Functional Types %>\", @functinalTypeStr));   \n" +
                "			UPDATE rfq_lineitems  SET requireFunctionalTypeStep = 0 , requireFunctionalTypeError = functionalTypeErrorMsg WHERE partID = pPartID AND isDeleted = FALSE LIMIT 1;                 \n" +
                "		ELSE  \n" +
                "			UPDATE rfq_lineitems  SET requireFunctionalTypeStep = 1, requireFunctionalTypeError = NULL WHERE partID = pPartID AND isDeleted = FALSE LIMIT 1;   \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT COUNT(PartTypeID) INTO totalMountingType FROM component_requiremountingtype   \n" +
                "		WHERE refComponentID = pPartID AND isdeleted = 0  \n" +
                "		AND partTypeID NOT IN (SELECT c.mountingtypeID FROM rfq_lineitems_alternatepart  ra  \n" +
                "		LEFT JOIN component c ON c.id = ra.mfgPNID  \n" +
                "		WHERE ra.partID = pPartID AND ra.isDeleted = 0);  \n" +
                "		SELECT description, errorCode INTO mountingTypeError, mountingTypeErrorCode FROM rfq_lineitems_errorcode WHERE logicID = 36;  \n" +
                "		CALL Sproc_UpdatePartInternalVersion (pPartID);	     \n" +
                "		IF(totalMountingType > 0) THEN  \n" +
                "				SELECT GROUP_CONCAT(`name` SEPARATOR ', ') INTO @moutnigTypeStr FROM rfq_mountingtypemst   \n" +
                "					WHERE id IN (  \n" +
                "					SELECT PartTypeID FROM component_requiremountingtype WHERE refComponentID = pPartID AND isdeleted = 0  \n" +
                "					AND partTypeID NOT IN (SELECT c.mountingtypeID FROM rfq_lineitems_alternatepart  ra  \n" +
                "					LEFT JOIN component c ON c.id = ra.mfgPNID  \n" +
                "					WHERE ra.partID = pPartID AND ra.isDeleted = 0));  \n" +
                "			SET mountingTypeErrorMsg = CONCAT(mountingTypeErrorCode, ': ', REPLACE(mountingTypeError, \"<% Mounting Types %>\", @moutnigTypeStr));   \n" +
                "			UPDATE rfq_lineitems  SET requireMountingTypeStep = 0, requireMountingTypeError = mountingTypeErrorMsg WHERE partID = pPartID AND isDeleted = FALSE LIMIT 1;                 \n" +
                "		ELSE  \n" +
                "			UPDATE rfq_lineitems  SET requireMountingTypeStep = 1, requireMountingTypeError = NULL WHERE partID = pPartID AND isDeleted = FALSE LIMIT 1;   \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;                                        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2624,'2.00','V1','User Story 22193: Cost-Summary Tab Changes - Jignesh K '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2624:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCode` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCode`(		                                                                                                                \n" +
                "    IN pWhereClause VARCHAR(16383),                                                                                                                \n" +
                "    IN puserID VARCHAR(50),                                                                                          \n" +
                "    IN pnickName VARCHAR(20),                                                                                                          \n" +
                "    IN pprefix VARCHAR(20),                                                                                                          \n" +
                "    IN puid VARCHAR(20),                                                                                                      \n" +
                "    IN pComponentID INT,                                                                                                  \n" +
                "    IN pCustomerID INT,                                                                                                  \n" +
                "    IN pCPN BOOL,                                                                                                  \n" +
                "    IN pMFGAvailabel BOOL,                                                                                                  \n" +
                "    IN pRefCpnMfgID INT,                                                                                              \n" +
                "    IN pAssyID INT,                                                                                              \n" +
                "    IN pSalesOrderDetailID INT,		                                                                                              \n" +
                "    IN pReceiveMaterialType VARCHAR(255),                                                                                    \n" +
                "    IN pkitAssemblyID INT,                                                                              \n" +
                "    IN pBarcodeID INT,                              \n" +
                "    IN pBOMLineID INT 	                                                                                             \n" +
                "    )  \n" +
                "BEGIN                                                                                                              \n" +
                "	CALL Sproc_MatchBarCodeAndSaveDelimiters (pWhereClause,puserID,pnickName,pprefix,puid,pComponentID,pCustomerID,pCPN,pMFGAvailabel,pRefCpnMfgID,pAssyID,pSalesOrderDetailID,pReceiveMaterialType,pkitAssemblyID,pBarcodeID,pBOMLineID);	      \n" +
                "	SELECT * FROM tempUIDSuccessDetail;      \n" +
                "	SELECT * FROM tempUIDComponentDetail;    \n" +
                "	SELECT * FROM tempPurchaseInspectionDetail;									      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                                                                                                                    \n" +
                "    IN pWhereClause VARCHAR(16383),                                                                                                                    \n" +
                "    IN puserID VARCHAR(50),                                                                                              \n" +
                "    IN pnickName VARCHAR(20),                                                                                                              \n" +
                "    IN pprefix VARCHAR(20),                                                                                                              \n" +
                "    IN puid VARCHAR(20),                                                                                                          \n" +
                "    IN pComponentID INT,                                                                                                      \n" +
                "    IN pCustomerID INT,                                                                                                      \n" +
                "    IN pCPN BOOL,                                                                                                      \n" +
                "    IN pMFGAvailabel BOOL,                                                                                                      \n" +
                "    IN pRefCpnMfgID INT,                                                                                                  \n" +
                "    IN pAssyID INT,                                                                                                  \n" +
                "    IN pSalesOrderDetailID INT,		                                                                                                  \n" +
                "    IN pReceiveMaterialType VARCHAR(255),                                                                                        \n" +
                "    IN pkitAssemblyID INT,                                                                                  \n" +
                "    IN pBarcodeID INT,                                  \n" +
                "    IN pBOMLineID INT 	                                                                                                 \n" +
                "    )  \n" +
                "BEGIN                                                                                                                    \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                                                                                                    \n" +
                "	DECLARE v_delimiter VARCHAR(10);                                                                                                                    \n" +
                "	DECLARE v_length INT;                                                                                                                     \n" +
                "	DECLARE v_fieldType INT;                                                                                                                         \n" +
                "	DECLARE v_entityId INT;                                                                                                                    \n" +
                "	DECLARE v_dataElementId INT;                                                                                                                    \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                                                                                                                    \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                                                                                                                    \n" +
                "	DECLARE strLabel VARCHAR(2000);                                                                                                                    \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                                                                                                                    \n" +
                "	DECLARE StaticField VARCHAR(100);                                                                                              \n" +
                "	DECLARE DynamicField VARCHAR(100);		                                                                                              \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                                                                                                                    \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');                                                                                                                    \n" +
                "	DECLARE plen,slen INT;                                                                                                                    \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                                                                                                                    \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                                                                                                                \n" +
                "	DECLARE barcode_type_id INT;                                                                                                          \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);                                                                                                      \n" +
                "	DECLARE UpdateValue VARCHAR(16383);                                                                                       \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';                                                                                      \n" +
                "	DECLARE v_SupplierID INT;                                                                                  \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);                                                                                    \n" +
                "	DECLARE v_barcode_id INT;                                                                                  \n" +
                "	DECLARE v_barcode_count INT;                                                                                  \n" +
                "	DECLARE v_NumberOfPart INT;                                                                                   \n" +
                "	DECLARE v_rfqLineItemsID INT;                                                             \n" +
                "	DECLARE v_componentCount INT;                                                          \n" +
                "	DECLARE v_componentId INT;                                                                \n" +
                "	DECLARE v_mfgPartNO VARCHAR(50);                                                          \n" +
                "	DECLARE v_partMFG INT;                                                              \n" +
                "	DECLARE v_isGoodPart TINYINT(1);                                                          \n" +
                "	DECLARE v_restrictUsePermanently TINYINT(1);                                                          \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT(1);                                                          \n" +
                "	DECLARE v_restrictUseInBOM TINYINT(1);                                                    \n" +
                "	DECLARE v_isInstall TINYINT(1);                                                     \n" +
                "	DECLARE v_isBOMLineClean TINYINT(1);                                                  \n" +
                "	DECLARE v_BOMLineId INT(11);                                                \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT(1);                                                \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT(1);                                                \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;                                                \n" +
                "	DECLARE v_PIDCode VARCHAR(50);                                             \n" +
                "	DECLARE v_isPurchase TINYINT(1);                                          \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);                                     \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);                                  \n" +
                "	DECLARE v_BOMLineCount INT(11);                                   \n" +
                "	DECLARE v_AlternateLineId INT(11);                                 \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);                                \n" +
                "	DECLARE v_BOMAssyId INT(11);                                \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);                                \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT(1);                        \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT(1);                        \n" +
                "	DECLARE v_isCPNFlag TINYINT(1);           \n" +
                "	DECLARE v_dateCodeFormatID INT;             \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                                                                                                                     \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                                                                                                                    \n" +
                "	(                                                                                                                    \n" +
                "		errorText LONGTEXT,                                                                                                                    \n" +
                "		IsSuccess VARCHAR (2),                                                                                                          \n" +
                "		MFGPart VARCHAR(10000)                                                                                                                         \n" +
                "	);                                                                                       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;                                                                                                                     \n" +
                "	CREATE TEMPORARY TABLE temp_Component_Sid_Stock                                                                                                                    \n" +
                "	(                                                                                                                    \n" +
                "		refcompid INT,                                                                                                                    \n" +
                "		pkgQty DECIMAL(18,6),                                                                                \n" +
                "		dateCode VARCHAR(10),                                                                                \n" +
                "		lotCode VARCHAR(255),                                                                                \n" +
                "		scanlabel VARCHAR(1000),                                                                                \n" +
                "		createdBy VARCHAR(255),                                                                                \n" +
                "		uid VARCHAR(14),                                                                                \n" +
                "		prefix VARCHAR(20),                                                                                \n" +
                "		nickName VARCHAR(50),                                                                                \n" +
                "		cpn TINYINT,                                                                                \n" +
                "		mfgAvailabel TINYINT,                                                                                \n" +
                "		refCPNMFGPNID INT,                                                                                \n" +
                "		customerID INT,                                                                                \n" +
                "		assyID INT,                                                                                \n" +
                "		salesOrderDetailID INT,                                                                                \n" +
                "		receiveMaterialType VARCHAR(255),                                                                                \n" +
                "		refSupplierPartId INT,        \n" +
                "		mfrDateCode VARCHAR(50)                                                                                \n" +
                "	);                                                                                 \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;                                                                                                                     \n" +
                "	CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values                                                                                                                    \n" +
                "	(                                                                                                                    \n" +
                "		entityid INT,                                                                                \n" +
                "		dataelementid INT,                                                                                \n" +
                "		`value` LONGTEXT,                                                                                \n" +
                "		createdBy VARCHAR(255)                                                                                \n" +
                "	);                                                                                                   \n" +
                "	-- get data from barcode templates with seprator                                                                   \n" +
                "	# return error code                                                                \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found                                                                \n" +
                "	# 0: Barcode template does not exist, Please add template                                                                \n" +
                "	# 1: Validation Clear                                                                \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component                                                                \n" +
                "	# 3: Mfgcode is not found                                                                \n" +
                "	# 4: MFG PN does not exist                                                                \n" +
                "	# 5: Multiple MFG PN found                                                                \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code                                                                \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly                                                                \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer                                                                \n" +
                "	# 9:  Multiple barcode template found.                                                                \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check                                                                \n" +
                "	# 11: MFG PN is incorrect part                                                              \n" +
                "	# 12: PID PID1 was restricted part at part master level.                                                            \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.                                                       \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.                                                      \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.                                                  \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.                                                \n" +
                "	# 17: PID is contain more than 1 BOM line.                           \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.                        \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.                                                       \n" +
                "  \n" +
                "	block1: BEGIN                      \n" +
                "		SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");                \n" +
                "		IF (pBarcodeID IS NULL) THEN                                                                                  \n" +
                "			SELECT COUNT(*), id, barcodeType, `name` INTO v_barcode_count, v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                                                    \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                 \n" +
                "			-- AND (CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;                                                                                     \n" +
                "  \n" +
                "			IF (v_barcode_count > 1) THEN                                                                                  \n" +
                "				SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                                                      \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                 \n" +
                "				-- AND (CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;                                                                                    \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                                                                                                     \n" +
                "				('Multiple barcode template found.',9,@multiple_barcode_string);	                                                                                                                    \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                       \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS         \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                  \n" +
                "			ELSE                                                                     \n" +
                "				/*SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                                                    \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND                                                                                  \n" +
                "				(CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;   */                                                                                  \n" +
                "				SET pBarcodeID = v_barcode_id;                                                                                  \n" +
                "			END IF;                                                                                  \n" +
                "		ELSE                                                                                   \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND id = pBarcodeID AND `status`=1;                                                                                  \n" +
                "		END IF;                                                         \n" +
                "  \n" +
                "		IF (barcode_type_id IS NULL) THEN                        \n" +
                "			/*SELECT COUNT(1) INTO v_NumberOfPart FROM                                                                                             \n" +
                "			(                                                                                            \n" +
                "				SELECT c.id,c.mfgPN FROM component c WHERE c.mfgPN=pWhereClause AND c.deletedAt IS NULL                                                                                            \n" +
                "				UNION                                                                                            \n" +
                "				SELECT c.id,c.mfgPN FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID                                                                                             \n" +
                "				WHERE (c.mfgPN=pWhereClause OR co.name=pWhereClause) AND co.deletedAt IS NULL AND c.deletedAt IS NULL                                                                                            \n" +
                "			) a;                    \n" +
                "			IF (v_NumberOfPart > 0) THEN   */                                                                              \n" +
                "				SET pWhereClause = CONCAT(\"NONE\", pWhereClause);       				                \n" +
                "				SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                    \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;                                                                                  \n" +
                "				SET pBarcodeID = v_barcode_id;                          \n" +
                "			/*END IF;  */              \n" +
                "		END IF;                                                                                   \n" +
                "  \n" +
                "		-- tempregexp;    	                                                                                            \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */                                                                                    \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                                                                                                                  \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND id = pBarcodeID;                                                                                  \n" +
                "			SET v_BarcodeType = '2D';                                                                                                          \n" +
                "		ELSE /* barcode 1D */                   \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                                                                                                                   \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND id = pBarcodeID;                 \n" +
                "			SET v_BarcodeType = '1D';                                                                                                       \n" +
                "		END IF;                                                                                  \n" +
                "	END block1;                      \n" +
                "  \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                                                                  \n" +
                "		block2: BEGIN                                                                                  \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found                                                                                                                    \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR                                                                                                                    \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                                                                                                                 \n" +
                "				WHERE refbrID = pBarcodeID AND deletedAt IS NULL;                                                                                                             \n" +
                "			-- declare exit loop if data not found                                                                                                                    \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                                                                                                    \n" +
                "			-- if any record match found than  check for delimiter and its value                                                                                                               \n" +
                "			IF (pbr_template_ID > 0) THEN                                                                                                                    \n" +
                "				-- create temporary table for deliemeter and component dataelement                                                                                                                    \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                                                                                                                    \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                                                                                                                    \n" +
                "					pentityId INT,                                                                                                                    \n" +
                "					pdataElementId INT,                                                                                                                    \n" +
                "					pdelimiter_value VARCHAR(200)                                                                                                                    \n" +
                "				);                                                                                                               \n" +
                "				-- create temporary table for separator string values                                                                                                                    \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                                                                                                                    \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));                                                                                                          \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string                                                                                                                    \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND id = pBarcodeID;                                                                                                         \n" +
                "				-- open cursor                                                                                                                    \n" +
                "				OPEN barcodeMatch_cursor;                                                                                                                    \n" +
                "				-- set str label as whereclause                                                                                                                    \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");                 \n" +
                "				-- if prefix is found than remove those from actual string match                                                                                                                    \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN				                                                                                                                    \n" +
                "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                                            \n" +
                "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));                                                                                                                    \n" +
                "				 END IF;                                                                                                                   \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match                                                                                                                     \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN                                                                                                                    \n" +
                "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                                                                                                    \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                                                                                                    \n" +
                "				 END IF;	                                            \n" +
                "				-- insert all values after seprator split                                                                                          \n" +
                "  \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                                        				                \n" +
                "				PREPARE stmt1 FROM @SQL;                                                                                                                    \n" +
                "				EXECUTE stmt1;                                                                          \n" +
                "				-- create dynamic query to insert in recieving material                                                                                                                    \n" +
                "				SET QueryForStatic = 'insert into temp_Component_Sid_Stock';                                                                                               \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template                                                                                                                    \n" +
                "				barcodeMatch_loop:LOOP                                                                                                 \n" +
                "					-- get all five selected values                                                                                                                    \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                                                                                                            \n" +
                "					-- exit loop if no record found for barcode match                                                                                                                    \n" +
                "					IF exit_loop THEN                                                                                                               \n" +
                "						CLOSE barcodeMatch_cursor;                                                                                                                    \n" +
                "						LEAVE barcodeMatch_loop;                                                                                                                    \n" +
                "					END IF;                                                                                                               \n" +
                "  \n" +
                "					-- dynamic query to get dellimeter string with values from string                                                                                                                    \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                                                                                                                    \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                                                                                                                    \n" +
                "					EXECUTE stmtdelimiter;                                                                                                          \n" +
                "  \n" +
                "					-- get delimiter values from string                                                                                                                    \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                                                                                                            \n" +
                "					-- check for field type is static or dynamic                                                                                                                    \n" +
                "					-- if static field than check for mfg code and mfg part number          \n" +
                "					IF v_fieldType = 0  THEN                                                                                                                \n" +
                "						-- component_sid_stock                                                                                                                     \n" +
                "						-- get static field name from barcode table delimiter data element id                                                                                                                    \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                                                                                                                      \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                                                                                                                    \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN                                                                                                          \n" +
                "							SET MFG_Part_No = delimiter_value_data;                                                                                                          \n" +
                "							IF(pComponentID = 0)THEN                                                         \n" +
                "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;                                                         \n" +
                "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS                                                        \n" +
                "								SELECT id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission FROM                                                                                             \n" +
                "								(                                                                                            \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission                                                           \n" +
                "									FROM 	component c                                                           \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL                                                                                            \n" +
                "									UNION                                                                                            \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission                                                           \n" +
                "									FROM 		component_otherpn co                                                           \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID                                                                                             \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL                                                                                            \n" +
                "								) a;                                                        \n" +
                "  \n" +
                "								SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;                 \n" +
                "								IF (v_componentCount > 1) THEN                                                        \n" +
                "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;                                                         \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS                                                        \n" +
                "									SELECT * FROM temp_component_detail WHERE mfgcodeID > 0;                                                        \n" +
                "  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;                                                        \n" +
                "									IF (v_componentCount < 2) THEN                                                        \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                                 \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                                          \n" +
                "										FROM 	temp_component_supplier_detail;                                                        \n" +
                "									END IF;                                                        \n" +
                "								ELSE                                                         \n" +
                "									SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                                 \n" +
                "										INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                                         \n" +
                "									FROM 	temp_component_detail;                                                        \n" +
                "								END IF;                                                        \n" +
                "  \n" +
                "								/*SELECT COUNT(1), id, mfgPN, mfgcodeID, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission FROM                                                                                             \n" +
                "								(                                                                                            \n" +
                "									SELECT 	c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission                                                           \n" +
                "									FROM 	component c                                                           \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL                                                                                            \n" +
                "									UNION                                                                                            \n" +
                "									SELECT 		c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission                                                           \n" +
                "									FROM 		component_otherpn co                                                           \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID                                                                                             \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL                                                                                            \n" +
                "								) a; */                                                        \n" +
                "							ELSE                                                                                                \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                                  \n" +
                "									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                                           \n" +
                "								FROM 	component                                                           \n" +
                "								WHERE 	id = pComponentID AND deletedAt IS NULL;                                                                                                          \n" +
                "							END IF;                                                                  \n" +
                "  \n" +
                "							/*IF (v_componentCount > 1) THEN                                                          \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission                                                           \n" +
                "								FROM 	component                                                           \n" +
                "								WHERE 	mfgPN = delimiter_value_data AND mfgcodeID > 0 AND deletedAt IS NULL;                                                          \n" +
                "							END IF;  */                                                        \n" +
                "  \n" +
                "							IF v_componentCount > 1 THEN                                                                                                          \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                    \n" +
                "								LEAVE barcodeMatch_loop;                                                                                                          \n" +
                "							END IF;                                                        \n" +
                "  \n" +
                "							IF (v_isGoodPart != 1) THEN                                                                \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                    \n" +
                "								LEAVE barcodeMatch_loop;                                                                   \n" +
                "							END IF;                                                                \n" +
                "  \n" +
                "							IF (v_restrictUsePermanently = 1) THEN                                                              \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                    \n" +
                "								LEAVE barcodeMatch_loop;                                                              \n" +
                "							END IF;                                                \n" +
                "  \n" +
                "							IF (v_restrictPackagingAliasPermanently = 1) THEN                                                              \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                    \n" +
                "								LEAVE barcodeMatch_loop;                                                              \n" +
                "							END IF;                                                              \n" +
                "  \n" +
                "							IF (@barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN                                                                                      \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';                                                                                      \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                    \n" +
                "								LEAVE barcodeMatch_loop;                                                                                        \n" +
                "							END IF;                                                                                      \n" +
                "  \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND deletedAt IS NULL;                                                                                      \n" +
                "							IF (@MFGType = 'DIST') THEN                                                                                      \n" +
                "								SET v_SupplierID = v_componentId;                                                                                      \n" +
                "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier;                                                                                      \n" +
                "							END IF;                                 \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN                                    \n" +
                "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE deletedAt IS NULL AND refSalesOrderDetID = pSalesOrderDetailID;			                                \n" +
                "								-- SELECT DISTINCT rfqLineItemsID INTO v_rfqLineItemsID FROM rfq_lineitems_alternatepart WHERE partID = pkitAssemblyID AND mfgPNID = v_componentId limit 1;				                                                                                        \n" +
                "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId   -- a.bomLineCleanStatus, a.description,                                               \n" +
                "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId  -- v_isBOMLineClean, v_bomErrorDescription,                                                                                  \n" +
                "								FROM 	(                    \n" +
                "									SELECT 	*                    \n" +
                "									FROM                                      \n" +
                "										(                                                                                  \n" +
                "											SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall, -- fun_getBOMLineCleanStatusErrorCategoryWise(rml.id, NULL, NULL, NULL, 3) AS bomLineCleanStatus,                                           \n" +
                "													-- CONCAT(IFNULL(rl.description, ''), IFNULL(rml.description,'')) description,                                 \n" +
                "													rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId                        \n" +
                "											FROM 		component_packagingalias cp                                                                                    \n" +
                "											LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid                                                                                    \n" +
                "											LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id                                                     \n" +
                "											INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID                                                                                   \n" +
                "											WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.deletedAt IS NULL                                                          \n" +
                "											UNION                                                                                    \n" +
                "											SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall, -- fun_getBOMLineCleanStatusErrorCategoryWise(rla.id, NULL, NULL, NULL, 3) AS bomLineCleanStatus,                                           \n" +
                "													-- CONCAT(IFNULL(rl.description, ''), IFNULL(rla.description,'')) description,                                 \n" +
                "													rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId                                                       \n" +
                "											FROM 		rfq_lineitems_alternatepart rla                                                    \n" +
                "											INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                                                                                                                   \n" +
                "											WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.deletedAt IS NULL                                                                        \n" +
                "											UNION                                   \n" +
                "											SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall, -- fun_getBOMLineCleanStatusErrorCategoryWise(rla.id, NULL, NULL, NULL, 3) AS bomLineCleanStatus,                                           \n" +
                "													-- CONCAT(IFNULL(rl.description, ''), IFNULL(rla.description,'')) description,                                 \n" +
                "													rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId                                                        \n" +
                "											FROM 		rfq_lineitems_alternatepart rla                                                    \n" +
                "											INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                                                                                                                   \n" +
                "											WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.deletedAt IS NULL AND custPNID IS NOT NULL                                   \n" +
                "											GROUP BY 	custPNID, rla.partID                        \n" +
                "  \n" +
                "											/*SELECT 		id, custPNID AS componentID, 0 AS restrictUseInBOMStep, isInstall, 1 AS bomLineCleanStatus, description, isPurchase, isBuyDNPQty,                                     \n" +
                "													lineID                                                     \n" +
                "											FROM 		rfq_lineitems                                                                                    \n" +
                "											WHERE 		partID = pkitAssemblyID AND custPNID IS NOT NULL AND deletedAt IS NULL*/                                                                                \n" +
                "										) b WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)                    \n" +
                "										GROUP BY b.lineID, b.assyId                    \n" +
                "								) a;                    \n" +
                "  \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN                                                                                        \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                    \n" +
                "									LEAVE barcodeMatch_loop;                                                      \n" +
                "								ELSEIF (v_BOMLineCount > 1) THEN                                                  \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                    \n" +
                "									LEAVE barcodeMatch_loop;                                                   \n" +
                "								ELSE                                \n" +
                "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN                                                                                        \n" +
                "										CLOSE barcodeMatch_cursor;                                                                                                                    \n" +
                "										LEAVE barcodeMatch_loop;                                                                                        \n" +
                "									END IF;                             \n" +
                "  \n" +
                "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;                                \n" +
                "									IF (v_isBOMLineClean = 0) THEN                                                  \n" +
                "										CLOSE barcodeMatch_cursor;                                                                                                                    \n" +
                "										LEAVE barcodeMatch_loop;                                                   \n" +
                "									END IF;                                \n" +
                "								END IF;                                                      \n" +
                "  \n" +
                "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN                                                    \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                    \n" +
                "									LEAVE barcodeMatch_loop;                                                    \n" +
                "								END IF;                                                     \n" +
                "							END IF;                                                                                        \n" +
                "							IF  v_componentCount = 1 THEN                             \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                                                                                                    \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"'); 	    				                                                                                                                    \n" +
                "							END IF;                                                                                              \n" +
                "						END IF;                                                                                                                    \n" +
                "  \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                                                                                                                    \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN                                                                                                            \n" +
                "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                                                                                                                    \n" +
                "						END IF;                                                                                                      \n" +
                "  \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                              \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                                                                                                                    \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                    \n" +
                "						END IF;        \n" +
                "  \n" +
                "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                              \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                                                                                                    \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                    \n" +
                "						END IF;                                                                                                                                                                                                \n" +
                "  \n" +
                "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                              \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');                                                                                                                    \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                    \n" +
                "  \n" +
                "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND deletedAt IS NULL;        \n" +
                "							IF (v_dateCodeFormatID IS NOT NULL) THEN        \n" +
                "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);        \n" +
                "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;        \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                                                                                                    \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');        \n" +
                "							END IF;        \n" +
                "						END IF;                                                                                                                                                                                                \n" +
                "  \n" +
                "						/*IF v_componentCount > 1 THEN                                                                                                          \n" +
                "							CLOSE barcodeMatch_cursor;                                                                                                                    \n" +
                "							LEAVE barcodeMatch_loop;                                                                                                          \n" +
                "						END IF;      */                                                                                                       \n" +
                "  \n" +
                "						-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                                                                                                                    \n" +
                "						-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                                                                                                                     \n" +
                "  \n" +
                "						-- select strFeildforInsert,valuesforInsert;                                                                                                                    \n" +
                "  \n" +
                "					ELSE                                                                                                \n" +
                "						-- component_sid_stock_dataelement_Values                                                                                                                      \n" +
                "						-- dynamic fields                                                                                                   \n" +
                "						/*SET DynamicField=(SELECT dataElementName FROM dataelement WHERE dataElementID=v_dataElementId AND deletedAt IS NULL);                                                                                               \n" +
                "						IF(DynamicField=\"Mfg Date Code\" AND delimiter_value_data IS NOT NULL) THEN                                                                                                    \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                                                                                                    \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                    \n" +
                "						END IF;*/                                                                                                    \n" +
                "  \n" +
                "						/*IF(DynamicField=\"Lot Code\" AND delimiter_value_data IS NOT NULL) THEN                                                                                                    \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                                                                                                    \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                    \n" +
                "						END IF;*/                                                                                              \n" +
                "  \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE                                                                                                                     \n" +
                "							dataElementID=v_dataElementId AND deletedAt IS NULL;                                                                                                                 \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                                                                                                                     \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);                                                                                                             \n" +
                "					END IF;                                                                                                                    \n" +
                "  \n" +
                "				END LOOP barcodeMatch_loop;                                                             \n" +
                "				-- check if mfg and component both found than                                                            \n" +
                "				IF v_componentCount = 0 THEN                                                                                                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not exist',4,MFG_Part_No);                                                                                                                    \n" +
                "				ELSEIF (v_componentCount > 1) THEN                                                                                                          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFR PN found',5,MFG_Part_No);                                                                                                                            \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                             \n" +
                "					IF (v_isGoodPart = 2) THEN                                        \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);                                                              \n" +
                "					ELSE                                        \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);                                                              \n" +
                "					END IF;                                        \n" +
                "				ELSEIF (v_restrictUsePermanently = 1) THEN                                                              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);                                                              \n" +
                "				ELSEIF (v_restrictPackagingAliasPermanently = 1) THEN                             \n" +
                "					IF (v_isCPNFlag = 1) THEN                        \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);                                                              \n" +
                "					ELSE                         \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);                                                              \n" +
                "					END IF;                        \n" +
                "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN                                                                                    \n" +
                "					-- In this case pass the barcodeid insted of MFGPN because in this case we have to not use the MFGPN                                                                                  \n" +
                "					-- if (v_BarcodeType = 1) then                                                                                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);                                                                                        \n" +
                "					-- else                                                                                  \n" +
                "					-- 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please check the manufacturer and if not exist then create new template for same manufacturer.'),8,v_barcode_id);                                                                                        \n" +
                "					-- end if;                                                                                  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN                                                                                                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN or CPN is not found in bom of this assembly.',7,MFG_Part_No);                                                                                        \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN                                                                                                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));                                                                                        \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN                                                \n" +
                "					-- INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Due to the below pending issues/status your BOM line is not clean. So, you can not allocate to kit.<br/><div class=\"cm-bom-error-block\">',v_bomErrorDescription,'</div>'),15,MFG_Part_No);                                                                                        \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line no <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> is not clean. So, you can not allocate UMID into kit.'),15,MFG_Part_No);                                                                                        \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN                                                                                                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);                                                                                        \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN                                                                                                                    \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);                                                                                       \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN                                                                                                                    \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);                                                                                       \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN                                                                                                                    \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);                                                                                       \n" +
                "				ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN                                                                                                                    \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                                                                                                                    \n" +
                "					IF @Mfgmatched = 0  THEN                                                                                                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MFR PN are avialable but not matched in component',2,MFG_Part_No);							                                                                                                                    \n" +
                "					END IF;									                                                                                                                    \n" +
                "				ELSE 		                                                                                                          \n" +
                "					IF @mfgCount = 0 THEN                                                                                                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);                                                                                                                    \n" +
                "					END IF;	                                                                                                                    \n" +
                "					/*IF v_componentCount = 0 THEN                                                                                                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not exist',4,MFG_Part_No);                                                                                                                    \n" +
                "					END IF;*/	                                                                                                                    \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND v_componentCount=0  THEN                                                                                                                      \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                                                                                                                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MFR PN is not Found',0,MFG_Part_No);                                                                                                                    \n" +
                "					END IF;						                                                                                                                    \n" +
                "				END IF;	                                                                \n" +
                "  \n" +
                "				IF (pCPN = 1) THEN                                                                                                   \n" +
                "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;                                                                                                      \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;                                                                                                      \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN                                                                                                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);                                                                                                                    \n" +
                "					END IF;                                                                         \n" +
                "  \n" +
                "					IF (@isCPNPart != 1) THEN                                                                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);                                                                                                                    \n" +
                "					END IF;                                                                                                   \n" +
                "				END IF;                                                                                                  \n" +
                "				IF (puid IS NOT NULL) THEN                                                   \n" +
                "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                                                                                                    \n" +
                "						IF (pprefix = '') THEN	                                                                                     \n" +
                "							CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					                                                                                                      \n" +
                "							SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;                                                                                                      \n" +
                "						END IF;                                                                                                   \n" +
                "  \n" +
                "						-- must call statements in sequence          				                                                                                                          \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',',','uid',')','VALUES','(',valuesforInsert,',',puserID,',\"',puid,'\")',';');                                                                																		        						        \n" +
                "						PREPARE stmt1 FROM @SQL1;                                                                                                                    \n" +
                "						EXECUTE stmt1;                                                                                                                 \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set prefix=','\"',pprefix,'\"');                                                                                                      \n" +
                "						IF (pnickName IS NOT NULL) THEN                                                                                                      \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');                                                                                                      \n" +
                "						END IF;                                                                                        \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);                                                                                  \n" +
                "  \n" +
                "						IF (pRefCpnMfgID IS NOT NULL) THEN                                                                                                      \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);                                                                                                      \n" +
                "						END IF;                                                                                         \n" +
                "  \n" +
                "						IF (pCustomerID IS NOT NULL) THEN                                                                                                      \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);                                                                                                      \n" +
                "						END IF;                                                                                     \n" +
                "  \n" +
                "						IF (pAssyID IS NOT NULL) THEN                                                                                                      \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);                                                                                                      \n" +
                "						END IF;                                                                                       \n" +
                "  \n" +
                "						IF (pSalesOrderDetailID IS NOT NULL) THEN                                                                                                      \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);                                                                                                      \n" +
                "						END IF;                                                                                        \n" +
                "  \n" +
                "						IF (pReceiveMaterialType IS NOT NULL) THEN                                                                                                      \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');                                                                                                   \n" +
                "						END IF;                                                                                     \n" +
                "  \n" +
                "						IF (v_SupplierID IS NOT NULL) THEN                                                                                                      \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);                                                                                                      \n" +
                "						END IF;                                                                                     \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue,' where uid=','\"',puid,'\"');                 \n" +
                "						SET @sql2 = UpdateValue;	                                                                                                                     \n" +
                "						PREPARE stmt2 FROM @SQL2;                                                                                                                    \n" +
                "						EXECUTE stmt2;	                                                                                  \n" +
                "  \n" +
                "						IF (pkitAssemblyID IS NULL) THEN                                \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                                                                                                                    \n" +
                "						ELSE                                 \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));                                                                                                                    \n" +
                "						END IF;                                \n" +
                "  \n" +
                "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                                                                                                          \n" +
                "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)                                                                                                                     \n" +
                "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                                                                                                                    \n" +
                "						END IF;                                                                                                                    \n" +
                "  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                    \n" +
                "						SELECT * FROM temp_Component_Sid_Stock;                                                                                    \n" +
                "  \n" +
                "						SELECT 	c.*,              \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,              \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,               \n" +
                "							csup.packageQty AS supplierPkgQty,               \n" +
                "							csup.mfgcodeID AS supplierMfgId,               \n" +
                "							mcm.mfgcode AS supplierMFGCode,               \n" +
                "							mcm.mfgName AS supplierMFGName,               \n" +
                "							csup.mfgPN AS supplierMFGPN,               \n" +
                "							csup.packagingID AS supplierPackagingId,               \n" +
                "							fun_getPackagingNameByID(csup.packagingID) AS supplierPackagingName,               \n" +
                "							csup.minimum AS supplierMinimum,               \n" +
                "							ccpn.id AS cpnID,               \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,               \n" +
                "							rfqroh.rohsIcon AS rohsIcon,               \n" +
                "							rfqroh.name AS rohsName,               \n" +
                "							rfqmou.name AS mountingTypeName,               \n" +
                "							um.unitName AS uomName,              \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE deletedAt IS NULL AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,              \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE deletedAt IS NULL AND id = mg.dateCodeFormatID) dateCodeFormat,              \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId              \n" +
                "						FROM component AS c                                                                                 \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID                                                                                \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID                                                                                \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID              \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID                                                                                \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                                                                            \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID                                                                                \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID                                                                  \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom                                                                               \n" +
                "						WHERE c.id = v_componentId;                                                                                \n" +
                "  \n" +
                "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`                                                                                \n" +
                "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv                                                                                 \n" +
                "						LEFT OUTER JOIN `dataelement` AS dl                                                                                \n" +
                "						ON cssdlv.dataelementid = dl.dataElementID AND dl.deletedAt IS NULL;                                                                       \n" +
                "  \n" +
                "						SELECT 	id, refComponentID, refCPNPartID                                       \n" +
                "						FROM 	component_cust_alias_rev_pn                                       \n" +
                "						WHERE 	refCPNPartID = v_componentId AND deletedAt IS NULL;                        \n" +
                "  \n" +
                "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (                                                          \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND deletedAt IS NULL                                                           \n" +
                "						) AND deletedAt IS NULL;                                \n" +
                "  \n" +
                "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,                         \n" +
                "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN                                       \n" +
                "						FROM 		rfq_lineitems_alternatepart rla                                      \n" +
                "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.deletedAt IS NULL                          \n" +
                "						WHERE 		rla.deletedAt IS NULL                                       \n" +
                "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))                                       \n" +
                "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)                                       \n" +
                "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);                                                \n" +
                "  \n" +
                "						SELECT 	id,     \n" +
                "							partId,     \n" +
                "							inspectionRequirementId,  \n" +
                "							fun_getInspectionRequirementById(inspectionRequirementId) requirement     \n" +
                "						FROM 	componenet_inspection_requirement_det    \n" +
                "						WHERE 	partId = v_componentId    \n" +
                "								AND isDeleted = 0;  \n" +
                "					ELSE                                                                                                                   \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                                                    \n" +
                "					END IF;                                                                    \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                                                                       \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                  \n" +
                "				ELSE                                                                \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);           \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                       \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                       \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                               \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                       \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS          \n" +
                "					SELECT 	c.*,               \n" +
                "						fun_getPackagingNameByID(c.packagingID) AS packagingName,               \n" +
                "						CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,               \n" +
                "						csup.packageQty AS supplierPkgQty,               \n" +
                "						csup.mfgcodeID AS supplierMfgId,               \n" +
                "						mcm.mfgcode AS supplierMFGCode,               \n" +
                "						mcm.mfgName AS supplierMFGName,               \n" +
                "						csup.packagingID AS supplierPackagingId,               \n" +
                "						csup.mfgPN AS supplierMFGPN,               \n" +
                "						csup.id AS supplierMFGPNID,               \n" +
                "						fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,               \n" +
                "						fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,                         \n" +
                "						ccpn.id AS cpnID,               \n" +
                "						ccpn.mfgcodeID AS cpnMFGCodeID,               \n" +
                "						rfqroh.rohsIcon AS rohsIcon,               \n" +
                "						rfqroh.name AS rohsName,               \n" +
                "						rfqmou.name AS mountingTypeName,               \n" +
                "						um.unitName AS uomName,              \n" +
                "						(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE deletedAt IS NULL AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,              \n" +
                "						(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE deletedAt IS NULL AND id = mg.dateCodeFormatID) dateCodeFormat,              \n" +
                "						mg.dateCodeFormatID AS dateCodeFormatId              \n" +
                "					FROM component AS c                                                                                 \n" +
                "					LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID                                                                                \n" +
                "					LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID                                                                                \n" +
                "					LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID              \n" +
                "					LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID                                                                                \n" +
                "					LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                                                                             \n" +
                "					LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID                                                                           \n" +
                "					LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID                                                                    \n" +
                "					LEFT JOIN uoms AS um ON um.id = c.uom                                                                  \n" +
                "					WHERE c.id = v_componentId;             \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempPurchaseInspectionDetail;                     \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempPurchaseInspectionDetail AS        \n" +
                "					SELECT 	id,     \n" +
                "						partId,     \n" +
                "						inspectionRequirementId,  \n" +
                "						fun_getInspectionRequirementById(inspectionRequirementId) requirement     \n" +
                "					FROM 	componenet_inspection_requirement_det    \n" +
                "					WHERE 	partId = v_componentId    \n" +
                "							AND isDeleted = 0;                                                         \n" +
                "  \n" +
                "				END IF;                                                                              \n" +
                "			ELSE                 \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                                                                                                     \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);	                                                                                                                    \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                                                                                                                      \n" +
                "			END IF;                                                                                                                    \n" +
                "  \n" +
                "		END block2;        \n" +
                "	ELSE      \n" +
                "		IF (puid IS NOT NULL) THEN      \n" +
                "			SELECT * FROM tempUIDSuccessDetail;      \n" +
                "		ELSE       \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                       \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS      \n" +
                "			SELECT 1;      \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempPurchaseInspectionDetail;                     \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempPurchaseInspectionDetail AS     \n" +
                "			SELECT 1;       \n" +
                "		END IF;      \n" +
                "	END IF;                                                                                                                              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2625,'2.00','V1','Sproc_MatchBarCode, Sproc_MatchBarCodeAndSaveDelimiters - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2625:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-07-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getInspectionRequirementById` ;  \n" +
                "CREATE FUNCTION `fun_getInspectionRequirementById`(          \n" +
                "		pRequirementId INT      \n" +
                ") RETURNS VARCHAR(255) CHARSET utf8mb4  \n" +
                "BEGIN        	  \n" +
                "	DECLARE v_Requirement VARCHAR(255);          \n" +
                "	SELECT 	requirement  \n" +
                "	INTO	v_Requirement  \n" +
                "	FROM 	inspection_mst   \n" +
                "	WHERE 	id = pRequirementId  \n" +
                "			AND isDeleted = 0;  \n" +
                "  \n" +
                "	RETURN v_Requirement;          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2626,'2.00','V1','fun_getInspectionRequirementById - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2626:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 29-07-2020 *********************************** */
                "create table supplier_quote_mst(  \n" +
                "id	           INT(11) auto_increment not null PRIMARY KEY,  \n" +
                "supplierID   INT(11) DEFAULT NULL,	  \n" +
                "quoteNumber	   varchar(50) DEFAULT NULL,  \n" +
                "quoteDate	   date	DEFAULT NULL,  \n" +
                "`reference`       varchar(255) DEFAULT NULL,	  \n" +
                "shippingAddressID  INT(11) DEFAULT NULL,	  \n" +
                "billingAddressID   INT(11) DEFAULT NULL,  \n" +
                "quoteStatus	   varchar(5) not null,  \n" +
                "createdBy 	   varchar(255)	not null,  \n" +
                "createdAt 	   datetime	 not null DEFAULT CURRENT_TIMESTAMP,  \n" +
                "createByRoleId	   int(11) DEFAULT NULL,	  \n" +
                "updatedBy 	   varchar(255)	DEFAULT NULL,   \n" +
                "updatedAt 	   datetime	DEFAULT CURRENT_TIMESTAMP,  \n" +
                "updateByRoleId 	   int(11) DEFAULT NULL,   \n" +
                "isDeleted 	   tinyint(1) not null DEFAULT 0,  \n" +
                "deletedAt 	   datetime	 DEFAULT NULL,   \n" +
                "deletedBy 	   varchar(255)	DEFAULT NULL,   \n" +
                "deleteByRoleId	   int(11)	DEFAULT NULL,   \n" +
                "KEY FK_supplier_quote_mst_shippingAddressID (shippingAddressID),    \n" +
                "CONSTRAINT FK_supplier_quote_mst_shippingAddressID FOREIGN KEY (shippingAddressID) REFERENCES customer_addresses (id),  \n" +
                "KEY FK_supplier_quote_mst_billingAddressID (billingAddressID),    \n" +
                "CONSTRAINT FK_supplier_quote_mst_billingAddressID FOREIGN KEY (billingAddressID) REFERENCES customer_addresses (id),  \n" +
                "KEY FK_supplier_quote_mst_supplierID(supplierID),   \n" +
                "CONSTRAINT FK_supplier_quote_mst_supplierID FOREIGN KEY (supplierID) REFERENCES mfgcodemst (id)    \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 29-07-2020 *********************************** */
                "create table supplier_quote_parts_det(  \n" +
                "id	        INT(11) auto_increment not null PRIMARY KEY,            \n" +
                "supplierQuoteMstID  INT(11)  not null,  \n" +
                "partID	            INT(11) DEFAULT NULL,  \n" +
                "supplierPartID	    INT(11) DEFAULT NULL,  \n" +
                "isActive	    tinyInt(1)   not null,  \n" +
                "createdBy 	    varchar(255) not null,	  \n" +
                "createdAt 	    datetime   not null DEFAULT CURRENT_TIMESTAMP,  \n" +
                "createByRoleId	    int(11)	DEFAULT NULL,  \n" +
                "updatedBy 	    varchar(255) DEFAULT NULL,	  \n" +
                "updatedAt 	    datetime	DEFAULT CURRENT_TIMESTAMP,  \n" +
                "updateByRoleId 	    int(11)	DEFAULT NULL,  \n" +
                "isDeleted 	    tinyint(1)	 not null DEFAULT 0,  \n" +
                "deletedAt 	    datetime	DEFAULT NULL,  \n" +
                "deletedBy 	    varchar(255)	DEFAULT NULL,  \n" +
                "deleteByRoleId	    int(11) DEFAULT NULL,  \n" +
                "KEY FK_supplier_quote_parts_det_supplierQuoteMstID (supplierQuoteMstID),    \n" +
                "CONSTRAINT FK_supplier_quote_parts_det_supplierQuoteMstID FOREIGN KEY (supplierQuoteMstID) REFERENCES supplier_quote_mst (id),  \n" +
                "KEY FK_supplier_quote_parts_det_partID (partID),    \n" +
                "CONSTRAINT FK_supplier_quote_parts_det_partID FOREIGN KEY (partID) REFERENCES component (id),  \n" +
                "KEY FK_supplier_quote_parts_det_supplierPartID (supplierPartID),    \n" +
                "CONSTRAINT FK_supplier_quote_parts_det_supplierPartID FOREIGN KEY (supplierPartID) REFERENCES component (id)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 29-07-2020 *********************************** */
                "create table supplier_quote_part_attribute(  \n" +
                "id    INT(11) auto_increment not null PRIMARY KEY,        \n" +
                "supplierQuotePartDetID     INT(11)  not null,  \n" +
                "attributeID	 INT(11)  not null,  \n" +
                "createdBy 	varchar(255) not null,  \n" +
                "createdAt 	    datetime   not null DEFAULT CURRENT_TIMESTAMP,  \n" +
                "createByRoleId	  int(11) DEFAULT NULL,	  \n" +
                "updatedBy  varchar(255)	DEFAULT NULL,  \n" +
                "updatedAt 	    datetime	DEFAULT CURRENT_TIMESTAMP,  \n" +
                "updateByRoleId 	int(11)	DEFAULT NULL,  \n" +
                "isDeleted 	    tinyint(1)	not null DEFAULT 0,  \n" +
                "deletedAt datetime	DEFAULT NULL,  \n" +
                "deletedBy varchar(255)	DEFAULT NULL,  \n" +
                "deleteByRoleId int(11) DEFAULT NULL,  \n" +
                "KEY FK_supplier_quote_part_attribute_supplierQuotePartDetID (supplierQuotePartDetID),    \n" +
                "CONSTRAINT FK_supplier_quote_part_attribute_supplierQuotePartDetID FOREIGN KEY (supplierQuotePartDetID) REFERENCES supplier_quote_parts_det (id),  \n" +
                "KEY FK_supplier_quote_part_attribute_attributeID (attributeID),    \n" +
                "CONSTRAINT FK_supplier_quote_part_attribute_attributeID FOREIGN KEY (attributeID) REFERENCES quotecharges_dynamic_fields_mst (id)  \n" +
                ");  \n" +

                /* **************************** Add Script Version -> 29-07-2020 *********************************** */
                "create table supplier_quote_part_price  (  \n" +
                "id    INT(11) auto_increment not null PRIMARY KEY,    \n" +
                "supplierQuotePartDetID	INT (11) not null,  \n" +
                "itemNumber	        int (11) DEFAULT NULL,  \n" +
                "qty	                decimal(18,8) DEFAULT NULL,  \n" +
                "leadTime	        int(11) DEFAULT NULL,    \n" +
                "UnitOfTime			varchar(1) DEFAULT NULL,  \n" +
                "UnitPrice		    decimal(18,8) DEFAULT NULL,  \n" +
                "`min` int(11) DEFAULT NULL,  \n" +
                "mult int(11) DEFAULT NULL,  \n" +
                "stock int(11) DEFAULT NULL,  \n" +
                "packageID int(11) DEFAULT NULL,  \n" +
                "reeling	int(11) DEFAULT NULL,  \n" +
                "NCNR int(11) DEFAULT NULL,  \n" +
                "createdBy 	        varchar(255)  not null	,  \n" +
                "createdAt 	    datetime   not null DEFAULT CURRENT_TIMESTAMP,  \n" +
                "createByRoleId	  int(11) DEFAULT NULL,	  \n" +
                "updatedBy  varchar(255)	DEFAULT NULL,  \n" +
                "updatedAt 	    datetime	DEFAULT CURRENT_TIMESTAMP,  \n" +
                "updateByRoleId 	int(11)	DEFAULT NULL,  \n" +
                "isDeleted 	    tinyint(1)	not null DEFAULT 0,  \n" +
                "deletedAt datetime	DEFAULT NULL,  \n" +
                "deletedBy varchar(255)	DEFAULT NULL,  \n" +
                "deleteByRoleId int(11) DEFAULT NULL,  \n" +
                "KEY FK_supplier_quote_part_price_supplierQuotePartDetID (supplierQuotePartDetID),    \n" +
                "CONSTRAINT FK_supplier_quote_part_price_supplierQuotePartDetID FOREIGN KEY (supplierQuotePartDetID) REFERENCES supplier_quote_parts_det (id),  \n" +
                "KEY FK_supplier_quote_part_price_packageID (packageID),    \n" +
                "CONSTRAINT FK_supplier_quote_part_price_packageID FOREIGN KEY (packageID) REFERENCES component_packagingmst (id)  \n" +
                ");  \n" +

                /* **************************** Add Script Version -> 29-07-2020 *********************************** */
                "create table supplier_quote_part_price_attribute(  \n" +
                "id    INT(11) auto_increment not null PRIMARY KEY,    \n" +
                "supplierQuotePartPriceID int(11)  not null,  \n" +
                "attributeID    int(11) not null,  \n" +
                "Price decimal(18,8)  DEFAULT NULL,  \n" +
                "createdBy 	        varchar(255)  not null	,  \n" +
                "createdAt 	    datetime   not null DEFAULT CURRENT_TIMESTAMP,  \n" +
                "createByRoleId	  int(11) DEFAULT NULL,	  \n" +
                "updatedBy  varchar(255)	DEFAULT NULL,  \n" +
                "updatedAt 	    datetime	DEFAULT CURRENT_TIMESTAMP,  \n" +
                "updateByRoleId 	int(11)	DEFAULT NULL,  \n" +
                "isDeleted 	    tinyint(1)	not null DEFAULT 0,  \n" +
                "deletedAt datetime	DEFAULT NULL,  \n" +
                "deletedBy varchar(255)	DEFAULT NULL,  \n" +
                "deleteByRoleId int(11) DEFAULT NULL,  \n" +
                "KEY FK_supplier_quote_part_price_attribute_supplierQuotePartPriceID (supplierQuotePartPriceID),    \n" +
                "CONSTRAINT FK_supplier_quote_part_price_attribute_supplierQuotePartPriceID FOREIGN KEY (supplierQuotePartPriceID) REFERENCES supplier_quote_part_price (id),  \n" +
                "KEY FK_supplier_quote_part_price_attribute_attributeID (attributeID),    \n" +
                "CONSTRAINT FK_supplier_quote_part_price_attribute_attributeID FOREIGN KEY (attributeID) REFERENCES quotecharges_dynamic_fields_mst(id)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 29-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2627,'2.00','V1',' Supplier quote - Dharmesh P '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2627:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 29-07-2020 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_BI_supplier_quote_mst` ;  \n" +
                "CREATE TRIGGER `Trg_BI_supplier_quote_mst` BEFORE INSERT ON `supplier_quote_mst`   \n" +
                "    FOR EACH ROW BEGIN    \n" +
                "	IF (SELECT COUNT(1) FROM supplier_quote_mst WHERE (`quoteNumber`= NEW.quoteNumber AND `supplierID` = NEW.supplierID) AND isdeleted = 0 AND deletedAt IS NULL) > 0 THEN           \n" +
                "		SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';         \n" +
                "	END IF;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-07-2020 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_BU_supplier_quote_mst` ;  \n" +
                "CREATE TRIGGER `Trg_BU_supplier_quote_mst` BEFORE UPDATE ON `supplier_quote_mst`   \n" +
                "    FOR EACH ROW BEGIN                   \n" +
                "	IF (NEW.isDeleted = 0 AND NEW.deletedAt IS NULL AND            \n" +
                "		(SELECT COUNT(1) FROM supplier_quote_mst      \n" +
                "		WHERE (`quoteNumber`= NEW.quoteNumber AND `supplierID` = NEW.supplierID) AND isdeleted = 0 AND deletedAt IS NULL AND id != NEW.id) > 0) THEN                         \n" +
                "            SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';                     	  \n" +
                "	END IF;                    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2628,'2.00','V1',' Supplier quote - Dharmesh P '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2628:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-07-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustPNListFromPN` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustPNListFromPN`(           \n" +
                "        IN pPartID INT(11),                                         \n" +
                "	IN pCPN TEXT        \n" +
                ")  \n" +
                "BEGIN            \n" +
                "	SET @cpnresult =  CONCAT(\"SELECT c.id, c.mfgPN, c.mfgcodeID, c.RoHSStatusID,  cpn.refCPNPartID,  \n" +
                "	(SELECT mfgCode FROM mfgCodemst WHERE id = c.mfgcodeID) AS mfgCode,    \n" +
                "	r.name AS RoHSName, r.rohsIcon    \n" +
                "	FROM component_cust_alias_rev_pn cpn    \n" +
                "	JOIN component c ON c.id = cpn.refComponentID     \n" +
                "	LEFT JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID    \n" +
                "	WHERE cpn.refCPNPartID IN (    \n" +
                "		SELECT id FROM component WHERE mfgCodeID = (    \n" +
                "			SELECT mfgCodeID FROM component WHERE id =\", pPartID ,\"    \n" +
                "			) AND mfgPn in (\",pCPN,\") AND isDeleted = 0    \n" +
                "			)     \n" +
                "	AND cpn.isDeleted = 0;\");   \n" +
                "	PREPARE cpnresult1 FROM @cpnresult;        \n" +
                "	EXECUTE cpnresult1;                                                                  \n" +
                "	DEALLOCATE PREPARE cpnresult1;   \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2629,'2.00','V1','User Story 22298: BOM Tab - RoHS Validation change based on parent RoHS - Jignesh K '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2629:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-07-2020 *********************************** */
                "DROP function IF EXISTS `fun_getShortagePerBuild_OLD_073020`;  \n" +
                "CREATE FUNCTION `fun_getShortagePerBuild_OLD_073020`(                                    \n" +
                "	pQPA DECIMAL(18,8),                              \n" +
                "	pKitQty INT(11),                                 \n" +
                "	pPartId INT(11),                            \n" +
                "	pRefSalesOrderDetID INT(11),                          \n" +
                "	pRefRfqLineitem VARCHAR(255)                               \n" +
                ") RETURNS decimal(18,8)  \n" +
                "BEGIN                                    \n" +
                "	DECLARE vShortageValue DECIMAL(18,6);                                \n" +
                "	DECLARE vFromUOM INT(11);                              \n" +
                "	DECLARE vToUOM INT(11);                              \n" +
                "	DECLARE vFromValue DECIMAL(18,6);                              \n" +
                "	DECLARE vConvertUOMValue DECIMAL(18,6);                              \n" +
                "	DECLARE vAllocatedUnit DECIMAL(18,6);               \n" +
                "	DECLARE vConsumeUnit DECIMAL(18,6);                             \n" +
                "	DECLARE vfromUnitBaseUnitValue DECIMAL(18,6);                              \n" +
                "	DECLARE vtoUnitBaseUnitValue DECIMAL(18,6);                              \n" +
                "	DECLARE vconvertValueIntoBasedValue DECIMAL(18,6);                              \n" +
                "	DECLARE vTotalQty DECIMAL(18,8);                           \n" +
                "	DECLARE vPartIds VARCHAR(500);                       \n" +
                "	DECLARE vConnectorTypeId VARCHAR(100);                          \n" +
                "	DECLARE vAllocatedPins DECIMAL(18,6);                      \n" +
                "	DECLARE vShortagePin DECIMAL(18,6);               \n" +
                "	DECLARE vConsumePin DECIMAL(18,6);           \n" +
                "	DECLARE v_CustPNID VARCHAR(1000);                \n" +
                "  \n" +
                "	SET vShortageValue = 0;                              \n" +
                "	SET vfromUnitBaseUnitValue = 0;                              \n" +
                "	SET vtoUnitBaseUnitValue = 0;                              \n" +
                "	SET vconvertValueIntoBasedValue = 0;                              \n" +
                "  \n" +
                "	SELECT GROUP_CONCAT(custPNID) INTO v_CustPNID FROM kit_allocation_lineitems WHERE refSalesOrderDetID = pRefSalesOrderDetID AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitem) AND deletedAt IS NULL;          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForShortagePackaginAndCPN;       \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForShortagePackaginAndCPN      \n" +
                "	(                                                                                                  \n" +
                "		mfgPNID INT                                                                                                    \n" +
                "	);      \n" +
                "  \n" +
                "	IF (v_CustPNID IS NOT NULL) THEN      \n" +
                "		INSERT INTO tempResultForShortagePackaginAndCPN (mfgPNID)      \n" +
                "		SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pRefSalesOrderDetID AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitem) AND deletedAt IS NULL                    \n" +
                "		UNION                    \n" +
                "		SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (                              \n" +
                "			SELECT aliasgroupID FROM component_packagingalias WHERE componentID IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pRefSalesOrderDetID       \n" +
                "				AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitem) AND deletedAt IS NULL) AND deletedAt IS NULL                               \n" +
                "		) AND deletedAt IS NULL    \n" +
                "		UNION    \n" +
                "		SELECT custPNID AS mfgPNID FROM kit_allocation_lineitems WHERE refSalesOrderDetID = pRefSalesOrderDetID AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitem) AND deletedAt IS NULL;      \n" +
                "	ELSE      \n" +
                "		INSERT INTO tempResultForShortagePackaginAndCPN (mfgPNID)      \n" +
                "		SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pRefSalesOrderDetID AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitem) AND deletedAt IS NULL                    \n" +
                "		UNION                    \n" +
                "		SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (                              \n" +
                "			SELECT aliasgroupID FROM component_packagingalias WHERE componentID IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pRefSalesOrderDetID       \n" +
                "				AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitem) AND deletedAt IS NULL) AND deletedAt IS NULL                               \n" +
                "		) AND deletedAt IS NULL;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForPinComponent;                   \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForPinComponent AS                      \n" +
                "	SELECT a.mfgPNID, c.mfgPN, c.connecterTypeID connectorTypeId -- (SELECT ctm.name FROM rfq_connectertypemst ctm  WHERE ctm.id = c.connecterTypeID) connectorTypeText                 \n" +
                "	FROM tempResultForShortagePackaginAndCPN a                      \n" +
                "	INNER JOIN component c ON c.id = a.mfgPNID AND c.deletedAt IS NULL;                      \n" +
                "  \n" +
                "	SELECT GROUP_CONCAT(mfgPNID), GROUP_CONCAT(connectorTypeId)                 \n" +
                "	INTO vPartIds, vConnectorTypeId FROM tempResultForPinComponent;                      \n" +
                "  \n" +
                "	SELECT IFNULL((pQPA * pKitQty), 0) INTO vTotalQty;                              \n" +
                "  \n" +
                "	SELECT 	IFNULL(SUM(ka.allocatedUnit),0) INTO vAllocatedUnit             \n" +
                "	FROM 	kit_allocation ka             \n" +
                "	WHERE 	FIND_IN_SET(ka.PartId, vPartIds) AND ka.status = \"A\"             \n" +
                "			AND (CASE WHEN pPartId = 0 THEN ka.assyID = ka.assyID ELSE ka.assyID = pPartId END)            \n" +
                "			AND refSalesOrderDetID = pRefSalesOrderDetID          \n" +
                "			AND FIND_IN_SET(ka.refBOMLineID, pRefRfqLineitem);                \n" +
                "  \n" +
                "	SELECT 	IFNULL(SUM(ka.consumeUnit),0) INTO vConsumeUnit             \n" +
                "	FROM 	kit_allocation ka             \n" +
                "	WHERE 	FIND_IN_SET(ka.PartId, vPartIds)             \n" +
                "			AND ka.status = \"R\"             \n" +
                "			AND (CASE WHEN pPartId = 0 THEN ka.assyID = ka.assyID ELSE ka.assyID = pPartId END)            \n" +
                "			AND refSalesOrderDetID = pRefSalesOrderDetID          \n" +
                "			AND FIND_IN_SET(ka.refBOMLineID, pRefRfqLineitem);                              \n" +
                "  \n" +
                "	IF (vConnectorTypeId LIKE '%-2%') THEN                      \n" +
                "		SELECT 		SUM((IFNULL(allocatedUnit, 0) * (IFNULL(noOfPosition, 0) - MOD(IFNULL(noOfPosition, 0),IFNULL(bomPin, 0))))/IFNULL(bomPin, 0)) INTO vShortagePin		                      \n" +
                "		FROM 		(	                      \n" +
                "					SELECT 		SUM(allocatedUnit) AS allocatedUnit,                      \n" +
                "							(            \n" +
                "								SELECT numOfPosition             \n" +
                "								FROM 	kit_allocation_lineitems             \n" +
                "								WHERE 	refRfqLineitem = refBOMLineID             \n" +
                "										AND refSalesOrderDetID = pRefSalesOrderDetID               \n" +
                "										AND (CASE WHEN pPartId = 0 THEN partID = partID ELSE partID = pPartId END)            \n" +
                "							) AS bomPin,                      \n" +
                "							c.noOfPosition                      \n" +
                "					FROM 		kit_allocation ka                      \n" +
                "					INNER JOIN	component c ON c.id = ka.partId AND c.deletedAt IS NULL                      \n" +
                "					WHERE 		refSalesOrderDetID = pRefSalesOrderDetID             \n" +
                "									AND (CASE WHEN pPartId = 0 THEN assyID = assyID ELSE assyID = pPartId END)            \n" +
                "									AND FIND_IN_SET(ka.PartId, vPartIds)           \n" +
                "									AND FIND_IN_SET(ka.refBOMLineID, pRefRfqLineitem)            \n" +
                "									AND `status` = 'A'                      \n" +
                "					GROUP BY 	partID                      \n" +
                "				) a;              \n" +
                "		SELECT 		SUM((IFNULL(consumeUnit, 0) * (IFNULL(noOfPosition, 0) - MOD(IFNULL(noOfPosition, 0),IFNULL(bomPin, 0))))/IFNULL(bomPin, 0)) INTO vConsumePin		                      \n" +
                "		FROM 		(	                      \n" +
                "					SELECT 		SUM(consumeUnit) AS consumeUnit,                      \n" +
                "							(            \n" +
                "								SELECT 	numOfPosition             \n" +
                "								FROM 	kit_allocation_lineitems             \n" +
                "								WHERE 	refRfqLineitem = refBOMLineID             \n" +
                "											AND refSalesOrderDetID = pRefSalesOrderDetID             \n" +
                "											-- AND partID = pPartId            \n" +
                "											AND (CASE WHEN pPartId = 0 THEN partID = partID ELSE partID = pPartId END)            \n" +
                "							) AS bomPin,                      \n" +
                "							c.noOfPosition                      \n" +
                "					FROM 		kit_allocation ka                      \n" +
                "					INNER JOIN	component c ON c.id = ka.partId AND c.deletedAt IS NULL                      \n" +
                "					WHERE 		refSalesOrderDetID = pRefSalesOrderDetID             \n" +
                "									AND (CASE WHEN pPartId = 0 THEN assyID = assyID ELSE assyID = pPartId END)            \n" +
                "									AND FIND_IN_SET(ka.PartId, vPartIds)           \n" +
                "									AND FIND_IN_SET(ka.refBOMLineID, pRefRfqLineitem)            \n" +
                "									AND `status` = 'R'                      \n" +
                "					GROUP BY 	partID                      \n" +
                "				) a;              \n" +
                "  \n" +
                "		IF (vTotalQty - IFNULL(vShortagePin,0)  - IFNULL(vConsumePin,0) > 0) THEN                      \n" +
                "			SET vShortageValue = vTotalQty - IFNULL(vShortagePin,0) - IFNULL(vConsumePin,0);                      \n" +
                "		ELSE                       \n" +
                "			SET vShortageValue = 0;                      \n" +
                "		END IF;                         \n" +
                "	ELSE                      \n" +
                "		IF ((vTotalQty - IFNULL(vAllocatedUnit,0) - IFNULL(vConsumeUnit,0)) > 0) THEN                              \n" +
                "			SET vShortageValue = vTotalQty - IFNULL(vAllocatedUnit,0) - IFNULL(vConsumeUnit,0);                              \n" +
                "		ELSE                               \n" +
                "			SET vShortageValue = 0;                              \n" +
                "		END IF;                \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForPinComponent;                      \n" +
                "	RETURN CAST(vShortageValue AS DECIMAL(18,8));                                     \n" +
                "  \n" +
                "END;  \n" +

                "DROP function IF EXISTS `fun_getShortagePerBuild`;  \n" +
                "CREATE FUNCTION `fun_getShortagePerBuild`(                                    \n" +
                "	pQPA DECIMAL(18,8),                              \n" +
                "	pKitQty INT(11),                                 \n" +
                "	pPartId INT(11),                            \n" +
                "	pRefSalesOrderDetID INT(11),                          \n" +
                "	pRefRfqLineitem VARCHAR(255)                              \n" +
                ") RETURNS decimal(18,8)  \n" +
                "BEGIN                                    \n" +
                "	DECLARE vShortageValue DECIMAL(18,6);                                 \n" +
                "	DECLARE vAllocatedUnit DECIMAL(18,6);                 \n" +
                "	DECLARE vConsumeUnit DECIMAL(18,6);                             \n" +
                "	DECLARE vTotalQty DECIMAL(18,8);                           \n" +
                "	DECLARE vPartIds VARCHAR(500);                       \n" +
                "	DECLARE vConnectorTypeId VARCHAR(100);                          \n" +
                "	DECLARE vShortagePin DECIMAL(18,6);               \n" +
                "	DECLARE vConsumePin DECIMAL(18,6);           \n" +
                "	DECLARE v_CustPNID VARCHAR(1000);                \n" +
                "  \n" +
                "	SET vShortageValue = 0;                               \n" +
                "	SELECT GROUP_CONCAT(custPNID) INTO v_CustPNID   \n" +
                "    FROM kit_allocation_lineitems   \n" +
                "    WHERE refSalesOrderDetID = pRefSalesOrderDetID AND   \n" +
                "			FIND_IN_SET(refRfqLineitem, pRefRfqLineitem) AND deletedAt IS NULL;          \n" +
                "  \n" +
                "	SELECT   GROUP_CONCAT(c.id), GROUP_CONCAT(c.connecterTypeID)               \n" +
                "				INTO vPartIds, vConnectorTypeId  /*c.id, c.mfgPN, c.connecterTypeID connectorTypeId*/  \n" +
                "				from component c where id in (	SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart   \n" +
                "												WHERE refSalesOrderDetID = pRefSalesOrderDetID AND   \n" +
                "														FIND_IN_SET(refRfqLineitem, pRefRfqLineitem) AND deletedAt IS NULL                    \n" +
                "												UNION                    \n" +
                "												SELECT componentID AS mfgPNID FROM component_packagingalias   \n" +
                "												WHERE aliasgroupID IN (  SELECT aliasgroupID FROM component_packagingalias   \n" +
                "																			WHERE componentID IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart   \n" +
                "																										WHERE refSalesOrderDetID = pRefSalesOrderDetID       \n" +
                "																												AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitem)   \n" +
                "																												AND deletedAt IS NULL)   \n" +
                "																			AND deletedAt IS NULL )   \n" +
                "												AND deletedAt IS NULL    \n" +
                "												UNION    \n" +
                "												SELECT custPNID AS mfgPNID FROM kit_allocation_lineitems   \n" +
                "												WHERE refSalesOrderDetID = pRefSalesOrderDetID   \n" +
                "												AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitem) AND deletedAt IS NULL  \n" +
                "												and custPNID is not null )      \n" +
                "								   AND c.deletedAt IS NULL;                      \n" +
                "  \n" +
                "	SELECT IFNULL((pQPA * pKitQty), 0) INTO vTotalQty;                              \n" +
                "  \n" +
                "	SELECT  case when ka.status = 'A' then IFNULL(SUM(ka.allocatedUnit),0) else 0 end AllocatedUnits,  \n" +
                "			case when ka.status = 'R' then IFNULL(SUM(ka.consumeUnit),0) else 0 end  ConsumeUnits  \n" +
                "            INTO vAllocatedUnit  ,   vConsumeUnit        \n" +
                "	FROM 	kit_allocation ka             \n" +
                "	WHERE 	FIND_IN_SET(ka.PartId, (vPartIds)) AND ka.status in('A','R')             \n" +
                "			AND (CASE WHEN pPartId = 0 THEN ka.assyID = ka.assyID ELSE ka.assyID =pPartId END)            \n" +
                "			AND refSalesOrderDetID = pRefSalesOrderDetID          \n" +
                "			AND FIND_IN_SET(ka.refBOMLineID, pRefRfqLineitem);         \n" +
                "  \n" +
                "  IF (vConnectorTypeId LIKE '%-2%') THEN                      \n" +
                "		SELECT 		SUM((IFNULL(allocatedUnit, 0) * (IFNULL(noOfPosition, 0) - MOD(IFNULL(noOfPosition, 0),IFNULL(bomPin, 0))))/IFNULL(bomPin, 0)) INTO vShortagePin		                      \n" +
                "		FROM 		(	                      \n" +
                "					SELECT 		SUM(allocatedUnit) AS allocatedUnit,                      \n" +
                "							(            \n" +
                "								SELECT numOfPosition             \n" +
                "								FROM 	kit_allocation_lineitems             \n" +
                "								WHERE 	refRfqLineitem = refBOMLineID             \n" +
                "										AND refSalesOrderDetID = pRefSalesOrderDetID               \n" +
                "										AND (CASE WHEN pPartId = 0 THEN partID = partID ELSE partID = pPartId END)            \n" +
                "							) AS bomPin,                      \n" +
                "							c.noOfPosition                      \n" +
                "					FROM 		kit_allocation ka                      \n" +
                "					INNER JOIN	component c ON c.id = ka.partId AND c.deletedAt IS NULL                      \n" +
                "					WHERE 		refSalesOrderDetID = pRefSalesOrderDetID             \n" +
                "									AND (CASE WHEN pPartId = 0 THEN assyID = assyID ELSE assyID = pPartId END)            \n" +
                "									AND FIND_IN_SET(ka.PartId, vPartIds)           \n" +
                "									AND FIND_IN_SET(ka.refBOMLineID, pRefRfqLineitem)            \n" +
                "									AND `status` = 'A'                      \n" +
                "					GROUP BY 	partID                      \n" +
                "				) a;              \n" +
                "		SELECT 		SUM((IFNULL(consumeUnit, 0) * (IFNULL(noOfPosition, 0) - MOD(IFNULL(noOfPosition, 0),IFNULL(bomPin, 0))))/IFNULL(bomPin, 0)) INTO vConsumePin		                      \n" +
                "		FROM 		(	                      \n" +
                "					SELECT 		SUM(consumeUnit) AS consumeUnit,                      \n" +
                "							(            \n" +
                "								SELECT 	numOfPosition             \n" +
                "								FROM 	kit_allocation_lineitems             \n" +
                "								WHERE 	refRfqLineitem = refBOMLineID             \n" +
                "											AND refSalesOrderDetID = pRefSalesOrderDetID             \n" +
                "											-- AND partID = pPartId            \n" +
                "											AND (CASE WHEN pPartId = 0 THEN partID = partID ELSE partID = pPartId END)            \n" +
                "							) AS bomPin,                      \n" +
                "							c.noOfPosition                      \n" +
                "					FROM 		kit_allocation ka                      \n" +
                "					INNER JOIN	component c ON c.id = ka.partId AND c.deletedAt IS NULL                      \n" +
                "					WHERE 		refSalesOrderDetID = pRefSalesOrderDetID             \n" +
                "									AND (CASE WHEN pPartId = 0 THEN assyID = assyID ELSE assyID = pPartId END)            \n" +
                "									AND FIND_IN_SET(ka.PartId, vPartIds)           \n" +
                "									AND FIND_IN_SET(ka.refBOMLineID, pRefRfqLineitem)            \n" +
                "									AND `status` = 'R'                      \n" +
                "					GROUP BY 	partID                      \n" +
                "				) a;              \n" +
                "  \n" +
                "		IF (vTotalQty - IFNULL(vShortagePin,0)  - IFNULL(vConsumePin,0) > 0) THEN                      \n" +
                "			SET vShortageValue = vTotalQty - IFNULL(vShortagePin,0) - IFNULL(vConsumePin,0);                      \n" +
                "		ELSE                       \n" +
                "			SET vShortageValue = 0;                      \n" +
                "		END IF;                         \n" +
                "	ELSE                      \n" +
                "		IF ((vTotalQty - IFNULL(vAllocatedUnit,0) - IFNULL(vConsumeUnit,0)) > 0) THEN                              \n" +
                "			SET vShortageValue = vTotalQty - IFNULL(vAllocatedUnit,0) - IFNULL(vConsumeUnit,0);                              \n" +
                "		ELSE                               \n" +
                "			SET vShortageValue = 0;                              \n" +
                "		END IF;                \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	RETURN CAST(vShortageValue AS DECIMAL(18,8));                                     \n" +
                "  \n" +
                "END;  \n" +
                "DROP function IF EXISTS `fun_getAvilableStockWithPackagingAlias_OLD_073020`;  \n" +
                "CREATE FUNCTION `fun_getAvilableStockWithPackagingAlias_OLD_073020`(                                                       \n" +
                "		pLineItemId INT(11),                              \n" +
                "		pAssyId INT(11),                              \n" +
                "		pSaleOrderDetailId INT(11)                             \n" +
                "	) RETURNS decimal(18,8)  \n" +
                "BEGIN                                  \n" +
                "		DECLARE result DECIMAL(18,8);                                 \n" +
                "		DECLARE v_ToUom INT;                            \n" +
                "		DECLARE v_TotalReservedStock DECIMAL(18,8);                            \n" +
                "		DECLARE v_AllocatedReservedStock DECIMAL(18,8);                            \n" +
                "		DECLARE v_TotalStockInSystemRecord DECIMAL(18,8);                            \n" +
                "		DECLARE v_AllocatedToKitStock DECIMAL(18,8);                            \n" +
                "		DECLARE v_TotalPackagingReservedStock DECIMAL(18,8);                            \n" +
                "		DECLARE v_AllocatedReservedPackagingStock DECIMAL(18,8);                            \n" +
                "		DECLARE v_TotalPackagingStockInSystemRecord DECIMAL(18,8);                            \n" +
                "		DECLARE v_AllocatedPackagingStockToKitStock DECIMAL(18,8);                            \n" +
                "		DECLARE v_ReservedPhysicalStock DECIMAL(18,8);                            \n" +
                "		DECLARE v_AvailableStock DECIMAL(18,8);                            \n" +
                "		DECLARE v_ReservedPackagingPhysicalStock DECIMAL(18,8);                            \n" +
                "		DECLARE v_PackagingAliasStock DECIMAL(18,8);                   \n" +
                "		DECLARE v_NonUMIDStock DECIMAL(18,8);                         \n" +
                "  \n" +
                "		SELECT uomID INTO v_ToUom FROM kit_allocation_lineitems WHERE refRfqLineitem = pLineItemId AND refSalesOrderDetID = pSaleOrderDetailId AND partID = pAssyId AND deletedAt IS NULL;                            \n" +
                "  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempStockRawDet;                        \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempStockRawDet AS                                   \n" +
                "		SELECT 	id, receiveMaterialType, fun_convertUOM(uom, v_ToUom, pkgUnit) pkgUnit                                          \n" +
                "		FROM 	component_sid_stock                                         \n" +
                "		WHERE 	refcompid IN (                    \n" +
                "					SELECT 	mfgPNID                     \n" +
                "					FROM 	kit_allocation_lineitems_alternatepart                     \n" +
                "					WHERE 	refSalesOrderDetID = pSaleOrderDetailId                     \n" +
                "							AND partID = pAssyId                     \n" +
                "							AND refRfqLineitem = pLineItemId                     \n" +
                "							AND deletedAt IS NULL        \n" +
                "					UNION        \n" +
                "					SELECT 	 custPNID AS mfgPNID           \n" +
                "					FROM 	kit_allocation_lineitems           \n" +
                "					WHERE 	refSalesOrderDetID = pSaleOrderDetailId           \n" +
                "							AND partID = pAssyId           \n" +
                "							AND refRfqLineitem = pLineItemId           \n" +
                "							AND deletedAt IS NULL                      \n" +
                "				)                                         \n" +
                "				AND IFNULL(isDeleted,0) = 0;                                  \n" +
                "  \n" +
                "		-- v_TotalReservedStock                                  \n" +
                "		SELECT 	IFNULL(SUM(pkgUnit), 0) INTO v_TotalReservedStock                                   \n" +
                "		FROM 	tempStockRawDet                                   \n" +
                "		WHERE 	receiveMaterialType = 'PR';                                   \n" +
                "  \n" +
                "		-- v_AllocatedReservedStock                                    \n" +
                "		SELECT 	IFNULL(SUM(pkgUnit), 0) INTO v_AllocatedReservedStock                                     \n" +
                "		FROM 	tempStockRawDet                                     \n" +
                "		WHERE 	receiveMaterialType = 'PR'                                    \n" +
                "		AND	id  IN (SELECT refUIDId FROM kit_allocation                                         \n" +
                "		WHERE 	STATUS = 'A');                                   \n" +
                "  \n" +
                "		-- v_TotalStockInSystemRecord                                  \n" +
                "		SELECT 	IFNULL(SUM(pkgUnit), 0) INTO v_TotalStockInSystemRecord                                   \n" +
                "		FROM 	tempStockRawDet;                                  \n" +
                "  \n" +
                "		-- v_AllocatedToKitStock                                   \n" +
                "		SELECT 	IFNULL(SUM(fun_convertUOM(allocatedUOM, v_ToUom, IFNULL(allocatedUnit, 0))), 0) INTO v_AllocatedToKitStock                                      \n" +
                "		FROM 	kit_allocation                                         \n" +
                "		WHERE 	refUIDId IN (SELECT id FROM tempStockRawDet)                                         \n" +
                "		AND 	STATUS = 'A';                   \n" +
                "  \n" +
                "		-- v_NonUMIDStock                \n" +
                "		SELECT 	fun_convertUOM(uom, v_ToUom, nonUMIDStock) INTO v_NonUMIDStock                \n" +
                "		FROM 	(          \n" +
                "			SELECT 		SUM((IFNULL(vu.BalanceQty, 1) * IFNULL(c.unit, 1))) AS nonUMIDStock, c.uom           \n" +
                "			FROM 		vu_umid_creation_pending vu                \n" +
                "			INNER JOIN 	component c ON c.id = vu.PartId                \n" +
                "			WHERE 		vu.PartId IN (                \n" +
                "						SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pSaleOrderDetailId AND refRfqLineitem = pLineItemId AND deletedAt IS NULL                          \n" +
                "						UNION                          \n" +
                "						SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (                                    \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pSaleOrderDetailId AND refRfqLineitem = pLineItemId AND deletedAt IS NULL) AND deletedAt IS NULL                                     \n" +
                "						) AND deletedAt IS NULL        \n" +
                "						UNION        \n" +
                "						SELECT 	 custPNID AS mfgPNID          \n" +
                "						FROM 	kit_allocation_lineitems           \n" +
                "						WHERE 	refSalesOrderDetID = pSaleOrderDetailId           \n" +
                "								AND partID = pAssyId           \n" +
                "								AND refRfqLineitem = pLineItemId           \n" +
                "								AND deletedAt IS NULL                       \n" +
                "					) AND BalanceQty > 0          \n" +
                "		) a;                                  \n" +
                "  \n" +
                "		-- SELECT packaginggroupID INTO @packaginggroupID FROM component WHERE id in (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pSaleOrderDetailId AND partID = pAssyId AND refRfqLineitem = pLineItemId);                                  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempPackagingAliasStockRawDet;                          \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempPackagingAliasStockRawDet AS                                  \n" +
                "		SELECT 	c.id, c.refcompid, c.receiveMaterialType, fun_convertUOM(uom, v_ToUom, c.pkgUnit) pkgUnit                                          \n" +
                "		FROM 	component_sid_stock c, component_packagingalias cp                                        \n" +
                "		WHERE 	c.refcompid = cp.componentID                                        \n" +
                "		AND 	IFNULL(c.isDeleted,0) = 0                                        \n" +
                "		AND	cp.componentID NOT IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pSaleOrderDetailId AND partID = pAssyId AND refRfqLineitem = pLineItemId)                              \n" +
                "		AND	cp.aliasgroupID IN (SELECT packaginggroupID FROM component WHERE id IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pSaleOrderDetailId AND partID = pAssyId AND refRfqLineitem = pLineItemId)) -- @packaginggroupID                                        \n" +
                "		AND 	IFNULL(cp.isDeleted,0) = 0;                                  \n" +
                "  \n" +
                "		-- v_TotalPackagingReservedStock                                  \n" +
                "		SELECT IFNULL(SUM(pkgUnit), 0) INTO v_TotalPackagingReservedStock                                   \n" +
                "		FROM tempPackagingAliasStockRawDet                                   \n" +
                "		WHERE receiveMaterialType = 'PR';                                  \n" +
                "  \n" +
                "		-- v_AllocatedReservedPackagingStock                            \n" +
                "		SELECT 	IFNULL(SUM(pkgUnit), 0) INTO v_AllocatedReservedPackagingStock                                     \n" +
                "		FROM 	tempPackagingAliasStockRawDet                                     \n" +
                "		WHERE 	receiveMaterialType = 'PR'                                     \n" +
                "		AND	id  IN (SELECT refUIDId FROM kit_allocation WHERE STATUS = 'A');  	                                  \n" +
                "  \n" +
                "		-- V_TotalPackagingStockInSystemRecord                                  \n" +
                "		SELECT 	IFNULL(SUM(pkgUnit), 0) INTO v_TotalPackagingStockInSystemRecord                                   \n" +
                "		FROM 	tempPackagingAliasStockRawDet;                                   \n" +
                "  \n" +
                "		-- v_AllocatedPackagingStockToKitStock                                   \n" +
                "		SELECT 	IFNULL(SUM(fun_convertUOM(allocatedUOM, v_ToUom, IFNULL(allocatedUnit, 0))), 0) INTO v_AllocatedPackagingStockToKitStock                                         \n" +
                "		FROM 	kit_allocation                                         \n" +
                "		WHERE 	refUIDId IN (SELECT id FROM tempPackagingAliasStockRawDet)                                         \n" +
                "		AND 	STATUS = 'A';                            \n" +
                "  \n" +
                "		SET v_ReservedPhysicalStock = v_TotalReservedStock - v_AllocatedReservedStock;                                  \n" +
                "		-- SET v_AvailableStock = (v_TotalStockInSystemRecord - v_ReservedPhysicalStock - v_AllocatedToKitStock);                          \n" +
                "		SET v_AvailableStock = (v_TotalStockInSystemRecord - v_AllocatedToKitStock);                                \n" +
                "		SET v_ReservedPackagingPhysicalStock = v_TotalPackagingReservedStock - v_AllocatedReservedPackagingStock;                                  \n" +
                "		SET v_PackagingAliasStock = (v_TotalPackagingStockInSystemRecord - v_ReservedPackagingPhysicalStock - v_AllocatedPackagingStockToKitStock);                                  \n" +
                "		SET result = v_AvailableStock + v_PackagingAliasStock + IFNULL(v_NonUMIDStock, 0);                                  \n" +
                "  \n" +
                "		RETURN result;                                  \n" +
                "	END;  \n" +

                "DROP function IF EXISTS `fun_getAvilableStockWithPackagingAlias`;  \n" +
                "CREATE FUNCTION `fun_getAvilableStockWithPackagingAlias`(                                                       \n" +
                "		pLineItemId INT(11),                              \n" +
                "		pAssyId INT(11),                              \n" +
                "		pSaleOrderDetailId INT(11)                             \n" +
                "	) RETURNS decimal(18,8)  \n" +
                "BEGIN                                  \n" +
                "		DECLARE result DECIMAL(18,8);                                 \n" +
                "		DECLARE v_ToUom INT;                            \n" +
                "		DECLARE v_TotalStockInSystemRecord DECIMAL(18,8);             \n" +
                "        DECLARE v_AllocatedToKitStock DECIMAL(18,8);         \n" +
                "        DECLARE v_NonUMIDStock DECIMAL(18,8);                         \n" +
                "  \n" +
                "       SELECT uomID INTO v_ToUom   \n" +
                "        FROM	kit_allocation_lineitems   \n" +
                "        WHERE	refRfqLineitem = pLineItemId AND   \n" +
                "				refSalesOrderDetID = pSaleOrderDetailId AND   \n" +
                "                partID = pAssyId AND deletedAt IS NULL;                            \n" +
                "  \n" +
                "  \n" +
                "	/*First get all Stock of UMID of BOM line including Packing Alias,and Line alternate parts */  \n" +
                "	SELECT -- 	id, receiveMaterialType,   \n" +
                "           sum(fun_convertUOM(uom, v_ToUom, pkgUnit)) pkgUnit   into v_TotalStockInSystemRecord                                       \n" +
                "		FROM 	component_sid_stock                                         \n" +
                "		WHERE 	refcompid IN (                    \n" +
                "								SELECT 	mfgPNID                     \n" +
                "								FROM 	kit_allocation_lineitems_alternatepart      a  \n" +
                "								WHERE 	refSalesOrderDetID = pSaleOrderDetailId           \n" +
                "								AND partID = pAssyId           \n" +
                "								AND refRfqLineitem = pLineItemId                        \n" +
                "								AND deletedAt IS NULL     \n" +
                "								union  \n" +
                "								SELECT 	 custPNID AS mfgPNID          \n" +
                "								FROM 	kit_allocation_lineitems           \n" +
                "								WHERE 	refSalesOrderDetID = pSaleOrderDetailId           \n" +
                "								AND partID = pAssyId           \n" +
                "								AND refRfqLineitem = pLineItemId      \n" +
                "								and custPNID is not null  \n" +
                "								AND deletedAt IS NULL        \n" +
                "								union  \n" +
                "								select a.componentID   \n" +
                "								from component_packagingalias a   \n" +
                "								where  a.AliasGroupId in (select b.AliasGroupid from component_packagingalias b   \n" +
                "												where exists (select 1 from kit_allocation_lineitems_alternatepart c  \n" +
                "																	 where c.mfgPNID = b.componentid and   \n" +
                "																			c.refSalesOrderDetID = pSaleOrderDetailId  AND   \n" +
                "                                                                            c.partID = pAssyId and  \n" +
                "																			c.refRfqLineitem = pLineItemId              \n" +
                "																		AND c.deletedAt IS NULL ))                   \n" +
                "				)                                         \n" +
                "				AND IFNULL(isDeleted,0) = 0;                                  \n" +
                "  \n" +
                "		-- v_AllocatedToKitStock                                   \n" +
                "		SELECT 	IFNULL(SUM(fun_convertUOM(allocatedUOM, v_ToUom, IFNULL(allocatedUnit, 0))), 0) INTO v_AllocatedToKitStock                                      \n" +
                "		FROM 	kit_allocation                                         \n" +
                "		WHERE 	partid IN (                    \n" +
                "								SELECT 	mfgPNID                     \n" +
                "								FROM 	kit_allocation_lineitems_alternatepart      a  \n" +
                "								WHERE 	refSalesOrderDetID = pSaleOrderDetailId           \n" +
                "								AND partID = pAssyId           \n" +
                "								AND refRfqLineitem = pLineItemId                        \n" +
                "								AND deletedAt IS NULL     \n" +
                "								union  \n" +
                "								SELECT 	 custPNID AS mfgPNID          \n" +
                "								FROM 	kit_allocation_lineitems           \n" +
                "								WHERE 	refSalesOrderDetID = pSaleOrderDetailId           \n" +
                "								AND partID = pAssyId           \n" +
                "								AND refRfqLineitem = pLineItemId      \n" +
                "								and custPNID is not null  \n" +
                "								AND deletedAt IS NULL        \n" +
                "								union  \n" +
                "								select a.componentID   \n" +
                "								from component_packagingalias a   \n" +
                "								where  a.AliasGroupId in (select b.AliasGroupid from component_packagingalias b   \n" +
                "												where exists (select 1 from kit_allocation_lineitems_alternatepart c  \n" +
                "																	 where c.mfgPNID = b.componentid and   \n" +
                "																			c.refSalesOrderDetID = pSaleOrderDetailId  AND   \n" +
                "                                                                            c.partID = pAssyId and  \n" +
                "																			c.refRfqLineitem = pLineItemId              \n" +
                "																		AND c.deletedAt IS NULL ))   )                                         \n" +
                "		AND 	STATUS = 'A';                   \n" +
                "  \n" +
                "		-- v_NonUMIDStock                \n" +
                "		SELECT 	sum(fun_convertUOM(uom, v_ToUom, nonUMIDStock)) INTO v_NonUMIDStock                \n" +
                "		FROM 	(          \n" +
                "			SELECT 		SUM((IFNULL(vu.BalanceQty, 1) * IFNULL(c.unit, 1))) AS nonUMIDStock, c.uom           \n" +
                "			FROM 		vu_umid_creation_pending vu                \n" +
                "			INNER JOIN 	component c ON c.id = vu.PartId                \n" +
                "			WHERE 		vu.PartId IN (                \n" +
                "						SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pSaleOrderDetailId AND refRfqLineitem = pLineItemId AND deletedAt IS NULL                          \n" +
                "						UNION                          \n" +
                "						SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (                                    \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pSaleOrderDetailId AND refRfqLineitem = pLineItemId AND deletedAt IS NULL) AND deletedAt IS NULL                                     \n" +
                "						) AND deletedAt IS NULL        \n" +
                "						UNION        \n" +
                "						SELECT 	 custPNID AS mfgPNID          \n" +
                "						FROM 	kit_allocation_lineitems           \n" +
                "						WHERE 	refSalesOrderDetID = pSaleOrderDetailId           \n" +
                "								AND partID = pAssyId           \n" +
                "								AND refRfqLineitem = pLineItemId           \n" +
                "								AND deletedAt IS NULL                       \n" +
                "					) AND BalanceQty > 0          \n" +
                "		) a;                                  \n" +
                "  \n" +
                "		SET result = (IFNULL(v_TotalStockInSystemRecord,0) - IFNULL(v_AllocatedToKitStock,0)) + IFNULL(v_NonUMIDStock, 0);                                  \n" +
                "  \n" +
                "		RETURN result;                                  \n" +
                "	END;  \n" +
                "CREATE  OR REPLACE VIEW `vu_kit_feasibility_detail_OLD_073020` AS  \n" +
                "    SELECT   \n" +
                "        `h`.`refrfqlineitem` AS `refrfqlineitem`,  \n" +
                "        `h`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "        `h`.`assyid` AS `assyid`,  \n" +
                "        `h`.`lineid` AS `lineid`,  \n" +
                "        `h`.`totalassybuildqty` AS `totalassybuildqty`,  \n" +
                "        `h`.`qpawithdnp` AS `qpawithdnp`,  \n" +
                "        `h`.`reqqty` AS `reqqty`,  \n" +
                "        `h`.`allocatedUnit` AS `allocatedUnit`,  \n" +
                "        `h`.`shortage` AS `shortage`,  \n" +
                "        `h`.`availableStock` AS `availableStock`,  \n" +
                "        `h`.`feasibility` AS `feasibility`,  \n" +
                "        `h`.`feasibilityWithAvailable` AS `feasibilityWithAvailable`,  \n" +
                "        (CASE  \n" +
                "            WHEN ((IFNULL(`h`.`feasibilityWithAvailable`, 0) - IFNULL(`h`.`totalassybuildqty`, 0)) > 0) THEN 0  \n" +
                "            ELSE (IFNULL(`h`.`feasibilityWithAvailable`, 0) - IFNULL(`h`.`totalassybuildqty`, 0))  \n" +
                "        END) AS `shortageForAvailable`,  \n" +
                "        `h`.`mountingtypeid` AS `mountingtypeid`  \n" +
                "    FROM  \n" +
                "        (SELECT   \n" +
                "            `g`.`refrfqlineitem` AS `refrfqlineitem`,  \n" +
                "                `g`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "                `g`.`assyid` AS `assyid`,  \n" +
                "                `g`.`lineid` AS `lineid`,  \n" +
                "                `g`.`totalassybuildqty` AS `totalassybuildqty`,  \n" +
                "                `g`.`qpawithdnp` AS `qpawithdnp`,  \n" +
                "                `g`.`reqqty` AS `reqqty`,  \n" +
                "                `g`.`allocatedUnit` AS `allocatedUnit`,  \n" +
                "                `g`.`shortage` AS `shortage`,  \n" +
                "                `g`.`availableStock` AS `availableStock`,  \n" +
                "                `g`.`feasibility` AS `feasibility`,  \n" +
                "                ((IFNULL(`g`.`allocatedUnit`, 0) + IFNULL(`g`.`availableStock`, 0)) / IFNULL(`g`.`qpawithdnp`, 0)) AS `feasibilityWithAvailable`,  \n" +
                "                `g`.`mountingtypeid` AS `mountingtypeid`  \n" +
                "        FROM  \n" +
                "            (SELECT   \n" +
                "            `i`.`refrfqlineitem` AS `refrfqlineitem`,  \n" +
                "                `i`.`refsalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "                `i`.`assyid` AS `assyid`,  \n" +
                "                `i`.`lineid` AS `lineid`,  \n" +
                "                `i`.`totalassybuildqty` AS `totalassybuildqty`,  \n" +
                "                `i`.`qpawithdnp` AS `qpawithdnp`,  \n" +
                "                `i`.`reqqty` AS `reqqty`,  \n" +
                "                `i`.`allocatedunit` AS `allocatedUnit`,  \n" +
                "                `i`.`shortage` AS `shortage`,  \n" +
                "                FUN_GETAVILABLESTOCKWITHPACKAGINGALIAS(`i`.`refrfqlineitem`, `i`.`assyid`, `i`.`refsalesorderdetid`) AS `availableStock`,  \n" +
                "                (IFNULL(`i`.`allocatedunit`, 0) / IFNULL(`i`.`qpawithdnp`, 0)) AS `feasibility`,  \n" +
                "                `i`.`mountingTypeID` AS `mountingtypeid`  \n" +
                "        FROM  \n" +
                "            (SELECT   \n" +
                "            `k`.`refsalesorderdetid` AS `refsalesorderdetid`,  \n" +
                "                `k`.`assyid` AS `assyid`,  \n" +
                "                `k`.`lineid` AS `lineid`,  \n" +
                "                `k`.`totalassybuildqty` AS `totalassybuildqty`,  \n" +
                "                `k`.`kitqty` AS `kitqty`,  \n" +
                "                `k`.`mrpqty` AS `mrpqty`,  \n" +
                "                `k`.`refrfqlineitem` AS `refrfqlineitem`,  \n" +
                "                `k`.`qpa` AS `qpa`,  \n" +
                "                `k`.`dnpqty` AS `dnpqty`,  \n" +
                "                `k`.`qpawithdnp` AS `qpawithdnp`,  \n" +
                "                `k`.`ispurchase` AS `ispurchase`,  \n" +
                "                `k`.`isinstall` AS `isinstall`,  \n" +
                "                `k`.`isbuydnpqty` AS `isbuydnpqty`,  \n" +
                "                `k`.`numofposition` AS `numofposition`,  \n" +
                "                `k`.`reqqty` AS `reqqty`,  \n" +
                "                `k`.`requnits` AS `requnits`,  \n" +
                "                `k`.`uomid` AS `uomid`,  \n" +
                "                `k`.`allocatedqty` AS `allocatedqty`,  \n" +
                "                `k`.`allocatedunit` AS `allocatedunit`,  \n" +
                "                FUN_GETSHORTAGEPERBUILD(`k`.`qpawithdnp`, `k`.`kitqty`, `k`.`assyid`, `k`.`refsalesorderdetid`, `k`.`refrfqlineitem`) AS `shortage`,  \n" +
                "                `k`.`allocationcount` AS `allocationcount`,  \n" +
                "                `k`.`releasecount` AS `releasecount`,  \n" +
                "                (CASE  \n" +
                "                    WHEN ((`k`.`allocationcount` - `k`.`releasecount`) = 0) THEN 1  \n" +
                "                    ELSE 0  \n" +
                "                END) AS `releasestatus`,  \n" +
                "                `k`.`mfgPNID` AS `mfgPNID`,  \n" +
                "                `k`.`mountingTypeID` AS `mountingTypeID`  \n" +
                "        FROM  \n" +
                "            (SELECT   \n" +
                "            `k`.`refsalesorderdetid` AS `refsalesorderdetid`,  \n" +
                "                `k`.`assyid` AS `assyid`,  \n" +
                "                `k`.`lineid` AS `lineid`,  \n" +
                "                `k`.`totalassybuildqty` AS `totalassybuildqty`,  \n" +
                "                `k`.`kitqty` AS `kitqty`,  \n" +
                "                `k`.`mrpqty` AS `mrpqty`,  \n" +
                "                `k`.`refrfqlineitem` AS `refrfqlineitem`,  \n" +
                "                `k`.`qpa` AS `qpa`,  \n" +
                "                `k`.`dnpqty` AS `dnpqty`,  \n" +
                "                `k`.`qpawithdnp` AS `qpawithdnp`,  \n" +
                "                `k`.`numofposition` AS `numofposition`,  \n" +
                "                IFNULL((`k`.`totalassybuildqty` * IFNULL(`k`.`qpawithdnp`, 0)), 0) AS `reqqty`,  \n" +
                "                IFNULL((`k`.`totalassybuildqty` * IFNULL(`k`.`qpawithdnp`, 0)), 0) AS `requnits`,  \n" +
                "                `k`.`uomid` AS `uomid`,  \n" +
                "                `k`.`allocatedqty` AS `allocatedqty`,  \n" +
                "                `k`.`allocatedunit` AS `allocatedunit`,  \n" +
                "                `k`.`allocationcount` AS `allocationcount`,  \n" +
                "                `k`.`releasecount` AS `releasecount`,  \n" +
                "                `k`.`ispurchase` AS `ispurchase`,  \n" +
                "                `k`.`isinstall` AS `isinstall`,  \n" +
                "                `k`.`isbuydnpqty` AS `isbuydnpqty`,  \n" +
                "                `k`.`mfgPNID` AS `mfgPNID`,  \n" +
                "                `k`.`mountingTypeID` AS `mountingTypeID`  \n" +
                "        FROM  \n" +
                "            (SELECT   \n" +
                "            `a`.`refSalesOrderDetID` AS `refsalesorderdetid`,  \n" +
                "                `a`.`partId` AS `assyid`,  \n" +
                "                `b`.`lineID` AS `lineid`,  \n" +
                "                `a`.`totalAssyBuildQty` AS `totalassybuildqty`,  \n" +
                "                `a`.`kitQty` AS `kitqty`,  \n" +
                "                `a`.`mrpQty` AS `mrpqty`,  \n" +
                "                `b`.`refRfqLineitem` AS `refrfqlineitem`,  \n" +
                "                `b`.`qpa` AS `qpa`,  \n" +
                "                `b`.`dnpQty` AS `dnpqty`,  \n" +
                "                (CASE  \n" +
                "                    WHEN  \n" +
                "                        ((`b`.`isPurchase` = 1)  \n" +
                "                            OR (`b`.`isInstall` = 1))  \n" +
                "                    THEN  \n" +
                "                        (IFNULL(`b`.`qpa`, 0) + IF(((`b`.`isBuyDNPQty` = 'Y')  \n" +
                "                            OR (`b`.`isBuyDNPQty` = 'C')), IFNULL(`b`.`dnpQty`, 0), 0))  \n" +
                "                    ELSE IF(((`b`.`isBuyDNPQty` = 'Y')  \n" +
                "                        OR (`b`.`isBuyDNPQty` = 'C')), IFNULL(`b`.`dnpQty`, 0), 0)  \n" +
                "                END) AS `qpawithdnp`,  \n" +
                "                `b`.`numOfPosition` AS `numofposition`,  \n" +
                "                `b`.`uomID` AS `uomid`,  \n" +
                "                IFNULL(`c`.`allocatedqty`, 0) AS `allocatedqty`,  \n" +
                "                IFNULL(`c`.`allocatedunit`, 0) AS `allocatedunit`,  \n" +
                "                `c`.`allocationcount` AS `allocationcount`,  \n" +
                "                `c`.`releasecount` AS `releasecount`,  \n" +
                "                `b`.`isPurchase` AS `ispurchase`,  \n" +
                "                `b`.`isInstall` AS `isinstall`,  \n" +
                "                `b`.`isBuyDNPQty` AS `isbuydnpqty`,  \n" +
                "                `e`.`mfgPNID` AS `mfgPNID`,  \n" +
                "                `f`.`mountingTypeID` AS `mountingTypeID`  \n" +
                "        FROM  \n" +
                "            ((((`kit_allocation_assy_detail` `a`  \n" +
                "        JOIN `kit_allocation_lineitems` `b` ON (((`a`.`refSalesOrderDetID` = `b`.`refSalesOrderDetID`)  \n" +
                "            AND (`a`.`partId` = `b`.`partID`)  \n" +
                "            AND (`b`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `kit_allocation_lineitems_alternatepart` `e` ON ((ISNULL(`e`.`deletedAt`)  \n" +
                "            AND (`e`.`refSalesOrderDetID` = `b`.`refSalesOrderDetID`)  \n" +
                "            AND (`e`.`refRfqLineitem` = `b`.`refRfqLineitem`))))  \n" +
                "        LEFT JOIN `component` `f` ON ((ISNULL(`f`.`deletedAt`)  \n" +
                "            AND (`f`.`id` = `e`.`mfgPNID`))))  \n" +
                "        LEFT JOIN (SELECT   \n" +
                "            `ka`.`refSalesOrderDetID` AS `refsalesorderdetid`,  \n" +
                "                `ka`.`assyID` AS `assyid`,  \n" +
                "                `ka`.`refBOMLineID` AS `refbomlineid`,  \n" +
                "                SUM((CASE  \n" +
                "                    WHEN (`ka`.`STATUS` = 'R') THEN `ka`.`consumeQty`  \n" +
                "                    WHEN (`ka`.`STATUS` = 'D') THEN 0  \n" +
                "                    ELSE `ka`.`allocatedQty`  \n" +
                "                END)) AS `allocatedqty`,  \n" +
                "                SUM((CASE  \n" +
                "                    WHEN (`ka`.`STATUS` = 'R') THEN `ka`.`consumeUnit`  \n" +
                "                    WHEN (`ka`.`STATUS` = 'D') THEN 0  \n" +
                "                    ELSE `ka`.`allocatedUnit`  \n" +
                "                END)) AS `allocatedunit`,  \n" +
                "                COUNT(IF((`ka`.`STATUS` = 'D'), NULL, 1)) AS `allocationcount`,  \n" +
                "                SUM((CASE  \n" +
                "                    WHEN  \n" +
                "                        ((`ka`.`kitReleaseID` IS NOT NULL)  \n" +
                "                            AND (`ka`.`STATUS` <> 'D'))  \n" +
                "                    THEN  \n" +
                "                        1  \n" +
                "                    ELSE 0  \n" +
                "                END)) AS `releasecount`  \n" +
                "        FROM  \n" +
                "            `kit_allocation` `ka`  \n" +
                "        GROUP BY `ka`.`refSalesOrderDetID` , `ka`.`assyID` , `ka`.`refBOMLineID`) `c` ON (((`a`.`refSalesOrderDetID` = `c`.`refsalesorderdetid`)  \n" +
                "            AND (`a`.`partId` = `c`.`assyid`)  \n" +
                "            AND (`b`.`refRfqLineitem` = `c`.`refbomlineid`))))  \n" +
                "        WHERE  \n" +
                "            EXISTS( SELECT   \n" +
                "                    'Y'  \n" +
                "                FROM  \n" +
                "                    `kit_allocation_lineitems_alternatepart` `d`  \n" +
                "                WHERE  \n" +
                "                    (EXISTS( SELECT   \n" +
                "                            'Y'  \n" +
                "                        FROM  \n" +
                "                            `component` `e`  \n" +
                "                        WHERE  \n" +
                "                            (`e`.`id` = `d`.`mfgPNID`))  \n" +
                "                        AND (`b`.`refSalesOrderDetID` = `d`.`refSalesOrderDetID`)  \n" +
                "                        AND (`b`.`refRfqLineitem` = `d`.`refRfqLineitem`)  \n" +
                "                        AND (`b`.`partID` = `d`.`partID`)))) `k`) `k`) `i`) `g`) `h`;  \n" +

                "create or replace view vu_kit_feasibility_detail as            \n" +
                "select  d.refRfqLineitem,	d.refSalesOrderDetID,	d.assyid,		d.lineID,			d.totalAssyBuildQty,    \n" +
                "		d.qpawithdnp,		d.kitqty, d.reqqty,			d.requnits,				d.allocatedqty,	d.allocatedunit,	d.allocatedpin,  \n" +
                "		d.shortage,			d.availableStock,  \n" +
                "		 (IFNULL(d.allocatedunit, 0) / IFNULL(d.qpawithdnp, 0)) AS feasibility,  \n" +
                "		 (IFNULL(d.allocatedUnit, 0) + IFNULL(d.availableStock, 0)) / IFNULL(d.qpawithdnp, 0) AS feasibilityWithAvailable,  \n" +
                "         (  \n" +
                "			CASE WHEN (   \n" +
                "						((  \n" +
                "							(IFNULL(d.allocatedUnit, 0) + IFNULL(d.availableStock, 0)) / IFNULL(d.qpawithdnp, 0)  \n" +
                "						) - IFNULL(d.totalassybuildqty, 0)) > 0) THEN 0  \n" +
                "            ELSE (((IFNULL(d.allocatedUnit, 0) + IFNULL(d.availableStock, 0)) / IFNULL(d.qpawithdnp, 0) ) - IFNULL(d.totalassybuildqty, 0))  \n" +
                "        END) AS shortageForAvailable, d.mountingTypeID perlinemountingtypeID,  \n" +
                "        d.connecterTypeID,d.approvedmountingtypeID, ifnull(approvedmountingtypeID,mountingTypeID) mountingTypeID  \n" +
                "From (                   \n" +
                "  \n" +
                "select  c.refRfqLineitem,	c.refSalesOrderDetID, 	c.assyid,		c.lineID,			c.totalAssyBuildQty,  \n" +
                "		IFNULL((c.totalassybuildqty * IFNULL(c.qpawithdnp, 0)), 0) AS reqqty,			c.qpawithdnp , c.kitqty,  \n" +
                "		IFNULL((c.totalassybuildqty * IFNULL(c.qpawithdnp, 0)), 0) AS requnits,        c.allocatedqty,	c.allocatedunit,	c.allocatedpin,  \n" +
                "		FUN_GETSHORTAGEPERBUILD(c.qpawithdnp,c.kitqty,c.assyid,c.refsalesorderdetid,c.refrfqlineitem) shortage,  \n" +
                "		fun_getAvilableStockWithPackagingAlias(c.refrfqlineitem,c.assyid,c.refsalesorderdetid) AS availableStock,  \n" +
                "        c.mountingTypeID,  \n" +
                "        c.connecterTypeID,  \n" +
                "        c.approvedmountingtypeID  \n" +
                "		from   \n" +
                "		(  \n" +
                "		select b.refRfqLineitem,	b.refSalesOrderDetID, b.partid assyid,	b.lineID		,a.totalAssyBuildQty,   \n" +
                "        a.kitQty,  \n" +
                "				(CASE WHEN ((b.isPurchase = 1)OR (b.isInstall = 1)) THEN   \n" +
                "							(IFNULL(b.qpa, 0) + IF(((b.isBuyDNPQty = 'Y') OR (b.isBuyDNPQty = 'C')), IFNULL(b.dnpQty, 0), 0))  \n" +
                "						ELSE IF(((b.isBuyDNPQty = 'Y') OR (b.isBuyDNPQty = 'C')), IFNULL(b.dnpQty, 0), 0) END) AS qpawithdnp,  \n" +
                "		 c.allocatedqty,	c.allocatedunit,	c.allocatedpin,  ka.mountingTypeID,ka.approvedmountingtypeID,  \n" +
                "        ka.connecterTypeID  \n" +
                "		from kit_allocation_assy_detail a   \n" +
                "		join kit_allocation_lineitems  b ON a.refSalesOrderDetID = b.refSalesOrderDetID  \n" +
                "        Inner join (select ka.refSalesOrderDetID,ka.refRfqLineitem,  \n" +
                "							case when max(cp.mountingTypeID) = min(cp.mountingTypeID) then min(cp.mountingTypeID) else -2 end mountingTypeID,  \n" +
                "                             max( case when (ka.mismatchMountingTypeStep=1 AND  ka.approvedMountingType=1 ) then cp.mountingTypeID else null end) as approvedmountingtypeID,  \n" +
                "							min(cp.connecterTypeID) connecterTypeID, min(cp.noOfRows)   \n" +
                "							from kit_allocation_lineitems_alternatepart ka  \n" +
                "							Inner Join component cp on Ka.mfgPNid = cp.id   \n" +
                "							group by ka.refSalesOrderDetID,ka.refRfqLineitem) ka  \n" +
                "            on (b.refSalesOrderDetID = ka.refsalesorderdetid  \n" +
                "				AND b.refRfqLineitem = ka.refRfqLineitem)  \n" +
                "        Inner Join (SELECT ka.refSalesOrderDetID AS refsalesorderdetid,ka.assyID AS assyid,ka.refBOMLineID AS refbomlineid,  \n" +
                "						SUM(CASE WHEN (ka.STATUS = 'R') THEN ka.consumeQty  \n" +
                "								  WHEN (ka.STATUS = 'D') THEN 0  \n" +
                "									ELSE ka.allocatedQty END) AS allocatedqty,  \n" +
                "						SUM(CASE WHEN (ka.STATUS = 'R') THEN ka.consumeUnit  \n" +
                "								WHEN (ka.STATUS = 'D') THEN 0  \n" +
                "								ELSE ka.allocatedUnit END) AS allocatedunit,  \n" +
                "						sum(case When cp.connecterTypeID = -2 then  \n" +
                "									CASE WHEN (ka.STATUS = 'R')  THEN   \n" +
                "									(ifnull(ka.consumeUnit,0) * ifnull(cp.noOfPosition,0)) / (case when ifnull(cp.noofRows,0) > 1 then cp.noofRows else 1 end)  \n" +
                "									WHEN (ka.STATUS = 'D') THEN 0  \n" +
                "									ELSE (ifnull(ka.allocatedUnit,0) *ifnull(cp.noOfPosition,0))    \n" +
                "						END  \n" +
                "						ELSE 0   \n" +
                "						END) AS allocatedpin    \n" +
                "						/*COUNT(IF(ka.STATUS = 'D'), NULL, 1)) AS allocationcount,   \n" +
                "						SUM(CASE WHEN ((ka.kitReleaseID IS NOT NULL) AND (ka.STATUS <> 'D')) THEN  \n" +
                "								1  \n" +
                "								ELSE 0 END)) AS releasecount */  \n" +
                "				FROM  \n" +
                "					kit_allocation ka inner join component cp on ka.partid = cp.id   \n" +
                "				GROUP BY ka.refSalesOrderDetID , ka.assyID , ka.refBOMLineID) c   \n" +
                "                on (a.refSalesOrderDetID = c.refsalesorderdetid  \n" +
                "					AND a.partId = c.assyid  \n" +
                "					AND b.refRfqLineitem = c.refbomlineid)  \n" +
                "		and b.isDeleted = 0  \n" +
                "		)c ) d;  \n" +

                /* **************************** Add Script Version -> 15-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2630,'2.00','V1',' Tuning following object fun_getShortagePerBuild,fun_getAvilableStockWithPackagingAlias,vu_kit_feasibility_detail  - DP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2630:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(                 \n" +
                "    IN tableName VARCHAR(255),                 \n" +
                "    IN IDs LONGTEXT,                 \n" +
                "    IN deletedBy INT,                 \n" +
                "    IN entityID VARCHAR(255),                 \n" +
                "    IN refrenceIDs LONGTEXT,      \n" +
                "    IN countList INT,                      \n" +
                "    IN pRoleID INT                      \n" +
                ")  \n" +
                "BEGIN                                                  \n" +
                "IF tableName=\"employees\" THEN                 \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                 \n" +
                "IF tableName=\"eco_type_category\" THEN                 \n" +
                "     CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);             \n" +
                "END IF;                 \n" +
                "IF tableName=\"eco_type_values\" THEN                 \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);           \n" +
                "END IF;                 \n" +
                "IF tableName=\"customers\" THEN                 \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);               \n" +
                "END IF;                 \n" +
                "IF tableName=\"certificate_standards\" THEN                 \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);             \n" +
                "END IF;                 \n" +
                "IF tableName=\"department\" THEN                 \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                 \n" +
                "END IF;                 \n" +
                "IF tableName=\"genericcategory\" THEN                 \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                 \n" +
                "IF tableName=\"equipment\" THEN                 \n" +
                "    CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);      \n" +
                "END IF;                                         \n" +
                "IF tableName=\"master_templates\" THEN                 \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                 \n" +
                "IF tableName=\"operations\" THEN                 \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);           \n" +
                "END IF;                 \n" +
                "IF tableName=\"workorder\" THEN                 \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;                 \n" +
                "IF tableName=\"roles\" THEN                \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);      \n" +
                "END IF;                 \n" +
                "IF tableName=\"standard_class\" THEN                 \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);      \n" +
                "END IF;                 \n" +
                "IF tableName=\"dataelement\" THEN                 \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);      \n" +
                "END IF;                 \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN                 \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);            \n" +
                "END IF;                 \n" +
                "IF tableName=\"component\" THEN                 \n" +
                "    CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;                 \n" +
                "IF tableName=\"workorder_cluster\" THEN                  \n" +
                "    CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);      \n" +
                "END IF;                 \n" +
                "IF tableName=\"workorder_operation\" THEN                \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);      \n" +
                "END IF;                 \n" +
                "IF tableName=\"workorder_operation_part\" THEN                 \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);             \n" +
                "END IF;                 \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN                 \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);               \n" +
                "END IF;                 \n" +
                "IF tableName=\"workorder_operation_employee\" THEN                 \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);              \n" +
                "END IF;                 \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN                 \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);             \n" +
                "END IF;                 \n" +
                "IF tableName=\"entity\" THEN                 \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                 \n" +
                "IF tableName=\"salesordermst\" THEN                 \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);               \n" +
                "END IF;                 \n" +
                "IF tableName=\"mfgcodemst\" THEN                 \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);           \n" +
                "END IF;                 \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN                 \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);        \n" +
                "END IF;                 \n" +
                "IF tableName=\"shippedassembly\" THEN                 \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);      \n" +
                "END IF;                 \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN                 \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);       \n" +
                "END IF;                 \n" +
                "IF tableName=\"br_label_template\" THEN                 \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);       \n" +
                "END IF;                 \n" +
                "IF tableName=\"measurement_types\" THEN                 \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);               \n" +
                "END IF;                 \n" +
                "IF tableName=\"uoms\" THEN                 \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;                 \n" +
                "IF tableName=\"jobtypes\" THEN                 \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;                 \n" +
                "IF tableName=\"rfqtype\" THEN                 \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);               \n" +
                "END IF;                 \n" +
                "IF tableName=\"reasonmst\" THEN                 \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);      \n" +
                "END IF;                 \n" +
                "IF tableName=\"component_sid_stock\" THEN       \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;                 \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN        \n" +
                "    CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);         \n" +
                "END IF;                 \n" +
                "IF tableName=\"chart_templatemst\" THEN                  \n" +
                "    CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                \n" +
                "END IF;                 \n" +
                "IF tableName=\"shipping_requestdet\" THEN                 \n" +
                "    CALL Sproc_checkDelete_shipping_requestdet(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;                 \n" +
                "IF tableName=\"chart_rawdata_category\" THEN                 \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);           \n" +
                "END IF;                        \n" +
                "IF tableName=\"rfq_lineitems\" THEN                 \n" +
                "      CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                      \n" +
                "END IF;                 \n" +
                "IF tableName=\"requirement\" THEN                 \n" +
                "    CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);       \n" +
                "END IF;                 \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN            \n" +
                "    CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);               \n" +
                "END IF;                 \n" +
                "IF tableName=\"customer_addresses\" THEN                 \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);               \n" +
                "END IF;                 \n" +
                "IF tableName=\"rfqforms\" THEN                 \n" +
                "    CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);               \n" +
                "END IF;                 \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN                 \n" +
                "    CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);      \n" +
                "END IF;                 \n" +
                "IF tableName=\"who_bought_who\" THEN                 \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);      \n" +
                "END IF;                 \n" +
                "IF tableName=\"rfq_parttypemst\" THEN                 \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);      \n" +
                "END IF;                 \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN                 \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);      \n" +
                "END IF;                 \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN                 \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);      \n" +
                "END IF;           \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                 \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);               \n" +
                "END IF;                                        \n" +
                "IF tableName=\"cost_category\" THEN                 \n" +
                "    CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                           \n" +
                "END IF;                         \n" +
                "IF tableName=\"chartypemst\" THEN                 \n" +
                "    CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                        \n" +
                "END IF;        \n" +
                "IF tableName=\"countrymst\" THEN        \n" +
                "     CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);      \n" +
                "END IF;      \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN        \n" +
                "     CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);      \n" +
                "END IF;      \n" +
                "IF tableName=\"rfq_assy_typemst\" THEN      \n" +
                "     CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                  \n" +
                "END IF;                                                                \n" +
                "IF tableName=\"warehousemst\" THEN      \n" +
                "     CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                   \n" +
                "END IF;                                                             \n" +
                "IF tableName=\"binmst\" THEN      \n" +
                "     CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                  \n" +
                "END IF;                                                         \n" +
                "IF tableName=\"rackmst\" THEN      \n" +
                "     CALL Sproc_checkDelete_rackmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                  \n" +
                "END IF;            \n" +
                "IF tableName=\"component_logicalgroup\" THEN                                                            \n" +
                "     CALL Sproc_checkDelete_component_logical_group(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                  \n" +
                "END IF;                                                         \n" +
                "IF tableName=\"packing_slip_material_receive\" THEN                                                            \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);       \n" +
                "END IF;                                                    \n" +
                "IF tableName=\"packing_slip_material_receive_det\" THEN                                                            \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive_det(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                  \n" +
                "END IF;                                                    \n" +
                "IF tableName=\"packing_slip_track_number\" THEN                                                            \n" +
                "     CALL Sproc_checkDelete_packing_slip_track_number(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                  \n" +
                "END IF;                                                 \n" +
                "IF tableName=\"reserve_stock_request\" THEN                                                \n" +
                "       	 CALL Sproc_checkDelete_reserve_stock_request(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                \n" +
                "END IF;           \n" +
                "IF tableName=\"component_packagingmst\" THEN                                                              \n" +
                "     CALL Sproc_checkDelete_component_packagingmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);      \n" +
                "END IF;         \n" +
                "IF tableName=\"workorder_trans_narrative_history\" THEN                                                              \n" +
                "     CALL Sproc_checkDelete_workorder_trans_narrative_history(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);      \n" +
                "END IF;                                             \n" +
                "IF tableName=\"scannermst\" THEN                                                              \n" +
                "     CALL Sproc_checkDelete_Scanner(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);      \n" +
                "END IF;                                            \n" +
                "IF tableName=\"component_alternatepn_validations\" THEN                                                             \n" +
                "     CALL Sproc_checkDelete_Alias_Parts_Validation(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);      \n" +
                "END IF;      \n" +
                "IF tableName=\"workorder_operation_equipment_feeder_details\" THEN                  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment_feeder_details(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                \n" +
                "END IF;                                    \n" +
                "IF tableName=\"component_price_break_details\" THEN                  \n" +
                "    CALL Sproc_checkDelete_component_price_break_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;                                     \n" +
                "IF tableName=\"department_location\" THEN                  \n" +
                "    CALL Sproc_checkDelete_department_location(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;                                                 \n" +
                "IF tableName=\"purchase_parts_details\" THEN                  \n" +
                "    CALL Sproc_checkDelete_purchase_parts_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;                                                 \n" +
                "IF tableName=\"rfq_rohsmst\" THEN                  \n" +
                "    CALL Sproc_checkDelete_rfq_rohsmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;                            \n" +
                "IF tableName=\"component_partstatusmst\" THEN                  \n" +
                "    CALL Sproc_checkDelete_component_partstatusmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;                            \n" +
                "IF tableName=\"workorder_trans_umid_details\" THEN                  \n" +
                "    CALL Sproc_checkDelete_workorder_trans_umid_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;                     \n" +
                "IF tableName=\"labor_cost_template\" THEN                  \n" +
                "    CALL Sproc_checkDelete_labor_cost_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;                                                    \n" +
                "IF tableName=\"rfq_packagecasetypemst\" THEN                  \n" +
                "    CALL Sproc_checkDelete_rfq_packagecasetypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                \n" +
                "IF tableName=\"component_dynamic_attribute\" THEN                  \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                \n" +
                "IF tableName=\"component_dynamic_attribute_mapping_part\" THEN                  \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute_mapping_part(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;              \n" +
                "IF tableName=\"labeltemplatesmst\" THEN              \n" +
                "    CALL Sproc_checkDelete_labeltemplates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;           \n" +
                "IF tableName=\"reportmaster\" THEN              \n" +
                "    CALL Sproc_checkDelete_reportMaster(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;             \n" +
                "IF tableName=\"operating_temperature_conversion_mst\" THEN              \n" +
                "    CALL Sproc_checkDelete_operating_temperature_conversion_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;       \n" +
                "IF tableName=\"inspection_mst\" THEN              \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementMst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;             \n" +
                "IF tableName=\"inspection_template_mst\" THEN              \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementTemplate(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;   \n" +
                "IF tableName=\"componenet_inspection_requirement_det\" THEN              \n" +
                "    CALL Sproc_checkDelete_componenet_inspection_requirement_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_componenet_inspection_requirement_det` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_componenet_inspection_requirement_det`(                                                                    \n" +
                "	IN tableName VARCHAR(255),                                                                    \n" +
                "	IN IDs LONGTEXT,                                                                    \n" +
                "	IN deletedBy INT,                                                                    \n" +
                "	IN entityID VARCHAR(255),                                                                    \n" +
                "	IN refrenceIDs LONGTEXT,           \n" +
                "	IN countList INT,      \n" +
                "	IN pRoleID INT      \n" +
                ")  \n" +
                "BEGIN               \n" +
                "	SET @SQL = CONCAT('    \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_delete_componenet_inspection_requirement_det AS                                                                    \n" +
                "				(SELECT 0 cnt, \"\" as msg)      \n" +
                "		       ');                                                                  \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                                    \n" +
                "	EXECUTE stmt;       \n" +
                "  \n" +
                "	IF (countList = FALSE) THEN    \n" +
                "		IF (SELECT SUM(t.cnt) FROM temp_delete_componenet_inspection_requirement_det t) = 0 THEN     \n" +
                "			SET @SQL1 = CONCAT('    \n" +
                "					UPDATE 	componenet_inspection_requirement_det     \n" +
                "					SET 	isDeleted=',1,',    \n" +
                "						deletedBy=',deletedBy,',     \n" +
                "						deleteByRoleId = ',pRoleID,',     \n" +
                "						deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"     \n" +
                "					where 	id IN(',IDs,') and deletedAt is NULL    \n" +
                "				');		                                                                    \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                                    \n" +
                "			EXECUTE stmt1;    \n" +
                "  \n" +
                "			SELECT * FROM temp_delete_componenet_inspection_requirement_det WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";    \n" +
                "		ELSE    \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM temp_delete_componenet_inspection_requirement_det t;      \n" +
                "		END IF;    \n" +
                "	ELSE    \n" +
                "		SELECT 		t1.cnt,    \n" +
                "				t2.display_page_name AS msg            \n" +
                "		FROM 		tempbr_label_template t1            \n" +
                "		INNER JOIN 	temp_delete_componenet_inspection_requirement_det t2 ON t1.msg=t2.tabel_name            \n" +
                "		WHERE 		IFNULL(cnt,0) > 0 AND msg IS NOT NULL 	    \n" +
                "					AND msg != \"\"            \n" +
                "		ORDER BY 	t2.display_page_name;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	DROP TABLE temp_delete_componenet_inspection_requirement_det;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                                                                                                                      \n" +
                "    IN pWhereClause VARCHAR(16383),                                                                                                                      \n" +
                "    IN puserID VARCHAR(50),                                                                                                \n" +
                "    IN pnickName VARCHAR(20),                                                                                                                \n" +
                "    IN pprefix VARCHAR(20),                                                                                                                \n" +
                "    IN puid VARCHAR(20),                                                                                                            \n" +
                "    IN pComponentID INT,                                                                                                        \n" +
                "    IN pCustomerID INT,                                                                                                        \n" +
                "    IN pCPN BOOL,                                                                                                        \n" +
                "    IN pMFGAvailabel BOOL,                                                                                                        \n" +
                "    IN pRefCpnMfgID INT,                                                                                                    \n" +
                "    IN pAssyID INT,                                                                                                    \n" +
                "    IN pSalesOrderDetailID INT,		                                                                                                    \n" +
                "    IN pReceiveMaterialType VARCHAR(255),                                                                                          \n" +
                "    IN pkitAssemblyID INT,                                                                                    \n" +
                "    IN pBarcodeID INT,                                    \n" +
                "    IN pBOMLineID INT 	                                                                                                   \n" +
                "    )  \n" +
                "BEGIN                                                                                                                      \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                                                                                                      \n" +
                "	DECLARE v_delimiter VARCHAR(10);                                                                                                                      \n" +
                "	DECLARE v_length INT;                                                                                                                       \n" +
                "	DECLARE v_fieldType INT;                                                                                                                           \n" +
                "	DECLARE v_entityId INT;                                                                                                                      \n" +
                "	DECLARE v_dataElementId INT;                                                                                                                      \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                                                                                                                      \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                                                                                                                      \n" +
                "	DECLARE strLabel VARCHAR(2000);                                                                                                                      \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                                                                                                                      \n" +
                "	DECLARE StaticField VARCHAR(100);                                                                                                \n" +
                "	DECLARE DynamicField VARCHAR(100);		                                                                                                \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                                                                                                                      \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');                                                                                                                      \n" +
                "	DECLARE plen,slen INT;                                                                                                                      \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                                                                                                                      \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                                                                                                                  \n" +
                "	DECLARE barcode_type_id INT;                                                                                                            \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);                                                                                                        \n" +
                "	DECLARE UpdateValue VARCHAR(16383);                                                                                         \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';                                                                                        \n" +
                "	DECLARE v_SupplierID INT;                                                                                    \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);                                                                                      \n" +
                "	DECLARE v_barcode_id INT;                                                                                    \n" +
                "	DECLARE v_barcode_count INT;                                                                                    \n" +
                "	DECLARE v_NumberOfPart INT;                                                                                     \n" +
                "	DECLARE v_rfqLineItemsID INT;                                                               \n" +
                "	DECLARE v_componentCount INT;                                                            \n" +
                "	DECLARE v_componentId INT;                                                                  \n" +
                "	DECLARE v_mfgPartNO VARCHAR(50);                                                            \n" +
                "	DECLARE v_partMFG INT;                                                                \n" +
                "	DECLARE v_isGoodPart TINYINT(1);                                                            \n" +
                "	DECLARE v_restrictUsePermanently TINYINT(1);                                                            \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT(1);                                                            \n" +
                "	DECLARE v_restrictUseInBOM TINYINT(1);                                                      \n" +
                "	DECLARE v_isInstall TINYINT(1);                                                       \n" +
                "	DECLARE v_isBOMLineClean TINYINT(1);                                                    \n" +
                "	DECLARE v_BOMLineId INT(11);                                                  \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT(1);                                                  \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT(1);                                                  \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;                                                  \n" +
                "	DECLARE v_PIDCode VARCHAR(50);                                               \n" +
                "	DECLARE v_isPurchase TINYINT(1);                                            \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);                                       \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);                                    \n" +
                "	DECLARE v_BOMLineCount INT(11);                                     \n" +
                "	DECLARE v_AlternateLineId INT(11);                                   \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);                                  \n" +
                "	DECLARE v_BOMAssyId INT(11);                                  \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);                                  \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT(1);                          \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT(1);                          \n" +
                "	DECLARE v_isCPNFlag TINYINT(1);             \n" +
                "	DECLARE v_dateCodeFormatID INT;               \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                                                                                                                       \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                                                                                                                      \n" +
                "	(                                                                                                                      \n" +
                "		errorText LONGTEXT,                                                                                                                      \n" +
                "		IsSuccess VARCHAR (2),                                                                                                            \n" +
                "		MFGPart VARCHAR(10000)                                                                                                                           \n" +
                "	);                                                                                         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;                                                                                                                       \n" +
                "	CREATE TEMPORARY TABLE temp_Component_Sid_Stock                                                                                                                      \n" +
                "	(                                                                                                                      \n" +
                "		refcompid INT,                                                                                                                      \n" +
                "		pkgQty DECIMAL(18,6),                                                                                  \n" +
                "		dateCode VARCHAR(10),                                                                                  \n" +
                "		lotCode VARCHAR(255),                                                                                  \n" +
                "		scanlabel VARCHAR(1000),                                                                                  \n" +
                "		createdBy VARCHAR(255),                                                                                  \n" +
                "		uid VARCHAR(14),                                                                                  \n" +
                "		prefix VARCHAR(20),                                                                                  \n" +
                "		nickName VARCHAR(50),                                                                                  \n" +
                "		cpn TINYINT,                                                                                  \n" +
                "		mfgAvailabel TINYINT,                                                                                  \n" +
                "		refCPNMFGPNID INT,                                                                                  \n" +
                "		customerID INT,                                                                                  \n" +
                "		assyID INT,                                                                                  \n" +
                "		salesOrderDetailID INT,                                                                                  \n" +
                "		receiveMaterialType VARCHAR(255),                                                                                  \n" +
                "		refSupplierPartId INT,          \n" +
                "		mfrDateCode VARCHAR(50)                                                                                  \n" +
                "	);                                                                                   \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;                                                                                                                       \n" +
                "	CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values                                                                                                                      \n" +
                "	(                                                                                                                      \n" +
                "		entityid INT,                                                                                  \n" +
                "		dataelementid INT,                                                                                  \n" +
                "		`value` LONGTEXT,                                                                                  \n" +
                "		createdBy VARCHAR(255)                                                                                  \n" +
                "	);                                                                                                     \n" +
                "	-- get data from barcode templates with seprator                                                                     \n" +
                "	# return error code                                                                  \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found                                                                  \n" +
                "	# 0: Barcode template does not exist, Please add template                                                                  \n" +
                "	# 1: Validation Clear                                                                  \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component                                                                  \n" +
                "	# 3: Mfgcode is not found                                                                  \n" +
                "	# 4: MFG PN does not exist                                                                  \n" +
                "	# 5: Multiple MFG PN found                                                                  \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code                                                                  \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly                                                                  \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer                                                                  \n" +
                "	# 9:  Multiple barcode template found.                                                                  \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check                                                                  \n" +
                "	# 11: MFG PN is incorrect part                                                                \n" +
                "	# 12: PID PID1 was restricted part at part master level.                                                              \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.                                                         \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.                                                        \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.                                                    \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.                                                  \n" +
                "	# 17: PID is contain more than 1 BOM line.                             \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.                          \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.                                                         \n" +
                "  \n" +
                "	block1: BEGIN                        \n" +
                "		SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");                  \n" +
                "		IF (pBarcodeID IS NULL) THEN                                                                                    \n" +
                "			SELECT COUNT(*), id, barcodeType, `name` INTO v_barcode_count, v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                                                      \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                   \n" +
                "			-- AND (CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;                                                                                       \n" +
                "  \n" +
                "			IF (v_barcode_count > 1) THEN                                                                                    \n" +
                "				SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                                                        \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                   \n" +
                "				-- AND (CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;                                                                                      \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                                                                                                       \n" +
                "				('Multiple barcode template found.',9,@multiple_barcode_string);	                                                                                                                      \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                         \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS           \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                    \n" +
                "			ELSE                                                                       \n" +
                "				/*SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                                                      \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND                                                                                    \n" +
                "				(CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;   */                                                                                    \n" +
                "				SET pBarcodeID = v_barcode_id;                                                                                    \n" +
                "			END IF;                                                                                    \n" +
                "		ELSE                                                                                     \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND id = pBarcodeID AND `status`=1;                                                                                    \n" +
                "		END IF;                                                           \n" +
                "  \n" +
                "		IF (barcode_type_id IS NULL) THEN                          \n" +
                "			/*SELECT COUNT(1) INTO v_NumberOfPart FROM                                                                                               \n" +
                "			(                                                                                              \n" +
                "				SELECT c.id,c.mfgPN FROM component c WHERE c.mfgPN=pWhereClause AND c.deletedAt IS NULL                                                                                              \n" +
                "				UNION                                                                                              \n" +
                "				SELECT c.id,c.mfgPN FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID                                                                                               \n" +
                "				WHERE (c.mfgPN=pWhereClause OR co.name=pWhereClause) AND co.deletedAt IS NULL AND c.deletedAt IS NULL                                                                                              \n" +
                "			) a;                      \n" +
                "			IF (v_NumberOfPart > 0) THEN   */                                                                                \n" +
                "				SET pWhereClause = CONCAT(\"NONE\", pWhereClause);       				                  \n" +
                "				SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                      \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;                                                                                    \n" +
                "				SET pBarcodeID = v_barcode_id;                            \n" +
                "			/*END IF;  */                \n" +
                "		END IF;                                                                                     \n" +
                "  \n" +
                "		-- tempregexp;    	                                                                                              \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */                                                                                      \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                                                                                                                    \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND id = pBarcodeID;                                                                                    \n" +
                "			SET v_BarcodeType = '2D';                                                                                                            \n" +
                "		ELSE /* barcode 1D */                     \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                                                                                                                     \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND id = pBarcodeID;                   \n" +
                "			SET v_BarcodeType = '1D';                                                                                                         \n" +
                "		END IF;                                                                                    \n" +
                "	END block1;                        \n" +
                "  \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                                                                    \n" +
                "		block2: BEGIN                                                                                    \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found                                                                                                                      \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR                                                                                                                      \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                                                                                                                   \n" +
                "				WHERE refbrID = pBarcodeID AND deletedAt IS NULL;                                                                                                               \n" +
                "			-- declare exit loop if data not found                                                                                                                      \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                                                                                                      \n" +
                "			-- if any record match found than  check for delimiter and its value                                                                                                                 \n" +
                "			IF (pbr_template_ID > 0) THEN                                                                                                                      \n" +
                "				-- create temporary table for deliemeter and component dataelement                                                                                                                      \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                                                                                                                      \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                                                                                                                      \n" +
                "					pentityId INT,                                                                                                                      \n" +
                "					pdataElementId INT,                                                                                                                      \n" +
                "					pdelimiter_value VARCHAR(200)                                                                                                                      \n" +
                "				);                                                                                                                 \n" +
                "				-- create temporary table for separator string values                                                                                                                      \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                                                                                                                      \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));                                                                                                            \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string                                                                                                                      \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND id = pBarcodeID;                                                                                                           \n" +
                "				-- open cursor                                                                                                                      \n" +
                "				OPEN barcodeMatch_cursor;                                                                                                                      \n" +
                "				-- set str label as whereclause                                                                                                                      \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");                   \n" +
                "				-- if prefix is found than remove those from actual string match                                                                                                                      \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN				                                                                                                                      \n" +
                "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                                              \n" +
                "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));                                                                                                                      \n" +
                "				 END IF;                                                                                                                     \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match                                                                                                                       \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN                                                                                                                      \n" +
                "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                                                                                                      \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                                                                                                      \n" +
                "				 END IF;	                                              \n" +
                "				-- insert all values after seprator split                                                                                            \n" +
                "  \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                                        				                  \n" +
                "				PREPARE stmt1 FROM @SQL;                                                                                                                      \n" +
                "				EXECUTE stmt1;                                                                            \n" +
                "				-- create dynamic query to insert in recieving material                                                                                                                      \n" +
                "				SET QueryForStatic = 'insert into temp_Component_Sid_Stock';                                                                                                 \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template                                                                                                                      \n" +
                "				barcodeMatch_loop:LOOP                                                                                                   \n" +
                "					-- get all five selected values                                                                                                                      \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                                                                                                              \n" +
                "					-- exit loop if no record found for barcode match                                                                                                                      \n" +
                "					IF exit_loop THEN                                                                                                                 \n" +
                "						CLOSE barcodeMatch_cursor;                                                                                                                      \n" +
                "						LEAVE barcodeMatch_loop;                                                                                                                      \n" +
                "					END IF;                                                                                                                 \n" +
                "  \n" +
                "					-- dynamic query to get dellimeter string with values from string                                                                                                                      \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                                                                                                                      \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                                                                                                                      \n" +
                "					EXECUTE stmtdelimiter;                                                                                                            \n" +
                "  \n" +
                "					-- get delimiter values from string                                                                                                                      \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                                                                                                              \n" +
                "					-- check for field type is static or dynamic                                                                                                                      \n" +
                "					-- if static field than check for mfg code and mfg part number            \n" +
                "					IF v_fieldType = 0  THEN                                                                                                                  \n" +
                "						-- component_sid_stock                                                                                                                       \n" +
                "						-- get static field name from barcode table delimiter data element id                                                                                                                      \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                                                                                                                        \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                                                                                                                      \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN                                                                                                            \n" +
                "							SET MFG_Part_No = delimiter_value_data;                                                                                                            \n" +
                "							IF(pComponentID = 0)THEN                                                           \n" +
                "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;                                                           \n" +
                "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS                                                          \n" +
                "								SELECT id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission FROM                                                                                               \n" +
                "								(                                                                                              \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission                                                             \n" +
                "									FROM 	component c                                                             \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL                                                                                              \n" +
                "									UNION                                                                                              \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission                                                             \n" +
                "									FROM 		component_otherpn co                                                             \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID                                                                                               \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL                                                                                              \n" +
                "								) a;                                                          \n" +
                "  \n" +
                "								SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;                   \n" +
                "								IF (v_componentCount > 1) THEN                                                          \n" +
                "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;                                                           \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS                                                          \n" +
                "									SELECT * FROM temp_component_detail WHERE mfgcodeID > 0;                                                          \n" +
                "  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;                                                          \n" +
                "									IF (v_componentCount < 2) THEN                                                          \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                                   \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                                            \n" +
                "										FROM 	temp_component_supplier_detail;                                                          \n" +
                "									END IF;                                                          \n" +
                "								ELSE                                                           \n" +
                "									SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                                   \n" +
                "										INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                                           \n" +
                "									FROM 	temp_component_detail;                                                          \n" +
                "								END IF;                                                          \n" +
                "  \n" +
                "								/*SELECT COUNT(1), id, mfgPN, mfgcodeID, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission FROM                                                                                               \n" +
                "								(                                                                                              \n" +
                "									SELECT 	c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission                                                             \n" +
                "									FROM 	component c                                                             \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL                                                                                              \n" +
                "									UNION                                                                                              \n" +
                "									SELECT 		c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission                                                             \n" +
                "									FROM 		component_otherpn co                                                             \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID                                                                                               \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL                                                                                              \n" +
                "								) a; */                                                          \n" +
                "							ELSE                                                                                                  \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                                    \n" +
                "									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                                             \n" +
                "								FROM 	component                                                             \n" +
                "								WHERE 	id = pComponentID AND deletedAt IS NULL;                                                                                                            \n" +
                "							END IF;                                                                    \n" +
                "  \n" +
                "							/*IF (v_componentCount > 1) THEN                                                            \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission                                                             \n" +
                "								FROM 	component                                                             \n" +
                "								WHERE 	mfgPN = delimiter_value_data AND mfgcodeID > 0 AND deletedAt IS NULL;                                                            \n" +
                "							END IF;  */                                                          \n" +
                "  \n" +
                "							IF v_componentCount > 1 THEN                                                                                                            \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                      \n" +
                "								LEAVE barcodeMatch_loop;                                                                                                            \n" +
                "							END IF;                                                          \n" +
                "  \n" +
                "							IF (v_isGoodPart != 1) THEN                                                                  \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                      \n" +
                "								LEAVE barcodeMatch_loop;                                                                     \n" +
                "							END IF;                                                                  \n" +
                "  \n" +
                "							IF (v_restrictUsePermanently = 1) THEN                                                                \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                      \n" +
                "								LEAVE barcodeMatch_loop;                                                                \n" +
                "							END IF;                                                  \n" +
                "  \n" +
                "							IF (v_restrictPackagingAliasPermanently = 1) THEN                                                                \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                      \n" +
                "								LEAVE barcodeMatch_loop;                                                                \n" +
                "							END IF;                                                                \n" +
                "  \n" +
                "							IF (@barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN                                                                                        \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';                                                                                        \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                      \n" +
                "								LEAVE barcodeMatch_loop;                                                                                          \n" +
                "							END IF;                                                                                        \n" +
                "  \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND deletedAt IS NULL;                                                                                        \n" +
                "							IF (@MFGType = 'DIST') THEN                                                                                        \n" +
                "								SET v_SupplierID = v_componentId;                                                                                        \n" +
                "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier;                                                                                        \n" +
                "							END IF;                                   \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN                                      \n" +
                "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE deletedAt IS NULL AND refSalesOrderDetID = pSalesOrderDetailID;			                                  \n" +
                "								-- SELECT DISTINCT rfqLineItemsID INTO v_rfqLineItemsID FROM rfq_lineitems_alternatepart WHERE partID = pkitAssemblyID AND mfgPNID = v_componentId limit 1;				                                                                                          \n" +
                "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId   -- a.bomLineCleanStatus, a.description,                                                 \n" +
                "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId  -- v_isBOMLineClean, v_bomErrorDescription,                                                                                    \n" +
                "								FROM 	(                      \n" +
                "									SELECT 	*                      \n" +
                "									FROM                                        \n" +
                "										(                                                                                    \n" +
                "											SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall, -- fun_getBOMLineCleanStatusErrorCategoryWise(rml.id, NULL, NULL, NULL, 3) AS bomLineCleanStatus,                                             \n" +
                "													-- CONCAT(IFNULL(rl.description, ''), IFNULL(rml.description,'')) description,                                   \n" +
                "													rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId                          \n" +
                "											FROM 		component_packagingalias cp                                                                                      \n" +
                "											LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid                                                                                      \n" +
                "											LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id                                                       \n" +
                "											INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID                                                                                     \n" +
                "											WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.deletedAt IS NULL                                                            \n" +
                "											UNION                                                                                      \n" +
                "											SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall, -- fun_getBOMLineCleanStatusErrorCategoryWise(rla.id, NULL, NULL, NULL, 3) AS bomLineCleanStatus,                                             \n" +
                "													-- CONCAT(IFNULL(rl.description, ''), IFNULL(rla.description,'')) description,                                   \n" +
                "													rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId                                                         \n" +
                "											FROM 		rfq_lineitems_alternatepart rla                                                      \n" +
                "											INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                                                                                                                     \n" +
                "											WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.deletedAt IS NULL                                                                          \n" +
                "											UNION                                     \n" +
                "											SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall, -- fun_getBOMLineCleanStatusErrorCategoryWise(rla.id, NULL, NULL, NULL, 3) AS bomLineCleanStatus,                                             \n" +
                "													-- CONCAT(IFNULL(rl.description, ''), IFNULL(rla.description,'')) description,                                   \n" +
                "													rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId                                                          \n" +
                "											FROM 		rfq_lineitems_alternatepart rla                                                      \n" +
                "											INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                                                                                                                     \n" +
                "											WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.deletedAt IS NULL AND custPNID IS NOT NULL                                     \n" +
                "											GROUP BY 	custPNID, rla.partID                          \n" +
                "  \n" +
                "											/*SELECT 		id, custPNID AS componentID, 0 AS restrictUseInBOMStep, isInstall, 1 AS bomLineCleanStatus, description, isPurchase, isBuyDNPQty,                                       \n" +
                "													lineID                                                       \n" +
                "											FROM 		rfq_lineitems                                                                                      \n" +
                "											WHERE 		partID = pkitAssemblyID AND custPNID IS NOT NULL AND deletedAt IS NULL*/                                                                                  \n" +
                "										) b WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)                      \n" +
                "										GROUP BY b.lineID, b.assyId                      \n" +
                "								) a;                      \n" +
                "  \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN                                                                                          \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                      \n" +
                "									LEAVE barcodeMatch_loop;                                                        \n" +
                "								ELSEIF (v_BOMLineCount > 1) THEN                                                    \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                      \n" +
                "									LEAVE barcodeMatch_loop;                                                     \n" +
                "								ELSE                                  \n" +
                "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN                                                                                          \n" +
                "										CLOSE barcodeMatch_cursor;                                                                                                                      \n" +
                "										LEAVE barcodeMatch_loop;                                                                                          \n" +
                "									END IF;                               \n" +
                "  \n" +
                "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;                                  \n" +
                "									IF (v_isBOMLineClean = 0) THEN                                                    \n" +
                "										CLOSE barcodeMatch_cursor;                                                                                                                      \n" +
                "										LEAVE barcodeMatch_loop;                                                     \n" +
                "									END IF;                                  \n" +
                "								END IF;                                                        \n" +
                "  \n" +
                "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN                                                      \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                      \n" +
                "									LEAVE barcodeMatch_loop;                                                      \n" +
                "								END IF;                                                       \n" +
                "							END IF;                                                                                          \n" +
                "							IF  v_componentCount = 1 THEN                               \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                                                                                                      \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"'); 	    				                                                                                                                      \n" +
                "							END IF;                                                                                                \n" +
                "						END IF;                                                                                                                      \n" +
                "  \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                                                                                                                      \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN                                                                                                              \n" +
                "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                                                                                                                      \n" +
                "						END IF;                                                                                                        \n" +
                "  \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                                                                                                                      \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                      \n" +
                "						END IF;          \n" +
                "  \n" +
                "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                                                                                                      \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                      \n" +
                "						END IF;                                                                                                                                                                                                  \n" +
                "  \n" +
                "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');                                                                                                                      \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                      \n" +
                "  \n" +
                "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND deletedAt IS NULL;          \n" +
                "							IF (v_dateCodeFormatID IS NOT NULL) THEN          \n" +
                "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);          \n" +
                "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                                                                                                      \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');          \n" +
                "							END IF;          \n" +
                "						END IF;                                                                                                                                                                                                  \n" +
                "  \n" +
                "						/*IF v_componentCount > 1 THEN                                                                                                            \n" +
                "							CLOSE barcodeMatch_cursor;                                                                                                                      \n" +
                "							LEAVE barcodeMatch_loop;                                                                                                            \n" +
                "						END IF;      */                                                                                                         \n" +
                "  \n" +
                "						-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                                                                                                                      \n" +
                "						-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                                                                                                                       \n" +
                "  \n" +
                "						-- select strFeildforInsert,valuesforInsert;                                                                                                                      \n" +
                "  \n" +
                "					ELSE                                                                                                  \n" +
                "						-- component_sid_stock_dataelement_Values                                                                                                                        \n" +
                "						-- dynamic fields                                                                                                     \n" +
                "						/*SET DynamicField=(SELECT dataElementName FROM dataelement WHERE dataElementID=v_dataElementId AND deletedAt IS NULL);                                                                                                 \n" +
                "						IF(DynamicField=\"Mfg Date Code\" AND delimiter_value_data IS NOT NULL) THEN                                                                                                      \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                                                                                                      \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                      \n" +
                "						END IF;*/                                                                                                      \n" +
                "  \n" +
                "						/*IF(DynamicField=\"Lot Code\" AND delimiter_value_data IS NOT NULL) THEN                                                                                                      \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                                                                                                      \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                      \n" +
                "						END IF;*/                                                                                                \n" +
                "  \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE                                                                                                                       \n" +
                "							dataElementID=v_dataElementId AND deletedAt IS NULL;                                                                                                                   \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                                                                                                                       \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);                                                                                                               \n" +
                "					END IF;                                                                                                                      \n" +
                "  \n" +
                "				END LOOP barcodeMatch_loop;                                                               \n" +
                "				-- check if mfg and component both found than                                                              \n" +
                "				IF v_componentCount = 0 THEN                                                                                                                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not exist',4,MFG_Part_No);                                                                                                                      \n" +
                "				ELSEIF (v_componentCount > 1) THEN                                                                                                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFR PN found',5,MFG_Part_No);                                                                                                                              \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                               \n" +
                "					IF (v_isGoodPart = 2) THEN                                          \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);                                                                \n" +
                "					ELSE                                          \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);                                                                \n" +
                "					END IF;                                          \n" +
                "				ELSEIF (v_restrictUsePermanently = 1) THEN                                                                \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);                                                                \n" +
                "				ELSEIF (v_restrictPackagingAliasPermanently = 1) THEN                               \n" +
                "					IF (v_isCPNFlag = 1) THEN                          \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);                                                                \n" +
                "					ELSE                           \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);                                                                \n" +
                "					END IF;                          \n" +
                "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN                                                                                      \n" +
                "					-- In this case pass the barcodeid insted of MFGPN because in this case we have to not use the MFGPN                                                                                    \n" +
                "					-- if (v_BarcodeType = 1) then                                                                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);                                                                                          \n" +
                "					-- else                                                                                    \n" +
                "					-- 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please check the manufacturer and if not exist then create new template for same manufacturer.'),8,v_barcode_id);                                                                                          \n" +
                "					-- end if;                                                                                    \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN                                                                                                                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN or CPN is not found in bom of this assembly.',7,MFG_Part_No);                                                                                          \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN                                                                                                                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));                                                                                          \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN                                                  \n" +
                "					-- INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Due to the below pending issues/status your BOM line is not clean. So, you can not allocate to kit.<br/><div class=\"cm-bom-error-block\">',v_bomErrorDescription,'</div>'),15,MFG_Part_No);                                                                                          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line no <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> is not clean. So, you can not allocate UMID into kit.'),15,MFG_Part_No);                                                                                          \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN                                                                                                                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);                                                                                          \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN                                                                                                                      \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);                                                                                         \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN                                                                                                                      \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);                                                                                         \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN                                                                                                                      \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);                                                                                         \n" +
                "				ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN                                                                                                                      \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                                                                                                                      \n" +
                "					IF @Mfgmatched = 0  THEN                                                                                                                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MFR PN are avialable but not matched in component',2,MFG_Part_No);							                                                                                                                      \n" +
                "					END IF;									                                                                                                                      \n" +
                "				ELSE 		                                                                                                            \n" +
                "					IF @mfgCount = 0 THEN                                                                                                                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);                                                                                                                      \n" +
                "					END IF;	                                                                                                                      \n" +
                "					/*IF v_componentCount = 0 THEN                                                                                                                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not exist',4,MFG_Part_No);                                                                                                                      \n" +
                "					END IF;*/	                                                                                                                      \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND v_componentCount=0  THEN                                                                                                                        \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                                                                                                                      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MFR PN is not Found',0,MFG_Part_No);                                                                                                                      \n" +
                "					END IF;						                                                                                                                      \n" +
                "				END IF;	                                                                  \n" +
                "  \n" +
                "				IF (pCPN = 1) THEN                                                                                                     \n" +
                "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;                                                                                                        \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;                                                                                                        \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN                                                                                                        \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);                                                                                                                      \n" +
                "					END IF;                                                                           \n" +
                "  \n" +
                "					IF (@isCPNPart != 1) THEN                                                                        \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);                                                                                                                      \n" +
                "					END IF;                                                                                                     \n" +
                "				END IF;                                                                                                    \n" +
                "				IF (puid IS NOT NULL) THEN                                                     \n" +
                "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                                                                                                      \n" +
                "						IF (pprefix = '') THEN	                                                                                       \n" +
                "							CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					                                                                                                        \n" +
                "							SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;                                                                                                        \n" +
                "						END IF;                                                                                                     \n" +
                "  \n" +
                "						-- must call statements in sequence          				                                                                                                            \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',',','uid',')','VALUES','(',valuesforInsert,',',puserID,',\"',puid,'\")',';');                                                                																		        						          \n" +
                "						PREPARE stmt1 FROM @SQL1;                                                                                                                      \n" +
                "						EXECUTE stmt1;                                                                                                                   \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set prefix=','\"',pprefix,'\"');                                                                                                        \n" +
                "						IF (pnickName IS NOT NULL) THEN                                                                                                        \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');                                                                                                        \n" +
                "						END IF;                                                                                          \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);                                                                                    \n" +
                "  \n" +
                "						IF (pRefCpnMfgID IS NOT NULL) THEN                                                                                                        \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);                                                                                                        \n" +
                "						END IF;                                                                                           \n" +
                "  \n" +
                "						IF (pCustomerID IS NOT NULL) THEN                                                                                                        \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);                                                                                                        \n" +
                "						END IF;                                                                                       \n" +
                "  \n" +
                "						IF (pAssyID IS NOT NULL) THEN                                                                                                        \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);                                                                                                        \n" +
                "						END IF;                                                                                         \n" +
                "  \n" +
                "						IF (pSalesOrderDetailID IS NOT NULL) THEN                                                                                                        \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);                                                                                                        \n" +
                "						END IF;                                                                                          \n" +
                "  \n" +
                "						IF (pReceiveMaterialType IS NOT NULL) THEN                                                                                                        \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');                                                                                                     \n" +
                "						END IF;                                                                                       \n" +
                "  \n" +
                "						IF (v_SupplierID IS NOT NULL) THEN                                                                                                        \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);                                                                                                        \n" +
                "						END IF;                                                                                       \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue,' where uid=','\"',puid,'\"');                   \n" +
                "						SET @sql2 = UpdateValue;	                                                                                                                       \n" +
                "						PREPARE stmt2 FROM @SQL2;                                                                                                                      \n" +
                "						EXECUTE stmt2;	                                                                                    \n" +
                "  \n" +
                "						IF (pkitAssemblyID IS NULL) THEN                                  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                                                                                                                      \n" +
                "						ELSE                                   \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));                                                                                                                      \n" +
                "						END IF;                                  \n" +
                "  \n" +
                "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                                                                                                            \n" +
                "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)                                                                                                                       \n" +
                "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                                                                                                                      \n" +
                "						END IF;                                                                                                                      \n" +
                "  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                      \n" +
                "						SELECT * FROM temp_Component_Sid_Stock;                                                                                      \n" +
                "  \n" +
                "						SELECT 	c.*,                \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,                \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                 \n" +
                "							csup.packageQty AS supplierPkgQty,                 \n" +
                "							csup.mfgcodeID AS supplierMfgId,                 \n" +
                "							mcm.mfgcode AS supplierMFGCode,                 \n" +
                "							mcm.mfgName AS supplierMFGName,                 \n" +
                "							csup.mfgPN AS supplierMFGPN,                 \n" +
                "							csup.packagingID AS supplierPackagingId,                 \n" +
                "							fun_getPackagingNameByID(csup.packagingID) AS supplierPackagingName,                 \n" +
                "							csup.minimum AS supplierMinimum,                 \n" +
                "							ccpn.id AS cpnID,                 \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,                 \n" +
                "							rfqroh.rohsIcon AS rohsIcon,                 \n" +
                "							rfqroh.name AS rohsName,                 \n" +
                "							rfqmou.name AS mountingTypeName,                 \n" +
                "							um.unitName AS uomName,                \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE deletedAt IS NULL AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE deletedAt IS NULL AND id = mg.dateCodeFormatID) dateCodeFormat,                \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId                \n" +
                "						FROM component AS c                                                                                   \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID                                                                                  \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID                                                                                  \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID                                                                                  \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                                                                              \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID                                                                                  \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID                                                                    \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom                                                                                 \n" +
                "						WHERE c.id = v_componentId;                                                                                  \n" +
                "  \n" +
                "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`                                                                                  \n" +
                "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv                                                                                   \n" +
                "						LEFT OUTER JOIN `dataelement` AS dl                                                                                  \n" +
                "						ON cssdlv.dataelementid = dl.dataElementID AND dl.deletedAt IS NULL;                                                                         \n" +
                "  \n" +
                "						SELECT 	id, refComponentID, refCPNPartID                                         \n" +
                "						FROM 	component_cust_alias_rev_pn                                         \n" +
                "						WHERE 	refCPNPartID = v_componentId AND deletedAt IS NULL;                          \n" +
                "  \n" +
                "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (                                                            \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND deletedAt IS NULL                                                             \n" +
                "						) AND deletedAt IS NULL;                                  \n" +
                "  \n" +
                "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,                           \n" +
                "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN                                         \n" +
                "						FROM 		rfq_lineitems_alternatepart rla                                        \n" +
                "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.deletedAt IS NULL                            \n" +
                "						WHERE 		rla.deletedAt IS NULL                                         \n" +
                "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))                                         \n" +
                "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)                                         \n" +
                "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);                                                  \n" +
                "  \n" +
                "						/*SELECT 	id,       \n" +
                "							partId,       \n" +
                "							inspectionRequirementId,    \n" +
                "							fun_getInspectionRequirementById(inspectionRequirementId) requirement       \n" +
                "						FROM 	componenet_inspection_requirement_det      \n" +
                "						WHERE 	partId = v_componentId      \n" +
                "								AND isDeleted = 0;  */  \n" +
                "					ELSE                                                                                                                     \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                                                      \n" +
                "					END IF;                                                                      \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                                                                         \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                    \n" +
                "				ELSE                                                                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);             \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                         \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                         \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                 \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                         \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS            \n" +
                "					SELECT 	c.*,                 \n" +
                "						fun_getPackagingNameByID(c.packagingID) AS packagingName,                 \n" +
                "						CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                 \n" +
                "						csup.packageQty AS supplierPkgQty,                 \n" +
                "						csup.mfgcodeID AS supplierMfgId,                 \n" +
                "						mcm.mfgcode AS supplierMFGCode,                 \n" +
                "						mcm.mfgName AS supplierMFGName,                 \n" +
                "						csup.packagingID AS supplierPackagingId,                 \n" +
                "						csup.mfgPN AS supplierMFGPN,                 \n" +
                "						csup.id AS supplierMFGPNID,                 \n" +
                "						fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,                 \n" +
                "						fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,                           \n" +
                "						ccpn.id AS cpnID,                 \n" +
                "						ccpn.mfgcodeID AS cpnMFGCodeID,                 \n" +
                "						rfqroh.rohsIcon AS rohsIcon,                 \n" +
                "						rfqroh.name AS rohsName,                 \n" +
                "						rfqmou.name AS mountingTypeName,                 \n" +
                "						um.unitName AS uomName,                \n" +
                "						(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE deletedAt IS NULL AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                \n" +
                "						(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE deletedAt IS NULL AND id = mg.dateCodeFormatID) dateCodeFormat,                \n" +
                "						mg.dateCodeFormatID AS dateCodeFormatId                \n" +
                "					FROM component AS c                                                                                   \n" +
                "					LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID                                                                                  \n" +
                "					LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID                                                                                  \n" +
                "					LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                \n" +
                "					LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID                                                                                  \n" +
                "					LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                                                                               \n" +
                "					LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID                                                                             \n" +
                "					LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID                                                                      \n" +
                "					LEFT JOIN uoms AS um ON um.id = c.uom                                                                    \n" +
                "					WHERE c.id = v_componentId;               \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempPurchaseInspectionDetail;                       \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempPurchaseInspectionDetail AS          \n" +
                "					SELECT 	id,       \n" +
                "						partId,       \n" +
                "						inspectionRequirementId,    \n" +
                "						fun_getInspectionRequirementById(inspectionRequirementId) requirement       \n" +
                "					FROM 	componenet_inspection_requirement_det      \n" +
                "					WHERE 	partId = v_componentId      \n" +
                "							AND isDeleted = 0;                                                           \n" +
                "  \n" +
                "				END IF;                                                                                \n" +
                "			ELSE                   \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                                                                                                       \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);	                                                                                                                      \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                                                                                                                        \n" +
                "			END IF;                                                                                                                      \n" +
                "  \n" +
                "		END block2;          \n" +
                "	ELSE        \n" +
                "		IF (puid IS NOT NULL) THEN        \n" +
                "			SELECT * FROM tempUIDSuccessDetail;        \n" +
                "		ELSE         \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                         \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS        \n" +
                "			SELECT 1;        \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempPurchaseInspectionDetail;                       \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempPurchaseInspectionDetail AS       \n" +
                "			SELECT 1;         \n" +
                "		END IF;        \n" +
                "	END IF;                                                                                                                                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2631,'2.00','V1','Sproc_checkDelete, Sproc_checkDelete_componenet_inspection_requirement_det, Sproc_MatchBarCodeAndSaveDelimiters - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2631:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "ALTER TABLE packing_slip_material_receive_det ADD receivedStatus VARCHAR(2) AFTER packagingID;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2632,'2.00','V1','DB changes of packing slip material part received detail - FENIL '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2632:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "ALTER TABLE packing_slip_material_receive_det ADD remark VARCHAR(255) AFTER receivedStatus;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2633,'2.00','V1','DB changes of packing slip material part received detail - FENIL '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2633:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "UPDATE packing_slip_material_receive_det SET receivedStatus = 'A' WHERE receivedStatus IS NULL AND isDeleted = 0;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2634,'2.00','V1','DB changes of packing slip material part received detail - FENIL '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2634:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "CREATE TABLE packing_slip_material_receive_part_inspection_det  (  \n" +
                "	id INT(11) NOT NULL AUTO_INCREMENT,  \n" +
                "	lineId INT(11) NOT NULL,  \n" +
                "	partId INT(11) NOT NULL,  \n" +
                "	instruction VARCHAR(255),  \n" +
                "	inspectionStatus VARCHAR(2),  \n" +
                "	remark VARCHAR(255),	  \n" +
                "	createdBy VARCHAR(255),  \n" +
                "	createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,   \n" +
                "	createByRoleId INT(11),  \n" +
                "	updatedBy VARCHAR(255),  \n" +
                "	updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,  \n" +
                "	updateByRoleId INT(11),  \n" +
                "	isDeleted TINYINT(1) DEFAULT 0,  \n" +
                "	deletedAt DATETIME,  \n" +
                "	deletedBy VARCHAR(255),  \n" +
                "	deleteByRoleId	INT(11),  \n" +
                "	PRIMARY KEY (id),  \n" +
                "	KEY FK_packing_slip_material_receive_part_inspection_det_lineId (lineId),  \n" +
                "	KEY FK_packing_slip_material_receive_part_inspection_det_partId (partId),  \n" +
                "	CONSTRAINT FK_packing_slip_material_receive_part_inspection_det_lineId FOREIGN KEY (lineId) REFERENCES packing_slip_material_receive_det (id),  \n" +
                "	CONSTRAINT FK_packing_slip_material_receive_part_inspection_det_partId FOREIGN KEY (partId) REFERENCES component (id)  \n" +
                ") ENGINE=INNODB DEFAULT CHARSET=utf8;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2635,'2.00','V1','DB changes of packing slip material part received detail - FENIL '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2635:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrievePurchaseInspectionRequirementList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseInspectionRequirementList`(                            \n" +
                "	IN pPageIndex INT(11),                            \n" +
                "	IN pRecordPerPage INT(11),                            \n" +
                "	IN pOrderBy VARCHAR(255),                            \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "	IN pPartId INT(11)        \n" +
                ")  \n" +
                "BEGIN                            \n" +
                "	DECLARE pOffset INT(11);                \n" +
                "	DECLARE rowNumWhere VARCHAR(255);     \n" +
                "	DECLARE v_PartId INT(11);   \n" +
                "  \n" +
                "	SELECT IFNULL(refSupplierMfgpnComponentID, pPartId) INTO v_PartId FROM component WHERE id = pPartId AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseInspectionRequirementList = CONCAT(\"     \n" +
                "		SELECT 		cird.id,    \n" +
                "				cird.partId,    \n" +
                "				cird.inspectionRequirementId,  \n" +
                "				im.requirement requirement,    \n" +
                "				fun_getUserNameByID(cird.updatedBy) updatedby,                        \n" +
                "				fun_getUserNameByID(cird.createdBy) createdby,                        \n" +
                "				fun_getUserNameByID(cird.deletedBy) deletedby,                        \n" +
                "				fun_getRoleByID(cird.createByRoleId) createdbyRole,                        \n" +
                "				fun_getRoleByID(cird.updateByRoleId) updatedbyRole,                        \n" +
                "				fun_getRoleByID(cird.deleteByRoleId) deletedbyRole,                        \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(cird.createdAt) createdAt,                        \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(cird.UpdatedAt) updatedAt,                        \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(cird.deletedAt) deletedAt     \n" +
                "		FROM 		componenet_inspection_requirement_det cird    \n" +
                "		INNER JOIN 	inspection_mst im ON im.id = cird.inspectionRequirementId AND im.isDeleted = 0  \n" +
                "		WHERE		cird.partId = \", v_PartId ,\"    \n" +
                "					AND cird.isDeleted = 0    \n" +
                "	\");    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                              \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \",\" requirement ASC \") ;                                              \n" +
                "	ELSE                                              \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;                                              \n" +
                "	END IF;	                                              \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                \n" +
                "		SET pWhereClause = ' 1=1 ' ;                \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                              \n" +
                "	ELSE	                                              \n" +
                "		SET rowNumWhere = '';                                              \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseInspectionRequirementList,\" ) c where 1=1 and \", pWhereClause);        \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                \n" +
                "	EXECUTE query1;                                \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT a.* FROM ( \", @temp_Sproc_RetrievePurchaseInspectionRequirementList,\" ) a WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                \n" +
                "	EXECUTE query2;                     \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CheckAndReGetPackingSlipLineDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_CheckAndReGetPackingSlipLineDetail`(                                                                                    \n" +
                "	IN pInvoiceId INT,            \n" +
                "	IN pPackingSlipId INT,                                \n" +
                "	IN pAction VARCHAR(50),            \n" +
                "	IN pUserId VARCHAR(50)            \n" +
                ")  \n" +
                "BEGIN               \n" +
                "	DECLARE v_InsertCount INT;          \n" +
                "	DECLARE v_DeleteCount INT;        \n" +
                "	DECLARE v_TotalDetailCount INT;    \n" +
                "	DECLARE v_PendingCount INT;    \n" +
                "	DECLARE v_DisapproveCount INT;      \n" +
                "	DECLARE v_ApproveCount INT;      \n" +
                "	DECLARE v_DetailLineStatus VARCHAR(5);      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_ReGet_Validation_Error;                                                                                   \n" +
                "	CREATE TEMPORARY TABLE temp_ReGet_Validation_Error                            \n" +
                "	(                                                                                  \n" +
                "		IsSuccess BOOLEAN,                          \n" +
                "		NoOfLineInsert INT,          \n" +
                "		NoOfLineDelete INT          \n" +
                "	);             \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Insert_Packing_Slip_Record;                      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Insert_Packing_Slip_Record AS            \n" +
                "		SELECT 	*           \n" +
                "		FROM 	packing_slip_material_receive_det           \n" +
                "		WHERE 	refPackingSlipMaterialRecID = pPackingSlipId           \n" +
                "				AND deletedAt IS NULL          \n" +
                "				AND packingSlipSerialNumber < 1000        \n" +
                "				AND refChargesTypeId IS NULL        \n" +
                "				AND packingSlipSerialNumber NOT IN (          \n" +
                "					SELECT 	packingSlipSerialNumber           \n" +
                "					FROM 	packing_slip_material_receive_det           \n" +
                "					WHERE 	refPackingSlipMaterialRecID = pInvoiceId          \n" +
                "							AND packingSlipSerialNumber < 1000          \n" +
                "							AND deletedAt IS NULL          \n" +
                "				);          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Delete_Packing_Slip_Record;                      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Delete_Packing_Slip_Record AS          \n" +
                "		SELECT 	*           \n" +
                "		FROM 	packing_slip_material_receive_det           \n" +
                "		WHERE 	refPackingSlipMaterialRecID = pInvoiceId           \n" +
                "				AND deletedAt IS NULL          \n" +
                "				AND packingSlipSerialNumber < 1000          \n" +
                "				AND refChargesTypeId IS NULL        \n" +
                "				AND packingSlipSerialNumber NOT IN (          \n" +
                "					SELECT 	packingSlipSerialNumber           \n" +
                "					FROM 	packing_slip_material_receive_det           \n" +
                "					WHERE 	refPackingSlipMaterialRecID = pPackingSlipId          \n" +
                "							AND packingSlipSerialNumber < 1000          \n" +
                "							AND deletedAt IS NULL          \n" +
                "				);          \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO v_InsertCount FROM temp_Insert_Packing_Slip_Record;          \n" +
                "	SELECT COUNT(1) INTO v_DeleteCount FROM temp_Delete_Packing_Slip_Record;          \n" +
                "  \n" +
                "	IF (IFNULL(v_InsertCount, 0) = 0 AND IFNULL(v_DeleteCount, 0) = 0) THEN          \n" +
                "		INSERT INTO temp_ReGet_Validation_Error (IsSuccess, NoOfLineInsert, NoOfLineDelete) VALUES(TRUE, 0, 0);          \n" +
                "	ELSE          \n" +
                "		IF (pAction = 'GetNotification') THEN          \n" +
                "			INSERT INTO temp_ReGet_Validation_Error (IsSuccess, NoOfLineInsert, NoOfLineDelete) VALUES(FALSE, v_InsertCount, v_DeleteCount);          \n" +
                "		END IF;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF (IFNULL(v_InsertCount, 0) > 0) THEN          \n" +
                "		IF (pAction = 'ReGet') THEN          \n" +
                "			INSERT INTO packing_slip_material_receive_det (refPackingSlipMaterialRecID, packingSlipSerialNumber, refChargesTypeId, nickname, partID, refSupplierPartId, scanLabel, orderedQty, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, purchasePrice, disputedPrice, otherCharges, `status`, extendedPrice, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, createdBy, updatedBy)            \n" +
                "			SELECT 	pInvoiceId, packingSlipSerialNumber, refChargesTypeId, nickname, partID, refSupplierPartId, scanLabel, orderedQty, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, purchasePrice, disputedPrice, otherCharges, `status`, extendedPrice, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, pUserId, pUserId            \n" +
                "			FROM 	temp_Insert_Packing_Slip_Record;      \n" +
                "  \n" +
                "			UPDATE 	packing_slip_material_receive     \n" +
                "			SET 	`status` = 'W'     \n" +
                "			WHERE 	receiptType = 'I'     \n" +
                "					AND deletedAt IS NULL     \n" +
                "					AND id = pInvoiceId;        \n" +
                "		END IF;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF (IFNULL(v_DeleteCount, 0) > 0) THEN          \n" +
                "		IF (pAction = 'ReGet') THEN          \n" +
                "			UPDATE 	packing_slip_material_receive_det          \n" +
                "			SET 	updatedBy = pUserID, deletedBy = pUserID, deletedAt = fun_DatetimetoUTCDateTime(), isDeleted = 1          \n" +
                "			WHERE 	refPackingSlipMaterialRecID = pInvoiceId           \n" +
                "					AND deletedAt IS NULL          \n" +
                "					AND packingSlipSerialNumber IN (          \n" +
                "						SELECT packingSlipSerialNumber FROM temp_Delete_Packing_Slip_Record	          \n" +
                "					);       \n" +
                "			SELECT COUNT(1) INTO v_TotalDetailCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId;		    \n" +
                "			SELECT COUNT(1) INTO v_PendingCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'P';    \n" +
                "			SELECT COUNT(1) INTO v_DisapproveCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'D';		    \n" +
                "			SELECT COUNT(1) INTO v_ApproveCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'A';		    \n" +
                "  \n" +
                "			IF (v_DisapproveCount > 0) THEN    \n" +
                "				SET v_DetailLineStatus = 'I';    \n" +
                "			ELSEIF (v_PendingCount > 0) THEN    \n" +
                "				SET v_DetailLineStatus = 'W';    \n" +
                "			ELSEIF (v_ApproveCount > 0 AND v_ApproveCount = v_TotalDetailCount) THEN    \n" +
                "				SET v_DetailLineStatus = 'A';    \n" +
                "			ELSE    \n" +
                "				SET v_DetailLineStatus = 'W';    \n" +
                "			END IF;    \n" +
                "  \n" +
                "			UPDATE 	packing_slip_material_receive     \n" +
                "			SET 	`status` = v_DetailLineStatus     \n" +
                "			WHERE 	receiptType = 'I'     \n" +
                "					AND deletedAt IS NULL     \n" +
                "					AND id = pInvoiceId;      \n" +
                "  \n" +
                "		END IF;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF (pAction = 'GetNotification') THEN          \n" +
                "		SELECT IsSuccess, NoOfLineInsert, NoOfLineDelete FROM temp_ReGet_Validation_Error;          \n" +
                "	ELSEIF (pAction = 'ReGet') THEN          \n" +
                "		INSERT INTO temp_ReGet_Validation_Error (IsSuccess, NoOfLineInsert, NoOfLineDelete) VALUES(TRUE, 0, 0);          \n" +
                "		SELECT IsSuccess, NoOfLineInsert, NoOfLineDelete FROM temp_ReGet_Validation_Error;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPackingSlipDetailByPackingSlipNumber` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipDetailByPackingSlipNumber`(                                                                        \n" +
                "	IN pPackingSlipNumber VARCHAR(100),    \n" +
                "	IN pMFGCodeId INT    \n" +
                ")  \n" +
                "BEGIN       \n" +
                "	DECLARE v_CountOfPSRecord INT;    \n" +
                "	DECLARE v_CountOfSIRecord INT;    \n" +
                "	DECLARE v_CountOfPSDetailRecord INT;    \n" +
                "	DECLARE v_StringOfMFGCode VARCHAR(1000);    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_PackingSlip_Validation_Error;                                                                           \n" +
                "	CREATE TEMPORARY TABLE temp_PackingSlip_Validation_Error                    \n" +
                "	(                                                                          \n" +
                "		IsSuccess BOOLEAN,                  \n" +
                "		ErrorCode INT,    \n" +
                "		FullMFGCode VARCHAR(1000)    \n" +
                "	);                     \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO v_CountOfPSRecord     \n" +
                "	FROM 	packing_slip_material_receive     \n" +
                "	WHERE 	packingSlipNumber = pPackingSlipNumber     \n" +
                "			AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)    \n" +
                "			AND receiptType = 'P'    \n" +
                "			AND deletedAt IS NULL;    \n" +
                "  \n" +
                "	IF (v_CountOfPSRecord = 0) THEN    \n" +
                "		INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 1, NULL);    \n" +
                "		SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;    \n" +
                "	ELSEIF (v_CountOfPSRecord = 1) THEN    \n" +
                "  \n" +
                "		SELECT 	COUNT(1), GROUP_CONCAT(fullMFGCode) INTO v_CountOfSIRecord, v_StringOfMFGCode    \n" +
                "		FROM 	(    \n" +
                "				SELECT 	id, packingSlipNumber, fun_getMfgCodeAndNameByID(mfgCodeID) fullMFGCode    \n" +
                "				FROM 	packing_slip_material_receive     \n" +
                "				WHERE 	packingSlipNumber = pPackingSlipNumber     \n" +
                "						AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)    \n" +
                "						AND receiptType = 'I'    \n" +
                "						AND deletedAt IS NULL    \n" +
                "		) a;    \n" +
                "  \n" +
                "		IF (v_CountOfSIRecord = 0) THEN    \n" +
                "  \n" +
                "			SELECT 	COUNT(1) INTO v_CountOfPSDetailRecord    \n" +
                "			FROM 	packing_slip_material_receive_det    \n" +
                "			WHERE	deletedAt IS NULL     \n" +
                "					AND refPackingSlipMaterialRecID IN (    \n" +
                "						SELECT 	id     \n" +
                "						FROM 	packing_slip_material_receive     \n" +
                "						WHERE 	packingSlipNumber = pPackingSlipNumber     \n" +
                "								AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)    \n" +
                "								AND receiptType = 'P'    \n" +
                "								AND deletedAt IS NULL    \n" +
                "					);    \n" +
                "  \n" +
                "			IF (v_CountOfPSDetailRecord = 0) THEN    \n" +
                "				INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 4, v_StringOfMFGCode);    \n" +
                "				SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;    \n" +
                "			ELSE    \n" +
                "				INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (TRUE, 0, NULL);    \n" +
                "				SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;    \n" +
                "  \n" +
                "				SELECT 	*     \n" +
                "				FROM 	packing_slip_material_receive     \n" +
                "				WHERE 	packingSlipNumber = pPackingSlipNumber     \n" +
                "						AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)    \n" +
                "						AND receiptType = 'P'    \n" +
                "						AND deletedAt IS NULL;    \n" +
                "  \n" +
                "				SELECT 		p.id,						p.refPackingSlipMaterialRecID, 				                \n" +
                "						CAST(p.packingSlipSerialNumber AS SIGNED) packingSlipSerialNumber,                           \n" +
                "						p.nickname, 					p.partID, 						p.scanLabel, 	                            \n" +
                "						p.orderedQty, 					p.receivedQty, 						p.packingSlipQty, 	                            \n" +
                "						p.binID, 					p.warehouseID, 						p.parentWarehouseID, 	                            \n" +
                "						p.invoicePrice, 				p.disputedPrice,					p.createdBy,                             \n" +
                "						p.createdAt, 					p.updatedBy, 						p.updatedAt,                            \n" +
                "						p.deletedBy, 					p.deletedAt, 						p.isDeleted,                            \n" +
                "						p.purchasePrice, 				p.approveNote, 						p.otherCharges,                             \n" +
                "						p.status, 					p.extendedPrice, 					p.refCreditDebitInvoiceNo,                             \n" +
                "						p.difference, 					p.umidCreated, 						p.poReleaseNumber,                            \n" +
                "						fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,                                       \n" +
                "						c.mfgcodeID,					c.mfgPN,					        sc.mfgPN supplierPN,                       \n" +
                "						c.unit,						c.uom,					  		fun_getUnitNameByID(c.uom) uomName,	  	                                \n" +
                "						0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,                          		              \n" +
                "						p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,	              \n" +
                "						fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,	                                        \n" +
                "						c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                            \n" +
                "						sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,      \n" +
                "						sc.packagingID supplierPackagingId,                                            \n" +
                "						'Pending' invoiceVerificationStatus,  \n" +
                "						p.receivedStatus,  \n" +
                "						p.remark,                                            \n" +
                "						fun_getUserNameByID(p.createdBy) createdByName                                                  \n" +
                "				FROM		packing_slip_material_receive_det p                                    \n" +
                "				LEFT JOIN 	component c ON p.partID = c.id AND c.deletedAt IS NULL            \n" +
                "				LEFT JOIN	component sc ON p.refSupplierPartId = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL                \n" +
                "				WHERE   	p.refPackingSlipMaterialRecID IN (    \n" +
                "							SELECT 	id     \n" +
                "							FROM 	packing_slip_material_receive     \n" +
                "							WHERE 	packingSlipNumber = pPackingSlipNumber     \n" +
                "									AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)    \n" +
                "									AND receiptType = 'P'    \n" +
                "									AND deletedAt IS NULL    \n" +
                "						)                                             \n" +
                "				AND 		p.deletedAt IS NULL;    \n" +
                "			END IF;    \n" +
                "		ELSE    \n" +
                "			INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 3, v_StringOfMFGCode);    \n" +
                "			SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;    \n" +
                "		END IF;    \n" +
                "	ELSEIF (v_CountOfPSRecord > 1) THEN    \n" +
                "		INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 2, NULL);    \n" +
                "		SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveInvoiceAndInvoiceLineDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveInvoiceAndInvoiceLineDetail`(                                                                                    \n" +
                "	IN pInvoiceDetail JSON,            \n" +
                "	-- IN pInvoiceLineDetail JSON,                                \n" +
                "	IN pPackingSlipId INT,    \n" +
                "	IN pUserId VARCHAR(50)            \n" +
                ")  \n" +
                "BEGIN               \n" +
                "	DECLARE v_CountOfInvoiceDetail INT;            \n" +
                "	DECLARE v_CountOfInvoiceLineDetail INT;            \n" +
                "	DECLARE v_IdOfInvoice INT;            \n" +
                "	/*DECLARE EXIT HANDLER FOR SQLEXCEPTION                                                                                                            \n" +
                "	BEGIN                                                                                                            \n" +
                "		ROLLBACK;                                                                                                            \n" +
                "		RESIGNAL;                                                                                                            \n" +
                "	END;                                                            \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                                                                                                            \n" +
                "	BEGIN                                                                                                            \n" +
                "		ROLLBACK;                                                                                                            \n" +
                "		RESIGNAL;                                                                                                            \n" +
                "	END;                                                            \n" +
                "  \n" +
                "	START TRANSACTION;  */                                                         \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Detail;                      \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Invoice_Detail AS                                \n" +
                "		SELECT 	*                                 \n" +
                "		FROM 	JSON_TABLE(                                \n" +
                "			pInvoiceDetail,                                \n" +
                "			\"$[*]\" COLUMNS(                                \n" +
                "				poNumber VARCHAR(50) PATH \"$.poNumber\",                                \n" +
                "				mfgCodeID INT PATH \"$.mfgCodeID\",                                \n" +
                "				supplierSONumber VARCHAR(50) PATH \"$.supplierSONumber\",                                \n" +
                "				packingSlipNumber VARCHAR(50) PATH \"$.packingSlipNumber\",                                \n" +
                "				packingSlipDate DATE PATH \"$.packingSlipDate\",                                \n" +
                "				invoiceNumber VARCHAR(50) PATH \"$.invoiceNumber\",                                \n" +
                "				invoiceDate DATE PATH \"$.invoiceDate\",                                \n" +
                "				receiptDate DATE PATH \"$.receiptDate\",                                \n" +
                "				receiptType VARCHAR(1) PATH \"$.receiptType\",                                \n" +
                "				`status` VARCHAR(1) PATH \"$.status\",                                \n" +
                "				applyDate DATE PATH \"$.applyDate\",                  \n" +
                "				-- refParentCreditDebitInvoiceno INT PATH \"$.refParentCreditDebitInvoiceno\",                  \n" +
                "				-- refPackingSlipNumberForInvoice INT PATH \"$.refPackingSlipNumberForInvoice\",                  \n" +
                "				invoiceTotalDue DECIMAL(18,8) PATH \"$.invoiceTotalDue\",                  \n" +
                "				isTariffInvoice TINYINT(1) PATH \"$.isTariffInvoice\",            \n" +
                "				refPackingSlipId INT PATH \"$.refPackingSlipId\"            \n" +
                "			)                                \n" +
                "		) AS Invoice_Detail_JT;         \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Line_Detail;                                                                           \n" +
                "		CREATE TEMPORARY TABLE temp_Invoice_Line_Detail                    \n" +
                "		(                                                                          \n" +
                "			packingSlipSerialNumber VARCHAR(50),                  \n" +
                "			refChargesTypeId INT,        \n" +
                "			nickname VARCHAR(50),    \n" +
                "			partID INT,    \n" +
                "			refSupplierPartId INT,    \n" +
                "			scanLabel VARCHAR(1000),    \n" +
                "			orderedQty DECIMAL(18,8),    \n" +
                "			receivedQty DECIMAL(18,8),    \n" +
                "			packingSlipQty DECIMAL(18,8),    \n" +
                "			binID INT,    \n" +
                "			warehouseID INT,    \n" +
                "			parentWarehouseID INT,    \n" +
                "			invoicePrice DECIMAL(18,8),    \n" +
                "			purchasePrice DECIMAL(18,8),    \n" +
                "			disputedPrice DECIMAL(18,8),    \n" +
                "			approveNote VARCHAR(1000),    \n" +
                "			otherCharges INT,    \n" +
                "			`status` VARCHAR(1),    \n" +
                "			extendedPrice DECIMAL(18,8),    \n" +
                "			refCreditDebitInvoiceNo INT,    \n" +
                "			difference DECIMAL(18,8),    \n" +
                "			umidCreated TINYINT(1),    \n" +
                "			poReleaseNumber VARCHAR(1000),    \n" +
                "			packagingID INT,  \n" +
                "			receivedStatus VARCHAR(2),  \n" +
                "			remark VARCHAR(255)  \n" +
                "		);         \n" +
                "  \n" +
                "		INSERT INTO temp_Invoice_Line_Detail (    \n" +
                "			packingSlipSerialNumber,                  \n" +
                "			refChargesTypeId,        \n" +
                "			nickname,    \n" +
                "			partID,    \n" +
                "			refSupplierPartId,    \n" +
                "			scanLabel,    \n" +
                "			orderedQty,    \n" +
                "			receivedQty,    \n" +
                "			packingSlipQty,    \n" +
                "			binID,    \n" +
                "			warehouseID,    \n" +
                "			parentWarehouseID,    \n" +
                "			invoicePrice,    \n" +
                "			purchasePrice,    \n" +
                "			disputedPrice,    \n" +
                "			approveNote,    \n" +
                "			otherCharges,    \n" +
                "			`status`,    \n" +
                "			extendedPrice,    \n" +
                "			refCreditDebitInvoiceNo,    \n" +
                "			difference,    \n" +
                "			umidCreated,    \n" +
                "			poReleaseNumber,    \n" +
                "			packagingID,  \n" +
                "			receivedStatus,  \n" +
                "			remark    \n" +
                "		)    \n" +
                "		SELECT  packingSlipSerialNumber,                  \n" +
                "			refChargesTypeId,        \n" +
                "			nickname,    \n" +
                "			partID,    \n" +
                "			refSupplierPartId,    \n" +
                "			scanLabel,    \n" +
                "			orderedQty,    \n" +
                "			receivedQty,    \n" +
                "			packingSlipQty,    \n" +
                "			binID,    \n" +
                "			warehouseID,    \n" +
                "			parentWarehouseID,    \n" +
                "			invoicePrice,    \n" +
                "			purchasePrice,    \n" +
                "			disputedPrice,    \n" +
                "			approveNote,    \n" +
                "			otherCharges,    \n" +
                "			`status`,    \n" +
                "			extendedPrice,    \n" +
                "			refCreditDebitInvoiceNo,    \n" +
                "			difference,    \n" +
                "			umidCreated,    \n" +
                "			poReleaseNumber,    \n" +
                "			packagingID,  \n" +
                "			receivedStatus,  \n" +
                "			remark      \n" +
                "		FROM 	packing_slip_material_receive_det     \n" +
                "		WHERE 	deletedAt IS NULL     \n" +
                "				AND refPackingSlipMaterialRecID = pPackingSlipId;    \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_CountOfInvoiceDetail FROM temp_Invoice_Detail;            \n" +
                "  \n" +
                "		IF (v_CountOfInvoiceDetail > 0) THEN            \n" +
                "			INSERT INTO packing_slip_material_receive (poNumber, mfgCodeID, supplierSONumber, packingSlipNumber, packingSlipDate, invoiceNumber, invoiceDate, receiptDate, receiptType, `status`, applyDate, invoiceTotalDue, isTariffInvoice, createdBy, updatedBy)            \n" +
                "			SELECT 	poNumber, mfgCodeID, supplierSONumber, packingSlipNumber, packingSlipDate, invoiceNumber, invoiceDate, receiptDate, receiptType, `status`, applyDate, invoiceTotalDue, isTariffInvoice, pUserId, pUserId            \n" +
                "			FROM 	temp_Invoice_Detail;	            \n" +
                "  \n" +
                "			SELECT LAST_INSERT_ID() INTO v_IdOfInvoice;            \n" +
                "  \n" +
                "			UPDATE 	packing_slip_material_receive            \n" +
                "			SET 	refPackingSlipNumberForInvoice = v_IdOfInvoice            \n" +
                "			WHERE	id = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1)            \n" +
                "					AND deletedAt IS NULL;            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_CountOfInvoiceLineDetail FROM temp_Invoice_Line_Detail;            \n" +
                "		IF (v_CountOfInvoiceLineDetail > 0) THEN            \n" +
                "			INSERT INTO packing_slip_material_receive_det (refPackingSlipMaterialRecID, packingSlipSerialNumber, refChargesTypeId, nickname, partID, refSupplierPartId, scanLabel, orderedQty, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, purchasePrice, disputedPrice, otherCharges, `status`, extendedPrice, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, createdBy, updatedBy)            \n" +
                "			SELECT 	v_IdOfInvoice, packingSlipSerialNumber,      \n" +
                "				(CASE WHEN (refChargesTypeId > 0) THEN refChargesTypeId ELSE NULL END),    \n" +
                "				nickname,      \n" +
                "				(CASE WHEN ( partID > 0) THEN  partID ELSE NULL END),        \n" +
                "				(CASE WHEN ( refSupplierPartId > 0) THEN  refSupplierPartId ELSE NULL END),        \n" +
                "				scanLabel,      \n" +
                "				orderedQty,      \n" +
                "				receivedQty,      \n" +
                "				packingSlipQty,      \n" +
                "				(CASE WHEN ( binID > 0) THEN  binID ELSE NULL END),        \n" +
                "				(CASE WHEN ( warehouseID > 0) THEN  warehouseID ELSE NULL END),        \n" +
                "				(CASE WHEN ( parentWarehouseID < 0) THEN  parentWarehouseID ELSE NULL END),        \n" +
                "				invoicePrice,      \n" +
                "				purchasePrice,      \n" +
                "				disputedPrice,      \n" +
                "				otherCharges,     \n" +
                "				`status`,      \n" +
                "				extendedPrice,      \n" +
                "				(CASE WHEN ( refCreditDebitInvoiceNo > 0) THEN  refCreditDebitInvoiceNo ELSE NULL END),        \n" +
                "				difference,      \n" +
                "				umidCreated,      \n" +
                "				poReleaseNumber,      \n" +
                "				(CASE WHEN ( packagingID > 0) THEN  packagingID ELSE NULL END),        \n" +
                "				receivedStatus,   \n" +
                "				remark,  \n" +
                "				pUserId,      \n" +
                "				pUserId            \n" +
                "			FROM 	temp_Invoice_Line_Detail;	            \n" +
                "		END IF;            \n" +
                "  \n" +
                "	-- COMMIT;            \n" +
                "	SELECT v_IdOfInvoice AS PackingSlipId;            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2636,'2.00','V1','DB changes of packing slip material part received detail - FENIL '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2636:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(                                                      \n" +
                "	IN pPageIndex INT(11),                                                                \n" +
                "	IN pRecordPerPage INT(11),                                                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                                                \n" +
                "	IN pWhereClause VARCHAR(16383),                                                      \n" +
                "	IN pPackingSlipID INT(11)                                                   \n" +
                ")  \n" +
                "BEGIN                                                      \n" +
                "	DECLARE pOffset INT(11);                                                                \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                  \n" +
                "	DECLARE v_ParentPackingSlipId INT(11);  \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;                           \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS                                                                \n" +
                "	SELECT 		p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,                          \n" +
                "			CAST(p.packingSlipSerialNumber AS SIGNED) packingSlipSerialNumber,                                     \n" +
                "			p.nickname, 					p.partID, 						p.scanLabel, 	                                      \n" +
                "			p.orderedQty, 					p.receivedQty, 						p.packingSlipQty, 	                                      \n" +
                "			p.binID, 					p.warehouseID, 						p.parentWarehouseID, 	                                      \n" +
                "			p.invoicePrice, 				p.disputedPrice,					p.createdBy,                                       \n" +
                "			p.createdAt, 					p.updatedBy, 						p.updatedAt,                                      \n" +
                "			p.deletedBy, 					p.deletedAt, 						p.isDeleted,                                      \n" +
                "			p.purchasePrice, 				p.approveNote, 						p.otherCharges,                                       \n" +
                "			p.status, 					p.extendedPrice, 					p.refCreditDebitInvoiceNo,                                       \n" +
                "			p.difference, 					p.umidCreated, 						p.poReleaseNumber,                                      \n" +
                "			fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,                                                 \n" +
                "			c.mfgcodeID,					c.mfgPN,					        sc.mfgPN supplierPN,                                 \n" +
                "			c.unit,						c.uom,					  		fun_getUnitNameByID(c.uom) uomName,	  	                                          \n" +
                "			0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,                          		                        \n" +
                "			p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,	                        \n" +
                "			fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,	                                                  \n" +
                "			c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                      \n" +
                "			sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,                \n" +
                "			sc.packagingID supplierPackagingId,		c.packageQty spq,                                       c.isCustom,       \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "						p.receivedStatus  \n" +
                "					ELSE   \n" +
                "						(SELECT receivedStatus   \n" +
                "						FROM 	packing_slip_material_receive_det   \n" +
                "						WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId   \n" +
                "								AND packingSlipSerialNumber = p.packingSlipSerialNumber    \n" +
                "								AND isDeleted = 0)  \n" +
                "				END  \n" +
                "			)  \n" +
                "			receivedStatus,				  \n" +
                "			(  \n" +
                "				CASE   \n" +
                "					WHEN p.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN p.receivedStatus = 'A' THEN 'Accept'  \n" +
                "					WHEN p.receivedStatus = 'R' THEN 'Reject'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS receivedStatusValue,  \n" +
                "			p.remark,    \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "						(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND isDeleted = 0)  \n" +
                "					ELSE   \n" +
                "						(SELECT COUNT(1)   \n" +
                "						FROM 	packing_slip_material_receive_part_inspection_det   \n" +
                "						WHERE 	lineId = (  \n" +
                "								SELECT 	id   \n" +
                "								FROM 	packing_slip_material_receive_det   \n" +
                "								WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId   \n" +
                "										AND packingSlipSerialNumber = p.packingSlipSerialNumber   \n" +
                "										AND deletedAt IS NULL   \n" +
                "								LIMIT 	1  \n" +
                "							) AND isDeleted = 0)  \n" +
                "				END  \n" +
                "			) AS purchaseRequirementCount,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "						(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0)  \n" +
                "					ELSE  \n" +
                "						(SELECT COUNT(1)   \n" +
                "						FROM 	packing_slip_material_receive_part_inspection_det   \n" +
                "						WHERE 	lineId = (  \n" +
                "								SELECT 	id   \n" +
                "								FROM 	packing_slip_material_receive_det   \n" +
                "								WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId   \n" +
                "										AND packingSlipSerialNumber = p.packingSlipSerialNumber   \n" +
                "										AND deletedAt IS NULL   \n" +
                "								LIMIT 	1  \n" +
                "							)   \n" +
                "							AND inspectionStatus = 'R'   \n" +
                "							AND isDeleted = 0)  \n" +
                "				END  \n" +
                "			) AS rejectedPurchaseRequirementCount,    \n" +
                "			(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,                                                      \n" +
                "			fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,                                                \n" +
                "			(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.deletedAt IS NULL          \n" +
                "			 WHERE csspd.deletedAt IS NULL AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,	          \n" +
                "			(SELECT GROUP_CONCAT(packingSlipNumber) FROM packing_slip_material_receive ps WHERE ps.deletedAt IS NULL AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,            \n" +
                "			(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.deletedAt IS NULL AND ps.refPackingSlipDetId = p.id GROUP BY ps.refPackingSlipDetId) AS amount,            \n" +
                "			(SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.deletedAt IS NULL) refInvoiceLine,             \n" +
                "			fun_getUserNameByID(p.createdBy) createdByName,sc.isCustom AS isCustomSupplier                                                           \n" +
                "	FROM		packing_slip_material_receive_det p                                              \n" +
                "	LEFT JOIN 	component c ON p.partID = c.id AND c.deletedAt IS NULL                      \n" +
                "	LEFT JOIN	component sc ON p.refSupplierPartId = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL                          \n" +
                "	WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID                                                       \n" +
                "	AND 		p.deletedAt IS NULL;                                                          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;                        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS                                                                \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, psm.packagingID                                                        \n" +
                "	FROM		packing_slip_material_receive_det psm                                                      \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON psm.refPackingSlipMaterialRecID = ps.id  AND ps.supplierSONumber = (SELECT supplierSONumber FROM packing_slip_material_receive WHERE id = pPackingSlipID)                                                    \n" +
                "	WHERE		psm.partID IN (SELECT p.PartID FROM packingSlipResult p)                                                  \n" +
                "	AND			ps.receiptType = 'P'                                            \n" +
                "	AND			IFNULL(psm.isDeleted, 0) = 0                                                    \n" +
                "	GROUP BY 	ps.supplierSONumber, psm.partID, psm.packagingID;                                                    \n" +
                "  \n" +
                "	-- Set received qty detail                                                            \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q                                                                \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty, r.pendingQty = (r.orderedQty - q.totalReceivedQty)                                                      \n" +
                "	WHERE 	r.partID = q.partID AND r.packagingID = q.packagingID;                                                        \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                                                                \n" +
                "	ELSE                                                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                \n" +
                "	END IF;	                                                                \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                \n" +
                "		SET pWhereClause = '1=1' ;                                                                \n" +
                "	END IF;	                                                        \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                 \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                \n" +
                "	ELSE	                                                                \n" +
                "		SET rowNumWhere = '';                                                                \n" +
                "	END IF;	                                                                \n" +
                "  \n" +
                "	/* to get total count of rows */                                                                \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );                                                                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                \n" +
                "	EXECUTE query1;                                                                \n" +
                "	DEALLOCATE PREPARE query1;                                                                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                \n" +
                "	EXECUTE query2;                                                                \n" +
                "	DEALLOCATE PREPARE query2;                                                            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPackingSlipDetailForElastic` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipDetailForElastic`(	                                                                            \n" +
                "	IN pId INT(11),      \n" +
                "    IN pReceiptType VARCHAR(1)      \n" +
                "  \n" +
                ")  \n" +
                "BEGIN                                                                         \n" +
                "	SELECT 		psmr.id        \n" +
                "			, psmr.receiptType AS receiptType        \n" +
                "			, psmr.mfgCodeID        \n" +
                "			, psmr.poNumber        \n" +
                "			, psmr.packingSlipNumber        \n" +
                "			, psmr.packingSlipDate        \n" +
                "			, psmr.invoiceNumber        \n" +
                "			, psmr.invoiceDate        \n" +
                "			, psmr.receiptDate        \n" +
                "			, psmr.chequeNumber         \n" +
                "			, psmr.chequeAmount        \n" +
                "			, psmr.chequeDate        \n" +
                "			, psmrd.id AS receivingDetId    \n" +
                "			, psmrd.packingSlipSerialNumber  \n" +
                "			, psmrd.receivedQty        \n" +
                "			, psmrd.nickname         \n" +
                "			, comp.id AS compId        \n" +
                "			, comp.mfgPN AS mfgPN        \n" +
                "			, mfgMst.id AS mfgMstId        \n" +
                "			, mfgMst.mfgName AS mfgName         \n" +
                "			, mfgMst.mfgCode AS mfgCode        \n" +
                "			, mfgMst.mfgType AS mfgType         \n" +
                "			, mfgMst.isCustOrDisty AS isCustOrDisty        \n" +
                "			, (SELECT invoiceNumber FROM packing_slip_material_receive WHERE id = psmr.refParentCreditDebitInvoiceno) AS refInvoiceNumber        \n" +
                "			, psmr.refParentCreditDebitInvoiceno AS parentInvoiceId  \n" +
                "			, psmrd.packagingID  \n" +
                "			, fun_getPackagingNameByID(psmrd.packagingID) AS packagingName  \n" +
                "			, psmrd.receivedStatus      \n" +
                "			, (  \n" +
                "				CASE  \n" +
                "					WHEN psmrd.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN psmrd.receivedStatus = 'A' THEN 'Accept'  \n" +
                "					WHEN psmrd.receivedStatus = 'R' THEN 'Reject'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS receivedStatusValue         \n" +
                "			, psmrd.remark  \n" +
                "	FROM 		packing_slip_material_receive AS psmr        \n" +
                "	INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID   \n" +
                "				AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0   \n" +
                "				AND psmr.Id = IFNULL(pId,psmr.Id)        \n" +
                "	LEFT OUTER JOIN component AS comp ON psmrd.partID = comp.id   \n" +
                "				AND comp.deletedAt IS NULL         \n" +
                "	LEFT OUTER JOIN mfgCodemst AS mfgMst ON psmr.mfgCodeID = mfgMst.id        \n" +
                "				AND (mfgMst.deletedAt IS NULL   \n" +
                "				AND mfgMst.isDeleted = FALSE)   \n" +
                "	WHERE      	(psmr.deletedAt IS NULL AND psmr.isDeleted = FALSE)   \n" +
                "				AND psmr.receiptType = IFNULL(pReceiptType,psmr.receiptType);        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCode` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCode`(		                                                                                                                  \n" +
                "    IN pWhereClause VARCHAR(16383),                                                                                                                  \n" +
                "    IN puserID VARCHAR(50),                                                                                            \n" +
                "    IN pnickName VARCHAR(20),                                                                                                            \n" +
                "    IN pprefix VARCHAR(20),                                                                                                            \n" +
                "    IN puid VARCHAR(20),                                                                                                        \n" +
                "    IN pComponentID INT,                                                                                                    \n" +
                "    IN pCustomerID INT,                                                                                                    \n" +
                "    IN pCPN BOOL,                                                                                                    \n" +
                "    IN pMFGAvailabel BOOL,                                                                                                    \n" +
                "    IN pRefCpnMfgID INT,                                                                                                \n" +
                "    IN pAssyID INT,                                                                                                \n" +
                "    IN pSalesOrderDetailID INT,		                                                                                                \n" +
                "    IN pReceiveMaterialType VARCHAR(255),                                                                                      \n" +
                "    IN pkitAssemblyID INT,                                                                                \n" +
                "    IN pBarcodeID INT,                                \n" +
                "    IN pBOMLineID INT 	                                                                                               \n" +
                "    )  \n" +
                "BEGIN                                                                                                                \n" +
                "	CALL Sproc_MatchBarCodeAndSaveDelimiters (pWhereClause,puserID,pnickName,pprefix,puid,pComponentID,pCustomerID,pCPN,pMFGAvailabel,pRefCpnMfgID,pAssyID,pSalesOrderDetailID,pReceiveMaterialType,pkitAssemblyID,pBarcodeID,pBOMLineID);	        \n" +
                "	SELECT * FROM tempUIDSuccessDetail;        \n" +
                "	SELECT * FROM tempUIDComponentDetail;      \n" +
                "	-- SELECT * FROM tempPurchaseInspectionDetail;									        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                                                                                                                        \n" +
                "    IN pWhereClause VARCHAR(16383),                                                                                                                        \n" +
                "    IN puserID VARCHAR(50),                                                                                                  \n" +
                "    IN pnickName VARCHAR(20),                                                                                                                  \n" +
                "    IN pprefix VARCHAR(20),                                                                                                                  \n" +
                "    IN puid VARCHAR(20),                                                                                                              \n" +
                "    IN pComponentID INT,                                                                                                          \n" +
                "    IN pCustomerID INT,                                                                                                          \n" +
                "    IN pCPN BOOL,                                                                                                          \n" +
                "    IN pMFGAvailabel BOOL,                                                                                                          \n" +
                "    IN pRefCpnMfgID INT,                                                                                                      \n" +
                "    IN pAssyID INT,                                                                                                      \n" +
                "    IN pSalesOrderDetailID INT,		                                                                                                      \n" +
                "    IN pReceiveMaterialType VARCHAR(255),                                                                                            \n" +
                "    IN pkitAssemblyID INT,                                                                                      \n" +
                "    IN pBarcodeID INT,                                      \n" +
                "    IN pBOMLineID INT 	                                                                                                     \n" +
                "    )  \n" +
                "BEGIN                                                                                                                        \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                                                                                                        \n" +
                "	DECLARE v_delimiter VARCHAR(10);                                                                                                                        \n" +
                "	DECLARE v_length INT;                                                                                                                         \n" +
                "	DECLARE v_fieldType INT;                                                                                                                             \n" +
                "	DECLARE v_entityId INT;                                                                                                                        \n" +
                "	DECLARE v_dataElementId INT;                                                                                                                        \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                                                                                                                        \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                                                                                                                        \n" +
                "	DECLARE strLabel VARCHAR(2000);                                                                                                                        \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                                                                                                                        \n" +
                "	DECLARE StaticField VARCHAR(100);                                                                                                  \n" +
                "	DECLARE DynamicField VARCHAR(100);		                                                                                                  \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                                                                                                                        \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');                                                                                                                        \n" +
                "	DECLARE plen,slen INT;                                                                                                                        \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                                                                                                                        \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                                                                                                                    \n" +
                "	DECLARE barcode_type_id INT;                                                                                                              \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);                                                                                                          \n" +
                "	DECLARE UpdateValue VARCHAR(16383);                                                                                           \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';                                                                                          \n" +
                "	DECLARE v_SupplierID INT;                                                                                      \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);                                                                                        \n" +
                "	DECLARE v_barcode_id INT;                                                                                      \n" +
                "	DECLARE v_barcode_count INT;                                                                                      \n" +
                "	DECLARE v_NumberOfPart INT;                                                                                       \n" +
                "	DECLARE v_rfqLineItemsID INT;                                                                 \n" +
                "	DECLARE v_componentCount INT;                                                              \n" +
                "	DECLARE v_componentId INT;                                                                    \n" +
                "	DECLARE v_mfgPartNO VARCHAR(50);                                                              \n" +
                "	DECLARE v_partMFG INT;                                                                  \n" +
                "	DECLARE v_isGoodPart TINYINT(1);                                                              \n" +
                "	DECLARE v_restrictUsePermanently TINYINT(1);                                                              \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT(1);                                                              \n" +
                "	DECLARE v_restrictUseInBOM TINYINT(1);                                                        \n" +
                "	DECLARE v_isInstall TINYINT(1);                                                         \n" +
                "	DECLARE v_isBOMLineClean TINYINT(1);                                                      \n" +
                "	DECLARE v_BOMLineId INT(11);                                                    \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT(1);                                                    \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT(1);                                                    \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;                                                    \n" +
                "	DECLARE v_PIDCode VARCHAR(50);                                                 \n" +
                "	DECLARE v_isPurchase TINYINT(1);                                              \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);                                         \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);                                      \n" +
                "	DECLARE v_BOMLineCount INT(11);                                       \n" +
                "	DECLARE v_AlternateLineId INT(11);                                     \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);                                    \n" +
                "	DECLARE v_BOMAssyId INT(11);                                    \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);                                    \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT(1);                            \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT(1);                            \n" +
                "	DECLARE v_isCPNFlag TINYINT(1);               \n" +
                "	DECLARE v_dateCodeFormatID INT;                 \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);                    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                                                                                                                         \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                                                                                                                        \n" +
                "	(                                                                                                                        \n" +
                "		errorText LONGTEXT,                                                                                                                        \n" +
                "		IsSuccess VARCHAR (2),                                                                                                              \n" +
                "		MFGPart VARCHAR(10000)                                                                                                                             \n" +
                "	);                                                                                           \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;                                                                                                                         \n" +
                "	CREATE TEMPORARY TABLE temp_Component_Sid_Stock                                                                                                                        \n" +
                "	(                                                                                                                        \n" +
                "		refcompid INT,                                                                                                                        \n" +
                "		pkgQty DECIMAL(18,6),                                                                                    \n" +
                "		dateCode VARCHAR(10),                                                                                    \n" +
                "		lotCode VARCHAR(255),                                                                                    \n" +
                "		scanlabel VARCHAR(1000),                                                                                    \n" +
                "		createdBy VARCHAR(255),                                                                                    \n" +
                "		uid VARCHAR(14),                                                                                    \n" +
                "		prefix VARCHAR(20),                                                                                    \n" +
                "		nickName VARCHAR(50),                                                                                    \n" +
                "		cpn TINYINT,                                                                                    \n" +
                "		mfgAvailabel TINYINT,                                                                                    \n" +
                "		refCPNMFGPNID INT,                                                                                    \n" +
                "		customerID INT,                                                                                    \n" +
                "		assyID INT,                                                                                    \n" +
                "		salesOrderDetailID INT,                                                                                    \n" +
                "		receiveMaterialType VARCHAR(255),                                                                                    \n" +
                "		refSupplierPartId INT,            \n" +
                "		mfrDateCode VARCHAR(50)                                                                                    \n" +
                "	);                                                                                     \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;                                                                                                                         \n" +
                "	CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values                                                                                                                        \n" +
                "	(                                                                                                                        \n" +
                "		entityid INT,                                                                                    \n" +
                "		dataelementid INT,                                                                                    \n" +
                "		`value` LONGTEXT,                                                                                    \n" +
                "		createdBy VARCHAR(255)                                                                                    \n" +
                "	);                                                                                                       \n" +
                "	-- get data from barcode templates with seprator                                                                       \n" +
                "	# return error code                                                                    \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found                                                                    \n" +
                "	# 0: Barcode template does not exist, Please add template                                                                    \n" +
                "	# 1: Validation Clear                                                                    \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component                                                                    \n" +
                "	# 3: Mfgcode is not found                                                                    \n" +
                "	# 4: MFG PN does not exist                                                                    \n" +
                "	# 5: Multiple MFG PN found                                                                    \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code                                                                    \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly                                                                    \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer                                                                    \n" +
                "	# 9:  Multiple barcode template found.                                                                    \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check                                                                    \n" +
                "	# 11: MFG PN is incorrect part                                                                  \n" +
                "	# 12: PID PID1 was restricted part at part master level.                                                                \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.                                                           \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.                                                          \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.                                                      \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.                                                    \n" +
                "	# 17: PID is contain more than 1 BOM line.                               \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.                            \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.                                                           \n" +
                "  \n" +
                "	block1: BEGIN                          \n" +
                "		SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");                    \n" +
                "		IF (pBarcodeID IS NULL) THEN                                                                                      \n" +
                "			SELECT COUNT(*), id, barcodeType, `name` INTO v_barcode_count, v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                                                        \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                     \n" +
                "			-- AND (CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;                                                                                         \n" +
                "  \n" +
                "			IF (v_barcode_count > 1) THEN                                                                                      \n" +
                "				SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                                                          \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                     \n" +
                "				-- AND (CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;                                                                                        \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                                                                                                         \n" +
                "				('Multiple barcode template found.',9,@multiple_barcode_string);	                                                                                                                        \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                           \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS             \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                      \n" +
                "			ELSE                                                                         \n" +
                "				/*SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                                                        \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND                                                                                      \n" +
                "				(CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;   */                                                                                      \n" +
                "				SET pBarcodeID = v_barcode_id;                                                                                      \n" +
                "			END IF;                                                                                      \n" +
                "		ELSE                                                                                       \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND id = pBarcodeID AND `status`=1;                                                                                      \n" +
                "		END IF;                                                             \n" +
                "  \n" +
                "		IF (barcode_type_id IS NULL) THEN                            \n" +
                "			/*SELECT COUNT(1) INTO v_NumberOfPart FROM                                                                                                 \n" +
                "			(                                                                                                \n" +
                "				SELECT c.id,c.mfgPN FROM component c WHERE c.mfgPN=pWhereClause AND c.deletedAt IS NULL                                                                                                \n" +
                "				UNION                                                                                                \n" +
                "				SELECT c.id,c.mfgPN FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID                                                                                                 \n" +
                "				WHERE (c.mfgPN=pWhereClause OR co.name=pWhereClause) AND co.deletedAt IS NULL AND c.deletedAt IS NULL                                                                                                \n" +
                "			) a;                        \n" +
                "			IF (v_NumberOfPart > 0) THEN   */                                                                                  \n" +
                "				SET pWhereClause = CONCAT(\"NONE\", pWhereClause);       				                    \n" +
                "				SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                        \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;                                                                                      \n" +
                "				SET pBarcodeID = v_barcode_id;                              \n" +
                "			/*END IF;  */                  \n" +
                "		END IF;                                                                                       \n" +
                "  \n" +
                "		-- tempregexp;    	                                                                                                \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */                                                                                        \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                                                                                                                      \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND id = pBarcodeID;                                                                                      \n" +
                "			SET v_BarcodeType = '2D';                                                                                                              \n" +
                "		ELSE /* barcode 1D */                       \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                                                                                                                       \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND id = pBarcodeID;                     \n" +
                "			SET v_BarcodeType = '1D';                                                                                                           \n" +
                "		END IF;                                                                                      \n" +
                "	END block1;                          \n" +
                "  \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                                                                      \n" +
                "		block2: BEGIN                                                                                      \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found                                                                                                                        \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR                                                                                                                        \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                                                                                                                     \n" +
                "				WHERE refbrID = pBarcodeID AND deletedAt IS NULL;                                                                                                                 \n" +
                "			-- declare exit loop if data not found                                                                                                                        \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                                                                                                        \n" +
                "			-- if any record match found than  check for delimiter and its value                                                                                                                   \n" +
                "			IF (pbr_template_ID > 0) THEN                                                                                                                        \n" +
                "				-- create temporary table for deliemeter and component dataelement                                                                                                                        \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                                                                                                                        \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                                                                                                                        \n" +
                "					pentityId INT,                                                                                                                        \n" +
                "					pdataElementId INT,                                                                                                                        \n" +
                "					pdelimiter_value VARCHAR(200)                                                                                                                        \n" +
                "				);                                                                                                                   \n" +
                "				-- create temporary table for separator string values                                                                                                                        \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                                                                                                                        \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));                                                                                                              \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string                                                                                                                        \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND id = pBarcodeID;                                                                                                             \n" +
                "				-- open cursor                                                                                                                        \n" +
                "				OPEN barcodeMatch_cursor;                                                                                                                        \n" +
                "				-- set str label as whereclause                                                                                                                        \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");                     \n" +
                "				-- if prefix is found than remove those from actual string match                                                                                                                        \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN				                                                                                                                        \n" +
                "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                                                \n" +
                "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));                                                                                                                        \n" +
                "				 END IF;                                                                                                                       \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match                                                                                                                         \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN                                                                                                                        \n" +
                "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                                                                                                        \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                                                                                                        \n" +
                "				 END IF;	                                                \n" +
                "				-- insert all values after seprator split                                                                                              \n" +
                "  \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                                        				                    \n" +
                "				PREPARE stmt1 FROM @SQL;                                                                                                                        \n" +
                "				EXECUTE stmt1;                                                                              \n" +
                "				-- create dynamic query to insert in recieving material                                                                                                                        \n" +
                "				SET QueryForStatic = 'insert into temp_Component_Sid_Stock';                                                                                                   \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template                                                                                                                        \n" +
                "				barcodeMatch_loop:LOOP                                                                                                     \n" +
                "					-- get all five selected values                                                                                                                        \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                                                                                                                \n" +
                "					-- exit loop if no record found for barcode match                                                                                                                        \n" +
                "					IF exit_loop THEN                                                                                                                   \n" +
                "						CLOSE barcodeMatch_cursor;                                                                                                                        \n" +
                "						LEAVE barcodeMatch_loop;                                                                                                                        \n" +
                "					END IF;                                                                                                                   \n" +
                "  \n" +
                "					-- dynamic query to get dellimeter string with values from string                                                                                                                        \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                                                                                                                        \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                                                                                                                        \n" +
                "					EXECUTE stmtdelimiter;                                                                                                              \n" +
                "  \n" +
                "					-- get delimiter values from string                                                                                                                        \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                                                                                                                \n" +
                "					-- check for field type is static or dynamic                                                                                                                        \n" +
                "					-- if static field than check for mfg code and mfg part number              \n" +
                "					IF v_fieldType = 0  THEN                                                                                                                    \n" +
                "						-- component_sid_stock                                                                                                                         \n" +
                "						-- get static field name from barcode table delimiter data element id                                                                                                                        \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                                                                                                                          \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                                                                                                                        \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN                                                                                                              \n" +
                "							SET MFG_Part_No = delimiter_value_data;                                                                                                              \n" +
                "							IF(pComponentID = 0)THEN                                                             \n" +
                "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;                                                             \n" +
                "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS                                                            \n" +
                "								SELECT id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission FROM                                                                                                 \n" +
                "								(                                                                                                \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission                                                               \n" +
                "									FROM 	component c                                                               \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL                                                                                                \n" +
                "									UNION                                                                                                \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission                                                               \n" +
                "									FROM 		component_otherpn co                                                               \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID                                                                                                 \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL                                                                                                \n" +
                "								) a;                                                            \n" +
                "  \n" +
                "								SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;                     \n" +
                "								IF (v_componentCount > 1) THEN                                                            \n" +
                "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;                                                             \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS                                                            \n" +
                "									SELECT * FROM temp_component_detail WHERE mfgcodeID > 0;                                                            \n" +
                "  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;                                                            \n" +
                "									IF (v_componentCount < 2) THEN                                                            \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                                     \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                                              \n" +
                "										FROM 	temp_component_supplier_detail;                                                            \n" +
                "									END IF;                                                            \n" +
                "								ELSE                                                             \n" +
                "									SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                                     \n" +
                "										INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                                             \n" +
                "									FROM 	temp_component_detail;                                                            \n" +
                "								END IF;                                                            \n" +
                "  \n" +
                "								/*SELECT COUNT(1), id, mfgPN, mfgcodeID, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission FROM                                                                                                 \n" +
                "								(                                                                                                \n" +
                "									SELECT 	c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission                                                               \n" +
                "									FROM 	component c                                                               \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL                                                                                                \n" +
                "									UNION                                                                                                \n" +
                "									SELECT 		c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission                                                               \n" +
                "									FROM 		component_otherpn co                                                               \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID                                                                                                 \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL                                                                                                \n" +
                "								) a; */                                                            \n" +
                "							ELSE                                                                                                    \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                                      \n" +
                "									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                                               \n" +
                "								FROM 	component                                                               \n" +
                "								WHERE 	id = pComponentID AND deletedAt IS NULL;                                                                                                              \n" +
                "							END IF;                                                                      \n" +
                "  \n" +
                "							/*IF (v_componentCount > 1) THEN                                                              \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission                                                               \n" +
                "								FROM 	component                                                               \n" +
                "								WHERE 	mfgPN = delimiter_value_data AND mfgcodeID > 0 AND deletedAt IS NULL;                                                              \n" +
                "							END IF;  */                                                            \n" +
                "  \n" +
                "							IF v_componentCount > 1 THEN                                                                                                              \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                        \n" +
                "								LEAVE barcodeMatch_loop;                                                                                                              \n" +
                "							END IF;                                                            \n" +
                "  \n" +
                "							IF (v_isGoodPart != 1) THEN                                                                    \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                        \n" +
                "								LEAVE barcodeMatch_loop;                                                                       \n" +
                "							END IF;                                                                    \n" +
                "  \n" +
                "							IF (v_restrictUsePermanently = 1) THEN                                                                  \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                        \n" +
                "								LEAVE barcodeMatch_loop;                                                                  \n" +
                "							END IF;                                                    \n" +
                "  \n" +
                "							IF (v_restrictPackagingAliasPermanently = 1) THEN                                                                  \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                        \n" +
                "								LEAVE barcodeMatch_loop;                                                                  \n" +
                "							END IF;                                                                  \n" +
                "  \n" +
                "							IF (@barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN                                                                                          \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';                                                                                          \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                        \n" +
                "								LEAVE barcodeMatch_loop;                                                                                            \n" +
                "							END IF;                                                                                          \n" +
                "  \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND deletedAt IS NULL;                                                                                          \n" +
                "							IF (@MFGType = 'DIST') THEN                                                                                          \n" +
                "								SET v_SupplierID = v_componentId;                                                                                          \n" +
                "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier;                                                                                          \n" +
                "							END IF;                                     \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN                                        \n" +
                "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE deletedAt IS NULL AND refSalesOrderDetID = pSalesOrderDetailID;			                                    \n" +
                "								-- SELECT DISTINCT rfqLineItemsID INTO v_rfqLineItemsID FROM rfq_lineitems_alternatepart WHERE partID = pkitAssemblyID AND mfgPNID = v_componentId limit 1;				                                                                                            \n" +
                "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId   -- a.bomLineCleanStatus, a.description,                                                   \n" +
                "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId  -- v_isBOMLineClean, v_bomErrorDescription,                                                                                      \n" +
                "								FROM 	(                        \n" +
                "									SELECT 	*                        \n" +
                "									FROM                                          \n" +
                "										(                                                                                      \n" +
                "											SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall, -- fun_getBOMLineCleanStatusErrorCategoryWise(rml.id, NULL, NULL, NULL, 3) AS bomLineCleanStatus,                                               \n" +
                "													-- CONCAT(IFNULL(rl.description, ''), IFNULL(rml.description,'')) description,                                     \n" +
                "													rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId                            \n" +
                "											FROM 		component_packagingalias cp                                                                                        \n" +
                "											LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid                                                                                        \n" +
                "											LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id                                                         \n" +
                "											INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID                                                                                       \n" +
                "											WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.deletedAt IS NULL                                                              \n" +
                "											UNION                                                                                        \n" +
                "											SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall, -- fun_getBOMLineCleanStatusErrorCategoryWise(rla.id, NULL, NULL, NULL, 3) AS bomLineCleanStatus,                                               \n" +
                "													-- CONCAT(IFNULL(rl.description, ''), IFNULL(rla.description,'')) description,                                     \n" +
                "													rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId                                                           \n" +
                "											FROM 		rfq_lineitems_alternatepart rla                                                        \n" +
                "											INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                                                                                                                       \n" +
                "											WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.deletedAt IS NULL                                                                            \n" +
                "											UNION                                       \n" +
                "											SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall, -- fun_getBOMLineCleanStatusErrorCategoryWise(rla.id, NULL, NULL, NULL, 3) AS bomLineCleanStatus,                                               \n" +
                "													-- CONCAT(IFNULL(rl.description, ''), IFNULL(rla.description,'')) description,                                     \n" +
                "													rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId                                                            \n" +
                "											FROM 		rfq_lineitems_alternatepart rla                                                        \n" +
                "											INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                                                                                                                       \n" +
                "											WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.deletedAt IS NULL AND custPNID IS NOT NULL                                       \n" +
                "											GROUP BY 	custPNID, rla.partID                            \n" +
                "  \n" +
                "											/*SELECT 		id, custPNID AS componentID, 0 AS restrictUseInBOMStep, isInstall, 1 AS bomLineCleanStatus, description, isPurchase, isBuyDNPQty,                                         \n" +
                "													lineID                                                         \n" +
                "											FROM 		rfq_lineitems                                                                                        \n" +
                "											WHERE 		partID = pkitAssemblyID AND custPNID IS NOT NULL AND deletedAt IS NULL*/                                                                                    \n" +
                "										) b WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)                        \n" +
                "										GROUP BY b.lineID, b.assyId                        \n" +
                "								) a;                        \n" +
                "  \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN                                                                                            \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                        \n" +
                "									LEAVE barcodeMatch_loop;                                                          \n" +
                "								ELSEIF (v_BOMLineCount > 1) THEN                                                      \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                        \n" +
                "									LEAVE barcodeMatch_loop;                                                       \n" +
                "								ELSE                                    \n" +
                "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN                                                                                            \n" +
                "										CLOSE barcodeMatch_cursor;                                                                                                                        \n" +
                "										LEAVE barcodeMatch_loop;                                                                                            \n" +
                "									END IF;                                 \n" +
                "  \n" +
                "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;                                    \n" +
                "									IF (v_isBOMLineClean = 0) THEN                                                      \n" +
                "										CLOSE barcodeMatch_cursor;                                                                                                                        \n" +
                "										LEAVE barcodeMatch_loop;                                                       \n" +
                "									END IF;                                    \n" +
                "								END IF;                                                          \n" +
                "  \n" +
                "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN                                                        \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                        \n" +
                "									LEAVE barcodeMatch_loop;                                                        \n" +
                "								END IF;                                                         \n" +
                "							END IF;                                                                                            \n" +
                "							IF  v_componentCount = 1 THEN                                 \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                                                                                                        \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"'); 	    				                                                                                                                        \n" +
                "							END IF;                                                                                                  \n" +
                "						END IF;                                                                                                                        \n" +
                "  \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                                                                                                                        \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN                                                                                                                \n" +
                "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                                                                                                                        \n" +
                "						END IF;                                                                                                          \n" +
                "  \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                  \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                                                                                                                        \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                        \n" +
                "						END IF;            \n" +
                "  \n" +
                "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                  \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                                                                                                        \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                        \n" +
                "						END IF;                                                                                                                                                                                                    \n" +
                "  \n" +
                "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                  \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');                                                                                                                        \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                        \n" +
                "  \n" +
                "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND deletedAt IS NULL;            \n" +
                "							IF (v_dateCodeFormatID IS NOT NULL) THEN            \n" +
                "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);            \n" +
                "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;            \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                                                                                                        \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');            \n" +
                "							END IF;            \n" +
                "						END IF;                                                                                                                                                                                                    \n" +
                "  \n" +
                "						/*IF v_componentCount > 1 THEN                                                                                                              \n" +
                "							CLOSE barcodeMatch_cursor;                                                                                                                        \n" +
                "							LEAVE barcodeMatch_loop;                                                                                                              \n" +
                "						END IF;      */                                                                                                           \n" +
                "  \n" +
                "						-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                                                                                                                        \n" +
                "						-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                                                                                                                         \n" +
                "  \n" +
                "						-- select strFeildforInsert,valuesforInsert;                                                                                                                        \n" +
                "  \n" +
                "					ELSE                                                                                                    \n" +
                "						-- component_sid_stock_dataelement_Values                                                                                                                          \n" +
                "						-- dynamic fields                                                                                                       \n" +
                "						/*SET DynamicField=(SELECT dataElementName FROM dataelement WHERE dataElementID=v_dataElementId AND deletedAt IS NULL);                                                                                                   \n" +
                "						IF(DynamicField=\"Mfg Date Code\" AND delimiter_value_data IS NOT NULL) THEN                                                                                                        \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                                                                                                        \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                        \n" +
                "						END IF;*/                                                                                                        \n" +
                "  \n" +
                "						/*IF(DynamicField=\"Lot Code\" AND delimiter_value_data IS NOT NULL) THEN                                                                                                        \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                                                                                                        \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                        \n" +
                "						END IF;*/                                                                                                  \n" +
                "  \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE                                                                                                                         \n" +
                "							dataElementID=v_dataElementId AND deletedAt IS NULL;                                                                                                                     \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                                                                                                                         \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);                                                                                                                 \n" +
                "					END IF;                                                                                                                        \n" +
                "  \n" +
                "				END LOOP barcodeMatch_loop;                                                                 \n" +
                "				-- check if mfg and component both found than                                                                \n" +
                "				IF v_componentCount = 0 THEN                                                                                                                        \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not exist',4,MFG_Part_No);                                                                                                                        \n" +
                "				ELSEIF (v_componentCount > 1) THEN                                                                                                              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFR PN found',5,MFG_Part_No);                                                                                                                                \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                                 \n" +
                "					IF (v_isGoodPart = 2) THEN                                            \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);                                                                  \n" +
                "					ELSE                                            \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);                                                                  \n" +
                "					END IF;                                            \n" +
                "				ELSEIF (v_restrictUsePermanently = 1) THEN                                                                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);                                                                  \n" +
                "				ELSEIF (v_restrictPackagingAliasPermanently = 1) THEN                                 \n" +
                "					IF (v_isCPNFlag = 1) THEN                            \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);                                                                  \n" +
                "					ELSE                             \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);                                                                  \n" +
                "					END IF;                            \n" +
                "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN                                                                                        \n" +
                "					-- In this case pass the barcodeid insted of MFGPN because in this case we have to not use the MFGPN                                                                                      \n" +
                "					-- if (v_BarcodeType = 1) then                                                                                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);                                                                                            \n" +
                "					-- else                                                                                      \n" +
                "					-- 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please check the manufacturer and if not exist then create new template for same manufacturer.'),8,v_barcode_id);                                                                                            \n" +
                "					-- end if;                                                                                      \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN                                                                                                                        \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN or CPN is not found in bom of this assembly.',7,MFG_Part_No);                                                                                            \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN                                                                                                                        \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));                                                                                            \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN                                                    \n" +
                "					-- INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Due to the below pending issues/status your BOM line is not clean. So, you can not allocate to kit.<br/><div class=\"cm-bom-error-block\">',v_bomErrorDescription,'</div>'),15,MFG_Part_No);                                                                                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line no <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> is not clean. So, you can not allocate UMID into kit.'),15,MFG_Part_No);                                                                                            \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN                                                                                                                        \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);                                                                                            \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN                                                                                                                        \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);                                                                                           \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN                                                                                                                        \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);                                                                                           \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN                                                                                                                        \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);                                                                                           \n" +
                "				ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN                                                                                                                        \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                                                                                                                        \n" +
                "					IF @Mfgmatched = 0  THEN                                                                                                                        \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MFR PN are avialable but not matched in component',2,MFG_Part_No);							                                                                                                                        \n" +
                "					END IF;									                                                                                                                        \n" +
                "				ELSE 		                                                                                                              \n" +
                "					IF @mfgCount = 0 THEN                                                                                                                        \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);                                                                                                                        \n" +
                "					END IF;	                                                                                                                        \n" +
                "					/*IF v_componentCount = 0 THEN                                                                                                                        \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not exist',4,MFG_Part_No);                                                                                                                        \n" +
                "					END IF;*/	                                                                                                                        \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND v_componentCount=0  THEN                                                                                                                          \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                                                                                                                        \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MFR PN is not Found',0,MFG_Part_No);                                                                                                                        \n" +
                "					END IF;						                                                                                                                        \n" +
                "				END IF;	                                                                    \n" +
                "  \n" +
                "				IF (pCPN = 1) THEN                                                                                                       \n" +
                "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;                                                                                                          \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;                                                                                                          \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN                                                                                                          \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);                                                                                                                        \n" +
                "					END IF;                                                                             \n" +
                "  \n" +
                "					IF (@isCPNPart != 1) THEN                                                                          \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);                                                                                                                        \n" +
                "					END IF;                                                                                                       \n" +
                "				END IF;                                                                                                      \n" +
                "				IF (puid IS NOT NULL) THEN                                                       \n" +
                "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                                                                                                        \n" +
                "						IF (pprefix = '') THEN	                                                                                         \n" +
                "							CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					                                                                                                          \n" +
                "							SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;                                                                                                          \n" +
                "						END IF;                                                                                                       \n" +
                "  \n" +
                "						-- must call statements in sequence          				                                                                                                              \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',',','uid',')','VALUES','(',valuesforInsert,',',puserID,',\"',puid,'\")',';');                                                                																		        						            \n" +
                "						PREPARE stmt1 FROM @SQL1;                                                                                                                        \n" +
                "						EXECUTE stmt1;                                                                                                                     \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set prefix=','\"',pprefix,'\"');                                                                                                          \n" +
                "						IF (pnickName IS NOT NULL) THEN                                                                                                          \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');                                                                                                          \n" +
                "						END IF;                                                                                            \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);                                                                                      \n" +
                "  \n" +
                "						IF (pRefCpnMfgID IS NOT NULL) THEN                                                                                                          \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);                                                                                                          \n" +
                "						END IF;                                                                                             \n" +
                "  \n" +
                "						IF (pCustomerID IS NOT NULL) THEN                                                                                                          \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);                                                                                                          \n" +
                "						END IF;                                                                                         \n" +
                "  \n" +
                "						IF (pAssyID IS NOT NULL) THEN                                                                                                          \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);                                                                                                          \n" +
                "						END IF;                                                                                           \n" +
                "  \n" +
                "						IF (pSalesOrderDetailID IS NOT NULL) THEN                                                                                                          \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);                                                                                                          \n" +
                "						END IF;                                                                                            \n" +
                "  \n" +
                "						IF (pReceiveMaterialType IS NOT NULL) THEN                                                                                                          \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');                                                                                                       \n" +
                "						END IF;                                                                                         \n" +
                "  \n" +
                "						IF (v_SupplierID IS NOT NULL) THEN                                                                                                          \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);                                                                                                          \n" +
                "						END IF;                                                                                         \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue,' where uid=','\"',puid,'\"');                     \n" +
                "						SET @sql2 = UpdateValue;	                                                                                                                         \n" +
                "						PREPARE stmt2 FROM @SQL2;                                                                                                                        \n" +
                "						EXECUTE stmt2;	                                                                                      \n" +
                "  \n" +
                "						IF (pkitAssemblyID IS NULL) THEN                                    \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                                                                                                                        \n" +
                "						ELSE                                     \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));                                                                                                                        \n" +
                "						END IF;                                    \n" +
                "  \n" +
                "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                                                                                                              \n" +
                "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)                                                                                                                         \n" +
                "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                                                                                                                        \n" +
                "						END IF;                                                                                                                        \n" +
                "  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                        \n" +
                "						SELECT * FROM temp_Component_Sid_Stock;                                                                                        \n" +
                "  \n" +
                "						SELECT 	c.*,                  \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,                  \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                   \n" +
                "							csup.packageQty AS supplierPkgQty,                   \n" +
                "							csup.mfgcodeID AS supplierMfgId,                   \n" +
                "							mcm.mfgcode AS supplierMFGCode,                   \n" +
                "							mcm.mfgName AS supplierMFGName,                   \n" +
                "							csup.mfgPN AS supplierMFGPN,                   \n" +
                "							csup.packagingID AS supplierPackagingId,                   \n" +
                "							fun_getPackagingNameByID(csup.packagingID) AS supplierPackagingName,                   \n" +
                "							csup.minimum AS supplierMinimum,                   \n" +
                "							ccpn.id AS cpnID,                   \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,                   \n" +
                "							rfqroh.rohsIcon AS rohsIcon,                   \n" +
                "							rfqroh.name AS rohsName,                   \n" +
                "							rfqmou.name AS mountingTypeName,                   \n" +
                "							um.unitName AS uomName,                  \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE deletedAt IS NULL AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                  \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE deletedAt IS NULL AND id = mg.dateCodeFormatID) dateCodeFormat,                  \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId                  \n" +
                "						FROM component AS c                                                                                     \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID                                                                                    \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID                                                                                    \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                  \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID                                                                                    \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                                                                                \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID                                                                                    \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID                                                                      \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom                                                                                   \n" +
                "						WHERE c.id = v_componentId;                                                                                    \n" +
                "  \n" +
                "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`                                                                                    \n" +
                "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv                                                                                     \n" +
                "						LEFT OUTER JOIN `dataelement` AS dl                                                                                    \n" +
                "						ON cssdlv.dataelementid = dl.dataElementID AND dl.deletedAt IS NULL;                                                                           \n" +
                "  \n" +
                "						SELECT 	id, refComponentID, refCPNPartID                                           \n" +
                "						FROM 	component_cust_alias_rev_pn                                           \n" +
                "						WHERE 	refCPNPartID = v_componentId AND deletedAt IS NULL;                            \n" +
                "  \n" +
                "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (                                                              \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND deletedAt IS NULL                                                               \n" +
                "						) AND deletedAt IS NULL;                                    \n" +
                "  \n" +
                "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,                             \n" +
                "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN                                           \n" +
                "						FROM 		rfq_lineitems_alternatepart rla                                          \n" +
                "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.deletedAt IS NULL                              \n" +
                "						WHERE 		rla.deletedAt IS NULL                                           \n" +
                "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))                                           \n" +
                "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)                                           \n" +
                "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);                                                    \n" +
                "  \n" +
                "						/*SELECT 	id,         \n" +
                "							partId,         \n" +
                "							inspectionRequirementId,      \n" +
                "							fun_getInspectionRequirementById(inspectionRequirementId) requirement         \n" +
                "						FROM 	componenet_inspection_requirement_det        \n" +
                "						WHERE 	partId = v_componentId        \n" +
                "								AND isDeleted = 0;  */    \n" +
                "					ELSE                                                                                                                       \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                                                        \n" +
                "					END IF;                                                                        \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                                                                           \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                      \n" +
                "				ELSE                                                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);               \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                           \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                           \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                   \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                           \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS              \n" +
                "					SELECT 	c.*,                   \n" +
                "						fun_getPackagingNameByID(c.packagingID) AS packagingName,                   \n" +
                "						CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                   \n" +
                "						csup.packageQty AS supplierPkgQty,                   \n" +
                "						csup.mfgcodeID AS supplierMfgId,                   \n" +
                "						mcm.mfgcode AS supplierMFGCode,                   \n" +
                "						mcm.mfgName AS supplierMFGName,                   \n" +
                "						csup.packagingID AS supplierPackagingId,                   \n" +
                "						csup.mfgPN AS supplierMFGPN,                   \n" +
                "						csup.id AS supplierMFGPNID,                   \n" +
                "						fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,                   \n" +
                "						fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,                             \n" +
                "						ccpn.id AS cpnID,                   \n" +
                "						ccpn.mfgcodeID AS cpnMFGCodeID,                   \n" +
                "						rfqroh.rohsIcon AS rohsIcon,                   \n" +
                "						rfqroh.name AS rohsName,                   \n" +
                "						rfqmou.name AS mountingTypeName,                   \n" +
                "						um.unitName AS uomName,                  \n" +
                "						(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE deletedAt IS NULL AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                  \n" +
                "						(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE deletedAt IS NULL AND id = mg.dateCodeFormatID) dateCodeFormat,                  \n" +
                "						mg.dateCodeFormatID AS dateCodeFormatId                  \n" +
                "					FROM component AS c                                                                                     \n" +
                "					LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID                                                                                    \n" +
                "					LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID                                                                                    \n" +
                "					LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                  \n" +
                "					LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID                                                                                    \n" +
                "					LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                                                                                 \n" +
                "					LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID                                                                               \n" +
                "					LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID                                                                        \n" +
                "					LEFT JOIN uoms AS um ON um.id = c.uom                                                                      \n" +
                "					WHERE c.id = v_componentId;                 \n" +
                "  \n" +
                "					/*DROP TEMPORARY TABLE IF EXISTS tempPurchaseInspectionDetail;                         \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempPurchaseInspectionDetail AS            \n" +
                "					SELECT 	id,         \n" +
                "						partId,         \n" +
                "						inspectionRequirementId,      \n" +
                "						fun_getInspectionRequirementById(inspectionRequirementId) requirement         \n" +
                "					FROM 	componenet_inspection_requirement_det        \n" +
                "					WHERE 	partId = v_componentId        \n" +
                "							AND isDeleted = 0; */                                                            \n" +
                "  \n" +
                "				END IF;                                                                                  \n" +
                "			ELSE                     \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                                                                                                         \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);	                                                                                                                        \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                                                                                                                          \n" +
                "			END IF;                                                                                                                        \n" +
                "  \n" +
                "		END block2;            \n" +
                "	ELSE          \n" +
                "		IF (puid IS NOT NULL) THEN          \n" +
                "			SELECT * FROM tempUIDSuccessDetail;          \n" +
                "		ELSE           \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                           \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS          \n" +
                "			SELECT 1;          \n" +
                "  \n" +
                "			/*DROP TEMPORARY TABLE IF EXISTS tempPurchaseInspectionDetail;                         \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempPurchaseInspectionDetail AS         \n" +
                "			SELECT 1;*/           \n" +
                "		END IF;          \n" +
                "	END IF;                                                                                                                                  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2637,'2.00','V1','DB changes of packing slip material part received detail - FENIL '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2637:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "ALTER TABLE workorder_trans_firstpcsdet ADD COLUMN remark VARCHAR(1000);  \n" +
                "  \n" +
                "ALTER TABLE workorder_operation_firstpiece    \n" +
                "ADD COLUMN prefix VARCHAR(10) NULL ,  \n" +
                "ADD COLUMN suffix VARCHAR(10) NULL,  \n" +
                "ADD COLUMN serialIntVal INT(11) NULL ,   \n" +
                "ADD COLUMN dateCodeFormat VARCHAR(5) NULL ;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2638,'2.00','V1',' new fields on first article table - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2638:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GenerateQuoteSummary`;  \n" +
                "CREATE PROCEDURE `Sproc_GenerateQuoteSummary`(      \n" +
                "	IN prfqAssyID INT(11)                  \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "	    SELECT qo.id,prfqAssyID `rfqAssyID`,      \n" +
                "         (CASE WHEN qo.timeType = 'B' THEN CEILING(7*(turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))      \n" +
                "            WHEN qo.timeType = 'D' THEN turntime      \n" +
                "            WHEN qo.timeType = 'W' THEN (turntime*7) END) turntimedays,      \n" +
                "            (CASE WHEN qo.timeType = 'B' THEN 'Business Days'      \n" +
                "            WHEN qo.timeType = 'D' THEN 'Week Days'      \n" +
                "            WHEN qo.timeType = 'W' THEN 'Week' END) turnType,      \n" +
                "        requestedQty `qty`, turntime `turnTime`, timeType `turnType`,      \n" +
                "		qo.materialCost AS materialCost, qo.materialDays AS materialLeadTime,      \n" +
                "		qo.laborCost AS laborCost, qo.laborDays AS laborLeadTime,      \n" +
                "		fun_generateSumOfAmountByCostingType(qo.id,prfqAssyID,'Overhead') additionalCost, fun_generateSumOfDaysByCostingType(qo.id,prfqAssyID,'Overhead') `customItemLeadTime`,      \n" +
                "		( qo.materialCost +qo.laborCost+fun_generateSumOfAmountByCostingType(qo.id,prfqAssyID,'Overhead')) `unitPrice`,      \n" +
                "		(IFNULL(qo.materialDays,0)+      \n" +
                "        (CASE WHEN (qo.laborDays>fun_generateSumOfDaysByCostingType(qo.id,prfqAssyID,'Overhead'))      \n" +
                "        THEN IFNULL(qo.laborDays,0)      \n" +
                "        ELSE fun_generateSumOfDaysByCostingType(qo.id,prfqAssyID,'Overhead') END      \n" +
                "        )) `totalLeadTime`,      \n" +
                "		(qo.requestedQty *(qo.materialCost +qo.laborCost +fun_generateSumOfAmountByCostingType(qo.id,prfqAssyID,'Overhead'))) extendedCost,      \n" +
                "		qo.excessQtyTotalPrice `excessMaterialCost`, (IFNULL(qo.nreDays,0)+ IFNULL(qo.toolingDays,0))nreDays, (IFNULL(qo.nreCost,0)+ IFNULL(qo.toolingCost,0))nreCost,fun_getNREToolingCostDescriptionbyQuoteID(qo.id,prfqAssyID) AS nretoolingdescription,      \n" +
                "        rpg.`name` priceGroup      \n" +
                "		FROM rfq_assy_quotations qo      \n" +
                "        LEFT JOIN rfq_price_group rpg ON rpg.id = qo.rfqPriceGroupId      \n" +
                "		WHERE qo.rfqAssyID = prfqAssyID AND qo.isDeleted = 0 AND qo.refSubmittedQuoteID IS NULL      \n" +
                "        ORDER BY rpg.id,qo.requestedQty, qo.turnTime;      \n" +
                "  \n" +
                "  # Generate Custom part Detail   \n" +
                "        SELECT * , (amount*requestedQty) AS extendedCost FROM (      \n" +
                "			SELECT prfqAssyID `rfqAssyID`,  qoa.id, qo.requestedQty,  com.mfgPn CustomPart,PIDCode,raqc.mfgPNID,        \n" +
                "			qoa.quoteChargeDynamicFieldID, qdf.fieldName, qdf.costingType, fun_getRoHSNameByID(com.RoHSStatusID) rohsName, fun_getRoHSIconByID(com.RoHSStatusID) rohsIcon,   \n" +
                "			requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days,      \n" +
                "			(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))      \n" +
                "						WHEN qo.timeType = 'D' THEN qo.turntime      \n" +
                "						WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime     \n" +
                "			FROM  rfq_assy_quotations qo      \n" +
                "			LEFT JOIN rfq_assy_quotations_additionalcost qoa ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0   \n" +
                "            left Join rfq_assy_quotations_customparts raqc on raqc.rfqAssyQuoteID = qo.id and raqc.id = qoa.refCustomPartQuoteID AND qo.isDeleted = 0   \n" +
                "            left join component com on com.id = raqc.mfgPNID  \n" +
                "			LEFT JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = qoa.quoteChargeDynamicFieldID      \n" +
                "			WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qdf.costingType = 'Material' AND qo.refSubmittedQuoteID IS NULL and qoa.refCustomPartQuoteID is not null     \n" +
                "            HAVING amount>0      \n" +
                "            ORDER BY qo.requestedQty, qo.turnTime,qdf.displayOrder   \n" +
                "		) a      \n" +
                "		GROUP BY requestedQty, turnTime,fieldName,amount,days;   \n" +
                "  \n" +
                "	# Genereate NRE Details      \n" +
                "		SELECT * , (amount*toolingQty) AS extendedCost FROM (      \n" +
                "			SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,      \n" +
                "			qoa.quoteChargeDynamicFieldID, qdf.fieldName, qdf.costingType,      \n" +
                "			requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days,      \n" +
                "			(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))      \n" +
                "						WHEN qo.timeType = 'D' THEN qo.turntime      \n" +
                "						WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime, qoa.toolingQty      \n" +
                "			FROM  rfq_assy_quotations qo      \n" +
                "			LEFT JOIN rfq_assy_quotations_additionalcost qoa ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0      \n" +
                "			LEFT JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = qoa.quoteChargeDynamicFieldID      \n" +
                "			WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qdf.costingType = 'NRE' AND qo.refSubmittedQuoteID IS NULL      \n" +
                "            HAVING amount>0      \n" +
                "            ORDER BY qo.requestedQty, qo.turnTime      \n" +
                "		) a      \n" +
                "		GROUP BY fieldName,amount,days;      \n" +
                "  \n" +
                "	# Genereate Tooling Details      \n" +
                "        SELECT *, (amount*toolingQty) AS extendedCost FROM (      \n" +
                "			SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,      \n" +
                "			qoa.quoteChargeDynamicFieldID, qdf.fieldName, qdf.costingType,      \n" +
                "			requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days,      \n" +
                "			(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))      \n" +
                "						WHEN qo.timeType = 'D' THEN qo.turntime      \n" +
                "						WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime , qoa.toolingQty      \n" +
                "			FROM  rfq_assy_quotations qo      \n" +
                "			LEFT JOIN rfq_assy_quotations_additionalcost qoa ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0      \n" +
                "			LEFT JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = qoa.quoteChargeDynamicFieldID      \n" +
                "			WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qdf.costingType = 'TooLing' AND qo.refSubmittedQuoteID IS NULL      \n" +
                "            HAVING amount>0      \n" +
                "            ORDER BY qo.requestedQty, qo.turnTime      \n" +
                "		) a      \n" +
                "		GROUP BY fieldName,amount,toolingQty,days;      \n" +
                "  \n" +
                "	# return quotation current data count for assembly      \n" +
                "		SELECT COUNT(*) FROM rfq_assy_quotations WHERE rfqAssyID = prfqAssyID AND isDeleted = 0 AND refSubmittedQuoteID IS NULL;      \n" +
                "  \n" +
                "	# Return data for rfq Price Group Matrix      \n" +
                "		SELECT rpg.id priceGroupID, rpg.name priceGroup, rpgd.qty, rpgd.rfqAssyID,ra.partID,       \n" +
                "		com.mfgPN, com.PIDCode, ro.name rohsName, ro.rohsIcon       \n" +
                "        FROM rfq_assemblies ra      \n" +
                "		JOIN rfq_price_group rpg ON rpg.refRFQID = ra.rfqrefID AND rpg.isDeleted =0       \n" +
                "		LEFT JOIN rfq_price_group_detail rpgd ON rpgd.rfqPriceGroupID = rpg.id AND rpgd.rfqAssyID = ra.id AND rpgd.isDeleted = 0      \n" +
                "		JOIN component com ON com.id = ra.partID      \n" +
                "		JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID      \n" +
                "		WHERE rfqrefID = (SELECT rfqrefID FROM rfq_assemblies WHERE id = prfqAssyID) AND ra.isDeleted = 0      \n" +
                "        ORDER BY rpg.id;      \n" +
                "  \n" +
                "	# Return Price Group      \n" +
                "		SELECT * FROM rfq_price_group WHERE id IN (SELECT rfqPriceGroupID FROM rfq_price_group_detail WHERE isDeleted = 0       \n" +
                "        AND refRFQID =(SELECT rfqrefID FROM rfq_assemblies WHERE id = prfqAssyID)) AND isDeleted = 0      \n" +
                "        ORDER BY id;      \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetQuoteSummaryDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetQuoteSummaryDetails`(                  \n" +
                "	IN prfqAssyID INT(11),                  \n" +
                "    IN pAssyQuoteSubmittedID INT(11)                  \n" +
                "    )  \n" +
                "BEGIN                  \n" +
                "  \n" +
                "  DECLARE vTextAngularKeyCode VARCHAR(500);                \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();                 \n" +
                "		# select list for quote summary details of last submitted quote                  \n" +
                "			SELECT unitPrice, qty, turnTime,priceGroup,                 \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN CEILING(7*(turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))                  \n" +
                "            WHEN qo.turnType = 'D' THEN turntime                  \n" +
                "            WHEN qo.turnType = 'W' THEN (turntime*7) END) turntimedays,                  \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN 'Business Days'                  \n" +
                "            WHEN qo.turnType = 'D' THEN 'Week Days'                  \n" +
                "            WHEN qo.turnType = 'W' THEN 'Week' END) turnType,                  \n" +
                "            qo.excessMaterialCost, qo.extendedCost, (qo.nreCost + qo.toolingCost) nreCost ,(qo.nreDays + qo.toolingDays) nreDays, qo.nretoolingdescription,                  \n" +
                "            qo.additionalCost,qo.materialCost,qo.materialLeadTime,qo.laborCost,qo.laborLeadTime,qo.customItemLeadTime,qo.totalLeadTime                  \n" +
                "			FROM rfq_assy_quote_submitted_assydetail qo                  \n" +
                "			JOIN rfq_assemblies_quotation_submitted sb ON sb.id = qo.refSubmittedQuoteID                  \n" +
                "			WHERE refSubmittedQuoteID = pAssyQuoteSubmittedID                  \n" +
                "            ORDER BY qo.rfqPriceGroupId,qo.qty, qo.turnTime;                  \n" +
                "  \n" +
                "  \n" +
                "        # select details for assembly,customer, submitted quote of selected rfq assy                  \n" +
                "			SELECT ra.id rfqAssyID, ra.partID, rf.id quoteID, part.PIDCode , part.isCustom , part.nickName, part.liveInternalVersion, part.mfgPNDescription, part.mfgPN, part.rev,part.assyCode,                  \n" +
                "            part.custAssyPN, cu.mfgName,cu.mfgCode,rf.customerid,rqs.custBillingAddressID, IFNULL(rqs.custTermsID, cu.custTermsID) AS custTermsID, rqs.custShippingAddressID,                  \n" +
                "            (CASE WHEN rqs.quoteNumber IS NOT NULL THEN IFNULL(rqs.BOMIssues,'')                  \n" +
                "            WHEN rqs.quoteNumber IS NULL THEN IFNULL(fun_getQuoteSubjectToFollowing(ra.id),'') END) AS BOMIssues,                  \n" +
                "            (                  \n" +
                "				(                  \n" +
                "					CASE WHEN rqs.custTermsID IS NULL THEN                  \n" +
                "                    (                  \n" +
                "						SELECT gencCategoryName FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = (SELECT custTermsID FROM mfgcodemst WHERE id = rf.customerid)                  \n" +
                "					)                  \n" +
                "                    ELSE                  \n" +
                "                    (                  \n" +
                "                    	SELECT gencCategoryName FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = rqs.custTermsID                  \n" +
                "                    )                  \n" +
                "                    END                  \n" +
                "				)                  \n" +
                "			)paymentTerm,                  \n" +
                "            (                  \n" +
                "				(                  \n" +
                "					CASE WHEN rqs.custTermsID IS NULL THEN                  \n" +
                "                    (                  \n" +
                "						SELECT termsDays FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = (SELECT custTermsID FROM mfgcodemst WHERE id = rf.customerid)                  \n" +
                "					)                  \n" +
                "                    ELSE                  \n" +
                "                    (                  \n" +
                "                    	SELECT termsDays FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = rqs.custTermsID                  \n" +
                "                    )                  \n" +
                "                    END                  \n" +
                "				)                  \n" +
                "			)termDays,                  \n" +
                "            rqs.bomInternalVersion, rqs.quoteSubmitDate, rqs.quoteNumber, rqs.id quoteSubmittedID, ra.assyNote,               \n" +
                "            fun_getTextAngularData(ra.additionalRequirement, vTextAngularKeyCode) additionalRequirement ,                          \n" +
                "            rf.quoteNote, rt.name RFQType, jt.name JobType, rat.name AssyType,               \n" +
                "            fun_getTextAngularData(rqs.OtherNotes, vTextAngularKeyCode) OtherNotes,              \n" +
                "            ra.isSummaryComplete, ra.isReadyForPricing, CONCAT(su.firstName,' ',su.lastName) `submittedBy`, su.emailAddress,                  \n" +
                "            ra.quoteFinalStatus, ra.isCustomPartDetShowInReport,            \n" +
                "            fun_getTextAngularData(rqs.promotions, vTextAngularKeyCode) promotions,              \n" +
                "            ra.assyNote,    part.RoHSStatusID, ro.name AS rohsComplientConvertedValue, ro.rohsIcon AS rohsIconPath,                  \n" +
                "            ro.rohsIcon AS rohsIcon,                  \n" +
                "            (                  \n" +
                "				(                  \n" +
                "					CASE WHEN rqs.custBillingAddressID IS NULL THEN                  \n" +
                "					(                  \n" +
                "						SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                               \n" +
                "						IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))                             \n" +
                "						FROM customer_addresses ca                  \n" +
                "						JOIN countrymst co ON co.countryID = ca.countryID                  \n" +
                "						WHERE customerID = rf.customerid AND ca.isDefault = 1 AND ca.isDeleted = 0 AND ca.addressType = 'B'                  \n" +
                "					)                  \n" +
                "					ELSE                  \n" +
                "					(                  \n" +
                "						SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                               \n" +
                "						IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))                             \n" +
                "						FROM customer_addresses ca                  \n" +
                "						JOIN countrymst co ON co.countryID = ca.countryID                  \n" +
                "						WHERE id = rqs.custBillingAddressID                  \n" +
                "					)                  \n" +
                "					END                  \n" +
                "				)                  \n" +
                "			) billingAddress,                  \n" +
                "            (                  \n" +
                "				(                  \n" +
                "					CASE WHEN rqs.custBillingAddressID IS NULL THEN                  \n" +
                "						(                  \n" +
                "							SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                               \n" +
                "							IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))                             \n" +
                "							FROM customer_addresses ca                  \n" +
                "							JOIN countrymst co ON co.countryID = ca.countryID                  \n" +
                "							WHERE customerID = rf.customerid AND ca.isDefault = 1 AND ca.isDeleted = 0 AND ca.addressType = 'S'                  \n" +
                "						)                  \n" +
                "					ELSE                  \n" +
                "						(                  \n" +
                "							SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                               \n" +
                "							IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))                                              \n" +
                "							FROM customer_addresses ca                  \n" +
                "							JOIN countrymst co ON co.countryID = ca.countryID                  \n" +
                "							WHERE id = rqs.custShippingAddressID                  \n" +
                "						)                  \n" +
                "					END                  \n" +
                "                )                  \n" +
                "			) shippingAddress,                  \n" +
                "            (                  \n" +
                "				(                  \n" +
                "				CASE WHEN ra.isSummaryComplete = 1 THEN                  \n" +
                "					(                  \n" +
                "						SELECT GROUP_CONCAT(CONCAT(cs.fullName,(CASE WHEN sc.className IS NULL THEN '' ELSE ' ' END),IFNULL(sc.className,'')) SEPARATOR ' | ') standards                  \n" +
                "						FROM rfq_assy_standard_class_detail csd                  \n" +
                "						JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0                  \n" +
                "						LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0                  \n" +
                "						WHERE csd.refSubmittedQuoteID = rqs.id                  \n" +
                "					)                  \n" +
                "					ELSE                  \n" +
                "					(                  \n" +
                "						SELECT GROUP_CONCAT(CONCAT(cs.fullName,(CASE WHEN sc.className IS NULL THEN '' ELSE ' ' END),IFNULL(sc.className,'')) SEPARATOR ' | ') standards                  \n" +
                "						FROM component_standard_details  csd                  \n" +
                "						JOIN certificate_standards cs ON cs.certificateStandardID =  csd.certificateStandardID AND cs.isDeleted = 0                  \n" +
                "						LEFT JOIN standard_class sc  ON sc.classID =  csd.ClassID AND cs.isDeleted = 0                  \n" +
                "						WHERE csd.isDeleted = 0 AND csd.componentID = (SELECT partID FROM rfq_assemblies WHERE id = ra.id)                  \n" +
                "					)                  \n" +
                "                END                  \n" +
                "				)                  \n" +
                "			) standards,                  \n" +
                "            (                  \n" +
                "				(                  \n" +
                "				CASE WHEN ra.isSummaryComplete = 0 AND (SELECT MAX(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyId = ra.id) = rqs.id THEN                  \n" +
                "					(                  \n" +
                "						(SELECT GROUP_CONCAT(dataelement SEPARATOR '<br/>') dataelementdata FROM (                  \n" +
                "						SELECT CONCAT((CASE WHEN subFormName ='' THEN '' ELSE CONCAT('<b>',subFormName,'</b><br/>') END), GROUP_CONCAT(dataelement SEPARATOR '<br/>')) dataelement                  \n" +
                "						FROM (SELECT (CASE WHEN refSubFormTransID IS NOT NULL THEN fun_getDataElementSubFormNameByID(refSubFormTransID) ELSE '' END) subFormName,                  \n" +
                "						CONCAT(fun_getDataElementNameByID(dataElementID),': ',`value`) dataelement                  \n" +
                "						FROM dataelement_transactionvalues WHERE entityID = -12 AND isDeleted = 0 AND refTransID = (SELECT rfqrefID FROM rfq_assemblies WHERE id = ra.id)                  \n" +
                "						)dataelementForms                  \n" +
                "						GROUP BY subFormName                  \n" +
                "						)a)                  \n" +
                "					)                  \n" +
                "					ELSE                  \n" +
                "					(                  \n" +
                "						   rqs.RFQMISCData                  \n" +
                "					)                  \n" +
                "                END                  \n" +
                "				)                  \n" +
                "			) dataelementdata,                  \n" +
                "            (SELECT COUNT(1) > 0 FROM rfq_assemblies_quotation_submitted WHERE id>rqs.id AND rfqAssyID = ra.id AND isDeleted = 0 AND quoteNumber IS NOT NULL) isQuoteHistory,                  \n" +
                "            (CASE WHEN ra.status = 1 THEN 'In Progress'                  \n" +
                "			  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'                  \n" +
                "			  WHEN ra.status = 3 THEN 'Won'                  \n" +
                "			  WHEN ra.status = 4 THEN 'Lost'                  \n" +
                "              WHEN ra.status = 5 THEN 'Canceled' END) `status` ,                  \n" +
                "			ra.status rfq_statusID,                  \n" +
                "            ra.winPrice,                  \n" +
                "            ra.winQuantity,                  \n" +
                "            fun_getTextAngularData(ra.reason,vTextAngularKeyCode) reason                            \n" +
                "            FROM rfq_assemblies ra                  \n" +
                "            JOIN rfq_assemblies_quotation_submitted rqs ON rqs.rfqAssyID = ra.id                  \n" +
                "			JOIN rfqforms rf ON rf.id = ra.rfqrefID AND rf.isDeleted = 0                  \n" +
                "            JOIN rfqtype rt ON rt.id = ra.rfqTypeID AND rt.isDeleted = 0                  \n" +
                "            JOIN jobtype jt ON jt.id = ra.jobTypeID AND jt.isDeleted = 0                  \n" +
                "            JOIN rfq_assy_typemst rat ON rat.id = ra.assemblyTypeID AND rat.isDeleted = 0                  \n" +
                "			JOIN mfgcodemst cu ON cu.id = rf.customerid AND cu.isDeleted = 0                  \n" +
                "			JOIN component part ON part.id = ra.partID AND part.isDeleted = 0                  \n" +
                "            LEFT JOIN rfq_rohsmst ro ON ro.id = part.RoHSStatusID                  \n" +
                "            LEFT JOIN users su ON su.id = ra.quoteSubmittedBy                  \n" +
                "			WHERE ra.id= prfqAssyID AND rqs.id = pAssyQuoteSubmittedID;                  \n" +
                "  \n" +
                "  \n" +
                "        # select list of submitted quote summary                                                              \n" +
                "			SELECT bomInternalVersion,BOMIssues, bomLastVersion, createByRoleId, createdAt, createdBy, custBillingAddressID,              \n" +
                "			custShippingAddressID, custTermsID, deleteByRoleId, deletedAt, deletedBy, id, isDeleted, fun_getTextAngularData(OtherNotes, vTextAngularKeyCode) OtherNotes,              \n" +
                "			fun_getTextAngularData(promotions, vTextAngularKeyCode) promotions, quoteDueDate, quoteInDate, quoteNumber, quoteSubmitDate,              \n" +
                "			rfqAssyID, RFQMISCData, updateByRoleId, updatedAt, updatedBy               \n" +
                "            FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND id = pAssyQuoteSubmittedID ;                                                              \n" +
                "  \n" +
                "   # select list select terms and conditions of submitted quote summary                                                                \n" +
                "			SELECT qst.*, ec.name ecoTypeName, CONCAT('<ul><li>', GROUP_CONCAT(CONCAT(ecv.name, (CASE WHEN qst.note IS NOT NULL THEN CONCAT(' <b>Note:</b>', qst.note) ELSE '' END)) SEPARATOR '</li><li>'),'</li></ul>') ecoTypeValues                                                 \n" +
                "            FROM rfq_assy_quote_submitted_termsconditions qst                                                \n" +
                "            JOIN eco_type_category ec ON qst.termsconditionCatID = ec.ecoTypeCatID                                                \n" +
                "            JOIN eco_type_values ecv ON qst.termsconditionTypeValueID = ecv.ecoTypeValID                                                \n" +
                "            WHERE qst.isDeleted = 0                                                                \n" +
                "            AND RefSubmittedQuoteID = pAssyQuoteSubmittedID                                                \n" +
                "            GROUP BY ecv.ecoTypeCatID;                                                \n" +
                "  \n" +
                "  \n" +
                "		#select list of standard certification detail of submitted quote                                                              \n" +
                "			SELECT csd.id, csd.refSubmittedQuoteID, csd.standardID, csd.standardClassIDs, cs.fullName standard,sc.className stdclass                                                   \n" +
                "            FROM rfq_assy_standard_class_detail csd                                                              \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0                                                              \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0                                                              \n" +
                "			WHERE csd.refSubmittedQuoteID = pAssyQuoteSubmittedID;                                                              \n" +
                "  \n" +
                "		# select letest submited quote summary detail                                                          \n" +
                "			SELECT bomInternalVersion, BOMIssues, bomLastVersion, createByRoleId, createdAt, createdBy, custBillingAddressID, custShippingAddressID,  \n" +
                "            custTermsID, deleteByRoleId, deletedAt, deletedBy, id, isDeleted, fun_getTextAngularData(OtherNotes, vTextAngularKeyCode) OtherNotes,  \n" +
                "            fun_getTextAngularData(promotions, vTextAngularKeyCode) promotions, quoteDueDate, quoteInDate, quoteNumber, quoteSubmitDate, rfqAssyID,  \n" +
                "            RFQMISCData, updateByRoleId, updatedAt, updatedBy                \n" +
                "            FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1;                                                  \n" +
                "  \n" +
                "		#select list of Custom Part detail of assembly.       \n" +
                "  \n" +
                "			  SELECT *, (amount*requestedQty) AS extendedCost FROM (  \n" +
                "				SELECT prfqAssyID `rfqAssyID`,  com.mfgPn CustomPart,com.PIDCode,raqc.mfgPNID,  \n" +
                "				qoa.id additi, qo.requestedQty, fun_getRoHSNameByID(com.RoHSStatusID) rohsName, fun_getRoHSIconByID(com.RoHSStatusID) rohsIcon,   \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,  \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days,  \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime  \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime  \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa  \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0  \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'Material'  \n" +
                "				left Join rfq_assy_quotations_customparts raqc on raqc.rfqAssyQuoteID = qoa.rfqAssyQuoteID and raqc.id = qoa.refCustomPartQuoteID AND qo.isDeleted = 0   \n" +
                "				left join component com on com.id = raqc.mfgPNID  \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID and qoa.refCustomPartQuoteID is not null     \n" +
                "				#HAVING amount>0  \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime,qdf.displayOrder  \n" +
                "			) a  \n" +
                "			GROUP BY requestedQty, turnTime,fieldName,amount,days;  \n" +
                "  \n" +
                "		#select list of NRE detail of assembly.                                              \n" +
                "  \n" +
                "            SELECT *, (amount*toolingQty) AS extendedCost FROM (                                    \n" +
                "				SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,                                              \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,                                             \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days,                                              \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))                                                              \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime                                                        \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime , qoa.toolingQty                                    \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa                                               \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0                                              \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'NRE'                                    \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID                                        \n" +
                "				HAVING amount>0                                    \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime                                    \n" +
                "            ) a                                    \n" +
                "            GROUP BY fieldName,amount;                                    \n" +
                "  \n" +
                "  \n" +
                "		#select list of NRE detail of assembly.                                              \n" +
                "  \n" +
                "            SELECT *, (amount*toolingQty) AS extendedCost FROM (                                    \n" +
                "				SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,                                              \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,                                             \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days,                                              \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))                                                              \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime                                                        \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime , qoa.toolingQty                                                 \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa                                               \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0                                              \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'TooLing'                                    \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID                                        \n" +
                "				HAVING amount>0                                    \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime                                    \n" +
                "            ) a                                    \n" +
                "            GROUP BY fieldName,amount,toolingQty;                                    \n" +
                "  \n" +
                "		# Company detail                                    \n" +
                "			SELECT CONCAT(street1,', ',city,', ',state,' ',postcode)AS address,cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo                                \n" +
                "			FROM customer_addresses cua                                    \n" +
                "			JOIN mfgcodemst cu ON cu.id = cua.customerId                                    \n" +
                "			WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1  AND cua.isDeleted = 0;                                    \n" +
                "		# select list of price Group detail          \n" +
                "            SELECT rpg.id priceGroupID, rpg.name priceGroup, rpg.qty, rpg.rfqAssyID,           \n" +
                "			com.mfgPN, com.PIDCode, ro.name rohsName, ro.rohsIcon, ra.partID          \n" +
                "			FROM rfq_assy_submitted_price_group_detail rpg          \n" +
                "			JOIN rfq_assemblies ra ON ra.id = rpg.rfqAssyID          \n" +
                "			JOIN component com ON com.id = ra.partID          \n" +
                "			JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID          \n" +
                "			WHERE rpg.refSubmittedQuoteID = pAssyQuoteSubmittedID          \n" +
                "            ORDER BY rpg.name;          \n" +
                "  \n" +
                "        # select list of price Group           \n" +
                "			SELECT DISTINCT `name` FROM rfq_assy_submitted_price_group_detail          \n" +
                "			WHERE refSubmittedQuoteID = pAssyQuoteSubmittedID          \n" +
                "            ORDER BY NAME;          \n" +
                "  \n" +
                "        # select list select terms and conditions of submitted quote summary                                                              \n" +
                "			SELECT qst.*, ec.name ecoTypeName, ecv.name ecoTypeValues FROM rfq_assy_quote_submitted_termsconditions qst                                              \n" +
                "            JOIN eco_type_category ec ON qst.termsconditionCatID = ec.ecoTypeCatID                                              \n" +
                "            JOIN eco_type_values ecv ON qst.termsconditionTypeValueID = ecv.ecoTypeValID                                              \n" +
                "            WHERE qst.isDeleted = 0                                                              \n" +
                "            AND RefSubmittedQuoteID = pAssyQuoteSubmittedID;                                                  \n" +
                "  \n" +
                "  \n" +
                "		# total requote count                                                   \n" +
                "			SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL AND isDeleted = 0;                                                  \n" +
                "  \n" +
                "		#select list of standard certification detail of assembly for not submitted quote                                                  \n" +
                "			SELECT csd.id, csd.certificateStandardID, csd.ClassID, cs.fullName standard,sc.className stdclass                                                  \n" +
                "            FROM component_standard_details  csd                                                              \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.certificateStandardID AND cs.isDeleted = 0                                                              \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.ClassID AND cs.isDeleted = 0                                                              \n" +
                "			WHERE csd.isDeleted = 0 AND csd.componentID = (SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID);          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyAssyQuoteSummary`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyAssyQuoteSummary`(    \n" +
                "	IN prfqAssyID INT(1),    \n" +
                "    IN pUserID INT(1),  \n" +
                "    IN pRoleID INT(1)  \n" +
                ")  \n" +
                "BEGIN    \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION    \n" +
                "BEGIN    \n" +
                "	ROLLBACK;    \n" +
                "	RESIGNAL;    \n" +
                "END;    \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING    \n" +
                "  BEGIN    \n" +
                "	ROLLBACK;    \n" +
                "	RESIGNAL;    \n" +
                "END;    \n" +
                "    START TRANSACTION;    \n" +
                "# copy  rfq_assy_quotations Detail with null ref submitted id                    \n" +
                "		INSERT INTO `rfq_assy_quotations`    \n" +
                "		(`rfqAssyID`, `rfqAssyQtyID`, `rfqAssyQtyTurnTimeID`, `requestedQty`, `turnTime`, `timeType`, `unitPrice`, `materialCost`, `materialDays`, `total`,    \n" +
                "		`createdBy`, `createdAt`, `updatedBy`, `updatedAt`, `excessQtyTotalPrice`, `days`,`nreCost`,`nreDays`,`toolingCost`,`toolingDays`,`laborCost`,`laborDays`,    \n" +
                "        `laborunitPrice`,`laborday`,`rfqPriceGroupId`,`rfqPriceGroupDetailId`,`createByRoleId`,`updateByRoleId`)    \n" +
                "		select rfqAssyID, rfqAssyQtyID, rfqAssyQtyTurnTimeID, requestedQty, turnTime, timeType, unitPrice, materialCost, materialDays, total,    \n" +
                "		pUserID as `createdBy`, fun_DatetimetoUTCDateTime() as `createdAt`, pUserID as `updatedBy`, fun_DatetimetoUTCDateTime() as `updatedAt`, excessQtyTotalPrice, days,    \n" +
                "        aq.nreCost,aq.nreDays,aq.toolingCost,aq.toolingDays,laborCost,laborDays,laborunitPrice,laborday,rfqPriceGroupId,rfqPriceGroupDetailId,  \n" +
                "        pRoleID as `createByRoleId`, pRoleID as `updateByRoleId`   \n" +
                "        from rfq_assy_quotations aq    \n" +
                "		where aq.rfqAssyID = prfqAssyID and aq.isDeleted = 0     \n" +
                "        and aq.refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1);    \n" +
                "	# copy  rfq_assy_quotations_customparts details for new generated quotaion records    \n" +
                "		INSERT INTO `rfq_assy_quotations_customparts`  \n" +
                "		(`rfqAssyQuoteId`,`mfgPNID`,`unitPrice`,`totalPrice`,`leadTimeDays`,`totalLeadTimeDays`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`createByRoleId`,`updateByRoleId`)  \n" +
                "		select raqn.id `rfqAssyQuoteID`, raqc.mfgPNID, raqc.unitPrice, raqc.totalPrice, raqc.leadTimeDays, raqc.totalLeadTimeDays,   \n" +
                "		pUserID as `createdBy`, fun_DatetimetoUTCDateTime() as `createdAt`, pUserID as `updatedBy`, fun_DatetimetoUTCDateTime() as `updatedAt`, pRoleID as `createByRoleId`, pRoleID as `updateByRoleId`  \n" +
                "		from rfq_assy_quotations_customparts raqc   \n" +
                "		join rfq_assy_quotations raq on raqc.rfqAssyQuoteID = raq.id and raq.rfqAssyID = prfqAssyID and raq.isDeleted = 0     \n" +
                "		and refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID and quoteNumber is not null order by id desc limit 1)    \n" +
                "		left join rfq_assy_quotations raqn on raqn.rfqAssyQtyID = raq.rfqAssyQtyID and raqn.rfqAssyQtyTurnTimeID = raq.rfqAssyQtyTurnTimeID and raqn.refSubmittedQuoteID IS NULL        \n" +
                "		where raqc.isDeleted = 0;   \n" +
                "# Copy rfq_assy_quotations_additionalcost details for new generated quotaion records    \n" +
                "/*        INSERT INTO `rfq_assy_quotations_additionalcost`    \n" +
                "		(`rfqAssyQuoteID`, `quoteChargeDynamicFieldID`, `amount`, `percentage`, `margin`,     \n" +
                "        `createdBy`, `createdAt`, `updatedBy`, `updatedAt`, `days`,`toolingQty`)    \n" +
                "		select raqn.id `rfqAssyQuoteID`, raqa.`quoteChargeDynamicFieldID`, raqa.`amount`, raqa.`percentage`, raqa.`margin`,     \n" +
                "        pUserID `createdBy`, fun_DatetimetoUTCDateTime() as `createdAt`, pUserID `updatedBy`, fun_DatetimetoUTCDateTime() as `updatedAt`, raqa.`days`,raqa.`toolingQty`    \n" +
                "        from rfq_assy_quotations_additionalcost raqa    \n" +
                "		join rfq_assy_quotations raq on raqa.rfqAssyQuoteID = raq.id and raq.rfqAssyID = prfqAssyID and raq.isDeleted = 0     \n" +
                "		and refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID and quoteNumber is not null order by id desc limit 1)    \n" +
                "		left join rfq_assy_quotations raqn on raqn.rfqAssyQtyID = raq.rfqAssyQtyID and raqn.rfqAssyQtyTurnTimeID = raq.rfqAssyQtyTurnTimeID and raqn.refSubmittedQuoteID IS NULL        \n" +
                "        where raqa.isDeleted = 0;     \n" +
                "  */        \n" +
                "        INSERT INTO `rfq_assy_quotations_additionalcost`    \n" +
                "		(`rfqAssyQuoteID`, `quoteChargeDynamicFieldID`, `amount`, `percentage`, `margin`,     \n" +
                "       `createdBy`, `createdAt`, `updatedBy`, `updatedAt`, `days`,`toolingQty`, `refCustomPartQuoteID`, `createByRoleId`, `updateByRoleId`)    \n" +
                "		select raqn.id `rfqAssyQuoteID`, raqa.`quoteChargeDynamicFieldID`, raqa.`amount`, raqa.`percentage`, raqa.`margin`,     \n" +
                "		pUserID `createdBy`, fun_DatetimetoUTCDateTime() as `createdAt`, pUserID `updatedBy`, fun_DatetimetoUTCDateTime() as `updatedAt`, raqa.`days`, raqa.`toolingQty`,   \n" +
                "        (select id from rfq_assy_quotations_customparts where rfqAssyQuoteID = raqn.id and mfgPNID = (select mfgPNID from rfq_assy_quotations_customparts where id = raqa.refCustomPartQuoteID)) as `refCustomPartQuoteID`,   \n" +
                "        pRoleID as `createByRoleId`, pRoleID as `updateByRoleId`  \n" +
                "		from rfq_assy_quotations_additionalcost raqa  \n" +
                "		join rfq_assy_quotations raq on raqa.rfqAssyQuoteID = raq.id and raq.rfqAssyID = prfqAssyID and raq.isDeleted = 0  \n" +
                "			and refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID and quoteNumber is not null order by id desc limit 1)  \n" +
                "		left join rfq_assy_quotations raqn on raqn.rfqAssyQtyID = raq.rfqAssyQtyID and raqn.rfqAssyQtyTurnTimeID = raq.rfqAssyQtyTurnTimeID and raqn.refSubmittedQuoteID IS NULL  \n" +
                "		where raqa.isDeleted = 0;  \n" +
                "  \n" +
                "# update rfq_assembly details       \n" +
                "       update rfq_assemblies ra,    \n" +
                "			(select DATE_ADD(current_timestamp(), INTERVAL TIMESTAMPDIFF(day,quoteInDate,quoteDueDate) DAY) as duedate    \n" +
                "			from rfq_assemblies where id=prfqAssyID) ran    \n" +
                "		set ra.isSummaryComplete = FALSE, ra.quoteSubmittedBy = null, ra.status = 1, ra.quoteFinalStatus = 2, ra.quoteNumber = NULL, ra.quoteSubmitDate = NULL, ra.updatedAt = current_timestamp(),    \n" +
                "		ra.quoteInDate = current_timestamp(), ra.quoteDueDate = ran.duedate,updatedBy = prfqAssyID    \n" +
                "		where ra.id = prfqAssyID;    \n" +
                "  \n" +
                "# insert in rfq_assemblies_quotation_submitted for quote preview    \n" +
                "		INSERT INTO `rfq_assemblies_quotation_submitted`    \n" +
                "		(`rfqAssyID`, `quoteInDate`, `quoteDueDate`, `createdBy`, `createdAt`, `updatedBy`, `updatedAt`,    \n" +
                "		`custBillingAddressID`, `custShippingAddressID`, `custTermsID`, `createByRoleId`, `updateByRoleId`)    \n" +
                "		select ra.id `rfqAssyID`, ra.quoteInDate `quoteInDate`, ra.quoteDueDate `quoteDueDate`, pUserID as `createdBy`, fun_DatetimetoUTCDateTime() as `createdAt`, pUserID as `updatedBy`, fun_DatetimetoUTCDateTime() as `updatedAt`,    \n" +
                "		(select custBillingAddressID from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1) as `custBillingAddressID`,    \n" +
                "		(select custShippingAddressID from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1) as `custShippingAddressID`,    \n" +
                "		(select custTermsID from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1) as `custTermsID`,  \n" +
                "        pRoleID as `createByRoleId`, pRoleID as `updateByRoleId`  \n" +
                "		from rfq_assemblies ra    \n" +
                "		where ra.id = prfqAssyID;    \n" +
                "  \n" +
                "# insert rfq_assy_quote_submitted_termsconditions as selected in erlier history    \n" +
                "		INSERT INTO `rfq_assy_quote_submitted_termsconditions`    \n" +
                "		(`RefSubmittedQuoteID`, `termsconditionCatID`, `termsconditionTypeValueID`, `note`, `createdBy`, `createdAt`, `updatedBy`, `updatedAt`, `createByRoleId`, `updateByRoleId`)    \n" +
                "		select (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID and quoteNumber is null order by id desc limit 1) `RefSubmittedQuoteID`,    \n" +
                "		`termsconditionCatID`, `termsconditionTypeValueID`, `note`, pUserID `createdBy`, fun_DatetimetoUTCDateTime() as `createdAt`,pUserID `updatedBy`,fun_DatetimetoUTCDateTime() as `updatedAt`,    \n" +
                "        pRoleID as `createByRoleId`, pRoleID as `updateByRoleId`  \n" +
                "		from rfq_assy_quote_submitted_termsconditions    \n" +
                "		where isDeleted = 0 and RefSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where quoteNumber is not null and rfqAssyID = prfqAssyID order by id desc limit 1);    \n" +
                "# Insert Issue require customer engineering resolution in to new Quote submitted       \n" +
                "		INSERT INTO `rfq_quote_issue_history`      \n" +
                "        (`refSubmittedQuoteID`,`rfqAssyID`,`issueType`,`PIDCode`,`lineID`,`BOMIssue`,`createdAt`,`updatedAt`,`createdBy`,`updatedBy`, `createByRoleId`, `updateByRoleId`)      \n" +
                "        select (select max(id) from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID and quoteNumber is null) as refSubmittedQuoteID,      \n" +
                "        prfqAssyID as `rfqAssyID`, \"CustomerEngineeringResolution\" as `issueType`,`PIDCode`,`lineID`,`BOMIssue`,      \n" +
                "        fun_DatetimetoUTCDateTime() as `createdAt`,fun_DatetimetoUTCDateTime() as `updatedAt`,pUserID `createdBy`, pUserID `updatedBy`,  \n" +
                "        pRoleID as `createByRoleId`, pRoleID as `updateByRoleId`  \n" +
                "        from rfq_quote_issue_history      \n" +
                "        where isDeleted =0 and issueType = \"CustomerEngineeringResolution\" and rfqAssyID = prfqAssyID and refSubmittedQuoteID = (select max(id) from rfq_assemblies_quotation_submitted where quoteNumber is not null and rfqAssyID = prfqAssyID);        \n" +
                "  \n" +
                "  select * from rfq_assy_quotations where rfqAssyID = prfqAssyID and isDeleted = 0 and refSubmittedQuoteID is null;    \n" +
                "  select * from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID order by id desc limit 1;    \n" +
                " COMMIT;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQassyRequoteHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQassyRequoteHistory`(	                                                  \n" +
                "	IN ppageIndex INT(11),                                                  \n" +
                "	IN precordPerPage INT(11),                                                  \n" +
                "	IN pOrderBy VARCHAR(255),	                                                  \n" +
                "    IN pWhereClause VARCHAR(16383),                      \n" +
                "    IN prfqAssyID INT(11)                      \n" +
                "    )  \n" +
                "BEGIN                                                  \n" +
                "	DECLARE pOffset INT(11);                                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                  \n" +
                "	/* DECLARE SQLStatement varchar(255); */                                                  \n" +
                "  \n" +
                "    set @temp_Sproc_GetRFQassyRequoteHistory = concat(\"select rqs.id, rqs.rfqAssyID, rqs.quoteNumber,rqs.quoteSubmitDate, rqs.BOMIssues,rqs.OtherNotes,rqs.quoteInDate,rqs.quoteDueDate,    \n" +
                "        rqs.bomLastVersion as internalversion, com.custAssyPN,com.PIDCode,com.mfgPN,com.rev,    \n" +
                "        com.nickName,com.mfgPNDescription,com.assyCode,com.RoHSStatusID, ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,    \n" +
                "        CONCAT('(',cu.mfgCode,') ',cu.mfgName) AS Customer, concat(em.`firstName` , ' ' ,em.`lastName`) AS quoteSubmittedBy,    \n" +
                "        #concat(DATEDIFF(fun_DatetimetoUTCDateTime(), rqs.quoteSubmitDate),' Days') AS Age,    \n" +
                "        (case when TIMESTAMPDIFF(year, rqs.quoteSubmitDate, fun_DatetimetoUTCDateTime()) > 0 then    \n" +
                "			concat(TIMESTAMPDIFF(year, rqs.quoteSubmitDate, fun_DatetimetoUTCDateTime()),' Year ago')    \n" +
                "		when TIMESTAMPDIFF(Month, rqs.quoteSubmitDate, fun_DatetimetoUTCDateTime()) > 0 then    \n" +
                "			concat(TIMESTAMPDIFF(Month, rqs.quoteSubmitDate, fun_DatetimetoUTCDateTime()),' Month ago')    \n" +
                "		when TIMESTAMPDIFF(day, rqs.quoteSubmitDate, fun_DatetimetoUTCDateTime()) >= 0 then    \n" +
                "			concat(DATEDIFF(fun_DatetimetoUTCDateTime(), rqs.quoteSubmitDate),' Day ago')    \n" +
                "		end) as Age, com.liveVersion   \n" +
                "        from rfq_assemblies_quotation_submitted rqs    \n" +
                "        join rfq_assemblies ra on ra.id = rqs.rfqAssyID and ra.isDeleted = 0    \n" +
                "        LEFT JOIN users em ON em.id = rqs.createdBy    \n" +
                "        join rfqforms rf on rf.id = ra.rfqrefID and rf.isDeleted = 0    \n" +
                "        join component com on com.id = ra.partID and com.isDeleted = 0    \n" +
                "        left join rfq_rohsmst ro on ro.id = com.RoHSStatusID    \n" +
                "        INNER JOIN mfgcodemst cu ON cu.id = rf.customerId AND IFNULL(cu.isdeleted,0) = 0    \n" +
                "        where rqs.rfqAssyID = \",prfqAssyID,\" and rqs.quoteNumber is not null\");    \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                  \n" +
                "	ELSE                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                                                  \n" +
                "	END IF;	                                                  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                  \n" +
                "  		SET pWhereClause = '1=1' ;                                                  \n" +
                "	END IF;	                                                  \n" +
                "  \n" +
                "  	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                  \n" +
                "	ELSE	                                                  \n" +
                "		SET rowNumWhere = '';                                                  \n" +
                "	END IF;	                                                  \n" +
                "  \n" +
                "  	/* to get total count of rows */         \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetRFQassyRequoteHistory,\" ) c where 1=1 and \", pWhereClause);        \n" +
                "  \n" +
                "		PREPARE query2 FROM @SQLStatement2;        \n" +
                "		EXECUTE query2;        \n" +
                "		DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetRFQassyRequoteHistory,\" ) c        \n" +
                "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "  \n" +
                "		PREPARE query1 FROM @SQLStatement2;        \n" +
                "		EXECUTE query1;        \n" +
                "		DEALLOCATE PREPARE query1;                                \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQCustomRulesLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQCustomRulesLineItems`(                                                          \n" +
                "	IN ppageIndex INT(11),                                                          \n" +
                "	IN precordPerPage INT(11),                                                          \n" +
                "	IN pOrderBy VARCHAR(255),                                                  \n" +
                "	IN pWhereColumnName VARCHAR(255),                                                    \n" +
                "	IN pWhereFilterValue VARCHAR(255),                                                   \n" +
                "	IN pCustomWhere INT(11),                                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                                          \n" +
                "	IN rfqAssyID INT(11),                                                          \n" +
                "	IN puserID INT (11),                \n" +
                "	IN ppackageing TINYINT(1),                \n" +
                "	IN pcustomerID INT(11)                    \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN                                                          \n" +
                "	    DECLARE pOffset INT(11);                                                          \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                          \n" +
                "	    DECLARE defaultOrder INT(11);                                        \n" +
                "	    SET defaultOrder = 0;                                        \n" +
                "	    SET @PERString = NULL;                                                \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                          \n" +
                "  \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                          \n" +
                "	    ELSE                                                    \n" +
                "		SELECT ra.requestQty INTO defaultOrder FROM rfq_assy_quantity ra WHERE ra.rfqAssyID=rfqAssyID ORDER BY ra.requestQty ASC LIMIT 1;                                          \n" +
                "		IF(defaultOrder > 0) THEN                                        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY `\" , defaultOrder, \"` desc\");                                          \n" +
                "		ELSE                                         \n" +
                "			SET pOrderBy = \"`lineID` ASC\";                                        \n" +
                "		END IF;	                                         \n" +
                "	    END IF;                                        \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                                          \n" +
                "			SET pWhereClause = '1=1' ;                                                          \n" +
                "		END IF;	                                                          \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                           \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                          \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                          \n" +
                "		ELSE	                                                          \n" +
                "			SET rowNumWhere = '';                                                          \n" +
                "		END IF;	                                                          \n" +
                "		SELECT                                                \n" +
                "			GROUP_CONCAT(DISTINCT                                                          \n" +
                "				CONCAT(                                                          \n" +
                "					'100*Max((IF(ra.requestQty = ''',                                                          \n" +
                "						ra.requestQty,                                                          \n" +
                "					''', rq.unitPrice * rl.qpa, null)))/Max((IF(ra.requestQty = ''',                                                          \n" +
                "						ra.requestQty,                                                          \n" +
                "					''', fun_getFinalPriceSumByQtyID (ra.id,rl.rfqAssyID), null))) AS ''',                                                          \n" +
                "						ra.requestQty,''''                                                          \n" +
                "					))                                              \n" +
                "					INTO @PERString                                              \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                                          \n" +
                "		   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                                          \n" +
                "		   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                                          \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND ra.rfqPriceGroupId IS NULL;                                                          \n" +
                "  \n" +
                "			SELECT GROUP_CONCAT(DISTINCT     \n" +
                "				CONCAT(     \n" +
                "					'Max((IF(ra.requestQty = ''',     \n" +
                "						ra.requestQty,     \n" +
                "					''', rq.finalPrice, null))) AS ''',     \n" +
                "						pg.name,''''     \n" +
                "					)     \n" +
                "					) INTO @SQLGroupString                                                             \n" +
                "		   FROM rfq_consolidate_mfgpn_lineitem_quantity rq     \n" +
                "		   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID     \n" +
                "		   JOIN  rfq_price_group pg ON pg.id = rq.rfqPriceGroupId      \n" +
                "		   LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity pgq ON pgq.refConsolidateLineitemQtyId = rq.id      \n" +
                "		   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id     \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NOT NULL;   \n" +
                "			IF(ppackageing=1)THEN                \n" +
                "				SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItemsWithPackaging(rfqAssyID,@PERString,pcustomerID,ppackageing, IFNULL(CONCAT(', ',@SQLGroupString),'')));              \n" +
                "			ELSE                \n" +
                "				SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItems(rfqAssyID,@PERString,pcustomerID,ppackageing,IFNULL(CONCAT(', ',@SQLGroupString),'')));  \n" +
                "			END IF;                \n" +
                "  \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                                          \n" +
                "			EXECUTE stmt;	                                             \n" +
                "  \n" +
                "			# IF searched with dynamic column than do filter with temporary table logic                                        \n" +
                "			IF pCustomWhere IS NOT NULL THEN                                               \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                                        \n" +
                "				SET @SQLStatement_Temp = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp2 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                                          \n" +
                "				PREPARE query_Temp FROM @SQLStatement_Temp;                                                          \n" +
                "				EXECUTE query_Temp;                                               \n" +
                "				DEALLOCATE PREPARE query_Temp;                                              \n" +
                "  \n" +
                "				# temporary tables not allow to join with same table so create another table                                        \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                                        \n" +
                "				SET @SQLStatement_Temp1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp3 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                                          \n" +
                "				PREPARE query_Temp1 FROM @SQLStatement_Temp1;                                                          \n" +
                "				EXECUTE query_Temp1;                                                 \n" +
                "				DEALLOCATE PREPARE query_Temp1;                                               \n" +
                "  \n" +
                "				# temporary tables not allow to join with same table so create another table                                        \n" +
                "				# Create new temporary table for save record with row number with higher price descending details                                        \n" +
                "				SET @SQLStatement_Temp2 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp4 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetemp a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");                                                          \n" +
                "				PREPARE query_Temp2 FROM @SQLStatement_Temp2;                                                          \n" +
                "				EXECUTE query_Temp2;                                                 \n" +
                "				DEALLOCATE PREPARE query_Temp2;                                          \n" +
                "  \n" +
                "				# Concate                                         \n" +
                "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(1) FROM ( SELECT d.*, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp3 k WHERE k.row_id<=d.row_id) AS sum_10, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp4 k WHERE k.row_id<=d.row_id-1) AS agg_10 FROM consolidate_temp2 d) a WHERE IFNULL(a.sum_10,0) <= '\", pWhereFilterValue, \"' OR (IFNULL(a.sum_10,0) >= '\", pWhereFilterValue, \"' AND IFNULL(a.agg_10,0) <= '\", pWhereFilterValue, \"')\");                                        \n" +
                "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( SELECT d.*, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp3 k WHERE k.row_id<=d.row_id) AS sum_10, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp4 k WHERE k.row_id<=d.row_id-1) AS agg_10 FROM consolidate_temp2 d) a WHERE IFNULL(a.sum_10,0) <= '\", pWhereFilterValue, \"' OR (IFNULL(a.sum_10,0) >= '\", pWhereFilterValue, \"' AND IFNULL(a.agg_10,0) <= '\", pWhereFilterValue, \"')\", rowNumWhere);                                        \n" +
                "			ELSE                                         \n" +
                "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(1) FROM consolidatetemp where \", pWhereClause );                                                          \n" +
                "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                        \n" +
                "			END IF;                                              \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                                   \n" +
                "			EXECUTE query1;                                                          \n" +
                "			DEALLOCATE PREPARE query1;                                                          \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                         \n" +
                "			EXECUTE query2;                                                          \n" +
                "			DEALLOCATE PREPARE query2;                                                          \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID,0));                                                          \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                          \n" +
                "			EXECUTE query3;                                                          \n" +
                "			DEALLOCATE PREPARE query3;                                                          \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                                       \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                                          \n" +
                "			EXECUTE query4;                                                          \n" +
                "			DEALLOCATE PREPARE query4;                                                      \n" +
                "  \n" +
                "			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));       \n" +
                "			PREPARE query5 FROM @SQLStatement5;           \n" +
                "			EXECUTE query5;           \n" +
                "			DEALLOCATE PREPARE query5;                                                         \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));                  \n" +
                "			PREPARE query6 FROM @SQLStatement6;   \n" +
                "			EXECUTE query6;   \n" +
                "			DEALLOCATE PREPARE query6;                  \n" +
                "  \n" +
                "			SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));                  \n" +
                "			PREPARE query7 FROM @SQLStatement7;           \n" +
                "			EXECUTE query7;           \n" +
                "			DEALLOCATE PREPARE query7;             \n" +
                "  \n" +
                "			SET @SQLStatement8= (SELECT fun_getRestrictedParts(rfqAssyID));                \n" +
                "			PREPARE query8 FROM @SQLStatement8;         \n" +
                "			EXECUTE query8;         \n" +
                "			DEALLOCATE PREPARE query8;                    \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp2;                                               \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp3;	                                              \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp4;                                              \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatetemp;                                                            \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetExcessMaterialLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetExcessMaterialLineItems`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN rfqAssyID INT(11),  \n" +
                "	IN puserID INT (11),                    \n" +
                "	IN ppackageing TINYINT(1),                    \n" +
                "	IN pcustomerID INT(11)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);  \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	    SET @SQLString = NULL;                                                       \n" +
                "	    SET @HavingClause = NULL;                                                       \n" +
                "	    SET SESSION group_concat_max_len = 150000;  \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineID` asc\") ;   \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE	  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(DISTINCT CONCAT( 'Max((IF(ra.requestQty = ''', ra.requestQty,''',  \n" +
                "        (((IFNULL(rq.quoteQty,0))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * (CASE WHEN  \n" +
                "        (SELECT connecterTypeID FROM component WHERE id=rq.componentid)= -2 THEN  \n" +
                "        IFNULL(rl.numOfPosition,1)  \n" +
                "        ELSE 1 END)))* (IFNULL(rq.unitPrice,0))) , null))) AS ''', ra.requestQty,''''))  \n" +
                "        INTO @SQLString  \n" +
                "        FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "        JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "        JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "        WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NOT NULL;  \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(DISTINCT CONCAT('Max((IF(ra.requestQty = ''',ra.requestQty,''',  \n" +
                "        (((IFNULL(rq.quoteQty,0))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * (CASE WHEN  \n" +
                "        (SELECT connecterTypeID FROM component WHERE id=rq.componentid)= -2 THEN  \n" +
                "        IFNULL(rl.numOfPosition,1) ELSE 1 END)))* (IFNULL(rq.unitPrice,0))) , null)))> 0') SEPARATOR ' OR ')  \n" +
                "        INTO @HavingClause  \n" +
                "        FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "        JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "        JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "        WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL;  \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(DISTINCT     \n" +
                "				CONCAT(     \n" +
                "					'Max((IF(ra.requestQty = ''',     \n" +
                "						ra.requestQty,     \n" +
                "					''', rq.finalPrice, null))) AS ''',     \n" +
                "						pg.name,''''     \n" +
                "					)     \n" +
                "					) INTO @SQLGroupString       \n" +
                "		   FROM rfq_consolidate_mfgpn_lineitem_quantity rq     \n" +
                "		   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID     \n" +
                "		   JOIN  rfq_price_group pg ON pg.id = rq.rfqPriceGroupId      \n" +
                "		   LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity pgq ON pgq.refConsolidateLineitemQtyId = rq.id      \n" +
                "		   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id     \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NOT NULL;   \n" +
                "  \n" +
                "        IF (@SQLString IS NOT NULL) THEN  \n" +
                "			IF (ppackageing=1) THEN  \n" +
                "				SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItemsWithPackaging(rfqAssyID,@SQLString,pcustomerID,ppackageing,IFNULL(CONCAT(', ',@SQLGroupString),'')));  \n" +
                "			ELSE  \n" +
                "				SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItems(rfqAssyID,@SQLString,pcustomerID,ppackageing,IFNULL(CONCAT(', ',@SQLGroupString),'')));  \n" +
                "			END IF;  \n" +
                "  \n" +
                "            SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);  \n" +
                "		END IF;                                               \n" +
                "  \n" +
                "        PREPARE stmt FROM @SQLStatement;  \n" +
                "		EXECUTE stmt;	  \n" +
                "  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM consolidatetemp where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;                      \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;                      \n" +
                "		SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID,0));                        \n" +
                "		PREPARE query3 FROM @SQLStatement3;            \n" +
                "		EXECUTE query3;            \n" +
                "		DEALLOCATE PREPARE query3;            \n" +
                "		SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));         \n" +
                "		PREPARE query4 FROM @SQLStatement4;            \n" +
                "		EXECUTE query4;            \n" +
                "		DEALLOCATE PREPARE query4;        \n" +
                "		SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));               \n" +
                "		PREPARE query5 FROM @SQLStatement5;                    \n" +
                "		EXECUTE query5;                    \n" +
                "		DEALLOCATE PREPARE query5;           \n" +
                "		SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));                      \n" +
                "		PREPARE query6 FROM @SQLStatement6;                    \n" +
                "		EXECUTE query6;                    \n" +
                "		DEALLOCATE PREPARE query6;                           \n" +
                "		SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));                      \n" +
                "		PREPARE query7 FROM @SQLStatement7;                    \n" +
                "		EXECUTE query7;                    \n" +
                "		DEALLOCATE PREPARE query7;                    \n" +
                "		SET @SQLStatement8= (SELECT fun_getRestrictedParts(rfqAssyID));                      \n" +
                "		PREPARE query8 FROM @SQLStatement8;                    \n" +
                "		EXECUTE query8;                    \n" +
                "		DEALLOCATE PREPARE query8;                               \n" +
                "		DROP TEMPORARY TABLE consolidatetemp;       \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQManualSelectPrice`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQManualSelectPrice`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN rfqAssyID INT(11),  \n" +
                "	IN puserID INT (11),                \n" +
                "	IN ppackageing TINYINT(1),                \n" +
                "	IN pcustomerID INT(11)                                                        \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);  \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                                      \n" +
                "	    SET @SQLString = NULL;    \n" +
                "	    SET @HavingClause = NULL;                                                \n" +
                "	    SET SESSION group_concat_max_len = 150000;        \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;   \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE	  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "        SELECT GROUP_CONCAT(DISTINCT  \n" +
                "				CONCAT(  \n" +
                "					'Max((IF(ra.requestQty = ''',  \n" +
                "						ra.requestQty,  \n" +
                "					''', rq.finalPrice, null))) AS ''',  \n" +
                "						ra.requestQty,''''                                       \n" +
                "					)  \n" +
                "					)                                                     \n" +
                "				INTO @SQLString                                                      \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "		JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NULL;              \n" +
                "  \n" +
                "        SELECT GROUP_CONCAT(DISTINCT  \n" +
                "				CONCAT(  \n" +
                "					'Max((IF(rq.selectionMode = ''',  \n" +
                "						IFNULL(rq.selectionMode,'Both'),  \n" +
                "					''', rq.selectionMode, ''Both''))) AS ''',  \n" +
                "						IFNULL(rq.selectionMode,'Both'),''''                                       \n" +
                "					)  \n" +
                "					),                                                      \n" +
                "			GROUP_CONCAT(DISTINCT  \n" +
                "				CONCAT(  \n" +
                "					'Max((IF(rq.selectionMode = ''',  \n" +
                "						IFNULL(rq.selectionMode,'Both'),  \n" +
                "					''', rq.selectionMode, ''Both''))) =\"Manual\"'  \n" +
                "					) SEPARATOR ' OR '                                                         \n" +
                "					)                                                      \n" +
                "		INTO @SQLString1,@HavingClause                                                    \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq              \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0;     \n" +
                "  \n" +
                "        SELECT GROUP_CONCAT(DISTINCT                                                                    \n" +
                "				CONCAT(                                                                    \n" +
                "					'Max((IF(ra.requestQty = ''',                                                                    \n" +
                "						ra.requestQty,                                                                    \n" +
                "					''', rq.finalPrice, null))) AS ''',                                                                    \n" +
                "						pg.name,''''                                                                    \n" +
                "					)                                                                    \n" +
                "					) INTO @SQLGroupString                                                             \n" +
                "		   FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                                                    \n" +
                "		   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                                                    \n" +
                "		   JOIN  rfq_price_group pg ON pg.id = rq.rfqPriceGroupId      \n" +
                "		   LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity pgq ON pgq.refConsolidateLineitemQtyId = rq.id      \n" +
                "		   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                                                    \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NOT NULL;   \n" +
                "  \n" +
                "			SET @SQLString=CONCAT(@SQLString,',',@SQLString1 );                                                        \n" +
                "			IF(ppackageing=1)THEN                \n" +
                "				SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItemsWithPackaging(rfqAssyID,@SQLString,pcustomerID,ppackageing,IFNULL(CONCAT(', ',@SQLGroupString),'')));  \n" +
                "			ELSE                \n" +
                "				 SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItems(rfqAssyID,@SQLString,pcustomerID,ppackageing,IFNULL(CONCAT(', ',@SQLGroupString),'')));  \n" +
                "			 END IF;                                 \n" +
                "  \n" +
                "			SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);       \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;  \n" +
                "			EXECUTE stmt;	  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM consolidatetemp where \", pWhereClause );  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "			EXECUTE query2;  \n" +
                "			DEALLOCATE PREPARE query2;                   \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID,0));                    \n" +
                "			PREPARE query3 FROM @SQLStatement3;          \n" +
                "			EXECUTE query3;          \n" +
                "			DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));        \n" +
                "			PREPARE query4 FROM @SQLStatement4;          \n" +
                "			EXECUTE query4;          \n" +
                "			DEALLOCATE PREPARE query4;      \n" +
                "  \n" +
                "			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));             \n" +
                "			PREPARE query5 FROM @SQLStatement5;                  \n" +
                "			EXECUTE query5;                  \n" +
                "			DEALLOCATE PREPARE query5;         \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));                  \n" +
                "			PREPARE query6 FROM @SQLStatement6;                  \n" +
                "			EXECUTE query6;                  \n" +
                "			DEALLOCATE PREPARE query6;                       \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));                  \n" +
                "			PREPARE query7 FROM @SQLStatement7;                  \n" +
                "			EXECUTE query7;                  \n" +
                "			DEALLOCATE PREPARE query7;             \n" +
                "  \n" +
                "			SET @SQLStatement8= (SELECT fun_getRestrictedParts(rfqAssyID));                \n" +
                "			PREPARE query8 FROM @SQLStatement8;                \n" +
                "			EXECUTE query8;                \n" +
                "			DEALLOCATE PREPARE query8;                               \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;       \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQUnQuotedLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQUnQuotedLineItems`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN rfqAssyID INT(11),  \n" +
                "	IN puserID INT (11),            \n" +
                "	IN ppackageing TINYINT(1),            \n" +
                "	IN pcustomerID INT(11)    \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);  \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	    SET @SQLString = NULL;    \n" +
                "	    SET @HavingClause = NULL;  \n" +
                "	    SET SESSION group_concat_max_len = 150000;        \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;   \n" +
                "		END IF;	  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE	  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;	  \n" +
                "		SELECT GROUP_CONCAT(DISTINCT  \n" +
                "				CONCAT(  \n" +
                "					'Max((IF(ra.requestQty = ''',  \n" +
                "						ra.requestQty,  \n" +
                "					''', rq.finalPrice, null))) AS ''',  \n" +
                "						ra.requestQty,''''  \n" +
                "					))  \n" +
                "				INTO @SQLString  \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "		JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NULL;  \n" +
                "  \n" +
                "        SELECT GROUP_CONCAT(DISTINCT  \n" +
                "				CONCAT(  \n" +
                "					'Max((IF(ra.requestQty = ''',  \n" +
                "						ra.requestQty,  \n" +
                "					''', rq.finalPrice, null))) IS NULL'  \n" +
                "					) SEPARATOR ' OR '     \n" +
                "					)  \n" +
                "				INTO @HavingClause  \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "		JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL;          \n" +
                "  \n" +
                "         SELECT GROUP_CONCAT(DISTINCT  \n" +
                "				CONCAT(  \n" +
                "					'Max((IF(ra.requestQty = ''',  \n" +
                "						ra.requestQty,  \n" +
                "					''', rq.finalPrice, null))) AS ''',  \n" +
                "						pg.name,''''  \n" +
                "					)) INTO @SQLGroupString  \n" +
                "		   FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "		   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "		   JOIN  rfq_price_group pg ON pg.id = rq.rfqPriceGroupId      \n" +
                "		   LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity pgq ON pgq.refConsolidateLineitemQtyId = rq.id      \n" +
                "		   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NOT NULL;   \n" +
                "  \n" +
                "			IF(ppackageing=1)THEN            \n" +
                "				SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItemsWithPackaging(rfqAssyID,@SQLString,pcustomerID,ppackageing,IFNULL(CONCAT(', ',@SQLGroupString),'')));            \n" +
                "			ELSE            \n" +
                "				 SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItems(rfqAssyID,@SQLString,pcustomerID,ppackageing,IFNULL(CONCAT(', ',@SQLGroupString),'')));  \n" +
                "			 END IF;            \n" +
                "  \n" +
                "  \n" +
                "					-- SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause, ' OR partstatus IN                                           \n" +
                "					-- 	(SELECT gencCategoryName FROM genericcategory                                           \n" +
                "					-- WHERE deletedAt IS NULL AND gencCategoryName IN (\"Last Time Buy\",\"Obsolete\"))');      \n" +
                "  \n" +
                "			SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);       \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;  \n" +
                "			EXECUTE stmt;	  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM consolidatetemp where \", pWhereClause );  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "			EXECUTE query2;  \n" +
                "			DEALLOCATE PREPARE query2;               \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID,0));                \n" +
                "			PREPARE query3 FROM @SQLStatement3;          \n" +
                "			EXECUTE query3;          \n" +
                "			DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));        \n" +
                "			PREPARE query4 FROM @SQLStatement4;          \n" +
                "			EXECUTE query4;          \n" +
                "			DEALLOCATE PREPARE query4;      \n" +
                "  \n" +
                "			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));             \n" +
                "			PREPARE query5 FROM @SQLStatement5;                  \n" +
                "			EXECUTE query5;                  \n" +
                "			DEALLOCATE PREPARE query5;         \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));              \n" +
                "			PREPARE query6 FROM @SQLStatement6;                  \n" +
                "			EXECUTE query6;                  \n" +
                "			DEALLOCATE PREPARE query6;                   \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));              \n" +
                "			PREPARE query7 FROM @SQLStatement7;                  \n" +
                "			EXECUTE query7;                  \n" +
                "			DEALLOCATE PREPARE query7;             \n" +
                "  \n" +
                "			SET @SQLStatement8= (SELECT fun_getRestrictedParts(rfqAssyID));              \n" +
                "			PREPARE query8 FROM @SQLStatement8;                  \n" +
                "			EXECUTE query8;                  \n" +
                "			DEALLOCATE PREPARE query8;                           \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;       \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2639,'2.00','V1','Quote page Custom part related changes related change - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2639:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "drop procedure if exists `Sproc_GetFoldersForDownloadById`;  \n" +
                "CREATE PROCEDURE `Sproc_GetFoldersForDownloadById`(  \n" +
                "	IN pEntity TEXT,  \n" +
                "    IN pRefTransId INT(11),  \n" +
                "	IN pSelectedFileFolderIds TEXT  \n" +
                ")  \n" +
                "BEGIN           \n" +
                "		  SET @sqlquery = CONCAT('    \n" +
                "			WITH recursive cte AS (  \n" +
                "				  SELECT gencFolderID, gencFolderName, refParentId, roleId,  \n" +
                "						 1 levelID, gencFolderName folderPath  \n" +
                "				    FROM generic_folder  \n" +
                "				   WHERE gencFolderID IN (',pSelectedFileFolderIds,')  \n" +
                "				     AND deletedAt IS NULL  \n" +
                "					 AND gencFileOwnerType = \"',pEntity,'\"  \n" +
                "                     AND refTransID =  ',pRefTransId,'  \n" +
                "			  UNION  \n" +
                "				SELECT gf.gencFolderID, gf.gencFolderName, gf.refParentId, gf.roleId,  \n" +
                "					   levelID + 1 levelID , concat(cte.folderPath,''/'',gf.gencFolderName) as folderPath  \n" +
                "				  FROM generic_folder gf  \n" +
                "				  INNER JOIN cte ON gf.refParentId = cte.gencFolderID  \n" +
                "				  WHERE gf.deletedAt IS NULL  \n" +
                "				    AND gf.gencFileOwnerType = \"',pEntity,'\"  \n" +
                "                    AND gf.refTransID =  ',pRefTransId,'  \n" +
                "			  )    \n" +
                "			  SELECT * FROM cte  \n" +
                "		 ');	    \n" +
                "		PREPARE st_query FROM @sqlquery;  \n" +
                "		EXECUTE st_query;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2640,'2.00','V1','Create Sproc_GetFoldersForDownloadById SP - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2640:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "alter table workorder   \n" +
                "		add column woSubStatus INT(10)  Not Null Default 0;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2641,'2.00','V1','ADD SUB STATUS TO WORK ORDER- Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2641:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "update workorder   \n" +
                "set woStatus = 0 , woSubStatus = 0  \n" +
                "Where woStatus = 0   \n" +
                "AND ifnull(isDeleted ,0) = 0 ;  \n" +
                "  \n" +
                "update workorder   \n" +
                "set woStatus = 1 , woSubStatus = 1  \n" +
                "Where woStatus = 1  \n" +
                "AND ifnull(isDeleted ,0) = 0 ;  \n" +
                "  \n" +
                "update workorder   \n" +
                "set woStatus = 2 , woSubStatus = 2  \n" +
                "Where woStatus = 2  \n" +
                "AND ifnull(isDeleted ,0) = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "update workorder   \n" +
                "set woStatus = 4 , woSubStatus = 4  \n" +
                "Where woStatus = 4  \n" +
                "AND ifnull(isDeleted ,0) = 0 ;  \n" +
                "  \n" +
                "update workorder   \n" +
                "set woStatus = 0 , woSubStatus = 5  \n" +
                "Where woStatus = 5  \n" +
                "AND ifnull(isDeleted ,0) = 0 ;  \n" +
                "  \n" +
                "update workorder   \n" +
                "set woStatus = 6 , woSubStatus = 6  \n" +
                "Where woStatus = 6  \n" +
                "AND ifnull(isDeleted ,0) = 0 ;  \n" +
                "  \n" +
                "update workorder   \n" +
                "set woStatus = 7 , woSubStatus = 7  \n" +
                "Where woStatus = 7  \n" +
                "AND ifnull(isDeleted ,0) = 0 ;  \n" +
                "  \n" +
                "update workorder   \n" +
                "set woStatus = 0, woSubStatus = 8  \n" +
                "Where woStatus = 8  \n" +
                "AND ifnull(isDeleted ,0) = 0 ;  \n" +
                "  \n" +
                "update workorder   \n" +
                "set woStatus = 1, woSubStatus = 9  \n" +
                "Where woStatus = 9  \n" +
                "AND ifnull(isDeleted ,0) = 0 ;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2642,'2.00','V1','Update workorder status & sub status - Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2642:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getWorkorderSubStatusIDByWoID` ;  \n" +
                "CREATE FUNCTION `fun_getWorkorderSubStatusIDByWoID`(            \n" +
                "	pWOID INT(11)          \n" +
                ") RETURNS int(11)  \n" +
                "BEGIN            \n" +
                "	DECLARE vWOSubStatus INT(11);           \n" +
                "	SELECT woSubStatus INTO vWOSubStatus FROM workorder w WHERE w.woID = pWOID;           \n" +
                "	RETURN vWOStatus;       \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2643,'2.00','V1','fun_getWorkorderSubStatusIDByWoID- Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2643:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "DROP FUNCTION IF EXISTS`fun_getWoSubStatusNameByID` ;  \n" +
                "CREATE FUNCTION `fun_getWoSubStatusNameByID`(    \n" +
                "	pwosubstatus INT(11)) RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN    \n" +
                "	DECLARE result NVARCHAR(50);    \n" +
                "  \n" +
                "	SELECT (CASE WHEN (pwosubstatus = 0) THEN 'Draft'     \n" +
                "      WHEN (pwosubstatus = 1) THEN 'Published'     \n" +
                "      WHEN (pwosubstatus = 2) THEN 'Completed'     \n" +
                "      WHEN (pwosubstatus = 4) THEN 'Void'     \n" +
                "      WHEN (pwosubstatus = 5) THEN 'Draft Under Review'     \n" +
                "      WHEN (pwosubstatus = 6) THEN 'Under Termination'     \n" +
                "      WHEN (pwosubstatus = 7) THEN 'Terminated'     \n" +
                "      WHEN (pwosubstatus = 8) THEN 'Published Draft & Review'   \n" +
                "      WHEN (pwosubstatus = 9) THEN 'Completed With Missing Parts' ELSE '' END) INTO @result;    \n" +
                "      	SET result = @result;    \n" +
                "	RETURN result;    \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2644,'2.00','V1','fun_getWoSubStatusNameByID- Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2644:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getWoStatusNameByID` ;  \n" +
                "CREATE  FUNCTION `fun_getWoStatusNameByID`(    \n" +
                "	pwostatus INT(11)) RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN    \n" +
                "	DECLARE result NVARCHAR(50);    \n" +
                "  \n" +
                "	SELECT (CASE WHEN (pwostatus = 0) THEN 'Draft'     \n" +
                "      WHEN (pwostatus = 1) THEN 'Published'     \n" +
                "      WHEN (pwostatus = 2) THEN 'Completed'     \n" +
                "      WHEN (pwostatus = 4) THEN 'Void'         \n" +
                "      WHEN (pwostatus = 6) THEN 'Under Termination'     \n" +
                "      WHEN (pwostatus = 7) THEN 'Terminated'     \n" +
                "	 ELSE '' END) INTO @result;    \n" +
                "      	SET result = @result;    \n" +
                "	RETURN result;    \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2645,'2.00','V1','fun_getWoStatusNameByID- Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2645:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "DROP FUNCTION  IF EXISTS `fun_getStatusNameByColumnAndID` ;  \n" +
                "                  CREATE  FUNCTION `fun_getStatusNameByColumnAndID`(      \n" +
                "                      pcolname VARCHAR(50),      \n" +
                "                      pval VARCHAR(100)) RETURNS longtext CHARSET utf8mb4  \n" +
                "                  BEGIN      \n" +
                "                      DECLARE result NVARCHAR(50);      \n" +
                "                      IF (pcolname = \"WOSTATUS\") THEN      \n" +
                "                          SELECT (CASE WHEN (pval = '0') THEN 'Draft'       \n" +
                "                                WHEN (pval = '1') THEN 'Published'       \n" +
                "                                WHEN (pval = '2') THEN 'Completed'       \n" +
                "                                WHEN (pval = '4') THEN 'Void'       \n" +
                "                                WHEN (pval = '5') THEN 'Draft Under Review'       \n" +
                "                                WHEN (pval = '6') THEN 'Under Termination'       \n" +
                "                                WHEN (pval = '7') THEN 'Terminated'       \n" +
                "                                WHEN (pval = '8') THEN 'Published Draft & Review'   \n" +
                "                                WHEN (pval = '9') THEN 'Completed With Missing Parts'  \n" +
                "                                ELSE pval END) INTO @result;      \n" +
                "                          SET result = @result;      \n" +
                "                          RETURN result;      \n" +
                "                       ELSE       \n" +
                "                          RETURN pval;      \n" +
                "                      END IF;      \n" +
                "                  END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2646,'2.00','V1','fun_getStatusNameByColumnAndID- Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2646:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_AddWorkorder`  ;  \n" +
                "CREATE PROCEDURE `Sproc_AddWorkorder`(                                                  \n" +
                "	IN pcustomerID INT(11),                                                  \n" +
                "	IN ppartID INT(11),                                                  \n" +
                "	IN pRoHSStatusID INT(11),                                                   \n" +
                "	IN pwoNumber VARCHAR(1000),                                                  \n" +
                "	IN pbuildQty INT(11),                                                  \n" +
                "	IN pexcessQty INT(11),                                             \n" +
                "	IN pisRevision INT(1),                                                  \n" +
                "	IN pwoType VARCHAR(100),                                                  \n" +
                "	IN pisCopyOPFrom VARCHAR(100),                                                  \n" +
                "	IN prefrenceWOID INT(11),                        \n" +
                "	IN pmasterTemplateID INT(11),                        \n" +
                "	IN puserID VARCHAR(500),                    \n" +
                "	IN pisRevisedWO INT(11),                    \n" +
                "	IN pterminateWOID INT(11) ,                    \n" +
                "	IN pterminateWOOPID INT(11),                    \n" +
                "	IN pisHotJob INT(11),                    \n" +
                "	IN pinitialInternalVersion VARCHAR(50)  ,                    \n" +
                "	IN pParentWOID INT(11)                      \n" +
                ")  \n" +
                "BEGIN                                                  \n" +
                "DECLARE insertedWOID INT(11);                                              \n" +
                "DECLARE strOPID VARCHAR(10000);                                              \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                                                  \n" +
                "BEGIN                                                  \n" +
                "	ROLLBACK;                                                  \n" +
                "	RESIGNAL;                                                  \n" +
                "END;                                                  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                                                  \n" +
                "  BEGIN                                                  \n" +
                "	ROLLBACK;                                                  \n" +
                "	RESIGNAL;                                                  \n" +
                "END;                          \n" +
                "	IF (EXISTS (SELECT 1 FROM workorder wo WHERE wo.deletedAt IS NULL AND wo.woNumber = pwoNumber))                                \n" +
                "		THEN SELECT 'Work Order already exsist' errorCode;                                \n" +
                "	ELSE                          \n" +
                "		START TRANSACTION;                          \n" +
                "			-- select w.woNumber into refwoNumber from workorder w where w.woID = prefrenceWOID and w.deletedAt IS NULL;                        \n" +
                "			IF(prefrenceWOID IS NOT NULL AND (pisCopyOPFrom=\"W\" OR pisCopyOPFrom=\"PW\")) THEN                        \n" +
                "				IF (pisRevisedWO = 1) THEN                    \n" +
                "					# Update from work order status to 'Under Termination'                        \n" +
                "					UPDATE Workorder                     \n" +
                "					SET woStatus = 6,     \n" +
                "                    woSubStatus = 6,                 \n" +
                "					updatedAt =  fun_DatetimetoUTCDateTime(),                     \n" +
                "					updatedBy = puserID                     \n" +
                "					WHERE woID = pterminateWOID                     \n" +
                "					AND IFNULL(isDeleted, 0) = 0;                        \n" +
                "				END IF;                    \n" +
                "				CALL Sproc_CopyWorkorder(prefrenceWOID, pwoNumber, ppartID, pexcessQty, pbuildQty, puserID, NULL, NULL, pisRevision, pwoType, NULL, pcustomerID, pisRevisedWO, pterminateWOID, pterminateWOOPID, pisHotJob, pinitialInternalVersion,pisCopyOPFrom, pParentWOID);                        \n" +
                "			ELSE                         \n" +
                "				SET insertedWOID = NULL;                        \n" +
                "				SET strOPID = NULL;                       \n" +
                "  \n" +
                "				IF (pisRevisedWO = 1) THEN                    \n" +
                "					# Update from work order status to 'Under Termination'                        \n" +
                "					UPDATE Workorder                     \n" +
                "					SET woStatus = 6,   \n" +
                "                    woSubStatus = 6,  \n" +
                "					updatedAt =  fun_DatetimetoUTCDateTime(),                     \n" +
                "					updatedBy = puserID                     \n" +
                "					WHERE woID = pterminateWOID                     \n" +
                "					AND IFNULL(isDeleted, 0) = 0;                        \n" +
                "				END IF;                    \n" +
                "  \n" +
                "				# add workorder                                                   \n" +
                "  \n" +
                "				INSERT INTO workorder (                        \n" +
                "				`woNumber`,			`partID`,		`customerID`,		`buildQty`,                        \n" +
                "				`startTime`,			`endTime`,		`masterTemplateID`,                        \n" +
                "				`refrenceWOID`,			`createdAt`,		`createdBy`,		`woStatus`, `woSubStatus`,                        \n" +
                "				`excessQty`,			`isClusterApplied`,	`RoHSStatusID`,		`woVersion`,                         \n" +
                "				`isDeleted`,			`ECORemark`,		`FCORemark`    \n" +
                "				,`isOperationTrackBySerialNo`,	`isNoClean`,		`isWatersoluble`,	`isRevisedWO`,                        \n" +
                "				`woType`,			`updatedAt`,		`updatedBy`,		`terminateWOID`,                  \n" +
                "				`terminateWOOPID`,		`isHotJob`,		`initialInternalVersion`)                         \n" +
                "  \n" +
                "				VALUES                         \n" +
                "				(                        \n" +
                "				pwoNumber,			ppartID,		pcustomerID,		pbuildQty,                        \n" +
                "				NULL,				NULL,			pmasterTemplateID,	                        \n" +
                "				prefrenceWOID,			fun_DatetimetoUTCDateTime(),		puserID,		0,  0,                      \n" +
                "				pexcessQty,			0,			pRoHSStatusID,		'A',                        \n" +
                "				0,				NULL,			NULL,			             \n" +
                "				0,				0,			0,			IFNULL(pisRevisedWO,0),                        \n" +
                "				pwoType,			fun_DatetimetoUTCDateTime(),		puserID,		pterminateWOID,                  \n" +
                "				pterminateWOOPID,		pisHotJob,		pinitialInternalVersion							                        \n" +
                "				);                                    \n" +
                "				-- get inseterted record from selected autocomplete                        \n" +
                "				-- SELECT LAST_INSERT_ID() into insertedWOID;                           \n" +
                "				SET insertedWOID = LAST_INSERT_ID();                                      \n" +
                "				SELECT w.woID AS woID FROM workorder w WHERE w.woID = insertedWOID;                   \n" +
                "  \n" +
                "				# copy part_assembly_certification                \n" +
                "				INSERT INTO workorder_certification                                                \n" +
                "				(`woID`,`certificateStandardID`,`createdAt`,`createdBy`,`classIDs`, `isDeleted`)                                  \n" +
                "				SELECT insertedWOID `woID`,`certificateStandardID`,fun_DatetimetoUTCDateTime() `createdAt`,puserID `createdBy`,              \n" +
                "						`ClassID` `classIDs`, `isDeleted`                 \n" +
                "				FROM component_standard_details csd WHERE csd.componentID = ppartID AND csd.deletedAt IS NULL;                         \n" +
                "  \n" +
                "				IF(pParentWOID IS NOT NULL) THEN        \n" +
                "					#Insert parent woID details        \n" +
                "					INSERT INTO workorder_main_assembly_mapping_details        \n" +
                "					(refWOID,parentWOID,qty, isDeleted, createdAt,createdBy,updatedBy)         \n" +
                "					SELECT wo.woID, pParentWOID, wo.buildQty, 0, wo.createdAt,wo.createdBy,wo.updatedBy FROM workorder wo WHERE wo.woID=insertedWOID;	        \n" +
                "				END IF;        \n" +
                "  \n" +
                "				# [S] - copy document_folder from selected part/assembly level to work order level            \n" +
                "				INSERT INTO generic_folder                                              \n" +
                "						(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                              \n" +
                "						`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)                                              \n" +
                "				SELECT  a.gencFolderName, insertedWOID refTransID, '-7' , 'workorder' gencFileOwnerType, a.roleId, a.refParentId,                                              \n" +
                "						0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, puserID createdBy, a.gencFolderID copyGencFolderID ,            \n" +
                "						a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType                                             \n" +
                "				FROM generic_folder a             \n" +
                "				WHERE a.refTransID = ppartID             \n" +
                "				AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.deletedAt IS NULL;                                              \n" +
                "  \n" +
                "				UPDATE generic_folder gf1,                                              \n" +
                "				(   SELECT a.gencFolderID, a.copyGencFolderID                                              \n" +
                "					FROM generic_folder a WHERE a.refTransID = insertedWOID         \n" +
                "					AND a.gencFileOwnerType = 'workorder' AND a.deletedAt IS NULL        \n" +
                "				) gf2                                              \n" +
                "				SET gf1.refParentId = gf2.gencFolderID                                              \n" +
                "				WHERE gf1.refParentId = gf2.copyGencFolderID             \n" +
                "				AND gf1.refTransID = insertedWOID         \n" +
                "				AND gf1.gencFileOwnerType = 'workorder' AND gf1.deletedAt IS NULL;             \n" +
                "			# [E] - copy generic_folder from selected part/assembly level to work order level            \n" +
                "  \n" +
                "				-- copy operation from operation master templates by pmasterTemplateID                        \n" +
                "				IF (insertedWOID > 0 AND pisCopyOPFrom = \"M\") THEN                         \n" +
                "					-- copy operation from workorder operation by prefrenceWOID                        \n" +
                "					-- if(pisCopyOPFrom = \"W\") then                        \n" +
                "					-- 	select GROUP_concat(wo.opID) into strOPID from workorder_operation wo where wo.woID=prefrenceWOID and wo.deletedAt IS NULL and IFNULL(wo.isDeleted,0)=0;                        \n" +
                "					-- 	IF (strOPID IS NOT NULL) THEN                        \n" +
                "					-- 		CALL Sproc_AddOperationInWorkOrder(insertedWOID, strOPID, puserID);                        \n" +
                "					-- 	END IF;                        \n" +
                "  \n" +
                "					SELECT GROUP_CONCAT(opmt.operationID) INTO strOPID FROM operation_master_templates opmt WHERE opmt.masterTemplateId=pmasterTemplateID AND opmt.deletedAt IS NULL AND IFNULL(opmt.isDeleted,0)=0;                        \n" +
                "					IF (strOPID IS NOT NULL) THEN                        \n" +
                "						CALL Sproc_AddOperationInWorkOrder(insertedWOID, strOPID, puserID);                        \n" +
                "					END IF;                        \n" +
                "				END IF;                        \n" +
                "			END IF;                        \n" +
                "		COMMIT;                         \n" +
                "	END IF;                         \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2647,'2.00','V1','Sproc_AddWorkorder- Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2647:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetWOHeaderDisplayDetails  ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOHeaderDisplayDetails`(                                                      \n" +
                "	IN pwoID INT(11),                                                      \n" +
                "	IN pwoOPID INT(11),                                        \n" +
                "	IN pwoTransID INT(11),                                      \n" +
                "	IN pWaterSolubleCleanType VARCHAR(5),                                        \n" +
                "	IN pNoCleanCleanType VARCHAR(5),                  \n" +
                "	IN pwoAssyID INT(11) ,         \n" +
                "	IN pemployeeIDOfWOOP INT                                   \n" +
                "    )  \n" +
                "BEGIN                                                                         \n" +
                "	IF(pwoID IS NOT NULL AND  pwoOPID IS NULL ) THEN                                                      \n" +
                "		 SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`, `wo`.`woStatus`, `wo`.`woSubStatus`,  \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`, `wo`.`woVersion`,           \n" +
                "			`wo`.`isOperationTrackBySerialNo`,              \n" +
                "			(SELECT CONCAT(usr.firstName,' ',usr.lastName) FROM users usr WHERE id = `wo`.`createdBy`) AS fullNameOfWOCreatedUser ,                \n" +
                "			fun_getUserNameByID(`wo`.`createdBy`) AS initialNameOfWOCreatedUser  ,                \n" +
                "			(SELECT profileImg FROM employees WHERE id IN (SELECT employeeID FROM users WHERE id = `wo`.`createdBy`))AS profileImgOfWOCreatedUser ,              \n" +
                "			(SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 1 AND a.isDeleted = 0 AND a.woID = wo.woID) AS ecoRequestCount,                      \n" +
                "                        (SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 2 AND a.isDeleted = 0 AND a.woID = wo.woID) AS dfmRequestCount,                                                  \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble`, `wo`.`isClusterApplied`, `wo`.`isIncludeSubAssembly`, `wo`.`partID`, `wo`.`isRevisedWO`,                                                            \n" +
                "			(SELECT COUNT(1) FROM workorder_trans_empinout woTransEmpinout                               \n" +
                "				WHERE woTransEmpinout.deletedAt IS NULL                               \n" +
                "				AND woTransEmpinout.woID=pwoID                               \n" +
                "				AND woTransEmpinout.checkinTime IS NOT NULL AND woTransEmpinout.checkoutTime IS NULL) AS isProductionRunning,                              \n" +
                "			`wocerti`.woAllStandardsWithClass , `wo`.createdAt,                                              \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL                                                         \n" +
                "				AND woID = `wo`.woID AND cleaningType = pNoCleanCleanType) isNoCleanOpNumbers ,                                               \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL                                                         \n" +
                "				AND woID = `wo`.woID AND cleaningType = pWaterSolubleCleanType) isWatersolubleOpNumbers ,                                         \n" +
                "			`ca`.`PIDCode` , `ca`.`mfgPNDescription` ,                                 \n" +
                "			`ca`.`liveVersion` AS liveVersion,                                                   \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`, `ca`.`RoHSStatusID` ,                              \n" +
                "			`ca`.specialNote, ca.totalSolderPoints, `ca`.isCustom ,                                                  \n" +
                "			`ro`.`rohsIcon`,`ro`.`name` AS `rohsName`,         \n" +
                "            `mf`.mfgType,    \n" +
                "            fun_getSamplePicturesUploadCount(`ca`.id) sampleImageCnt,    \n" +
                "			vusalesorderdet.totalPOQty, vusalesorderdet.POQtyValues soPOQty,                                                      \n" +
                "   			 vusalesorderdet.totalMRPQty, vusalesorderdet.MRPQtyValues soMRPQty,                                      \n" +
                "   			 vusalesorderdet.poNumber, vusalesorderdet.salesOrderNumber, vusalesorderdet.lineID,                              \n" +
                "   			 vusalesorderdet.salesOrderMstIDs, vusalesorderdet.SOPOQtyValues,                          \n" +
                "   			  (CASE WHEN `wo`.isHotJob IS NOT NULL                                \n" +
                "					THEN `wo`.isHotJob                                                                                \n" +
                "				ELSE vusalesorderdet.isHotJob  END) AS isHotJob,                       \n" +
                "   			 (CASE WHEN `ca`.totalSolderPoints IS NOT NULL                                \n" +
                "					THEN fun_calculateDPMOForWO(`wo`.woID)                                                                                  \n" +
                "				ELSE NULL END) AS DPMO,                    \n" +
                "			(SELECT GROUP_CONCAT(CONCAT(wodr.woNumber, \"-\", wodr.woVersion, \"######\", wodr.woID)) FROM workorder wodr WHERE wodr.woID                     \n" +
                "				IN (SELECT parentWOID FROM workorder_main_assembly_mapping_details                     \n" +
                "				WHERE refWOID = pwoID)                    \n" +
                "			) AS parentWorkorders                                                      \n" +
                "		FROM workorder AS `wo`                                                       \n" +
                "		LEFT OUTER JOIN                                                 \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName,' ' ,                       \n" +
                "				CASE WHEN a.classIDs IS NULL THEN ''                                              \n" +
                "					ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,'')) FROM standard_class WHERE classID = a.classIDs) END                                       \n" +
                "				ORDER BY b.priority IS NULL,b.priority ASC, b.fullName ASC SEPARATOR '@@@@@@') woAllStandardsWithClass                                                 \n" +
                "			FROM `workorder_certification` a                                                \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID                                                \n" +
                "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID	                                                \n" +
                "			) AS `wocerti`                                                \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`                                                  \n" +
                "		LEFT OUTER JOIN `component` AS `ca`                                                      \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL                                                          \n" +
                "		LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0                                   \n" +
                "		AND `ro`.`deletedAt` IS NULL                                                        \n" +
                "		LEFT OUTER JOIN vu_workorder_salesorder_details  vusalesorderdet ON vusalesorderdet.woID = pwoID                                                        \n" +
                "        LEFT OUTER JOIN mfgCodeMst mf ON ca.mfgcodeID = mf.id       \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID                                                      \n" +
                "		GROUP BY `wo`.`woID` ;                                                      \n" +
                "  \n" +
                "	ELSEIF(pwoID IS NOT NULL AND  pwoOPID IS NOT NULL ) THEN                                                      \n" +
                "		SELECT                                                   \n" +
                "			`wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,`wo`.`woStatus`, `wo`.`woSubStatus`, `wo`.`isRevisedWO`,                 \n" +
                "			`wo`.`isOperationTrackBySerialNo`,          \n" +
                "			(SELECT CONCAT(usr.firstName,' ',usr.lastName) FROM users usr WHERE id = `wo`.`createdBy`) AS fullNameOfWOCreatedUser ,                \n" +
                "			fun_getUserNameByID(`wo`.`createdBy`) AS initialNameOfWOCreatedUser  ,                 \n" +
                "			(SELECT profileImg FROM employees WHERE id IN (SELECT employeeID FROM users WHERE id = `wo`.`createdBy`))AS profileImgOfWOCreatedUser ,                         \n" +
                "			(SELECT COUNT(1) FROM workorder_trans_empinout woTransEmpinout                               \n" +
                "				WHERE woTransEmpinout.deletedAt IS NULL                               \n" +
                "				AND woTransEmpinout.woID=pwoID                               \n" +
                "				AND woTransEmpinout.checkinTime IS NOT NULL AND woTransEmpinout.checkoutTime IS NULL) AS isProductionRunning,                                                                    \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`,`wo`.`woVersion`,                                            \n" +
                "			(SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 1 AND a.isDeleted = 0 AND a.woID = wo.woID) AS ecoRequestCount, 	                      \n" +
                "                        (SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 2 AND a.isDeleted = 0 AND a.woID = wo.woID) AS dfmRequestCount,                                                 \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble`, `wo`.`isClusterApplied`, `wo`.`isIncludeSubAssembly`, `wo`.`partID`,                                                  \n" +
                "			 `wocerti`.woAllStandardsWithClass , `wo`.createdAt,                                                  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL                                                         \n" +
                "				AND woID = `wo`.woID AND cleaningType = pNoCleanCleanType) isNoCleanOpNumbers ,                                               \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL                                                         \n" +
                "				AND woID = `wo`.woID AND cleaningType = pWaterSolubleCleanType) isWatersolubleOpNumbers ,                                                       \n" +
                "			`woop`.opName , `woop`.opNumber, `woop`.opVersion, `woop`.opStatus,  `woop`.`opID`,                                         \n" +
                "			`woop`.isTeamOperation , `woop`.isRework, `woop`.isIssueQty,                                             \n" +
                "			`woop`.qtyControl , `woop`.isStopOperation, `woop`.isPreProgrammingComponent, `woop`.isMoveToStock,                    \n" +
                "			`woop`.isPlacementTracking,             \n" +
                "			`woop`.isLoopOperation,                 \n" +
                "			`woop`.isAllowFinalSerialMapping,                                             \n" +
                "			`woop`.isTrackBySerialNo,                                             \n" +
                "			`woop`.colorCode,`woop`.cleaningType,                                             \n" +
                "			`ca`.`PIDCode`, `ca`.`mfgPNDescription`,                                \n" +
                "			`ca`.`liveVersion` AS liveVersion,                                                  \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`,   `ca`.specialNote ,                                                   \n" +
                "			`ca`.`RoHSStatusID`, `ca`.isCustom ,                                  \n" +
                "			`ro`.`rohsIcon`, ca.totalSolderPoints,`ro`.`name` AS `rohsName`,         \n" +
                "            `mf`.mfgType,    \n" +
                "            fun_getSamplePicturesUploadCount(`ca`.id) sampleImageCnt,    \n" +
                "			vusalesorderdet.totalPOQty, vusalesorderdet.POQtyValues soPOQty,/*wo-so-po-qty*/                                                      \n" +
                "   			 vusalesorderdet.totalMRPQty, vusalesorderdet.MRPQtyValues soMRPQty,                                       \n" +
                "   			 vusalesorderdet.poNumber, vusalesorderdet.salesOrderNumber, vusalesorderdet.lineID,                                      \n" +
                "   			 vusalesorderdet.salesOrderMstIDs, vusalesorderdet.SOPOQtyValues, /*so-po-qty*/                         \n" +
                "   			  (CASE WHEN `wo`.isHotJob IS NOT NULL                                \n" +
                "					THEN `wo`.isHotJob                                                                                \n" +
                "				ELSE vusalesorderdet.isHotJob  END) AS isHotJob,                       \n" +
                "			 (SELECT wc.isParellelOperation FROM workorder_cluster wc                                          \n" +
                "				WHERE wc.clusterID                                           \n" +
                "					IN (SELECT clusterID FROM workorder_operation_cluster woc                                          \n" +
                "						WHERE woc.woopid=`woop`.`woOPID` AND `woc`.`deletedAt` IS NULL)                                          \n" +
                "				 AND wc.deletedAt IS NULL AND wc.woID = `wo`.woID                                          \n" +
                "			) isParellelOperation,                              \n" +
                "			(CASE WHEN `ca`.totalSolderPoints IS NOT NULL                                \n" +
                "					THEN fun_calculateDPMOForWO(`wo`.woID)                                                                                  \n" +
                "				ELSE NULL END) AS DPMO,                    \n" +
                "			(SELECT GROUP_CONCAT(CONCAT(wodr.woNumber, \"-\", wodr.woVersion, \"######\", wodr.woID)) FROM workorder wodr WHERE wodr.woID                     \n" +
                "				IN (SELECT parentWOID FROM workorder_main_assembly_mapping_details                     \n" +
                "				WHERE refWOID = pwoID)                    \n" +
                "			) AS parentWorkorders                                                    \n" +
                "		FROM workorder AS `wo`                                                    \n" +
                "		LEFT OUTER JOIN                                                 \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName ,' ' , CASE WHEN a.classIDs IS NULL THEN ''                                              \n" +
                "							ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,'')) FROM standard_class WHERE classID = a.classIDs) END                                              \n" +
                "							ORDER BY b.priority IS NULL,b.priority ASC, b.fullName ASC SEPARATOR '@@@@@@') woAllStandardsWithClass                                                 \n" +
                "			FROM `workorder_certification` a                                                \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID                                                \n" +
                "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID	                                                \n" +
                "			) AS `wocerti`		                                                \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`                                                 \n" +
                "		LEFT OUTER JOIN `workorder_operation` AS `woop`                                                      \n" +
                "		ON `wo`.`woID` = `woop`.`woID` AND `woop`.`deletedAt` IS NULL AND `woop`.`woOPID` = pwoOPID                                                    \n" +
                "		LEFT OUTER JOIN `component` AS `ca`                                                      \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL                                          \n" +
                "		LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0                                   \n" +
                "		AND `ro`.`deletedAt` IS NULL                                                  \n" +
                "		LEFT OUTER JOIN vu_workorder_salesorder_details  vusalesorderdet ON vusalesorderdet.woID = pwoID      \n" +
                "        LEFT OUTER JOIN mfgCodeMst mf  ON ca.mfgcodeID = mf.id    \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID                                                      \n" +
                "		GROUP BY `wo`.`woID` ;                                                      \n" +
                "	END IF ;                                              \n" +
                "  \n" +
                "	/********************************* 2.current data ****************************************************/	                                            \n" +
                "	CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, NULL);                                            \n" +
                "	/********************************* 2.current data ****************************************************/	                                            \n" +
                "  \n" +
                "	-- IF(IFNULL(pwoTransID,0) > 0) THEN                                        \n" +
                "		/********************************** 3.current data ***************************************************/                                           \n" +
                "		CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, pwoTransID);                                             \n" +
                "		/********************************** 3.current data ***************************************************/                                            \n" +
                "        -- END IF;                         \n" +
                "  \n" +
                "	# last ECO request data                      \n" +
                "        SELECT * FROM eco_request WHERE requestType = 1 AND isDeleted = 0 AND woID = pwoID ORDER BY ecoReqID DESC LIMIT 1;                      \n" +
                "        # last DFM request data                      \n" +
                "        SELECT * FROM eco_request WHERE requestType = 2 AND isDeleted = 0 AND woID = pwoID ORDER BY ecoReqID DESC LIMIT 1;                      \n" +
                "  \n" +
                "        # is export controlled assembly                   \n" +
                "        SELECT (CASE WHEN                   \n" +
                "	(SELECT COUNT(1) FROM certificate_standards                  \n" +
                "	WHERE deletedAt IS NULL                  \n" +
                "	AND isExportControlled = 1                  \n" +
                "	AND certificateStandardID IN (	SELECT certificateStandardID FROM component_standard_details                   \n" +
                "					WHERE deletedAt IS NULL                  \n" +
                "					AND componentID IN (                  \n" +
                "								SELECT DISTINCT mfgPNID AS partMasterID FROM rfq_lineitems_alternatepart                     \n" +
                "								WHERE deletedAt IS NULL                     \n" +
                "								AND partID IN (SELECT prPerPartID FROM part_sub_assy_relationship                     \n" +
                "										WHERE deletedAt IS NULL AND partID = pwoAssyID)                    \n" +
                "								UNION                    \n" +
                "								SELECT DISTINCT partID AS partMasterID FROM workorder_operation_part                    \n" +
                "								WHERE deletedAt IS NULL AND woID = pwoID                  \n" +
                "								UNION                    \n" +
                "								SELECT DISTINCT pwoAssyID AS partMasterID                  \n" +
                "							   )                  \n" +
                "					) > 0) THEN 1                   \n" +
                "		ELSE 0 END) AS isExportControlledAssembly  ;        \n" +
                "  \n" +
                "  \n" +
                "	#  7. get wo op empl wise total time consumption details       \n" +
                "	# include both setup and production activity                                             \n" +
                "	CALL Sproc_GetWOOPEmpWiseTotTimeConsumptionDet(pWOOPID, pemployeeIDOfWOOP);                                            \n" +
                "  \n" +
                "  END ;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2648,'2.00','V1','Sproc_AddWorkorder- Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2648:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyWorkorder`  ;  \n" +
                "CREATE PROCEDURE `Sproc_CopyWorkorder`(                                                        \n" +
                "	IN woID INT(1),                                                        \n" +
                "	IN woNumber VARCHAR(11),                                                        \n" +
                "	IN ppartID INT,                                                         \n" +
                "	IN excessQty INT(1),                                                        \n" +
                "	IN buildQty INT(1),                                                        \n" +
                "	IN userID INT(1),                                                        \n" +
                "	IN ECORemark VARCHAR(100),                                                        \n" +
                "	IN FCORemark VARCHAR(100),                                                        \n" +
                "	IN isRevision INT(1),                                                  \n" +
                "	IN woType INT(11),                                                \n" +
                "	IN ecoReqID INT(11),                              \n" +
                "	IN pcustomerID INT(11),                            \n" +
                "	IN pisRevisedWO INT (11),                            \n" +
                "	IN pterminateWOID INT (11),                            \n" +
                "	IN pterminateWOOPID INT (11),                            \n" +
                "	IN pisHotJob INT (11)  ,                            \n" +
                "	IN pinitialInternalVersion VARCHAR (50),                      \n" +
                "	IN pisCopyOPFrom VARCHAR(100),                      \n" +
                "	IN pParentWOID VARCHAR(100)                         \n" +
                ")  \n" +
                "BEGIN                                                        \n" +
                "DECLARE insertedWOID INT(1);                                    \n" +
                "DECLARE refPartID INT(1);                                                      \n" +
                "DECLARE insertedSubFormTransID INT(11);                                                      \n" +
                "DECLARE lv_subFormTransID_from INT(11);                                                      \n" +
                "DECLARE lv_parentDataElementID_from INT(11);                                                      \n" +
                "DECLARE lv_rowNumber_from INT(11);                                                      \n" +
                "DECLARE exit_loop_wo BOOLEAN DEFAULT FALSE;                                                          \n" +
                "DECLARE exit_loop_woop BOOLEAN DEFAULT FALSE;                        \n" +
                "DECLARE t_lv_woOPID INT(1);                         \n" +
                "DECLARE i INT DEFAULT 0;                          \n" +
                "DECLARE totWoOPIDs INT DEFAULT 0;                        \n" +
                "  \n" +
                "  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                                                        \n" +
                "BEGIN                                                        \n" +
                "	ROLLBACK;                                                        \n" +
                "	RESIGNAL;                                                        \n" +
                "END;                                                        \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                                                        \n" +
                "  BEGIN                                                        \n" +
                "	ROLLBACK;                                                        \n" +
                "	RESIGNAL;                                                        \n" +
                "END;                                                        \n" +
                "IF (EXISTS (SELECT 1 FROM workorder wo WHERE wo.deletedAt IS NULL AND wo.woNumber = woNumber))                                                        \n" +
                "THEN SELECT 'woNumber' errorCode;                                                        \n" +
                "ELSE                                                        \n" +
                "	START TRANSACTION;                                                        \n" +
                "  \n" +
                "    # copy workorder                                                         \n" +
                "  \n" +
                "	INSERT INTO workorder (`woNumber`,`partID`,`customerID`,`buildQty`,`startTime`,`endTime`,`masterTemplateID`,`refrenceWOID`,`createdAt`,`createdBy`                                                        \n" +
                "	,`woStatus`,`woSubStatus`,`excessQty`,`isClusterApplied`,`RoHSStatusID`,`woVersion`, `isDeleted`,`ECORemark`,`FCORemark`                                                        \n" +
                "	,`isOperationTrackBySerialNo`,`isNoClean`,`isWatersoluble`,`isRevisedWO`,`woType`,`ecoReqID`,`locationDetails`, `terminateWOID`                          \n" +
                "	, `terminateWOOPID`, `isHotJob`, `initialInternalVersion`,isRackTrackingRequired,isStrictlyFollowRackValidation)                                                        \n" +
                "	SELECT woNumber `woNumber`, ppartID `partID`,pcustomerID `customerID`, buildQty `buildQty`,`startTime`,`endTime`,`masterTemplateID`,woID,                                                        \n" +
                "	fun_DatetimetoUTCDateTime() `createdAt`, userID `createdBy`,0 `woStatus`,0 `woSubStatus`,excessQty `excessQty`,`isClusterApplied`,`RoHSStatusID`,'A' `woVersion`,                                                        \n" +
                "	`isDeleted`,ECORemark `ECORemark`,FCORemark `FCORemark`,`isOperationTrackBySerialNo`,`isNoClean`,                                                        \n" +
                "	`isWatersoluble`, IFNULL(pisRevisedWO,0) `isRevisedWO` , woType `woType` , ecoReqID `ecoReqID` , `locationDetails`, pterminateWOID `terminateWOID`                          \n" +
                "	, pterminateWOOPID `terminateWOOPID`, pisHotJob `isHotJob`, pinitialInternalVersion `initialInternalVersion`,isRackTrackingRequired,isStrictlyFollowRackValidation                                                 \n" +
                "	FROM workorder wo WHERE wo.woID = woID AND wo.deletedAt IS NULL;                                                        \n" +
                "	SET insertedWOID = LAST_INSERT_ID();                                                        \n" +
                "  \n" +
                "    # copy part_assembly_certification                                                        \n" +
                "  \n" +
                "	INSERT INTO workorder_certification                                                        \n" +
                "	(`woID`,`certificateStandardID`,`createdAt`,`createdBy`,`classIDs`, `isDeleted`)                                          \n" +
                "	SELECT insertedWOID `woID`,`certificateStandardID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,`ClassID` `classIDs`, `isDeleted`                         \n" +
                "	FROM component_standard_details csd WHERE csd.componentID = ppartID AND csd.deletedAt IS NULL;                                                        \n" +
                "  \n" +
                "	IF(pParentWOID IS NOT NULL) THEN                  \n" +
                "		#Insert parent woID details                  \n" +
                "		INSERT INTO workorder_main_assembly_mapping_details                  \n" +
                "		(refWOID,parentWOID,qty, isDeleted, createdAt,createdBy,updatedBy)                   \n" +
                "		SELECT wo.woID, pParentWOID, wo.buildQty, 0, wo.createdAt,wo.createdBy,wo.updatedBy FROM workorder wo WHERE wo.woID=insertedWOID;	                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	SET refPartID = 0;                            \n" +
                "	SELECT a.partID INTO refPartID FROM workorder a WHERE a.woID = woID;                            \n" +
                "  \n" +
                "	# copy workorder_operation                              \n" +
                "	IF (refPartID = ppartID) THEN                                \n" +
                "		INSERT INTO workorder_operation                                                        \n" +
                "		(`woID`,`opID`,`createdAt`,`createdBy`,`opName`,`opNumber`,                                                        \n" +
                "		`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,                                                        \n" +
                "		`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,                                                        \n" +
                "		    `cleaningType`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,opVersion,                          \n" +
                "		    `colorcode`,`tabLimitAtTraveler`,`isMoveToStock`,`mountingTypeID`,            \n" +
                "		    `isTrackBySerialNo`,`isTrackBySerialFromWOOP`,`isAllowFinalSerialMapping`,`isLoopOperation`,`isPlacementTracking` ,      \n" +
                "		     `isAllowMissingPartQty` , `isAllowBypassQty`)                                                        \n" +
                "		SELECT insertedWOID `woID`,`opID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,`opName`,`opNumber`,                                                        \n" +
                "			`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,                                                        \n" +
                "			`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,                                                        \n" +
                "		    `cleaningType`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,                                                        \n" +
                "		    'A' opVersion, `colorCode` , IFNULL(`tabLimitAtTraveler`,1) tabLimitAtTraveler, IFNULL(isMoveToStock,0) isMoveToStock, wo.mountingTypeID,            \n" +
                "		    `isTrackBySerialNo`,`isTrackBySerialFromWOOP`,`isAllowFinalSerialMapping`,`isLoopOperation`,`isPlacementTracking` ,      \n" +
                "		    `isAllowMissingPartQty` , `isAllowBypassQty`                                                  \n" +
                "		 FROM workorder_operation wo WHERE wo.woID = woID AND wo.deletedAt IS NULL;                                       \n" +
                "	ELSE                             \n" +
                "		INSERT INTO workorder_operation                                                        \n" +
                "		(`woID`,`opID`,`createdAt`,`createdBy`,`opName`,`opNumber`,                                                        \n" +
                "		`opDescription`,`opDoes`,`opDonts`,`opOrder`,                            \n" +
                "		`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,                                                        \n" +
                "		`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,                                                        \n" +
                "		`cleaningType`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,opVersion,                          \n" +
                "		`colorcode`,`tabLimitAtTraveler`, `isMoveToStock`,`mountingTypeID`,            \n" +
                "		`isTrackBySerialNo`,`isTrackBySerialFromWOOP`,`isAllowFinalSerialMapping`,`isLoopOperation`,`isPlacementTracking` ,      \n" +
                "		`isAllowMissingPartQty` , `isAllowBypassQty` )                                                        \n" +
                "		SELECT insertedWOID `woID`,`opID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,`opName`,`opNumber`,                                                        \n" +
                "			`opDescription`,(SELECT mo.`opDoes` FROM operations mo WHERE mo.opID= wo.opID) AS `opDoes`,                            \n" +
                "			(SELECT m_op.`opDonts` FROM operations m_op WHERE m_op.opID= wo.opID) AS `opDonts`,`opOrder`,                            \n" +
                "			`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,                                                        \n" +
                "			`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,                                                        \n" +
                "			`cleaningType`,`isIssueQty`,`isRework`,`isTeamOperation`,`isPreProgrammingComponent`,                                                        \n" +
                "			'A' opVersion, `colorCode` , IFNULL(`tabLimitAtTraveler`,1) tabLimitAtTraveler, IFNULL(isMoveToStock,0) isMoveToStock,wo.mountingTypeID,            \n" +
                "			`isTrackBySerialNo`,`isTrackBySerialFromWOOP`,`isAllowFinalSerialMapping`,`isLoopOperation`,`isPlacementTracking` ,      \n" +
                "			`isAllowMissingPartQty` , `isAllowBypassQty`                                                  \n" +
                "		FROM workorder_operation wo WHERE wo.woID = woID AND wo.deletedAt IS NULL;                             \n" +
                "	END IF;                                \n" +
                "  \n" +
                "	#update work order operation details for loop operation case            \n" +
                "	UPDATE workorder_operation AS newLoopOp, (SELECT loop_op.opID, (SELECT newwoop.woopid             \n" +
                "		FROM workorder_operation newwoop             \n" +
                "		WHERE newwoop.woID = insertedWOID             \n" +
                "			AND newwoop.opID=(SELECT opID FROM workorder_operation             \n" +
                "						WHERE woopID=loop_op.refLoopWOOPID)) newrefloopwoopid            \n" +
                "				FROM workorder_operation loop_op              \n" +
                "				WHERE loop_op.woID = woID AND isLoopOperation=1 AND deletedAt IS NULL) AS b            \n" +
                "	SET newLoopOp.refLoopWOOPID = b.newrefloopwoopid            \n" +
                "	WHERE newLoopOp.isLoopOperation=1            \n" +
                "	AND b.opID=newLoopOp.opID            \n" +
                "	AND newLoopOp.deletedAt IS NULL AND newLoopOp.woID=insertedWOID;            \n" +
                "	#update work order operation details for loop operation case            \n" +
                "	# copy workorder_cluster                                                        \n" +
                "  \n" +
                "    INSERT INTO workorder_cluster                                                        \n" +
                "	(`woID`,`clusterName`,`displayOrder`,`createdAt`,`createdBy`, `isDeleted`,`isParellelOperation`)                                                        \n" +
                "	SELECT insertedWOID `woID`,`clusterName`,`displayOrder`, fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`, `isDeleted`,`isParellelOperation` FROM workorder_cluster wc WHERE wc.woID = woID AND wc.deletedAt IS NULL;                                                        \n" +
                "  \n" +
                "    # copy workorder_operation_cluster                                                        \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_cluster (`clusterID`,`opID`,`displayOrder`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)                                                        \n" +
                "	SELECT                                                         \n" +
                "	(SELECT clusterID FROM workorder_cluster w_c WHERE w_c.woID = insertedWOID                                                         \n" +
                "		AND w_c.clusterName = (SELECT clusterName FROM workorder_cluster z WHERE z.clusterID = woc.clusterID                                                         \n" +
                "		AND z.woID = woID AND z.deletedAt IS NULL)) clusterID,                                                         \n" +
                "	woc.opID, woc.displayOrder, fun_DatetimetoUTCDateTime() `createdAt`, userID `createdBy`,                                                        \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = woc.opID) woOPID, `isDeleted`                                                        \n" +
                "	FROM workorder_operation_cluster woc                                                        \n" +
                "	WHERE woc.clusterID IN (SELECT clusterID FROM workorder_cluster wc WHERE wc.woID = woID AND wc.deletedAt IS NULL)                                                        \n" +
                "	AND woc.deletedAt IS NULL;                                                        \n" +
                "  \n" +
                "    # copy workorder_operation_part                                                        \n" +
                "  \n" +
                "	INSERT INTO workorder_operation_part                                                        \n" +
                "	(`woID`,`opID`,`partID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)                                                        \n" +
                "	SELECT insertedWOID `woID`,`opID`,`partID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,                                                        \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = wop.opID) woOPID	                                                        \n" +
                "	, `isDeleted` FROM workorder_operation_part wop                   \n" +
                "	WHERE wop.woID = woID AND wop.deletedAt IS NULL                  \n" +
                "	AND partID NOT IN (                  \n" +
                "				SELECT id FROM component                   \n" +
                "				WHERE (restrictUSEwithpermission = 1 OR restrictPackagingUseWithpermission = 1                   \n" +
                "					OR restrictUsePermanently = 1 OR restrictPackagingUsePermanently = 1)                  \n" +
                "				AND deletedAt IS NULL                   \n" +
                "				AND id IN (SELECT partID FROM workorder_operation_part                   \n" +
                "						WHERE woID = woID AND deletedAt IS NULL)                  \n" +
                "			 )                  \n" +
                "	AND partID NOT IN (                  \n" +
                "				SELECT mfgPNID FROM rfq_lineitems_alternatepart                   \n" +
                "				WHERE partID IN (SELECT partID FROM workorder WHERE woID = woID AND deletedAt IS NULL)                  \n" +
                "				AND (restrictUseInBOMWithPermissionStep = 1 OR restrictUseInBOMStep = 1)                  \n" +
                "				AND deletedAt IS NULL                   \n" +
                "				)                  \n" +
                "	;                                                        \n" +
                "  \n" +
                "    # copy workorder_operation_equipment                                                        \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_equipment                                                        \n" +
                "	(`woID`,`opID`,`eqpID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`,`qty`)                                                        \n" +
                "	SELECT insertedWOID `woID`,`opID`,`eqpID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,                                                        \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = we.opID) woOPID, `isDeleted`,`qty`                                                        \n" +
                "	FROM workorder_operation_equipment we WHERE we.woID = woID AND we.deletedAt IS NULL;                                                        \n" +
                "  \n" +
                "    # copy workorder_operation_employee                                                        \n" +
                "  \n" +
                "    INSERT INTO workorder_operation_employee                                                        \n" +
                "	(`woID`,`opID`,`employeeID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)                                                        \n" +
                "	SELECT insertedWOID `woID`,`opID`,`employeeID`,fun_DatetimetoUTCDateTime() `createdAt`,userID `createdBy`,                                                        \n" +
                "	(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = we.opID) woOPID, `isDeleted`                                                         \n" +
                "	FROM workorder_operation_employee we WHERE we.woID = woID AND we.deletedAt IS NULL;                                                        \n" +
                "  \n" +
                "    # copy dataelement_transactionvalues for Work order other fields                                                       \n" +
                "  \n" +
                "	INSERT INTO dataelement_transactionvalues                                                        \n" +
                "	(`dataElementID`,`value`,`refTransID`,`entityID`,`createdAt`,`createdBy`,`refSubFormTransID`, `isDeleted`)                                                        \n" +
                "	SELECT `dataElementID`,`value`,insertedWOID `refTransID`,`entityID`,fun_DatetimetoUTCDateTime() `createdAt`,                                                        \n" +
                "		userID `createdBy`,`refSubFormTransID`, `isDeleted`                                                     \n" +
                "	FROM dataelement_transactionvalues dt WHERE dt.refTransID = woID                                                        \n" +
                "	AND entityID = -7                                                        \n" +
                "	AND dt.deletedAt IS NULL;                                                        \n" +
                "  \n" +
                "  \n" +
                "	# copy subform_transaction for Work order other fields multiple row sub-form	                                                    \n" +
                "  \n" +
                "	block1:BEGIN                                                         \n" +
                "  \n" +
                "		-- declare cusrsor subform_wo_from_data_cursor (from-to sub-form data copy)                                                    \n" +
                "		DECLARE subform_wo_from_data_cursor CURSOR FOR                                                     \n" +
                "			SELECT `subFormTransID`,`parentDataElementID`,`rowNumber`                                                    \n" +
                "			FROM subform_transaction WHERE deletedAt IS NULL                                                    \n" +
                "			AND subFormTransID IN (SELECT DISTINCT refSubFormTransID FROM dataelement_transactionvalues WHERE deletedAt IS NULL                                                        \n" +
                "						AND entityID = -7                                                  \n" +
                "						AND refTransID = woID                                                     \n" +
                "						ORDER BY refSubFormTransID ASC		                                                    \n" +
                "					);                                                      \n" +
                "  \n" +
                "  \n" +
                "	-- declare exit loop if data not found                                                          \n" +
                "	DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop_wo = TRUE;                                                         \n" +
                "  \n" +
                "	OPEN subform_wo_from_data_cursor;                                                          \n" +
                "	-- loop item till all records found in string match of sub-form data element                                                    \n" +
                "  \n" +
                "	wo_sub_Form_loop:LOOP                                                      \n" +
                "  \n" +
                "		 FETCH subform_wo_from_data_cursor INTO lv_subFormTransID_from,lv_parentDataElementID_from,lv_rowNumber_from;                                                      \n" +
                "  \n" +
                "		 IF exit_loop_wo THEN                                                    \n" +
                "			LEAVE wo_sub_Form_loop;                                                        \n" +
                "		 END IF;                                                            \n" +
                "  \n" +
                "		/* first insert work order sub-form entry to update row reference in dataelement */	                                                    \n" +
                "		INSERT  INTO `subform_transaction`(`parentDataElementID`,`rowNumber`,`createdAt`,`createdBy`,`isDeleted`)                                                    \n" +
                "		VALUES (lv_parentDataElementID_from,lv_rowNumber_from,fun_DatetimetoUTCDateTime(), userID,0);                                                    \n" +
                "  \n" +
                "		SET insertedSubFormTransID = LAST_INSERT_ID();	                                                    \n" +
                "  \n" +
                "		/* update new copied work order sub-form reference */                                                    \n" +
                "		UPDATE dataelement_transactionvalues                                                    \n" +
                "		SET refSubFormTransID = insertedSubFormTransID                                                    \n" +
                "		WHERE deletedAt IS NULL                                                    \n" +
                "		AND refTransID = insertedWOID                                                    \n" +
                "		AND refSubFormTransID  = lv_subFormTransID_from;                                                    \n" +
                "  \n" +
                "		SET lv_subFormTransID_from = NULL;                                                    \n" +
                "		SET lv_parentDataElementID_from = NULL;                                                    \n" +
                "		SET lv_rowNumber_from = NULL;                                                    \n" +
                "		SET insertedSubFormTransID = NULL;                                                    \n" +
                "  \n" +
                "	END LOOP wo_sub_Form_loop;	                                                    \n" +
                "	CLOSE subform_wo_from_data_cursor;	                                                    \n" +
                "  \n" +
                "	END  block1;   				                                                      \n" +
                "  \n" +
                "  \n" +
                "	# copy workorder_operation_dataelement                                                        \n" +
                "  \n" +
                "  \n" +
                "	INSERT INTO `workorder_operation_dataelement`                                                        \n" +
                "    (`woID`,`opID`,`woOPID`,`dataElementID`,`displayOrder`,`createdBy`)                                                        \n" +
                "	SELECT insertedWOID `woID`,`opID`,(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = woopd.opID) woOPID,                                                        \n" +
                "	`dataElementID`,`displayOrder`,userID `createdBy`                                                        \n" +
                "	FROM workorder_operation_dataelement woopd WHERE woopd.woID = woID AND woopd.deletedAt IS NULL;                                                            \n" +
                "  \n" +
                "    # copy workorder_operation_equipment_dataelement                                                        \n" +
                "  \n" +
                "	INSERT INTO `workorder_operation_equipment_dataelement`                                                        \n" +
                "    (`woID`,`opID`,`eqpID`,`woOPID`,`dataElementID`,`displayOrder`,`createdBy`)                                                        \n" +
                "	SELECT insertedWOID `woID`,`opID`,`eqpID`,(SELECT wo.woOPID FROM workorder_operation wo WHERE wo.woID = insertedWOID AND wo.opID = wooped.opID) woOPID,                                                        \n" +
                "	`dataElementID`,`displayOrder`,userID `createdBy`                                                        \n" +
                "	FROM workorder_operation_equipment_dataelement wooped WHERE wooped.woID = woID AND wooped.deletedAt IS NULL;                                                       \n" +
                "  \n" +
                "  \n" +
                "    # copy dataelement_transactionvalues for Work order Operation other fields                                                       \n" +
                "  \n" +
                "	INSERT INTO dataelement_transactionvalues                                                        \n" +
                "	(`dataElementID`,`value`,`refTransID`,`entityID`,`createdAt`,`createdBy`,`refSubFormTransID`, `isDeleted`)                                                        \n" +
                "	SELECT `dataElementID`,`value`,                                                    \n" +
                "		 (SELECT woOPID FROM workorder_operation wopTo                                                      \n" +
                "		 WHERE wopTo.opID IN (SELECT wopFrom.opID FROM workorder_operation wopFrom                                                         \n" +
                "		 			WHERE wopFrom.woOPID = dt.refTransID )                                                    \n" +
                "		 AND wopTo.woID = insertedWOID) `refTransID`,                                                    \n" +
                "	`entityID`,fun_DatetimetoUTCDateTime() `createdAt`, userID `createdBy`,`refSubFormTransID`, `isDeleted`                                                     \n" +
                "	FROM dataelement_transactionvalues dt                                                     \n" +
                "	WHERE dt.refTransID IN ( SELECT woOPID FROM workorder_operation wop WHERE wop.deletedAt IS NULL                                                    \n" +
                "					AND wop.woID = woID )                                                    \n" +
                "	AND entityID = -1                                                        \n" +
                "	AND dt.deletedAt IS NULL;                                                     \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	# copy subform_transaction for Work order operation other fields multiple row sub-form	                                                    \n" +
                "  \n" +
                "	block2:BEGIN                                                         \n" +
                "  \n" +
                "	-- declare cusrsor subform_woop_from_data_cursor (from-to woop sub-form data copy)                                                    \n" +
                "	DECLARE subform_woop_from_data_cursor CURSOR FOR                                                     \n" +
                "		SELECT `subFormTransID`,`parentDataElementID`,`rowNumber`                                                    \n" +
                "		FROM subform_transaction WHERE deletedAt IS NULL                                                    \n" +
                "		AND subFormTransID IN (SELECT DISTINCT refSubFormTransID FROM dataelement_transactionvalues WHERE deletedAt IS NULL                                                        \n" +
                "					AND entityID = -1                                                   \n" +
                "					AND refTransID IN (SELECT woOPID FROM workorder_operation                                                     \n" +
                "						WHERE deletedAt IS NULL AND woID = woID )                                                     \n" +
                "					ORDER BY refSubFormTransID ASC		    	                                                    \n" +
                "			);                                                     \n" +
                "  \n" +
                "  \n" +
                "	-- declare exit loop if data not found                                                          \n" +
                "	DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop_woop = TRUE;                                                         \n" +
                "  \n" +
                "	OPEN subform_woop_from_data_cursor;                                                          \n" +
                "	-- loop item till all records found in string match of sub-form data element                                                    \n" +
                "  \n" +
                "	woop_sub_Form_loop:LOOP                                                      \n" +
                "  \n" +
                "		 FETCH subform_woop_from_data_cursor INTO lv_subFormTransID_from,lv_parentDataElementID_from,lv_rowNumber_from;                                                      \n" +
                "  \n" +
                "		 IF exit_loop_woop THEN                                                    \n" +
                "			LEAVE woop_sub_Form_loop;                                                            \n" +
                "		 END IF;                                                            \n" +
                "		/* first insert work order operation sub-form entry to update row reference in dataelement */	                                                    \n" +
                "		INSERT  INTO `subform_transaction`(`parentDataElementID`,`rowNumber`,`createdAt`,`createdBy`,`isDeleted`)                                                    \n" +
                "		VALUES (lv_parentDataElementID_from,lv_rowNumber_from,fun_DatetimetoUTCDateTime(), userID,0);                                                    \n" +
                "  \n" +
                "		SET insertedSubFormTransID = LAST_INSERT_ID();	                                                    \n" +
                "  \n" +
                "		/* update new copied work order operation sub-form reference  */                                                    \n" +
                "		SET @SQl1 = CONCAT('                                                    \n" +
                "				UPDATE dataelement_transactionvalues                                                    \n" +
                "				SET refSubFormTransID = ',insertedSubFormTransID,                                                    \n" +
                "				' WHERE deletedAt IS NULL                                                    \n" +
                "				AND refTransID IN (SELECT woOPID FROM workorder_operation                                                    \n" +
                "							WHERE deletedAt IS NULL AND woID = ',insertedWOID,' )                                                    \n" +
                "				AND refSubFormTransID  = ',lv_subFormTransID_from,';		                                                    \n" +
                "			');		                                                                                        \n" +
                "		PREPARE stmt1 FROM @SQL1;                                                                                        \n" +
                "		EXECUTE stmt1;     		                                                    \n" +
                "  \n" +
                "		SET lv_subFormTransID_from = NULL;                                                    \n" +
                "		SET lv_parentDataElementID_from = NULL;                                                    \n" +
                "		SET lv_rowNumber_from = NULL;                                                    \n" +
                "		SET insertedSubFormTransID = NULL;                                                    \n" +
                "  \n" +
                "	END LOOP woop_sub_Form_loop;	                                                    \n" +
                "	CLOSE subform_woop_from_data_cursor;	                                                    \n" +
                "  \n" +
                "	END  block2;                                                      \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    # copy workorder_preprogcomp                                                        \n" +
                "  \n" +
                "    -- add component selected operation too while copy component added subquery                                                        \n" +
                "  \n" +
                "    INSERT INTO `workorder_preprogcomp`                                                        \n" +
                "    (`woID`,`mfgPNID`,`woMultiplier`,`displayOrder`,`createdBy`,`createdAt`,`programName`, `refStkWOOPID`)                                                        \n" +
                "	SELECT                                                         \n" +
                "    insertedWOID `woID`,`mfgPNID`,`woMultiplier`,`displayOrder`,userID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`,`programName`,                                                        \n" +
                "    (SELECT woOPID FROM                                                         \n" +
                "    workorder_operation wop                                                         \n" +
                "	WHERE wop.opID IN (                                                        \n" +
                "		SELECT opID FROM workorder_operation wo                                                         \n" +
                "			WHERE wo.woOPID = wp.refStkWOOPID                                                        \n" +
                "		)                                                        \n" +
                "	AND wop.woID = insertedWOID) refStkWOOPID                                                        \n" +
                "	FROM workorder_preprogcomp wp                                                         \n" +
                "    WHERE wp.woID = woID AND wp.deletedAt IS NULL;                                                          \n" +
                "  \n" +
                "    # copy workorder_preprogcomp_designator                                                        \n" +
                "  \n" +
                "    INSERT INTO `workorder_preprogcomp_designator`                                                        \n" +
                "	(`woID`,`designatorName`,`woPreProgCompID`,`createdBy`,`createdAt`)                                                        \n" +
                "    SELECT insertedWOID `woID`,`designatorName`,                                                        \n" +
                "	(SELECT wp.woPreProgCompID FROM workorder_preprogcomp wp WHERE wp.woID = insertedWOID AND wp.mfgPNID =                                                         \n" +
                "	(SELECT swp.mfgPNID FROM workorder_preprogcomp swp WHERE swp.woID = woID AND                                                        \n" +
                "    swp.woPreProgCompID = wpd.woPreProgCompID) LIMIT 1) woPreProgCompID,                                                        \n" +
                "	userID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`                                                        \n" +
                "	FROM workorder_preprogcomp_designator wpd                                                         \n" +
                "    WHERE wpd.woID = woID AND wpd.deletedAt IS NULL;                                                        \n" +
                "  \n" +
                "	/* IFNULL(isRevision,0) = 0 : isRevision means \"isNewRevision\"  */                        \n" +
                "    IF (pisCopyOPFrom=\"W\" OR pisCopyOPFrom=\"PW\") THEN     /* W : work order , PW : previous work order */                                                   \n" +
                "  \n" +
                "	 /* copy all op master folder to wo op level */                      \n" +
                "	INSERT INTO generic_folder                                                        \n" +
                "	(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                                        \n" +
                "	`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)                                                        \n" +
                "	SELECT  gf.gencFolderName, ( SELECT woopt1.woOPID FROM workorder_operation woopt1 WHERE woopt1.deletedAt IS NULL AND woopt1.woID = insertedWOID                      \n" +
                "					AND woopt1.opID = gf.refTransID) refTransID ,                       \n" +
                "	NULL, 'workorder_operation' gencFileOwnerType, gf.roleId, gf.refParentId,                                                        \n" +
                "	0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, userID createdBy, gf.gencFolderID copyGencFolderID ,                      \n" +
                "         gf.refTransID refCopyTransID, gf.gencFileOwnerType refCopyGencFileOwnerType                                       \n" +
                "	FROM generic_folder gf                      \n" +
                "	WHERE gf.refTransID IN (SELECT woopt7.opID FROM workorder_operation woopt7 WHERE woopt7.woID = woID)                      \n" +
                "	AND gf.gencFileOwnerType = 'operations'                        \n" +
                "	AND entityID = -1                      \n" +
                "	AND gf.deletedAt IS NULL ;                      \n" +
                "  \n" +
                "  \n" +
                "		# update refParentId - parent folder for work order each operation                      \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_woOPIDs;                        \n" +
                "  \n" +
                "		 CREATE TEMPORARY TABLE temp_woOPIDs AS                       \n" +
                "		 SELECT DISTINCT refTransID FROM generic_folder WHERE deletedAt IS NULL                      \n" +
                "		 AND gencFileOwnerType = 'workorder_operation'                       \n" +
                "		 AND refTransID IN (SELECT woopt3.woOPID FROM workorder_operation woopt3                       \n" +
                "					WHERE woopt3.deletedAt IS NULL AND woopt3.woID = insertedWOID) ;                      \n" +
                "  \n" +
                "		SET totWoOPIDs = 0;                      \n" +
                "		SET i = 0;                      \n" +
                "		SELECT COUNT(*) FROM temp_woOPIDs INTO totWoOPIDs;                        \n" +
                "  \n" +
                "		 WHILE i < totWoOPIDs DO                           \n" +
                "		 	SET t_lv_woOPID = NULL;                      \n" +
                "		 	SELECT * INTO t_lv_woOPID FROM temp_woOPIDs LIMIT i,1 ;                      \n" +
                "  \n" +
                "			 UPDATE generic_folder gf1,                                                        \n" +
                "			 	(   SELECT a.gencFolderID, a.copyGencFolderID                                                        \n" +
                "			 		FROM generic_folder a WHERE a.refTransID = t_lv_woOPID AND a.gencFileOwnerType = 'workorder_operation'                                                        \n" +
                "			 	) gf2                                                        \n" +
                "			 	SET gf1.refParentId = gf2.gencFolderID                                                        \n" +
                "			 WHERE gf1.refParentId = gf2.copyGencFolderID                       \n" +
                "			 AND gf1.refTransID = t_lv_woOPID AND gf1.gencFileOwnerType = 'workorder_operation';                      \n" +
                "  \n" +
                "		 SET i = i + 1;                          \n" +
                "		 END WHILE;                          \n" +
                "  \n" +
                "  \n" +
                "	    # copy generic_folder from selected part/assembly level to work order level                      \n" +
                "		INSERT INTO generic_folder                                                        \n" +
                "				(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                                        \n" +
                "				`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)                                                        \n" +
                "		SELECT  a.gencFolderName, insertedWOID refTransID, '-7' , 'workorder' gencFileOwnerType, a.roleId, a.refParentId,                                                        \n" +
                "				0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, userID createdBy, a.gencFolderID copyGencFolderID ,                      \n" +
                "				a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType                                                       \n" +
                "		FROM generic_folder a                       \n" +
                "		WHERE a.refTransID = ppartID                       \n" +
                "		AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.deletedAt IS NULL;                                                        \n" +
                "  \n" +
                "		UPDATE generic_folder gf1,                                                        \n" +
                "			(   SELECT a.gencFolderID, a.copyGencFolderID                                                        \n" +
                "				FROM generic_folder a WHERE a.refTransID = insertedWOID AND a.gencFileOwnerType = 'workorder'                                                        \n" +
                "			) gf2                                                        \n" +
                "			SET gf1.refParentId = gf2.gencFolderID                                                        \n" +
                "			WHERE gf1.refParentId = gf2.copyGencFolderID                       \n" +
                "			AND gf1.refTransID = insertedWOID AND gf1.gencFileOwnerType = 'workorder';                       \n" +
                "  \n" +
                "	 END IF;                       \n" +
                "  \n" +
                "	IF (pisCopyOPFrom=\"PW\") THEN         /* PW : previous work order */                      \n" +
                "  \n" +
                "	   # copy generic_folder from old work order to new work order                                                       \n" +
                "	    INSERT INTO generic_folder                                                        \n" +
                "			(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                                        \n" +
                "			`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)                                                        \n" +
                "		SELECT  a.gencFolderName, insertedWOID refTransID, a.entityID, a.gencFileOwnerType, a.roleId, a.refParentId,                                                        \n" +
                "		0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, userID createdBy, a.gencFolderID copyGencFolderID ,                      \n" +
                "		a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType                                                        \n" +
                "		FROM generic_folder a                       \n" +
                "		WHERE a.refTransID = woID                       \n" +
                "		AND a.gencFileOwnerType = 'workorder'  AND a.entityID = '-7' AND a.deletedAt IS NULL                      \n" +
                "		AND ((a.refCopyTransID IS NULL AND a.refCopyGencFileOwnerType IS NULL)                      \n" +
                "			OR (a.refCopyGencFileOwnerType = 'workorder' AND a.refCopyTransID IS NOT NULL)) ;                      \n" +
                "  \n" +
                "	UPDATE generic_folder gf1,                                                        \n" +
                "		(   SELECT a.gencFolderID, a.copyGencFolderID                                                        \n" +
                "			FROM generic_folder a WHERE a.refTransID = insertedWOID AND a.gencFileOwnerType = 'workorder'                                                        \n" +
                "		) gf2                                                        \n" +
                "		SET gf1.refParentId = gf2.gencFolderID                                                        \n" +
                "		WHERE gf1.refParentId = gf2.copyGencFolderID AND gf1.refTransID = insertedWOID AND gf1.gencFileOwnerType = 'workorder';                                                        \n" +
                "  \n" +
                "  \n" +
                "	# copy generic_folder from old wo op to new wo op                       \n" +
                "  \n" +
                "	INSERT INTO generic_folder                                                        \n" +
                "		(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                                        \n" +
                "		`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)                                                        \n" +
                "		SELECT  gf.gencFolderName, ( SELECT woopt1.woOPID FROM workorder_operation woopt1 WHERE woopt1.deletedAt IS NULL AND woopt1.woID = insertedWOID                      \n" +
                "						AND woopt1.opID = (SELECT woopt2.opID FROM workorder_operation woopt2 WHERE woopt2.deletedAt IS NULL                       \n" +
                "									AND woopt2.woOPID = gf.refTransID)) refTransID ,                       \n" +
                "		gf.entityID, gf.gencFileOwnerType, gf.roleId, gf.refParentId,                                                        \n" +
                "		0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, userID createdBy, gf.gencFolderID copyGencFolderID ,                      \n" +
                "		gf.refTransID refCopyTransID, gf.gencFileOwnerType refCopyGencFileOwnerType                                                       \n" +
                "		FROM generic_folder gf                      \n" +
                "		WHERE gf.refTransID IN (SELECT woop.woOPID FROM workorder_operation woop WHERE woop.deletedAt IS NULL AND woop.woID = woID)                       \n" +
                "		AND gf.gencFileOwnerType = 'workorder_operation'                        \n" +
                "		AND gf.deletedAt IS NULL                      \n" +
                "		AND ((gf.refCopyTransID IS NULL AND gf.refCopyGencFileOwnerType IS NULL)                      \n" +
                "			OR (gf.refCopyGencFileOwnerType = 'workorder_operation' AND gf.refCopyTransID IS NOT NULL));                        \n" +
                "  \n" +
                "		# update refParentId - parent folder for work order each operation                      \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_woOPIDs;                        \n" +
                "  \n" +
                "		 CREATE TEMPORARY TABLE temp_woOPIDs AS                       \n" +
                "		 SELECT DISTINCT refTransID FROM generic_folder WHERE deletedAt IS NULL                      \n" +
                "		 AND gencFileOwnerType = 'workorder_operation'                       \n" +
                "		 AND refTransID IN (SELECT woopt3.woOPID FROM workorder_operation woopt3 WHERE woopt3.deletedAt IS NULL AND woopt3.woID = insertedWOID) ;                      \n" +
                "  \n" +
                "		SET totWoOPIDs = 0;                      \n" +
                "		SET i = 0;                      \n" +
                "		 SELECT COUNT(*) FROM temp_woOPIDs INTO totWoOPIDs;                        \n" +
                "  \n" +
                "		 WHILE i < totWoOPIDs DO                           \n" +
                "		 	SET t_lv_woOPID = NULL;                      \n" +
                "		 	SELECT * INTO t_lv_woOPID FROM temp_woOPIDs LIMIT i,1 ;                      \n" +
                "  \n" +
                "			 UPDATE generic_folder gf1,                                                        \n" +
                "			 	(   SELECT a.gencFolderID, a.copyGencFolderID                                                        \n" +
                "			 		FROM generic_folder a WHERE a.refTransID = t_lv_woOPID AND a.gencFileOwnerType = 'workorder_operation'                                                        \n" +
                "			 	) gf2                                                        \n" +
                "			 	SET gf1.refParentId = gf2.gencFolderID                                                        \n" +
                "			 WHERE gf1.refParentId = gf2.copyGencFolderID                       \n" +
                "			 AND gf1.refTransID = t_lv_woOPID AND gf1.gencFileOwnerType = 'workorder_operation';                      \n" +
                "  \n" +
                "		 SET i = i + 1;                          \n" +
                "		 END WHILE;                      \n" +
                "  \n" +
                "	END IF;                       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_woOPIDs;                       \n" +
                "  \n" +
                "	COMMIT;                                                        \n" +
                "	SELECT * FROM workorder wo WHERE wo.woID = insertedWOID;                                                        \n" +
                "  \n" +
                "END IF;                                                     \n" +
                "  \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2649,'2.00','V1','Sproc_CopyWorkorder- Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;


        case 2649:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorder`  ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorder`(	                                                            \n" +
                "	IN ppageIndex INT(11),                                                            \n" +
                "	IN precordPerPage INT(11),                                                            \n" +
                "	IN pOrderBy VARCHAR(255),	                                                            \n" +
                "	IN pWhereClause VARCHAR(16383),                     \n" +
                "	IN pWOId INT,      \n" +
                "        IN woSubstatusIds LONGTEXT,      \n" +
                "        IN woTypeIds LONGTEXT,      \n" +
                "        IN rohsStatusIds LONGTEXT,      \n" +
                "        IN assyTypeIds LONGTEXT,      \n" +
                "        IN stdCertificationIds LONGTEXT,      \n" +
                "        IN stdclassIds LONGTEXT,      \n" +
                "        IN isPendingSoMapping TINYINT(1),      \n" +
                "        IN isPendingkitMapping TINYINT(1),      \n" +
                "        IN isRunningwo TINYINT(1),      \n" +
                "        IN isTrackBySerialNumber TINYINT(1),      \n" +
                "        IN isrushJob TINYINT(1),      \n" +
                "        IN isstoppedWo TINYINT(1),      \n" +
                "        IN isnewWo TINYINT(1) ,      \n" +
                "        IN iswaterSoluable TINYINT(1),      \n" +
                "        IN isecodfm TINYINT(1),      \n" +
                "        IN isOpenWo TINYINT(1),      \n" +
                "        IN customerIds LONGTEXT,      \n" +
                "        IN salesOrderdetails LONGTEXT,      \n" +
                "        IN assyIds LONGTEXT ,      \n" +
                "        IN assyNicknameIds LONGTEXT,      \n" +
                "        IN operationIds LONGTEXT,      \n" +
                "        IN employeeIds LONGTEXT ,      \n" +
                "	IN equipmentIds LONGTEXT,      \n" +
                "	IN materialIds LONGTEXT,      \n" +
                "	IN umidIds LONGTEXT      \n" +
                "    )  \n" +
                "BEGIN                                                            \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                                                            \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                              \n" +
                "	DECLARE v_WorkOrderDetailWhere VARCHAR(1000);                     \n" +
                "  \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(\"                        \n" +
                "  \n" +
                "	SELECT 	wo.*,(case when wo.isRackTrackingRequired=1 then 'Yes' else 'No' end) as   rackTrackingRequired,      \n" +
                "	(case when wo.isStrictlyFollowRackValidation=1 then 'Yes' else 'No' end) as   strictlyFollowRackValidation,                                                \n" +
                "		fun_getUserNameByID(wo.updatedBy) woModifiedBy,                  \n" +
                "		fun_getUserNameByID(wo.createdBy) woCreatedBy,                  \n" +
                "		fun_getRoleByID(wo.updateByRoleId) updatedbyRole,                  \n" +
                "		fun_getRoleByID(wo.deleteByRoleId) deletedbyRole,                  \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(wo.createdAt) woCreatedAt,                  \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(wo.updatedAt) woUpdatedAt,                  \n" +
                "		(SELECT mfgCode FROM mfgcodemst mfg WHERE mfg.id=wo.customerID) mfgName,                                              \n" +
                "		co.PIDCODE AS PIDCode,                                               \n" +
                "		co.mfgPN AS mfgPN,                                                  \n" +
                "		co.nickname AS nickName,                                               \n" +
                "		co.mfgPNDescription AS mfgPNDescription,                                                         \n" +
                "		co.rev AS rev,                                                                                   \n" +
                "		co.liveVersion AS liveVersion,               \n" +
                "		wthu.woTransHoldUnholdId,		            \n" +
                "		vuwosummstk.shippedQty,                                              \n" +
                "		vuwosummstk.readytoShipQty,                    \n" +
                "		vuwosummstk.scrapQty AS scrappedQty ,                                              \n" +
                "		`vuwotransfer`.`OP Name` AS fromOpName,                                              \n" +
                "		`vuwotransfer`.`OP Number` AS fromOpNumber,                                              \n" +
                "		`vuwotransfer`.`woOPID Identity` AS fromWOOPID,                                               \n" +
                "		`vuwotransfer`.`TransferQty` AS transferQty,                                              \n" +
                "		`vuwotransfer`.`To WO Number` AS transferWoNumber,                                          \n" +
                "		`vuwotransfer`.`To WO Version` AS transferWoVersion,                                              \n" +
                "		fun_getWoSubStatusNameByID(`wo`.`woSubStatus`) AS `woSubStatusConvertedValue`,                                                 \n" +
                "		-- fun_getReadyStock(`wo`.`woID`) AS returnPending,                                                \n" +
                "		(IFNULL(vuwosummstk.buildQty,0) - IFNULL(vuwosummstk.firstOPtotalQty,0)) AS returnPending,                                                      \n" +
                "		CAST(fun_getMinShippingDateByWOID(`wo`.`woID`) AS DATETIME) AS shippingDate,                                                           \n" +
                "		ro.rohsIcon,                                              \n" +
                "		`ro`.`name` AS `rohsName` ,                                                        \n" +
                "		(SELECT COUNT(1) FROM workorder_operation woop WHERE woop.woID=wo.woID AND woop.deletedAt IS NULL AND IFNULL(woop.isDeleted,0) = 0) opCount,                                              \n" +
                "		(SELECT COUNT(1) FROM workorder_reqforreview worr WHERE worr.woID=wo.woID AND  worr.deletedAt IS NULL AND IFNULL(worr.isDeleted,0) = 0) woReviewChangesCount,                                              \n" +
                "		(SELECT COUNT(1) FROM eco_request er WHERE er.woID=wo.woID AND requestType = 1 AND er.deletedAt IS NULL AND IFNULL(er.isDeleted,0) = 0) ecoRequestCount,                              \n" +
                "        (SELECT COUNT(1) FROM eco_request er WHERE er.woID=wo.woID AND requestType = 2 AND er.deletedAt IS NULL AND IFNULL(er.isDeleted,0) = 0) dfmRequestCount,                              \n" +
                "		(SELECT COUNT(1) FROM workorder_cluster woc WHERE woc.woID=wo.woID AND woc.deletedAt IS NULL AND IFNULL(woc.isDeleted,0) = 0 AND woc.isParellelOperation = 1) parallelClusterCount,                                              \n" +
                "		IFNULL((select 'Yes' from equipment e          \n" +
                "		  where e.equipmentAs ='S'          \n" +
                "		    and e.deletedAt is null          \n" +
                "		    and e.isDeleted = false          \n" +
                "            and e.isActive = true          \n" +
                "		    and e.assyId = wo.partID),'No') AS `isSampleAvailableConvertedValue` ,                                                            \n" +
                "		(CASE WHEN (`wo`.`isHotJob` = 0) THEN 'No'                                                             \n" +
                "			WHEN (`wo`.`isHotJob` = 1) THEN 'Yes' ELSE '' END) AS `isHotJobConvertedValue` ,                                                            \n" +
                "		(CASE WHEN (`wo`.`isOperationTrackBySerialNo` = 0) THEN 'No'                                                             \n" +
                "			WHEN (`wo`.`isOperationTrackBySerialNo` = 1) THEN 'Yes' ELSE '' END) AS `isOperationTrackBySerialNoConvertedValue`,                                                            \n" +
                "		fun_getwoTypeNameByType(`wo`.`woType`) AS `woTypeConvertedText`,                                                    \n" +
                "		(CASE WHEN IFNULL(`wo`.`isStopWorkorder`,0) = 1 THEN 'Yes'                                                          \n" +
                "			ELSE 'No' END) AS `isHalt`,                                                          \n" +
                "		(CASE WHEN (IFNULL(`wo`.`isStopWorkorder`,0) = 1) THEN                                                           \n" +
                "			(SELECT CONCAT(whu.reason, ' - Halt by ',                                                           \n" +
                "				(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp WHERE emp.id=whu.holdEmployeeID),                                                           \n" +
                "				' on ', DATE_FORMAT(whu.startDate,'%m/%d/%Y %H:%i:%S'))                                                           \n" +
                "			FROM workorder_trans_hold_unhold whu                                                           \n" +
                "			WHERE wo.woID = whu.woID AND IFNULL(whu.isDeleted,0) = 0                                                           \n" +
                "			AND whu.deletedAt IS NULL AND whu.startDate IS NOT NULL AND whu.endDate IS NULL                                                          \n" +
                "			ORDER BY whu.startDate DESC LIMIT 1)                                                           \n" +
                "		ELSE                                                            \n" +
                "			(SELECT CONCAT(whu.resumeReason, ' - Resume by ',                                                           \n" +
                "				(SELECT CONCAT(emp.firstName, ' ', emp.lastName) FROM employees emp WHERE id=whu.unHoldEmployeeID),                                                           \n" +
                "				' on ', DATE_FORMAT(whu.endDate,'%m/%d/%Y %H:%i:%S'))                                                          \n" +
                "				FROM workorder_trans_hold_unhold whu                                                           \n" +
                "				WHERE wo.woID = whu.woID AND IFNULL(whu.isDeleted,0) = 0                                                           \n" +
                "				AND whu.deletedAt IS NULL AND whu.startDate IS NOT NULL AND whu.endDate IS NOT NULL                                                          \n" +
                "			ORDER BY whu.endDate DESC LIMIT 1)                                                           \n" +
                "		END) AS reasonDetails,                                                          \n" +
                "		(SELECT COUNT(*) FROM workorder_operation wop WHERE IFNULL(wop.isDeleted,0) = 0                                                           \n" +
                "			AND wop.deletedAt IS NULL AND IFNULL(wop.isStopOperation,0)=1 AND wo.woID = wop.woID) AS stopOperationCount,                                              \n" +
                "		vusalesorderdet.totalPOQty, vusalesorderdet.POQtyValues soPOQty,                                                              \n" +
                "   		vusalesorderdet.totalMRPQty, vusalesorderdet.MRPQtyValues soMRPQty,                                               \n" +
                "		vusalesorderdet.poNumber, vusalesorderdet.salesOrderNumber, vusalesorderdet.lineID ,                      \n" +
                "		 vusalesorderdet.salesOrderMstIDs, vusalesorderdet.SOPOQtyValues ,       \n" +
                "         fun_getKitReleaseStatusByWoID(wo.woID) kitReleaseStatus,    \n" +
                "		(CASE WHEN co.totalSolderPoints IS NOT NULL THEN fun_calculateDPMOForWO(wo.woID)                           \n" +
                "					ELSE NULL END) AS DPMO  ,                \n" +
                "		(SELECT COUNT(*) FROM workorder_reqrevcomments WHERE deletedAt IS NULL AND woID = wo.woID AND accRejStatus = 'P'              \n" +
                "			AND commentemployeeID != (select employeeID from users where deletedAt IS NULL and id = wo.createdBy)) AS pendingWOReqThreadCount			                        \n" +
                "	FROM workorder wo                                                            \n" +
                "        LEFT JOIN component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3                                                  \n" +
                "        LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0                                                      \n" +
                "        LEFT JOIN vu_workorder_summary_stk vuwosummstk ON (vuwosummstk.woid = wo.woID)                      \n" +
                "		LEFT JOIN workorder_trans_hold_unhold wthu ON wo.woID = wthu.woID AND wthu.deletedAt IS NULL AND wthu.endDate IS NULL            \n" +
                "        LEFT JOIN (SELECT `wotransfer`.`OP Name`,                                            \n" +
                "		`wotransfer`.`OP Number`,                                              \n" +
                "		`wotransfer`.`woOPID Identity`,                                               \n" +
                "		SUM(`wotransfer`.`Transfer Qty`) `TransferQty`,                                              \n" +
                "		`wotransfer`.`To WO Number`,                                              \n" +
                "		`wotransfer`.`To WO Version`,                                           \n" +
                "		`wotransfer`.`woID Identity`                                            \n" +
                "	FROM vu_workorder_transfer_report wotransfer GROUP BY `wotransfer`.`woID Identity`) vuwotransfer ON `vuwotransfer`.`woID Identity` = wo.woID                                             \n" +
                "        LEFT OUTER JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID                                                                  \n" +
                "	WHERE IFNULL(wo.isdeleted,0) = 0       \n" +
                "	\");                         \n" +
                "  IF(woSubstatusIds IS NOT NULL AND woSubstatusIds!='') THEN      \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.woSubStatus in (', woSubstatusIds, ' )');      \n" +
                "  END IF;      \n" +
                "  \n" +
                "  IF(woTypeIds IS NOT NULL AND woTypeIds!='') THEN      \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.woType in (', woTypeIds, ' )');      \n" +
                "  END IF;      \n" +
                "  \n" +
                "  IF(rohsStatusIds IS NOT NULL AND rohsStatusIds!='') THEN      \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.RoHSStatusID in (', rohsStatusIds, ' )');      \n" +
                "  END IF;      \n" +
                "  \n" +
                "  IF(assyTypeIds IS NOT NULL AND assyTypeIds!='') THEN      \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.partId IN (SELECT c.id FROM component c WHERE c.deletedAt is NULL and c.assemblyType IN (',assyTypeIds,'))');      \n" +
                "  END IF;      \n" +
                "  \n" +
                "IF (stdCertificationIds IS NOT NULL AND stdCertificationIds != '' AND                            \n" +
                "		stdclassIds IS NOT NULL AND stdclassIds != '') THEN                            \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_certification wc where wc.woID = wo.woID and wc.isDeleted = 0 and wc.certificatestandardID in (', stdCertificationIds, ' ) and wc.classIds in (', stdclassIds, ' )) ');                            \n" +
                "	ELSEIF (stdCertificationIds IS NOT NULL AND stdCertificationIds != '') THEN                            \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_certification wc where wc.woID = wo.woID and wc.isDeleted = 0 and wc.certificatestandardID in (', stdCertificationIds, ' )) ');                            \n" +
                "	ELSEIF (stdclassIds IS NOT NULL AND stdclassIds != '') THEN                            \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_certification wc where wc.woID = wo.woID and wc.isDeleted = 0 and wc.classIds in (', stdclassIds, ' )) ');                            \n" +
                "    END IF;      \n" +
                "  \n" +
                "  IF(isPendingSoMapping=1)THEN      \n" +
                "  SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND NOT exists (select 1 from workorder_salesorder_details ws where ws.woID = wo.woID and ws.isDeleted = 0 ) ');                            \n" +
                "  END IF;      \n" +
                "  \n" +
                "  IF(isPendingkitMapping=1)THEN      \n" +
                "  SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND NOT exists (select 1 from salesorder_plan_detailsmst sp where sp.woID = wo.woID and sp.isDeleted = 0 ) ');                            \n" +
                "  END IF;      \n" +
                "  \n" +
                "IF(isRunningwo=1)THEN      \n" +
                "SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_trans wt where wt.woID = wo.woID and wt.isDeleted = 0 and wt.checkinTime is not null and wt.checkoutTime is null) ');       \n" +
                "END IF;        \n" +
                "  \n" +
                "  IF(isTrackBySerialNumber=1)THEN      \n" +
                "  SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isOperationTrackBySerialNo=1');        \n" +
                "  END IF;      \n" +
                "  \n" +
                "  IF(isrushJob=1)THEN      \n" +
                "  SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isHotJob=1');        \n" +
                "  END IF;      \n" +
                "  \n" +
                "  IF(isstoppedWo=1)THEN      \n" +
                "  SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isStopWorkorder=1');      \n" +
                "  END IF;      \n" +
                "  \n" +
                "  IF(isnewWo IS NOT NULL)THEN      \n" +
                "  SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isRevisedWO=',isnewWo,'');      \n" +
                "  END IF;      \n" +
                "  \n" +
                "  IF(isecodfm=1)THEN      \n" +
                "  SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from eco_request er where er.woID = wo.woID and er.isDeleted = 0 ) ');       \n" +
                "  END IF;      \n" +
                "  \n" +
                "  IF(iswaterSoluable IS NOT NULL)THEN      \n" +
                "	IF(iswaterSoluable=1)THEN      \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isWatersoluble=1');      \n" +
                "	ELSE      \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isNoClean=1');      \n" +
                "	END IF;      \n" +
                "  END IF;      \n" +
                "  \n" +
                "  IF(isOpenWo IS NOT NULL)THEN      \n" +
                "	IF(isOpenWo=1)THEN      \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from eco_request er where er.woID = wo.woID and er.isDeleted = 0 and er.finalStatus=\"P\") ');      \n" +
                "	ELSE      \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from eco_request er where er.woID = wo.woID and er.isDeleted = 0 and er.finalStatus!=\"P\") ');      \n" +
                "	END IF;      \n" +
                "  END IF;      \n" +
                "  \n" +
                "  IF(customerIds IS NOT NULL AND customerIds!='')THEN      \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.customerID in (', customerIds, ' )');      \n" +
                "  END IF;      \n" +
                "  \n" +
                "  IF(salesOrderdetails IS NOT NULL AND salesOrderdetails!='')THEN      \n" +
                "  SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_salesorder_details ws where ws.woID = wo.woID and ws.isDeleted = 0  and ws.salesorderdetailID in (select sd.id from salesorderdet sd where sd.deletedAT is null       \n" +
                "  and sd.refSalesOrderID in (',salesOrderdetails,'))) ');      \n" +
                "  END IF;      \n" +
                "  \n" +
                "  IF(assyIds IS NOT NULL AND assyIds!='') THEN      \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.partID in (', assyIds, ' )');      \n" +
                "  END IF;      \n" +
                "  \n" +
                "  IF(assyNicknameIds IS NOT NULL AND assyNicknameIds!='') THEN      \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.partID in (select c.id from component c where c.nickname in (', assyNicknameIds, ' ))');      \n" +
                "  END IF;      \n" +
                "  \n" +
                "  IF (operationIds IS NOT NULL AND operationIds != '') THEN       \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_operation woop where woop.woID = wo.woID and woop.isDeleted = 0 and woop.opID in (', operationIds, ' )) ');                            \n" +
                "  END IF;      \n" +
                "  \n" +
                "  IF (employeeIds IS NOT NULL AND employeeIds != '' AND operationIds IS NOT NULL AND operationIds != '') THEN       \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND (exists (select 1 from workorder_operation_employee woe where woe.woID = wo.woID and woe.isDeleted = 0 and woe.opID in (',operationIds,') and woe.employeeID in (', employeeIds, ' ))       \n" +
                "	OR  exists (select 1 from  workorder_trans_empinout wte where wte.woID = wo.woID and wte.isDeleted = 0 and wte.opID in (',operationIds,') and wte.employeeID in (', employeeIds, ' )))');       \n" +
                "  \n" +
                "  ELSEIF(employeeIds IS NOT NULL AND employeeIds != '') THEN      \n" +
                "            SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND (exists (select 1 from workorder_operation_employee woe where woe.woID = wo.woID and woe.isDeleted = 0  and woe.employeeID in (', employeeIds, ' ))       \n" +
                "            OR  exists(select 1 from workorder_trans_empinout wte where wte.woID = wo.woID and wte.isDeleted = 0 and  wte.employeeID in (', employeeIds, ' ))      \n" +
                "            OR  exists(select 1 from workorder_trans_umid_details wtu where wtu.woTransID in (select wt.woTransID from  workorder_trans wt where wt.deletedAt is null and wt.woID=wo.woID) and wtu.isDeleted = 0 and  wtu.employeeID in (', employeeIds, ' )))');        \n" +
                "  \n" +
                "  END IF;      \n" +
                "  \n" +
                "  \n" +
                "  IF(equipmentIds IS NOT NULL AND equipmentIds != '') THEN      \n" +
                "            SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND (exists (select 1 from workorder_operation_equipment woe where woe.woID = wo.woID and woe.isDeleted = 0  and woe.eqpID in (', equipmentIds, ' ))       \n" +
                "            OR  exists(select 1 from workorder_trans wt where wt.woID = wo.woID and wt.isDeleted = 0 and  wt.equipmentID in (', equipmentIds, ' ))      \n" +
                "            OR exists(select 1 from workorder_operation_equipment_feeder_details woef where woef.woopeqpid in (select woe.woOpEqpID from workorder_operation_equipment woe where woe.woID=wo.woID and woe.isDeleted = 0) and woef.isDeleted = 0 and  woef.eqpID in (', equipmentIds, ' )))');        \n" +
                "  \n" +
                "  END IF;      \n" +
                "  \n" +
                "  IF(materialIds IS NOT NULL AND materialIds != '') THEN      \n" +
                "            SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND (exists (select 1 from workorder_operation_part wop where wop.woID = wo.woID and wop.isDeleted = 0  and wop.partID in (', materialIds, ' ))       \n" +
                "            OR exists(select 1 from workorder_trans_umid_details wtu where wtu.woTransID in (select wt.woTransID from  workorder_trans wt where wt.deletedAt is null and wt.woID=wo.woID) and wtu.isDeleted = 0 and  wtu.mfgpnid in (', materialIds, ' )))');        \n" +
                "  \n" +
                "  END IF;      \n" +
                "  \n" +
                "  IF(umidIds IS NOT NULL AND umidIds != '') THEN      \n" +
                "            SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists(select 1 from workorder_trans_umid_details wtu where wtu.woTransID in (select wt.woTransID from  workorder_trans wt where wt.deletedAt is null and wt.woID=wo.woID) and wtu.isDeleted = 0 and  wtu.refsidid in (select csd.id from component_sid_stock csd where csd.uid in (', umidIds, ' ) and csd.deletedAt is null))');        \n" +
                "  \n" +
                "  END IF;      \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                            \n" +
                "	ELSE                                                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"nickName ASC\") ;                                                            \n" +
                "	END IF;	                                                            \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                            \n" +
                "		SET pWhereClause = '1=1' ;                                                            \n" +
                "	END IF;	                                                            \n" +
                "  \n" +
                "    IF (pWOId != 0) THEN                        \n" +
                "		SET v_WorkOrderDetailWhere = CONCAT(\" AND woID = \", pWOId);                        \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                            \n" +
                "	ELSE	                                                            \n" +
                "		SET rowNumWhere = '';                                                            \n" +
                "	END IF;	                                                            \n" +
                "  \n" +
                "	  /* to get total count of rows */                               \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetWorkorder,\" ) c where 1=1 and \", pWhereClause,IFNULL(v_WorkOrderDetailWhere, ''));                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query2;                              \n" +
                "	DEALLOCATE PREPARE query2;                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetWorkorder,\" ) c  where \", pWhereClause,IFNULL(v_WorkOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);                              \n" +
                "	PREPARE query1 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query1;                              \n" +
                "	DEALLOCATE PREPARE query1;                                                       \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows of workorder table */                                                            \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) FROM workorder where deletedAt IS NULL \" );                                                            \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                                            \n" +
                "	EXECUTE query3;                                                            \n" +
                "	DEALLOCATE PREPARE query3;                                                            \n" +
                "  \n" +
                "  \n" +
                "    END ;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2650,'2.00','V1','Sproc_GetWorkorder- Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;


        case 2650:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_WorkorderTransfer`  ;  \n" +
                "CREATE PROCEDURE `Sproc_WorkorderTransfer`(          \n" +
                "        IN fromWOOPID INT,          \n" +
                "        IN toWOOPID INT,          \n" +
                "        IN transferQty INT,          \n" +
                "        IN description TEXT,          \n" +
                "        IN userID INT          \n" +
                ")  \n" +
                "BEGIN          \n" +
                " DECLARE insertedWoTransID INT(11);          \n" +
                " DECLARE lvfromOpName VARCHAR(250);          \n" +
                " DECLARE lvfromWoNumber VARCHAR(250);          \n" +
                " DECLARE lvtoOpName VARCHAR(250);          \n" +
                " DECLARE lvtoWoNumber VARCHAR(250);          \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION          \n" +
                "BEGIN          \n" +
                "	ROLLBACK;          \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS `tempWTE`;          \n" +
                "	DROP TEMPORARY TABLE IF EXISTS `tempOPID`;	          \n" +
                "	DROP TEMPORARY TABLE IF EXISTS `tempError`;          \n" +
                "	RESIGNAL;          \n" +
                "END;          \n" +
                "  \n" +
                "DROP TEMPORARY TABLE IF EXISTS `tempWTE`;          \n" +
                "DROP TEMPORARY TABLE IF EXISTS `tempOPID`;          \n" +
                "DROP TEMPORARY TABLE IF EXISTS `tempError`;          \n" +
                "  \n" +
                "CREATE TEMPORARY TABLE `tempError` (id TINYINT(1));          \n" +
                " # Get from and to work order operation details          \n" +
                " SELECT wo.woID, wo.opID, wo.opNumber INTO @fromWOID, @fromOPID, @fromOPNumber FROM workorder_operation wo WHERE IFNULL(wo.isDeleted, 0) = 0 AND wo.woOPID = fromWOOPID;          \n" +
                " SELECT wo.woID, wo.opID INTO @toWOID, @toOPID FROM workorder_operation wo WHERE IFNULL(wo.isDeleted, 0) = 0 AND wo.woOPID = toWOOPID;          \n" +
                "  \n" +
                " # Check if any operation is running or not          \n" +
                " CREATE TEMPORARY TABLE `tempWTE`          \n" +
                " SELECT op.opID, op.opName, op.opNumber, CONCAT(emp.firstName , ' ' , emp.lastName) AS fullName           \n" +
                " FROM Workorder_Trans_Empinout AS wte          \n" +
                " LEFT OUTER JOIN operations AS op ON wte.opID = op.opID AND op.deletedAt IS NULL          \n" +
                " LEFT OUTER JOIN employees AS emp ON wte.employeeID = emp.id AND emp.deletedAt IS NULL           \n" +
                " WHERE wte.deletedAt IS NULL AND wte.woID = @fromWOID AND wte.checkoutTime IS NULL;          \n" +
                "  \n" +
                " # If operation is running then return          \n" +
                " IF EXISTS (SELECT 1 FROM tempWTE) THEN          \n" +
                "	SELECT 'operation' AS err;          \n" +
                "    SELECT * FROM `tempWTE`;          \n" +
                "	INSERT INTO tempError VALUES (1);          \n" +
                " ELSE          \n" +
                "	# Check if work order is track by serial number          \n" +
                "    SELECT COUNT(1) INTO @woTrackBySerial FROM Workorder AS wo WHERE wo.isOperationTrackBySerialNo = 1 AND woID = @fromWOID AND IFNULL(wo.isDeleted, 0) = 0 LIMIT 1;          \n" +
                "  \n" +
                "	IF (@woTrackBySerial = 1) THEN          \n" +
                "  \n" +
                "        # Get all operations which are followed by current terminated operation          \n" +
                "        CREATE TEMPORARY TABLE `tempOPID`          \n" +
                "        SELECT wo.opID FROM Workorder_Operation AS wo WHERE wo.woID = @fromWOID AND wo.opNumber >= @fromOPNumber AND IFNULL(wo.isDeleted, 0) = 0;          \n" +
                "        # Check total serial numbers which are assigned to current terminated and following operations          \n" +
                "        SELECT IFNULL(COUNT(ws.serialNo),0)  INTO @serialCount FROM Workorder_SerialMst AS ws          \n" +
                "        WHERE ws.woID = @fromWOID AND IFNULL(ws.isTransferred, 0) = 0          \n" +
                "        AND ws.currStatus IN ('1','3','5') AND IFNULL(ws.isDeleted, 0) = 0 AND          \n" +
                "        ws.curropID IN (SELECT opID FROM tempOPID);          \n" +
                "  \n" +
                "        # If total serial number and transfer qty do not match then return          \n" +
                "        IF (@serialCount <> transferQty) THEN          \n" +
                "			SELECT 'serialcount' AS err;          \n" +
                "            SELECT @serialCount AS serialCount;          \n" +
                "			INSERT INTO tempError VALUES (1);               \n" +
                "        END IF;          \n" +
                "	END IF;              \n" +
                " END IF;          \n" +
                "IF NOT EXISTS(SELECT 1 FROM `tempError`) THEN          \n" +
                "	START TRANSACTION;          \n" +
                "  \n" +
                "    # Insert entry into work order transfer table          \n" +
                "    INSERT INTO `workorder_transfer` (`fromWOID`, `fromOPID`, `fromWOOPID`, `toWOID`, `toOPID`, `toWOOPID`, `transferDate`, `transferQty`,          \n" +
                "										`description`, `createdAt`, `createdBy`, `isDeleted`)          \n" +
                "    VALUES (@fromWOID, @fromOPID, fromWOOPID, @toWOID, @toOPID, toWOOPID, fun_DatetimetoUTCDateTime(), transferQty,          \n" +
                "		description,fun_DatetimetoUTCDateTime(), userID, 0);          \n" +
                "    SET	insertedWoTransID = LAST_INSERT_ID();		          \n" +
                "  \n" +
                "	# Update from work order status to 'Under Termination'          \n" +
                "    UPDATE Workorder SET woStatus = 6 , woSubStatus = 6 , updatedAt =  fun_DatetimetoUTCDateTime(), updatedBy = userID WHERE woID = @fromWOID AND IFNULL(isDeleted, 0) = 0;          \n" +
                "    # Update from work order reference to work order and update build qty          \n" +
                "    UPDATE Workorder SET terminateWOID = @fromWOID, buildQty = (IFNULL(buildQty,0) + transferQty), updatedAt =  fun_DatetimetoUTCDateTime(), updatedBy = userID WHERE woID = @toWOID AND IFNULL(isDeleted, 0) = 0;          \n" +
                "  \n" +
                "    # Update is terminated flag for current terminated operation          \n" +
                "    UPDATE workorder_operation SET isTerminated = 1, terminateDate = fun_DatetimetoUTCDateTime(), updatedAt =  fun_DatetimetoUTCDateTime(), updatedBy = userID          \n" +
                "    WHERE woOPID = fromWOOPID AND IFNULL(isDeleted, 0) = 0;          \n" +
                "  \n" +
                "    # Change status to 'Terminated' for follwing operations of current terminated operation          \n" +
                "    UPDATE Workorder_Operation SET opStatus = 2, updatedAt =  fun_DatetimetoUTCDateTime(), updatedBy = userID WHERE woID = @fromWOID AND opNumber > @fromOPNumber AND IFNULL(isDeleted, 0) = 0;          \n" +
                "  \n" +
                "    IF (@woTrackBySerial = 1) THEN              \n" +
                "  \n" +
                "		# Insert all serial numbers from from work order into to work order          \n" +
                "        INSERT INTO Workorder_SerialMst (woID, PrefixorSuffix, PreSuffix, dateCode, noofDigit, SerialNo, curropID, currStatus, isDeleted,          \n" +
                "		createdAt, createdBy, serialType, refSerialID)          \n" +
                "        SELECT @toWOID woID, ws.PrefixorSuffix, ws.PreSuffix, ws.dateCode, ws.noofDigit, ws.SerialNo, NULL curropID, 'Idle' currStatus,           \n" +
                "        0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, userID createdBy, ws.serialType, ws.id refSerialID          \n" +
                "		FROM Workorder_SerialMst ws WHERE ws.woID = @fromWOID AND IFNULL(ws.isTransferred, 0) = 0 AND ws.currStatus IN ('1','3','5') AND IFNULL(ws.isDeleted, 0) = 0 AND          \n" +
                "		ws.curropID IN (SELECT opID FROM tempOPID);          \n" +
                "  \n" +
                "        # Update is transferred flag to all from work order serial numbers          \n" +
                "        UPDATE Workorder_SerialMst ws SET ws.isTransferred = 1, ws.updatedAt =  fun_DatetimetoUTCDateTime(), ws.updatedBy = userID          \n" +
                "		WHERE ws.woID = @fromWOID AND IFNULL(ws.isTransferred, 0) = 0 AND ws.currStatus IN ('1','3','5') AND IFNULL(ws.isDeleted, 0) = 0 AND          \n" +
                "		ws.curropID IN (SELECT opID FROM tempOPID);          \n" +
                "    END IF;          \n" +
                "	/* [S] - Add Time line log for work order operation terminate & transfer */            \n" +
                "	SELECT woop.opName , (SELECT woNumber FROM workorder WHERE woID = woop.woID)          \n" +
                "		INTO lvfromOpName,lvfromWoNumber          \n" +
                "	FROM workorder_operation woop           \n" +
                "	WHERE woOPID = 	fromWOOPID ;          \n" +
                "  \n" +
                "	SELECT woop.opName , (SELECT woNumber FROM workorder WHERE woID = woop.woID)          \n" +
                "		INTO lvtoOpName,lvtoWoNumber          \n" +
                "	FROM workorder_operation woop           \n" +
                "	WHERE woOPID = 	toWOOPID ;          \n" +
                "  \n" +
                "	SELECT CONCAT(firstName,\" \",lastName),EmployeeID INTO @lvempName,@lvEmployeeID          \n" +
                "	FROM users WHERE id=userID AND deletedAt IS NULL;          \n" +
                "  \n" +
                "	SET @lvEventTitle = CONCAT(\"Terminate and transfer quantity from one work order operation to another work order operation\");            \n" +
                "	SET @lvEventDescription = CONCAT(\"Terminate and transfer quantity \\\"\",transferQty,\"\\\" from operation \\\"\",lvfromOpName,\"\\\" of work order \",lvfromWoNumber,          \n" +
                "		\" to operation \\\"\",lvtoOpName,\"\\\" of work order \",lvtoWoNumber,\" by \" ,@lvempName,\".\");	            \n" +
                "	CALL Sproc_AddToTimeline(userID,@lvEventTitle,@lvEventDescription,'workorder_transfer',insertedWoTransID,5.07,CONCAT('task/tasklist/travel/',fromWOOPID,\"/\",@lvEmployeeID),userID,1);  /* 1 = CREATE */            \n" +
                "	/* [E] - Add Time line log for work order operation terminate & transfer */            \n" +
                "    COMMIT;          \n" +
                "    SELECT 1 AS `status`;          \n" +
                "END IF;	          \n" +
                "DROP TEMPORARY TABLE IF EXISTS `tempWTE`;          \n" +
                "DROP TEMPORARY TABLE IF EXISTS `tempOPID`;          \n" +
                "DROP TEMPORARY TABLE IF EXISTS `tempError`;          \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2651,'2.00','V1','Sproc_WorkorderTransfer- Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2651:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "DROP  PROCEDURE IF EXISTS `Sproc_GetWorkorderEmployeeDetailsByEmpCode`  ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorderEmployeeDetailsByEmpCode`(                                        \n" +
                "    IN pcodeDigest VARCHAR(1000),                                    \n" +
                "    IN pisUserAdmin INT(11))  \n" +
                "BEGIN                              \n" +
                "  \n" +
                "DECLARE whereClause1 VARCHAR(255) ;                                  \n" +
                "DECLARE whereClause2 VARCHAR(255) ;                         \n" +
                "  \n" +
                "/************************ Save Employee Details in Temp Table ************************************/                        \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_employeedetails;                                \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_employeedetails (                                \n" +
                "		employeeID INT(11),		firstName VARCHAR(255),		lastName VARCHAR(255),                                \n" +
                "		profileImg VARCHAR(255),	deptName VARCHAR(255),		titleName VARCHAR(255)                                \n" +
                ");                                \n" +
                "INSERT INTO temp_sproc_employeedetails                           \n" +
                "SELECT emp.id, emp.firstname, emp.lastname,                                 \n" +
                "			emp.profileimg, dep.deptName, gc.gencCategoryName                                \n" +
                "FROM employees emp                                \n" +
                "LEFT JOIN employee_department empdep ON emp.id = empdep.employeeID AND (empdep.deletedAt IS NULL AND empdep.isdefault = 1)                          \n" +
                "LEFT JOIN department dep ON empdep.departmentID = dep.deptID AND dep.deletedAt IS NULL                                \n" +
                "LEFT JOIN genericcategory gc ON gc.gencCategoryID = empdep.titleID AND (gc.deletedAt IS NULL)                         \n" +
                "WHERE emp.codeDigest=pcodeDigest AND emp.isActive = 1;                            \n" +
                "/************************ Create Temp Table for Workorder Details ************************************/                        \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workorderdetails;                                \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workorderdetails (                                \n" +
                "		woID INT(11),			woNumber VARCHAR(255),			woVersion VARCHAR(255),                                \n" +
                "		buildQty INT(11),		woStatus INT(100),			isClusterApplied VARCHAR(255),                                \n" +
                "		isStopWorkorder INT(11),		createdAt DATETIME,                                \n" +
                "		mfgPN VARCHAR(100),		PIDCode VARCHAR(50),			rev VARCHAR(10),                                \n" +
                "		nickName VARCHAR(50),		liveVersion VARCHAR(100),		imageURL VARCHAR(1000),                                \n" +
                "		documentPath VARCHAR(500),  	isCustom INT(1),           \n" +
                "		rohsStatus VARCHAR(50),		rohsIcon VARCHAR(255),			woAllStandardsWithClass VARCHAR(10000),                                \n" +
                "		poQty INT(11),			poNumber VARCHAR(1000), 		partID INT(11),              \n" +
                "		isAssigned INT(11)	, woSubStatus INT(100)                                 \n" +
                ");                                      \n" +
                "/************************ save all workorder details in temp table for further use ************************************/                                  \n" +
                "INSERT INTO temp_sproc_workorderdetails                                \n" +
                "SELECT 	wo.woID,		wo.woNumber,	 							wo.woVersion,                                \n" +
                "	wo.buildQty,		wo.woStatus,								wo.isClusterApplied,                                 \n" +
                "	wo.isStopWorkorder,							wo.createdAt,                                \n" +
                "	c.mfgPN, 		c.PIDCode, 								c.rev,                                 \n" +
                "	c.nickName,		c.liveVersion,								c.imageURL,                                \n" +
                "	c.documentPath,  	c.isCustom,          \n" +
                "	rohs.name, 		rohs.rohsIcon,								NULL,                                \n" +
                "	NULL,                   NULL,									wo.partID,              \n" +
                "	(SELECT COUNT(*) FROM workorder_operation_employee woemp WHERE woemp.woID = wo.woID AND woemp.deletedAt IS NULL                    \n" +
                "		AND woemp.employeeID IN (SELECT tempDet.employeeID FROM temp_sproc_employeedetails tempDet)),  \n" +
                "        wo.woSubStatus  \n" +
                "FROM workorder wo                                \n" +
                "LEFT JOIN component c ON wo.partID = c.id                                 \n" +
                "LEFT JOIN rfq_rohsmst rohs ON wo.RoHSStatusID=rohs.id                                 \n" +
                "WHERE c.deletedAt IS NULL AND rohs.deletedAt IS NULL AND wo.deletedAt IS NULL AND wo.woStatus IN (1, 6);                    \n" +
                "/************************ 1. Get all employee details ************************************/                                  \n" +
                "SELECT * FROM temp_sproc_employeedetails;                                \n" +
                "/************************ 1. Get all employee details ************************************/                                  \n" +
                "/************************ save all salesorder details in temp table for further use ************************************/                         \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_workordersalesorderdetails;                                \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_workordersalesorderdetails (                                \n" +
                "		poQty INT(11),		refPONumber VARCHAR(10000), 		woID INT(11)                                \n" +
                ");                                \n" +
                "INSERT INTO temp_sproc_workordersalesorderdetails                                \n" +
                "SELECT SUM(poQty), GROUP_CONCAT(refPONumber), wosd.woID                                 \n" +
                "FROM workorder_salesorder_details wosd                                 \n" +
                "WHERE wosd.deletedAt IS NULL                                 \n" +
                "AND wosd.woID IN (SELECT tempWO.woID FROM temp_sproc_workorderdetails tempWO)                                \n" +
                "GROUP BY wosd.woID;                           \n" +
                "/************************ save all certificate details in temp table for further use ************************************/                         \n" +
                "DROP TEMPORARY TABLE IF EXISTS temp_sproc_certificatedetails;                                \n" +
                "	CREATE TEMPORARY TABLE temp_sproc_certificatedetails (                                \n" +
                "		woAllStandardsWithClass VARCHAR(10000),		woID INT(11)                                \n" +
                ");                                \n" +
                "INSERT INTO temp_sproc_certificatedetails                                \n" +
                "SELECT GROUP_CONCAT(cs.fullName ,' ' , CASE WHEN wc.classIDs IS NULL THEN ''                                    \n" +
                "	ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,'')) FROM standard_class WHERE classID = wc.classIDs) END                                    \n" +
                "	ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@') AS woAllStandardsWithClass, tempWO.woID                                 \n" +
                "	FROM temp_sproc_workorderdetails tempWO                                \n" +
                "	LEFT JOIN workorder_certification wc ON wc.woID = tempWO.woID AND wc.deletedAt IS NULL                                \n" +
                "	LEFT JOIN certificate_standards cs ON cs.certificateStandardID = wc.certificateStandardID AND cs.deletedAt IS NULL               \n" +
                "GROUP BY tempWO.woID;                \n" +
                "/************************ 2.1 Update details in workorder details from certificate tables ************************************/                                  \n" +
                "UPDATE temp_sproc_workorderdetails tempWO1,                                 \n" +
                "(SELECT * FROM temp_sproc_certificatedetails) AS result                                \n" +
                "SET tempWO1.woAllStandardsWithClass = result.woAllStandardsWithClass              \n" +
                "WHERE tempWO1.woID = result.woID;                                \n" +
                "/************************ 2.2 Update details in workorder details from sales order tables ************************************/                                  \n" +
                "UPDATE temp_sproc_workorderdetails tempWO1,                                \n" +
                "(SELECT * FROM temp_sproc_workordersalesorderdetails) AS result1                                \n" +
                "SET tempWO1.poQty = result1.poQty,                                \n" +
                "tempWO1.poNumber = result1.refPONumber                                \n" +
                "WHERE tempWO1.woID = result1.woID;                                \n" +
                "/************************ 2. Get all workroder list ************************************/                                  \n" +
                "/************************ If user is not admin than whereclause ************************************/                              \n" +
                "IF pisUserAdmin = 1 THEN                                \n" +
                "	SET whereClause1 = '';                                  \n" +
                "ELSE                                \n" +
                "	SET whereClause1 = ' AND isAssigned > 0';                                \n" +
                "END IF;                       \n" +
                "SET @SQLStatement1 = CONCAT(\"SELECT * FROM temp_sproc_workorderdetails where 1=1 \", whereClause1);                                                            \n" +
                "PREPARE query1 FROM @SQLStatement1;                                                            \n" +
                "EXECUTE query1;                                                            \n" +
                "DEALLOCATE PREPARE query1;                                 \n" +
                "/************************ 2. Get all workroder list ************************************/                                  \n" +
                "/************************ 3. Get all active operation list ************************************/                                  \n" +
                "IF pisUserAdmin = 1 THEN                                \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';                                  \n" +
                "ELSE                                \n" +
                "	SET whereClause2 = ' AND wte.employeeID IN (SELECT employeeID FROM temp_sproc_employeedetails)';                                \n" +
                "END IF;                             \n" +
                "  \n" +
                "SET @SQLStatement2 = CONCAT(\"SELECT wte.woTransinoutID, wte.woID, wte.woOPID,         \n" +
                "fun_ConvertUTCDatetimeToDataKeyTimeZone(wte.checkinTime) checkinTime, wte.isPaused,                                 \n" +
                "wtep.woTransemppausedID,fun_getwoAvailableRackDetails(wte.woOPID,wte.woID) totalAvailable,        \n" +
                "fun_ConvertUTCDatetimeToDataKeyTimeZone(wtep.pausedTime) pausedTime,                                 \n" +
                "woop.opNumber, woop.opName, woop.opStatus, woop.opVersion, woop.isStopOperation, woop.isTeamOperation                                \n" +
                "FROM workorder_trans_empinout wte                                \n" +
                "LEFT JOIN workorder_operation woop ON woop.woOPID = wte.woOPID AND woop.deletedAt IS NULL                                 \n" +
                "LEFT JOIN workorder_trans_emp_pausedet wtep ON wtep.woTransinoutID = wte.woTransinoutID  AND wtep.resumeTime IS NULL AND wtep.deletedAt IS NULL                                \n" +
                "WHERE wte.deletedAt IS NULL                                 \n" +
                "AND wte.checkoutTime IS NULL                                 \n" +
                " \", whereClause2, \" GROUP BY wte.woTransinoutID\");                                                        \n" +
                " /************************ 3. Get all active operation list ************************************/                                  \n" +
                "  \n" +
                "PREPARE query2 FROM @SQLStatement2;                                         \n" +
                "EXECUTE query2;                                                            \n" +
                "DEALLOCATE PREPARE query2;                                  \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2652,'2.00','V1','Sproc_GetWorkorderEmployeeDetailsByEmpCode- Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2652:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetTravelerPageDetails`  ;  \n" +
                "CREATE PROCEDURE `Sproc_GetTravelerPageDetails`(                                                  \n" +
                "    IN pWOOPID INT(11),                                        \n" +
                "    IN pEmployeeID INT(11)                                        \n" +
                "    )  \n" +
                "BEGIN                                         \n" +
                "	SELECT woID INTO @pwoID FROM workorder_operation WHERE WOOPID = pWOOPID AND deletedAt IS NULL;                                        \n" +
                "  \n" +
                "	/**************************************** 1.Get Current Work Order Operation Details *********************************************/                                        \n" +
                "	SELECT                                         \n" +
                "	`woop`.`woOPID`,                                         \n" +
                "	`woop`.`woID`,                                         \n" +
                "	`woop`.`opID`,                                         \n" +
                "	`woop`.`opName`,                                         \n" +
                "	`woop`.`opNumber`,                                         \n" +
                "	`woop`.`opStatus`,                                         \n" +
                "	`woop`.`opDoes`,                                         \n" +
                "	`woop`.`opDonts`,                                         \n" +
                "	`woop`.`opDescription`,                                         \n" +
                "	`woop`.`opWorkingCondition`,                                         \n" +
                "	`woop`.`opManagementInstruction`,                                         \n" +
                "	`woop`.`opDeferredInstruction`,                                         \n" +
                "	`woop`.`colorCode`,                                         \n" +
                "	`woop`.`qtyControl`,                                         \n" +
                "	`woop`.`isIssueQty`,                                         \n" +
                "	`woop`.`opVersion`,                                         \n" +
                "	`woop`.`isRework`,                                         \n" +
                "	`woop`.`cleaningType`,                                         \n" +
                "	`woop`.`isTeamOperation`,                                         \n" +
                "	`woop`.`isStopOperation`,                                         \n" +
                "	`woop`.`firstPcsModel`,                                         \n" +
                "	`woop`.`firstPcsConclusion`,                                         \n" +
                "	`woop`.`firstPcsStatus`,                                         \n" +
                "	`woop`.`isPreProgrammingComponent`,                                       \n" +
                "	`woop`.`isMoveToStock`,                                      \n" +
                "	`woop`.`isPlacementTracking`,                                \n" +
                "	`woop`.`isTrackBySerialNo`,                                       \n" +
                "	`woop`.`isAllowFinalSerialMapping`,                                            \n" +
                "	`woop`.`isLoopOperation`,                                            \n" +
                "	`woop`.`refLoopWOOPID`,              \n" +
                "	`woop`.`isAllowBypassQty`,           \n" +
                "	`woop`.`isAllowMissingPartQty`,                                         \n" +
                "	`opType`.`gencCategoryName` AS `operationType`,                                         \n" +
                "	`woOPCluster`.`clusterID` AS clusterID,                                  \n" +
                "	`woCluster`.`isParellelOperation` AS `isParellelOperation`,                                        \n" +
                "	`wo`.`woID` AS `woID`,                                         \n" +
                "	`wo`.`woNumber` AS `woNumber`,                                         \n" +
                "	`wo`.`buildQty` AS `buildQty`,                                         \n" +
                "	`wo`.`RoHSStatusID` AS `RoHSStatusID`,                                         \n" +
                "	`wo`.`isNoClean` AS `isNoClean`,                                         \n" +
                "	`wo`.`isWatersoluble` AS `isWatersoluble`,                                         \n" +
                "	`wo`.`woVersion` AS `woVersion`,                                         \n" +
                "	`wo`.`woStatus` AS `woStatus`,     \n" +
                "    `wo`.`woSubStatus` AS `woSubStatus`,     \n" +
                "	`wo`.`isOperationTrackBySerialNo` AS `isOperationTrackBySerialNo`,                                         \n" +
                "	`wo`.`isStopWorkorder` AS `isStopWorkorder`,                                           \n" +
                "	`wo`.`partID` AS `partID`,            \n" +
                "	`wo`.`isRackTrackingRequired` AS isRackTrackingRequired,                                              \n" +
                "	 (SELECT terminateWOOPID FROM workorder WHERE terminateWOID IN (SELECT woID FROM workorder WHERE woID=`wo`.woID)) AS terminateWOOPID,                            \n" +
                "	`componentAssembly`.`mfgPN` AS `mfgPN`,                          \n" +
                "	`componentAssembly`.`mfgPNDescription` AS `mfgPNDescription`,                                         \n" +
                "	`componentAssembly`.`PIDCode` AS `PIDCode`,                                         \n" +
                "	`componentAssembly`.`rev` AS `rev`,                                         \n" +
                "	`componentAssembly`.`nickName` AS `nickName`,             \n" +
                "	`componentAssembly`.`isCustom` ,                        \n" +
                "	`ro`.rohsIcon,                                  \n" +
                "	`ro`.`name` AS rohsStatus,        \n" +
                "	(SELECT GROUP_CONCAT(cs.fullName ,' ' , CASE WHEN wc.classIDs IS NULL THEN ''                                  \n" +
                "							ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,''))                   \n" +
                "							FROM standard_class WHERE classID = wc.classIDs) END                                  \n" +
                "							ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@')								                  \n" +
                "				   FROM `workorder_certification` wc                                    \n" +
                "					   JOIN certificate_standards cs ON  wc.certificateStandardID = cs.certificateStandardID                                    \n" +
                "				   WHERE wc.deletedAt IS NULL AND wc.woID = `woop`.`woID`) AS `wocerti`                                            \n" +
                "	FROM `workorder_operation` AS `woop`                        \n" +
                "  \n" +
                "	LEFT OUTER JOIN `workorder_operation_cluster` AS `woOPCluster`                                         \n" +
                "	ON `woop`.`woOPID` = `woOPCluster`.`woOPID`                                         \n" +
                "	AND `woOPCluster`.`deletedAt` IS NULL                                         \n" +
                "  \n" +
                "	LEFT OUTER JOIN `workorder_cluster` AS `woCluster`                                         \n" +
                "	ON `woOPCluster`.`clusterID` = `woCluster`.`clusterID`                                         \n" +
                "	AND `woCluster`.`deletedAt` IS NULL                                         \n" +
                "  \n" +
                "	LEFT OUTER JOIN `workorder` AS `wo`                                        \n" +
                "	ON `woop`.`woID` = `wo`.`woID`                                         \n" +
                "	AND `wo`.`deletedAt` IS NULL                                         \n" +
                "  \n" +
                "	LEFT OUTER JOIN `component` AS `componentAssembly`                                         \n" +
                "	ON `wo`.`partID` = `componentAssembly`.`id`                                         \n" +
                "	AND `componentAssembly`.`deletedAt` IS NULL                            \n" +
                "  \n" +
                "	LEFT JOIN rfq_rohsmst ro                               \n" +
                "	ON (componentAssembly.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.deletedAt IS NULL)                                             \n" +
                "  \n" +
                "	LEFT OUTER JOIN `genericcategory` AS `opType`                                         \n" +
                "	ON `woop`.`operationTypeID` = `opType`.`gencCategoryID`                                         \n" +
                "	AND `opType`.`deletedAt` IS NULL                                         \n" +
                "	WHERE (`woop`.`deletedAt` IS NULL AND `woop`.`woOPID` = pWOOPID);                                        \n" +
                "	/**************************************** 1.Get Current Work Order Operation Details *********************************************/                                        \n" +
                "  \n" +
                "	/************************************** 2.Get Employee Details *****************************************/                                        \n" +
                "	SELECT                                         \n" +
                "	`Employee`.`id`,                                         \n" +
                "	`Employee`.`firstName`,                                         \n" +
                "	`Employee`.`lastName`,                                          \n" +
                "	`Employee`.`initialName`,                                         \n" +
                "	`Employee`.`profileImg`,                                         \n" +
                "	`dept`.`deptName` AS `deptName`,                                        \n" +
                "	`empTitle`.`gencCategoryName` AS `titleName`                                        \n" +
                "	FROM `employees` AS `Employee`                                         \n" +
                "  \n" +
                "	LEFT OUTER JOIN `employee_department` AS `empDept`                                         \n" +
                "	ON `Employee`.`id` = `empDept`.`employeeID`                                         \n" +
                "	AND (`empDept`.`deletedAt` IS NULL AND `empDept`.`isDefault` = TRUE)                                         \n" +
                "  \n" +
                "	LEFT OUTER JOIN `department` AS `dept`                                         \n" +
                "	ON `empDept`.`departmentID` = `dept`.`deptID`                                         \n" +
                "	AND `dept`.`deletedAt` IS NULL                                         \n" +
                "  \n" +
                "	LEFT OUTER JOIN `genericcategory` AS `empTitle`                                         \n" +
                "	ON `empDept`.`titleID` = `empTitle`.`gencCategoryID`                                         \n" +
                "	AND `empTitle`.`deletedAt` IS NULL                                         \n" +
                "  \n" +
                "	WHERE (`Employee`.`deletedAt` IS NULL AND (`Employee`.`id` = pEmployeeID AND `Employee`.`isDeleted` = FALSE));                                        \n" +
                "	/****************************************** Get 2.Employee Details *******************************************/                                        \n" +
                "  \n" +
                "	/************************************** 3.Get Workorder Operation List ***********************************************/                                        \n" +
                "	SELECT                                         \n" +
                "		a.`woID` AS `woID`,                                         \n" +
                "		a.`opID` AS `opID`,                                         \n" +
                "		a.`woOPID` AS `woOPID`,                                         \n" +
                "		a.`opNumber` AS `opNumber`,                                         \n" +
                "		a.`opName` AS `opName`,                                         \n" +
                "		a.`cleaningType` AS `cleaningType`,                                           \n" +
                "		a.`isRework` AS `isRework`,                                         \n" +
                "		a.`operationTypeID` AS `operationTypeID`,                                            \n" +
                "		a.`colorCode` AS `colorCode`,                                                       \n" +
                "		a.`isStopOperation` AS `isStopOperation`,                                              \n" +
                "		a.`tabLimitAtTraveler` AS `tabLimitAtTraveler`,                                  \n" +
                "		b.clusterID AS clusterID,                                  \n" +
                "		(SELECT isParellelOperation FROM workorder_cluster WHERE clusterID=b.clusterID AND deletedAt IS NULL) isParellelOperation,                                    \n" +
                "		(SELECT COUNT(*) FROM workorder_operation_employee WHERE woid=@pwoID AND woopid=a.woopid AND employeeID=pEmployeeID AND deletedAt IS NULL) operationAssignedCount                                    \n" +
                "	FROM workorder_operation a                                        \n" +
                "	LEFT JOIN workorder_operation_cluster b                                       \n" +
                "	ON b.woopid = a.woopid AND b.deletedAt IS NULL                                      \n" +
                "	WHERE a.deletedAt IS NULL AND a.woID = @pwoID;                                         \n" +
                "	/**************************************** 3.Get Workorder Operation List *********************************************/                                        \n" +
                "  \n" +
                "	/***************************************** 4.Get Workorder Hold UnHold Details ********************************************/	                                        \n" +
                "	SELECT                                         \n" +
                "	`woTransHold`.`reason` AS `reason`,                                         \n" +
                "	`woTransHold`.`resumeReason` AS `resumeReason`,                                         \n" +
                "	(SELECT fun_ConvertUTCDatetimeToDataKeyTimeZone(`woTransHold`.`startDate`)) AS `woStartDate`,                                         \n" +
                "	`woTransHold`.`holdEmployeeId` AS `woHoldEmployeeId`,                                         \n" +
                "	`woTransHoldEmployee`.`firstName` AS `woHoldEmployeeFirstName`,                                         \n" +
                "	`woTransHoldEmployee`.`lastName` AS `woHoldEmployeeLastName`,                                         \n" +
                "	`woTransHoldEmployee`.`initialName` AS `woHoldBy`                                        \n" +
                "	FROM `workorder_trans_hold_unhold` AS `woTransHold`                                         \n" +
                "	LEFT OUTER JOIN `employees` AS `woTransHoldEmployee`                                         \n" +
                "	ON `woTransHold`.`holdEmployeeId` = `woTransHoldEmployee`.`id`                                         \n" +
                "	AND `woTransHoldEmployee`.`deletedAt` IS NULL                                         \n" +
                "	WHERE `woTransHold`.`woID` = @pwoID AND (`woTransHold`.`deletedAt` IS NULL                                         \n" +
                "	AND `woTransHold`.`endDate` IS NULL);                                        \n" +
                "	/***************************************** 4.Get Workorder Hold UnHold Details ********************************************/	                                        \n" +
                "  \n" +
                "	/***************************************** 5.Get Operation Hold UnHold Details ********************************************/	                                        \n" +
                "	SELECT                                          \n" +
                "	`woOPTransHold`.`woTransOpHoldUnholdId` AS `woTransOpHoldUnholdId`,                                         \n" +
                "	`woOPTransHold`.`reason` AS `reason`,                                         \n" +
                "	`woOPTransHold`.`resumeReason` AS `resumeReason`,                                         \n" +
                "	(SELECT fun_ConvertUTCDatetimeToDataKeyTimeZone(`woOPTransHold`.`startDate`))  AS `opStartDate`,                                         \n" +
                "	(SELECT fun_ConvertUTCDatetimeToDataKeyTimeZone(`woOPTransHold`.`endDate`)) AS `opEndDate`,                                         \n" +
                "	`woOPTransHold`.`holdEmployeeId` AS `woopHoldEmployeeId`,                                        \n" +
                "	`woOPTransHoldEmployee`.`firstName` AS `woopHoldEmployeesFirstName`,                                         \n" +
                "	`woOPTransHoldEmployee`.`lastName` AS `woopHoldEmployeesLastName`,                                         \n" +
                "	`woOPTransHoldEmployee`.`initialName` AS `opHoldBy`                                        \n" +
                "	FROM `workorder_trans_operation_hold_unhold` AS `woOPTransHold`                                         \n" +
                "	LEFT OUTER JOIN `employees` AS `woOPTransHoldEmployee`                                         \n" +
                "	ON `woOPTransHold`.`holdEmployeeId` = `woOPTransHoldEmployee`.`id`                                         \n" +
                "	AND `woOPTransHoldEmployee`.`deletedAt` IS NULL                                         \n" +
                "	WHERE `woOPTransHold`.`woOPID` = pWOOPID                                         \n" +
                "	AND (`woOPTransHold`.`deletedAt` IS NULL                                         \n" +
                "	AND `woOPTransHold`.`endDate` IS NULL);                                        \n" +
                "	/***************************************** 5.Get Operation Hold UnHold Details ********************************************/	                                        \n" +
                "  \n" +
                "	/****************************************** Get WO Transaction With 6.Workorder Transaction, 7.Employee CheckIn-CheckOut and Pause/Resume Details, 8.timerDetails and 9.CurrentTimerDetails *******************************************/                                        \n" +
                "	CALL Sproc_GetTravelerLatestDetails (pWOOPID, pEmployeeID, @pWOID );                                        \n" +
                "	/****************************************** Get WO Transaction With 6.Workorder Transaction,7.Employee CheckIn-CheckOut and Pause/Resume Details, 8.timerDetails and 9.CurrentTimerDetails *******************************************/                                        \n" +
                "  \n" +
                "  /****************************************** 6.Get Sales order detail *******************************************/                              \n" +
                "	SELECT  sod.id,som.salesordernumber,sod.refSalesOrderID,som.poNumber,sod.lineID,sod.qty,sod.mrpqty,wsd.poQty FROM workorder_salesorder_details wsd             \n" +
                "	LEFT JOIN salesorderdet sod ON wsd.salesOrderDetailID=sod.id AND sod.deletedAt IS NULL            \n" +
                "        LEFT JOIN salesordermst som ON som.id=sod.refSalesOrderID AND som.deletedAt IS NULL            \n" +
                "	WHERE wsd.woid=@pWOID AND wsd.deletedAt IS NULL;            \n" +
                "	/****************************************** 6.Get Sales order detail  *******************************************/              \n" +
                "  \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2653,'2.00','V1','Sproc_GetTravelerPageDetails- Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;


        case 2653:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkOrderDetailForElastic` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkOrderDetailForElastic`(	                                          \n" +
                "	IN pwoID INT(11)                                            \n" +
                "    )  \n" +
                "BEGIN                                          \n" +
                "  select wo.woID        \n" +
                "	,woNumber        \n" +
                "    ,wo.woVersion        \n" +
                "    ,wo.woSubStatus        \n" +
                "    ,wo.partID        \n" +
                "    ,com.PIDCode        \n" +
                "    ,com.mfgPN        \n" +
                "    ,com.nickName        \n" +
                "    ,wo.buildQty        \n" +
                "    ,mfg.mfgCode        \n" +
                "    ,mfg.mfgName        \n" +
                "    ,mfg.isCustOrDisty        \n" +
                "    ,mfg.mfgType        \n" +
                "    ,wo.customerID         \n" +
                "    ,vusalesorderdet.salesOrderNumber        \n" +
                "    ,vusalesorderdet.poNumber        \n" +
                "    ,wo.isHotJob as RushJob        \n" +
                "    ,wo.isStopWorkorder as HoldStatus        \n" +
                "    ,CASE WHEN wo.isStopWorkorder = 1 THEN        \n" +
                "		(select reason from workorder_trans_hold_unhold where woID = wo.woID and endDate is null)           \n" +
                "	ELSE \"\"        \n" +
                "	END as HoldReason        \n" +
                "from workorder as wo        \n" +
                "	left join mfgcodemst mfg on wo.customerID = mfg.id        \n" +
                "	left join component com on wo.partID = com.id        \n" +
                "	LEFT OUTER JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID        \n" +
                "where IFNULL(wo.isDeleted , 0) = 0 and wo.woID = IFNULL(pwoID, wo.woID);        \n" +
                "  \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2654,'2.00','V1','Sproc_GetWorkOrderDetailForElastic- Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2654:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetECORequest`;  \n" +
                "CREATE PROCEDURE `Sproc_GetECORequest`(        \n" +
                "	IN ppageIndex INT(11),        \n" +
                "	IN precordPerPage INT(11),        \n" +
                "	IN pOrderBy VARCHAR(255),        \n" +
                "    IN pWhereClause VARCHAR(16383),        \n" +
                "    IN pRequestType INT(11),        \n" +
                "    IN pPartID INT(11),        \n" +
                "    IN pEcoDfmNum LONGTEXT        \n" +
                "    )  \n" +
                "BEGIN        \n" +
                " 	DECLARE pOffset INT(11);        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;        \n" +
                "	DECLARE vTextAngularKeyCode VARCHAR(500);        \n" +
                "     -- get data to manage image/video/link url for text-angular        \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();        \n" +
                "  \n" +
                "	SET @tempquery = CONCAT(\"SELECT er.ecoReqID,er.ecoNumber,er.woID,er.custECONumber,er.FCAECONumber,      \n" +
                "		fun_getTextAngularData(er.reasonForChange, '\",vTextAngularKeyCode,\"') reasonForChange, fun_getTextAngularData(er.description, '\",vTextAngularKeyCode,\"') description,      \n" +
                "        er.initiateBy,er.initiateDate,er.approvalBy, er.approvalDate,er.rejectedBy,er.status,      \n" +
                "        fun_getTextAngularData(er.comments, '\",vTextAngularKeyCode,\"') comments,er.finalStatus,er.finalStatusInit,er.finalStatusDate,      \n" +
                "        fun_getTextAngularData(er.finalStatusReason, '\",vTextAngularKeyCode,\"') finalStatusReason,er.ecoDraftStaus,          \n" +
                "		er.isAllProductConf,er.isFutureProd,er.isTemp,er.opID,er.woOPID,er.fromPartID,er.toPartID,er.ECOImplemetTo,er.requestedWOOPID,          \n" +
                "		er.implemetToWOID,er.closedDate,er.requestType,er.ecoDfmTypeID,er.mountingTypeID,          \n" +
                "        fun_getUserNameByID(er.updatedBy) updatedby,          \n" +
                "		fun_getUserNameByID(er.createdBy) createdby,          \n" +
                "		fun_getUserNameByID(er.deletedBy) deletedby,          \n" +
                "		fun_getRoleByID(er.createByRoleId) createdbyRole,          \n" +
                "		fun_getRoleByID(er.updateByRoleId) updatedbyRole,          \n" +
                "		fun_getRoleByID(er.deleteByRoleId) deletedbyRole,          \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(er.createdAt) createdAt,          \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(er.UpdatedAt) updatedAt,          \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(er.deletedAt) deletedAt,        \n" +
                "        (select count(1) from genericfiles where gencFileOwnerType = 'eco_request' and refTransID = er.ecoReqID and isDeleted = 0) documentCount,        \n" +
                "		fun_getGenericCategoryNameByID(er.ecoDfmTypeID) EcoDfmType,fun_getMountingTypeNameByID(er.mountingTypeID) MountingType,              \n" +
                "        CONCAT(emp.firstName , ' ' , emp.lastName) fullName ,fun_getWoSubStatusNameByID((select woSubStatus from workorder where woID = er.woID)) WoStatus,               \n" +
                "        (select woSubStatus from workorder where woID = er.woID) woStatusID,              \n" +
                "        fun_getWorkorderNumberByID(er.woID) as workorder,                    \n" +
                "        tc.PIDCode AS toPIDCode,tc.mfgPN as toMFGPN,fc.mfgPN as fromMFGPN,tc.nickName as toNickName,fc.nickName as fromNickName,fc.isCustom as fromIsCustom,tc.isCustom AS toIsCustom,                       \n" +
                "        fc.PIDCode AS fromPIDCode,fun_getRoHSIconByID(fc.RoHSStatusID) as fromPartRoHSIcon, fun_getRoHSNameByID(fc.RoHSStatusID) as fromPartRoHSName,                  \n" +
                "        fun_getRoHSIconByID(tc.RoHSStatusID) as toPartRoHSIcon, fun_getRoHSNameByID(tc.RoHSStatusID) as toPartRoHSName,                  \n" +
                "        (CASE WHEN (`er`.`custECONumber` IS NULL OR `er`.`custECONumber` = '') THEN er.FCAECONumber                         \n" +
                "			ELSE er.custECONumber END) AS `ECODFMNumberValue` ,        \n" +
                "		(CASE WHEN (`er`.`custECONumber` IS NULL OR `er`.`custECONumber` = '') THEN 'INTERNAL'                         \n" +
                "			ELSE 'CUSTOMER' END) AS `custECONumberConvertedValue` ,         \n" +
                "		(CASE WHEN (`er`.`status` = 'P') THEN 'Inactive'                         \n" +
                "			WHEN (`er`.`status` = 'C') THEN 'Active' END) AS `statusConvertedValue` ,                        \n" +
                "		(CASE WHEN (`er`.`finalStatus` = 'P') THEN 'Resolution Pending'                         \n" +
                "		WHEN (`er`.`finalStatus` = 'A') THEN (case when `er`.`requestType` = 1 then 'Resolution Accepted' else 'Resolution Accepted' end)                    \n" +
                "        WHEN (`er`.`finalStatus` = 'R') THEN (case when `er`.`requestType` = 1 then  'Rejected' else  'Rejected' end) ELSE '' END) AS `finalstatusConvertedValue`				                         \n" +
                "        FROM eco_request er                        \n" +
                "        JOIN employees emp ON er.initiateBy = emp.id AND IFNULL(emp.isDeleted, 0) = 0                        \n" +
                "        left JOIN component fc ON fc.id = er.fromPartID AND IFNULL(fc.isDeleted,0) = 0 AND IFNULL(fc.category,0) = 3                      \n" +
                "        left JOIN component tc ON tc.id = er.toPartID AND IFNULL(tc.isDeleted,0) = 0 AND IFNULL(tc.category,0) = 3                      \n" +
                "        WHERE IFNULL(er.isDeleted,0) = 0 \");                \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                        \n" +
                "	ELSE                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"ecoNumber ASC\") ;                        \n" +
                "	END IF;	                        \n" +
                "	IF(pRequestType IS NOT NULL OR pRequestType != '') THEN                \n" +
                "    	SET @tempquery = CONCAT(@tempquery,\" and er.requestType = \",pRequestType);                 \n" +
                "	END IF;            \n" +
                "  \n" +
                "    IF(pPartID IS NOT NULL OR pPartID != '') THEN                \n" +
                "		SET @tempquery = CONCAT(@tempquery,\" and er.fromPartID = \",pPartID);                 \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                        \n" +
                "	ELSE	                        \n" +
                "		SET rowNumWhere = '';                        \n" +
                "	END IF;	                    \n" +
                "  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN                        \n" +
                "		SET pWhereClause = '1=1' ;                        \n" +
                "	END IF;	          \n" +
                "  \n" +
                "     IF(pEcoDfmNum IS NOT NULL OR pEcoDfmNum != '') THEN                \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause,\" and (ECODFMNumberValue like '%\",pEcoDfmNum,\"%' OR ecoNumber like '%\",pEcoDfmNum,\"%') \");                 \n" +
                "	END IF;       \n" +
                "   # select @tempquery;      \n" +
                "     /* to get total count of rows */                     \n" +
                "    SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);                    \n" +
                " # select  @SQLStatement2;      \n" +
                "    PREPARE query2 FROM @SQLStatement2;                    \n" +
                "	EXECUTE query2;                    \n" +
                "	DEALLOCATE PREPARE query2;                  \n" +
                "  \n" +
                "   SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c                    \n" +
                "		where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                    \n" +
                "  \n" +
                "    PREPARE query1 FROM @SQLStatement2;                    \n" +
                "	EXECUTE query1;                    \n" +
                "	DEALLOCATE PREPARE query1;                    \n" +
                "  \n" +
                "    END ;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2655,'2.00','V1','Sproc_GetECORequest- Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;


        case 2655:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPOStatusAssyWODetails`  ;\n" +
                "CREATE PROCEDURE `Sproc_GetPOStatusAssyWODetails`(        \n" +
                "	IN ppartID INT(11),        \n" +
                "	IN psalesOrderDetailID INT(11),      \n" +
                "	IN pcustomerID INT(11)        \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "	# if first qty control op is with issue qty then consider first op issue qty for un process qty      \n" +
                "	# if first qty control op is not issue qty control then consider first op added total qty for un process qty      \n" +
                "  \n" +
                "	SELECT * ,      \n" +
                "		(CASE WHEN result.isFirstOpWithIssueQty = 0 THEN (IFNULL(result.buildQty,0) - IFNULL(result.firstOPtotalQty,0))        \n" +
                "			 WHEN result.isFirstOpWithIssueQty = 1 THEN (IFNULL(result.buildQty,0) - IFNULL(result.woFirstOpTotIssueQty,0))      \n" +
                "			ELSE 0 END) AS  unProcessQty ,      \n" +
                "		(CASE WHEN isFirstOpWithIssueQty = 0 THEN      \n" +
                "			 ((IFNULL(result.wipQty,0) - (IFNULL(result.buildQty,0) - IFNULL(result.firstOPtotalQty,0)))         \n" +
                "					 + IFNULL(result.readytoShipQty,0))      \n" +
                "			WHEN isFirstOpWithIssueQty = 1 THEN      \n" +
                "				((IFNULL(result.wipQty,0) - (IFNULL(result.buildQty,0) - IFNULL(result.woFirstOpTotIssueQty,0)))         \n" +
                "						 + IFNULL(result.readytoShipQty,0))      \n" +
                "			ELSE 0 END) AS displayWIPQtyForReport       \n" +
                "  \n" +
                "	FROM (      \n" +
                "		SELECT vuwoss.woid, vuwoss.woNumber, vuwoss.woVersion , vuwoss.buildQty, vuwoss.poQty, vuwoss.readytoShipQty ,        \n" +
                "			vuwoss.shippedQty, vuwoss.scrapQty, vuwoss.wipQty, vuwoss.firstOPtotalQty , vuwoss.partID ,         \n" +
                "			co.PIDCode , co.mfgPN , co.nickName , co.liveVersion , co.rev , co.isCustom ,         \n" +
                "			(CASE WHEN (SELECT COUNT(1) FROM workorder_salesorder_details WHERE deletedAt IS NULL        \n" +
                "					 AND salesOrderDetailID = psalesOrderDetailID  AND woID = vuwoss.woid         \n" +
                "					 AND partID = vuwoss.partID  AND parentPartID = vuwoss.partID LIMIT 1) > 0        \n" +
                "							THEN 0 ELSE 1 END) AS isSubAssembly ,        \n" +
                "			rr.name rohsStatus, rr.rohsIcon rohsIcon ,        \n" +
                "			(SELECT woSubStatus FROM workorder WHERE woID = vuwoss.woid) AS woSubStatus ,      \n" +
                "			(SELECT SUM(IFNULL(issueQty,0)) FROM workorder_trans WHERE deletedAt IS NULL      \n" +
                "				AND woID = vuwoss.woid AND opID = `fun_getFirstOperationID`(vuwoss.woid)) AS woFirstOpTotIssueQty,      \n" +
                "  \n" +
                "			(SELECT isIssueQty FROM workorder_operation WHERE deletedAt IS NULL      \n" +
                "			AND woID  = vuwoss.woid	AND opID = `fun_getFirstOperationID`(vuwoss.woid)) AS isFirstOpWithIssueQty       \n" +
                "  \n" +
                "			-- (IFNULL(vuwoss.buildQty,0) - IFNULL(vuwoss.firstOPtotalQty,0)) AS unProcessQty ,        \n" +
                "			-- ((IFNULL(vuwoss.wipQty,0) - (IFNULL(vuwoss.buildQty,0) - IFNULL(vuwoss.firstOPtotalQty,0)))         \n" +
                "					-- + IFNULL(vuwoss.readytoShipQty,0)) AS  displayWIPQtyForReport        \n" +
                "		FROM vu_workorder_summary_stk vuwoss        \n" +
                "			JOIN component co ON co.id = vuwoss.partID AND co.deletedAt IS NULL        \n" +
                "			LEFT JOIN rfq_rohsmst rr ON rr.id = co.roHSStatusID AND co.deletedAt IS NULL            \n" +
                "		WHERE woid IN (SELECT wosd.woID       \n" +
                "				FROM workorder_salesorder_details  wosd      \n" +
                "					JOIN workorder wo ON wo.woID = wosd.woID AND wo.customerID = pcustomerID AND wo.deletedAt IS NULL      \n" +
                "				WHERE wosd.deletedAt IS NULL        \n" +
                "				AND wosd.salesOrderDetailID = psalesOrderDetailID        \n" +
                "				AND wosd.partID = ppartID)        \n" +
                "  \n" +
                "		) result;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2656,'2.00','V1','Sproc_GetPOStatusAssyWODetails- Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2656:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderStatus`(	      \n" +
                "	IN psalesId INT(11)	       \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "  \n" +
                "	SELECT w.woID,w.woNumber,sd.id,sh.shippingID FROM workorder_salesorder_details ws     \n" +
                "	LEFT JOIN salesorderdet sd ON sd.id=ws.salesOrderDetailID AND sd.isDeleted=0      \n" +
                "	LEFT JOIN salesordermst sm ON sm.id=sd.refSalesOrderID AND sm.isDeleted=0      \n" +
                "	LEFT JOIN salesshippingmst sh ON sd.id=sh.sDetID AND sh.isDeleted=0     \n" +
                "	LEFT JOIN workorder w ON w.woID=ws.woID AND w.isdeleted=0      \n" +
                "	WHERE sm.id=psalesId AND w.woSubStatus NOT IN (0,5);    \n" +
                "  \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2657,'2.00','V1','Sproc_CopyWorkorder- Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;


        case 2657:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetActiveOperationsList` ;   \n" +
                "CREATE PROCEDURE `Sproc_GetActiveOperationsList`(  \n" +
                "	IN ppageIndex INT(11),        \n" +
                "	IN precordPerPage INT(11),        \n" +
                "	IN pOrderBy VARCHAR(255),        \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "	pEmployeeID INT(11),  \n" +
                "    pWoID INT(11),  \n" +
                "    pCount INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;        \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "	ELSE        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"checkInDateTime DESC\") ;        \n" +
                "	END IF;	        \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = \"''\") THEN        \n" +
                "		SET pWhereClause = '1=1' ;        \n" +
                "	END IF;	        \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN         \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "	ELSE	        \n" +
                "		SET rowNumWhere = '';        \n" +
                "	END IF;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS `temp_Sproc_GetActiveOperationsList`;  \n" +
                "	CREATE TEMPORARY TABLE temp_Sproc_GetActiveOperationsList AS  \n" +
                "	SELECT         \n" +
                "	(SELECT CONCAT(woNumber,'-',woVersion)  FROM workorder WHERE woid=woop.woid AND deletedAt IS NULL) woNumber,        \n" +
                "	woop.opNumber,        \n" +
                "	woop.opName,         \n" +
                "	woop.woID,        \n" +
                "	woop.woOPID,        \n" +
                "	woempinout.woTransID,        \n" +
                "    woempinout.employeeID,  \n" +
                "    (select CONCAT('(',e.initialName,')',e.firstName,' ', e.lastName) from employees e where e.id =  woempinout.employeeID and IFNULL(e.isDeleted,0) = 0) employeeName,  \n" +
                "	(SELECT fun_ConvertUTCDatetimeToDataKeyTimeZone(`woempinout`.`checkinTime`)) checkinDateTime,  \n" +
                "    TIMESTAMPDIFF(SECOND,`woempinout`.`checkinTime` ,  fun_DatetimetoUTCDateTime()) currentTotalTime,  \n" +
                "    (CASE WHEN woempinout.isPaused =1 THEN  'Paused' ELSE Null END) opStatus  \n" +
                "	FROM workorder_trans_empinout woempinout        \n" +
                "	LEFT JOIN workorder_operation woop        \n" +
                "	ON woop.woopid = woempinout.woopid AND woop.deletedAt IS NULL        \n" +
                "	WHERE woempinout.employeeID = IFNULL(pEmployeeID, woempinout.employeeID)  \n" +
                "    AND woempinout.woID = IFNULL(pWoID,woempinout.woID)      \n" +
                "	AND woempinout.deletedAt IS NULL   \n" +
                "    AND woempinout.checkoutTime IS NULL;      \n" +
                "  \n" +
                "    UPDATE temp_Sproc_GetActiveOperationsList tempList  \n" +
                "    SET opStatus = CASE WHEN  ( (SELECT count(1) from workorder_trans_operation_hold_unhold wohold  \n" +
                "				WHERE wohold.woID = tempList.woID     \n" +
                "                AND wohold.woOPID = tempList.woOPID  \n" +
                "				AND endDate is Null  \n" +
                "				AND IFNULL(isDeleted,0) = 0 ) > 0 ) THEN 'Hold' ELSE opStatus END  ,  \n" +
                "		currentTotalTime = (	SELECT (SUM(TimeDiff1) - IFNULL(SUM(pauseTime),0)) TotalConsumptionTime       		  \n" +
                "							FROM ( SELECT   TIMESTAMPDIFF(SECOND, b.checkinTime, IFNULL(b.checkoutTime,fun_DatetimetoUTCDateTime())           \n" +
                "								 ) TimeDiff1,      \n" +
                "								(SELECT SUM( TIMESTAMPDIFF(SECOND,c.pausedTime, IFNULL(c.resumeTime,fun_DatetimetoUTCDateTime())))       \n" +
                "								 FROM workorder_trans_emp_pausedet c WHERE c.woTransinoutID = b.woTransinoutID) pauseTime				  \n" +
                "							FROM 	workorder_trans a,workorder_trans_empinout b          \n" +
                "							WHERE 	a.woTransID = b.woTransID          \n" +
                "							AND 	a.woOPID = tempList.woOPID  \n" +
                "							AND 	a.checkinEmployeeID = tempList.employeeID    \n" +
                "							AND 	a.deletedAt IS NULL     \n" +
                "							AND 	b.deletedAt IS NULL )  currtime      \n" +
                "					  )  ;  \n" +
                "  \n" +
                "    SET  @SQL1 = CONCAT('    select woNumber,  \n" +
                "			opNumber,  \n" +
                "            opName,  \n" +
                "            woID,  \n" +
                "            woOPID,  \n" +
                "            woTransID,  \n" +
                "            employeeID,  \n" +
                "            employeeName,  \n" +
                "            checkinDateTime,  \n" +
                "            currentTotalTime,  \n" +
                "            opStatus  \n" +
                "		from temp_Sproc_GetActiveOperationsList ');  \n" +
                "  \n" +
                "  \n" +
                "     IF pCount = 1 THEN  \n" +
                "		SET @SQL2 = CONCAT(\"select count(1) opCount from ( \", @SQL1,\" ) c   \");    \n" +
                "	 ELSE  \n" +
                "		SET @SQL2 = CONCAT(\"select * from ( \", @SQL1,\" ) c                \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "     END IF;  \n" +
                "     PREPARE stmt FROM @SQL2;                                                                            \n" +
                "	 EXECUTE stmt;   \n" +
                "  \n" +
                "     DROP TEMPORARY TABLE IF EXISTS `temp_Sproc_GetActiveOperationsList`;  \n" +
                "  \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2658,'2.00','V1','Sproc_GetActiveOperationsList- Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2658:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "create or replace view vu_kit_feasibility_detail as  \n" +
                "select   \n" +
                "e.refRfqLineitem,e.refSalesOrderDetID,e.assyid,e.lineID,e.totalAssyBuildQty,e.qpawithdnp,e.kitQty,e.reqqty,e.requnits,e.allocatedqty,e.allocatedunit,e.allocatedpin,  \n" +
                "e.shortage,  \n" +
                "e.availableStock,  \n" +
                "  (IFNULL(e.allocatedunit, 0) / IFNULL(e.qpawithdnp, 0)) AS feasibility,  \n" +
                "        ((IFNULL(e.allocatedunit, 0) + IFNULL(e.availableStock, 0)) / IFNULL(e.qpawithdnp, 0)) AS feasibilityWithAvailable,  \n" +
                "        (CASE  \n" +
                "            WHEN ((((IFNULL(e.allocatedunit, 0) + IFNULL(e.availableStock, 0)) / IFNULL(e.qpawithdnp, 0)) - IFNULL(e.totalAssyBuildQty, 0)) > 0) THEN 0  \n" +
                "            ELSE (((IFNULL(e.allocatedunit, 0) + IFNULL(e.availableStock, 0)) / IFNULL(e.qpawithdnp, 0)) - IFNULL(e.totalAssyBuildQty, 0))  \n" +
                "        END) AS shortageForAvailable,  \n" +
                "e.mountingTypeID,e.approvedmountingtypeID,e.connecterTypeID,e.BOMnumofPosition  \n" +
                "from (  \n" +
                "select   \n" +
                "d.refRfqLineitem,d.refSalesOrderDetID,d.assyid,d.lineID,d.totalAssyBuildQty,d.kitQty,  \n" +
                " IFNULL((d.totalAssyBuildQty * IFNULL(d.qpawithdnp, 0)), 0) AS reqqty,  \n" +
                " IFNULL((d.totalAssyBuildQty * IFNULL(d.qpawithdnp, 0)), 0) AS requnits,  \n" +
                "d.qpawithdnp,d.allocatedqty,d.allocatedunit,d.allocatedpin,  \n" +
                "FUN_GETSHORTAGEPERBUILD(d.qpawithdnp, d.kitQty, d.assyid, d.refSalesOrderDetID, d.refRfqLineitem) AS shortage,  \n" +
                "FUN_GETAVILABLESTOCKWITHPACKAGINGALIAS(d.refRfqLineitem, d.assyid, d.refSalesOrderDetID) AS availableStock,  \n" +
                "d.mountingTypeID,d.approvedmountingtypeID,d.connecterTypeID,d.BOMnumofPosition  \n" +
                "  \n" +
                "	from (select   \n" +
                "a.refRfqLineitem,a.refSalesOrderDetID,a.assyid,a.lineID,a.totalAssyBuildQty,a.kitQty,a.qpawithdnp,c.allocatedqty,c.allocatedunit,c.allocatedpin,  \n" +
                "ka.mountingTypeID,ka.approvedmountingtypeID,ka.connecterTypeID,a.bomnumofPosition  \n" +
                "From (SELECT   \n" +
                "            b.refRfqLineitem AS refRfqLineitem,  \n" +
                "                b.refSalesOrderDetID AS refSalesOrderDetID,  \n" +
                "                b.partID AS assyid,  \n" +
                "                b.lineID AS lineID,  \n" +
                "                b.numofPosition as bomnumofPosition,  \n" +
                "                a.totalAssyBuildQty AS totalAssyBuildQty,  \n" +
                "                a.kitQty AS kitQty,  \n" +
                "                (CASE  \n" +
                "                    WHEN  \n" +
                "                        ((b.isPurchase = 1)  \n" +
                "                            OR (b.isInstall = 1))  \n" +
                "                    THEN  \n" +
                "                        (IFNULL(b.qpa, 0) + IF(((b.isBuyDNPQty = 'Y')  \n" +
                "                            OR (b.isBuyDNPQty = 'C')), IFNULL(b.dnpQty, 0), 0))  \n" +
                "                    ELSE IF(((b.isBuyDNPQty = 'Y')  \n" +
                "                        OR (b.isBuyDNPQty = 'C')), IFNULL(b.dnpQty, 0), 0)  \n" +
                "                END) AS qpawithdnp  \n" +
                "        FROM kit_allocation_assy_detail a  \n" +
                "        JOIN kit_allocation_lineitems b ON a.refSalesOrderDetID = b.refSalesOrderDetID  \n" +
                "          AND a.partId = b.partID  \n" +
                "            AND b.isDeleted = 0) a  \n" +
                "	Left Join  (SELECT    ka.refSalesOrderDetID AS refSalesOrderDetID,  \n" +
                "                ka.refRfqLineitem AS refRfqLineitem,  \n" +
                "               (CASE  \n" +
                "                    WHEN (MAX(cp.mountingTypeID) = MIN(cp.mountingTypeID)) THEN MIN(cp.mountingTypeID)  \n" +
                "                    ELSE -(2)  \n" +
                "                END) AS mountingTypeID,  \n" +
                "                MAX((CASE  \n" +
                "                    WHEN  \n" +
                "                        ((ka.mismatchMountingTypeStep = 1)  \n" +
                "                            AND (ka.approvedMountingType = 1))  \n" +
                "                    THEN  \n" +
                "                        cp.mountingTypeID  \n" +
                "                    ELSE NULL  \n" +
                "                END)) AS approvedmountingtypeID,  \n" +
                "                MIN(cp.connecterTypeID) AS connecterTypeID,  \n" +
                "                MIN(cp.noOfRows) AS noOfRows   \n" +
                "        FROM kit_allocation_lineitems_alternatepart ka  \n" +
                "        JOIN component cp ON ka.mfgPNID = cp.id  \n" +
                "        GROUP BY ka.refSalesOrderDetID , ka.refRfqLineitem ) ka   \n" +
                "         on (a.refSalesOrderdetID = ka.refsalesOrderDetID  and   \n" +
                "             a.refrfqLineItem = ka.refrfqLineitem)   \n" +
                "Left Join (SELECT    ka.refSalesOrderDetID AS refsalesorderdetid,  \n" +
                "                ka.assyID AS assyid,  \n" +
                "                ka.refBOMLineID AS refbomlineid,  \n" +
                "               SUM((CASE WHEN (ka.STATUS = 'R') THEN ka.consumeQty  \n" +
                "                    WHEN (ka.STATUS = 'D') THEN 0  \n" +
                "                    ELSE ka.allocatedQty  \n" +
                "                END)) AS allocatedqty,  \n" +
                "                SUM((CASE  \n" +
                "                    WHEN (ka.STATUS = 'R') THEN ka.consumeUnit  \n" +
                "                    WHEN (ka.STATUS = 'D') THEN 0  \n" +
                "                    ELSE ka.allocatedUnit  \n" +
                "                END)) AS allocatedunit,  \n" +
                "                SUM((CASE WHEN (cp.connecterTypeID = -(2)) THEN  \n" +
                "                        (CASE WHEN (ka.STATUS = 'R')  THEN  \n" +
                "                                ((IFNULL(ka.consumeUnit, 0) * IFNULL(cp.noOfPosition, 0)) / (CASE  \n" +
                "                                    WHEN (IFNULL(cp.noOfRows, 0) > 1) THEN cp.noOfRows  \n" +
                "                                    ELSE 1  \n" +
                "                                END))  \n" +
                "                            WHEN (ka.STATUS = 'D') THEN 0  \n" +
                "                            ELSE (IFNULL(ka.allocatedUnit, 0) * IFNULL(cp.noOfPosition, 0))  \n" +
                "                        END)  \n" +
                "                    ELSE 0  \n" +
                "                END)) AS allocatedpin   \n" +
                "        FROM kit_allocation ka  \n" +
                "        JOIN component cp ON ka.partId = cp.id  \n" +
                "         GROUP BY ka.refSalesOrderDetID , ka.assyID , ka.refBOMLineID ) c          \n" +
                "         on (a.refSalesOrderdetID = c.refsalesOrderDetID  and   \n" +
                "             a.refrfqLineItem = c.refBOMLineID and   \n" +
                "             a.assyid =  c.assyid )) d )e;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2659,'2.00','V1',' Update view vu_kit_feasibility_detail - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2659:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-07-2020 *********************************** */
                "DROP function IF EXISTS `fun_getKitAllocatedMountingType`;  \n" +
                "CREATE FUNCTION `fun_getKitAllocatedMountingType`(                    \n" +
                "	pRefSalesOrderDetID INT(11),          \n" +
                "	pRefRfqLineitem INT(11),      \n" +
                "	pMountingTypeId INT(11)      \n" +
                ") RETURNS int(11)  \n" +
                "BEGIN             \n" +
                "	DECLARE v_mountingTypeId INT(11);     \n" +
                "	DECLARE v_verifiedMountingTypeId INT(11);     \n" +
                "	DECLARE v_count INT(11);      \n" +
                "  \n" +
                "	-- DROP TEMPORARY TABLE IF EXISTS tempMountingType;      \n" +
                "	-- CREATE TEMPORARY TABLE IF NOT EXISTS tempMountingType AS      \n" +
                "	select count(1) into v_count  \n" +
                "    from ( SELECT  mountingTypeID   \n" +
                "			FROM component c      \n" +
                "				INNER JOIN 	(      \n" +
                "							SELECT 	mfgPNID       \n" +
                "							FROM 	kit_allocation_lineitems_alternatepart       \n" +
                "							WHERE 	refSalesOrderDetID = pRefSalesOrderDetID       \n" +
                "									AND refRfqLineitem = pRefRfqLineitem       \n" +
                "									AND deletedAt IS NULL        \n" +
                "						/*	UNION      -- no need to check as we not allow to create packing alias if mounting type is different.   \n" +
                "							SELECT 	componentID       \n" +
                "							FROM 	component_packagingalias       \n" +
                "							WHERE 	aliasgroupID IN (                  \n" +
                "									SELECT 	aliasgroupID       \n" +
                "									FROM 	component_packagingalias       \n" +
                "									WHERE 	componentID IN (      \n" +
                "																SELECT 	mfgPNID       \n" +
                "																FROM 	kit_allocation_lineitems_alternatepart       \n" +
                "																WHERE 	refSalesOrderDetID = pRefSalesOrderDetID       \n" +
                "																		AND refRfqLineitem = pRefRfqLineitem       \n" +
                "																		AND deletedAt IS NULL      \n" +
                "															) AND deletedAt IS NULL                     \n" +
                "														)   \n" +
                "									AND deletedAt IS NULL  */   \n" +
                "							) a ON c.id = a.mfgPNID       \n" +
                "				WHERE 	c.deletedAt IS NULL   \n" +
                "				group by mountingTypeID ) a ;  \n" +
                "	-- GROUP BY 	mountingTypeID;      \n" +
                "  \n" +
                "	-- SELECT COUNT(1) INTO v_count FROM tempMountingType;      \n" +
                "	IF (v_count = 1) THEN      \n" +
                "		SET v_mountingTypeId = pMountingTypeId;      \n" +
                "	ELSE       \n" +
                "    SELECT mountingTypeID INTO v_verifiedMountingTypeId FROM component WHERE id=(SELECT kal.mfgPNID FROM kit_allocation_lineitems_alternatepart kal    \n" +
                "	WHERE  kal.mismatchMountingTypeStep=1 AND kal.refRfqLineitem=pRefRfqLineitem AND kal.approvedMountingType=1 AND refSalesOrderDetID=pRefSalesOrderDetID AND kal.deletedAt IS NULL LIMIT 1);        \n" +
                "		 IF(!v_verifiedMountingTypeId OR v_verifiedMountingTypeId='' OR v_verifiedMountingTypeId IS NULL) THEN    \n" +
                "			SET v_mountingTypeId = -1;      \n" +
                "          ELSE      \n" +
                "			SET v_mountingTypeId = v_verifiedMountingTypeId;      \n" +
                "          END IF;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	RETURN v_mountingTypeId;                     \n" +
                "END;  \n" +
                "DROP function IF EXISTS `fun_CalculateKitFeasibility`;  \n" +
                "CREATE FUNCTION `fun_CalculateKitFeasibility`(                          \n" +
                "	pRefSalesOrderDetID INT(11),                              \n" +
                "	pAssyID INT(11),                              \n" +
                "	pIsConsolidated TINYINT(1),                        \n" +
                "	pInputQty DECIMAL(18,8)                          \n" +
                ") RETURNS decimal(18,8)  \n" +
                "BEGIN                          \n" +
                "	DECLARE vKitQty DECIMAL(18,8);                          \n" +
                "	SELECT kitQty INTO vKitQty FROM salesorderdet WHERE id = pRefSalesOrderDetID;                            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempMountingTypeWiseKitDet;                              \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempMountingTypeWiseKitDet          \n" +
                "	(                              \n" +
                "		mountingTypeID INT(11),  		          \n" +
                "		mountingType VARCHAR(50),	          \n" +
                "		feasibilityWithAllocation DECIMAL(18,8),	                              \n" +
                "		shortageLine DECIMAL(18,8), 	          \n" +
                "		feasibilityWithAvailableAndAllocatedStock DECIMAL(18,8),                              \n" +
                "		shortageWithAvailableQty DECIMAL(18,8),						          \n" +
                "		shortageForInputQty DECIMAL(18,8),                              \n" +
                "		releasedQty DECIMAL(18,8),		          \n" +
                "		pendingQty DECIMAL(18,8),	          \n" +
                "		releasePercentage DECIMAL(18,8),          \n" +
                "		totalLine INT                              \n" +
                "	);        \n" +
                "  \n" +
                "	IF(pIsConsolidated = 1) THEN                              \n" +
                "		CALL Sproc_GetKitConsolidateData(pAssyID, FALSE);                               \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempFeasibilityDetail;                              \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempFeasibilityDetail AS                              \n" +
                "		SELECT  	r.lineid,         \n" +
                "				r.rfqLineItemsID refRfqLineitem, 	        \n" +
                "				r.qpa,                                 \n" +
                "				fun_getKitAllocatedUnits(pAssyID,         \n" +
                "				pRefSalesOrderDetID,         \n" +
                "				r.rfqLineItemsID,         \n" +
                "				r.consolidatedLineItemIDs, TRUE) allocatedUnit,                            \n" +
                "				fun_getKitAllocatedMountingType(pRefSalesOrderDetID, r.rfqLineItemsID, c.mountingTypeID) mountingTypeID,                        \n" +
                "				fun_getAvilableStockWithPackagingAliasForConsolidate(pRefSalesOrderDetID, r.consolidatedLineItemIDs) availableStock,        \n" +
                "				r.partID                              \n" +
                "		FROM 		temp_Sproc_GetKitConsolidateData r                                \n" +
                "		INNER JOIN 	component c ON r.mfgPNID = c.id         \n" +
                "					AND c.isGoodPart = 1                             \n" +
                "		LEFT JOIN 	kit_allocation k ON r.rfqLineItemsID = k.refBOMLineID                               \n" +
                "					AND k.status = 'A'                               \n" +
                "					AND k.refSalesOrderDetID = pRefSalesOrderDetID                              \n" +
                "		GROUP BY 	r.rfqLineItemsID, r.qpa                              \n" +
                "		ORDER BY 	R.lineid;          \n" +
                "  \n" +
                "		INSERT INTO tempMountingTypeWiseKitDet                              \n" +
                "		SELECT 	mountingTypeID,                               \n" +
                "			mountingType, 	                              \n" +
                "			MIN(feasibilityWithAllocation) feasibilityWithAllocation,                              \n" +
                "			SUM(Shortage) shortageLine,                      \n" +
                "			MIN(feasibilityWithAvailableAndAllocatedStock) feasibilityWithAvailableAndAllocatedStock,                              \n" +
                "			SUM(ShortageWithAvailableQty) shortageWithAvailableQty,                              \n" +
                "			SUM(shortageForInputQty) shortageForInputQty,                              \n" +
                "			0 releasedQty,                              \n" +
                "			vKitQty pendingQty,                              \n" +
                "			0 releasePercentage,          \n" +
                "			COUNT(1) totalLine                              \n" +
                "		FROM    (                              \n" +
                "				SELECT 	mountingTypeID,		          \n" +
                "					mountingType, 	                        \n" +
                "					lineID,		          \n" +
                "					refRfqLineitem, 	          \n" +
                "					qpa,             \n" +
                "					allocatedUnit,                              \n" +
                "					feasibilityWithAllocation,            \n" +
                "					CASE WHEN (shortagePerBuil > 0) THEN 1 ELSE 0 END Shortage,                               \n" +
                "					availableStock,		                              \n" +
                "					feasibilityWithAvailableAndAllocatedStock,                              \n" +
                "					CASE WHEN (feasibilityWithAvailableAndAllocatedStock < vKitQty) THEN 1 ELSE 0 END ShortageWithAvailableQty,                               \n" +
                "					CASE WHEN (feasibilityWithAvailableAndAllocatedStock < pInputQty) THEN 1 ELSE 0 END shortageForInputQty                              \n" +
                "				FROM 	(                              \n" +
                "						SELECT 	mountingTypeID,		          \n" +
                "							fun_getMountingTypeNameByID(mountingTypeID) mountingType, 	          \n" +
                "							lineID,		          \n" +
                "							refRfqLineitem, 	          \n" +
                "							qpa,             \n" +
                "							allocatedUnit,                              \n" +
                "							(allocatedUnit/qpa) feasibilityWithAllocation,                              \n" +
                "							availableStock,                              \n" +
                "							((availableStock + allocatedUnit)/qpa) feasibilityWithAvailableAndAllocatedStock,        \n" +
                "							partID,        \n" +
                "							fun_getShortagePerBuild(qpa, vKitQty, partID, pRefSalesOrderDetID, refRfqLineitem) shortagePerBuil                              \n" +
                "						FROM 	tempFeasibilityDetail                              \n" +
                "					) AS a                              \n" +
                "			) AS feasibilityDet                              \n" +
                "		GROUP BY mountingTypeID                              \n" +
                "		ORDER BY mountingType;                            \n" +
                "	ELSE                               \n" +
                "		INSERT INTO tempMountingTypeWiseKitDet (mountingTypeID, mountingType, feasibilityWithAllocation, totalLine, shortageLine, feasibilityWithAvailableAndAllocatedStock, shortageWithAvailableQty, shortageForInputQty)                              \n" +
                "		 SELECT 		mountingTypeID,        \n" +
                "				fun_getMountingTypeNameByID(mountingTypeID) mountingType,          \n" +
                "				MIN(feasibility) feasibilityWithAllocation,        \n" +
                "				COUNT(1) totalLine,        \n" +
                "				SUM(countOfShortageLineForAllocatedUnit) shortageLine,        \n" +
                "				MIN(feasibilityWithAvailable) feasibilityWithAvailableAndAllocatedStock,        \n" +
                "				SUM(countOfshortageForAvailableUnits) shortageWithAvailableQty,        \n" +
                "				SUM(countShortageForInput) shortageForInputQty        \n" +
                "		FROM 		(        \n" +
                "					SELECT 	  \n" +
                "							mountingTypeID ,      \n" +
                "                            feasibility,  \n" +
                "                            feasibilityWithAvailable,     \n" +
                "							(        \n" +
                "								CASE        \n" +
                "									WHEN shortage > 0 THEN        \n" +
                "										1        \n" +
                "									ELSE         \n" +
                "										0        \n" +
                "								END        \n" +
                "							)        \n" +
                "							countOfShortageLineForAllocatedUnit,        \n" +
                "							(        \n" +
                "								CASE        \n" +
                "									WHEN shortageForAvailable < 0 THEN        \n" +
                "										1        \n" +
                "									ELSE         \n" +
                "										0        \n" +
                "								END        \n" +
                "							)        \n" +
                "							countOfshortageForAvailableUnits,        \n" +
                "							(IFNULL(feasibilityWithAvailable, 0) - IFNULL(pInputQty, 0)) shortageForInput,        \n" +
                "							(        \n" +
                "								CASE        \n" +
                "									WHEN ((IFNULL(feasibilityWithAvailable, 0) - IFNULL(pInputQty, 0)) < 0) THEN        \n" +
                "										1        \n" +
                "									ELSE        \n" +
                "										0        \n" +
                "								END        \n" +
                "							)        \n" +
                "							countShortageForInput        \n" +
                "					FROM 		vu_kit_feasibility_detail         \n" +
                "					WHERE 		refSalesOrderDetID = pRefSalesOrderDetID         \n" +
                "								AND assyid = pAssyID         \n" +
                "					GROUP BY 	lineid        \n" +
                "				) a         \n" +
                "		GROUP BY 	mountingTypeID          \n" +
                "		ORDER BY 	mountingType;                             \n" +
                "    END IF;                          \n" +
                "  \n" +
                "  \n" +
                "    RETURN vKitQty;                          \n" +
                "END;  \n" +

                /* **************************** Add Script Version -> 15-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2660,'2.00','V1','Performance tuning Update function fun_getKitAllocatedMountingType, fun_CalculateKitFeasibility,  - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2660:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateKitAllocationAssyDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateKitAllocationAssyDetail`(                                                                                                                \n" +
                "	IN pPartID INT(11),                                                                  \n" +
                "	IN pSalesOrderDetailID INT(11),                                                                                              \n" +
                "	IN pKitQty INT(11),                                                            \n" +
                "	IN pMrpQty INT(11),                                                              \n" +
                "	IN pUserID VARCHAR(50),                                                                \n" +
                "	IN pActionStatus VARCHAR(50),                \n" +
                "	IN pRoleID INT(11)	                \n" +
                ")  \n" +
                "BEGIN                                                                 \n" +
                "	-- declare v_TotalInsertRecoed int;                                                                \n" +
                "	DECLARE v_assyDataCount INT;                                                              \n" +
                "	DECLARE v_no_assy INT;                                                                \n" +
                "	DECLARE v_no_exist_assy INT;                                                                \n" +
                "	DECLARE v_maintbl_count INT;                                                                \n" +
                "	DECLARE v_temptbl_count INT;                                                                \n" +
                "	DECLARE v_addline_count INT;                                                                \n" +
                "	DECLARE v_altline_count INT;                     \n" +
                "	DECLARE v_deallocate_update_mfr_count INT;                          \n" +
                "	-- DECLARE v_rfqLineId_For_Dellocate VARCHAR(10000);                            \n" +
                "	DECLARE v_main_sub_assy VARCHAR(1000);                                                         \n" +
                "  \n" +
                "	-- DECLARE EXIT HANDLER FOR SQLEXCEPTION                                                                                                                \n" +
                "	-- BEGIN                                                                                                                \n" +
                "	-- 	ROLLBACK;                                                                                                                \n" +
                "	-- 	RESIGNAL;                                                                                                                \n" +
                "	-- END;                                                                \n" +
                "  \n" +
                "	-- DECLARE EXIT HANDLER FOR SQLWARNING         \n" +
                "	-- BEGIN                                                                                                                \n" +
                "	-- 	ROLLBACK;                                                                                                                \n" +
                "	-- 	RESIGNAL;                                                                                                                \n" +
                "	-- END;                                                                \n" +
                "  \n" +
                "	-- START TRANSACTION;                                                                \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempSubAmmseblyData;                                                      \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempSubAmmseblyData AS                                                                                                         \n" +
                "		SELECT 	DISTINCT ps.prPerPartID, c.liveInternalVersion, c.liveVersion                                                                \n" +
                "		FROM 	part_sub_assy_relationship ps                                                                \n" +
                "		JOIN	component c ON c.id = ps.prPerPartID                                                                \n" +
                "		WHERE 	PartID = pPartID AND ps.deletedAt IS NULL;                             \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_assyDataCount FROM tempSubAmmseblyData WHERE prPerPartID = pPartID AND liveInternalVersion IS NOT NULL;                                                              \n" +
                "		IF (v_assyDataCount > 0) THEN                                                              \n" +
                "			/*IF (pActionStatus != 'DELETE') THEN                                                                \n" +
                "				CALL Sproc_GetKitConsolidateData(pPartID, TRUE);                                  \n" +
                "			END IF;*/            \n" +
                "  \n" +
                "			CALL Sproc_GetKitConsolidateData(pPartID, TRUE);                                  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempResultForUpdate;                                                         \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForUpdate AS                                                                 \n" +
                "			SELECT 		tsd.prPerPartID AS prPerPartID, 			                                                      \n" +
                "					pSalesOrderDetailID AS salesOrderDetailID,                                                                 \n" +
                "					IFNULL(SUM(ld.qpa),1) perAssyBuildQty, 		                                                          \n" +
                "					(IFNULL(SUM(ld.qpa), 1) * pKitQty) totalAssyBuildQty,  pKitQty AS kitQty,                                                          \n" +
                "					(IFNULL(SUM(ld.qpa), 1) * pMrpQty) totalAssyMrpQty,  pMrpQty AS mrpQty,                                                          \n" +
                "					tsd.liveInternalVersion AS liveInternalVersion,	tsd.liveVersion AS liveVersion,		                                                                \n" +
                "					IFNULL(ld.LEVEL, 0) AS bomAssyLevel,			pUserID AS updatedBy, 		                \n" +
                "					pUserID AS createdBy, pRoleID AS createByRoleId,pRoleID AS updateByRoleId                                                                  \n" +
                "			FROM 		tempSubAmmseblyData tsd                                                                \n" +
                "			LEFT JOIN 	temp_Sproc_GetKitConsolidateData ld ON ld.mfgPNID = tsd.prPerPartID                                                                \n" +
                "			GROUP BY 	tsd.prPerPartID                                                                \n" +
                "			ORDER BY 	ld.LEVEL, tsd.prPerPartID;                                                                \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempResultForLineItem;                                                      \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForLineItem AS                                                                 \n" +
                "			SELECT 	id, 		lineID, 	qpa, 		dnpQty,		isInstall,	isPurchase,		isBuyDNPQty,	                                                     \n" +
                "				custPN, 	custPNID,	uomID, 		partID,		numOfPosition,                                              \n" +
                "				description,	restrictCPNUseWithPermissionStep, 		restrictCPNUsePermanentlyStep, 		restrictCPNUseInBOMStep,                                              \n" +
                "				customerApprovalCPN,		isDeleted ,   deleteByRoleId                                       \n" +
                "			FROM 	rfq_lineitems                                                                 \n" +
                "			WHERE 	PartId IN                                                                 \n" +
                "				(                                                                \n" +
                "					SELECT 	partId                                                                 \n" +
                "					FROM 	kit_allocation_assy_detail                                                                 \n" +
                "					WHERE 	refSalesOrderDetID = pSalesOrderDetailID                                                                \n" +
                "				);                                                                \n" +
                "  \n" +
                "			-- (SELECT kal.id FROM kit_allocation_lineitems kal WHERE kal.refRfqLineitem = rla.rfqLineItemsID AND kal.refSalesOrderDetID = pSalesOrderDetailID AND rla.deletedAt IS NULL) refKitAllocationLineItemId,                                                                \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempResultForLineItemAlternatePart;                                                      \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForLineItemAlternatePart AS                                                                \n" +
                "			SELECT 	                                                                \n" +
                "				rfqLineItemsID,			id, 			distributor, 				distMfgCodeID, 		distPN, 	distMfgPNID,                                                                \n" +
                "				mfgCode, 			mfgCodeID, 		mfgPN, 					mfgPNID,		description,	isActive,	isApproved,                                                                \n" +
                "				RoHSStatusID, 			parttypeID, 		mountingtypeID, 			partcategoryID, 	partID,		                          \n" +
                "				customerApproval,		customerApprovalBy,	customerApprovalDate,			restrictUsePermanentlyStep,                                                                \n" +
                "				restrictUseWithPermissionStep, 	restrictUseInBOMStep, 	restrictUseInBOMWithPermissionStep, 	mismatchMountingTypeStep, 		approvedMountingType,    \n" +
                "				mismatchFunctionalCategoryStep,	uomMismatchedStep,                       \n" +
                "				restrictUseInBOMExcludingAliasStep,	restrictUseInBOMExcludingAliasWithPermissionStep, 	restrictUseExcludingAliasStep,		restrictUseExcludingAliasWithPermissionStep,                      \n" +
                "				isDeleted, deleteByRoleId			                                                                \n" +
                "			FROM 	rfq_lineitems_alternatepart rla                                                                 \n" +
                "			WHERE 	rla.rfqLineItemsID IN                                                                 \n" +
                "				(                                                                \n" +
                "					SELECT 	id                                                                 \n" +
                "					FROM 	rfq_lineitems                                                                 \n" +
                "					WHERE 	PartId IN                                                                 \n" +
                "					(                                                                \n" +
                "						SELECT partId FROM kit_allocation_assy_detail WHERE refSalesOrderDetID = pSalesOrderDetailID                                                                \n" +
                "					)                                                                \n" +
                "				);                                                                 \n" +
                "  \n" +
                "			IF (pActionStatus = 'CREATE') THEN                                                                \n" +
                "				INSERT INTO kit_allocation_assy_detail (partId, refSalesOrderDetID, perAssyBuildQty, totalAssyBuildQty, kitQty, totalAssyMrpQty, mrpQty, bomInternalVersion, bomInternalVersionString, bomAssyLevel, createdBy, updatedBy,createByRoleId,updateByRoleId)                                                                \n" +
                "				SELECT 		tsd.prPerPartID, 				pSalesOrderDetailID,                                                                 \n" +
                "						IFNULL(SUM(ld.qpa),1) perAssyBuildQty, 	                                                          \n" +
                "						(IFNULL(SUM(ld.qpa), 1) * pKitQty) totalAssyBuildQty,		pKitQty, 	                                                          \n" +
                "						(IFNULL(SUM(ld.qpa), 1) * pMrpQty) totalAssyMrpQty,  		pMrpQty,                                                          \n" +
                "						tsd.liveInternalVersion,	tsd.liveVersion,		IFNULL(ld.LEVEL, 0),                                                                \n" +
                "						pUserID, 					pUserID, pRoleID, pRoleID                                                                \n" +
                "				FROM 		tempSubAmmseblyData tsd                                                                \n" +
                "				LEFT JOIN 	temp_Sproc_GetKitConsolidateData ld ON ld.mfgPNID = tsd.prPerPartID                                                                \n" +
                "				GROUP BY tsd.prPerPartID                                                                \n" +
                "				ORDER BY ld.LEVEL, tsd.prPerPartID;                                                                \n" +
                "  \n" +
                "				INSERT INTO kit_allocation_lineitems (refSalesOrderDetID, refRfqLineitem, lineID, qpa, dnpQty, isInstall, isPurchase, isBuyDNPQty, custPN, custPNID, uomID, partID, numOfPosition,                                               \n" +
                "						description, restrictCPNUseWithPermissionStep, restrictCPNUsePermanentlyStep, restrictCPNUseInBOMStep, customerApprovalCPN, createdBy, updatedBy,createByRoleId,updateByRoleId)                                                                \n" +
                "				SELECT 	pSalesOrderDetailID,	id, 		lineID, 	qpa, 		dnpQty,                                                    \n" +
                "					isInstall, 		isPurchase, 	isBuyDNPQty,                                                    \n" +
                "					custPN, 	      	custPNID,	uomID, 		partID, 	numOfPosition,	                                              \n" +
                "					description,		restrictCPNUseWithPermissionStep, 		restrictCPNUsePermanentlyStep, 	restrictCPNUseInBOMStep,                                              \n" +
                "					customerApprovalCPN,	pUserID,	pUserID, pRoleID, pRoleID		                                                                \n" +
                "				FROM 	rfq_lineitems                                                                 \n" +
                "				WHERE 	PartId IN                                                                 \n" +
                "					(                                                                \n" +
                "						SELECT 	partId                                                                 \n" +
                "						FROM 	kit_allocation_assy_detail                                                                 \n" +
                "						WHERE 	refSalesOrderDetID = pSalesOrderDetailID AND deletedAt IS NULL                                                                \n" +
                "					) AND deletedAt IS NULL;                                                                \n" +
                "  \n" +
                "				INSERT INTO kit_allocation_lineitems_alternatepart 	(refSalesOrderDetID, refKitAllocationLineItemId, refRfqLineitem, refRfqLineItemAlternatePartId, distributor, distMfgCodeID, distPN, distMfgPNID, mfgCode, mfgCodeID, mfgPN, mfgPNID, description,                                                                \n" +
                "											isActive, isApproved, RoHSStatusID, parttypeID, mountingtypeID, partcategoryID, partID, customerApproval, customerApprovalBy, customerApprovalDate,restrictUsePermanentlyStep,                           \n" +
                "											restrictUseWithPermissionStep, restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, mismatchMountingTypeStep, approvedMountingType, mismatchFunctionalCategoryStep,	uomMismatchedStep,                       \n" +
                "											restrictUseInBOMExcludingAliasStep,	restrictUseInBOMExcludingAliasWithPermissionStep, 	restrictUseExcludingAliasStep,		restrictUseExcludingAliasWithPermissionStep,                      \n" +
                "											createdBy, updatedBy,createByRoleId,updateByRoleId)                                                                \n" +
                "				SELECT 	pSalesOrderDetailID, 	(SELECT kal.id FROM kit_allocation_lineitems kal WHERE deletedAt IS NULL AND kal.refRfqLineitem = rla.rfqLineItemsID AND refSalesOrderDetID = pSalesOrderDetailID) refKitAllocationLineItemId,                                                                \n" +
                "					rfqLineItemsID,				id, 			distributor, 				distMfgCodeID, 		distPN, 	distMfgPNID,                                                                \n" +
                "					mfgCode, 				mfgCodeID, 		mfgPN, 					mfgPNID,		description,	isActive,	isApproved,                                                                \n" +
                "					RoHSStatusID, 				parttypeID, 		mountingtypeID, 			partcategoryID, 	partID,		                          \n" +
                "					customerApproval,			customerApprovalBy,	customerApprovalDate,			restrictUsePermanentlyStep,                                                                 \n" +
                "					restrictUseWithPermissionStep, 		restrictUseInBOMStep,	restrictUseInBOMWithPermissionStep, 	mismatchMountingTypeStep, 		approvedMountingType,     \n" +
                "					mismatchFunctionalCategoryStep,		uomMismatchedStep,                                               \n" +
                "					restrictUseInBOMExcludingAliasStep,	restrictUseInBOMExcludingAliasWithPermissionStep, 		restrictUseExcludingAliasStep,		restrictUseExcludingAliasWithPermissionStep,                      \n" +
                "					pUserID, 		pUserID, pRoleID, pRoleID	                                                                \n" +
                "				FROM 	rfq_lineitems_alternatepart rla                                                                 \n" +
                "				WHERE 	rla.rfqLineItemsID IN                                                                 \n" +
                "					(                                                                \n" +
                "						SELECT 	id                                                                 \n" +
                "						FROM 	rfq_lineitems                                                                 \n" +
                "						WHERE 	PartId IN                                                                 \n" +
                "						(                                                                \n" +
                "							SELECT 	partId                                           \n" +
                "							FROM 	kit_allocation_assy_detail                                           \n" +
                "							WHERE 	refSalesOrderDetID = pSalesOrderDetailID AND deletedAt IS NULL                                                                \n" +
                "						) AND deletedAt IS NULL                                           \n" +
                "					) AND deletedAt IS NULL;        \n" +
                "  \n" +
                "					CALL Sproc_GenerateWarehouseForKit(pSalesOrderDetailID, pUserID, pRoleID);                                                              \n" +
                "			END IF;                                                                \n" +
                "  \n" +
                "			IF (pActionStatus = 'DELETE') THEN                                                                \n" +
                "				UPDATE 	kit_allocation_assy_detail                                                                 \n" +
                "				SET 	updatedBy = pUserID, deletedBy = pUserID, deletedAt = fun_DatetimetoUTCDateTime(), isDeleted = 1,updateByRoleId=pRoleID,deleteByRoleId=  pRoleID                                                              \n" +
                "				WHERE 	refSalesOrderDetID = pSalesOrderDetailID;                                                                 \n" +
                "  \n" +
                "				UPDATE 	kit_allocation_lineitems                                                                \n" +
                "				SET 	updatedBy = pUserID, deletedBy = pUserID, deletedAt = fun_DatetimetoUTCDateTime(), isDeleted = 1,updateByRoleId=pRoleID,deleteByRoleId=  pRoleID                                                                \n" +
                "				WHERE 	PartId IN                                                                 \n" +
                "					(                                                                \n" +
                "						SELECT 	partId                                                                 \n" +
                "						FROM 	kit_allocation_assy_detail                                                                 \n" +
                "						WHERE 	refSalesOrderDetID = pSalesOrderDetailID AND isDeleted = 1                                                                \n" +
                "					) AND refSalesOrderDetID = pSalesOrderDetailID;                                                                \n" +
                "  \n" +
                "				UPDATE 	kit_allocation_lineitems_alternatepart                                                                \n" +
                "				SET 	updatedBy = pUserID, deletedBy = pUserID, deletedAt = fun_DatetimetoUTCDateTime(), isDeleted = 1,updateByRoleId=pRoleID,deleteByRoleId=  pRoleID                                                                \n" +
                "				WHERE 	refRfqLineitem IN                                                                 \n" +
                "					(                                                                \n" +
                "						SELECT 	refRfqLineitem                                                                 \n" +
                "						FROM 	kit_allocation_lineitems                                                                 \n" +
                "						WHERE 	PartId IN                                                                 \n" +
                "						(                                                                \n" +
                "							SELECT partId FROM kit_allocation_assy_detail WHERE refSalesOrderDetID = pSalesOrderDetailID AND isDeleted = 1                                                                \n" +
                "						) AND refSalesOrderDetID = pSalesOrderDetailID AND isDeleted = 1                                                                \n" +
                "					) AND refSalesOrderDetID = pSalesOrderDetailID;                                                                \n" +
                "  \n" +
                "				-- Deallocate UMID from kit allocation of delete BOM line                              \n" +
                "				UPDATE 	kit_allocation ka                              \n" +
                "				SET 	ka.returnQty = ka.allocatedQty,                              \n" +
                "					ka.returnUnit = ka.allocatedUnit,                              \n" +
                "					ka.returnUOM = ka.allocatedUOM,                              \n" +
                "					ka.returnDate = fun_DatetimetoUTCDateTime(),                                \n" +
                "					ka.updatedBy = pUserID,                \n" +
                "					ka.updateByRoleId=pRoleID,	                \n" +
                "					ka.`status` = 'D',          \n" +
                "					ka.remark = 'Auto Deallocated from ReCalculation'                              \n" +
                "				WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID 	                              \n" +
                "						AND ka.assyID = pPartID                               \n" +
                "						AND ka.`status` = 'A';                              \n" +
                "			END IF;                                                                \n" +
                "  \n" +
                "			IF (pActionStatus = 'UPDATE') THEN                                                                \n" +
                "				SELECT COUNT(1) INTO v_no_assy FROM kit_allocation_assy_detail WHERE deletedAt IS NULL AND refSalesOrderDetID = pSalesOrderDetailID;                                                                \n" +
                "				IF (v_no_assy > 0) THEN                                                                \n" +
                "					-- Change in sales order detail without change assembly then update record                                                                \n" +
                "					SELECT COUNT(1) INTO v_no_exist_assy FROM kit_allocation_assy_detail WHERE deletedAt IS NULL AND refSalesOrderDetID = pSalesOrderDetailID AND bomAssyLevel = 0 AND partId = pPartID;                                                                \n" +
                "					IF (v_no_exist_assy > 0) THEN                                                                \n" +
                "						-- Change in sales order detail without change assembly then update record                                                                \n" +
                "						UPDATE 	kit_allocation_assy_detail ka, tempResultForUpdate tsd                                                                 \n" +
                "						SET 	ka.partId = tsd.prPerPartID,                                                                 \n" +
                "							ka.refSalesOrderDetID = tsd.salesOrderDetailID,                                                                 \n" +
                "							ka.perAssyBuildQty = tsd.perAssyBuildQty,                                                                 \n" +
                "							ka.totalAssyBuildQty = tsd.totalAssyBuildQty,                                                                 \n" +
                "							ka.kitQty = tsd.kitQty,                                                                 \n" +
                "							ka.totalAssyMrpQty = tsd.totalAssyMrpQty,                                                                 \n" +
                "							ka.mrpQty = tsd.mrpQty,                                                                 \n" +
                "							ka.bomInternalVersion = tsd.liveInternalVersion,                                                               \n" +
                "							ka.bomInternalVersionString = tsd.liveVersion,                                                              \n" +
                "							ka.bomAssyLevel = tsd.bomAssyLevel,                                                                 \n" +
                "							ka.updatedBy = tsd.updatedBy,                \n" +
                "							ka.updateByRoleId=tsd.updateByRoleId                \n" +
                "						WHERE	ka.partId = tsd.prPerPartID AND ka.refSalesOrderDetID = tsd.salesOrderDetailID AND ka.deletedAt IS NULL;                                                                \n" +
                "					ELSE                                                                \n" +
                "						-- Change in sales order detail change assembly then delete record and add record                                                                \n" +
                "						UPDATE 	kit_allocation_assy_detail                                                                 \n" +
                "						SET 	updatedBy = pUserID, deletedBy = pUserID, deletedAt = fun_DatetimetoUTCDateTime(), isDeleted = 1,updateByRoleId=pRoleID,deleteByRoleId=pRoleID	                                                                \n" +
                "						WHERE 	refSalesOrderDetID = pSalesOrderDetailID;                                                      \n" +
                "  \n" +
                "						UPDATE 	kit_allocation_lineitems                                                                \n" +
                "						SET 	updatedBy = pUserID, deletedBy = pUserID, deletedAt = fun_DatetimetoUTCDateTime(), isDeleted = 1,updateByRoleId=pRoleID,deleteByRoleId=pRoleID	                                                                      \n" +
                "						WHERE 	PartId IN                                                                 \n" +
                "							(                                                                \n" +
                "								SELECT 	partId                                                                 \n" +
                "								FROM 	kit_allocation_assy_detail                                                                 \n" +
                "								WHERE 	refSalesOrderDetID = pSalesOrderDetailID AND isDeleted = 1                                                                \n" +
                "							) AND refSalesOrderDetID = pSalesOrderDetailID;                                                     \n" +
                "  \n" +
                "						UPDATE 	kit_allocation_lineitems_alternatepart                                                                \n" +
                "						SET 	updatedBy = pUserID, deletedBy = pUserID, deletedAt = fun_DatetimetoUTCDateTime(), isDeleted = 1,updateByRoleId=pRoleID,deleteByRoleId=pRoleID	                                                                      \n" +
                "						WHERE 	refRfqLineitem IN                                                                 \n" +
                "							(                                                                \n" +
                "								SELECT 	refRfqLineitem                                                                 \n" +
                "								FROM 	kit_allocation_lineitems                                                                 \n" +
                "								WHERE 	PartId IN                                                                 \n" +
                "								(                                                                \n" +
                "									SELECT partId FROM kit_allocation_assy_detail WHERE refSalesOrderDetID = pSalesOrderDetailID AND isDeleted = 1                                                                \n" +
                "								) AND refSalesOrderDetID = pSalesOrderDetailID AND isDeleted = 1                                                                \n" +
                "							) AND refSalesOrderDetID = pSalesOrderDetailID;                                                        \n" +
                "  \n" +
                "						INSERT INTO kit_allocation_assy_detail (partId, refSalesOrderDetID, perAssyBuildQty, totalAssyBuildQty, kitQty, totalAssyMrpQty, mrpQty, bomInternalVersion, bomInternalVersionString, bomAssyLevel, createdBy, updatedBy,createByRoleId,updateByRoleId)                                                                \n" +
                "						SELECT 		tsd.prPerPartID, 				pSalesOrderDetailID,                                                                 \n" +
                "								IFNULL(SUM(ld.qpa),1) perAssyBuildQty, 	                                                          \n" +
                "								(IFNULL(SUM(ld.qpa), 1) * pKitQty) totalAssyBuildQty, 		pKitQty,                                                          \n" +
                "								(IFNULL(SUM(ld.qpa), 1) * pMrpQty) totalAssyMrpQty, 		pMrpQty, 					                                                          \n" +
                "								tsd.liveInternalVersion,	tsd.liveVersion,		IFNULL(ld.LEVEL, 0),                                                                \n" +
                "								pUserID, 					pUserID, pRoleID, pRoleID                                                                \n" +
                "						FROM 		tempSubAmmseblyData tsd                                                                \n" +
                "						LEFT JOIN 	temp_Sproc_GetKitConsolidateData ld ON ld.mfgPNID = tsd.prPerPartID                                                                \n" +
                "						GROUP BY tsd.prPerPartID                                                                \n" +
                "						ORDER BY ld.LEVEL, tsd.prPerPartID;                                                      \n" +
                "  \n" +
                "						INSERT INTO kit_allocation_lineitems (refSalesOrderDetID, refRfqLineitem, lineID, qpa, dnpQty, isInstall, isPurchase, isBuyDNPQty, custPN, custPNID, uomID, partID, numOfPosition,                                               \n" +
                "								description, restrictCPNUseWithPermissionStep, restrictCPNUsePermanentlyStep, restrictCPNUseInBOMStep, customerApprovalCPN, createdBy, updatedBy,createByRoleId,updateByRoleId)                                                                \n" +
                "						SELECT 	pSalesOrderDetailID,	id, 		lineID, 	qpa, 		dnpQty,                                                     \n" +
                "							isInstall, 		isPurchase, 	isBuyDNPQty,                                                    \n" +
                "							custPN, 	     	custPNID,	uomID, 		partID, 	numOfPosition, 	                                              \n" +
                "							description,		restrictCPNUseWithPermissionStep, 		restrictCPNUsePermanentlyStep, 	restrictCPNUseInBOMStep,                                              \n" +
                "							customerApprovalCPN,	pUserID,	pUserID	, pRoleID, pRoleID  	                                                                \n" +
                "						FROM 	rfq_lineitems                                                                 \n" +
                "						WHERE 	PartId IN                                                                 \n" +
                "							(                                                                \n" +
                "								SELECT 	partId                                                                 \n" +
                "								FROM 	kit_allocation_assy_detail                                                                 \n" +
                "								WHERE 	refSalesOrderDetID = pSalesOrderDetailID AND deletedAt IS NULL                                                                \n" +
                "							) AND deletedAt IS NULL;                                                      \n" +
                "  \n" +
                "						INSERT INTO kit_allocation_lineitems_alternatepart 	(refSalesOrderDetID, refKitAllocationLineItemId, refRfqLineitem, refRfqLineItemAlternatePartId, distributor, distMfgCodeID, distPN, distMfgPNID, mfgCode, mfgCodeID, mfgPN, mfgPNID, description,                                                                \n" +
                "													isActive, isApproved, RoHSStatusID, parttypeID, mountingtypeID, partcategoryID, partID, customerApproval, customerApprovalBy, customerApprovalDate, restrictUsePermanentlyStep, restrictUseWithPermissionStep,                           \n" +
                "													restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, mismatchMountingTypeStep, approvedMountingType, mismatchFunctionalCategoryStep, uomMismatchedStep,                      \n" +
                "													restrictUseInBOMExcludingAliasStep,	restrictUseInBOMExcludingAliasWithPermissionStep, 	restrictUseExcludingAliasStep,		restrictUseExcludingAliasWithPermissionStep,                      \n" +
                "													createdBy, updatedBy,createByRoleId,updateByRoleId)                                                                \n" +
                "						SELECT 	pSalesOrderDetailID, 			(SELECT kal.id FROM kit_allocation_lineitems kal WHERE deletedAt IS NULL AND kal.refRfqLineitem = rla.rfqLineItemsID AND refSalesOrderDetID = pSalesOrderDetailID) refKitAllocationLineItemId,                                                                \n" +
                "							rfqLineItemsID,				id, 			distributor, 				distMfgCodeID, 		distPN, 	distMfgPNID,                                                                \n" +
                "							mfgCode, 				mfgCodeID, 		mfgPN, 					mfgPNID,		description, 	isActive,	isApproved,                                                                \n" +
                "							RoHSStatusID, 				parttypeID, 		mountingtypeID, 			partcategoryID, 	partID,		                          \n" +
                "							customerApproval,			customerApprovalBy,	customerApprovalDate,			restrictUsePermanentlyStep,                                                                 \n" +
                "							restrictUseWithPermissionStep, 		restrictUseInBOMStep,	restrictUseInBOMWithPermissionStep,	mismatchMountingTypeStep, 		approvedMountingType,     \n" +
                "							mismatchFunctionalCategoryStep,         uomMismatchedStep,                                               \n" +
                "							restrictUseInBOMExcludingAliasStep,	restrictUseInBOMExcludingAliasWithPermissionStep, 		restrictUseExcludingAliasStep,		restrictUseExcludingAliasWithPermissionStep,                      \n" +
                "							pUserID, 				pUserID	, pRoleID, pRoleID                                                                  \n" +
                "						FROM 	rfq_lineitems_alternatepart rla                                                                 \n" +
                "						WHERE 	rla.rfqLineItemsID IN                                                                 \n" +
                "							(                                                                \n" +
                "								SELECT 	id                                                                 \n" +
                "								FROM 	rfq_lineitems                                                                 \n" +
                "								WHERE 	PartId IN                                                                 \n" +
                "								(                                                                \n" +
                "									SELECT partId FROM kit_allocation_assy_detail WHERE refSalesOrderDetID = pSalesOrderDetailID AND deletedAt IS NULL                                                                \n" +
                "								) AND deletedAt IS NULL                                                                \n" +
                "							) AND deletedAt IS NULL;	                              \n" +
                "  \n" +
                "						CALL Sproc_GenerateWarehouseForKit(pSalesOrderDetailID, pUserID, pRoleID);      \n" +
                "  \n" +
                "						-- Get all main and sub assembly detail                         \n" +
                "						SELECT  GROUP_CONCAT(partID) INTO v_main_sub_assy                         \n" +
                "						FROM 	kit_allocation_assy_detail                         \n" +
                "						WHERE 	refSalesOrderDetID = pSalesOrderDetailID                         \n" +
                "								AND deletedAt IS NOT NULL;                                                           \n" +
                "  \n" +
                "						-- Get rfqLineItemId, mfgPNID for delllocate UMID from kit allocation                           \n" +
                "						DROP TEMPORARY TABLE IF EXISTS tempDeleteAlternatePartList;                                                      \n" +
                "						CREATE TEMPORARY TABLE IF NOT EXISTS tempDeleteAlternatePartList AS                          \n" +
                "						SELECT 	refRfqLineitem, mfgPNID                         \n" +
                "						FROM 	kit_allocation_lineitems_alternatepart                               \n" +
                "						WHERE 	refSalesOrderDetID = pSalesOrderDetailID                               \n" +
                "							AND FIND_IN_SET(partID, v_main_sub_assy)                        \n" +
                "							AND deletedAt IS NOT NULL;                        \n" +
                "  \n" +
                "						-- Deallocate UMID from kit allocation of delete BOM line                              \n" +
                "						UPDATE 	kit_allocation ka, tempDeleteAlternatePartList tda                              \n" +
                "						SET 	ka.returnQty = ka.allocatedQty,                              \n" +
                "							ka.returnUnit = ka.allocatedUnit,                              \n" +
                "							ka.returnUOM = ka.allocatedUOM,                              \n" +
                "							ka.returnDate = fun_DatetimetoUTCDateTime(),                                \n" +
                "							ka.updatedBy = pUserID,                 \n" +
                "							ka.updateByRoleId=pRoleID,	                \n" +
                "							ka.`status` = 'D',          \n" +
                "							ka.remark = 'Auto Deallocated from ReCalculation'                              \n" +
                "						WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID 	                              \n" +
                "								AND FIND_IN_SET(ka.assyID, v_main_sub_assy)                        \n" +
                "								AND ka.`status` = 'A'                        \n" +
                "								AND ka.refBOMLineID = tda.refRfqLineitem                        \n" +
                "								AND ka.partId = tda.mfgPNID;                          \n" +
                "					END IF;                                                                \n" +
                "				ELSE                                                                 \n" +
                "					-- Add new sales order detail then insert record                                                                \n" +
                "					INSERT INTO kit_allocation_assy_detail (partId, refSalesOrderDetID, perAssyBuildQty, totalAssyBuildQty, kitQty, totalAssyMrpQty, mrpQty, bomInternalVersion, bomInternalVersionString, bomAssyLevel, createdBy, updatedBy,createByRoleId,updateByRoleId)                                                                \n" +
                "					SELECT 		tsd.prPerPartID, 				pSalesOrderDetailID,                                                                 \n" +
                "							IFNULL(SUM(ld.qpa),1) perAssyBuildQty, 	                                                          \n" +
                "							(IFNULL(SUM(ld.qpa), 1) * pKitQty) totalAssyBuildQty,      	pKitQty, 					                                                          \n" +
                "							(IFNULL(SUM(ld.qpa), 1) * pMrpQty) totalAssyMrpQty,  		pMrpQty,                                                          \n" +
                "							tsd.liveInternalVersion, 	tsd.liveVersion,		IFNULL(ld.LEVEL, 0),                                                                \n" +
                "							pUserID, 					pUserID , pRoleID, pRoleID                                                               \n" +
                "					FROM 		tempSubAmmseblyData tsd                                                                \n" +
                "					LEFT JOIN 	temp_Sproc_GetKitConsolidateData ld ON ld.mfgPNID = tsd.prPerPartID                                                                \n" +
                "					GROUP BY tsd.prPerPartID                                                                \n" +
                "					ORDER BY ld.LEVEL, tsd.prPerPartID;                                                                \n" +
                "  \n" +
                "  \n" +
                "					INSERT INTO kit_allocation_lineitems (refSalesOrderDetID, refRfqLineitem, lineID, qpa, dnpQty, isInstall, isPurchase, isBuyDNPQty, custPN, custPNID, uomID, partID, numOfPosition,                                               \n" +
                "							description, restrictCPNUseWithPermissionStep, restrictCPNUsePermanentlyStep, restrictCPNUseInBOMStep, customerApprovalCPN, createdBy, updatedBy,createByRoleId,updateByRoleId)                                                                \n" +
                "					SELECT 	pSalesOrderDetailID, 	id, 		lineID, 	qpa, 		dnpQty,                                                     \n" +
                "						isInstall, 		isPurchase, 	isBuyDNPQty,                                                    \n" +
                "						custPN, 	      	custPNID, 	uomID, 		partID, 	numOfPosition,	                                              \n" +
                "						description,		restrictCPNUseWithPermissionStep, 		restrictCPNUsePermanentlyStep, 	restrictCPNUseInBOMStep,                                              \n" +
                "						customerApprovalCPN,	pUserID,	pUserID	, pRoleID, pRoleID	                                                                \n" +
                "					FROM 	rfq_lineitems                                                                 \n" +
                "					WHERE 	PartId IN                                                                 \n" +
                "						(                                                                \n" +
                "							SELECT 	partId                                                                 \n" +
                "							FROM 	kit_allocation_assy_detail                                                                 \n" +
                "							WHERE 	refSalesOrderDetID = pSalesOrderDetailID AND deletedAt IS NULL                                                                \n" +
                "						) AND deletedAt IS NULL;                                                                \n" +
                "  \n" +
                "  \n" +
                "					INSERT INTO kit_allocation_lineitems_alternatepart 	(refSalesOrderDetID, refKitAllocationLineItemId, refRfqLineitem, refRfqLineItemAlternatePartId, distributor, distMfgCodeID, distPN, distMfgPNID, mfgCode, mfgCodeID, mfgPN, mfgPNID, description,                                                                \n" +
                "												isActive, isApproved, RoHSStatusID, parttypeID, mountingtypeID, partcategoryID, partID, customerApproval, customerApprovalBy, customerApprovalDate, restrictUsePermanentlyStep, restrictUseWithPermissionStep,                           \n" +
                "												restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, mismatchMountingTypeStep, approvedMountingType, mismatchFunctionalCategoryStep, uomMismatchedStep,                       \n" +
                "												restrictUseInBOMExcludingAliasStep,	restrictUseInBOMExcludingAliasWithPermissionStep, 	restrictUseExcludingAliasStep,		restrictUseExcludingAliasWithPermissionStep,                      \n" +
                "												createdBy, updatedBy,createByRoleId,updateByRoleId)                                                                \n" +
                "					SELECT 	pSalesOrderDetailID,		(SELECT kal.id FROM kit_allocation_lineitems kal WHERE deletedAt IS NULL AND kal.refRfqLineitem = rla.rfqLineItemsID AND refSalesOrderDetID = pSalesOrderDetailID) refKitAllocationLineItemId,                                                                \n" +
                "						rfqLineItemsID,			id, 			distributor, 				distMfgCodeID, 		distPN, 	distMfgPNID,                                                                \n" +
                "						mfgCode, 			mfgCodeID, 		mfgPN, 					mfgPNID,		description,	isActive,	isApproved,                                                                \n" +
                "						RoHSStatusID, 			parttypeID, 		mountingtypeID, 			partcategoryID, 	partID,		                          \n" +
                "						customerApproval,		customerApprovalBy,	customerApprovalDate,			restrictUsePermanentlyStep,                                                                 \n" +
                "						restrictUseWithPermissionStep, 	restrictUseInBOMStep, 	restrictUseInBOMWithPermissionStep, 	mismatchMountingTypeStep, 		approvedMountingType,     \n" +
                "						mismatchFunctionalCategoryStep,	uomMismatchedStep,                                                 \n" +
                "						restrictUseInBOMExcludingAliasStep,	restrictUseInBOMExcludingAliasWithPermissionStep, 	restrictUseExcludingAliasStep,		restrictUseExcludingAliasWithPermissionStep,                      \n" +
                "						pUserID, 			pUserID	, pRoleID, pRoleID                                                                \n" +
                "					FROM 	rfq_lineitems_alternatepart rla                                                                 \n" +
                "					WHERE 	rla.rfqLineItemsID IN                                                                 \n" +
                "						(                                                                \n" +
                "							SELECT 	id                                                                 \n" +
                "							FROM 	rfq_lineitems                                                                 \n" +
                "							WHERE 	PartId IN                                                                 \n" +
                "							(                                                                \n" +
                "								SELECT partId FROM kit_allocation_assy_detail WHERE refSalesOrderDetID = pSalesOrderDetailID AND deletedAt IS NULL                                                                \n" +
                "							) AND deletedAt IS NULL                                                                \n" +
                "						) AND deletedAt IS NULL;                                                        \n" +
                "  \n" +
                "					CALL Sproc_GenerateWarehouseForKit(pSalesOrderDetailID, pUserID, pRoleID);      \n" +
                "  \n" +
                "				END IF;                                                                \n" +
                "			END IF;                                                                \n" +
                "  \n" +
                "			IF (pActionStatus = 'CALCULATEKITALLOCATION') THEN                                                                \n" +
                "				SELECT COUNT(1) INTO v_maintbl_count FROM kit_allocation_assy_detail WHERE deletedAt IS NULL AND refSalesOrderDetID = pSalesOrderDetailID AND partId NOT IN (SELECT prPerPartID FROM tempResultForUpdate WHERE salesOrderDetailID = pSalesOrderDetailID);                                                                \n" +
                "				SELECT COUNT(1) INTO v_temptbl_count FROM tempResultForUpdate WHERE salesOrderDetailID = pSalesOrderDetailID AND prPerPartID NOT IN (SELECT partId FROM kit_allocation_assy_detail WHERE deletedAt IS NULL AND refSalesOrderDetID = pSalesOrderDetailID);                                                                \n" +
                "  \n" +
                "				IF (v_maintbl_count = 0 AND v_temptbl_count = 0) THEN                                                                \n" +
                "					UPDATE 	kit_allocation_assy_detail ka, tempResultForUpdate tsd                                                                 \n" +
                "					SET 	ka.partId = tsd.prPerPartID,                                                                 \n" +
                "						ka.refSalesOrderDetID = tsd.salesOrderDetailID,                                                                 \n" +
                "						ka.perAssyBuildQty = tsd.perAssyBuildQty,                                                                 \n" +
                "						ka.totalAssyBuildQty = tsd.totalAssyBuildQty,                                                                 \n" +
                "						ka.kitQty = tsd.kitQty,                                                                 \n" +
                "						ka.totalAssyMrpQty = tsd.totalAssyMrpQty,                                                                 \n" +
                "						ka.mrpQty = tsd.mrpQty,                                                                 \n" +
                "						ka.bomInternalVersion = tsd.liveInternalVersion,                                                               \n" +
                "						ka.bomInternalVersionString = tsd.liveVersion,                                                            \n" +
                "						ka.bomAssyLevel = tsd.bomAssyLevel,                                                                 \n" +
                "						ka.updatedBy = tsd.updatedBy,                \n" +
                "						ka.updateByRoleId=tsd.updateByRoleId	                \n" +
                "					WHERE	ka.partId = tsd.prPerPartID AND ka.refSalesOrderDetID = tsd.salesOrderDetailID AND ka.deletedAt IS NULL;                                                                \n" +
                "  \n" +
                "				END IF;                                                                \n" +
                "  \n" +
                "				IF (v_temptbl_count > 0) THEN                                                                \n" +
                "					INSERT INTO kit_allocation_assy_detail (partId, refSalesOrderDetID, perAssyBuildQty, totalAssyBuildQty, kitQty, totalAssyMrpQty, mrpQty, bomInternalVersion, bomInternalVersionString, bomAssyLevel, createdBy, updatedBy,createByRoleId,updateByRoleId)                                                                \n" +
                "					SELECT 	trp.prPerPartID, 				trp.salesOrderDetailID,                                                                 \n" +
                "						trp.perAssyBuildQty, 				                                                          \n" +
                "						trp.totalAssyBuildQty,      			trp.kitQty, 					                                                          \n" +
                "						trp.totalAssyMrpQty,      			trp.mrpQty,                                                          \n" +
                "						trp.liveInternalVersion, 			trp.liveVersion,		                                                                \n" +
                "						trp.bomAssyLevel,				trp.createdBy,		                                                                \n" +
                "						trp.updatedBy , trp.createByRoleId, trp.updateByRoleId                                                               \n" +
                "					FROM 	tempResultForUpdate trp                                                                \n" +
                "					WHERE 	trp.salesOrderDetailID = pSalesOrderDetailID AND trp.prPerPartID NOT IN                                                                 \n" +
                "						(                                                                \n" +
                "							SELECT 	partId                                                                 \n" +
                "							FROM 	kit_allocation_assy_detail                                                                 \n" +
                "							WHERE 	deletedAt IS NULL AND refSalesOrderDetID = pSalesOrderDetailID                                                                \n" +
                "						);             \n" +
                "  \n" +
                "					UPDATE 	kit_allocation_assy_detail ka, tempResultForUpdate tsd                                                                 \n" +
                "					SET 	ka.partId = tsd.prPerPartID,                                                                 \n" +
                "						ka.refSalesOrderDetID = tsd.salesOrderDetailID,                                                                 \n" +
                "						ka.perAssyBuildQty = tsd.perAssyBuildQty,                                                                 \n" +
                "						ka.totalAssyBuildQty = tsd.totalAssyBuildQty,                                                                 \n" +
                "						ka.kitQty = tsd.kitQty,                                                                 \n" +
                "						ka.totalAssyMrpQty = tsd.totalAssyMrpQty,                                                                 \n" +
                "						ka.mrpQty = tsd.mrpQty,                                                                 \n" +
                "						ka.bomInternalVersion = tsd.liveInternalVersion,                                                               \n" +
                "						ka.bomInternalVersionString = tsd.liveVersion,                                                            \n" +
                "						ka.bomAssyLevel = tsd.bomAssyLevel,                                                                 \n" +
                "						ka.updatedBy = tsd.updatedBy,                \n" +
                "						ka.updateByRoleId=tsd.updateByRoleId	                \n" +
                "					WHERE	ka.partId = tsd.prPerPartID AND ka.refSalesOrderDetID = tsd.salesOrderDetailID AND ka.deletedAt IS NULL;                                                                \n" +
                "  \n" +
                "				END IF;                                                                \n" +
                "  \n" +
                "				IF (v_maintbl_count > 0) THEN                                                                \n" +
                "					UPDATE 	kit_allocation_assy_detail ka                                                                \n" +
                "					SET 	ka.updatedBy = pUserID,             \n" +
                "						ka.deletedBy = pUserID,             \n" +
                "						ka.deletedAt = fun_DatetimetoUTCDateTime(),                \n" +
                "						ka.isDeleted = 1,            \n" +
                "						ka.updateByRoleId=pRoleID,            \n" +
                "						ka.deleteByRoleId=pRoleID                                                                \n" +
                "					WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID AND ka.partId IN                                                                 \n" +
                "					(                                                                \n" +
                "						SELECT 	a.partId                                                                \n" +
                "						FROM (                                                                \n" +
                "							SELECT 	kaa.partId                                                                 \n" +
                "							FROM 	kit_allocation_assy_detail kaa                                                                \n" +
                "							WHERE 	kaa.deletedAt IS NULL AND kaa.refSalesOrderDetID = pSalesOrderDetailID AND kaa.partId NOT IN                                                                 \n" +
                "							(                                                                \n" +
                "								SELECT 	tr.prPerPartID                                                                 \n" +
                "								FROM 	tempResultForUpdate tr                                                                \n" +
                "								WHERE 	tr.salesOrderDetailID = pSalesOrderDetailID                                                                \n" +
                "							)                                                                 \n" +
                "						) a                                                                \n" +
                "					);                                                                  \n" +
                "  \n" +
                "					UPDATE 	kit_allocation_assy_detail ka, tempResultForUpdate tsd                                                                 \n" +
                "					SET 	ka.partId = tsd.prPerPartID,                                                                 \n" +
                "						ka.refSalesOrderDetID = tsd.salesOrderDetailID,                                                                 \n" +
                "						ka.perAssyBuildQty = tsd.perAssyBuildQty,                                                                 \n" +
                "						ka.totalAssyBuildQty = tsd.totalAssyBuildQty,                                                                 \n" +
                "						ka.kitQty = tsd.kitQty,                                                                 \n" +
                "						ka.totalAssyMrpQty = tsd.totalAssyMrpQty,                                                                 \n" +
                "						ka.mrpQty = tsd.mrpQty,                                                                 \n" +
                "						ka.bomInternalVersion = tsd.liveInternalVersion,                                                               \n" +
                "						ka.bomInternalVersionString = tsd.liveVersion,                                                            \n" +
                "						ka.bomAssyLevel = tsd.bomAssyLevel,                                                                 \n" +
                "						ka.updatedBy = tsd.updatedBy,                \n" +
                "						ka.updateByRoleId=tsd.updateByRoleId	                \n" +
                "					WHERE	ka.partId = tsd.prPerPartID AND ka.refSalesOrderDetID = tsd.salesOrderDetailID AND ka.deletedAt IS NULL;                                                                \n" +
                "				END IF;                                                                \n" +
                "  \n" +
                "				UPDATE 	kit_allocation_lineitems kal, tempResultForLineItem tlt                                                                 \n" +
                "				SET 	kal.refSalesOrderDetID = pSalesOrderDetailID,                                                                 \n" +
                "					kal.refRfqLineitem = tlt.id,                                                                 \n" +
                "					kal.lineID = tlt.lineID,                                                                 \n" +
                "					kal.qpa = tlt.qpa,                                                            \n" +
                "					kal.dnpQty = tlt.dnpQty,                                                     \n" +
                "					kal.isInstall = tlt.isInstall,                                                    \n" +
                "					kal.isPurchase = tlt.isPurchase,                                                    \n" +
                "					kal.isBuyDNPQty = tlt.isBuyDNPQty,                                                        \n" +
                "					kal.custPN = tlt.custPN,                                                                 \n" +
                "					kal.custPNID = tlt.custPNID,                                                                 \n" +
                "					kal.uomID = tlt.uomID,                                                                 \n" +
                "					kal.partID = tlt.partID,                                                        \n" +
                "					kal.numOfPosition = tlt.numOfPosition,                                               \n" +
                "					kal.description = tlt.description,                                              \n" +
                "					kal.restrictCPNUseWithPermissionStep = tlt.restrictCPNUseWithPermissionStep,                                              \n" +
                "					kal.restrictCPNUsePermanentlyStep = tlt.restrictCPNUsePermanentlyStep,                                              \n" +
                "					kal.restrictCPNUseInBOMStep = tlt.restrictCPNUseInBOMStep,                                              \n" +
                "					kal.customerApprovalCPN = tlt.customerApprovalCPN,                                              \n" +
                "					kal.updatedBy = pUserID,                                                                \n" +
                "					kal.deletedBy = (CASE WHEN (tlt.isDeleted IS NULL OR tlt.isDeleted = 0) THEN NULL ELSE pUserID END),                                                                \n" +
                "					kal.deletedAt = (CASE WHEN (tlt.isDeleted IS NULL OR tlt.isDeleted = 0) THEN NULL ELSE fun_DatetimetoUTCDateTime() END),                                                                \n" +
                "					kal.isDeleted = tlt.isDeleted,                \n" +
                "					kal.updateByRoleId = pRoleID,                \n" +
                "					kal.deleteByRoleId = tlt.deleteByRoleId					                \n" +
                "					/*kal.refMongoTrnsID = (case when (fun_checkPurchasePriceField(kal.qpa, tlt.qpa, pSalesOrderDetailID, tlt.id) = 1) then kal.refMongoTrnsID else null end),                                          \n" +
                "					kal.refPricePartID = (CASE WHEN fun_checkPurchasePriceField(kal.qpa, tlt.qpa, pSalesOrderDetailID, tlt.id) = 1 THEN kal.refPricePartID ELSE NULL END),                                          \n" +
                "					kal.refquoteQtyEach = (CASE WHEN fun_checkPurchasePriceField(kal.qpa, tlt.qpa, pSalesOrderDetailID, tlt.id) = 1 THEN kal.refquoteQtyEach ELSE NULL END),                                          \n" +
                "					kal.refQuoteQtyPriceEach = (CASE WHEN fun_checkPurchasePriceField(kal.qpa, tlt.qpa, pSalesOrderDetailID, tlt.id) = 1 THEN kal.refQuoteQtyPriceEach ELSE NULL END),                                          \n" +
                "					kal.refQuoteUnitQty = (CASE WHEN fun_checkPurchasePriceField(kal.qpa, tlt.qpa, pSalesOrderDetailID, tlt.id) = 1 THEN kal.refQuoteUnitQty ELSE NULL END),                                             \n" +
                "					kal.refQuoteUnitPriceEach = (CASE WHEN fun_checkPurchasePriceField(kal.qpa, tlt.qpa, pSalesOrderDetailID, tlt.id) = 1 THEN kal.refQuoteUnitPriceEach ELSE NULL END),                                          \n" +
                "					kal.refpackagingID = (CASE WHEN fun_checkPurchasePriceField(kal.qpa, tlt.qpa, pSalesOrderDetailID, tlt.id) = 1 THEN kal.refpackagingID ELSE NULL END),                                          \n" +
                "					kal.refsupplierID = (CASE WHEN fun_checkPurchasePriceField(kal.qpa, tlt.qpa, pSalesOrderDetailID, tlt.id) = 1 THEN kal.refsupplierID ELSE NULL END),                                          \n" +
                "					kal.refLeadTime = (CASE WHEN fun_checkPurchasePriceField(kal.qpa, tlt.qpa, pSalesOrderDetailID, tlt.id) = 1 THEN kal.refLeadTime ELSE NULL END),                                          \n" +
                "					kal.refSelectedPartQtyStock = (CASE WHEN fun_checkPurchasePriceField(kal.qpa, tlt.qpa, pSalesOrderDetailID, tlt.id) = 1 THEN kal.refSelectedPartQtyStock ELSE NULL END),                                          \n" +
                "					kal.refSelectedPartUnitStock = (CASE WHEN fun_checkPurchasePriceField(kal.qpa, tlt.qpa, pSalesOrderDetailID, tlt.id) = 1 THEN kal.refSelectedPartUnitStock ELSE NULL END),                                          \n" +
                "					kal.refsupplierQtyStcok = (CASE WHEN fun_checkPurchasePriceField(kal.qpa, tlt.qpa, pSalesOrderDetailID, tlt.id) = 1 THEN kal.refsupplierQtyStcok ELSE NULL END),                                          \n" +
                "					kal.refsupplierUnitStock = (CASE WHEN fun_checkPurchasePriceField(kal.qpa, tlt.qpa, pSalesOrderDetailID, tlt.id) = 1 THEN kal.refsupplierUnitStock ELSE NULL END),                                          \n" +
                "					kal.refCumulativeStock = (CASE WHEN fun_checkPurchasePriceField(kal.qpa, tlt.qpa, pSalesOrderDetailID, tlt.id) = 1 THEN kal.refCumulativeStock ELSE NULL END),                                          \n" +
                "					kal.refPriceselectionMode = (CASE WHEN fun_checkPurchasePriceField(kal.qpa, tlt.qpa, pSalesOrderDetailID, tlt.id) = 1 THEN kal.refPriceselectionMode ELSE NULL END),                                          \n" +
                "					kal.refCumulativeStockSuppliers = (CASE WHEN fun_checkPurchasePriceField(kal.qpa, tlt.qpa, pSalesOrderDetailID, tlt.id) = 1 THEN kal.refCumulativeStockSuppliers ELSE NULL END)*/                                          \n" +
                "				WHERE	kal.refRfqLineitem = tlt.id AND kal.refSalesOrderDetID = pSalesOrderDetailID AND kal.deletedAt IS NULL;                                                                \n" +
                "  \n" +
                "				-- Get rfqLineItemId, mfgPNID for delllocate UMID from kit allocation                           \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUpdateAlternatePartList;                                                      \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUpdateAlternatePartList AS                          \n" +
                "				SELECT refRfqLineitem, mfgPNID  FROM kit_allocation_lineitems_alternatepart              \n" +
                "				WHERE 	id IN (              \n" +
                "						SELECT DISTINCT id              \n" +
                "						FROM              \n" +
                "						(              \n" +
                "						   SELECT id, refRfqLineitem, mfgPNID              \n" +
                "						   FROM kit_allocation_lineitems_alternatepart               \n" +
                "						   UNION ALL              \n" +
                "						   SELECT id, refRfqLineitem, mfgPNID              \n" +
                "						   FROM tempResultForLineItemAlternatePart               \n" +
                "						)  t              \n" +
                "						GROUP BY refRfqLineitem, mfgPNID              \n" +
                "						HAVING COUNT(1) = 1              \n" +
                "				);              \n" +
                "  \n" +
                "				UPDATE 	kit_allocation_lineitems_alternatepart kala, tempResultForLineItemAlternatePart tlia                                                                 \n" +
                "				SET 	kala.refSalesOrderDetID = pSalesOrderDetailID,                                                                 \n" +
                "					-- kala.refKitAllocationLineItemId = tlia.refKitAllocationLineItemId,                                                                 \n" +
                "					kala.refRfqLineitem = tlia.rfqLineItemsID,                                                                 \n" +
                "					kala.refRfqLineItemAlternatePartId = tlia.id,                                                                 \n" +
                "					kala.distributor = tlia.distributor,                                                                 \n" +
                "					kala.distMfgCodeID = tlia.distMfgCodeID,                                                                 \n" +
                "					kala.distPN = tlia.distPN,                                                                 \n" +
                "					kala.distMfgPNID = tlia.distMfgPNID,                                                                \n" +
                "					kala.mfgCode = tlia.mfgCode,                                                                \n" +
                "					kala.mfgCodeID = tlia.mfgCodeID,                                                                \n" +
                "					kala.mfgPN = tlia.mfgPN,                                                                \n" +
                "					kala.mfgPNID = tlia.mfgPNID,                                                \n" +
                "					kala.description = tlia.description,                                                         \n" +
                "					kala.isActive = tlia.isActive,                                                                \n" +
                "					kala.isApproved = tlia.isApproved,                                                                \n" +
                "					kala.RoHSStatusID = tlia.RoHSStatusID,                                                                \n" +
                "					kala.parttypeID = tlia.parttypeID,                                                                \n" +
                "					kala.mountingtypeID = tlia.mountingtypeID,                                                                \n" +
                "					kala.partcategoryID = tlia.partcategoryID,                                                                \n" +
                "					kala.partID = tlia.partID,                               \n" +
                "					kala.customerApproval = tlia.customerApproval,                          \n" +
                "					kala.customerApprovalBy = tlia.customerApprovalBy,                          \n" +
                "					kala.customerApprovalDate = tlia.customerApprovalDate,                          \n" +
                "					kala.restrictUsePermanentlyStep = tlia.restrictUsePermanentlyStep,                                                                \n" +
                "					kala.restrictUseWithPermissionStep = tlia.restrictUseWithPermissionStep,                                                                \n" +
                "					kala.restrictUseInBOMStep = tlia.restrictUseInBOMStep,                                                  \n" +
                "					kala.restrictUseInBOMWithPermissionStep = tlia.restrictUseInBOMWithPermissionStep,                                                \n" +
                "					kala.mismatchMountingTypeStep = tlia.mismatchMountingTypeStep,     \n" +
                "					kala.approvedMountingType = tlia.approvedMountingType,                                                  \n" +
                "					kala.mismatchFunctionalCategoryStep = tlia.mismatchFunctionalCategoryStep,                        \n" +
                "					kala.uomMismatchedStep = tlia.uomMismatchedStep,                        \n" +
                "					kala.restrictUseInBOMExcludingAliasStep = tlia.restrictUseInBOMExcludingAliasStep,                      \n" +
                "					kala.restrictUseInBOMExcludingAliasWithPermissionStep = tlia.restrictUseInBOMExcludingAliasWithPermissionStep,                      \n" +
                "					kala.restrictUseExcludingAliasStep = tlia.restrictUseExcludingAliasStep,                      \n" +
                "					kala.restrictUseExcludingAliasWithPermissionStep = tlia.restrictUseExcludingAliasWithPermissionStep,                                                              \n" +
                "					kala.updatedBy = pUserID,                                                                \n" +
                "					kala.deletedBy = (CASE WHEN (tlia.isDeleted IS NULL OR tlia.isDeleted = 0) THEN NULL ELSE pUserID END),                                                                \n" +
                "					kala.deletedAt = (CASE WHEN (tlia.isDeleted IS NULL OR tlia.isDeleted = 0) THEN NULL ELSE fun_DatetimetoUTCDateTime() END),                                                                \n" +
                "					kala.isDeleted = tlia.isDeleted,                \n" +
                "					kala.updateByRoleId=pRoleID,                \n" +
                "					kala.deleteByRoleId=tlia.deleteByRoleId			                \n" +
                "				WHERE	kala.refSalesOrderDetID = pSalesOrderDetailID AND kala.refRfqLineitem = tlia.rfqLineItemsID AND kala.refRfqLineItemAlternatePartId = tlia.id AND kala.deletedAt IS NULL;                                                                \n" +
                "  \n" +
                "				-- Get all main and sub assembly detail                         \n" +
                "				SELECT  GROUP_CONCAT(partID) INTO v_main_sub_assy                         \n" +
                "				FROM 	kit_allocation_assy_detail                         \n" +
                "				WHERE 	refSalesOrderDetID = pSalesOrderDetailID                         \n" +
                "						AND deletedAt IS NULL;                 \n" +
                "  \n" +
                "				-- Deallocate UMID from kit allocation of update mfgpn of BOM line                		              \n" +
                "				SELECT COUNT(1) INTO v_deallocate_update_mfr_count FROM tempUpdateAlternatePartList;              \n" +
                "				IF (v_deallocate_update_mfr_count > 0) THEN              \n" +
                "					UPDATE 	kit_allocation ka, tempUpdateAlternatePartList tua                              \n" +
                "					SET 	ka.returnQty = ka.allocatedQty,                              \n" +
                "						ka.returnUnit = ka.allocatedUnit,                              \n" +
                "						ka.returnUOM = ka.allocatedUOM,                              \n" +
                "						ka.returnDate = fun_DatetimetoUTCDateTime(),                                \n" +
                "						ka.updatedBy = pUserID,                \n" +
                "						ka.updateByRoleId=pRoleID,                \n" +
                "						ka.`status` = 'D',          \n" +
                "						ka.remark = 'Auto Deallocated from ReCalculation'                              \n" +
                "					WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID 	                              \n" +
                "							AND FIND_IN_SET(ka.assyID, v_main_sub_assy)                        \n" +
                "							AND ka.`status` = 'A'                        \n" +
                "							AND ka.refBOMLineID = tua.refRfqLineitem                        \n" +
                "							AND ka.partId = tua.mfgPNID;                 \n" +
                "				END IF;              \n" +
                "  \n" +
                "				-- Get rfqLineItemId, mfgPNID for delllocate UMID from kit allocation                           \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDeleteAlternatePartList;                                                      \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDeleteAlternatePartList AS                          \n" +
                "				SELECT 	refRfqLineitem, mfgPNID                         \n" +
                "				FROM 	kit_allocation_lineitems_alternatepart                               \n" +
                "				WHERE 	refSalesOrderDetID = pSalesOrderDetailID                               \n" +
                "					AND FIND_IN_SET(partID, v_main_sub_assy)                        \n" +
                "					AND deletedAt IS NOT NULL;                        \n" +
                "  \n" +
                "				-- Deallocate UMID from kit allocation of delete BOM line                              \n" +
                "				UPDATE 	kit_allocation ka, tempDeleteAlternatePartList tda                              \n" +
                "				SET 	ka.returnQty = ka.allocatedQty,                              \n" +
                "					ka.returnUnit = ka.allocatedUnit,                              \n" +
                "					ka.returnUOM = ka.allocatedUOM,                              \n" +
                "					ka.returnDate = fun_DatetimetoUTCDateTime(),                                \n" +
                "					ka.updatedBy = pUserID,                \n" +
                "					ka.updateByRoleId=pRoleID,                \n" +
                "					ka.`status` = 'D',          \n" +
                "					ka.remark = 'Auto Deallocated from ReCalculation'                              \n" +
                "				WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID 	                              \n" +
                "						AND FIND_IN_SET(ka.assyID, v_main_sub_assy)                        \n" +
                "						AND ka.`status` = 'A'                        \n" +
                "						AND ka.refBOMLineID = tda.refRfqLineitem                        \n" +
                "						AND ka.partId = tda.mfgPNID;                              \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO v_addline_count FROM rfq_lineitems WHERE deletedAt IS NULL AND id NOT IN (                                          \n" +
                "						SELECT refRfqLineitem FROM kit_allocation_lineitems WHERE deletedAt IS NULL AND refSalesOrderDetID = pSalesOrderDetailID                                          \n" +
                "					) AND partID IN (SELECT prPerPartID FROM tempSubAmmseblyData);	                        \n" +
                "  \n" +
                "				IF (v_addline_count > 0) THEN                                                                 \n" +
                "					INSERT INTO kit_allocation_lineitems (refSalesOrderDetID, refRfqLineitem, lineID, qpa, dnpQty, isInstall, isPurchase, isBuyDNPQty, custPN, custPNID, uomID, partID, numOfPosition,                                               \n" +
                "								description, restrictCPNUseWithPermissionStep, restrictCPNUsePermanentlyStep, restrictCPNUseInBOMStep, customerApprovalCPN, createdBy, updatedBy,createByRoleId,updateByRoleId)                                                                \n" +
                "					SELECT 	pSalesOrderDetailID, 	id, 		lineID, 	qpa, 		dnpQty,                                                    \n" +
                "						isInstall, 		isPurchase, 	isBuyDNPQty,                                                    \n" +
                "						custPN, 	        custPNID,	uomID, 		partID, 	numOfPosition,	                                              \n" +
                "						description,		restrictCPNUseWithPermissionStep, 		restrictCPNUsePermanentlyStep, 	                                              \n" +
                "						restrictCPNUseInBOMStep,customerApprovalCPN, 		pUserID,	pUserID,                \n" +
                "						pRoleID,pRoleID		                                                                \n" +
                "					FROM 	rfq_lineitems                                                                 \n" +
                "					WHERE 	id NOT IN                                                                 \n" +
                "						(                                                                \n" +
                "							SELECT 	refRfqLineitem                                                                 \n" +
                "							FROM 	kit_allocation_lineitems                                                                 \n" +
                "							WHERE 	deletedAt IS NULL AND refSalesOrderDetID = pSalesOrderDetailID                                                                \n" +
                "						) AND deletedAt IS NULL AND partID IN                                                                 \n" +
                "						(                                                                \n" +
                "							SELECT 	prPerPartID                                                                 \n" +
                "							FROM 	tempSubAmmseblyData                                                                \n" +
                "						);                                                                \n" +
                "  \n" +
                "					INSERT INTO kit_allocation_lineitems_alternatepart (refSalesOrderDetID, refKitAllocationLineItemId, refRfqLineitem, refRfqLineItemAlternatePartId, distributor, distMfgCodeID, distPN, distMfgPNID, mfgCode, mfgCodeID, mfgPN, mfgPNID, description,                                                                \n" +
                "											    isActive, isApproved, RoHSStatusID, parttypeID, mountingtypeID, partcategoryID, partID, customerApproval, customerApprovalBy, customerApprovalDate,restrictUsePermanentlyStep, restrictUseWithPermissionStep,                           \n" +
                "											    restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, mismatchMountingTypeStep, approvedMountingType, mismatchFunctionalCategoryStep, uomMismatchedStep,                       \n" +
                "											    restrictUseInBOMExcludingAliasStep,		restrictUseInBOMExcludingAliasWithPermissionStep, 	restrictUseExcludingAliasStep,		restrictUseExcludingAliasWithPermissionStep,                      \n" +
                "											    createdBy, updatedBy,createByRoleId,updateByRoleId)                                                                \n" +
                "					SELECT 	pSalesOrderDetailID, 		(SELECT kal.id FROM kit_allocation_lineitems kal WHERE deletedAt IS NULL AND kal.refRfqLineitem = rla.rfqLineItemsID AND refSalesOrderDetID = pSalesOrderDetailID) refKitAllocationLineItemId,                                                                \n" +
                "						rfqLineItemsID,			id, 				distributor, 				distMfgCodeID, 		distPN, 	distMfgPNID,                                                                \n" +
                "						mfgCode, 			mfgCodeID, 			mfgPN, 					mfgPNID,		description,	isActive,	isApproved,                                                                \n" +
                "						RoHSStatusID, 			parttypeID, 			mountingtypeID, 			partcategoryID, 	partID,		                          \n" +
                "						customerApproval,		customerApprovalBy,		customerApprovalDate,			restrictUsePermanentlyStep,                                                                 \n" +
                "						restrictUseWithPermissionStep, 	restrictUseInBOMStep, 		restrictUseInBOMWithPermissionStep, 	mismatchMountingTypeStep, 		approvedMountingType,     \n" +
                "						mismatchFunctionalCategoryStep,	uomMismatchedStep,                      \n" +
                "						restrictUseInBOMExcludingAliasStep,	restrictUseInBOMExcludingAliasWithPermissionStep, 		restrictUseExcludingAliasStep,		restrictUseExcludingAliasWithPermissionStep,                                              \n" +
                "						pUserID, 			pUserID, pRoleID, pRoleID	                                                                \n" +
                "					FROM 	rfq_lineitems_alternatepart rla                                                                 \n" +
                "					WHERE 	rla.rfqLineItemsID IN                                                                 \n" +
                "						(                                                                \n" +
                "							SELECT 	id                                                                 \n" +
                "							FROM 	rfq_lineitems                                                                 \n" +
                "							WHERE 	id NOT IN                                                                 \n" +
                "							(                                                                \n" +
                "								SELECT 	refRfqLineitem                                                                 \n" +
                "								FROM 	kit_allocation_lineitems                                                                 \n" +
                "								WHERE 	deletedAt IS NULL AND refSalesOrderDetID = pSalesOrderDetailID                                                                \n" +
                "							) AND deletedAt IS NULL AND partID IN                                                                \n" +
                "							(                                                                \n" +
                "								SELECT 	prPerPartID                                                                 \n" +
                "								FROM 	tempSubAmmseblyData                                                                \n" +
                "							)                                                                \n" +
                "						) AND deletedAt IS NULL;                                                                \n" +
                "				END IF;                                                                \n" +
                "  \n" +
                "				SELECT 	COUNT(1) INTO v_altline_count             \n" +
                "				FROM 	rfq_lineitems_alternatepart WHERE id NOT IN (                                                                \n" +
                "						SELECT refRfqLineItemAlternatePartId FROM kit_allocation_lineitems_alternatepart WHERE refRfqLineitem IN (                                                                \n" +
                "							SELECT refRfqLineitem FROM kit_allocation_lineitems WHERE deletedAt IS NULL AND refSalesOrderDetID = pSalesOrderDetailID                                                                \n" +
                "						) AND deletedAt IS NULL AND refSalesOrderDetID = pSalesOrderDetailID                                                                 \n" +
                "					) AND deletedAt IS NULL AND partID IN (SELECT prPerPartID FROM tempSubAmmseblyData);                                                                \n" +
                "  \n" +
                "				IF (v_altline_count > 0) THEN                                                                \n" +
                "					INSERT INTO kit_allocation_lineitems_alternatepart 	(refSalesOrderDetID, refKitAllocationLineItemId, refRfqLineitem, refRfqLineItemAlternatePartId, distributor, distMfgCodeID, distPN, distMfgPNID, mfgCode, mfgCodeID, mfgPN, mfgPNID, description,                                                                \n" +
                "												isActive, isApproved, RoHSStatusID, parttypeID, mountingtypeID, partcategoryID, partID, customerApproval, customerApprovalBy, customerApprovalDate, restrictUsePermanentlyStep, restrictUseWithPermissionStep, 	                          \n" +
                "												restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, mismatchMountingTypeStep, approvedMountingType, mismatchFunctionalCategoryStep,  uomMismatchedStep,                     \n" +
                "												restrictUseInBOMExcludingAliasStep,	restrictUseInBOMExcludingAliasWithPermissionStep, 	restrictUseExcludingAliasStep,		restrictUseExcludingAliasWithPermissionStep,                      \n" +
                "												createdBy, updatedBy,createByRoleId,updateByRoleId)                                                                \n" +
                "					SELECT 	pSalesOrderDetailID, 		(SELECT kal.id FROM kit_allocation_lineitems kal WHERE deletedAt IS NULL AND kal.refRfqLineitem = rla.rfqLineItemsID AND refSalesOrderDetID = pSalesOrderDetailID) refKitAllocationLineItemId,                                                                \n" +
                "						rfqLineItemsID,			id, 					distributor, 				distMfgCodeID, 		distPN, 	distMfgPNID,                                                                \n" +
                "						mfgCode, 			mfgCodeID, 				mfgPN, 					mfgPNID,		description,	isActive,	isApproved,                                                                \n" +
                "						RoHSStatusID, 			parttypeID, 				mountingtypeID, 			partcategoryID, 	partID,		                          \n" +
                "						customerApproval,		customerApprovalBy,			customerApprovalDate,			restrictUsePermanentlyStep,                                                                 \n" +
                "						restrictUseWithPermissionStep, 	restrictUseInBOMStep, 			restrictUseInBOMWithPermissionStep,	mismatchMountingTypeStep, 		approvedMountingType,     \n" +
                "						mismatchFunctionalCategoryStep, uomMismatchedStep,                     \n" +
                "						restrictUseInBOMExcludingAliasStep,	restrictUseInBOMExcludingAliasWithPermissionStep, 			restrictUseExcludingAliasStep,		restrictUseExcludingAliasWithPermissionStep,                                                  \n" +
                "						pUserID,			pUserID	 , pRoleID, pRoleID                                                               \n" +
                "					FROM 	rfq_lineitems_alternatepart rla                                                                 \n" +
                "					WHERE 	id NOT IN                                                                 \n" +
                "						(                                                                \n" +
                "							SELECT 	refRfqLineItemAlternatePartId                                                                 \n" +
                "							FROM 	kit_allocation_lineitems_alternatepart                                                                 \n" +
                "							WHERE refRfqLineitem IN (                                                                \n" +
                "								SELECT 	refRfqLineitem 	                                                                \n" +
                "								FROM 	kit_allocation_lineitems                                                                 \n" +
                "								WHERE 	deletedAt IS NULL AND refSalesOrderDetID = pSalesOrderDetailID                                                                \n" +
                "							) AND deletedAt IS NULL AND refSalesOrderDetID = pSalesOrderDetailID                                                                \n" +
                "						) AND deletedAt IS NULL AND partID IN (                                                                \n" +
                "							SELECT prPerPartID FROM tempSubAmmseblyData                                                                \n" +
                "						);                                                                \n" +
                "				END IF;                                                                \n" +
                "			END IF;                                                               \n" +
                "		END IF;                                                               \n" +
                "	-- COMMIT;                                                                \n" +
                "  \n" +
                "	SELECT 1;                                                                \n" +
                "  \n" +
                "	/*SELECT * FROM kit_allocation_assy_detail;                                                                \n" +
                "	SELECT * FROM kit_allocation_lineitems;                                                                \n" +
                "	select * from kit_allocation_lineitems_alternatepart;*/                                                                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForLineItemAlternatePart;                                                                \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForLineItem;	                                                                \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForUpdate;                                                                \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSubAmmseblyData;                                                                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetriveKitAllocationConsolidatedList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationConsolidatedList`(                                                                                              \n" +
                "	IN pPageIndex INT(11),                                                                                                        \n" +
                "	IN pRecordPerPage INT(11),                                                                                                          \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                                        \n" +
                "	IN pWhereClause VARCHAR(16383),                                                               \n" +
                "	IN pRefSalesOrderDetID INT(11),                                \n" +
                "	IN pLineId INT(11),                                                                                            \n" +
                "	IN pPartId INT(11),                                                                                  \n" +
                "	IN pKitQty INT(11),                                                                    \n" +
                "	IN pPackagingAlias BOOLEAN,                                                              \n" +
                "	IN pFunctionalType VARCHAR(1000),                                                              \n" +
                "	IN pMountingType VARCHAR(1000),                                                                                                \n" +
                "	IN pCartType VARCHAR(1000),                                                                                                \n" +
                "	IN pWarehouse VARCHAR(1000),        \n" +
                "	IN pIsCallFromFeasibility BOOLEAN                                                              \n" +
                ")  \n" +
                "BEGIN                                                                                  \n" +
                "	DECLARE pOffset INT(11);                                                                                                        \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                                      \n" +
                "	DECLARE pWhereLineId VARCHAR(500);                                                                            \n" +
                "	DECLARE vCartLineId VARCHAR(16383);                                                              \n" +
                "	DECLARE vWHLineId VARCHAR(16383);                                                              \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);                        \n" +
                "	SET SESSION group_concat_max_len = 500000;                                                                                  \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';                                                              \n" +
                "  \n" +
                "	IF (pLineId != 0) THEN                                                                              \n" +
                "		SET pWhereLineId = CONCAT(\" AND rl.lineID = \",pLineId);                                                                              \n" +
                "	ELSE                                                                               \n" +
                "		SET pWhereLineId = ' AND 1=1';                                                                              \n" +
                "	END IF;                                                     \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                                                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);                                                                                      \n" +
                "	ELSE                                                                                      \n" +
                "		SET pOrderBy = \"ORDER BY lineID ASC\";                                                                                      \n" +
                "	END IF;                                                                                      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = \"\") THEN                                                                                                                            \n" +
                "		SET pWhereClause = ' 1=1';                                                                               \n" +
                "	END IF;	                                                               \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN                                                                     \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');                                                                    \n" +
                "	END IF;                                                              \n" +
                "  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN                                                                     \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');                                                                    \n" +
                "	END IF;                                                               \n" +
                "  \n" +
                "	IF(pCartType IS NOT NULL AND pCartType != '') THEN                                                                     \n" +
                "		SELECT GROUP_CONCAT(refBOMLineID) INTO vCartLineId FROM (                                                              \n" +
                "			SELECT 		wm.ID, wm.Name, IFNULL(wm.cartMfr,'-1') AS cartMfr, tempKit.umidId, tempKit.refBOMLineID FROM binmst bm                                                              \n" +
                "			LEFT JOIN 	warehousemst wm ON wm.ID = bm.WarehouseID                                                              \n" +
                "			INNER JOIN 	(                                                              \n" +
                "				SELECT css.id, css.binID, css.id AS umidId, ka.refBOMLineID FROM kit_allocation ka                                                              \n" +
                "				LEFT JOIN component_sid_stock css ON css.id = ka.refUIDId                                                              \n" +
                "				WHERE ka.refSalesOrderDetID = pRefSalesOrderDetID AND `status` = 'A' AND css.deletedAt IS NULL                                                              \n" +
                "			) tempKit ON tempKit.binID = bm.id                                                              \n" +
                "			WHERE bm.deletedAt IS NULL                                                              \n" +
                "		) a WHERE FIND_IN_SET(a.cartMfr, pCartType);                                                              \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN                                                              \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vCartLineId, ') ');                                                                    \n" +
                "		END IF;                                                              \n" +
                "	END IF;                                                               \n" +
                "  \n" +
                "	IF(pWarehouse IS NOT NULL AND pWarehouse != '') THEN                                                                     \n" +
                "		SELECT GROUP_CONCAT(refBOMLineID) INTO vWHLineId FROM (                                                              \n" +
                "			SELECT 		wm.ID, wm.Name, IFNULL(wm.cartMfr,'-1') AS cartMfr, tempKit.umidId, tempKit.refBOMLineID FROM binmst bm                                                              \n" +
                "			LEFT JOIN 	warehousemst wm ON wm.ID = bm.WarehouseID                                                              \n" +
                "			INNER JOIN 	(                                                              \n" +
                "				SELECT css.id, css.binID, css.id AS umidId, ka.refBOMLineID FROM kit_allocation ka                                                              \n" +
                "				LEFT JOIN component_sid_stock css ON css.id = ka.refUIDId                                                              \n" +
                "				WHERE ka.refSalesOrderDetID = pRefSalesOrderDetID AND `status` = 'A' AND css.deletedAt IS NULL                                                              \n" +
                "			) tempKit ON tempKit.binID = bm.id                                                              \n" +
                "			WHERE bm.deletedAt IS NULL                                                              \n" +
                "		) a WHERE a.ID IN (pWarehouse);                                                              \n" +
                "  \n" +
                "		IF (vWHLineId IS NOT NULL AND vWHLineId != '') THEN                                                              \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vWHLineId, ') ');                                                                    \n" +
                "		END IF;                                                              \n" +
                "	END IF;                                                                                           \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                                                                               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                                                                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                                              \n" +
                "	ELSE	                                                                                                                              \n" +
                "		SET rowNumWhere = '';                                                                                                                              \n" +
                "	END IF;                                                                             \n" +
                "  \n" +
                "	IF (pIsCallFromFeasibility) THEN        \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildWithAvailable > 0 ');        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	CALL Sproc_GetKitConsolidateData(pPartId, FALSE);                          \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT('                                    \n" +
                "		SELECT	*                                \n" +
                "		FROM 	(                                \n" +
                "				SELECT 	id, 		qpa, 			lineID, 	unitName, 		uomID, 			PIDCode,   isCustom,                                                                         \n" +
                "					partID,		mfgPNID,		rohsName,	rohsIcon,		                                      \n" +
                "					parttypeID,	fun_getPartTypeNameByID(parttypeID) partTypeName,                                                                            \n" +
                "					mountingtypeID,	fun_getMountingTypeNameByID(mountingtypeID) mountingTypeName,	                                      \n" +
                "					component,	mfgPN,			consolidatedQPA,		consolidatedLineItemIDs,	requireQty,	requirePins, allocatedQty,                                                                            \n" +
                "					allocatedUnit,	allocatedPins,		consolidatedpartlineID,		refRfqLineitem,			consumeUnits,	consumeQty,                                                    \n" +
                "					mfgPart,	shortagePerBuild,	dnpQPA,				isInstall,       		custPNID,	custPN,	 	                    \n" +
                "					custPIDCode, 	custIsCustom, 		restrictCPNUseWithPermissionStep, 				restrictCPNUsePermanentlyStep, 	                  \n" +
                "					restrictCPNUseInBOMStep, 		restrictPackagingUsePermanently,                 \n" +
                "					restrictPackagingUseWithpermission,     (IFNULL(shortagePerBuild,0) - IFNULL(availabelStock, 0)) shortagePerBuildWithAvailable,           \n" +
                "					cpnRoHsIcon,				cpnRoHsName,            \n" +
                "					uomMismatchedStep, 			rfqLineItemIds, 	availabelStock	                                                                                      	                                    	                        	                                                                               -- , warehouseCart                                                                            \n" +
                "				FROM	(	                                                                            \n" +
                "						SELECT 		rl.id, 			IFNULL(r.qpa,0) qpa, 	                                                                            \n" +
                "								rl.lineID, 		                                                                            \n" +
                "								rl.uomID,		fun_getUnitNameByID(rl.uomID) unitName,                                                                            \n" +
                "								rl.partID,		ra.mfgPNID,		com.PIDCode, com.isCustom,	                                                                            \n" +
                "								fun_getRoHSIconByID(com.RoHSStatusID) rohsIcon, 				                                                                            \n" +
                "								fun_getRoHSNameByID(com.RoHSStatusID) rohsName,                                                                            \n" +
                "								fun_getKitAllocatedFunctionalType(', pRefSalesOrderDetID ,', ra.refRfqLineitem, com.functionalCategoryID) parttypeID,		                                                                            \n" +
                "								-- fun_getPartTypeNameByID(com.functionalCategoryID) partTypeName,                                                                            \n" +
                "								fun_getKitAllocatedMountingType(', pRefSalesOrderDetID ,', ra.refRfqLineitem, com.mountingTypeID) mountingTypeID,                                                                            \n" +
                "								-- fun_getMountingTypeNameByID(com.mountingTypeID) mountingTypeName,                                                       \n" +
                "								(                  \n" +
                "									CASE                  \n" +
                "										WHEN rl.custPNID IS NOT NULL THEN                  \n" +
                "											CONCAT((GROUP_CONCAT(DISTINCT(com.id))), \",\", (GROUP_CONCAT(DISTINCT(rl.custPNID))))                  \n" +
                "										ELSE                  \n" +
                "											(GROUP_CONCAT(DISTINCT(com.id)))                  \n" +
                "									END                  \n" +
                "								) mfgPart,                                                                         \n" +
                "								fun_getKitAllocationPIDsForComponent(ra.refRfqLineitem, ',pRefSalesOrderDetID,' , ',pPackagingAlias,') component,                                                                    \n" +
                "								fun_getKitAllocationPIDsForMfgPN(ra.refRfqLineitem, ',pRefSalesOrderDetID,' , ',pPackagingAlias,') mfgPN,                                                                     \n" +
                "								IFNULL(r.qpa,0) consolidatedQPA,                                            \n" +
                "								IFNULL(r.dnpWithoutQPA,0) dnpQPA,                                          \n" +
                "								r.isInstall,                                                                          \n" +
                "								(            \n" +
                "									CASE             \n" +
                "										WHEN ra.uomMismatchedStep = 0 THEN            \n" +
                "											0            \n" +
                "										ELSE            \n" +
                "											(IFNULL(r.qpa,0) * ', pKitQty,')            \n" +
                "									END            \n" +
                "								) requireQty,  \n" +
                "								(            \n" +
                "									CASE             \n" +
                "										WHEN ra.uomMismatchedStep = 0 THEN            \n" +
                "											0            \n" +
                "										ELSE            \n" +
                "											(IFNULL(r.qpa,0) * ', pKitQty,' * IFNULL(rl.numOfPosition, 0))            \n" +
                "									END            \n" +
                "								) requirePins,                                                                            \n" +
                "								fun_getKitAllocatedQty(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, r.consolidatedLineItemIDs, TRUE) allocatedQty,                                                                      \n" +
                "								fun_getKitAllocatedUnits(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, r.consolidatedLineItemIDs, TRUE) allocatedUnit,                                                                 \n" +
                "								fun_getKitAllocatedPin(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, r.consolidatedLineItemIDs, TRUE) allocatedPins,                                                                     \n" +
                "								fun_getShortagePerBuild(IFNULL(r.qpa,0), ',pKitQty,',0,',pRefSalesOrderDetID,',r.consolidatedLineItemIDs) shortagePerBuild,                                                                                  \n" +
                "								fun_getAvilableStockWithPackagingAliasForConsolidate(',pRefSalesOrderDetID,',r.consolidatedLineItemIDs) availabelStock,      \n" +
                "								r.consolidatedpartlineID,                            \n" +
                "								r.consolidatedLineItemIDs,                          \n" +
                "								ra.refRfqLineitem,                                                        \n" +
                "								fun_getKitConsumeUnits(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, r.consolidatedLineItemIDs, TRUE) consumeUnits,                                                        \n" +
                "								fun_getKitConsumeQty(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, r.consolidatedLineItemIDs, TRUE) consumeQty,                    \n" +
                "								rl.custPNID,		rl.custPN,	fun_getAssyPIDCodeByID(custPNID) custPIDCode, cpnCom.isCustom custIsCustom,                \n" +
                "								rl.restrictCPNUseWithPermissionStep, 	rl.restrictCPNUsePermanentlyStep, 	rl.restrictCPNUseInBOMStep,                \n" +
                "								cpnCom.restrictPackagingUsePermanently, 	cpnCom.restrictPackagingUseWithpermission,                \n" +
                "								fun_getRoHSIconByID(cpnCom.RoHSStatusID) cpnRoHsIcon,				fun_getRoHSNameByID(cpnCom.RoHSStatusID) cpnRoHsName,            \n" +
                "								ra.uomMismatchedStep,      \n" +
                "								r.consolidatedLineItemIDs AS rfqLineItemIds      \n" +
                "								-- ,	fun_getWarehouseCartByBOMLineId(ra.refRfqLineitem) warehouseCart                                                                            \n" +
                "						FROM 		temp_Sproc_GetKitConsolidateData r                                    \n" +
                "						LEFT JOIN	kit_allocation_lineitems rl ON rl.refRfqLineitem = r.rfqLineItemsID AND rl.refSalesOrderDetID = ',pRefSalesOrderDetID,'		                                                                           \n" +
                "						LEFT JOIN 	kit_allocation_lineitems_alternatepart ra ON ra.refRfqLineitem = rl.refRfqLineitem                                    \n" +
                "						LEFT JOIN 	component com ON com.id = ra.mfgPNID AND com.deletedAt IS NULL                  \n" +
                "						LEFT JOIN 	component cpnCom ON cpnCom.id = rl.custPNID AND com.deletedAt IS NULL AND cpnCom.isCPN = 1                                                                                                                                             \n" +
                "						LEFT JOIN 	(                                                                          \n" +
                "									SELECT 		ka.partId, refSalesOrderdetId, SUM(ka.allocatedQty) allocatedQty, SUM(ka.allocatedUnit) allocatedUnit                                                                          \n" +
                "									FROM 		kit_allocation ka                                                                        \n" +
                "									WHERE		ka.status = \"A\"                                                                         \n" +
                "									GROUP BY 	partid, RefSalesorderDetId                                                                           \n" +
                "								) As ka on ka.partID IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = ra.refsalesOrderdetid AND refRfqLineitem = rl.refRfqLineitem AND deletedAt IS NULL) AND                                                                       \n" +
                "										ka.refsalesOrderdetid =  ra.refsalesOrderdetid                                                                          \n" +
                "						WHERE 		ra.refSalesOrderDetID = ',pRefSalesOrderDetID,' AND ra.partcategoryID != 3 AND ra.deletedAt IS NULL ',pWhereLineId ,'                                                                        \n" +
                "								AND com.isGoodPart = 1                                                  \n" +
                "						GROUP BY 	rl.id                                                                            \n" +
                "						ORDER BY 	rl.partID                                                                            \n" +
                "					) As tempData                                    \n" +
                "			) As mainData                                \n" +
                "		WHERE', pWhereClause, ' ',vFilterWhereClause                                                                            \n" +
                "		-- GROUP BY tempData.mfgPNID' 	                                                                            \n" +
                "	);                                                                   \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS ConsolidatedResult;                                                                            \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS ConsolidatedResult AS \", @vFromSQLQuery, \" \" , rowNumWhere);                                                                             	      \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                                                                                                                            \n" +
                "	EXECUTE mainQuery;                                                                                                                            \n" +
                "	DEALLOCATE PREPARE mainQuery;                                                                                  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'TotalRecord' from ( \", @vFromSQLQuery, \") as a\");         \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                                                            \n" +
                "	EXECUTE query1;                                                                                                                            \n" +
                "	DEALLOCATE PREPARE query1;                                                                                        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM ConsolidatedResult \", pOrderBy);                                                                                                                            \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                                                            \n" +
                "	EXECUTE query2;                                                                                                                            \n" +
                "	DEALLOCATE PREPARE query2;                                                                                       \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");         \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                                                                                                            \n" +
                "	EXECUTE query3;                                                                                                                            \n" +
                "	DEALLOCATE PREPARE query3;                                                                                                                 \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetriveKitAllocationList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationList`(                                                                                                    \n" +
                "	IN pPageIndex INT(11),                                                                                                              \n" +
                "	IN pRecordPerPage INT(11),                                                                                                                \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                                              \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                                                    \n" +
                "	IN pPartId INT(11),                                                                                        \n" +
                "	IN pRefSalesOrderDetailId INT(11),                                                                            \n" +
                "	IN pLineId INT(11),                                \n" +
                "	IN pPackagingAlias BOOLEAN,                                                              \n" +
                "	IN pFunctionalType VARCHAR(1000),                                                              \n" +
                "	IN pMountingType VARCHAR(1000),                                                                                                \n" +
                "	IN pCartType VARCHAR(1000),                                                                                                \n" +
                "	IN pWarehouse VARCHAR(1000),        \n" +
                "	IN pFeasibilityQty INT(11),        \n" +
                "	IN pIsCallFromFeasibility BOOLEAN        \n" +
                ")  \n" +
                "BEGIN                                                                                        \n" +
                "	DECLARE pOffset INT(11);                                                                                                              \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                                                                        \n" +
                "	DECLARE pAllocatedSharedCount INT(11);                                                                                   \n" +
                "	DECLARE pKitQty INT(11);                                                                            \n" +
                "	DECLARE pWhereLineId VARCHAR(500);                                                                \n" +
                "	DECLARE vCartLineId VARCHAR(16383);                                                              \n" +
                "	DECLARE vWHLineId VARCHAR(16383);                                                              \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);                                                                     \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';                                                                                            \n" +
                "  \n" +
                "	IF (pLineId != 0) THEN                                                                            \n" +
                "		SET pWhereLineId = CONCAT(\" AND rl.lineID = \",pLineId);                                                                            \n" +
                "	ELSE                                                                             \n" +
                "		SET pWhereLineId = ' AND 1=1';                                                                            \n" +
                "	END IF;                                                                             \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                                                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                                                                                                              \n" +
                "	ELSE                                                                                                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                                                              \n" +
                "	END IF;	                                                                                        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                                                              \n" +
                "		SET pWhereClause = ' 1=1' ;                                                                                                              \n" +
                "	END IF;                                                                                        \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN                                                                     \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');                                                                    \n" +
                "	END IF;                                                              \n" +
                "  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN                                                                     \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');                                                                    \n" +
                "	END IF;                                                              \n" +
                "  \n" +
                "	IF(pCartType IS NOT NULL AND pCartType != '') THEN                                                                     \n" +
                "		SELECT GROUP_CONCAT(refBOMLineID) INTO vCartLineId FROM (                                                              \n" +
                "			SELECT 		wm.ID, wm.Name, IFNULL(wm.cartMfr,'-1') AS cartMfr, tempKit.umidId, tempKit.refBOMLineID FROM binmst bm                                                              \n" +
                "			LEFT JOIN 	warehousemst wm ON wm.ID = bm.WarehouseID                                                              \n" +
                "			INNER JOIN 	(                                                              \n" +
                "				SELECT css.id, css.binID, css.id AS umidId, ka.refBOMLineID FROM kit_allocation ka                                                              \n" +
                "				LEFT JOIN component_sid_stock css ON css.id = ka.refUIDId                                                              \n" +
                "				WHERE ka.refSalesOrderDetID = pRefSalesOrderDetailId AND ka.assyID = pPartId AND `status` = 'A' AND css.deletedAt IS NULL                                                              \n" +
                "			) tempKit ON tempKit.binID = bm.id                                                              \n" +
                "			WHERE bm.deletedAt IS NULL                                                              \n" +
                "		) a WHERE FIND_IN_SET(a.cartMfr, pCartType);                                                              \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN                                                              \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vCartLineId, ') ');                                                                    \n" +
                "		END IF;                                                              \n" +
                "	END IF;                                                               \n" +
                "  \n" +
                "	IF(pWarehouse IS NOT NULL AND pWarehouse != '') THEN                                                                     \n" +
                "		SELECT GROUP_CONCAT(refBOMLineID) INTO vWHLineId FROM (                                                              \n" +
                "			SELECT 		wm.ID, wm.Name, IFNULL(wm.cartMfr,'-1') AS cartMfr, tempKit.umidId, tempKit.refBOMLineID FROM binmst bm                                                              \n" +
                "			LEFT JOIN 	warehousemst wm ON wm.ID = bm.WarehouseID                                                              \n" +
                "			INNER JOIN 	(                                                              \n" +
                "				SELECT css.id, css.binID, css.id AS umidId, ka.refBOMLineID FROM kit_allocation ka                                                              \n" +
                "				LEFT JOIN component_sid_stock css ON css.id = ka.refUIDId                                                              \n" +
                "				WHERE ka.refSalesOrderDetID = pRefSalesOrderDetailId AND ka.assyID = pPartId AND `status` = 'A' AND css.deletedAt IS NULL                                                              \n" +
                "			) tempKit ON tempKit.binID = bm.id                                                              \n" +
                "			WHERE bm.deletedAt IS NULL                                                              \n" +
                "		) a WHERE a.ID IN (pWarehouse);                                                              \n" +
                "  \n" +
                "		IF (vWHLineId IS NOT NULL AND vWHLineId != '') THEN                                                              \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vWHLineId, ') ');                                                                    \n" +
                "		END IF;                                                              \n" +
                "	END IF;                                                               \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                                                               \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                                                                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                              \n" +
                "	ELSE	                                                                                                              \n" +
                "		SET rowNumWhere = '';                                                                                                              \n" +
                "	END IF;	                               \n" +
                "  \n" +
                "	IF (pIsCallFromFeasibility AND pFeasibilityQty IS NOT NULL) THEN        \n" +
                "		SET pKitQty = pFeasibilityQty;        \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildWithAvailable > 0 ');                                                                    \n" +
                "	ELSE        \n" +
                "		SELECT 	totalAssyBuildQty         \n" +
                "		INTO 	pKitQty         \n" +
                "		FROM 	kit_allocation_assy_detail         \n" +
                "		WHERE 	partId = pPartId         \n" +
                "				AND refSalesOrderDetID = pRefSalesOrderDetailId         \n" +
                "				AND deletedAt IS NULL;                                                                                  \n" +
                "	END IF;        \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT('                                     \n" +
                "		SELECT		*                                \n" +
                "		FROM		(					                                \n" +
                "					SELECT		id,				qpa,				lineID,				uomID,			                                      \n" +
                "							unitName, 			partID, 			refRfqLineitem,                 refsalesOrderdetid,                                                                 \n" +
                "							mfgPNID,			PIDCode,	isCustom,		rohsIcon,			rohsName,		                                      \n" +
                "							parttypeID,			fun_getPartTypeNameByID(parttypeID) partTypeName,		                                      \n" +
                "							mountingtypeID,            	fun_getMountingTypeNameByID(mountingtypeID) mountingTypeName,	                                      \n" +
                "							(            \n" +
                "								CASE             \n" +
                "									WHEN uomMismatchedStep = 0 THEN            \n" +
                "										0            \n" +
                "									ELSE            \n" +
                "										(qpa * IFNULL(',pKitQty,',0))            \n" +
                "								END            \n" +
                "							) requiredQtyBuild,  \n" +
                "							(            \n" +
                "								CASE             \n" +
                "									WHEN uomMismatchedStep = 0 THEN            \n" +
                "										0            \n" +
                "									ELSE            \n" +
                "										(qpa * IFNULL(',pKitQty,',0) * IFNULL(numOfPosition, 0))            \n" +
                "								END            \n" +
                "							) requirePinsBuild,  \n" +
                "							mfgPart,			component,			mfgPN,			                                      \n" +
                "							allocatedQty,			allocatedUnit,			allocatedPins, 			allocated_shared,		                                      \n" +
                "							fun_getShortagePerBuild(qpa, ',pKitQty,',',pPartId,',',pRefSalesOrderDetailId,',CAST(refRfqLineitem as CHAR(255))) shortagePerBuild,		                                      \n" +
                "							fun_getFreeToShareAmongOtherKits(qpa, ',pKitQty,',',pPartId,',',pRefSalesOrderDetailId,',refRfqLineitem) freeToShareAmongOtherKits,	                                      \n" +
                "							allocatedSTKPosition,		availabelStock,        \n" +
                "							(IFNULL(fun_getShortagePerBuild(qpa, ',pKitQty,',',pPartId,',',pRefSalesOrderDetailId,',CAST(refRfqLineitem AS CHAR(255))), 0) - IFNULL(availabelStock, 0)) shortagePerBuildWithAvailable,                                                                                                    \n" +
                "							numOfPosition,			                                      \n" +
                "							(IFNULL(fun_getShortagePerBuild(qpa, ',pKitQty,',',pPartId,',',pRefSalesOrderDetailId,',refRfqLineitem),0) * IFNULL(numOfPosition,0)) shortagePin,			                                      \n" +
                "							consumeUnits,			consumeQty,			dnpQty,                                          \n" +
                "							isInstall,			isBuyDNPQty, 			lineCleanStatus,	                                    \n" +
                "							description,			custPNID,			custPN,			custPIDCode,  custIsCustom,                \n" +
                "							restrictCPNUseWithPermissionStep, 				restrictCPNUsePermanentlyStep, 	                  \n" +
                "							restrictCPNUseInBOMStep,					restrictPackagingUsePermanently,                 \n" +
                "							restrictPackagingUseWithpermission,				                \n" +
                "							cpnRoHsIcon,							cpnRoHsName,            \n" +
                "							uomMismatchedStep	                                                                                      	                                                    \n" +
                "					FROM		(                                                                                  \n" +
                "								SELECT 		rl.id,		ra.refsalesOrderdetid,	 			                                      \n" +
                "										(                                      \n" +
                "											CASE 	WHEN rl.isPurchase = 1 OR rl.isInstall = 1 THEN                                  \n" +
                "												(                                  \n" +
                "													IFNULL(rl.qpa,0) + IF(rl.isBuyDNPQty = \"Y\" OR rl.isBuyDNPQty = \"C\", IFNULL(rl.dnpQty,0), 0)                                  \n" +
                "												)                                  \n" +
                "												ELSE                                  \n" +
                "												(                                  \n" +
                "													IF(rl.isBuyDNPQty = \"Y\" OR rl.isBuyDNPQty = \"C\", IFNULL(rl.dnpQty,0), 0)                                  \n" +
                "												)                                  \n" +
                "											END                             \n" +
                "										) AS qpa,                                      \n" +
                "										IFNULL(rl.dnpQty,0) dnpQty,	rl.lineID, 	CONCAT(IFNULL(rl.description,''''), IFNULL(ra.description,'''')) AS description, 		                                                                                  \n" +
                "										rl.uomID,		fun_getUnitNameByID(rl.uomID) unitName,                                                                                  \n" +
                "										rl.partID,		rl.refRfqLineitem,		ra.mfgPNID,		com.PIDCode,    com.isCustom,                                                  \n" +
                "										rl.numOfPosition,	rl.isInstall,			rl.isBuyDNPQty,	                                                                                  \n" +
                "										fun_getRoHSIconByID(com.RoHSStatusID) rohsIcon, 				                                                                                  \n" +
                "										fun_getRoHSNameByID(com.RoHSStatusID) rohsName,                                                                                  \n" +
                "										fun_getKitAllocatedFunctionalType(', pRefSalesOrderDetailId ,', ra.refRfqLineitem, com.functionalCategoryID) parttypeID,		                                                                            \n" +
                "										-- fun_getPartTypeNameByID(com.functionalCategoryID) partTypeName,                                                                            \n" +
                "										fun_getKitAllocatedMountingType(', pRefSalesOrderDetailId ,', ra.refRfqLineitem, com.mountingTypeID) mountingTypeID,                                                                            \n" +
                "										-- fun_getMountingTypeNameByID(com.mountingTypeID) mountingTypeName,                                                                                  \n" +
                "										-- (rl.qpa * IFNULL(',pKitQty,',0)) requiredQtyBuild,                                                                                  \n" +
                "										(                  \n" +
                "											CASE                  \n" +
                "												WHEN rl.custPNID IS NOT NULL THEN                  \n" +
                "													CONCAT((GROUP_CONCAT(DISTINCT(com.id))), \",\", (GROUP_CONCAT(DISTINCT(rl.custPNID))))                  \n" +
                "												ELSE                  \n" +
                "													(GROUP_CONCAT(DISTINCT(com.id)))                  \n" +
                "											END                  \n" +
                "										) mfgPart,                  \n" +
                "										fun_getKitAllocationPIDsForComponent(ra.refRfqLineitem, ',pRefSalesOrderDetailId,', ',pPackagingAlias,') component,                                                                      \n" +
                "										fun_getKitAllocationPIDsForMfgPN(ra.refRfqLineitem, ',pRefSalesOrderDetailId,' , ',pPackagingAlias,') mfgPN,                                                                       \n" +
                "										fun_getKitAllocatedQty(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, NULL, FALSE) allocatedQty,                                                                        \n" +
                "										fun_getKitAllocatedUnits(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, NULL, FALSE) allocatedUnit,                                                                                \n" +
                "										fun_getKitAllocatedPin(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, NULL, FALSE) allocatedPins,                                                                \n" +
                "										fun_getKitConsumeUnits(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, NULL, FALSE) consumeUnits,                                                          \n" +
                "										fun_getKitConsumeQty(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, NULL, FALSE) consumeQty,                                                          \n" +
                "										(                                                                                        \n" +
                "											CASE 	WHEN (SELECT COUNT(*) FROM (SELECT * FROM kit_allocation kit_all WHERE kit_all.partId = ra.mfgPNID AND kit_all.status = \"A\" GROUP BY kit_all.refBOMLineID) a) > 1 THEN                                                                                        \n" +
                "													(SELECT SUM(ka.allocatedQty) FROM kit_allocation ka WHERE ka.partId = ra.mfgPNID AND `status` = \"A\" GROUP BY ka.partId)                                                                                        \n" +
                "												ELSE 0                                                                                        \n" +
                "											END                                                                                        \n" +
                "										) allocated_shared,                                                                                   \n" +
                "										-- fun_getShortagePerBuild(rl.qpa, ',pKitQty,',',pPartId,',',pRefSalesOrderDetailId,',rl.refRfqLineitem) shortagePerBuild,                                                                                  \n" +
                "										-- fun_getFreeToShareAmongOtherKits(rl.qpa, ',pKitQty,',',pPartId,',',pRefSalesOrderDetailId,',rl.refRfqLineitem) freeToShareAmongOtherKits,                                                                                  \n" +
                "										fun_getAllocatedSTKPosition(',pRefSalesOrderDetailId,', ra.partId, rl.refRfqLineitem) allocatedSTKPosition,                                                                                         \n" +
                "										fun_getAvilableStockWithPackagingAlias(rl.refRfqLineitem,',pPartId,',',pRefSalesOrderDetailId,') availabelStock,                  \n" +
                "										fun_getBOMLineCleanStatusErrorCategoryWise(ra.refRfqLineItemAlternatePartId, NULL, NULL, NULL, 2) lineCleanStatus,                    \n" +
                "										rl.custPNID,		rl.custPN,	fun_getAssyPIDCodeByID(custPNID) custPIDCode,  cpnCom.isCustom custIsCustom,                 \n" +
                "										rl.restrictCPNUseWithPermissionStep, 	rl.restrictCPNUsePermanentlyStep, 		rl.restrictCPNUseInBOMStep,                \n" +
                "										cpnCom.restrictPackagingUsePermanently, 	cpnCom.restrictPackagingUseWithpermission,		                \n" +
                "										fun_getRoHSIconByID(cpnCom.RoHSStatusID) cpnRoHsIcon,					fun_getRoHSNameByID(cpnCom.RoHSStatusID) cpnRoHsName,            \n" +
                "										ra.uomMismatchedStep                \n" +
                "								FROM		kit_allocation_lineitems_alternatepart ra                                                                                                                            \n" +
                "								LEFT JOIN 	kit_allocation_lineitems rl ON rl.refRfqLineitem = ra.refRfqLineitem AND rl.refsalesOrderdetid =  ra.refsalesOrderdetid AND rl.partID = ',pPartId,' AND rl.deletedAt IS NULL                                                                                  \n" +
                "								LEFT JOIN 	component com ON com.id = ra.mfgPNID AND com.deletedAt IS NULL                                                                                  \n" +
                "								LEFT JOIN 	component cpnCom ON cpnCom.id = rl.custPNID AND com.deletedAt IS NULL AND cpnCom.isCPN = 1                                                                                  \n" +
                "								WHERE		ra.deletedAt IS NULL AND ra.refSalesOrderDetID = ',pRefSalesOrderDetailId,' AND com.isGoodPart = 1 AND rl.partID = ',pPartId,'',pWhereLineId ,'                                                                             \n" +
                "								GROUP BY 	rl.id                                                                                   \n" +
                "								ORDER BY 	rl.lineID                                                                                  \n" +
                "							) As tempData                                  \n" +
                "				) As mainData                                                                                \n" +
                "			WHERE', pWhereClause,' ', vFilterWhereClause                                                                                   \n" +
                "	);                                                                                  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS rfqLineItemsKitsResult;                                                            \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS rfqLineItemsKitsResult AS \", @vFromSQLQuery, \" \" , rowNumWhere);                                                                                 	        \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                                                                                                                                  \n" +
                "	EXECUTE mainQuery;                                                                                                                                  \n" +
                "	DEALLOCATE PREPARE mainQuery;                                                                                        \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'COUNT(*)' from ( \", @vFromSQLQuery, \") as a\");                                                                                            \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                                                                  \n" +
                "	EXECUTE query1;                                                                                                                                  \n" +
                "	DEALLOCATE PREPARE query1;                                                                                              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM rfqLineItemsKitsResult \", pOrderBy);                                                                                                                                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                                                                  \n" +
                "	EXECUTE query2;                                                                                                                                  \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");         \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                                                                                                            \n" +
                "	EXECUTE query3;                                                                                                                            \n" +
                "	DEALLOCATE PREPARE query3;                                                                                                                              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE rfqLineItemsKitsResult;                                                                                    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2661,'2.00','V1','Sproc_CreateKitAllocationAssyDetail, Sproc_RetriveKitAllocationConsolidatedList, Sproc_RetriveKitAllocationList - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2661:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "alter table rfq_assemblies  \n" +
                "add column isActivityStart tinyint(1) not null default 0;  \n" +
                "  \n" +
                "alter table rfq_assemblies  \n" +
                "add column activityStartAt datetime default null;  \n" +
                "  \n" +
                "alter table rfq_assemblies  \n" +
                "add column activityStartBy int(11) default null;  \n" +
                "  \n" +
                "ALTER TABLE rfq_assemblies   \n" +
                "ADD CONSTRAINT FK_rfq_assemblies_activityStartBy  \n" +
                "FOREIGN KEY (activityStartBy) REFERENCES users (`id`);  \n" +
                "  \n" +
                "alter table rfq_assemblies  \n" +
                "add column activityStopAt datetime default null;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2662,'2.00','V1','RFQ Start stop costing activity related change - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2662:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),                      \n" +
                "    IN pEmployeeID INT(11),          \n" +
                "	IN pCustomerIds VARCHAR(16383),    \n" +
                "	IN pAssyTypeIds VARCHAR(16383),              \n" +
                "	IN pRfqTypeIds VARCHAR(16383),              \n" +
                "	IN pJobTypeIds VARCHAR(16383),              \n" +
                "	IN pAssyIds VARCHAR(16383),             \n" +
                "	IN pAssyNicknameIds LONGTEXT,         \n" +
                "    IN pIsExportControlled TINYINT(1),          \n" +
                "    IN pIsQuoteOverdue TINYINT(1),          \n" +
                "    IN pIsSubAssemblyBOMs TINYINT(1),          \n" +
                "    IN pIsPriceGroupQuoteAssembly TINYINT(1),    \n" +
                "     IN pFromDate DATE,              \n" +
                "    IN pToDate DATE,    \n" +
                "    IN pOlderThenDays int(11)          \n" +
                "    )  \n" +
                "BEGIN                  \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;         \n" +
                "	DECLARE vTextAngularKeyCode VARCHAR(500);          \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);             \n" +
                "    DECLARE vTimeZone VARCHAR(50);             \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;              \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;           \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "  		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;          \n" +
                "  \n" +
                "    IF(pCustomerIds IS NOT NULL AND pCustomerIds != '') THEN                   \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (', pCustomerIds, ') ');                  \n" +
                "	END IF;         \n" +
                "  \n" +
                "	IF(pAssyTypeIds IS NOT NULL AND pAssyTypeIds != '') THEN                   \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assemblyTypeID in (', pAssyTypeIds, ') ');                  \n" +
                "	END IF;         \n" +
                "  \n" +
                "	IF(pRfqTypeIds IS NOT NULL AND pRfqTypeIds != '') THEN                   \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND RFQTypeID in (', pRfqTypeIds, ') ');                  \n" +
                "	END IF;         \n" +
                "  \n" +
                "    IF(pJobTypeIds IS NOT NULL AND pJobTypeIds != '') THEN                   \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND jobTypeID in (', pJobTypeIds, ') ');                  \n" +
                "	END IF;          \n" +
                "  \n" +
                "     IF(pAssyIds IS NOT NULL AND pAssyIds != '') THEN                   \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND partID in (', pAssyIds, ') ');                  \n" +
                "	 END IF;          \n" +
                "  \n" +
                "     IF(pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN          \n" +
                "		SET pWhereClause=CONCAT(pWhereClause,' and partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' ))');          \n" +
                "	 END IF;     \n" +
                "  \n" +
                "	if (pFromDate is not null and pToDate is not null) then    \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND        \n" +
                "		   (CASE      \n" +
                "			WHEN rfq_statusID = 1 THEN      \n" +
                "				DATE(quoteDueDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")    \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN      \n" +
                "				DATE(quoteSubmitDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")    \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN      \n" +
                "				DATE(quoteClosedDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")    \n" +
                "		    END)');          \n" +
                "	end if;    \n" +
                "  \n" +
                "	if(pOlderThenDays is not null) then    \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND     \n" +
                "		 (CASE      \n" +
                "			WHEN rfq_statusID = 1 THEN      \n" +
                "				DATEDIFF(fun_DatetimetoUTCDateTime(), quoteDueDate) > ',pOlderThenDays,'    \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN      \n" +
                "				DATEDIFF(fun_DatetimetoUTCDateTime(), quoteSubmitDate) > ',pOlderThenDays,'    \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN      \n" +
                "				DATEDIFF(fun_DatetimetoUTCDateTime(), quoteClosedDate) > ',pOlderThenDays,'    \n" +
                "		    END)    \n" +
                "  \n" +
                "		');    \n" +
                "	end if;    \n" +
                "  \n" +
                "	IF pIsQuoteOverdue = 1 THEN     		              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND        \n" +
                "        (CASE      \n" +
                "        WHEN rfq_statusID = 1 THEN      \n" +
                "				quoteDueDate < fun_DatetimetoUTCDateTime()       \n" +
                "         WHEN (rfq_statusID = 2 OR rfq_statusID = 3 ) THEN      \n" +
                "				quoteSubmitDate > quoteDueDate       \n" +
                "		WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN      \n" +
                "				quoteClosedDate	> quoteDueDate		      \n" +
                "            END)');          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF pIsSubAssemblyBOMs = 1 THEN           \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assyLevel > 1');          \n" +
                "	END IF;         \n" +
                "  \n" +
                "    /* IF pIsPriceGroupQuoteAssembly = 1 THEN           \n" +
                "		SET pWhereClause = concat(pWhereClause, ' AND assyLevel > 1');          \n" +
                "	END IF; */        \n" +
                "  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();    \n" +
                "	/* DECLARE SQLStatement varchar(255); */    \n" +
                "   #DROP TEMPORARY TABLE IF EXISTS Results;    \n" +
                "    SET @temp_Sproc_GetRFQList = CONCAT(\"SELECT (select COUNT(1) from rfq_lineitems rl where rl.partID = ra.partID and rl.isDeleted = 0) AS lineItemCount, rf.id, ra.partID,    \n" +
                "			count(1) over (partition by rf.id) AS quoteGroupAssyCount,      \n" +
                "            fun_getUserNameByEmployeID(rf.salesCommissionTo) salesCommissionTo,    \n" +
                "            (select count(1) from rfq_price_group rpg where refRFQID = rf.id and rpg.isDeleted = 0) priceGroupCount,        \n" +
                "            fun_getExportControlDetailFromPartID(ra.partID) as isExportControl,          \n" +
                "			#(SELECT COUNT(1) FROM rfq_assemblies WHERE rfqrefID = rf.id AND isDeleted = 0) AS quoteGroupAssyCount,    \n" +
                "			(SELECT MAX(pr.`level`)+1 FROM part_sub_assy_relationship pr WHERE pr.partID = ra.partID AND isDeleted = 0) AS assyLevel,    \n" +
                "			(SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id AND quoteNumber IS NOT NULL) AS revisedQuoteCount,    \n" +
                "			(SELECT max(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id) AS lastQuoteID, ra.isSummaryComplete,    \n" +
                "			part.PIDCode,part.isCustom,part.RoHSStatusID, part.mfgPN, part.custAssyPN, part.mfgPNDescription,part.rev,part.assyCode,part.nickName,ro.rohsIcon,    \n" +
                "			fun_getUserNameByEmployeID(rf.employeeID) AS rfqCreatedBy,    \n" +
                "			fun_getUserNameByID(ra.Updatedby) AS rfqModifiedBy,    \n" +
                "			part.liveVersion AS liveInternalVersion,    \n" +
                "			(SELECT fun_getBomProgressBar(IFNULL(ra.partID,0))) AS bomProgress,    \n" +
                "			(SELECT fun_getMaterialProgress(ra.id))AS materialProgress,    \n" +
                "			(CASE WHEN (SELECT fun_getCustomPartProgress(ra.id)) = -1 THEN 'N/A' ELSE (SELECT fun_getCustomPartProgress(ra.id)) END)AS customPartProgress,    \n" +
                "			(CASE WHEN ra.status = 1 THEN 'In Progress'    \n" +
                "				  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'    \n" +
                "				  WHEN ra.status = 3 THEN 'Won'        \n" +
                "				  WHEN ra.status = 4 THEN 'Lost'    \n" +
                "				  WHEN ra.status = 5 THEN 'Canceled' END) `status` ,    \n" +
                "			ra.status rfq_statusID,  \n" +
                "			(CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending'    \n" +
                "					WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote'    \n" +
                "					WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'    \n" +
                "					WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,    \n" +
                "			ro.name AS `rohsComplientConvertedValue`,    \n" +
                "			(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'    \n" +
                "				WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,    \n" +
                "			(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'    \n" +
                "				WHEN (`ra`.`timePeriod` = 1) THEN 'W'    \n" +
                "				WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,ra.jobTypeID,ra.assemblyTypeID,ra.RFQTypeID,        \n" +
                "			fun_getjobTypeByID(ra.jobTypeID) AS JobType, fun_getrfqTypeByID(ra.RFQTypeID) AS OrderType, CONCAT('(',cu.mfgCode,') ',cu.mfgName) AS Customer, cu.id customerID,    \n" +
                "			fun_getUserNameByID(ra.quoteSubmittedBy) AS RFQ_SubmitedBy, ra.winPrice,ra.winQuantity,    \n" +
                "			ra.quoteInDate, cast(ra.quoteDueDate as DATE) as quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,    \n" +
                "			part.isActivityStart, fun_getMfgCodeByPartID(ra.partID) customerCode,  \n" +
                "			(CASE WHEN part.isActivityStart THEN u.username ELSE '' END )AS username, part.activityStartBy,  \n" +
                "			TIMESTAMPDIFF(SECOND, part.activityStartAt,fun_DatetimetoUTCDateTime()) activityStartAt,   \n" +
                "            ra.isActivityStart as isCostingActivityStart, (CASE WHEN ra.isActivityStart THEN ur.username ELSE '' END )AS costingUserName, ra.activityStartBy as costingActivityBy,  \n" +
                "			TIMESTAMPDIFF(SECOND, ra.activityStartAt,fun_DatetimetoUTCDateTime()) costingActivityStartAt,   \n" +
                "			ra.isBOMVerified,fun_getTextAngularData(ra.reason,'\",vTextAngularKeyCode,\"') reason, fun_getUserNameByID(ra.quoteClosedBy) AS RFQ_ClosedBy,ra.quoteClosedDate,                               \n" +
                "            fun_getUserNameByID(ra.updatedBy) updatedby,                        \n" +
                "			fun_getUserNameByID(ra.createdBy) createdby,                         \n" +
                "			fun_getRoleByID(ra.createByRoleId) createdbyRole,                        \n" +
                "			fun_getRoleByID(ra.updateByRoleId) updatedbyRole,                        \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                        \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,                       \n" +
                "			fun_getRfqLabourPercentage(ra.id) laborPercentage                        \n" +
                "		FROM rfqforms rf    \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND ra.isdeleted = 0    \n" +
                "        LEFT OUTER JOIN users ur ON  ur.id = ra.activityStartBy    \n" +
                "		JOIN mfgcodemst cu ON cu.id = rf.customerId AND cu.isdeleted = 0    \n" +
                "		JOIN component part ON part.id = ra.partID AND part.category = 3 AND part.isdeleted = 0    \n" +
                "		JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0    \n" +
                "		LEFT OUTER JOIN users u ON  u.id = part.activityStartBy    \n" +
                "		WHERE rf.isdeleted = 0                      \n" +
                "        and (case when (select count(1) from employee_mfg_mapping where employeeId = \",pEmployeeID,\" and isDeleted = 0) > 0 then                       \n" +
                "		exists (select 1 from employee_mfg_mapping where mfgCodeId =  cu.id and employeeId = \",pEmployeeID,\" and isDeleted = 0)                      \n" +
                "		else 1=1 end)                      \n" +
                "        \");    \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"quoteDueDate DESC\") ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF pIsExportControlled = 1  AND pIsPriceGroupQuoteAssembly = 1 THEN           \n" +
                "		SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\" AND priceGroupCount > 1 ');          \n" +
                "	ELSEIF pIsExportControlled = 1 THEN        \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\"');              \n" +
                "	ELSEIF pIsExportControlled = 0 AND pIsPriceGroupQuoteAssembly = 1 THEN        \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having priceGroupCount > 0 ');                \n" +
                "	END IF;        \n" +
                "	/* to get total count of rows */       \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause);		    \n" +
                "			PREPARE query2 FROM @SQLStatement2;      \n" +
                "			EXECUTE query2;      \n" +
                "			DEALLOCATE PREPARE query2;    \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetRFQList,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                          			                        			     \n" +
                "			PREPARE query1 FROM @SQLStatement2;      \n" +
                "			EXECUTE query1;      \n" +
                "			DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                /* **************************** Add Script Version -> 31-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2663,'2.00','V1','Quote page Custom part related changes related change - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2663:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(                   \n" +
                "    IN tableName VARCHAR(255),                   \n" +
                "    IN IDs LONGTEXT,                   \n" +
                "    IN deletedBy INT,                   \n" +
                "    IN entityID VARCHAR(255),                   \n" +
                "    IN refrenceIDs LONGTEXT,        \n" +
                "    IN countList INT,                        \n" +
                "    IN pRoleID INT                        \n" +
                ")  \n" +
                "BEGIN                                                    \n" +
                "IF tableName=\"employees\" THEN                   \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;                   \n" +
                "IF tableName=\"eco_type_category\" THEN                   \n" +
                "     CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);               \n" +
                "END IF;                   \n" +
                "IF tableName=\"eco_type_values\" THEN                   \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);             \n" +
                "END IF;                   \n" +
                "IF tableName=\"customers\" THEN                   \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                 \n" +
                "END IF;                   \n" +
                "IF tableName=\"certificate_standards\" THEN                   \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);               \n" +
                "END IF;                   \n" +
                "IF tableName=\"department\" THEN                   \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                   \n" +
                "END IF;                   \n" +
                "IF tableName=\"genericcategory\" THEN                   \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;                   \n" +
                "IF tableName=\"equipment\" THEN                   \n" +
                "    CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;                                           \n" +
                "IF tableName=\"master_templates\" THEN                   \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;                   \n" +
                "IF tableName=\"operations\" THEN                   \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);             \n" +
                "END IF;                   \n" +
                "IF tableName=\"workorder\" THEN                   \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;                   \n" +
                "IF tableName=\"roles\" THEN                  \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;                   \n" +
                "IF tableName=\"standard_class\" THEN                   \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;                   \n" +
                "IF tableName=\"dataelement\" THEN                   \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);        \n" +
                "END IF;                   \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN                   \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);              \n" +
                "END IF;                   \n" +
                "IF tableName=\"component\" THEN                   \n" +
                "    CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;                   \n" +
                "IF tableName=\"workorder_cluster\" THEN                    \n" +
                "    CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);        \n" +
                "END IF;                   \n" +
                "IF tableName=\"workorder_operation\" THEN                  \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);        \n" +
                "END IF;                   \n" +
                "IF tableName=\"workorder_operation_part\" THEN                   \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);               \n" +
                "END IF;                   \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN                   \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                 \n" +
                "END IF;                   \n" +
                "IF tableName=\"workorder_operation_employee\" THEN                   \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                \n" +
                "END IF;                   \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN                   \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);               \n" +
                "END IF;                   \n" +
                "IF tableName=\"entity\" THEN                   \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;                   \n" +
                "IF tableName=\"salesordermst\" THEN                   \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                 \n" +
                "END IF;                   \n" +
                "IF tableName=\"mfgcodemst\" THEN                   \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);             \n" +
                "END IF;                   \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN                   \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);          \n" +
                "END IF;                   \n" +
                "IF tableName=\"shippedassembly\" THEN                   \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;                   \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN                   \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);         \n" +
                "END IF;                   \n" +
                "IF tableName=\"br_label_template\" THEN                   \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);         \n" +
                "END IF;                   \n" +
                "IF tableName=\"measurement_types\" THEN                   \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                 \n" +
                "END IF;                   \n" +
                "IF tableName=\"uoms\" THEN                   \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;                   \n" +
                "IF tableName=\"jobtypes\" THEN                   \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;                   \n" +
                "IF tableName=\"rfqtype\" THEN                   \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                 \n" +
                "END IF;                   \n" +
                "IF tableName=\"reasonmst\" THEN                   \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;                   \n" +
                "IF tableName=\"component_sid_stock\" THEN         \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;                   \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN          \n" +
                "    CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);           \n" +
                "END IF;                   \n" +
                "IF tableName=\"chart_templatemst\" THEN                    \n" +
                "    CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                   \n" +
                "IF tableName=\"shipping_requestdet\" THEN                   \n" +
                "    CALL Sproc_checkDelete_shipping_requestdet(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;                   \n" +
                "IF tableName=\"chart_rawdata_category\" THEN                   \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);             \n" +
                "END IF;                          \n" +
                "IF tableName=\"rfq_lineitems\" THEN                   \n" +
                "      CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                        \n" +
                "END IF;                   \n" +
                "IF tableName=\"requirement\" THEN                   \n" +
                "    CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);         \n" +
                "END IF;                   \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN              \n" +
                "    CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                 \n" +
                "END IF;                   \n" +
                "IF tableName=\"customer_addresses\" THEN                   \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                 \n" +
                "END IF;                   \n" +
                "IF tableName=\"rfqforms\" THEN                   \n" +
                "    CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                 \n" +
                "END IF;                   \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN                   \n" +
                "    CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;                   \n" +
                "IF tableName=\"who_bought_who\" THEN                   \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);        \n" +
                "END IF;                   \n" +
                "IF tableName=\"rfq_parttypemst\" THEN                   \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;                   \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN                   \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);        \n" +
                "END IF;                   \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN                   \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;             \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                   \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                 \n" +
                "END IF;                                          \n" +
                "IF tableName=\"cost_category\" THEN                   \n" +
                "    CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                             \n" +
                "END IF;                           \n" +
                "IF tableName=\"chartypemst\" THEN                   \n" +
                "    CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;          \n" +
                "IF tableName=\"countrymst\" THEN          \n" +
                "     CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;        \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN          \n" +
                "     CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;        \n" +
                "IF tableName=\"rfq_assy_typemst\" THEN        \n" +
                "     CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                    \n" +
                "END IF;                                                                  \n" +
                "IF tableName=\"warehousemst\" THEN        \n" +
                "     CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                     \n" +
                "END IF;                                                               \n" +
                "IF tableName=\"binmst\" THEN        \n" +
                "     CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                    \n" +
                "END IF;                                                           \n" +
                "IF tableName=\"rackmst\" THEN        \n" +
                "     CALL Sproc_checkDelete_rackmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                    \n" +
                "END IF;              \n" +
                "IF tableName=\"component_logicalgroup\" THEN                                                              \n" +
                "     CALL Sproc_checkDelete_component_logical_group(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                    \n" +
                "END IF;                                                           \n" +
                "IF tableName=\"packing_slip_material_receive\" THEN                                                              \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);         \n" +
                "END IF;                                                      \n" +
                "IF tableName=\"packing_slip_material_receive_det\" THEN                                                              \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive_det(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                    \n" +
                "END IF;                                                      \n" +
                "IF tableName=\"packing_slip_track_number\" THEN                                                              \n" +
                "     CALL Sproc_checkDelete_packing_slip_track_number(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                    \n" +
                "END IF;                                                   \n" +
                "IF tableName=\"reserve_stock_request\" THEN                                                  \n" +
                "       	 CALL Sproc_checkDelete_reserve_stock_request(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                  \n" +
                "END IF;             \n" +
                "IF tableName=\"component_packagingmst\" THEN                                                                \n" +
                "     CALL Sproc_checkDelete_component_packagingmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;           \n" +
                "IF tableName=\"workorder_trans_narrative_history\" THEN                                                                \n" +
                "     CALL Sproc_checkDelete_workorder_trans_narrative_history(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;                                               \n" +
                "IF tableName=\"scannermst\" THEN                                                                \n" +
                "     CALL Sproc_checkDelete_Scanner(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;                                              \n" +
                "IF tableName=\"component_alternatepn_validations\" THEN                                                               \n" +
                "     CALL Sproc_checkDelete_Alias_Parts_Validation(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);        \n" +
                "END IF;        \n" +
                "IF tableName=\"workorder_operation_equipment_feeder_details\" THEN                    \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment_feeder_details(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                                      \n" +
                "IF tableName=\"component_price_break_details\" THEN                    \n" +
                "    CALL Sproc_checkDelete_component_price_break_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                                       \n" +
                "IF tableName=\"department_location\" THEN                    \n" +
                "    CALL Sproc_checkDelete_department_location(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                                                   \n" +
                "IF tableName=\"purchase_parts_details\" THEN                    \n" +
                "    CALL Sproc_checkDelete_purchase_parts_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                                                   \n" +
                "IF tableName=\"rfq_rohsmst\" THEN                    \n" +
                "    CALL Sproc_checkDelete_rfq_rohsmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                              \n" +
                "IF tableName=\"component_partstatusmst\" THEN                    \n" +
                "    CALL Sproc_checkDelete_component_partstatusmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                              \n" +
                "IF tableName=\"workorder_trans_umid_details\" THEN                    \n" +
                "    CALL Sproc_checkDelete_workorder_trans_umid_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                       \n" +
                "IF tableName=\"labor_cost_template\" THEN                    \n" +
                "    CALL Sproc_checkDelete_labor_cost_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                                                      \n" +
                "IF tableName=\"rfq_packagecasetypemst\" THEN                    \n" +
                "    CALL Sproc_checkDelete_rfq_packagecasetypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                    \n" +
                "END IF;                  \n" +
                "IF tableName=\"component_dynamic_attribute\" THEN                    \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                    \n" +
                "END IF;                  \n" +
                "IF tableName=\"component_dynamic_attribute_mapping_part\" THEN                    \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute_mapping_part(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                    \n" +
                "END IF;                \n" +
                "IF tableName=\"labeltemplatesmst\" THEN                \n" +
                "    CALL Sproc_checkDelete_labeltemplates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;             \n" +
                "IF tableName=\"reportmaster\" THEN                \n" +
                "    CALL Sproc_checkDelete_reportMaster(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;               \n" +
                "IF tableName=\"operating_temperature_conversion_mst\" THEN                \n" +
                "    CALL Sproc_checkDelete_operating_temperature_conversion_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;         \n" +
                "IF tableName=\"inspection_mst\" THEN                \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementMst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;               \n" +
                "IF tableName=\"inspection_template_mst\" THEN                \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementTemplate(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;     \n" +
                "IF tableName=\"componenet_inspection_requirement_det\" THEN                \n" +
                "    CALL Sproc_checkDelete_componenet_inspection_requirement_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;        \n" +
                "IF tableName=\"supplier_quote_mst\" THEN                   \n" +
                "   CALL Sproc_checkDelete_supplier_quote(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;        \n" +
                "IF tableName=\"supplier_quote_parts_det\" THEN                   \n" +
                "   CALL Sproc_checkDelete_supplier_quote_parts(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;        \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2020 *********************************** */

                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_supplier_quote` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_supplier_quote`(    \n" +
                "	IN tableName VARCHAR(255),    \n" +
                "	IN IDs LONGTEXT,    \n" +
                "	IN deletedBy INT,    \n" +
                "	IN entityID VARCHAR(255),    \n" +
                "	IN refrenceIDs LONGTEXT,    \n" +
                "	IN countList INT,    \n" +
                "    IN pRoleID INT    \n" +
                "    )  \n" +
                "BEGIN            \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION            \n" +
                "BEGIN            \n" +
                "	ROLLBACK;            \n" +
                "	RESIGNAL;            \n" +
                "END;            \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING            \n" +
                "BEGIN            \n" +
                "	ROLLBACK;            \n" +
                "	RESIGNAL;            \n" +
                "END;                 \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempsupplierquote;      \n" +
                "	-- delete supplier quote mst if reference ID is not null        \n" +
                "	-- refernece ID is equal to salesOrderDetID    \n" +
                "    IF(IDs <> '') THEN    \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSupplier_quote_mst as                                                                                                                                  \n" +
                "			 (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_part_attribute\" else \"\" end as msg FROM  supplier_quote_part_attribute   \n" +
                "			 WHERE deletedAt IS NULL AND  supplierQuotePartDetID IN(',IDs,') LIMIT 1)         \n" +
                "										  UNION ALL          \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_part_price\" else \"\" end as msg FROM supplier_quote_part_price where supplierQuotePartDetID IN(',IDs,') AND deletedAt IS NULL LIMIT 1)                                                                      \n" +
                "		');          \n" +
                "		PREPARE stmt FROM @SQL;                  \n" +
                "		EXECUTE stmt;              \n" +
                "  \n" +
                "	IF(countList=FALSE) THEN                                                                 \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempSupplier_quote_mst t)=0 THEN                     \n" +
                "			START TRANSACTION;           \n" +
                "            SET @SQl2 = CONCAT('update supplier_quote_parts_det set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                                        \n" +
                "				PREPARE stmt2 FROM @SQL2;                                                                        \n" +
                "				EXECUTE stmt2;     \n" +
                "			 SELECT * FROM tempSupplier_quote_mst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";    \n" +
                "  \n" +
                "             SET @SQl3 =CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS tempsupplierquote AS SELECT sq.id,  \n" +
                "				(SELECT COUNT(1) FROM supplier_quote_parts_det sqd WHERE sqd.supplierQuoteMstID=sq.id AND sqd.deletedAt IS NULL) cnt            \n" +
                "					FROM supplier_quote_mst sq WHERE deletedAt IS NULL AND          \n" +
                "					id IN (SELECT supplierQuoteMstID FROM supplier_quote_parts_det WHERE id IN (',IDs,'))');		                                                                        \n" +
                "			 PREPARE stmt3 FROM @SQL3;                                                                        \n" +
                "			 EXECUTE stmt3;     \n" +
                "  \n" +
                "			SET @SQl4 = CONCAT('update supplier_quote_mst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(select id from tempsupplierquote where cnt=0) and deletedAt is NULL');		                                                                        \n" +
                "			PREPARE stmt4 FROM @SQL4;                                                                        \n" +
                "			EXECUTE stmt4;           \n" +
                "            SELECT * FROM tempSupplier_quote_mst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";         \n" +
                "            COMMIT;     \n" +
                "        ELSE                                                                  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempSupplier_quote_mst t;            \n" +
                "	    END IF;          \n" +
                "	 ELSE        \n" +
                "                  SELECT t1.cnt,t2.display_page_name AS msg        \n" +
                "                                   FROM tempSupplier_quote_mst t1        \n" +
                "                                    INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name        \n" +
                "                                    WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"        \n" +
                "                                    ORDER BY t2.display_page_name;                      \n" +
                "     END IF;                  \n" +
                "	 DROP TABLE tempSupplier_quote_mst;     \n" +
                "ELSE  \n" +
                "		SET @SQl5 = CONCAT('update supplier_quote_mst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in (', refrenceIDs ,') and deletedAt is NULL');		                                                                        \n" +
                "		PREPARE stmt5 FROM @SQl5;                                                                        \n" +
                "		EXECUTE stmt5;         \n" +
                "		SELECT \"\" TotalCount ,\"\" AS Message FROM supplier_quote_mst WHERE id IN(refrenceIDs) AND deletedAt IS NULL LIMIT 1;     \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_supplier_quote_parts` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_supplier_quote_parts`(    \n" +
                "	IN tableName VARCHAR(255),    \n" +
                "	IN IDs LONGTEXT,    \n" +
                "	IN deletedBy INT,    \n" +
                "	IN entityID VARCHAR(255),    \n" +
                "	IN refrenceIDs LONGTEXT,    \n" +
                "	IN countList INT,    \n" +
                "    IN pRoleID INT    \n" +
                "    )  \n" +
                "BEGIN                \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSupplier_quote_mst as                                                                                                                                  \n" +
                "			 (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_part_attribute\" else \"\" end as msg FROM  supplier_quote_part_attribute   \n" +
                "			 WHERE deletedAt IS NULL AND  supplierQuotePartDetID IN(',IDs,') LIMIT 1)         \n" +
                "										  UNION ALL          \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_part_price\" else \"\" end as msg FROM supplier_quote_part_price where supplierQuotePartDetID IN(',IDs,') AND deletedAt IS NULL LIMIT 1)                                                                      \n" +
                "		');          \n" +
                "		PREPARE stmt FROM @SQL;                  \n" +
                "		EXECUTE stmt;              \n" +
                "	IF (countList=FALSE) THEN                                                                   \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempSupplier_quote_mst t)=0 THEN                                                                   \n" +
                "			SET @SQl1 = CONCAT('update supplier_quote_parts_det set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where ID in(',IDs,') and deletedAt is NULL');		                                                                      \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                                      \n" +
                "			EXECUTE stmt1;                                                                      \n" +
                "			SELECT * FROM tempSupplier_quote_mst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";                                                                    \n" +
                "		ELSE                                                                    \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempSupplier_quote_mst t;                                                                   \n" +
                "  \n" +
                "		END IF;            \n" +
                "	ELSE          \n" +
                "                  SELECT t1.cnt,t2.display_page_name AS msg          \n" +
                "                                   FROM tempSupplier_quote_mst t1          \n" +
                "                                    INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name          \n" +
                "                                    WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"          \n" +
                "                                    ORDER BY t2.display_page_name;                        \n" +
                "	END IF;                                                                                 \n" +
                "	DROP TABLE tempSupplier_quote_mst;                 \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentMFGAliasSearch` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(      \n" +
                "IN pGoodPart VARCHAR(100),      \n" +
                "IN pSearch VARCHAR(100),      \n" +
                "IN pId INT(11),      \n" +
                "IN pMfgType VARCHAR(50),      \n" +
                "IN pRoHSStatusID VARCHAR(100),      \n" +
                "IN pMfgCodeId INT(11),      \n" +
                "IN pMountingType VARCHAR(50),      \n" +
                "IN pMountingTypeId INT(11),      \n" +
                "IN pCategoryID INT(11),      \n" +
                "IN pIsContainCPN TINYINT(1),      \n" +
                "IN pRohsMainCategoryID INT(11),      \n" +
                "IN pIsRohsMainCategoryInvertMatch TINYINT(1)       \n" +
                ")  \n" +
                "BEGIN      \n" +
                "   DECLARE vRohsMainCategoryID INT(11);      \n" +
                "   SET vRohsMainCategoryID = pRohsMainCategoryID;      \n" +
                "   /*===>this logic is added to compare invert rohs category*/      \n" +
                "   IF pIsRohsMainCategoryInvertMatch = FALSE  THEN      \n" +
                "		IF pRohsMainCategoryID = -1 THEN      \n" +
                "			SET vRohsMainCategoryID = -2;          \n" +
                "		ELSEIF pRohsMainCategoryID = -2 THEN          \n" +
                "			SET vRohsMainCategoryID = -1;          \n" +
                "        END IF;          \n" +
                "   END IF;          \n" +
                "   /*<===this logic is added to compare invert rohs category*/          \n" +
                "IF(pMountingType IS NOT NULL) THEN                  \n" +
                " SELECT * FROM                  \n" +
                " (                  \n" +
                "	 SELECT `com`.`id`,                  \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/                  \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,                  \n" +
                "		`com`.`mfgPN` orgMfgPN,      \n" +
                "		`com`.`packaginggroupID`,      \n" +
                "        `com`.`PIDCode`,    \n" +
                "		`com`.`isGoodPart`,      \n" +
                "		`com`.`RoHSStatusID`,      \n" +
                "		`com`.`rohsgroupID`,      \n" +
                "        `com`.`mfgcodeID`,      \n" +
                "		/*`mfgCodemst`.`id` AS `mfgCodeId`,*/      \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,      \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,      \n" +
                "        `com`.`tolerance`,      \n" +
                "        `com`.`minOperatingTemp`,      \n" +
                "        `com`.`maxOperatingTemp`,      \n" +
                "        `com`.`value`,      \n" +
                "        `com`.`partPackage`,      \n" +
                "        `com`.`powerRating`,      \n" +
                "        `com`.`functionalCategoryID`,      \n" +
                "        `com`.`mountingTypeID`,      \n" +
                "        `com`.`connecterTypeID`,      \n" +
                "        `com`.`noOfPosition`,      \n" +
                "        `com`.`noOfRows`,      \n" +
                "        `com`.`pitch`,      \n" +
                "        `com`.`pitchMating`,      \n" +
                "        `com`.`length`,      \n" +
                "        `com`.`width`,      \n" +
                "        `com`.`height`,      \n" +
                "        `com`.`voltage`,      \n" +
                "        `com`.`weight`,      \n" +
                "        `com`.`feature`,      \n" +
                "        `com`.`color`,      \n" +
                "        `com`.`partStatus`,      \n" +
                "        `com`.`uom`,      \n" +
                "        `com`.`uomClassID`,      \n" +
                "        `com`.`unit`,      \n" +
                "        (SELECT u.abbreviation FROM uoms u WHERE u.id = com.uom) AS uomName,      \n" +
                "        (SELECT u.unitName FROM uoms u WHERE u.id = com.uom) AS unitName,      \n" +
                "        fun_getRoHSIconByID(`com`.`RoHSStatusID`) `rohsIcon`,      \n" +
                "		fun_getRoHSNameByID(`com`.`RoHSStatusID`) `rohsName`,      \n" +
                "        `com`.`partPackageID`,      \n" +
                "        `com`.`bomLock`,      \n" +
                "		`com`.`businessRisk`,      \n" +
                "		`com`.`costCategoryID`,      \n" +
                "		`com`.`deviceMarking`,      \n" +
                "		`com`.`driverToolRequired`,      \n" +
                "		`com`.`eau`,      \n" +
                "		`com`.`epicorType`,            \n" +
                "		`com`.`functionalTestingRequired`,            \n" +
                "		`com`.`heightText`,            \n" +
                "		`com`.`isCPN`,            \n" +
                "		`com`.`isCustom`,            \n" +
                "		`com`.`isLeadFree`,            \n" +
                "		`com`.`leadTime`,            \n" +
                "		`com`.`matingPartRquired`,            \n" +
                "		`com`.`maxPriceLimit`,            \n" +
                "		`com`.`maxQtyonHand`,            \n" +
                "		`com`.`minimum`,            \n" +
                "		`com`.`mult`,            \n" +
                "		`com`.`packageQty`,            \n" +
                "		`com`.`partType`,            \n" +
                "		`com`.`pcbPerArray`,            \n" +
                "		`com`.`pickupPadRequired`,            \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,            \n" +
                "		`com`.`plannedValuePerBuild`,            \n" +
                "		`com`.`programingRequired`,            \n" +
                "		`com`.`rfqOnly`,            \n" +
                "		`com`.`saftyStock`,            \n" +
                "		`com`.`scrapRatePercentagePerBuild`,            \n" +
                "		`com`.`scrapValuePerBuild`,            \n" +
                "		`com`.`selfLifeDays`,            \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,            \n" +
                "		`com`.`temperatureCoefficient`,            \n" +
                "		`com`.`temperatureCoefficientUnit`,            \n" +
                "		`com`.`temperatureCoefficientValue`,            \n" +
                "		`com`.`trackSerialNumber`,          \n" +
                "		`com`.`refSupplierMfgpnComponentID`,  \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,  \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,  \n" +
                "        fun_getMfgCodeByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgCode`            \n" +
                "	FROM `component` AS `com`    \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND    \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))    \n" +
                "    JOIN `rfq_mountingtypemst` AS `mt` ON `mt`.`id` = `com`.`mountingTypeID` AND `mt`.`name` = pMountingType    \n" +
                "    JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID          \n" +
                "	WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))     \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))    \n" +
                "    AND `com`.`mountingTypeID` = IFNULL(pMountingTypeId, `com`.`mountingTypeID`)    \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)                  \n" +
                "    AND `com`.`category` = IFNULL(pCategoryID, `com`.`category`)                  \n" +
                "    AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)            \n" +
                "    AND r.refMainCategoryID = IFNULL(vRohsMainCategoryID, r.refMainCategoryID)        \n" +
                "    -- `com`.`isCPN` = false                  \n" +
                "    ) AS a                              \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR                              \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')                              \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a` .`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))                              \n" +
                "	)            \n" +
                "	ORDER BY mfgPN;            \n" +
                "  \n" +
                "  ELSE            \n" +
                "   SELECT * FROM            \n" +
                " (            \n" +
                "	 SELECT `com`.`id`,            \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/      \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,      \n" +
                "		`com`.`mfgPN` orgMfgPN,      \n" +
                "		`com`.`packaginggroupID`,                      \n" +
                "		`com`.`PIDCode`,                      \n" +
                "		`com`.`isGoodPart`,      \n" +
                "		`com`.`RoHSStatusID`,      \n" +
                "		`com`.`rohsgroupID`,      \n" +
                "		`com`.`mfgcodeID`,      \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,      \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,      \n" +
                "		`com`.`tolerance`,      \n" +
                "		`com`.`minOperatingTemp`,      \n" +
                "		`com`.`maxOperatingTemp`,      \n" +
                "		`com`.`value`,      \n" +
                "		`com`.`partPackage`,      \n" +
                "		`com`.`powerRating`,      \n" +
                "		`com`.`functionalCategoryID`,      \n" +
                "		`com`.`mountingTypeID`,      \n" +
                "		`com`.`connecterTypeID`,      \n" +
                "		`com`.`noOfPosition`,      \n" +
                "		`com`.`noOfRows`,      \n" +
                "		`com`.`pitch`,      \n" +
                "		`com`.`pitchMating`,      \n" +
                "		`com`.`length`,      \n" +
                "		`com`.`width`,      \n" +
                "		`com`.`height`,      \n" +
                "		`com`.`voltage`,      \n" +
                "		`com`.`weight`,      \n" +
                "		`com`.`feature`,      \n" +
                "		`com`.`color`,                                  \n" +
                "		`com`.`partStatus`,                                  \n" +
                "		`com`.`uom`,                                \n" +
                "        `com`.`uomClassID`,                  \n" +
                "		`com`.`unit`,                        \n" +
                "		`com`.`restrictUsePermanently`,                        \n" +
                "		`com`.`restrictUSEwithpermission`,                      \n" +
                "		`com`.`restrictPackagingUsePermanently`,                      \n" +
                "		`com`.`restrictPackagingUseWithpermission`,                      \n" +
                "		`com`.`packagingID`,                    \n" +
                "		`com`.`packaging`,                    \n" +
                "		(SELECT u.abbreviation FROM uoms u WHERE u.id = com.uom) AS uomName,                            \n" +
                "		(SELECT u.unitName FROM uoms u WHERE u.id = com.uom) AS unitName,                              \n" +
                "		fun_getRoHSIconByID(`com`.`RoHSStatusID`) `rohsIcon`,                          \n" +
                "		fun_getRoHSNameByID(`com`.`RoHSStatusID`) `rohsName`,      \n" +
                "        `com`.`partPackageID`,            \n" +
                "        `com`.`bomLock`,            \n" +
                "		`com`.`businessRisk`,            \n" +
                "		`com`.`costCategoryID`,            \n" +
                "		`com`.`deviceMarking`,            \n" +
                "		`com`.`driverToolRequired`,            \n" +
                "		`com`.`eau`,            \n" +
                "		`com`.`epicorType`,            \n" +
                "		`com`.`functionalTestingRequired`,            \n" +
                "		`com`.`heightText`,            \n" +
                "		`com`.`isCPN`,            \n" +
                "		`com`.`isCustom`,            \n" +
                "		`com`.`isLeadFree`,            \n" +
                "		`com`.`leadTime`,            \n" +
                "		`com`.`matingPartRquired`,            \n" +
                "		`com`.`maxPriceLimit`,            \n" +
                "		`com`.`maxQtyonHand`,            \n" +
                "		`com`.`minimum`,            \n" +
                "		`com`.`mult`,            \n" +
                "		`com`.`packageQty`,            \n" +
                "		`com`.`partType`,            \n" +
                "		`com`.`pcbPerArray`,            \n" +
                "		`com`.`pickupPadRequired`,            \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,            \n" +
                "		`com`.`plannedValuePerBuild`,            \n" +
                "		`com`.`programingRequired`,            \n" +
                "		`com`.`rfqOnly`,            \n" +
                "		`com`.`saftyStock`,            \n" +
                "		`com`.`scrapRatePercentagePerBuild`,            \n" +
                "		`com`.`scrapValuePerBuild`,            \n" +
                "		`com`.`selfLifeDays`,            \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,            \n" +
                "		`com`.`temperatureCoefficient`,            \n" +
                "		`com`.`temperatureCoefficientUnit`,            \n" +
                "		`com`.`temperatureCoefficientValue`,            \n" +
                "		`com`.`trackSerialNumber`,          \n" +
                "		`com`.`refSupplierMfgpnComponentID`,  \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,  \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,  \n" +
                "        fun_getMfgCodeByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgCode`            \n" +
                "	FROM `component` AS `com`      \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`deletedAt` IS NULL AND      \n" +
                "	(`mfgCodemst`.`deletedAt` IS NULL AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)))      \n" +
                "	JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID          \n" +
                "    WHERE (`com`.`deletedAt` IS NULL AND `com`.`isGoodPart` = IFNULL(pGoodPart,`com`.`isGoodPart`))      \n" +
                "	AND (`com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`))      \n" +
                "    AND `com`.`mountingTypeID` = IFNULL(pMountingTypeId, `com`.`mountingTypeID`)    \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)                  \n" +
                "    AND `com`.`category` = IFNULL(pCategoryID, `com`.`category`)                  \n" +
                "    AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)          \n" +
                "    AND r.refMainCategoryID = IFNULL(vRohsMainCategoryID, r.refMainCategoryID)          \n" +
                "    -- and `com`.`isCPN` = false                  \n" +
                "    ) AS a      \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR      \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')      \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a` .`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))      \n" +
                ")                              \n" +
                "ORDER BY mfgPN;      \n" +
                "END IF;      \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getRefTransDetailForDocument` ;  \n" +
                "CREATE PROCEDURE `Sproc_getRefTransDetailForDocument`(            \n" +
                "	pGencFileOwnerType VARCHAR(255),            \n" +
                "    pRefTransID INT(11)            \n" +
                ")  \n" +
                "BEGIN            \n" +
                "	# This variable is used in dynamic query to update document path and each case block need set table name value            \n" +
                "	DECLARE vTableName VARCHAR(100);            \n" +
                "    # All table PK name is 'id' but in some thable it is different so set value of this variable if PK name is not 'id'            \n" +
                "    DECLARE vTableIdentityColumnName VARCHAR(50);            \n" +
                "    DECLARE vEixstingDocumentPath VARCHAR(500);            \n" +
                "    DECLARE vNewDocumentPath VARCHAR(500);            \n" +
                "    DECLARE vCreatedDate DATETIME;            \n" +
                "    DECLARE vPIDCode VARCHAR(150);      \n" +
                "	DECLARE vReplaceString VARCHAR(50);      \n" +
                "  \n" +
                "		SET vTableIdentityColumnName = 'Id';            \n" +
                "  \n" +
                "		#In below cases get already stored documentPath and generate new documentPath based on requirement             \n" +
                "		CASE pGencFileOwnerType            \n" +
                "			WHEN 'component_sid_stock' THEN            \n" +
                "				-- Comp_sid_stock/Year/{UMID}/{id}            \n" +
                "				SELECT 	documentPath,			CONCAT('UMID/', DATE_FORMAT(createdAt,'%Y'), '/', uid, '/', id) newDocumentPath            \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath             \n" +
                "				FROM 	component_sid_stock             \n" +
                "				WHERE 	id = pRefTransID;            \n" +
                "  \n" +
                "				SET vTableName = 'component_sid_stock';            \n" +
                "  \n" +
                "		 WHEN 'packing_slip' THEN             \n" +
                "				-- PS/{Supplier}/Year/Month/PS#/{id}            \n" +
                "				SELECT 	p.documentPath,			CONCAT('PS/', m.mfgCode , '/', DATE_FORMAT(p.createdAt,'%Y'), '/', DATE_FORMAT(p.createdAt,'%m'), '/', p.packingSlipNumber, '/', p.id) newDocumentPath            \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath             \n" +
                "				FROM 	packing_slip_material_receive p            \n" +
                "				JOIN 	mfgcodemst m ON m.id = p.mfgCodeID            \n" +
                "				WHERE 	p.id = pRefTransID;            \n" +
                "  \n" +
                "				SET vTableName = 'packing_slip_material_receive';            \n" +
                "  \n" +
                "		WHEN 'supplier_invoice' THEN             \n" +
                "				-- Invoice/DK/2020/04/Invoice#/{id}             \n" +
                "				SELECT 	p.documentPath,			CONCAT('Invoice/', m.mfgCode , '/', DATE_FORMAT(p.createdAt,'%Y'), '/', DATE_FORMAT(p.createdAt,'%m'), '/', p.invoiceNumber, '/', p.id) newDocumentPath            \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath             \n" +
                "				FROM 	packing_slip_material_receive p            \n" +
                "				JOIN 	mfgcodemst m ON m.id = p.mfgCodeID            \n" +
                "				WHERE 	p.id = pRefTransID;            \n" +
                "  \n" +
                "				SET vTableName = 'packing_slip_material_receive';        \n" +
                "  \n" +
                "		WHEN 'credit_memo' THEN             \n" +
                "				-- CreditMemo/DK/2020/04/CreditMemo#/{id}            \n" +
                "				SELECT 	p.documentPath,			CONCAT('CreditMemo/', m.mfgCode , '/', DATE_FORMAT(p.createdAt,'%Y'), '/', DATE_FORMAT(p.createdAt,'%m'), '/', p.creditMemoNumber, '/', p.id) newDocumentPath            \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath             \n" +
                "				FROM 	packing_slip_material_receive p            \n" +
                "				JOIN 	mfgcodemst m ON m.id = p.mfgCodeID            \n" +
                "				WHERE 	p.id = pRefTransID;            \n" +
                "  \n" +
                "				SET vTableName = 'packing_slip_material_receive';               \n" +
                "		WHEN 'debit_memo' THEN             \n" +
                "				-- DebitMemo/DK/2020/04/DebitMemo#/{id}            \n" +
                "				SELECT 	p.documentPath,			CONCAT('DebitMemo/', m.mfgCode , '/', DATE_FORMAT(p.createdAt,'%Y'), '/', DATE_FORMAT(p.createdAt,'%m'), '/', p.debitMemoNumber, '/', p.id) newDocumentPath            \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath             \n" +
                "				FROM 	packing_slip_material_receive p            \n" +
                "				JOIN 	mfgcodemst m ON m.id = p.mfgCodeID            \n" +
                "				WHERE 	p.id = pRefTransID;            \n" +
                "  \n" +
                "				SET vTableName = 'packing_slip_material_receive';          \n" +
                "		WHEN 'supplier_quote' THEN             \n" +
                "				-- SupplierQuote/DK/2020/04/Quote#/{id}             \n" +
                "				SELECT 	p.documentPath,			CONCAT('SupplierQuote/', m.mfgCode , '/', DATE_FORMAT(s.createdAt,'%Y'), '/', DATE_FORMAT(s.createdAt,'%m'), '/', s.quoteNumber, '/', s.id) newDocumentPath            \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath             \n" +
                "				FROM 	supplier_quote_mst s            \n" +
                "				JOIN 	mfgcodemst m ON m.id = s.supplierID            \n" +
                "				WHERE 	s.id = pRefTransID;            \n" +
                "  \n" +
                "				SET vTableName = 'supplier_quote_mst';      \n" +
                "		WHEN 'workorder' THEN            \n" +
                "				-- WO/Year/Month/{WO}/{id}            \n" +
                "				SELECT 	documentPath,			CONCAT('WO/', DATE_FORMAT(createdAt,'%Y'), '/', DATE_FORMAT(createdAt,'%m'), '/', woNumber, '/', woID) newDocumentPath            \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath             \n" +
                "				FROM 	workorder             \n" +
                "				WHERE 	woID = pRefTransID;            \n" +
                "  \n" +
                "				SET vTableName = 'workorder';            \n" +
                "				SET vTableIdentityColumnName = 'woID';            \n" +
                "  \n" +
                "		WHEN 'workorder_operation' THEN      \n" +
                "			-- WO/Year/Month/{wo}/WO_OP/{WO_OP}/{id}      \n" +
                "			SELECT wo.documentPath, CONCAT('WO/', DATE_FORMAT(w.createdAt,'%Y'), '/', DATE_FORMAT(w.createdAt,'%m'), '/', w.woNumber, '/WO_OP/', wo.opNumber, '/', wo.woOPID) newDocumentPath      \n" +
                "			INTO vEixstingDocumentPath, vNewDocumentPath      \n" +
                "			FROM workorder_operation wo      \n" +
                "			JOIN workorder w ON wo.woID = w.woID      \n" +
                "			WHERE woOPID = pRefTransID;      \n" +
                "			SET vTableName = 'workorder_operation';      \n" +
                "			SET vTableIdentityColumnName = 'woOPID';      \n" +
                "  \n" +
                "		 WHEN 'salesorder' THEN            \n" +
                "				-- SO/Year/Month/{SO}/{id}            \n" +
                "				SELECT 	documentPath,			CONCAT('SO/', DATE_FORMAT(createdAt,'%Y'), '/', DATE_FORMAT(createdAt,'%m'), '/', salesOrderNumber, '/', id) newDocumentPath            \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath             \n" +
                "				FROM 	salesordermst             \n" +
                "				WHERE 	id = pRefTransID;            \n" +
                "  \n" +
                "				SET vTableName = 'salesordermst';            \n" +
                "		 WHEN 'operations' THEN            \n" +
                "				-- OP/Year/{OPID}/{id}            \n" +
                "				SELECT 	documentPath,			CONCAT('OP/', DATE_FORMAT(createdAt,'%Y'), '/', opNumber, '/', opID) newDocumentPath            \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath             \n" +
                "				FROM 	operations             \n" +
                "				WHERE 	opID = pRefTransID;            \n" +
                "  \n" +
                "				SET vTableName = 'operations';            \n" +
                "				SET vTableIdentityColumnName = 'opID';            \n" +
                "		 WHEN 'certificate_standards' THEN            \n" +
                "				-- Cert_std/Year/{certificateStandardID}            \n" +
                "				SELECT 	documentPath,			CONCAT('Cert_std/', DATE_FORMAT(createdAt,'%Y'), '/', certificateStandardID) newDocumentPath            \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath             \n" +
                "				FROM 	certificate_standards             \n" +
                "				WHERE 	certificateStandardID = pRefTransID;            \n" +
                "  \n" +
                "				SET vTableName = 'certificate_standards';            \n" +
                "				SET vTableIdentityColumnName = 'certificateStandardID';            \n" +
                "		 WHEN 'component' THEN            \n" +
                "			 -- Comp/Year/{PID}/{id}            \n" +
                "			 SELECT 	documentPath, CONCAT('Comp/', DATE_FORMAT(createdAt,'%Y'), '/', fun_replaceSpecialCharacters(PIDCode), '/', id) newDocumentPath            \n" +
                "			 INTO 	vEixstingDocumentPath,	vNewDocumentPath            \n" +
                "			 FROM 	component            \n" +
                "			 WHERE 	id = pRefTransID;       \n" +
                "			 SET vTableName = 'component';            \n" +
                "		 WHEN 'eco_request' THEN            \n" +
                "				-- eco_request/year/{ecoid}/{ecoReqID}            \n" +
                "				SELECT 	documentPath,			CONCAT('eco_request/', DATE_FORMAT(createdAt,'%Y'), '/', ecoReqID) newDocumentPath            \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath             \n" +
                "				FROM 	eco_request             \n" +
                "				WHERE 	ecoReqID = pRefTransID;            \n" +
                "  \n" +
                "				SET vTableName = 'eco_request';            \n" +
                "				SET vTableIdentityColumnName = 'ecoReqID';            \n" +
                "		 WHEN 'component_customer_loa' THEN            \n" +
                "				-- Comp_Cust_loa/{CustomerCode},{PIDCode}/{id}            \n" +
                "				SELECT 	cloa.documentPath,			CONCAT('Comp_Cust_loa/', m.mfgCode,'/', fun_replaceSpecialCharacters(co.PIDCode) ,'/', cloa.id) newDocumentPath        \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath             \n" +
                "				FROM 	component_customer_loa cloa            \n" +
                "				JOIN	mfgcodemst m ON m.id = cloa.customerID            \n" +
                "                JOIN component co ON co.id = cloa.componentID        \n" +
                "				WHERE 	cloa.id = pRefTransID;            \n" +
                "  \n" +
                "				SET vTableName = 'component_customer_loa';            \n" +
                "		 WHEN 'equipment' THEN            \n" +
                "				-- equip/{id}            \n" +
                "				SELECT 	documentPath,			CONCAT('equip/', eqpID) newDocumentPath            \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath             \n" +
                "				FROM 	equipment             \n" +
                "				WHERE 	eqpID = pRefTransID;            \n" +
                "  \n" +
                "				SET vTableName = 'equipment';            \n" +
                "				SET vTableIdentityColumnName = 'eqpID';            \n" +
                "		 WHEN 'equipment_task' THEN            \n" +
                "				-- equip_task/{id}            \n" +
                "				SELECT 	documentPath,			CONCAT('equip_task/', eqpTaskID) newDocumentPath            \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath             \n" +
                "				FROM 	equipment_task             \n" +
                "				WHERE 	eqpTaskID = pRefTransID;            \n" +
                "  \n" +
                "				SET vTableName = 'equipment_task';            \n" +
                "				SET vTableIdentityColumnName = 'eqpTaskID';            \n" +
                "			WHEN 'employees' THEN            \n" +
                "				-- emp/{id}            \n" +
                "				SELECT 	documentPath,			CONCAT('emp/', id) newDocumentPath            \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath             \n" +
                "				FROM 	employees             \n" +
                "				WHERE 	id = pRefTransID;            \n" +
                "  \n" +
                "				SET vTableName = 'employees';            \n" +
                "			WHEN 'bom' THEN            \n" +
                "				-- rfq/custcode/year/{Groupid}/{pid}/{id}            \n" +
                "				SELECT 	ra.documentPath,			CONCAT('rfq/', m.mfgCode , '/', DATE_FORMAT(ra.createdAt,'%Y'), '/', ra.rfqrefID, '/', c.PIDCode, '/', ra.id) newDocumentPath            \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath             \n" +
                "				FROM 	rfq_assemblies ra            \n" +
                "				JOIN 	rfqforms rf ON rf.id = ra.rfqrefID            \n" +
                "				JOIN 	mfgcodemst m ON m.id = rf.customerId            \n" +
                "				JOIN 	component c ON c.id = ra.partID            \n" +
                "				WHERE 	ra.id = pRefTransID;            \n" +
                "  \n" +
                "				SET vTableName = 'rfq_assemblies';            \n" +
                "			ELSE            \n" +
                "				#This is default case so if case value is not match just set table name is null             \n" +
                "				SET vTableName = NULL;            \n" +
                "			END CASE;            \n" +
                "  \n" +
                "		#If table name is null, it means no need to do anything related to document path.            \n" +
                "		IF(vTableName IS NOT NULL) THEN            \n" +
                "  \n" +
                "			# Update document path if document path in record is null or new path not match with old path            \n" +
                "			IF(vEixstingDocumentPath IS NULL OR vEixstingDocumentPath != vNewDocumentPath) THEN            \n" +
                "            	SET @vSQLStatement = CONCAT(\"update \", vTableName, \" set documentPath = \\\"\", vNewDocumentPath, \"\\\" where \", vTableIdentityColumnName, \" = \", pRefTransID);            \n" +
                "                PREPARE query1 FROM @vSQLStatement;                          \n" +
                "				EXECUTE query1;                            \n" +
                "				DEALLOCATE PREPARE query1;             \n" +
                "			END IF;            \n" +
                "			SELECT 1 isBasedOnCreatedDate, pRefTransID refTransID, pGencFileOwnerType gencFileOwnerType,            \n" +
                "					vEixstingDocumentPath oldDocumentPath, vNewDocumentPath newDocumentPath;            \n" +
                "		ELSEIF (pGencFileOwnerType = 'textAngular') THEN            \n" +
                "			SET vCreatedDate = fun_DatetimetoUTCDateTime();            \n" +
                "			SELECT 1 isBasedOnCreatedDate, NULL refTransID, pGencFileOwnerType gencFileOwnerType, NULL oldDocumentPath,             \n" +
                "					CONCAT('textAngular/', DATE_FORMAT(vCreatedDate,'%Y'), '/', DATE_FORMAT(vCreatedDate,'%m'))newDocumentPath;            \n" +
                "		ELSE             \n" +
                "			SELECT 0 isBasedOnCreatedDate;            \n" +
                "		END IF;            \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2664,'2.00','V1',' Supplier Quote - Dharmesh P'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2664:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveSupplierQuote` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuote`(                                                \n" +
                "	IN ppageIndex INT(11),                                                \n" +
                "	IN precordPerPage INT(11),                                                \n" +
                "	IN pOrderBy VARCHAR(255),                                                \n" +
                "	IN pWhereClause VARCHAR(16383)             \n" +
                ")  \n" +
                "BEGIN                                                \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                                                \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"          \n" +
                "			SELECT 						  \n" +
                "				s.id,  \n" +
                "                sqpd.id AS supplierQuotePartDetID,    \n" +
                "				fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		  \n" +
                "                fun_getMfgCodeByID(c.mfgcodeID) mfgCode,  \n" +
                "				s.supplierID,  \n" +
                "                sqpd.partID,  \n" +
                "				c.mfgPN AS mfgPN,  \n" +
                "                c.mfgcodeID,  \n" +
                "				sc.mfgPN AS supplierPN,  \n" +
                "				sqpd.supplierPartID,      \n" +
                "                m.mfgName AS supplier,  \n" +
                "                s.quoteNumber,  \n" +
                "                s.quoteDate,  \n" +
                "                s.reference,  \n" +
                "                s.quoteStatus,  \n" +
                "                (                              \n" +
                "				 CASE  WHEN (s.quoteStatus = 'D') THEN                               \n" +
                "				   'Draft'                                                                   \n" +
                "				  WHEN (s.quoteStatus = 'P') THEN                               \n" +
                "				   'Published'                                                                  \n" +
                "				  ELSE                               \n" +
                "				   ''                               \n" +
                "				 END                              \n" +
                "				) AS `statusConvertedValue`,     \n" +
                "                (          \n" +
                "				CASE                                         \n" +
                "					WHEN (`sqpd`.`isActive` = 0) THEN 'Inactive'                                                 \n" +
                "					WHEN (`sqpd`.`isActive` = 1) THEN 'Active'                                         \n" +
                "					ELSE ''                                         \n" +
                "					END          \n" +
                "				) AS `isActiveConvertedValueDetail`,  \n" +
                "                sqpd.isActive,  \n" +
                "                c.isCustom,  \n" +
                "				sc.isCustom AS isCustomSupplier,  \n" +
                "				fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                      \n" +
                "				fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	  \n" +
                "				fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,   \n" +
                "				fun_getPartAttibutesBySupplierQuoteDetailID(sqpd.id) AS attributesList,  \n" +
                "				fun_getPartPricingCountBySupplierQuoteDetailID(sqpd.id) AS pricingCount,  \n" +
                "				fun_getUserNameByID(s.createdBy) createdby,                \n" +
                "				fun_getUserNameByID(s.updatedBy) updatedby,              								             \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(s.createdAt) createdAt,                \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(s.UpdatedAt) updatedAt  \n" +
                "			FROM  \n" +
                "				supplier_quote_parts_det sqpd	  \n" +
                "			RIGHT JOIN supplier_quote_mst s ON sqpd.supplierQuoteMstID = s.id    \n" +
                "            LEFT JOIN 	component c ON sqpd.partID = c.id AND c.deletedAt IS NULL                      \n" +
                "			LEFT JOIN	component sc ON sqpd.supplierPartID = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL           \n" +
                "            LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.deletedAt IS NULL      \n" +
                "            WHERE  \n" +
                "				sqpd.deletedAt is NULL AND   \n" +
                "                s.deletedAt IS NULL                    				  \n" +
                "	\");                    \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;                                                \n" +
                "	ELSE                                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                \n" +
                "	END IF;	                                                \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                \n" +
                "		SET pWhereClause = '1=1' ;                                                \n" +
                "	END IF;	                                                \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                \n" +
                "	ELSE	                                                \n" +
                "		SET rowNumWhere = '';                                                \n" +
                "	END IF;	                                                 \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                             \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuote,\" ) c where 1=1 and \", pWhereClause);                            \n" +
                "	PREPARE query1 FROM @SQLStatement1;                            \n" +
                "	EXECUTE query1;                            \n" +
                "	DEALLOCATE PREPARE query1;                          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuote,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                            \n" +
                "	PREPARE query2 FROM @SQLStatement2;                            \n" +
                "	EXECUTE query2;                            \n" +
                "	DEALLOCATE PREPARE query2;                         \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveSupplierQuotePartList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuotePartList`(                                                      \n" +
                "	IN pPageIndex INT(11),                                                                \n" +
                "	IN pRecordPerPage INT(11),                                                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                                                \n" +
                "	IN pWhereClause VARCHAR(16383),                                                      \n" +
                "    IN pSupplierQuoteMstID INT(11)                                                   \n" +
                ")  \n" +
                "BEGIN                                                      \n" +
                "	DECLARE pOffset INT(11);                                                                \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveSupplierQuotePartList=CONCAT(\"  \n" +
                "		SELECT   \n" +
                "        sqpd.id,  \n" +
                "        sqpd.partID,  \n" +
                "        sqpd.supplierPartID,          \n" +
                "        sqpd.supplierQuoteMstID,          \n" +
                "        c.mfgPN AS mfgPN,  \n" +
                "        c.mfgcodeID,  \n" +
                "        sqm.supplierID,  \n" +
                "        fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		          \n" +
                "		fun_getMfgNameByID(sc.mfgcodeID) supplier,  \n" +
                "        fun_getMfgCodeByID(c.mfgcodeID) mfgCode,  \n" +
                "        fun_getMfgCodeByID(sc.mfgcodeID) supplierCode,  \n" +
                "        sc.mfgPN AS supplierPN,  \n" +
                "        sqpd.isActive,  \n" +
                "        (          \n" +
                "				CASE                                         \n" +
                "					WHEN (`sqpd`.`isActive` = 0) THEN 'Inactive'                                                 \n" +
                "					WHEN (`sqpd`.`isActive` = 1) THEN 'Active'                                         \n" +
                "					ELSE ''                                         \n" +
                "				END          \n" +
                "			) AS `isActiveConvertedValue`,  \n" +
                "        c.isCustom,  \n" +
                "        sc.isCustom AS isCustomSupplier,  \n" +
                "		fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
                "        fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                      \n" +
                "        fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	  \n" +
                "        fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,               \n" +
                "        fun_getPartAttibutesBySupplierQuoteDetailID(sqpd.id) AS attributesList,  \n" +
                "        fun_getPartPricingCountBySupplierQuoteDetailID(sqpd.id) AS pricingCount,  \n" +
                "        fun_getUserNameByID(sqpd.createdBy) createdby,                \n" +
                "		fun_getUserNameByID(sqpd.updatedBy) updatedby,              								             \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(sqpd.createdAt) createdAt,                \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(sqpd.UpdatedAt) updatedAt          \n" +
                "    FROM		supplier_quote_parts_det sqpd                                \n" +
                "	LEFT JOIN 	supplier_quote_mst sqm ON sqpd.supplierQuoteMstID = sqm.id AND sqm.deletedAt IS NULL                      \n" +
                "	LEFT JOIN 	component c ON sqpd.partID = c.id AND c.deletedAt IS NULL                      \n" +
                "	LEFT JOIN	component sc ON sqpd.supplierPartID = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL                          \n" +
                "	WHERE   sqpd.supplierQuoteMstID = \",pSupplierQuoteMstID,\"                                                       \n" +
                "	AND 	sqpd.deletedAt IS NULL                                                         \n" +
                "    \");  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                                                                \n" +
                "	ELSE                                                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                \n" +
                "	END IF;	                                                                \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                \n" +
                "		SET pWhereClause = '1=1' ;                                                                \n" +
                "	END IF;	                                                        \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                 \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                \n" +
                "	ELSE	                                                                \n" +
                "		SET rowNumWhere = '';                                                                \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "    /* to get total count of rows */                             \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuotePartList,\" ) c where 1=1 and \", pWhereClause);                          	       \n" +
                "	PREPARE query1 FROM @SQLStatement1;                            \n" +
                "	EXECUTE query1;                            \n" +
                "	DEALLOCATE PREPARE query1;                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuotePartList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                            \n" +
                "	PREPARE query2 FROM @SQLStatement2;                            \n" +
                "	EXECUTE query2;                            \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveSupplierQuotePartPricingDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuotePartPricingDetails`(                                                      \n" +
                "	IN pSupplierQuotePartDetalID INT(11)  \n" +
                ")  \n" +
                "BEGIN         \n" +
                "		-- SELECT fun_getPartAttibutesBySupplierQuoteDetailID(pSupplierQuotePartDetalID) as sourceHeader;                                               \n" +
                "  \n" +
                "  \n" +
                "			/*For attributes fields*/  \n" +
                "		SELECT SQPA.attributeID,  \n" +
                "				AM.fieldName,  \n" +
                "                REPLACE(AM.fieldName, \" \", \"\") AS attributeColumnName  \n" +
                "					FROM   \n" +
                "				supplier_quote_part_attribute SQPA  \n" +
                "				LEFT JOIN quotecharges_dynamic_fields_mst AM ON SQPA.attributeID = AM.id AND AM.deletedAt IS NULL  \n" +
                "				-- LEFT JOIN quotecharges_dynamic_fields_mst AM ON SQPA.attributeID = AM.id AND AM.deletedAt IS NULL  \n" +
                "                WHERE SQPA.supplierQuotePartDetID =pSupplierQuotePartDetalID     \n" +
                "                AND   SQPA.deletedAt IS NULL;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			SELECT   \n" +
                "				SQPP.id,  \n" +
                "				SQPP.supplierQuotePartDetID,  \n" +
                "                SQPP.itemNumber,  \n" +
                "                SQPP.qty,  \n" +
                "                SQPP.`min`,  \n" +
                "                SQPP.mult,  \n" +
                "                SQPP.stock,  \n" +
                "                SQPP.packageID,  \n" +
                "                SQPP.reeling,  \n" +
                "                SQPP.NCNR,  \n" +
                "                SQPP.leadTime,  \n" +
                "                SQPP.UnitOfTime,  \n" +
                "                SQPP.UnitPrice,  \n" +
                "                fun_getPartAttibuteAndPriceBySupplierQuotePartPriceID(SQPP.id) attibutePriceList  \n" +
                "					FROM   \n" +
                "				  supplier_quote_part_price SQPP  \n" +
                "				LEFT JOIN supplier_quote_part_price_attribute SQPPA ON SQPPA.supplierQuotePartPriceID = SQPP.id AND  SQPPA.deletedAt IS NULL  \n" +
                "                WHERE SQPP.supplierQuotePartDetID = pSupplierQuotePartDetalID   \n" +
                "                AND   SQPP.deletedAt IS NULL   \n" +
                "				GROUP BY SQPP.itemNumber;                                     \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SupplierQuoteCopy` ;  \n" +
                "CREATE PROCEDURE `Sproc_SupplierQuoteCopy`(                                                \n" +
                "	IN pSupplierQuoteID INT(11),                                                \n" +
                "	IN pSupplierQuotePartDetID INT(11),  \n" +
                "    IN pNewQuoteNumber VARCHAR(50),  \n" +
                "	IN pNewQuoteDate DATE,  \n" +
                "    IN pNewReferences VARCHAR(255),  \n" +
                "    IN pUserId INT(11)  \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "	DECLARE V_EXIST INT;	      \n" +
                "    DECLARE V_INSERTEDSQID INT;  \n" +
                "    DECLARE EXIT HANDLER FOR SQLEXCEPTION      \n" +
                "BEGIN      \n" +
                "	ROLLBACK;      \n" +
                "	RESIGNAL;      \n" +
                "END;      \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING      \n" +
                "  BEGIN      \n" +
                "	ROLLBACK;      \n" +
                "	RESIGNAL;      \n" +
                "END;      \n" +
                "    START TRANSACTION;    \n" +
                "    IF(pSupplierQuotePartDetID IS NOT NULL) THEN  \n" +
                "  \n" +
                "		INSERT INTO supplier_quote_parts_det (supplierQuoteMstID,partID,supplierPartID,isActive,createdBy, updatedBy,createdAt,updatedAt)  \n" +
                "		SELECT pSupplierQuoteID,sqpd.partID,sqpd.supplierPartID,sqpd.isActive,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()   \n" +
                "		FROM supplier_quote_parts_det sqpd  \n" +
                "		WHERE sqpd.id = pSupplierQuotePartDetID AND sqpd.deletedAt IS NULL;  \n" +
                "  \n" +
                "		SET V_INSERTEDSQID = LAST_INSERT_ID();   \n" +
                "  \n" +
                "		INSERT INTO supplier_quote_part_attribute(supplierQuotePartDetID,attributeID,createdBy, updatedBy,createdAt,updatedAt)  \n" +
                "		SELECT V_INSERTEDSQID,sqpa.attributeID,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()   \n" +
                "		FROM supplier_quote_part_attribute sqpa  \n" +
                "		WHERE sqpa.supplierQuotePartDetID = pSupplierQuotePartDetID AND sqpa.deletedAt IS NULL;  \n" +
                "  \n" +
                "		INSERT INTO supplier_quote_part_price(supplierQuotePartDetID,itemNumber,qty,leadTime,UnitOfTime,UnitPrice,`min`,mult,stock,packageID,reeling,NCNR,createdBy, updatedBy,createdAt,updatedAt)  \n" +
                "		SELECT V_INSERTEDSQID,sqpp.itemNumber,sqpp.qty,sqpp.leadTime,sqpp.UnitOfTime,sqpp.UnitPrice,sqpp.`min`,sqpp.mult,sqpp.stock,sqpp.packageID,sqpp.reeling,sqpp.NCNR,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()   \n" +
                "		FROM supplier_quote_part_price sqpp  \n" +
                "		WHERE sqpp.supplierQuotePartDetID = pSupplierQuotePartDetID AND sqpp.deletedAt IS NULL;  \n" +
                "  \n" +
                "		INSERT INTO supplier_quote_part_price_attribute(supplierQuotePartPriceID,attributeID,Price,createdBy, updatedBy,createdAt,updatedAt)  \n" +
                "		SELECT newRec.id,sqppa.attributeID,sqppa.Price,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()   \n" +
                "		FROM supplier_quote_part_price_attribute sqppa			   \n" +
                "		JOIN   \n" +
                "		(SELECT sqp.id,sqpd.supplierQuoteMstID,sqpd.partID,sqp.supplierQuotePartDetID,sqp.itemNumber  \n" +
                "		FROM supplier_quote_part_price sqp   \n" +
                "		LEFT JOIN supplier_quote_parts_det sqpd ON sqp.supplierQuotePartDetID = sqpd.id AND sqpd.deletedAt IS NULL   \n" +
                "		WHERE sqpd.id=pSupplierQuotePartDetID AND sqp.deletedAt IS NULL  \n" +
                "		) AS oldRec ON oldRec.id = sqppa.supplierQuotePartPriceID  \n" +
                "		LEFT JOIN (SELECT sqp.id,sqpd.supplierQuoteMstID,sqpd.partID,sqp.supplierQuotePartDetID,sqp.itemNumber FROM supplier_quote_part_price sqp   \n" +
                "		LEFT JOIN supplier_quote_parts_det sqpd ON sqp.supplierQuotePartDetID = sqpd.id AND sqpd.deletedAt IS NULL   \n" +
                "		WHERE sqpd.id=V_INSERTEDSQID AND sqp.deletedAt IS NULL) AS newRec ON newRec.partID = oldRec.partID AND newRec.itemNumber = oldRec.itemNumber  \n" +
                "		WHERE sqppa.deletedAt IS NULL;										  \n" +
                "   ELSE        		  \n" +
                "		 INSERT INTO supplier_quote_mst(supplierID,quoteNumber,quoteDate,quoteStatus,`reference`,shippingAddressID,billingAddressID,createdBy, updatedBy,createdAt,updatedAt)  \n" +
                "		 SELECT supplierID,pNewQuoteNumber,pNewQuoteDate,\"D\",pNewReferences,shippingAddressID,billingAddressID,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime() FROM supplier_quote_mst WHERE id=pSupplierQuoteID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "		 SELECT supplierID,pNewQuoteNumber,pNewQuoteDate,\"D\",pNewReferences,shippingAddressID,billingAddressID,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime() FROM supplier_quote_mst WHERE id=pSupplierQuoteID AND deletedAt IS NULL;  \n" +
                "		 SET V_INSERTEDSQID = LAST_INSERT_ID();   \n" +
                "		 INSERT INTO supplier_quote_parts_det (supplierQuoteMstID,partID,supplierPartID,isActive,createdBy, updatedBy,createdAt,updatedAt)  \n" +
                "		 SELECT V_INSERTEDSQID,sqpd.partID,sqpd.supplierPartID,sqpd.isActive,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime() FROM supplier_quote_parts_det sqpd WHERE sqpd.supplierQuoteMstID=pSupplierQuoteID AND sqpd.deletedAt IS NULL;  \n" +
                "  \n" +
                "		 SELECT V_INSERTEDSQID,sqpd.partID,sqpd.supplierPartID,sqpd.isActive,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime() FROM supplier_quote_parts_det sqpd WHERE sqpd.supplierQuoteMstID=pSupplierQuoteID AND sqpd.deletedAt IS NULL;  \n" +
                "		 INSERT INTO supplier_quote_part_attribute(supplierQuotePartDetID,attributeID,createdBy, updatedBy,createdAt,updatedAt)              \n" +
                "		 SELECT sqpdNew.id,sqpa.attributeID,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()    \n" +
                "		 FROM supplier_quote_part_attribute sqpa   \n" +
                "		 JOIN supplier_quote_parts_det sqpdOld ON sqpa.supplierQuotePartDetID = sqpdOld.id  AND sqpdOld.deletedAt IS NULL  \n" +
                "		 JOIN supplier_quote_parts_det sqpdNew ON sqpdOld.partID = sqpdNew.partID AND sqpdNew.supplierQuoteMstID=V_INSERTEDSQID AND sqpdNew.deletedAt IS NULL  \n" +
                "		 WHERE sqpdOld.supplierQuoteMstID = pSupplierQuoteID AND sqpa.deletedAt IS NULL;  \n" +
                "  \n" +
                "		 SELECT sqpdNew.id,sqpa.attributeID,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()    \n" +
                "		 FROM supplier_quote_part_attribute sqpa   \n" +
                "		 JOIN supplier_quote_parts_det sqpdOld ON sqpa.supplierQuotePartDetID = sqpdOld.id  AND sqpdOld.deletedAt IS NULL  \n" +
                "		 JOIN supplier_quote_parts_det sqpdNew ON sqpdOld.partID = sqpdNew.partID AND sqpdNew.supplierQuoteMstID=V_INSERTEDSQID AND sqpdNew.deletedAt IS NULL  \n" +
                "		 WHERE sqpdOld.supplierQuoteMstID = pSupplierQuoteID AND sqpa.deletedAt IS NULL;  \n" +
                "		INSERT INTO supplier_quote_part_price(supplierQuotePartDetID,itemNumber,qty,leadTime,UnitOfTime,UnitPrice,`min`,mult,stock,packageID,reeling,NCNR,createdBy, updatedBy,createdAt,updatedAt)  \n" +
                "		SELECT sqpdNew.id,sqpp.itemNumber,sqpp.qty,sqpp.leadTime,sqpp.UnitOfTime,sqpp.UnitPrice,sqpp.`min`,sqpp.mult,sqpp.stock,sqpp.packageID,sqpp.reeling,sqpp.NCNR,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()   \n" +
                "		FROM supplier_quote_part_price sqpp			   \n" +
                "		JOIN supplier_quote_parts_det sqpdOld ON sqpp.supplierQuotePartDetID = sqpdOld.id  AND sqpdOld.deletedAt IS NULL  \n" +
                "		JOIN supplier_quote_parts_det sqpdNew ON sqpdOld.partID = sqpdNew.partID AND sqpdNew.supplierQuoteMstID=V_INSERTEDSQID AND sqpdNew.deletedAt IS NULL			  \n" +
                "		WHERE sqpdOld.supplierQuoteMstID = pSupplierQuoteID AND sqpp.deletedAt IS NULL;  \n" +
                "		INSERT INTO supplier_quote_part_price_attribute(supplierQuotePartPriceID,attributeID,Price,createdBy, updatedBy,createdAt,updatedAt)  \n" +
                "		SELECT newRec.id,sqppa.attributeID,sqppa.Price,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()   \n" +
                "		FROM supplier_quote_part_price_attribute sqppa			   \n" +
                "		JOIN   \n" +
                "		(SELECT sqp.id,sqpd.supplierQuoteMstID,sqpd.partID,sqp.supplierQuotePartDetID,sqp.itemNumber  \n" +
                "		FROM supplier_quote_part_price sqp   \n" +
                "		LEFT JOIN supplier_quote_parts_det sqpd ON sqp.supplierQuotePartDetID = sqpd.id AND sqpd.deletedAt IS NULL   \n" +
                "		WHERE sqpd.supplierQuoteMstID=pSupplierQuoteID AND sqp.deletedAt IS NULL  \n" +
                "		) AS oldRec ON oldRec.id = sqppa.supplierQuotePartPriceID  \n" +
                "		LEFT JOIN (SELECT sqp.id,sqpd.supplierQuoteMstID,sqpd.partID,sqp.supplierQuotePartDetID,sqp.itemNumber FROM supplier_quote_part_price sqp   \n" +
                "		LEFT JOIN supplier_quote_parts_det sqpd ON sqp.supplierQuotePartDetID = sqpd.id AND sqpd.deletedAt IS NULL   \n" +
                "		WHERE sqpd.supplierQuoteMstID=V_INSERTEDSQID AND sqp.deletedAt IS NULL) AS newRec ON newRec.partID = oldRec.partID AND newRec.itemNumber = oldRec.itemNumber  \n" +
                "		WHERE sqppa.deletedAt IS NULL;							  \n" +
                "  \n" +
                "	END IF;	               \n" +
                "    COMMIT;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2665,'2.00','V1',' Supplier Quote - Dharmesh P'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2665:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getMfgNameByPartID` ;  \n" +
                "CREATE FUNCTION `fun_getMfgNameByPartID`(          \n" +
                "	pMFGPNID INT(11)        \n" +
                ") RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN          \n" +
                "	DECLARE vMFGName VARCHAR(255) ;         \n" +
                "	SELECT mfgName INTO vMFGName FROM mfgcodemst WHERE id = (SELECT mfgCodeID FROM component WHERE id = pMFGPNID);          \n" +
                "	RETURN vMFGName;           \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getPartAttibuteAndPriceBySupplierQuotePartPriceID` ;  \n" +
                "CREATE FUNCTION `fun_getPartAttibuteAndPriceBySupplierQuotePartPriceID`(        \n" +
                "	pSupplierQuotePartPriceID INT) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN        \n" +
                "		DECLARE vAttibutes VARCHAR(16383);             \n" +
                "		SELECT GROUP_CONCAT(CONCAT(SQPPA.id,'###',SQPPA.attributeID,'###',AM.fieldName,'###',SQPPA.price) SEPARATOR '@@@') INTO vAttibutes  \n" +
                "					FROM   \n" +
                "				supplier_quote_part_price_attribute SQPPA				  \n" +
                "				LEFT JOIN quotecharges_dynamic_fields_mst AM ON SQPPA.attributeID = AM.id AND AM.deletedAt IS NULL  \n" +
                "                WHERE SQPPA.supplierQuotePartPriceID = pSupplierQuotePartPriceID   \n" +
                "                AND   SQPPA.deletedAt IS NULL;  \n" +
                "  \n" +
                "		RETURN vAttibutes;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getPartAttibutesBySupplierQuoteDetailID` ;  \n" +
                "CREATE FUNCTION `fun_getPartAttibutesBySupplierQuoteDetailID`(        \n" +
                "	pSupplierQuoteDetailID INT) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN        \n" +
                "		DECLARE vAttibutes VARCHAR(16383);             \n" +
                "		SELECT GROUP_CONCAT(CONCAT(SQPA.attributeID,'###',AM.fieldName) SEPARATOR '@@@') INTO vAttibutes  \n" +
                "					FROM   \n" +
                "				supplier_quote_part_attribute SQPA  \n" +
                "				LEFT JOIN quotecharges_dynamic_fields_mst AM ON SQPA.attributeID = AM.id AND AM.deletedAt IS NULL  \n" +
                "                WHERE SQPA.supplierQuotePartDetID = pSupplierQuoteDetailID   \n" +
                "                AND   SQPA.deletedAt IS NULL;  \n" +
                "  \n" +
                "		RETURN vAttibutes;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getPartPricingCountBySupplierQuoteDetailID` ;  \n" +
                "CREATE FUNCTION `fun_getPartPricingCountBySupplierQuoteDetailID`(        \n" +
                "	pSupplierQuoteDetailID INT(11)      \n" +
                ") RETURNS INT(11)  \n" +
                "BEGIN        \n" +
                "	DECLARE vCount INT;       \n" +
                "	SELECT COUNT(1) INTO vCount FROM supplier_quote_part_price s WHERE s.supplierQuotePartDetID =pSupplierQuoteDetailID AND s.deletedAt IS NULL;  \n" +
                "	RETURN vCount;          \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2666,'2.00','V1',' Supplier Quote - Dharmesh P'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2666:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-08-2020 *********************************** */
                "SELECT pageID INTO @pageID FROM page_detail  WHERE pageName = 'Transaction';  \n" +
                "INSERT  INTO `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`,`isAllowAsHomePage`)    \n" +
                "VALUES ('Supplier Quote List',0,0,'transaction.supplierquote','app.transaction.supplierquote','/supplierquote','Supplier Quote List',NULL,@pageID,0,'17.01',NULL,'icons-rfq-icon',1,UTC_TIMESTAMP,UTC_TIMESTAMP,NULL,'1',NULL,NULL,0,NULL,1,'Supplier Quote List',1);    \n" +
                "  \n" +
                "SELECT pageID INTO @parentPageID FROM page_detail  WHERE pageName = 'Supplier Quote List';  \n" +
                "INSERT  INTO `page_detail`(`pageName`,`RO`,`RW`,`menuRoute`,`pageRoute`,`pageURL`,`menuName`,`parentPageRoute`,`parentPageID`,`hasChild`,`orderBy`,`tabLevel`,`iconClass`,`isActive`,`createdAt`,`updatedAt`,`deletedAt`,`createdBy`,`updatedBy`,`deletedBy`,`isDeleted`,`parentTabID`,`isDisplay`,`displayMenuName`,`isAllowAsHomePage`)    \n" +
                "VALUES ('Add Supplier Quote',0,0,NULL,'app.transaction.supplierquote.managesupplierquote','/managesupplierquote/:id','Add Supplier Quote',NULL,@parentPageID,0,'17.11',NULL,'icons-rfq-icon',1,UTC_TIMESTAMP,UTC_TIMESTAMP,NULL,'1',NULL,NULL,0,NULL,1,'Supplier Quote',1);  \n" +
                /* **************************** New Script -> 04-08-2020 *********************************** */
                "SELECT pageID INTO @pageID FROM page_detail  WHERE pageName = 'Add Supplier Quote';  \n" +
                "  \n" +
                "INSERT INTO page_detail  \n" +
                "(pagename,menuRoute,pageRoute,pageURL,menuName,parentPageID,orderBy,tabLevel,iconClass,IsActive,createdBy,isDisplay,displayMenuName,isAllowAsHomePage)VALUES    \n" +
                "('Manage Supplier Quote Documents','','app.transaction.supplierquote.managesupplierquote.documents','/documents/:id','Manage Supplier Quote Documents',@pageID,null,null,'icons-request-response',1,'1',1,'Supplier Quote',1);  \n" +
                /* **************************** New Script -> 04-08-2020 *********************************** */
                "INSERT INTO table_mapping_details (tabel_name, display_page_name) VALUES ('supplier_quote_part_attribute', 'Supplier Quote Part Attribute');  \n" +
                "INSERT INTO table_mapping_details (tabel_name, display_page_name) VALUES ('supplier_quote_part_price', 'Supplier Quote Part Price');  \n" +
                /* **************************** New Script -> 04-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2667,'2.00','V1',' Supplier Quote - Dharmesh P'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2667:
            allDbChangesArray.push(
                /* **************************** New Script ->  04-08-2020 *********************************** */
                "DROP PROCEDURE Sproc_checkDelete_entity ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_entity`(    \n" +
                "	IN tableName VARCHAR(255),    \n" +
                "	IN IDs LONGTEXT,    \n" +
                "	IN deletedBy INT,    \n" +
                "	IN entityID VARCHAR(255),    \n" +
                "	IN refrenceIDs LONGTEXT,    \n" +
                "	IN countList INT,    \n" +
                "    IN pRoleID INT    \n" +
                "    )  \n" +
                "BEGIN               \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                          \n" +
                "BEGIN                          \n" +
                "	ROLLBACK;                          \n" +
                "	RESIGNAL;                          \n" +
                "END;                          \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                          \n" +
                "BEGIN                          \n" +
                "	ROLLBACK;                          \n" +
                "	RESIGNAL;                          \n" +
                "END;             \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempEntity as           \n" +
                "                (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues_manual\" else \"\" end as msg FROM dataelement_transactionvalues_manual WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                                                                    \n" +
                "                  ');                                                                                                                           \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                                    \n" +
                "		EXECUTE stmt;               \n" +
                "		    /*                                                                    \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"dataelement_transactionvalues\" else \"\" end as msg FROM dataelement_transactionvalues WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                                                                    \n" +
                "				UNION ALL                                                                    \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_dataelement_values\" else \"\" end as msg FROM workorder_trans_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                                                                    \n" +
                "				UNION ALL                                                                    \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_trans_equipment_dataelement_values\" else \"\" end as msg FROM workorder_trans_equipment_dataelement_values WHERE deletedAt IS NULL AND entityID IN(',IDs,') LIMIT 1)                                                                    \n" +
                "			 */                                                                                                                       \n" +
                "	 IF (countList=FALSE) THEN                                                                   \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempEntity t)=0 THEN                                                       \n" +
                "			START TRANSACTION;            \n" +
                "  \n" +
                "			SET @SQl1 = 	CONCAT('update entity set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where entityID IN(',IDs,') and deletedAt is NULL');		                                                                    \n" +
                "					PREPARE stmt1 FROM @SQL1;                                                                    \n" +
                "					EXECUTE stmt1;                      \n" +
                "  \n" +
                "			SET @SQl2 = 	CONCAT('update dynamicreportaccess set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refTransID IN(',IDs,') and refTableName=\"entity\" and deletedAt is NULL');		                                                                    \n" +
                "					PREPARE stmt2 FROM @SQL2;                                                                    \n" +
                "					EXECUTE stmt2;          \n" +
                "			SET @SQl3 = CONCAT('update dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where entityID IN(',IDs,')  and deletedAt is NULL');		                                                                    \n" +
                "	                PREPARE stmt3 FROM @SQL3;                                                                    \n" +
                "	                EXECUTE stmt3;                                                	                                                                  \n" +
                "  \n" +
                "			  SELECT * FROM tempEntity WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";                                                                    \n" +
                "		ELSE                                                                    \n" +
                "	                  SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempEntity t;                                                                   \n" +
                "  \n" +
                "		END IF;            \n" +
                "ELSE          \n" +
                "                  SELECT t1.cnt,t2.display_page_name AS msg          \n" +
                "                                   FROM tempEntity t1          \n" +
                "                                    INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name          \n" +
                "                                    WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"          \n" +
                "                                    ORDER BY t2.display_page_name;                        \n" +
                "END IF;                                                                               \n" +
                "		DROP TABLE tempEntity;               \n" +
                "END ;  \n" +
                /* **************************** Add Script Version ->  04-08-2020*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2668,'2.00','V1',' Sproc_checkDelete_entity - Shweta'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2668:
            allDbChangesArray.push(
                /* **************************** New Script ->  04-08-2020 *********************************** */
                "INSERT INTO table_mapping_details( tabel_name, display_page_name, createByRoleId, updateByRoleId, deleteByRoleId )  \n" +
                "Values ( 'dataelement_transactionvalues_manual', 'Custom Forms', 1, NULL, NULL);  \n" +
                /* **************************** Add Script Version -> 04-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2669,'2.00','V1',' Insert table mapping for Delete - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2669:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 04-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveSupplierQuotePartList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuotePartList`(                                                        \n" +
                "	IN pPageIndex INT(11),                                                                  \n" +
                "	IN pRecordPerPage INT(11),                                                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                                        \n" +
                "    IN pSupplierQuoteMstID INT(11)                                                     \n" +
                ")  \n" +
                "BEGIN                                                        \n" +
                "	DECLARE pOffset INT(11);                                                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                    \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveSupplierQuotePartList=CONCAT(\"    \n" +
                "		SELECT     \n" +
                "        sqpd.id,    \n" +
                "        sqpd.partID,    \n" +
                "        sqpd.supplierPartID,            \n" +
                "        sqpd.supplierQuoteMstID,            \n" +
                "        c.mfgPN AS mfgPN,    \n" +
                "        c.mfgcodeID,    \n" +
                "        sqm.supplierID,    \n" +
                "        fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		            \n" +
                "		fun_getMfgNameByID(sqm.supplierID) supplier,    \n" +
                "        fun_getMfgCodeByID(c.mfgcodeID) mfgCode,    \n" +
                "        fun_getMfgCodeByID(sc.mfgcodeID) supplierCode,    \n" +
                "        sc.mfgPN AS supplierPN,    \n" +
                "        sqpd.isActive,    \n" +
                "        (            \n" +
                "				CASE                                           \n" +
                "					WHEN (`sqpd`.`isActive` = 0) THEN 'Inactive'                                                   \n" +
                "					WHEN (`sqpd`.`isActive` = 1) THEN 'Active'                                           \n" +
                "					ELSE ''                                           \n" +
                "				END            \n" +
                "			) AS `isActiveConvertedValue`,    \n" +
                "        c.isCustom,    \n" +
                "        sc.isCustom AS isCustomSupplier,    \n" +
                "		fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,    \n" +
                "        fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                        \n" +
                "        fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	    \n" +
                "        fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,                 \n" +
                "        fun_getPartAttibutesBySupplierQuoteDetailID(sqpd.id) AS attributesList,    \n" +
                "        fun_getPartPricingCountBySupplierQuoteDetailID(sqpd.id) AS pricingCount,    \n" +
                "        fun_getUserNameByID(sqpd.createdBy) createdby,                  \n" +
                "		fun_getUserNameByID(sqpd.updatedBy) updatedby,              								               \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(sqpd.createdAt) createdAt,                  \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(sqpd.UpdatedAt) updatedAt            \n" +
                "    FROM		supplier_quote_parts_det sqpd                                  \n" +
                "	LEFT JOIN 	supplier_quote_mst sqm ON sqpd.supplierQuoteMstID = sqm.id AND sqm.deletedAt IS NULL                        \n" +
                "	LEFT JOIN 	component c ON sqpd.partID = c.id AND c.deletedAt IS NULL                        \n" +
                "	LEFT JOIN	component sc ON sqpd.supplierPartID = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL                            \n" +
                "	WHERE   sqpd.supplierQuoteMstID = \",pSupplierQuoteMstID,\"                                                         \n" +
                "	AND 	sqpd.deletedAt IS NULL                                                           \n" +
                "    \");    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                                                                  \n" +
                "	ELSE                                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                  \n" +
                "	END IF;	                                                                  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                  \n" +
                "		SET pWhereClause = '1=1' ;                                                                  \n" +
                "	END IF;	                                                          \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                   \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                  \n" +
                "	ELSE	                                                                  \n" +
                "		SET rowNumWhere = '';                                                                  \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "    /* to get total count of rows */                               \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuotePartList,\" ) c where 1=1 and \", pWhereClause);                          	         \n" +
                "	PREPARE query1 FROM @SQLStatement1;                              \n" +
                "	EXECUTE query1;                              \n" +
                "	DEALLOCATE PREPARE query1;                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuotePartList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query2;                              \n" +
                "	DEALLOCATE PREPARE query2;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSupplierQuoteDetailForElastic` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSupplierQuoteDetailForElastic`(	                                                                            \n" +
                "	IN pId INT(11)    \n" +
                ")  \n" +
                "BEGIN                                                                         \n" +
                "	SELECT 						  \n" +
                "				s.id AS supplierQuoteMstID,  \n" +
                "                sqpd.id AS supplierQuotePartDetID,    \n" +
                "				fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		     \n" +
                "				fun_getMfgCodeAndNameByID(m.id) supplier,		     \n" +
                "				s.supplierID,  \n" +
                "                sqpd.partID,  \n" +
                "				c.mfgPN AS mfgPN,  \n" +
                "                c.mfgcodeID,  \n" +
                "                sc.mfgcodeID AS supplierMfgcodeID,  \n" +
                "				sc.mfgPN AS supplierPN,  \n" +
                "				sqpd.supplierPartID,      \n" +
                "                s.quoteNumber,  \n" +
                "                s.quoteDate,  \n" +
                "                s.reference,  \n" +
                "                (                              \n" +
                "				 CASE  WHEN (s.quoteStatus = 'D') THEN                               \n" +
                "				   'Draft'                                                                   \n" +
                "				  WHEN (s.quoteStatus = 'P') THEN                               \n" +
                "				   'Published'                                                                  \n" +
                "				  ELSE                               \n" +
                "				   ''                               \n" +
                "				 END                              \n" +
                "				) AS `quoteStatus`,  \n" +
                "                (          \n" +
                "				CASE                                         \n" +
                "					WHEN (`sqpd`.`isActive` = 0) THEN 'Inactive'                                                 \n" +
                "					WHEN (`sqpd`.`isActive` = 1) THEN 'Active'                                         \n" +
                "					ELSE ''                                         \n" +
                "					END          \n" +
                "				) AS `isActive`,  \n" +
                "                c.isCustom,  \n" +
                "                mfc.isCustOrDisty,   \n" +
                "				sc.isCustom AS isCustomSupplier  \n" +
                "			FROM  \n" +
                "				supplier_quote_parts_det sqpd	  \n" +
                "            LEFT JOIN supplier_quote_mst s ON sqpd.supplierQuoteMstID=s.id AND s.deletedAt IS NULL      \n" +
                "            LEFT JOIN 	component c ON sqpd.partID = c.id AND c.deletedAt IS NULL                      \n" +
                "			LEFT JOIN	component sc ON sqpd.supplierPartID = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL           \n" +
                "			LEFT JOIN mfgcodemst mfc ON c.mfgcodeID = mfc.id AND mfc.deletedAt IS NULL	  \n" +
                "            LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.deletedAt IS NULL      \n" +
                "            WHERE sqpd.deletedAt IS NULL AND  sqpd.id = IFNULL(pId,sqpd.Id);   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2670,'2.00','V1',' Supplier Quote - Dharmesh P'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2670:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 05-08-2020 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetReferenceInspectionRequirementList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReferenceInspectionRequirementList`(      \n" +
                "	IN ppageIndex INT(11),                              \n" +
                "	IN precordPerPage INT(11),                              \n" +
                "	IN pOrderBy VARCHAR(255),                              \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN ID INT   \n" +
                ")  \n" +
                "BEGIN      \n" +
                "  \n" +
                "    DECLARE pOffset INT(11);                              \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "    SET @tempquery = CONCAT('(SELECT name as Transaction ,  \n" +
                "					\"Purchase/Incoming Inspection Requirement Template\" as TransactionType ,  \n" +
                "                    null as componentid ,  \n" +
                "                    null as isCustom,  \n" +
                "                    null as restrictUsePermanently,  \n" +
                "                    null as restrictUSEwithpermission,  \n" +
                "                    null as restrictPackagingUseWithpermission,  \n" +
                "                    null as restrictPackagingUsePermanently                                        \n" +
                "                    from inspection_template_requirement_det itrd    \n" +
                "				INNER JOIN inspection_template_mst im ON im.id = itrd.inspectionTemplateId AND im.isDeleted = 0    \n" +
                "				where itrd.isDeleted = 0  and itrd.inspectionRequirementId = ',ID,')      \n" +
                "		UNION ALL         \n" +
                "			(SELECT PIDCode as Transaction ,  \n" +
                "					\"Parts\" as TransactionType,  \n" +
                "                    im.id as componentid,  \n" +
                "                    isCustom as isCustom,  \n" +
                "                    restrictUsePermanently as restrictUsePermanently,  \n" +
                "                    restrictUSEwithpermission as restrictUSEwithpermission,  \n" +
                "                    restrictPackagingUseWithpermission as restrictPackagingUseWithpermission,  \n" +
                "                    restrictPackagingUsePermanently as restrictPackagingUsePermanently                      \n" +
                "                    from componenet_inspection_requirement_det itrd    \n" +
                "				INNER JOIN component im ON im.id = itrd.partId AND im.isDeleted = 0    \n" +
                "				where itrd.isDeleted = 0  and itrd.inspectionRequirementId = ',ID,')');  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                              \n" +
                "			SET pWhereClause = '1=1' ;                              \n" +
                "		END IF;	                              \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                              \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"TransactionType ASC\") ;                              \n" +
                "		ELSE                              \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                              \n" +
                "		END IF;	            \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                               \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                              \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                              \n" +
                "		ELSE	                              \n" +
                "			SET rowNumWhere = '';                              \n" +
                "		END IF;	                              \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);                        \n" +
                "  \n" +
                "            PREPARE query2 FROM @SQLStatement2;                      \n" +
                "			EXECUTE query2;                      \n" +
                "			DEALLOCATE PREPARE query2;                    \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c                      \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                      \n" +
                "			EXECUTE query1;                      \n" +
                "			DEALLOCATE PREPARE query1;       \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2671,'2.00','V1','change in Function for requirement - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2671:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 05-08-2020 *********************************** */
                "DROP VIEW IF EXISTS `vu_kit_plan_release_status_report`;  \n" +
                "CREATE VIEW `vu_kit_plan_release_status_report` AS  \n" +
                "    SELECT   \n" +
                "        `a`.`id` AS `id`,  \n" +
                "        `a`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "        `a`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "        `s`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "        `s`.`poNumber` AS `poNumber`,  \n" +
                "        `a`.`refAssyId` AS `refAssyId`,  \n" +
                "        `c`.`PIDCode` AS `assyPIDCode`,  \n" +
                "        `c`.`nickName` AS `assyNickName`,  \n" +
                "        `c`.`mfgPN` AS `assyMFRPN`,  \n" +
                "        `a`.`subAssyID` AS `subAssyID`,  \n" +
                "        `sc`.`PIDCode` AS `subAssyPIDCode`,  \n" +
                "        `sc`.`nickName` AS `subAssyNickName`,  \n" +
                "        `sc`.`mfgPN` AS `subAssyMFRPN`,  \n" +
                "        `sd`.`qty` AS `poQty`,  \n" +
                "        `sd`.`mrpQty` AS `mrpQty`,  \n" +
                "        `sd`.`kitQty` AS `kitQty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`subAssyID` IS NOT NULL) THEN CONCAT(`sd`.`kitNumber`, '+', `sc`.`PIDCode`)  \n" +
                "            ELSE `sd`.`kitNumber`  \n" +
                "        END) AS `kitNumber`,  \n" +
                "        `a`.`planPOQty` AS `planPOQty`,  \n" +
                "        `a`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "        `a`.`poDueDate` AS `poDueDate`,  \n" +
                "        `a`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "        `a`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "        `a`.`materialDockDate` AS `materialDockDate`,  \n" +
                "        `a`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "        `a`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
                "        `a`.`releasedBy` AS `releasedBy`,  \n" +
                "        FUN_GETUSERNAMEBYID(`a`.`releasedBy`) AS `releasedByName`,  \n" +
                "        `a`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "        `a`.`woID` AS `woID`,  \n" +
                "        FUN_GETWORKORDERNUMBERBYID(`a`.`woID`) AS `workorderNumber`,  \n" +
                "        `a`.`releasedNote` AS `releasedNote`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`kitStatus` = 'R') THEN 'Released'  \n" +
                "            WHEN (`a`.`kitStatus` = 'P') THEN 'In Progress'  \n" +
                "            ELSE '-'  \n" +
                "        END) AS `kitStatus`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`kitReturnStatus` IS NOT NULL) THEN 'Returned'  \n" +
                "            WHEN (`a`.`kitStatus` = 'R') THEN 'Not Returned'  \n" +
                "            ELSE 'N/A'  \n" +
                "        END) AS `kitReturnStatus`,  \n" +
                "        `a`.`kitReturnDate` AS `kitReturnDate`,  \n" +
                "        `a`.`refPlanId` AS `refPlanId`  \n" +
                "    FROM  \n" +
                "        (((((SELECT   \n" +
                "            `s`.`id` AS `id`,  \n" +
                "                `s`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                `s`.`subAssyID` AS `subAssyID`,  \n" +
                "                `s`.`poQty` AS `planPOQty`,  \n" +
                "                `s`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "                `s`.`poDueDate` AS `poDueDate`,  \n" +
                "                `s`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "                `s`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "                `s`.`materialDockDate` AS `materialDockDate`,  \n" +
                "                `s`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "                `s`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
                "                `s`.`releasedBy` AS `releasedBy`,  \n" +
                "                `s`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "                `s`.`woID` AS `woID`,  \n" +
                "                `s`.`releasedNote` AS `releasedNote`,  \n" +
                "                `s`.`kitStatus` AS `kitStatus`,  \n" +
                "                `s`.`kitReturnStatus` AS `kitReturnStatus`,  \n" +
                "                `s`.`kitReturnDate` AS `kitReturnDate`,  \n" +
                "                `s`.`refPlanId` AS `refPlanId`  \n" +
                "        FROM  \n" +
                "            `salesorder_plan_detailsmst` `s`  \n" +
                "        WHERE  \n" +
                "            (`s`.`isDeleted` = 0) UNION ALL SELECT   \n" +
                "            `s`.`id` AS `id`,  \n" +
                "                `s`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                `kassy`.`partId` AS `subAssyID`,  \n" +
                "                (`kassy`.`perAssyBuildQty` * `s`.`poQty`) AS `planPOQty`,  \n" +
                "                (`kassy`.`perAssyBuildQty` * `s`.`kitReleaseQty`) AS `kitReleaseQty`,  \n" +
                "                `s`.`poDueDate` AS `poDueDate`,  \n" +
                "                `s`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "                `s`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "                `s`.`materialDockDate` AS `materialDockDate`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseKitNumber`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releaseKitNumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`actualKitReleaseDate`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `actualKitReleaseDate`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedBy`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releasedBy`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseTimeFeasibility`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releaseTimeFeasibility`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`woID`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `woID`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedNote`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releasedNote`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitStatus`  \n" +
                "                    ELSE 'P'  \n" +
                "                END) AS `kitStatus`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnStatus`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `kitReturnStatus`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnDate`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `kitReturnDate`,  \n" +
                "                `s`.`refPlanId` AS `refPlanId`  \n" +
                "        FROM  \n" +
                "            (`kit_allocation_assy_detail` `kassy`  \n" +
                "        LEFT JOIN `salesorder_plan_detailsmst` `s` ON (((`s`.`salesOrderDetID` = `kassy`.`refSalesOrderDetID`)  \n" +
                "            AND ISNULL(`s`.`subAssyID`))))  \n" +
                "        WHERE  \n" +
                "            ((`kassy`.`isDeleted` = 0)  \n" +
                "                AND (`kassy`.`bomAssyLevel` = 1)  \n" +
                "                AND (EXISTS( SELECT   \n" +
                "                    'Y'  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sp`  \n" +
                "                WHERE  \n" +
                "                    ((`sp`.`isDeleted` = 0)  \n" +
                "                        AND (`sp`.`refPlanId` = `s`.`id`)  \n" +
                "                        AND (`kassy`.`partId` = `sp`.`subAssyID`)))  \n" +
                "                IS FALSE))) `a`  \n" +
                "        JOIN `salesorderdet` `sd` ON ((`a`.`salesOrderDetID` = `sd`.`id`)))  \n" +
                "        JOIN `salesordermst` `s` ON ((`sd`.`refSalesOrderID` = `s`.`id`)))  \n" +
                "        JOIN `component` `c` ON ((`a`.`refAssyId` = `c`.`id`)))  \n" +
                "        LEFT JOIN `component` `sc` ON ((`a`.`subAssyID` = `sc`.`id`)))  \n" +
                "    WHERE  \n" +
                "  \n" +
                "        ((`a`.`salesOrderDetID` IS NOT NULL)  \n" +
                "            AND (`a`.`refAssyId` IS NOT NULL))  \n" +
                "    ORDER BY `a`.`salesOrderDetID` , `a`.`refAssyId` , `a`.`subAssyID`;  \n" +
                /* **************************** Add Script Version -> 05-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2672,'2.00','V1','View for kit/release plan status report - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2672:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 05-08-2020 *********************************** */

                "INSERT INTO `chart_rawdata_category` (`name`, `dbViewName`, `isDeleted`, `createdBy`) \n" +
                "VALUES ('Kit Plan/Release Status', 'vu_kit_plan_release_status_report', '0', '1'); \n" +

                /* **************************** Add Script Version -> 05-08-2020 *********************************** */

                "select chartRawDataCatID into @chartRawdataCatID from chart_rawdata_category where name='Kit Plan/Release Status';  \n" +

                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'actualKitReleaseDate', 'Actual Kit Release Date', 'datetime', '1', '1', '1', '23.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'plannKitNumber', 'Planned Kit#   ', 'varchar', '1', '1', '1', '2.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'assyNickName', 'Assy Nickname', 'varchar', '1', '1', '1', '6.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'assyPIDCode', 'Assy ID', 'varchar', '1', '1', '1', '5.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'kitNumber', 'Kit Number', 'varchar', '1', '1', '1', '12.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'kitQty', 'Kit Oty', 'int', '1', '1', '1', '11.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'kitReleaseDate', 'Planned Kit Release Date', 'date', '1', '1', '1','17.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'kitReleaseQty', 'Planned Kit & Planned Build Qty', 'int', '1', '1', '1','14.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'kitReturnDate', 'Kit Return Date', 'datetime', '1', '1', '1','30.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'kitReturnStatus', 'Kit Return Status', 'varchar', '1', '1', '1','29.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'kitStatus', 'Kit Release Status', 'varchar', '1', '1', '1','28.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'materialDockDate', 'Material Dock Date', 'date', '1', '1', '1','18.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'mfrLeadTime', 'Build Lead Time (Business Days)', 'int', '1', '1', '1','16.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'mrpQty', 'MRP Qty', 'int', '1', '1', '1','10.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'planPOQty', 'Promised Ship Qty From PO', 'int', '1', '1', '1','13.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'poDueDate', 'Promised Ship Date', 'date', '1', '1', '1','15.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'poNumber', 'PO#', 'varchar', '1', '1', '1','4.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'poQty', 'PO Qty', 'int', '1', '1', '1','9.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'releasedByName', 'Kit Returned By', 'varchar', '1', '1', '1','31.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'releaseKitNumber', 'Released Kit Number', 'varchar', '1', '1', '1','22.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'releaseTimeFeasibility', 'Feasibility at the time of the release ', 'int', '1', '1', '1','25.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'salesOrderNumber', 'SO#', 'varchar', '1', '1', '1','3.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'releasedBy', 'Release By', 'varchar', '1', '1', '1','24.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'subAssyNickName', 'Sub Assy Nickname', 'varchar', '1', '1', '1','8.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'subAssyPIDCode', 'Sub Assy ID', 'varchar', '1', '1', '1','7.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'workorderNumber', 'WO#', 'varchar', '1', '1', '1','26.00');  \n" +
                "INSERT INTO `chart_rawdata_category_fields` (`chartRawdataCatID`, `field`, `displayName`, `dataType`, `isActive`, `createdBy`, `isStaticField`, `displayOrder`) VALUES ((select @chartRawdataCatID), 'releasedNote', 'Released Comment', 'varchar', '1', '1', '1','27.00');  \n" +

                /* **************************** Add Script Version -> 05-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2673,'2.00','V1','add column for Kit/Release plan Status report - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2673:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-08-2020  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_ApplyCommonDateFormatByParaValue` ;  \n" +
                "CREATE FUNCTION `fun_ApplyCommonDateFormatByParaValue`(      \n" +
                "	pDate DATE,    \n" +
                "    pTimezoneOffset VARCHAR(50),    \n" +
                "    pDateDisplayFormat VARCHAR(50)    \n" +
                "    ) RETURNS VARCHAR(50) CHARSET utf8mb4  \n" +
                "BEGIN    \n" +
                "    RETURN DATE_FORMAT(CONVERT_TZ(pDate ,'+00:00',pTimezoneOffset), pDateDisplayFormat);    \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-08-2020  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getDateFormatKey` ;  \n" +
                "CREATE FUNCTION `fun_getDateFormatKey`(    \n" +
                "    ) RETURNS VARCHAR(100) CHARSET utf8mb4  \n" +
                "BEGIN      \n" +
                " DECLARE vDateDisplayFormat VARCHAR(100);          \n" +
                " SELECT `values`->>\"$.MySQLFormat\" INTO vDateDisplayFormat FROM systemconfigrations WHERE `key`=\"DatePickerDateFormat\";    \n" +
                "RETURN vDateDisplayFormat;      \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-08-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSupplierQuoteByPartID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSupplierQuoteByPartID`(                                 \n" +
                "IN pPartID TEXT                                 \n" +
                ")  \n" +
                "BEGIN                                 \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(100);             \n" +
                "	DECLARE vTimeZone VARCHAR(50);             \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;    \n" +
                "	SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;                                      \n" +
                "  \n" +
                "	SET @quoteresult =  CONCAT(\"SELECT 	sq.id supplierQuoteID,  \n" +
                "		sp.id supplierQuotePartID,  \n" +
                "		sq.supplierID,  \n" +
                "		m.mfgCode,  \n" +
                "		m.mfgName,  \n" +
                "		sp.partID,  \n" +
                "		sp.supplierPartID,  \n" +
                "		sq.quoteNumber,  \n" +
                "		sq.quoteDate,  \n" +
                "		fun_ApplyCommonDateFormatByParaValue(sq.quoteDate,'\",vTimeZone,\"', '\",vDateDisplayFormat,\"') quoteDateValue,  \n" +
                "		sq.quoteStatus,  \n" +
                "		c.mfgPN,  \n" +
                "		c.PIDCode,  \n" +
                "		c.RoHSStatusID,  \n" +
                "		c.isCustom,  \n" +
                "		r.name rohs,  \n" +
                "		r.rohsIcon  \n" +
                "	FROM supplier_quote_parts_det sp  \n" +
                "	LEFT JOIN supplier_quote_mst sq ON sq.id = sp.supplierQuoteMstID  \n" +
                "	LeFt Join mfgcodemst m on m.id = sq.supplierID  \n" +
                "	LEFT JOIN Component c ON c.id = sp.partID  \n" +
                "	LEFT JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "	WHERE sp.partID in (\",pPartID,\") AND sp.isDeleted = 0 AND sp.isActive;\");  \n" +
                "	PREPARE quoteresult1 FROM @quoteresult;          \n" +
                "	EXECUTE quoteresult1;                                                                    \n" +
                "	DEALLOCATE PREPARE quoteresult1;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2674,'2.00','V1','User Story 22308: Part Costing Tab Change Based on Supplier Quote for any Custom and non-Custom Part. - Jignesh K '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2674:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MoveSourceFolderDocToDestination` ;  \n" +
                "CREATE PROCEDURE `Sproc_MoveSourceFolderDocToDestination`(    \n" +
                "	IN psourceGencFolderIDsToMove TEXT,    \n" +
                "	IN psourceGencFileIDsToMove TEXT,  \n" +
                "	IN pdestinationGencFolderIDInMove INT,  \n" +
                "	IN pentityID INT,  \n" +
                "	IN pgencFileOwnerType VARCHAR(100),    \n" +
                "	IN prefTransID INT,    \n" +
                "	IN puserID VARCHAR(50),    \n" +
                "	IN pparentFolderIDOfSelected INT ,  # parent folder of selected folders/files      \n" +
                "	IN proleIdOfDestinationGencFolder INT  \n" +
                "  \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE lv_mainParentFolderID INT;     \n" +
                "	DECLARE isSelectedParentIsMainParentFolder TINYINT;  \n" +
                "	DECLARE v_totDuplicateFiles INT;    \n" +
                "	DECLARE v_totDuplicateFilesFromSourceGencFileIDsToMove INT;     \n" +
                "  \n" +
                "	# --------------- Move folder related changes : source ------------------------    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_errorlog_allFolderDocToMove;    \n" +
                "	CREATE TEMPORARY TABLE temp_errorlog_allFolderDocToMove (    \n" +
                "		errorLogID VARCHAR(50),  \n" +
                "		errorText VARCHAR(2000)  \n" +
                "	);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_source_allFoldersToMove;    \n" +
                "	CREATE TEMPORARY TABLE temp_source_allFoldersToMove (    \n" +
                "		gencFolderID INT,    \n" +
                "		gencFolderName VARCHAR(255),    \n" +
                "		refParentId INT,    \n" +
                "		roleId INT,    \n" +
                "		copyInnerFilesFolder INT,    \n" +
                "		levelID INT    \n" +
                "	);    \n" +
                "  \n" +
                "	# when any source folder selected to move     \n" +
                "	IF (psourceGencFolderIDsToMove IS NOT NULL AND psourceGencFolderIDsToMove != '') THEN   \n" +
                "			# get all deleted folders while move folder action  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_source_allDeletedFoldersWhileMove;    \n" +
                "			SET @query_source_allDeletedFoldersWhileMove = CONCAT('    \n" +
                "				CREATE TEMPORARY TABLE temp_source_allDeletedFoldersWhileMove    \n" +
                "					SELECT 	gencFolderName     \n" +
                "					FROM 	generic_folder    \n" +
                "					WHERE 	deletedAt IS NOT NULL    \n" +
                "					AND 	gencFolderID IN (',psourceGencFolderIDsToMove,')    \n" +
                "			 ');	    \n" +
                "			PREPARE st_query_source_allDeletedFolders FROM @query_source_allDeletedFoldersWhileMove;                                                                \n" +
                "			EXECUTE st_query_source_allDeletedFolders;			  \n" +
                "  \n" +
                "			# get all inner folders of selected source folders  \n" +
                "			SET @query_source_allInnerFolder = CONCAT('      \n" +
                "			INSERT INTO temp_source_allFoldersToMove(`gencFolderID`,`gencFolderName`,`refParentId`,`roleId`,`copyInnerFilesFolder`,`levelID`)    \n" +
                "			SELECT al.gencFolderID, al.gencFolderName,al.refParentId,al.roleId ,al.copyInnerFilesFolder, al.levelID    \n" +
                "			FROM (    \n" +
                "					WITH RECURSIVE cte AS (    \n" +
                "						  SELECT     gencFolderID ,gencFolderName, refParentId,roleId,    \n" +
                "								1 copyInnerFilesFolder,1 levelID    \n" +
                "						  FROM       generic_folder    \n" +
                "						  WHERE      gencFolderID IN (',psourceGencFolderIDsToMove,')     \n" +
                "						  AND 	     deletedAt IS NULL	    \n" +
                "						  AND 	     gencFileOwnerType = \"',pgencFileOwnerType,'\"  AND refTransID =  ',prefTransID,'	    \n" +
                "					  UNION     \n" +
                "						SELECT     gf.gencFolderID , gf.gencFolderName,gf.refParentId,gf.roleId ,    \n" +
                "								1 copyInnerFilesFolder , levelID + 1 levelID    \n" +
                "						FROM       generic_folder gf    \n" +
                "						INNER JOIN cte ON gf.refParentId = cte.gencFolderID    \n" +
                "						WHERE      gf.deletedAt IS NULL    \n" +
                "						AND 	   gf.gencFileOwnerType = \"',pgencFileOwnerType,'\"  AND gf.refTransID =  ',prefTransID,'	    \n" +
                "					  )    \n" +
                "					  SELECT * FROM cte    \n" +
                "				) al   \n" +
                "  \n" +
                "			');	    \n" +
                "			PREPARE st_query_source_allInnerFolder FROM @query_source_allInnerFolder;                                                                \n" +
                "			EXECUTE st_query_source_allInnerFolder;	  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		# get main parent role folder ID like super admin,etc    \n" +
                "		# if already main parent like super admin then its refParent is null so main parent is same one    \n" +
                "		SELECT gencFolderID INTO lv_mainParentFolderID    \n" +
                "		FROM generic_folder    \n" +
                "		WHERE deletedAt IS NULL    \n" +
                "		AND gencFolderID =  pparentFolderIDOfSelected    \n" +
                "		AND gencFileOwnerType IS NULL AND refTransID = 0     \n" +
                "		AND refParentId IS NULL AND entityID IS NULL ;    \n" +
                "  \n" +
                "		IF(lv_mainParentFolderID IS NULL) THEN    \n" +
                "			SET isSelectedParentIsMainParentFolder = 0;    \n" +
                "  \n" +
                "			SELECT gencFolderID INTO lv_mainParentFolderID    \n" +
                "			FROM generic_folder    \n" +
                "			WHERE deletedAt IS NULL    \n" +
                "			AND gencFolderID IN (SELECT refParentId FROM temp_source_allFoldersToMove)       \n" +
                "			AND refTransID = 0 AND refParentId IS NULL AND entityID IS NULL ;    \n" +
                "  \n" +
                "		ELSE    \n" +
                "			SET isSelectedParentIsMainParentFolder = 1;    \n" +
                "		END IF;    \n" +
                "  \n" +
                "		ALTER TABLE temp_source_allFoldersToMove    \n" +
                "		ADD COLUMN folderLevel INT;    \n" +
                "  \n" +
                "		/*  \n" +
                "		# if only file selected from super admin level type then it is always file at 1st level    \n" +
                "		# and folder at 0 level    \n" +
                "		IF((psourceGencFolderIDsToMove IS NULL OR psourceGencFolderIDsToMove = '') AND (SELECT COUNT(1) FROM temp_source_allFoldersToMove) = 1    \n" +
                "			AND isSelectedParentIsMainParentFolder = 1) THEN    \n" +
                "  \n" +
                "				UPDATE temp_source_allFoldersToMove    \n" +
                "				SET 	folderLevel = 0;    \n" +
                "  \n" +
                "		ELSE  */  \n" +
                "  \n" +
                "			# make levelID wise folder group level     \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_source_allFolders_level;    \n" +
                "			CREATE TEMPORARY TABLE temp_source_allFolders_level    \n" +
                "				SELECT gencFolderID , DENSE_RANK() OVER (    \n" +
                "							ORDER BY levelID    \n" +
                "							) folderLevel    \n" +
                "				FROM temp_source_allFoldersToMove ;    \n" +
                "  \n" +
                "			# update original table source folder with folderLevel    \n" +
                "			UPDATE temp_source_allFoldersToMove gf1 , temp_source_allFolders_level gf2    \n" +
                "			SET gf1.folderLevel = gf2.folderLevel     \n" +
                "			WHERE gf1.gencFolderID = gf2.gencFolderID ;    \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_source_allFolders_level;     \n" +
                "  \n" +
                "			/*  \n" +
                "			# insert folder which is super admin level main parent    \n" +
                "			INSERT INTO temp_source_allFoldersToMove(`gencFolderID`,`gencFolderName`,`refParentId`,`roleId`,    \n" +
                "									`copyInnerFilesFolder`,`levelID` ,`folderLevel`)    \n" +
                "			SELECT 	gencFolderID ,gencFolderName ,  refParentId , roleId ,     \n" +
                "				0 copyInnerFilesFolder , 0 levelID , 0 folderLevel    \n" +
                "			FROM 	generic_folder	    \n" +
                "			WHERE 	gencFolderID = (lv_mainParentFolderID);    \n" +
                "			*/  \n" +
                "  \n" +
                "  \n" +
                "			# insert folder which is refParent of selected folder  \n" +
                "			INSERT INTO temp_source_allFoldersToMove(`gencFolderID`,`gencFolderName`,`refParentId`,`roleId`,    \n" +
                "									`copyInnerFilesFolder`,`levelID` ,`folderLevel`)    \n" +
                "			SELECT 	gencFolderID ,gencFolderName ,  refParentId , roleId ,     \n" +
                "				0 copyInnerFilesFolder , 0 levelID , 0 folderLevel    \n" +
                "			FROM 	generic_folder	    \n" +
                "			WHERE 	gencFolderID = pparentFolderIDOfSelected;    \n" +
                "  \n" +
                "  \n" +
                "		/* END IF; */	  \n" +
                "  \n" +
                "		/*  \n" +
                "		SELECT 'all source inner folders with folderLevel';  \n" +
                "		SELECT * FROM temp_source_allFoldersToMove;  \n" +
                "		*/  \n" +
                "  \n" +
                "		IF (SELECT COUNT(1) FROM temp_source_allFoldersToMove   \n" +
                "			WHERE gencFolderID = pdestinationGencFolderIDInMove AND folderLevel >= 1 LIMIT 1) > 0 THEN  \n" +
                "  \n" +
                "			INSERT INTO temp_errorlog_allFolderDocToMove(`errorLogID`,`errorText`)   \n" +
                "			VALUES ('e1001','The destination folder is a subfolder of the source folder.') ;  \n" +
                "  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	IF((SELECT COUNT(1) FROM temp_errorlog_allFolderDocToMove) = 0) THEN  \n" +
                "  \n" +
                "		# --------------------- Create/move new folder to destination related changes ------------------------   \n" +
                "  \n" +
                "		IF (psourceGencFolderIDsToMove IS NOT NULL AND psourceGencFolderIDsToMove != '') THEN 	  \n" +
                "		-- IF(psourceGencFolderIDsToMove IS NOT NULL OR     \n" +
                "				-- (psourceGencFileIDsToMove IS NOT NULL AND isSelectedParentIsMainParentFolder = 0)) THEN  \n" +
                "  \n" +
                "			# destination get all exists folder from selected  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_destination_allExistsFolders;    \n" +
                "  \n" +
                "			CREATE TEMPORARY TABLE temp_destination_allExistsFolders AS    \n" +
                "				WITH RECURSIVE cte AS (    \n" +
                "					SELECT     gencFolderID ,gencFolderName, refParentId,roleId,0 folderLevel    \n" +
                "					FROM       generic_folder    \n" +
                "					WHERE      gencFolderID IN (pdestinationGencFolderIDInMove)    \n" +
                "					AND 	   deletedAt IS NULL		    \n" +
                "				      UNION     \n" +
                "					SELECT     gf.gencFolderID , gf.gencFolderName,gf.refParentId,gf.roleId , folderLevel + 1 folderLevel    \n" +
                "					FROM       generic_folder gf    \n" +
                "					INNER JOIN cte ON gf.refParentId = cte.gencFolderID    \n" +
                "					WHERE      gf.deletedAt IS NULL    \n" +
                "					AND 	   gf.gencFileOwnerType = pgencFileOwnerType  AND gf.refTransID = prefTransID    \n" +
                "					  )    \n" +
                "					SELECT * FROM cte ;    \n" +
                "  \n" +
                "			/*  \n" +
                "			SELECT 'all destination inner folders';  \n" +
                "			SELECT * FROM temp_destination_allExistsFolders;  \n" +
                "			*/  \n" +
                "  \n" +
                "			#-------------- start - create all required folders to destination -------------------    \n" +
                "  \n" +
                "			# cretae new temp table from copy op all folder    \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_source_allFoldersToMove_ref;    \n" +
                "			CREATE TEMPORARY TABLE temp_source_allFoldersToMove_ref AS     \n" +
                "				SELECT * FROM temp_source_allFoldersToMove;    \n" +
                "  \n" +
                "			ALTER TABLE temp_source_allFoldersToMove_ref     \n" +
                "			ADD COLUMN refParentIdForDestinationNewFolder INT;    \n" +
                "			# get destination existing folder ref and update into new existing/creting folder as parentRefID     \n" +
                "  \n" +
                "				#update-1 when selected folders moves to destination then first level folder's refParent always selected destination folder  \n" +
                "				SET @query_update_source_refParentOfSelectedOnly = CONCAT('    \n" +
                "					UPDATE temp_source_allFoldersToMove_ref  \n" +
                "					SET refParentIdForDestinationNewFolder = ',pdestinationGencFolderIDInMove,'  \n" +
                "					WHERE gencFolderID IN (',psourceGencFolderIDsToMove,')	  \n" +
                "				');	    \n" +
                "				PREPARE st_query_update_source_refParentOfSelectedOnly FROM @query_update_source_refParentOfSelectedOnly;                                                                \n" +
                "				EXECUTE st_query_update_source_refParentOfSelectedOnly;  \n" +
                "  \n" +
                "  \n" +
                "				#update-2 for inner folders inside of source selected folder, refParent is exists folder at destination place   \n" +
                "				#or same as it as no folder found at destination and we move same existing source  \n" +
                "				UPDATE temp_source_allFoldersToMove_ref gf1    \n" +
                "				SET refParentIdForDestinationNewFolder = (SELECT gencFolderID    \n" +
                "									FROM temp_destination_allExistsFolders    \n" +
                "									WHERE gencFolderName = (SELECT gencFolderName FROM temp_source_allFoldersToMove     \n" +
                "												WHERE gencFolderID = gf1.refParentId)    \n" +
                "									AND folderLevel =  gf1.folderLevel - 1     \n" +
                "									)  \n" +
                "				WHERE refParentIdForDestinationNewFolder IS NULL				   \n" +
                "				;   \n" +
                "  \n" +
                "			/*	   \n" +
                "			SELECT 'all source folders with new refParent of destination';  \n" +
                "			SELECT * FROM temp_source_allFoldersToMove_ref;  \n" +
                "			*/  \n" +
                "  \n" +
                "  \n" +
                "			# create all required folder from source to destination    \n" +
                "			/* INSERT INTO generic_folder                                                    \n" +
                "				(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,    \n" +
                "				`roleId`,`refParentId`,                                                    \n" +
                "				`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`)       */  \n" +
                "  \n" +
                "			/*	  \n" +
                "			SELECT  gf.gencFolderName,  prefTransID refTransID , pentityID entityID, pgencFileOwnerType gencFileOwnerType,     \n" +
                "				gf.roleId, ifnull(gf.refParentIdForDestinationNewFolder,gf.refParentId) refParentId,                                                    \n" +
                "				0 isDeleted,   \n" +
                "				-- fun_DatetimetoUTCDateTime() createdAt,   \n" +
                "				puserID createdBy, gf.gencFolderID copyGencFolderID                                              \n" +
                "			FROM temp_source_allFoldersToMove_ref gf    \n" +
                "			WHERE gf.gencFolderName NOT IN (SELECT gencFolderName FROM temp_destination_allExistsFolders    \n" +
                "								WHERE folderLevel = gf.folderLevel)   \n" +
                "			AND gf.folderLevel != 0    \n" +
                "			;   \n" +
                "			*/  \n" +
                "  \n" +
                "  \n" +
                "			# update refParent of moved folder >> to destination new parent folder					  \n" +
                "			UPDATE generic_folder gf, temp_source_allFoldersToMove_ref afr  \n" +
                "			SET gf.refParentID = IFNULL(afr.refParentIdForDestinationNewFolder,gf.refParentId) ,   \n" +
                "					gf.roleId = proleIdOfDestinationGencFolder  \n" +
                "			WHERE gf.gencFolderID = afr.gencFolderID  \n" +
                "			AND afr.gencFolderName NOT IN (SELECT gencFolderName FROM temp_destination_allExistsFolders   \n" +
                "							WHERE folderLevel = afr.folderLevel)   \n" +
                "			AND afr.folderLevel != 0  				  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			/*  \n" +
                "			# get destination newly creted parent folder ref and update to new creted child folder as parentRefID							    \n" +
                "			UPDATE generic_folder gf1,                                                    \n" +
                "				 (   SELECT a.gencFolderID, a.copyGencFolderID                                                    \n" +
                "					FROM generic_folder a     \n" +
                "					WHERE a.refTransID = prefTransID     \n" +
                "					AND a.gencFileOwnerType = pgencFileOwnerType AND a.deletedAt IS NULL                                                   \n" +
                "				 ) gf2                                                    \n" +
                "			SET gf1.refParentId = gf2.gencFolderID                                                    \n" +
                "			WHERE gf1.refParentId = gf2.copyGencFolderID                   \n" +
                "			AND gf1.refTransID = prefTransID AND gf1.gencFileOwnerType = pgencFileOwnerType    \n" +
                "			AND gf1.deletedAt IS NULL ;   \n" +
                "			*/    \n" +
                "  \n" +
                "		-- END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		#-------------- end - create all required folders to destination -------------------	  \n" +
                "  \n" +
                "		# get all newly created/existing folder of destination  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_destination_allFoldersAfterCreated;    \n" +
                "			CREATE TEMPORARY TABLE temp_destination_allFoldersAfterCreated AS    \n" +
                "				WITH RECURSIVE cte AS (    \n" +
                "					SELECT     gencFolderID ,gencFolderName, refParentId,roleId,0 folderLevel    \n" +
                "					FROM       generic_folder    \n" +
                "					WHERE      gencFolderID IN (pdestinationGencFolderIDInMove)    \n" +
                "					AND 	   deletedAt IS NULL		    \n" +
                "				      UNION     \n" +
                "					SELECT     gf.gencFolderID , gf.gencFolderName,gf.refParentId,gf.roleId , folderLevel + 1 folderLevel    \n" +
                "					FROM       generic_folder gf    \n" +
                "					INNER JOIN cte ON gf.refParentId = cte.gencFolderID    \n" +
                "					WHERE      gf.deletedAt IS NULL    \n" +
                "					AND 	   gf.gencFileOwnerType = pgencFileOwnerType  AND gf.refTransID = prefTransID    \n" +
                "					  )    \n" +
                "					SELECT * FROM cte ;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		# --------------------- Move source files related changes   ------------------------    \n" +
                "  \n" +
                "		IF (psourceGencFileIDsToMove IS NOT NULL AND psourceGencFileIDsToMove != '') THEN    \n" +
                "  \n" +
                "  \n" +
                "			# get all \"deleted files\" from selected which not required to move now    \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_source_allDeletedFilesWhileMove;    \n" +
                "			SET @query_source_allDeletedFilesWhileMove = CONCAT('    \n" +
                "				CREATE TEMPORARY TABLE temp_source_allDeletedFilesWhileMove    \n" +
                "					SELECT 	gencOriginalName     \n" +
                "					FROM 	genericfiles    \n" +
                "					WHERE 	deletedAt IS NOT NULL    \n" +
                "					AND 	gencFileID IN (',psourceGencFileIDsToMove,')    \n" +
                "			 ');	  \n" +
                "  \n" +
                "  \n" +
                "			PREPARE st_query_source_allDeletedFilesWhileMove FROM @query_source_allDeletedFilesWhileMove;                                                                \n" +
                "			EXECUTE st_query_source_allDeletedFilesWhileMove;    \n" +
                "  \n" +
                "		END IF;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		# get source all files (selected files + selected folder all inner files)    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_source_allInnerFilesToMove;    \n" +
                "		SET @query_source_allInnerFiles = CONCAT('    \n" +
                "			CREATE TEMPORARY TABLE  temp_source_allInnerFilesToMove AS    \n" +
                "				SELECT   gencFileID , gencOriginalName , refParentId , genFilePath ,    \n" +
                "					 gencFileDescription, gencFileExtension, gencFileType , tags , fileSize    \n" +
                "				FROM     genericfiles    \n" +
                "				WHERE    deletedAt IS NULL    \n" +
                "				AND      gencFileOwnerType = \"',pgencFileOwnerType,'\"  AND refTransID =  ',prefTransID,'  \n" +
                "				AND     ( gencFileID IN (',IFNULL(psourceGencFileIDsToMove,0),')     \n" +
                "						OR ( refParentId IN (SELECT gencFolderID     \n" +
                "									FROM temp_source_allFoldersToMove     \n" +
                "									WHERE copyInnerFilesFolder = 1) )    \n" +
                "					)      \n" +
                "			');    \n" +
                "		PREPARE st_query_source_allInnerFiles FROM @query_source_allInnerFiles;                                                                \n" +
                "		EXECUTE st_query_source_allInnerFiles;  \n" +
                "  \n" +
                "		/*  \n" +
                "		SELECT 'get all source files to move';  \n" +
                "		SELECT * FROM temp_source_allInnerFilesToMove;  \n" +
                "		*/  \n" +
                "  \n" +
                "		#------------------- start - create all required files to destination -------------------  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_source_allInnerFilesToMove_ref;    \n" +
                "  \n" +
                "		IF (psourceGencFolderIDsToMove IS NOT NULL AND psourceGencFolderIDsToMove != '') THEN     \n" +
                "  \n" +
                "			CREATE TEMPORARY TABLE temp_source_allInnerFilesToMove_ref    \n" +
                "				SELECT gf.* ,   \n" +
                "					CASE WHEN gf.refParentId = lv_mainParentFolderID THEN 1   \n" +
                "					ELSE ((SELECT folderLevel FROM temp_source_allFoldersToMove     \n" +
                "							WHERE gencFolderID = gf.refParentId) + 1) END AS  fileLevel    \n" +
                "				FROM temp_source_allInnerFilesToMove gf ;    \n" +
                "  \n" +
                "		ELSE  \n" +
                "  \n" +
                "			CREATE TEMPORARY TABLE temp_source_allInnerFilesToMove_ref    \n" +
                "				SELECT gf.* ,   \n" +
                "					CASE WHEN gf.refParentId = lv_mainParentFolderID THEN 1   \n" +
                "					ELSE 1 END AS fileLevel    \n" +
                "				FROM temp_source_allInnerFilesToMove gf ;    \n" +
                "  \n" +
                "		END IF;   \n" +
                "  \n" +
                "		ALTER TABLE temp_source_allInnerFilesToMove_ref     \n" +
                "		ADD COLUMN refParentIdForDestinationNewFile INT;    \n" +
                "		# get destination folder ref and update in to new creating files as parentRefID - refParent of file >> it is at file current level - 1    \n" +
                "		/*  \n" +
                "		IF((psourceGencFolderIDsToMove IS NULL OR psourceGencFolderIDsToMove = '') AND (SELECT COUNT(1) FROM temp_source_allFoldersToMove) = 1    \n" +
                "			AND isSelectedParentIsMainParentFolder = 1) THEN    \n" +
                "			# if only file selected from super admin level type then it is always file at 1st level    \n" +
                "			# and folder at 0 level    \n" +
                "			SELECT 'update files ref parent-0' ;  \n" +
                "			UPDATE temp_source_allInnerFilesToMove_ref gf1    \n" +
                "			SET refParentIdForDestinationNewFile = gf1.refParentId;    \n" +
                "		ELSE  */  \n" +
                "  \n" +
                "		/*  \n" +
                "		SELECT 'update files ref parent-1' ;  \n" +
                "		*/  \n" +
                "  \n" +
                "		IF (psourceGencFileIDsToMove IS NOT NULL AND psourceGencFileIDsToMove != '') THEN   \n" +
                "  \n" +
                "			#update-1 when selected files moves to destination then first level file's refParent always selected destination folder  \n" +
                "			SET @query_update_source_file_refParentOfSelectedOnly = CONCAT('    \n" +
                "				UPDATE temp_source_allInnerFilesToMove_ref  \n" +
                "				SET refParentIdForDestinationNewFile = ',pdestinationGencFolderIDInMove,'  \n" +
                "				WHERE gencFileID IN (',psourceGencFileIDsToMove,')	  \n" +
                "			');	    \n" +
                "			PREPARE st_query_update_source_file_refParentOfSelectedOnly FROM @query_update_source_file_refParentOfSelectedOnly;                                                                \n" +
                "			EXECUTE st_query_update_source_file_refParentOfSelectedOnly;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (psourceGencFolderIDsToMove IS NOT NULL AND psourceGencFolderIDsToMove != '') THEN    \n" +
                "  \n" +
                "			#update-2 for inner files inside of source selected folder, refParent is moving folder or exists folder at destination place  \n" +
                "			UPDATE temp_source_allInnerFilesToMove_ref gf1    \n" +
                "			SET refParentIdForDestinationNewFile = (SELECT gencFolderID FROM temp_destination_allFoldersAfterCreated    \n" +
                "								WHERE gencFolderName = (SELECT gencFolderName FROM temp_source_allFoldersToMove     \n" +
                "											WHERE gencFolderID = gf1.refParentId)    \n" +
                "								AND folderLevel =  gf1.fileLevel - 1     \n" +
                "							      )  \n" +
                "			WHERE refParentIdForDestinationNewFile IS NULL	# if not put 'is null' then it will overwrite above update-1  \n" +
                "			;  \n" +
                "  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		/* END IF; */	  \n" +
                "  \n" +
                "		/*  \n" +
                "		SELECT 'all source files to move with destination refParent' ;  \n" +
                "		SELECT * FROM temp_source_allInnerFilesToMove_ref ;  \n" +
                "		*/  \n" +
                "  \n" +
                "  \n" +
                "		#-------------- get destination all exists files   -------------------    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_destination_allExistsFiles;    \n" +
                "		/*IF((psourceGencFolderIDsToMove IS NULL OR psourceGencFolderIDsToMove = '') AND (SELECT COUNT(1) FROM temp_source_allFoldersToMove) = 1    \n" +
                "			AND isSelectedParentIsMainParentFolder = 1) THEN */  \n" +
                "		IF (psourceGencFolderIDsToMove IS NOT NULL AND psourceGencFolderIDsToMove != '') THEN 	  \n" +
                "  \n" +
                "			CREATE TEMPORARY TABLE temp_destination_allExistsFiles AS    \n" +
                "				SELECT   gencFileID , gencOriginalName , refParentId     \n" +
                "				FROM     genericfiles    \n" +
                "				WHERE    deletedAt IS NULL    \n" +
                "				AND      gencFileOwnerType = pgencFileOwnerType  AND refTransID = prefTransID    \n" +
                "				AND     refParentId IN (SELECT gencFolderID FROM temp_destination_allExistsFolders) 			    \n" +
                "					  ;    \n" +
                "			ALTER TABLE temp_destination_allExistsFiles     \n" +
                "			ADD COLUMN fileLevel INT;    \n" +
                "			# get destination ref parent folder level and file is in it >> so file level is refParentFolderLevel + 1    \n" +
                "			UPDATE temp_destination_allExistsFiles gf    \n" +
                "			SET fileLevel = (SELECT folderLevel FROM temp_destination_allExistsFolders     \n" +
                "							WHERE gencFolderID = gf.refParentId) + 1 ;  \n" +
                "  \n" +
                "		ELSE    \n" +
                "  \n" +
                "			CREATE TEMPORARY TABLE temp_destination_allExistsFiles AS    \n" +
                "				SELECT   gencFileID , gencOriginalName , refParentId     \n" +
                "				FROM     genericfiles    \n" +
                "				WHERE    deletedAt IS NULL    \n" +
                "				AND      gencFileOwnerType = pgencFileOwnerType  AND refTransID = prefTransID    \n" +
                "				AND      refParentId = pdestinationGencFolderIDInMove			    \n" +
                "					 ;    \n" +
                "			ALTER TABLE temp_destination_allExistsFiles     \n" +
                "			ADD COLUMN fileLevel INT;    \n" +
                "			# here all file is at main parent folder like super admin so file level is at 1     \n" +
                "			UPDATE temp_destination_allExistsFiles gf    \n" +
                "			SET fileLevel =  1 ;  \n" +
                "  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		/*  \n" +
                "		SELECT 'destination all exists files';  \n" +
                "		SELECT * FROM temp_destination_allExistsFiles;  \n" +
                "		*/  \n" +
                "  \n" +
                "		/*  \n" +
                "		SELECT 'required/new file to move in to destination from source';  \n" +
                "		*/  \n" +
                "  \n" +
                "		/*  \n" +
                "		# all required to move files into destination folder  \n" +
                "		SELECT  gf.gencOriginalName gencOriginalName , gf.gencFileDescription gencFileDescription,     \n" +
                "			gf.gencFileExtension gencFileExtension, gf.gencFileType gencFileType, gf.tags tags,     \n" +
                "			prefTransID refTransID , pentityID entityID , pgencFileOwnerType gencFileOwnerType ,     \n" +
                "			 gf.refParentIdForDestinationNewFile refParentId ,gf.fileSize fileSize,   \n" +
                "			 gf.genFilePath genFilePathOfSourceMstFile    \n" +
                "		FROM temp_source_allInnerFilesToMove_ref gf    \n" +
                "		WHERE gencOriginalName NOT IN (SELECT gencOriginalName FROM temp_destination_allExistsFiles    \n" +
                "						WHERE fileLevel = gf.fileLevel     \n" +
                "						AND refParentId = gf.refParentIdForDestinationNewFile) ;   \n" +
                "						*/  \n" +
                "  \n" +
                "  \n" +
                "		# update moved file refParent - destination folder 					  \n" +
                "		UPDATE genericfiles gf, temp_source_allInnerFilesToMove_ref safr  \n" +
                "		SET gf.refParentID = safr.refParentIdForDestinationNewFile 	  \n" +
                "		WHERE gf.gencFileID = safr.gencFileID  \n" +
                "		AND safr.gencOriginalName NOT IN (SELECT gencOriginalName FROM temp_destination_allExistsFiles    \n" +
                "						WHERE fileLevel = safr.fileLevel     \n" +
                "						AND refParentId = safr.refParentIdForDestinationNewFile)  				  \n" +
                "		;	  \n" +
                "  \n" +
                "		/*  \n" +
                "		SELECT 'get all duplicate files' ;  \n" +
                "		*/  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_source_destination_allDuplicateFilesToCopy;    \n" +
                "		CREATE TEMPORARY TABLE temp_source_destination_allDuplicateFilesToCopy(    \n" +
                "			gencFileID INT,    \n" +
                "			gencOriginalName VARCHAR(255),    \n" +
                "			refParentId INT,    \n" +
                "			refParentFolderName VARCHAR(255),    \n" +
                "			fileLevel INT,    \n" +
                "			refTransIDOfDestination INT,    \n" +
                "			refParentIdForDestinationNewFile INT,    \n" +
                "			gencFileIDOfDestinationExistsFile INT ,  \n" +
                "			isRemoveRefParentFolderOfSourceFile TINYINT   \n" +
                "		);  \n" +
                "  \n" +
                "		# duplicate file list  \n" +
                "		# if  any/only outer file selected for move then no need to move its folder - isRemoveRefParentFolderOfSourceFile  \n" +
                "		# we have to move folder for folder with inner file case  \n" +
                "		INSERT INTO temp_source_destination_allDuplicateFilesToCopy     \n" +
                "		(`gencFileID`,`gencOriginalName`,`refParentId`,    \n" +
                "			`refParentFolderName`,    \n" +
                "			`fileLevel`, `refTransIDOfDestination`, `refParentIdForDestinationNewFile`,    \n" +
                "			`gencFileIDOfDestinationExistsFile`,  \n" +
                "			`isRemoveRefParentFolderOfSourceFile`)    \n" +
                "		SELECT gfo.`gencFileID` , gfo.`gencOriginalName` , gfo.`refParentId` ,    \n" +
                "			(SELECT gencFolderName FROM generic_folder WHERE gencFolderID = gfo.`refParentId`) refParentFolderName ,    \n" +
                "			gfo.fileLevel, prefTransID refTransIDOfDestination , gfo.`refParentIdForDestinationNewFile` ,    \n" +
                "			gfwoop.gencFileID AS gencFileIDOfDestinationExistsFile ,  \n" +
                "			 CASE WHEN (SELECT FIND_IN_SET(gfo.`gencFileID`,psourceGencFileIDsToMove) > 0) THEN 0  \n" +
                "								ELSE 1 END  isRemoveRefParentFolderOfSourceFile  \n" +
                "		FROM temp_source_allInnerFilesToMove_ref gfo     \n" +
                "			JOIN temp_destination_allExistsFiles gfwoop ON gfo.gencOriginalName = gfwoop.gencOriginalName    \n" +
                "								AND gfo.fileLevel = gfwoop.fileLevel    \n" +
                "								AND gfo.refParentIdForDestinationNewFile = gfwoop.refParentId     \n" +
                "		;    \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_totDuplicateFiles   \n" +
                "		FROM temp_source_destination_allDuplicateFilesToCopy ;  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_totDuplicateFilesFromSourceGencFileIDsToMove   \n" +
                "		FROM temp_source_destination_allDuplicateFilesToCopy WHERE isRemoveRefParentFolderOfSourceFile = 0 ;	  \n" +
                "  \n" +
                "		# remove source folder which is available with same name in destination - only if it has no any duplicate files in it   \n" +
                "		IF (psourceGencFolderIDsToMove IS NOT NULL AND psourceGencFolderIDsToMove != '' AND   \n" +
                "			(  \n" +
                "				v_totDuplicateFiles = 0   \n" +
                "				OR (v_totDuplicateFiles > 0 AND v_totDuplicateFiles = v_totDuplicateFilesFromSourceGencFileIDsToMove)   \n" +
                "				# duplicate file count is what we selected from then also remove other folder because no need to do with selected file refPanre  \n" +
                "			  )			  \n" +
                "		) THEN   \n" +
                "  \n" +
                "  \n" +
                "			# update refParent of moved folder >> to destination new parent folder					  \n" +
                "			UPDATE generic_folder gf, temp_source_allFoldersToMove_ref afr  \n" +
                "			SET gf.isDeleted = 1 , gf.deletedAt = fun_DatetimetoUTCDateTime() , gf.deletedBy = puserID   \n" +
                "			WHERE gf.gencFolderID = afr.gencFolderID  \n" +
                "			AND afr.gencFolderName IN (SELECT gencFolderName FROM temp_destination_allExistsFolders   \n" +
                "							WHERE folderLevel = afr.folderLevel)   \n" +
                "			AND afr.folderLevel != 0  				  \n" +
                "			;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	 END IF;   \n" +
                "  \n" +
                "	IF ((SELECT COUNT(1) FROM temp_errorlog_allFolderDocToMove) > 0) THEN  \n" +
                "  \n" +
                "		SELECT 0 AS ismovesuccess;    \n" +
                "  \n" +
                "		# get error log details  \n" +
                "		SELECT * FROM temp_errorlog_allFolderDocToMove;	  \n" +
                "  \n" +
                "	ELSE   \n" +
                "  \n" +
                "		SELECT 1 AS ismovesuccess;   \n" +
                "  \n" +
                "		# SELECT 'deleted_source_folder' ;    \n" +
                "		IF (psourceGencFolderIDsToMove IS NOT NULL AND psourceGencFolderIDsToMove != '') THEN   \n" +
                "			SELECT * FROM temp_source_allDeletedFoldersWhileMove;  \n" +
                "		ELSE  \n" +
                "			SELECT 0 AS deleted_source_folder;    \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		# SELECT 'deleted_source_files' ;    \n" +
                "		IF (psourceGencFileIDsToMove IS NOT NULL AND psourceGencFileIDsToMove != '') THEN   \n" +
                "			SELECT * FROM temp_source_allDeletedFilesWhileMove;  \n" +
                "		ELSE  \n" +
                "			SELECT 0 AS deleted_source_files;	  \n" +
                "		END IF;	  \n" +
                "  \n" +
                "		# SELECT \"duplicate files\";    \n" +
                "		SELECT * FROM temp_source_destination_allDuplicateFilesToCopy;   \n" +
                "  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_errorlog_allFolderDocToMove ;					  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_source_allFoldersToMove;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_source_allDeletedFoldersWhileMove;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_source_allFolders_level;  		    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_destination_allExistsFolders;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_source_allFoldersToMove_ref;   \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_destination_allFoldersAfterCreated ;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_source_allDeletedFilesWhileMove;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_source_allInnerFilesToMove;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_source_allInnerFilesToMove_ref;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_destination_allExistsFiles ;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_source_destination_allDuplicateFilesToCopy;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 05-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MoveSourceDuplicateDocumentToDestination` ;  \n" +
                "CREATE PROCEDURE `Sproc_MoveSourceDuplicateDocumentToDestination`(    \n" +
                "	IN pduplicateFileCopyAction VARCHAR(10),    \n" +
                "	IN puserID INT  \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "		# temp table created on api side    \n" +
                "		# select * from temp_source_allDuplicateFilesToMove;     \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_source_allInvalidFilesToReplace ;    \n" +
                "		CREATE TEMPORARY TABLE temp_source_allInvalidFilesToReplace AS    \n" +
                "			SELECT 	tsadf.gencFileID , tsadf.gencOriginalName , tsadf.refTransIDOfDestination , tsadf.refParentId   \n" +
                "			FROM   	temp_source_allDuplicateFilesToMove tsadf    \n" +
                "				JOIN genericfiles gf1 ON tsadf.gencFileID = gf1.gencFileID    \n" +
                "				JOIN generic_folder gf2 ON tsadf.refParentId = gf2.gencFolderID    \n" +
                "			WHERE   gf1.deletedAt IS NOT NULL    # deletedAt IS NOT NULL to checked deleted files    \n" +
                "				OR    \n" +
                "				gf2.deletedAt IS NOT NULL   # deletedAt IS NOT NULL to checked deleted folder in which file resides			    \n" +
                "				OR    \n" +
                "				(tsadf.refParentId != gf1.refParentId)	# to check refParent is same or not - moved file to other folder    \n" +
                "				OR     \n" +
                "				(tsadf.refParentId = gf1.refParentId	# to check refParent folder name is same or not    \n" +
                "				 AND tsadf.refParentFolderName != gf2.gencFolderName    \n" +
                "				 ) ;	    \n" +
                "  \n" +
                "  \n" +
                "		IF (pduplicateFileCopyAction = 'RFD') THEN  # Replace the file in the destination    \n" +
                "  \n" +
                "			# get all allowed replace file to destination with new refParent  \n" +
                "			SELECT tsadf.gencFileID gencFileIDOfSourceMstFile , gf.gencOriginalName ,    \n" +
                "				gf.gencFileExtension , gf.fileSize ,    \n" +
                "				gf.genFilePath genFilePathOfSourceMstFile,    \n" +
                "				tsadf.refTransIDOfDestination , tsadf.gencFileIDOfDestinationExistsFile ,    \n" +
                "				(SELECT genFilePath FROM genericfiles WHERE deletedAt IS NULL    \n" +
                "					AND gencFileID = tsadf.gencFileIDOfDestinationExistsFile) AS genFilePathOfDestinationExistsFile     \n" +
                "			FROM temp_source_allDuplicateFilesToMove tsadf    \n" +
                "				JOIN genericfiles gf ON tsadf.gencFileID = gf.gencFileID AND gf.deletedAt IS NULL    \n" +
                "			WHERE tsadf.gencFileID NOT IN (SELECT gencFileID FROM temp_source_allInvalidFilesToReplace)    \n" +
                "			;    \n" +
                "  \n" +
                "			# delete duplicate existing file from destination folder 					  \n" +
                "			UPDATE genericfiles   \n" +
                "			SET isDeleted = 1 , deletedAt = fun_DatetimetoUTCDateTime() , deletedBy = puserID   \n" +
                "			WHERE gencFileID IN (SELECT gencFileIDOfDestinationExistsFile FROM temp_source_allDuplicateFilesToMove)  \n" +
                "			AND gencFileID NOT IN (SELECT gencFileID FROM temp_source_allInvalidFilesToReplace)  \n" +
                "			;  \n" +
                "  \n" +
                "			# replace source file to destination - update source file refParent to destination folder 					  \n" +
                "			UPDATE genericfiles gf, temp_source_allDuplicateFilesToMove tsadf  \n" +
                "			SET gf.refParentID = tsadf.refParentIdForDestinationNewFile	  \n" +
                "			WHERE gf.gencFileID = tsadf.gencFileID  \n" +
                "			AND tsadf.gencFileID NOT IN (SELECT gencFileID FROM temp_source_allInvalidFilesToReplace)  \n" +
                "			;  \n" +
                "  \n" +
                "			# remove source folder as duplicate files in it so duplicate folder it is   \n" +
                "			UPDATE generic_folder   \n" +
                "			SET isDeleted = 1 , deletedAt = fun_DatetimetoUTCDateTime() , deletedBy = puserID   \n" +
                "			WHERE gencFolderID IN (SELECT refParentId FROM temp_source_allDuplicateFilesToMove  \n" +
                "						WHERE isRemoveRefParentFolderOfSourceFile = 1)   \n" +
                "			AND gencFolderID NOT IN (SELECT refParentId FROM temp_source_allInvalidFilesToReplace)  \n" +
                "			;  \n" +
                "  \n" +
                "		ELSEIF(pduplicateFileCopyAction = 'KBF') THEN  # Keep Both File    \n" +
                "  \n" +
                "			/*  \n" +
                "			SELECT CONCAT((SUBSTRING(gf.gencOriginalName,1,CHAR_LENGTH(gf.gencOriginalName) - (CHAR_LENGTH(gf.gencFileExtension) + 1))),    \n" +
                "					'-',DATE_FORMAT(UTC_TIMESTAMP(),\"%Y%m%d%H%i%s\"),'.',gf.gencFileExtension) gencOriginalName ,     \n" +
                "				gf.gencFileDescription gencFileDescription,     \n" +
                "				gf.gencFileExtension gencFileExtension , gf.gencFileType gencFileType, gf.tags tags ,     \n" +
                "				tsadf.refTransIDOfDestination refTransID  ,      \n" +
                "				tsadf.refParentIdForDestinationNewFile refParentId , gf.fileSize fileSize ,    \n" +
                "				 gf.refTransID refCopyTransID ,    \n" +
                "				 gf.genFilePath genFilePathOfSourceMstFile     \n" +
                "			FROM temp_source_allDuplicateFilesToMove tsadf    \n" +
                "				JOIN genericfiles gf ON tsadf.gencFileID = gf.gencFileID AND gf.deletedAt IS NULL    \n" +
                "			WHERE tsadf.gencFileID NOT IN (SELECT gencFileID FROM temp_source_allInvalidFilesToReplace)    \n" +
                "			;  \n" +
                "			*/		  \n" +
                "  \n" +
                "			# replace source file to destination - update source file refParent to destination folder   \n" +
                "			# and file name with datetime as keep both file case					  \n" +
                "			UPDATE genericfiles gf, temp_source_allDuplicateFilesToMove tsadf  \n" +
                "			SET gf.refParentID = tsadf.refParentIdForDestinationNewFile ,  \n" +
                "			    gf.gencOriginalName =  (CONCAT((SUBSTRING(gf.gencOriginalName,1,CHAR_LENGTH(gf.gencOriginalName) - (CHAR_LENGTH(gf.gencFileExtension) + 1))),    \n" +
                "					'-',DATE_FORMAT(UTC_TIMESTAMP(),\"%Y%m%d%H%i%s\"),'.',gf.gencFileExtension))  \n" +
                "			WHERE gf.gencFileID = tsadf.gencFileID  \n" +
                "			AND tsadf.gencFileID NOT IN (SELECT gencFileID FROM temp_source_allInvalidFilesToReplace)  \n" +
                "			;  \n" +
                "  \n" +
                "			# remove source folder as duplicate files in it so duplicate folder it is   \n" +
                "			UPDATE generic_folder   \n" +
                "			SET isDeleted = 1 , deletedAt = fun_DatetimetoUTCDateTime() , deletedBy = puserID   \n" +
                "			WHERE gencFolderID IN (SELECT refParentId FROM temp_source_allDuplicateFilesToMove  \n" +
                "						WHERE isRemoveRefParentFolderOfSourceFile = 1)   \n" +
                "			AND gencFolderID NOT IN (SELECT refParentId FROM temp_source_allInvalidFilesToReplace)  \n" +
                "			;	    \n" +
                "  \n" +
                "		ELSE    \n" +
                "			SELECT 'invalid parameter';    \n" +
                "		END IF;    \n" +
                "  \n" +
                "  \n" +
                "		SELECT * FROM temp_source_allInvalidFilesToReplace;    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_source_allInvalidFilesToReplace;    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_source_allDuplicateFilesToMove ;    \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 05-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2675,'2.00','V1',' doc folder move sps - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2675:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 05-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getRefTransDetailForDocument` ;  \n" +
                "CREATE PROCEDURE `Sproc_getRefTransDetailForDocument`(              \n" +
                "	pGencFileOwnerType VARCHAR(255),              \n" +
                "    pRefTransID INT(11)              \n" +
                ")  \n" +
                "BEGIN              \n" +
                "	# This variable is used in dynamic query to update document path and each case block need set table name value              \n" +
                "	DECLARE vTableName VARCHAR(100);              \n" +
                "    # All table PK name is 'id' but in some thable it is different so set value of this variable if PK name is not 'id'              \n" +
                "    DECLARE vTableIdentityColumnName VARCHAR(50);              \n" +
                "    DECLARE vEixstingDocumentPath VARCHAR(500);              \n" +
                "    DECLARE vNewDocumentPath VARCHAR(500);              \n" +
                "    DECLARE vCreatedDate DATETIME;              \n" +
                "    DECLARE vPIDCode VARCHAR(150);        \n" +
                "	DECLARE vReplaceString VARCHAR(50);        \n" +
                "  \n" +
                "		SET vTableIdentityColumnName = 'Id';              \n" +
                "  \n" +
                "		#In below cases get already stored documentPath and generate new documentPath based on requirement               \n" +
                "		CASE pGencFileOwnerType              \n" +
                "			WHEN 'component_sid_stock' THEN              \n" +
                "				-- Comp_sid_stock/Year/{UMID}/{id}              \n" +
                "				SELECT 	documentPath,			CONCAT('UMID/', DATE_FORMAT(createdAt,'%Y'), '/', uid, '/', id) newDocumentPath              \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath               \n" +
                "				FROM 	component_sid_stock               \n" +
                "				WHERE 	id = pRefTransID;              \n" +
                "  \n" +
                "				SET vTableName = 'component_sid_stock';              \n" +
                "  \n" +
                "		 WHEN 'packing_slip' THEN               \n" +
                "				-- PS/{Supplier}/Year/Month/PS#/{id}              \n" +
                "				SELECT 	p.documentPath,			CONCAT('PS/', m.mfgCode , '/', DATE_FORMAT(p.createdAt,'%Y'), '/', DATE_FORMAT(p.createdAt,'%m'), '/', p.packingSlipNumber, '/', p.id) newDocumentPath              \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath               \n" +
                "				FROM 	packing_slip_material_receive p              \n" +
                "				JOIN 	mfgcodemst m ON m.id = p.mfgCodeID              \n" +
                "				WHERE 	p.id = pRefTransID;              \n" +
                "  \n" +
                "				SET vTableName = 'packing_slip_material_receive';              \n" +
                "  \n" +
                "		WHEN 'supplier_invoice' THEN               \n" +
                "				-- Invoice/DK/2020/04/Invoice#/{id}               \n" +
                "				SELECT 	p.documentPath,			CONCAT('Invoice/', m.mfgCode , '/', DATE_FORMAT(p.createdAt,'%Y'), '/', DATE_FORMAT(p.createdAt,'%m'), '/', p.invoiceNumber, '/', p.id) newDocumentPath              \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath               \n" +
                "				FROM 	packing_slip_material_receive p              \n" +
                "				JOIN 	mfgcodemst m ON m.id = p.mfgCodeID              \n" +
                "				WHERE 	p.id = pRefTransID;              \n" +
                "  \n" +
                "				SET vTableName = 'packing_slip_material_receive';          \n" +
                "  \n" +
                "		WHEN 'credit_memo' THEN               \n" +
                "				-- CreditMemo/DK/2020/04/CreditMemo#/{id}              \n" +
                "				SELECT 	p.documentPath,			CONCAT('CreditMemo/', m.mfgCode , '/', DATE_FORMAT(p.createdAt,'%Y'), '/', DATE_FORMAT(p.createdAt,'%m'), '/', p.creditMemoNumber, '/', p.id) newDocumentPath              \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath               \n" +
                "				FROM 	packing_slip_material_receive p              \n" +
                "				JOIN 	mfgcodemst m ON m.id = p.mfgCodeID              \n" +
                "				WHERE 	p.id = pRefTransID;              \n" +
                "  \n" +
                "				SET vTableName = 'packing_slip_material_receive';                 \n" +
                "		WHEN 'debit_memo' THEN               \n" +
                "				-- DebitMemo/DK/2020/04/DebitMemo#/{id}              \n" +
                "				SELECT 	p.documentPath,			CONCAT('DebitMemo/', m.mfgCode , '/', DATE_FORMAT(p.createdAt,'%Y'), '/', DATE_FORMAT(p.createdAt,'%m'), '/', p.debitMemoNumber, '/', p.id) newDocumentPath              \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath               \n" +
                "				FROM 	packing_slip_material_receive p              \n" +
                "				JOIN 	mfgcodemst m ON m.id = p.mfgCodeID              \n" +
                "				WHERE 	p.id = pRefTransID;              \n" +
                "  \n" +
                "				SET vTableName = 'packing_slip_material_receive';            \n" +
                "		WHEN 'supplier_quote' THEN               \n" +
                "				-- SupplierQuote/DK/2020/04/Quote#/{id}               \n" +
                "				SELECT 	s.documentPath,			CONCAT('SupplierQuote/', m.mfgCode , '/', DATE_FORMAT(s.createdAt,'%Y'), '/', DATE_FORMAT(s.createdAt,'%m'), '/', s.quoteNumber, '/', s.id) newDocumentPath              \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath               \n" +
                "				FROM 	supplier_quote_mst s              \n" +
                "				JOIN 	mfgcodemst m ON m.id = s.supplierID              \n" +
                "				WHERE 	s.id = pRefTransID;              \n" +
                "  \n" +
                "				SET vTableName = 'supplier_quote_mst';        \n" +
                "		WHEN 'workorder' THEN              \n" +
                "				-- WO/Year/Month/{WO}/{id}              \n" +
                "				SELECT 	documentPath,			CONCAT('WO/', DATE_FORMAT(createdAt,'%Y'), '/', DATE_FORMAT(createdAt,'%m'), '/', woNumber, '/', woID) newDocumentPath              \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath               \n" +
                "				FROM 	workorder               \n" +
                "				WHERE 	woID = pRefTransID;              \n" +
                "  \n" +
                "				SET vTableName = 'workorder';              \n" +
                "				SET vTableIdentityColumnName = 'woID';              \n" +
                "  \n" +
                "		WHEN 'workorder_operation' THEN        \n" +
                "			-- WO/Year/Month/{wo}/WO_OP/{WO_OP}/{id}        \n" +
                "			SELECT wo.documentPath, CONCAT('WO/', DATE_FORMAT(w.createdAt,'%Y'), '/', DATE_FORMAT(w.createdAt,'%m'), '/', w.woNumber, '/WO_OP/', wo.opNumber, '/', wo.woOPID) newDocumentPath        \n" +
                "			INTO vEixstingDocumentPath, vNewDocumentPath        \n" +
                "			FROM workorder_operation wo        \n" +
                "			JOIN workorder w ON wo.woID = w.woID        \n" +
                "			WHERE woOPID = pRefTransID;        \n" +
                "			SET vTableName = 'workorder_operation';        \n" +
                "			SET vTableIdentityColumnName = 'woOPID';        \n" +
                "  \n" +
                "		 WHEN 'salesorder' THEN              \n" +
                "				-- SO/Year/Month/{SO}/{id}              \n" +
                "				SELECT 	documentPath,			CONCAT('SO/', DATE_FORMAT(createdAt,'%Y'), '/', DATE_FORMAT(createdAt,'%m'), '/', salesOrderNumber, '/', id) newDocumentPath              \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath               \n" +
                "				FROM 	salesordermst               \n" +
                "				WHERE 	id = pRefTransID;              \n" +
                "  \n" +
                "				SET vTableName = 'salesordermst';              \n" +
                "		 WHEN 'operations' THEN              \n" +
                "				-- OP/Year/{OPID}/{id}              \n" +
                "				SELECT 	documentPath,			CONCAT('OP/', DATE_FORMAT(createdAt,'%Y'), '/', opNumber, '/', opID) newDocumentPath              \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath               \n" +
                "				FROM 	operations               \n" +
                "				WHERE 	opID = pRefTransID;              \n" +
                "  \n" +
                "				SET vTableName = 'operations';              \n" +
                "				SET vTableIdentityColumnName = 'opID';              \n" +
                "		 WHEN 'certificate_standards' THEN              \n" +
                "				-- Cert_std/Year/{certificateStandardID}              \n" +
                "				SELECT 	documentPath,			CONCAT('Cert_std/', DATE_FORMAT(createdAt,'%Y'), '/', certificateStandardID) newDocumentPath              \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath               \n" +
                "				FROM 	certificate_standards               \n" +
                "				WHERE 	certificateStandardID = pRefTransID;              \n" +
                "  \n" +
                "				SET vTableName = 'certificate_standards';              \n" +
                "				SET vTableIdentityColumnName = 'certificateStandardID';              \n" +
                "		 WHEN 'component' THEN              \n" +
                "			 -- Comp/Year/{PID}/{id}              \n" +
                "			 SELECT 	documentPath, CONCAT('Comp/', DATE_FORMAT(createdAt,'%Y'), '/', fun_replaceSpecialCharacters(PIDCode), '/', id) newDocumentPath              \n" +
                "			 INTO 	vEixstingDocumentPath,	vNewDocumentPath              \n" +
                "			 FROM 	component              \n" +
                "			 WHERE 	id = pRefTransID;         \n" +
                "			 SET vTableName = 'component';              \n" +
                "		 WHEN 'eco_request' THEN              \n" +
                "				-- eco_request/year/{ecoid}/{ecoReqID}              \n" +
                "				SELECT 	documentPath,			CONCAT('eco_request/', DATE_FORMAT(createdAt,'%Y'), '/', ecoReqID) newDocumentPath              \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath               \n" +
                "				FROM 	eco_request               \n" +
                "				WHERE 	ecoReqID = pRefTransID;              \n" +
                "  \n" +
                "				SET vTableName = 'eco_request';              \n" +
                "				SET vTableIdentityColumnName = 'ecoReqID';              \n" +
                "		 WHEN 'component_customer_loa' THEN              \n" +
                "				-- Comp_Cust_loa/{CustomerCode},{PIDCode}/{id}              \n" +
                "				SELECT 	cloa.documentPath,			CONCAT('Comp_Cust_loa/', m.mfgCode,'/', fun_replaceSpecialCharacters(co.PIDCode) ,'/', cloa.id) newDocumentPath          \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath               \n" +
                "				FROM 	component_customer_loa cloa              \n" +
                "				JOIN	mfgcodemst m ON m.id = cloa.customerID              \n" +
                "                JOIN component co ON co.id = cloa.componentID          \n" +
                "				WHERE 	cloa.id = pRefTransID;              \n" +
                "  \n" +
                "				SET vTableName = 'component_customer_loa';              \n" +
                "		 WHEN 'equipment' THEN              \n" +
                "				-- equip/{id}              \n" +
                "				SELECT 	documentPath,			CONCAT('equip/', eqpID) newDocumentPath              \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath               \n" +
                "				FROM 	equipment               \n" +
                "				WHERE 	eqpID = pRefTransID;              \n" +
                "  \n" +
                "				SET vTableName = 'equipment';              \n" +
                "				SET vTableIdentityColumnName = 'eqpID';              \n" +
                "		 WHEN 'equipment_task' THEN              \n" +
                "				-- equip_task/{id}              \n" +
                "				SELECT 	documentPath,			CONCAT('equip_task/', eqpTaskID) newDocumentPath              \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath               \n" +
                "				FROM 	equipment_task               \n" +
                "				WHERE 	eqpTaskID = pRefTransID;              \n" +
                "  \n" +
                "				SET vTableName = 'equipment_task';              \n" +
                "				SET vTableIdentityColumnName = 'eqpTaskID';              \n" +
                "			WHEN 'employees' THEN              \n" +
                "				-- emp/{id}              \n" +
                "				SELECT 	documentPath,			CONCAT('emp/', id) newDocumentPath              \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath               \n" +
                "				FROM 	employees               \n" +
                "				WHERE 	id = pRefTransID;              \n" +
                "  \n" +
                "				SET vTableName = 'employees';              \n" +
                "			WHEN 'bom' THEN              \n" +
                "				-- rfq/custcode/year/{Groupid}/{pid}/{id}              \n" +
                "				SELECT 	ra.documentPath,			CONCAT('rfq/', m.mfgCode , '/', DATE_FORMAT(ra.createdAt,'%Y'), '/', ra.rfqrefID, '/', c.PIDCode, '/', ra.id) newDocumentPath              \n" +
                "				INTO 	vEixstingDocumentPath,	vNewDocumentPath               \n" +
                "				FROM 	rfq_assemblies ra              \n" +
                "				JOIN 	rfqforms rf ON rf.id = ra.rfqrefID              \n" +
                "				JOIN 	mfgcodemst m ON m.id = rf.customerId              \n" +
                "				JOIN 	component c ON c.id = ra.partID              \n" +
                "				WHERE 	ra.id = pRefTransID;              \n" +
                "  \n" +
                "				SET vTableName = 'rfq_assemblies';              \n" +
                "			ELSE              \n" +
                "				#This is default case so if case value is not match just set table name is null               \n" +
                "				SET vTableName = NULL;              \n" +
                "			END CASE;              \n" +
                "  \n" +
                "		#If table name is null, it means no need to do anything related to document path.              \n" +
                "		IF(vTableName IS NOT NULL) THEN              \n" +
                "  \n" +
                "			# Update document path if document path in record is null or new path not match with old path              \n" +
                "			IF(vEixstingDocumentPath IS NULL OR vEixstingDocumentPath != vNewDocumentPath) THEN              \n" +
                "            	SET @vSQLStatement = CONCAT(\"update \", vTableName, \" set documentPath = \\\"\", vNewDocumentPath, \"\\\" where \", vTableIdentityColumnName, \" = \", pRefTransID);              \n" +
                "                PREPARE query1 FROM @vSQLStatement;                            \n" +
                "				EXECUTE query1;                              \n" +
                "				DEALLOCATE PREPARE query1;               \n" +
                "			END IF;              \n" +
                "			SELECT 1 isBasedOnCreatedDate, pRefTransID refTransID, pGencFileOwnerType gencFileOwnerType,              \n" +
                "					vEixstingDocumentPath oldDocumentPath, vNewDocumentPath newDocumentPath;              \n" +
                "		ELSEIF (pGencFileOwnerType = 'textAngular') THEN              \n" +
                "			SET vCreatedDate = fun_DatetimetoUTCDateTime();              \n" +
                "			SELECT 1 isBasedOnCreatedDate, NULL refTransID, pGencFileOwnerType gencFileOwnerType, NULL oldDocumentPath,               \n" +
                "					CONCAT('textAngular/', DATE_FORMAT(vCreatedDate,'%Y'), '/', DATE_FORMAT(vCreatedDate,'%m'))newDocumentPath;              \n" +
                "		ELSE               \n" +
                "			SELECT 0 isBasedOnCreatedDate;              \n" +
                "		END IF;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveSupplierQuotePartPricingHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuotePartPricingHistory`(                                                  \n" +
                "	IN pSupplierQuotePartDetID INT(11),                                                  \n" +
                "	IN ppageIndex INT(11),                                                  \n" +
                "	IN precordPerPage INT(11),                                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                                  \n" +
                "	IN pWhereClause VARCHAR(16383)               \n" +
                ")  \n" +
                "BEGIN                                                  \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveSupplierQuotePartPricingHistory = CONCAT(\"            \n" +
                "			SELECT 						    \n" +
                "				s.id,    \n" +
                "                s.refSupplierQuotePartDetID,  \n" +
                "                s.itemNumber,  \n" +
                "                s.Colname,  \n" +
                "                s.Oldval,  \n" +
                "                s.Newval,              \n" +
                "				fun_getUserNameByID(s.updatedBy) updatedBy,              						     \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(s.UpdatedAt) updatedAt    \n" +
                "			FROM    \n" +
                "				supplier_quote_part_price_history s	  		  \n" +
                "            WHERE    \n" +
                "				s.refSupplierQuotePartDetID =\",pSupplierQuotePartDetID,\"  \n" +
                "	\");                        \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;                                                  \n" +
                "	ELSE                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                  \n" +
                "	END IF;	                                                  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                  \n" +
                "		SET pWhereClause = '1=1' ;                                                  \n" +
                "	END IF;	                                                  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                  \n" +
                "	ELSE	                                                  \n" +
                "		SET rowNumWhere = '';                                                  \n" +
                "	END IF;	                                                   \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                               \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuotePartPricingHistory,\" ) c where 1=1 and \", pWhereClause);                            	   \n" +
                "	PREPARE query1 FROM @SQLStatement1;                              \n" +
                "	EXECUTE query1;                              \n" +
                "	DEALLOCATE PREPARE query1;                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuotePartPricingHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query2;                              \n" +
                "	DEALLOCATE PREPARE query2;                           \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getSupplierQuoteAttibuteNameByID` ;  \n" +
                "CREATE FUNCTION `fun_getSupplierQuoteAttibuteNameByID`(          \n" +
                "	pAttributeID INT) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN          \n" +
                "		DECLARE vAttibute VARCHAR(500);               \n" +
                "		SELECT fieldName INTO vAttibute    \n" +
                "					FROM     \n" +
                "				quotecharges_dynamic_fields_mst WHERE id=pAttributeID AND quoteAttributeType='S';    \n" +
                "		RETURN vAttibute;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getNCNRByID` ;  \n" +
                "CREATE FUNCTION `fun_getNCNRByID`(          \n" +
                "	pNCNRID INT) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN          \n" +
                "		DECLARE vNCNR VARCHAR(10);               \n" +
                "		IF (pNCNRID=0) THEN  \n" +
                "			SET vNCNR='Unknown';  \n" +
                "		ELSEIF (pNCNRID=1) THEN  \n" +
                "			SET vNCNR='Yes';  \n" +
                "		ELSEIF (pNCNRID=2) THEN  \n" +
                "			SET vNCNR='No';  \n" +
                "		ELSE  \n" +
                "			SET vNCNR='';	  \n" +
                "		END IF;      \n" +
                "	RETURN vNCNR;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCustomReelingByID` ;  \n" +
                "CREATE FUNCTION `fun_getCustomReelingByID`(          \n" +
                "	pReelingID INT) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN          \n" +
                "		DECLARE vReeling VARCHAR(10);               \n" +
                "		IF (pReelingID=0) THEN  \n" +
                "			SET vReeling='Unknown';  \n" +
                "		ELSEIF (pReelingID=1) THEN  \n" +
                "			SET vReeling='Yes';  \n" +
                "		ELSEIF (pReelingID=2) THEN  \n" +
                "			SET vReeling='No';  \n" +
                "		ELSE  \n" +
                "			SET vReeling='';	  \n" +
                "		END IF;      \n" +
                "	RETURN vReeling;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-08-2020 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_SupplierQuotePartPriceAttribute_LineItem_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_SupplierQuotePartPriceAttribute_LineItem_History` AFTER UPDATE ON `supplier_quote_part_price_attribute`   \n" +
                "    FOR EACH ROW BEGIN                                            \n" +
                "  \n" +
                "     IF IFNULL(OLD.Price, 0) != IFNULL(NEW.Price, 0) THEN           \n" +
                "		  INSERT INTO supplier_quote_part_price_history                                             \n" +
                "					(tableName, refSupplierQuotePartDetID, itemNumber, Colname,                                            \n" +
                "						Oldval,Newval,                                            \n" +
                "					createdAt,updatedAt,updatedBy,createdBy)                                             \n" +
                "		  VALUES (\"supplier_quote_part_price_attribute\", (SELECT supplierQuotePartDetID FROM supplier_quote_part_price WHERE id=OLD.supplierQuotePartPriceID),   \n" +
                "          (SELECT itemNumber FROM supplier_quote_part_price WHERE id=OLD.supplierQuotePartPriceID), fun_getSupplierQuoteAttibuteNameByID(NEW.attributeID),                                            \n" +
                "		  TRUNCATE(OLD.Price,5),TRUNCATE(NEW.Price,5),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "  \n" +
                " END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-08-2020 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_SupplierQuotePartPricing_LineItem_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_SupplierQuotePartPricing_LineItem_History` AFTER UPDATE ON `supplier_quote_part_price`   \n" +
                "    FOR EACH ROW BEGIN                                            \n" +
                "  \n" +
                "  \n" +
                " IF IFNULL(OLD.itemNumber, 0) != IFNULL(NEW.itemNumber, 0) THEN           \n" +
                "  INSERT INTO supplier_quote_part_price_history                                             \n" +
                "			(tableName, refSupplierQuotePartDetID, itemNumber, Colname,                                            \n" +
                "			Oldval,Newval,                                            \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                             \n" +
                "  VALUES 	(\"supplier_quote_part_price\", NEW.supplierQuotePartDetID, NEW.itemNumber, \"Item Number\",                                            \n" +
                "  OLD.itemNumber,NEW.itemNumber,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);   \n" +
                " END IF;  \n" +
                "  \n" +
                " IF IFNULL(OLD.qty, 0) != IFNULL(NEW.qty, 0) THEN       \n" +
                "    INSERT INTO supplier_quote_part_price_history                                             \n" +
                "			(tableName, refSupplierQuotePartDetID, itemNumber, Colname,                                            \n" +
                "				Oldval,Newval,                                                 \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                             \n" +
                "  VALUES 	(\"supplier_quote_part_price\", NEW.supplierQuotePartDetID, NEW.itemNumber, \"Qty\",                                            \n" +
                "  TRUNCATE(OLD.qty,5),TRUNCATE(NEW.qty,5),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);      \n" +
                "  END IF;    \n" +
                "  \n" +
                "  IF IFNULL(OLD.`min`, 0) != IFNULL(NEW.`min`, 0) THEN   \n" +
                "    INSERT INTO supplier_quote_part_price_history                                             \n" +
                "			(tableName, refSupplierQuotePartDetID, itemNumber, Colname,                                            \n" +
                "				Oldval,Newval,                                                 \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                             \n" +
                "   VALUES 	(\"supplier_quote_part_price\", NEW.supplierQuotePartDetID, NEW.itemNumber, \"Min\",                                            \n" +
                "   OLD.`min`,NEW.`min`,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);   \n" +
                " END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.mult, 0) != IFNULL(NEW.mult, 0) THEN   \n" +
                "     INSERT INTO supplier_quote_part_price_history                                             \n" +
                "			(tableName, refSupplierQuotePartDetID, itemNumber, Colname,                                            \n" +
                "				Oldval,Newval,                                            \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                             \n" +
                "	   VALUES 	(\"supplier_quote_part_price\", NEW.supplierQuotePartDetID, NEW.itemNumber, \"Mult\",                                            \n" +
                "	   OLD.mult,NEW.mult,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);   \n" +
                "  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.stock, 0) != IFNULL(NEW.stock, 0) THEN   \n" +
                "		 INSERT INTO supplier_quote_part_price_history                                             \n" +
                "			(tableName, refSupplierQuotePartDetID, itemNumber, Colname,                                            \n" +
                "				Oldval,Newval,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                             \n" +
                "		VALUES 	(\"supplier_quote_part_price\", NEW.supplierQuotePartDetID, NEW.itemNumber, \"Stock\",                                            \n" +
                "		OLD.stock,NEW.stock,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);   \n" +
                "  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packageID, 0) != IFNULL(NEW.packageID, 0) THEN   \n" +
                "		INSERT INTO supplier_quote_part_price_history                                             \n" +
                "			(tableName, refSupplierQuotePartDetID, itemNumber, Colname,                                            \n" +
                "				Oldval,Newval,                                              \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                             \n" +
                "		VALUES 	(\"supplier_quote_part_price\", NEW.supplierQuotePartDetID, NEW.itemNumber, \"Packaging\",                                            \n" +
                "		fun_getPackagingNameByID(OLD.packageID),fun_getPackagingNameByID(NEW.packageID),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);           \n" +
                "    END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.NCNR, 0) != IFNULL(NEW.NCNR, 0) THEN   \n" +
                "		INSERT INTO supplier_quote_part_price_history                                             \n" +
                "			(tableName, refSupplierQuotePartDetID, itemNumber, Colname,                                            \n" +
                "				Oldval,Newval,                                              \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                             \n" +
                "		VALUES 	(\"supplier_quote_part_price\", NEW.supplierQuotePartDetID, NEW.itemNumber, \"NCNR\",                                            \n" +
                "		fun_getNCNRByID(OLD.NCNR),fun_getNCNRByID(NEW.NCNR),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);           \n" +
                "  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.reeling, 0) != IFNULL(NEW.reeling, 0) THEN   \n" +
                "		INSERT INTO supplier_quote_part_price_history                                             \n" +
                "			(tableName, refSupplierQuotePartDetID, itemNumber, Colname,                                            \n" +
                "				Oldval,Newval,                                                 \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                             \n" +
                "		VALUES 	(\"supplier_quote_part_price\", NEW.supplierQuotePartDetID, NEW.itemNumber, \"Custom Reeling\",                                            \n" +
                "		fun_getCustomReelingByID(OLD.reeling),fun_getCustomReelingByID(NEW.reeling),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "  \n" +
                "   END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.UnitOfTime, 0) != IFNULL(NEW.UnitOfTime, 0) THEN   \n" +
                "		INSERT INTO supplier_quote_part_price_history                                             \n" +
                "			(tableName, refSupplierQuotePartDetID, itemNumber, Colname,                                            \n" +
                "				Oldval,Newval,                                              \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                             \n" +
                "		VALUES 	(\"supplier_quote_part_price\", NEW.supplierQuotePartDetID, NEW.itemNumber, \"Unit Of Time\",                                            \n" +
                "		fun_getUnitOfTimeByKey(OLD.UnitOfTime),fun_getUnitOfTimeByKey(NEW.UnitOfTime),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "  \n" +
                "    END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.UnitPrice, 0) != IFNULL(NEW.UnitPrice, 0) THEN   \n" +
                "     INSERT INTO supplier_quote_part_price_history                                             \n" +
                "			(tableName, refSupplierQuotePartDetID, itemNumber, Colname,                                            \n" +
                "				Oldval,Newval,                                                 \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                             \n" +
                "		VALUES 	(\"supplier_quote_part_price\", NEW.supplierQuotePartDetID, NEW.itemNumber, \"Unit Price\",                                            \n" +
                "		TRUNCATE(OLD.UnitPrice,5),TRUNCATE(NEW.UnitPrice,5),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted, 0) != IFNULL(NEW.isDeleted, 0) THEN   \n" +
                "		INSERT INTO supplier_quote_part_price_history                                             \n" +
                "			(tableName, refSupplierQuotePartDetID, itemNumber, Colname,                                            \n" +
                "				Oldval,Newval,                                                 \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                             \n" +
                "		VALUES 	(\"supplier_quote_part_price\", NEW.supplierQuotePartDetID, NEW.itemNumber, \"Deleted\",                                            \n" +
                "		NULL,\"Deleted\",fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2676,'2.00','V1',' Supplier Quote - Dharmesh P'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2676:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 05-08-2020 *********************************** */
                "CREATE TABLE `supplier_quote_part_price_history` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `refSupplierQuotePartDetID` int(11) NOT NULL,  \n" +
                "  `itemNumber` int(11) NOT NULL,  \n" +
                "  `tableName` varchar(50) NOT NULL,    \n" +
                "  `Colname` varchar(200) NOT NULL,  \n" +
                "  `Oldval` longtext,  \n" +
                "  `Newval` longtext,  \n" +
                "  `createdBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `createdAt` datetime DEFAULT NULL,  \n" +
                "  `updatedAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `createByRoleId` int(11) DEFAULT NULL,  \n" +
                "  `updateByRoleId` int(11) DEFAULT NULL,  \n" +
                "  `deleteByRoleId` int(11) DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_supplier_quote_part_price_history_refSupplierQuotePartDetID` (`refSupplierQuotePartDetID`),  \n" +
                "  CONSTRAINT `FK_supplier_quote_part_price_history_refSupplierQuotePartDetID` FOREIGN KEY (`refSupplierQuotePartDetID`) REFERENCES `supplier_quote_parts_det` (`id`)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 05-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2677,'2.00','V1',' Supplier Quote - Dharmesh P'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2677:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 05-08-2020 *********************************** */
                "ALTER TABLE supplier_quote_mst   \n" +
                "ADD COLUMN documentPath varchar(500) DEFAULT NULL AFTER quoteStatus;  \n" +
                /* **************************** Add Script Version -> 05-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2678,'2.00','V1',' Supplier Quote - Dharmesh P'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2678:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetTransComponent` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetTransComponent`(    \n" +
                "IN pEmployeeID INT,    \n" +
                "IN pwoTransID INT,    \n" +
                "IN pwoID INT,    \n" +
                "IN popID INT,    \n" +
                "IN pwoOpID INT,    \n" +
                "IN pwoTransPreprogramID INT    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "  \n" +
                "  \n" +
                "	     SELECT       \n" +
                "			wt.woTransPreprogramID,     \n" +
                "			wt.woTransID,wp.woMultiplier,wp.programName,     \n" +
                "			wpd.woID,wt.woOPID, wt.opID, wt.employeeID,    \n" +
                "			wpd.woCompDesignatorID,   \n" +
                "			IFNULL(wt.compCnt,0) AS compCnt,    \n" +
                "			wpd.designatorName, wpd.woPreProgCompID,    \n" +
                "			wp.refStkWOOPID,      \n" +
                "			wp.mfgPNID ,(SELECT mfgPN FROM component WHERE deletedAt IS NULL AND id = wp.mfgPNID) mfgPN,    \n" +
                "			(SELECT OPProdQty FROM vu_workorder_production_stk WHERE woOPID = wp.refStkWOOPID) OPProdQty,    \n" +
                "			IFNULL((SELECT SUM(wtp.compCnt) FROM workorder_trans_preprogramcomp wtp    \n" +
                "				WHERE wtp.woID = pwoID AND wtp.opID = popID AND wtp.woOPID = pwoOpID     \n" +
                "				AND wtp.woCompDesignatorID = wpd.woCompDesignatorID     \n" +
                "				AND wtp.deletedAt IS NULL AND wtp.compCnt > 0 GROUP BY wtp.woCompDesignatorID),0) totalCount        \n" +
                "	    FROM  workorder_preprogcomp_designator wpd  \n" +
                "		LEFT JOIN workorder_trans_preprogramcomp wt ON wpd.woCompDesignatorID = wt.woCompDesignatorID    \n" +
                "			AND wt.deletedAt IS NULL AND wt.employeeID = pEmployeeID AND wt.woTransID = pwoTransID  \n" +
                "		JOIN workorder_preprogcomp wp ON wpd.woPreProgCompID = wp.woPreProgCompID AND wp.deletedAt IS NULL    \n" +
                "	    WHERE wpd.deletedAt IS NULL   \n" +
                "	    AND wpd.woID = pwoID  \n" +
                "	    AND CASE WHEN pwoTransPreprogramID IS NULL THEN 1=1  \n" +
                "			ELSE wt.woTransPreprogramID = pwoTransPreprogramID END  \n" +
                "  \n" +
                "	    ;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2679,'2.00','V1',' pre prog compone get sp - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2679:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getKitAllocatedPin` ;  \n" +
                "CREATE FUNCTION `fun_getKitAllocatedPin`(                                  \n" +
                "	pAssyId INT(11),                          \n" +
                "	pRefSalesOrderDetID INT(11),                        \n" +
                "	pRefRfqLineitem INT(11),                        \n" +
                "	pRefRfqLineitemIds VARCHAR(255),              \n" +
                "	pBomPin INT(11),  \n" +
                "	pConsolidated BOOLEAN                              \n" +
                ") RETURNS DECIMAL(18,8)  \n" +
                "BEGIN                           \n" +
                "	DECLARE v_AllocatedPins DECIMAL(18,6);                        \n" +
                "	DECLARE vPartIds VARCHAR(500);               \n" +
                "	DECLARE v_GenericAliasHeaderBreakaway VARCHAR(1000);            \n" +
                "	DECLARE v_CustPNID VARCHAR(1000);         \n" +
                "  \n" +
                "	IF (pBomPin IS NULL OR pBomPin = 0) THEN  \n" +
                "		SET v_AllocatedPins = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT GROUP_CONCAT(id) INTO v_GenericAliasHeaderBreakaway FROM component_fields_genericalias_mst WHERE refTableName = 'rfq_connectertypemst' AND deletedAt IS NULL AND refId = -2;              \n" +
                "  \n" +
                "		IF (pConsolidated = TRUE) THEN        \n" +
                "			SELECT GROUP_CONCAT(custPNID) INTO v_CustPNID FROM kit_allocation_lineitems WHERE refSalesOrderDetID = pRefSalesOrderDetID AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitemIds) AND deletedAt IS NULL;            \n" +
                "		ELSE        \n" +
                "			SELECT GROUP_CONCAT(custPNID) INTO v_CustPNID FROM kit_allocation_lineitems WHERE refSalesOrderDetID = pRefSalesOrderDetID AND refRfqLineitem = pRefRfqLineitem AND deletedAt IS NULL;            \n" +
                "		END IF;        \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForPackaginAndCPN;         \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForPackaginAndCPN        \n" +
                "		(                                                                                                    \n" +
                "			mfgPNID INT                                                                                                      \n" +
                "		);        \n" +
                "  \n" +
                "		IF (v_CustPNID IS NOT NULL) THEN				        \n" +
                "			IF (pConsolidated = TRUE) THEN        \n" +
                "				INSERT INTO tempResultForPackaginAndCPN (mfgPNID)      \n" +
                "				SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pRefSalesOrderDetID AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitemIds) AND deletedAt IS NULL                      \n" +
                "				UNION                      \n" +
                "				SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (                                \n" +
                "					SELECT aliasgroupID FROM component_packagingalias WHERE componentID IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pRefSalesOrderDetID         \n" +
                "						AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitemIds) AND deletedAt IS NULL) AND deletedAt IS NULL                                 \n" +
                "				) AND deletedAt IS NULL      \n" +
                "				UNION        \n" +
                "				SELECT custPNID AS mfgPNID FROM kit_allocation_lineitems WHERE refSalesOrderDetID = pRefSalesOrderDetID AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitemIds) AND deletedAt IS NULL;        \n" +
                "			ELSE          \n" +
                "				INSERT INTO tempResultForPackaginAndCPN (mfgPNID)       \n" +
                "				SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pRefSalesOrderDetID AND refRfqLineitem = pRefRfqLineitem AND deletedAt IS NULL                      \n" +
                "				UNION                      \n" +
                "				SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (                                \n" +
                "					SELECT aliasgroupID FROM component_packagingalias WHERE componentID IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pRefSalesOrderDetID         \n" +
                "						AND refRfqLineitem = pRefRfqLineitem AND deletedAt IS NULL) AND deletedAt IS NULL                                 \n" +
                "				) AND deletedAt IS NULL      \n" +
                "				UNION       \n" +
                "				SELECT custPNID AS mfgPNID FROM kit_allocation_lineitems WHERE refSalesOrderDetID = pRefSalesOrderDetID AND refRfqLineitem = pRefRfqLineitem AND deletedAt IS NULL;            \n" +
                "			END IF;        \n" +
                "		ELSE        \n" +
                "			IF (pConsolidated = TRUE) THEN        \n" +
                "				INSERT INTO tempResultForPackaginAndCPN (mfgPNID)        \n" +
                "				SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pRefSalesOrderDetID AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitemIds) AND deletedAt IS NULL                      \n" +
                "				UNION                      \n" +
                "				SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (                                \n" +
                "					SELECT aliasgroupID FROM component_packagingalias WHERE componentID IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pRefSalesOrderDetID         \n" +
                "						AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitemIds) AND deletedAt IS NULL) AND deletedAt IS NULL                                 \n" +
                "				) AND deletedAt IS NULL;        \n" +
                "			ELSE          \n" +
                "				INSERT INTO tempResultForPackaginAndCPN (mfgPNID)        \n" +
                "				SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pRefSalesOrderDetID AND refRfqLineitem = pRefRfqLineitem AND deletedAt IS NULL                      \n" +
                "				UNION                      \n" +
                "				SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (                                \n" +
                "					SELECT aliasgroupID FROM component_packagingalias WHERE componentID IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pRefSalesOrderDetID         \n" +
                "						AND refRfqLineitem = pRefRfqLineitem AND deletedAt IS NULL) AND deletedAt IS NULL                                 \n" +
                "				) AND deletedAt IS NULL;        \n" +
                "			END IF;        \n" +
                "		END IF;        \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForComponent;                \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForComponent AS                      \n" +
                "		SELECT 		a.mfgPNID,   \n" +
                "				c.mfgPN,   \n" +
                "				c.connecterTypeID   \n" +
                "		FROM    	tempResultForPackaginAndCPN a                      \n" +
                "		INNER JOIN 	component c ON c.id = a.mfgPNID AND c.deletedAt IS NULL                      \n" +
                "		WHERE 		FIND_IN_SET(c.connecterTypeID, CONCAT('-2', (CASE WHEN v_GenericAliasHeaderBreakaway IS NOT NULL THEN ',' ELSE '' END), IFNULL(v_GenericAliasHeaderBreakaway,'')));            \n" +
                "  \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(mfgPNID) INTO vPartIds FROM tempResultForComponent;                      \n" +
                "  \n" +
                "		IF (vPartIds IS NULL) THEN                      \n" +
                "			SET v_AllocatedPins = 0;                      \n" +
                "		ELSE          \n" +
                "			SELECT 	SUM(((FLOOR(partPin/IFNULL(pBomPin, 0)) * IFNULL(pBomPin, 0)) * IFNULL(allocatedUnit, 0)))    \n" +
                "			INTO 	v_AllocatedPins	  \n" +
                "			FROM 	(  \n" +
                "					SELECT 		ka.refUIDId, SUM(ka.allocatedUnit) AS allocatedUnit, ka.refBOMLineID, IFNULL(c.noOfPosition, 0) partPin                     \n" +
                "					FROM 		kit_allocation ka     \n" +
                "					INNER JOIN	component c ON c.id = ka.partId AND c.isDeleted = 0                \n" +
                "					WHERE 		ka.`status` = 'A'   \n" +
                "								AND (  \n" +
                "									CASE  \n" +
                "										WHEN (pConsolidated = TRUE) THEN  \n" +
                "											assyID = assyID  \n" +
                "										ELSE  \n" +
                "											assyID = pAssyId  \n" +
                "									END  \n" +
                "								)   \n" +
                "								AND ka.refSalesOrderDetID = pRefSalesOrderDetID   \n" +
                "								AND FIND_IN_SET(ka.partId, vPartIds)                    \n" +
                "					GROUP BY 	ka.refUIDId  \n" +
                "				) a;  \n" +
                "		END IF;    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	RETURN IFNULL(CAST(v_AllocatedPins AS DECIMAL(18,8)),0);                                   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getShortagePerBuild` ;  \n" +
                "CREATE FUNCTION `fun_getShortagePerBuild`(                                      \n" +
                "	pQPA DECIMAL(18,8),                                \n" +
                "	pKitQty INT(11),                                   \n" +
                "	pPartId INT(11),                              \n" +
                "	pRefSalesOrderDetID INT(11),                            \n" +
                "	pRefRfqLineitem VARCHAR(255)                                \n" +
                ") RETURNS DECIMAL(18,8)  \n" +
                "BEGIN                                      \n" +
                "	DECLARE vShortageValue DECIMAL(18,6);                                   \n" +
                "	DECLARE vAllocatedUnit DECIMAL(18,6);                   \n" +
                "	DECLARE vConsumeUnit DECIMAL(18,6);                               \n" +
                "	DECLARE vTotalQty DECIMAL(18,8);                             \n" +
                "	DECLARE vPartIds VARCHAR(500);                         \n" +
                "	DECLARE vConnectorTypeId VARCHAR(100);                            \n" +
                "	-- DECLARE vShortagePin DECIMAL(18,6);                 \n" +
                "	-- DECLARE vConsumePin DECIMAL(18,6);             \n" +
                "	DECLARE v_CustPNID VARCHAR(1000);    \n" +
                "	DECLARE v_BomPin INT(11);     \n" +
                "	DECLARE v_TotalRequirePin DECIMAL(18,6);             \n" +
                "	DECLARE v_AllocatedPin DECIMAL(18,6);  \n" +
                "	DECLARE v_ConsumePin DECIMAL(18,6);  \n" +
                "  \n" +
                "	SET vShortageValue = 0;                                 \n" +
                "	SELECT 	GROUP_CONCAT(custPNID) INTO v_CustPNID     \n" +
                "	FROM 	kit_allocation_lineitems     \n" +
                "	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID   \n" +
                "			AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitem)   \n" +
                "			AND deletedAt IS NULL;            \n" +
                "  \n" +
                "	SELECT  GROUP_CONCAT(c.id), GROUP_CONCAT(c.connecterTypeID)                 \n" +
                "	INTO 	vPartIds, vConnectorTypeId    \n" +
                "	FROM 	component c WHERE id IN (	  \n" +
                "			SELECT 	mfgPNID   \n" +
                "			FROM 	kit_allocation_lineitems_alternatepart     \n" +
                "			WHERE 	refSalesOrderDetID = pRefSalesOrderDetID   \n" +
                "					AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitem)   \n" +
                "					AND deletedAt IS NULL                      \n" +
                "			UNION                      \n" +
                "			SELECT 	componentID AS mfgPNID   \n" +
                "			FROM 	component_packagingalias     \n" +
                "			WHERE 	aliasgroupID IN (    \n" +
                "				SELECT 	aliasgroupID   \n" +
                "				FROM 	component_packagingalias     \n" +
                "				WHERE 	componentID IN (  \n" +
                "					SELECT mfgPNID   \n" +
                "					FROM 	kit_allocation_lineitems_alternatepart     \n" +
                "					WHERE 	refSalesOrderDetID = pRefSalesOrderDetID   \n" +
                "							AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitem)   \n" +
                "							AND deletedAt IS NULL  \n" +
                "					)     \n" +
                "					AND deletedAt IS NULL   \n" +
                "				)     \n" +
                "				AND deletedAt IS NULL      \n" +
                "			UNION      \n" +
                "			SELECT 	custPNID AS mfgPNID   \n" +
                "			FROM 	kit_allocation_lineitems     \n" +
                "			WHERE 	refSalesOrderDetID = pRefSalesOrderDetID     \n" +
                "					AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitem) AND deletedAt IS NULL    \n" +
                "					AND custPNID IS NOT NULL   \n" +
                "			)        \n" +
                "			AND c.deletedAt IS NULL;                        \n" +
                "  \n" +
                "	SELECT IFNULL((pQPA * pKitQty), 0) INTO vTotalQty;                                \n" +
                "  \n" +
                "	SELECT 	CASE WHEN ka.status = 'A' THEN IFNULL(SUM(ka.allocatedUnit),0) ELSE 0 END AllocatedUnits,    \n" +
                "		CASE WHEN ka.status = 'R' THEN IFNULL(SUM(ka.consumeUnit),0) ELSE 0 END  ConsumeUnits    \n" +
                "	INTO 	vAllocatedUnit, vConsumeUnit          \n" +
                "	FROM 	kit_allocation ka               \n" +
                "	WHERE 	FIND_IN_SET(ka.PartId, (vPartIds))   \n" +
                "			AND ka.status IN('A','R')               \n" +
                "			AND (CASE WHEN pPartId = 0 THEN ka.assyID = ka.assyID ELSE ka.assyID = pPartId END)              \n" +
                "			AND refSalesOrderDetID = pRefSalesOrderDetID            \n" +
                "			AND FIND_IN_SET(ka.refBOMLineID, pRefRfqLineitem);           \n" +
                "  \n" +
                "	IF (vConnectorTypeId LIKE '%-2%') THEN     \n" +
                "  \n" +
                "		SELECT 	numOfPosition    \n" +
                "		INTO	v_BomPin             \n" +
                "		FROM 	kit_allocation_lineitems               \n" +
                "		WHERE  	FIND_IN_SET(refRfqLineitem, pRefRfqLineitem)               \n" +
                "				AND refSalesOrderDetID = pRefSalesOrderDetID                 \n" +
                "				AND (CASE WHEN pPartId = 0 THEN partID = partID ELSE partID = pPartId END);              \n" +
                "  \n" +
                "		SELECT vTotalQty * IFNULL(v_BomPin, 0) INTO v_TotalRequirePin;  \n" +
                "		SELECT 	(  \n" +
                "				CASE  \n" +
                "					WHEN `status` = 'A' THEN  \n" +
                "						SUM(((FLOOR(partPin/IFNULL(v_BomPin, 0)) * IFNULL(v_BomPin, 0)) * IFNULL(allocatedUnit, 0)))  \n" +
                "					ELSE   \n" +
                "						0  \n" +
                "				END   \n" +
                "		) AS allocatedPin,  \n" +
                "		(  \n" +
                "				CASE  \n" +
                "					WHEN `status` = 'R' THEN  \n" +
                "						SUM(((FLOOR(partPin/IFNULL(v_BomPin, 0)) * IFNULL(v_BomPin, 0)) * IFNULL(consumeUnit, 0)))  \n" +
                "					ELSE   \n" +
                "						0  \n" +
                "				END   \n" +
                "		) AS consumedPin  \n" +
                "		INTO 	v_AllocatedPin, v_ConsumePin 	  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		ka.refUIDId, SUM(ka.allocatedUnit) AS allocatedUnit, ka.refBOMLineID, IFNULL(c.noOfPosition, 0) partPin, ka.`status`, consumeUnit                     \n" +
                "				FROM 		kit_allocation ka     \n" +
                "				INNER JOIN	component c ON c.id = ka.partId AND c.isDeleted = 0                \n" +
                "				WHERE 		ka.`status` IN ('A','R')   \n" +
                "							AND (  \n" +
                "								CASE  \n" +
                "									WHEN (pPartId = 0) THEN  \n" +
                "										assyID = assyID  \n" +
                "									ELSE  \n" +
                "										assyID = pPartId  \n" +
                "								END  \n" +
                "							)   \n" +
                "							AND ka.refSalesOrderDetID = pRefSalesOrderDetID   \n" +
                "							AND FIND_IN_SET(ka.partId, vPartIds)                    \n" +
                "				GROUP BY 	ka.refUIDId  \n" +
                "			) a;  \n" +
                "  \n" +
                "		IF (v_TotalRequirePin - IFNULL(v_AllocatedPin,0)  - IFNULL(v_ConsumePin,0) > 0) THEN                        \n" +
                "			SET vShortageValue = v_TotalRequirePin - IFNULL(v_AllocatedPin,0)  - IFNULL(v_ConsumePin,0);                        \n" +
                "		ELSE                         \n" +
                "			SET vShortageValue = 0;                        \n" +
                "		END IF;                           \n" +
                "	ELSE                        \n" +
                "		IF ((vTotalQty - IFNULL(vAllocatedUnit,0) - IFNULL(vConsumeUnit,0)) > 0) THEN                                \n" +
                "			SET vShortageValue = vTotalQty - IFNULL(vAllocatedUnit,0) - IFNULL(vConsumeUnit,0);                                \n" +
                "		ELSE                                 \n" +
                "			SET vShortageValue = 0;                                \n" +
                "		END IF;                  \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	RETURN CAST(vShortageValue AS DECIMAL(18,8));                                       \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getNoPinOfBomByLineId` ;  \n" +
                "CREATE FUNCTION `fun_getNoPinOfBomByLineId`(      \n" +
                "	pRfqLineItemId VARCHAR(5000)  \n" +
                ") RETURNS DECIMAL(18,8)  \n" +
                "BEGIN                  \n" +
                "	DECLARE v_NumberOfPinOfBOM DECIMAL(18,8);  \n" +
                "  \n" +
                "	SELECT 	numOfPosition   \n" +
                "	INTO	v_NumberOfPinOfBOM  \n" +
                "	FROM 	kit_allocation_lineitems   \n" +
                "	WHERE 	FIND_IN_SET(refRfqLineitem, pRfqLineItemId)   \n" +
                "			AND deletedAt IS NULL  \n" +
                "	LIMIT 	1;  \n" +
                "  \n" +
                "	RETURN IFNULL(v_NumberOfPinOfBOM, 0);                 \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getKitScrapedPin` ;  \n" +
                "CREATE FUNCTION `fun_getKitScrapedPin`(                                  \n" +
                "	pAssyId INT(11),                          \n" +
                "	pRefSalesOrderDetID INT(11),                        \n" +
                "	pRefRfqLineitem INT(11),                        \n" +
                "	pRefRfqLineitemIds VARCHAR(255),              \n" +
                "	pBomPin INT(11),  \n" +
                "	pConsolidated BOOLEAN                              \n" +
                ") RETURNS DECIMAL(18,8)  \n" +
                "BEGIN                           \n" +
                "	DECLARE v_ScrapedPins DECIMAL(18,6);                        \n" +
                "	DECLARE vPartIds VARCHAR(500);               \n" +
                "	DECLARE v_GenericAliasHeaderBreakaway VARCHAR(1000);            \n" +
                "	DECLARE v_CustPNID VARCHAR(1000);         \n" +
                "  \n" +
                "	IF (pBomPin IS NULL OR pBomPin = 0) THEN  \n" +
                "		SET v_ScrapedPins = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT GROUP_CONCAT(id) INTO v_GenericAliasHeaderBreakaway FROM component_fields_genericalias_mst WHERE refTableName = 'rfq_connectertypemst' AND deletedAt IS NULL AND refId = -2;              \n" +
                "  \n" +
                "		IF (pConsolidated = TRUE) THEN        \n" +
                "			SELECT GROUP_CONCAT(custPNID) INTO v_CustPNID FROM kit_allocation_lineitems WHERE refSalesOrderDetID = pRefSalesOrderDetID AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitemIds) AND deletedAt IS NULL;            \n" +
                "		ELSE        \n" +
                "			SELECT GROUP_CONCAT(custPNID) INTO v_CustPNID FROM kit_allocation_lineitems WHERE refSalesOrderDetID = pRefSalesOrderDetID AND refRfqLineitem = pRefRfqLineitem AND deletedAt IS NULL;            \n" +
                "		END IF;        \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForPackaginAndCPN;         \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForPackaginAndCPN        \n" +
                "		(                                                                                                    \n" +
                "			mfgPNID INT                                                                                                      \n" +
                "		);        \n" +
                "  \n" +
                "		IF (v_CustPNID IS NOT NULL) THEN				        \n" +
                "			IF (pConsolidated = TRUE) THEN        \n" +
                "				INSERT INTO tempResultForPackaginAndCPN (mfgPNID)      \n" +
                "				SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pRefSalesOrderDetID AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitemIds) AND deletedAt IS NULL                      \n" +
                "				UNION                      \n" +
                "				SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (                                \n" +
                "					SELECT aliasgroupID FROM component_packagingalias WHERE componentID IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pRefSalesOrderDetID         \n" +
                "						AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitemIds) AND deletedAt IS NULL) AND deletedAt IS NULL                                 \n" +
                "				) AND deletedAt IS NULL      \n" +
                "				UNION        \n" +
                "				SELECT custPNID AS mfgPNID FROM kit_allocation_lineitems WHERE refSalesOrderDetID = pRefSalesOrderDetID AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitemIds) AND deletedAt IS NULL;        \n" +
                "			ELSE          \n" +
                "				INSERT INTO tempResultForPackaginAndCPN (mfgPNID)       \n" +
                "				SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pRefSalesOrderDetID AND refRfqLineitem = pRefRfqLineitem AND deletedAt IS NULL                      \n" +
                "				UNION                      \n" +
                "				SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (                                \n" +
                "					SELECT aliasgroupID FROM component_packagingalias WHERE componentID IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pRefSalesOrderDetID         \n" +
                "						AND refRfqLineitem = pRefRfqLineitem AND deletedAt IS NULL) AND deletedAt IS NULL                                 \n" +
                "				) AND deletedAt IS NULL      \n" +
                "				UNION       \n" +
                "				SELECT custPNID AS mfgPNID FROM kit_allocation_lineitems WHERE refSalesOrderDetID = pRefSalesOrderDetID AND refRfqLineitem = pRefRfqLineitem AND deletedAt IS NULL;            \n" +
                "			END IF;        \n" +
                "		ELSE        \n" +
                "			IF (pConsolidated = TRUE) THEN        \n" +
                "				INSERT INTO tempResultForPackaginAndCPN (mfgPNID)        \n" +
                "				SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pRefSalesOrderDetID AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitemIds) AND deletedAt IS NULL                      \n" +
                "				UNION                      \n" +
                "				SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (                                \n" +
                "					SELECT aliasgroupID FROM component_packagingalias WHERE componentID IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pRefSalesOrderDetID         \n" +
                "						AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitemIds) AND deletedAt IS NULL) AND deletedAt IS NULL                                 \n" +
                "				) AND deletedAt IS NULL;        \n" +
                "			ELSE          \n" +
                "				INSERT INTO tempResultForPackaginAndCPN (mfgPNID)        \n" +
                "				SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pRefSalesOrderDetID AND refRfqLineitem = pRefRfqLineitem AND deletedAt IS NULL                      \n" +
                "				UNION                      \n" +
                "				SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (                                \n" +
                "					SELECT aliasgroupID FROM component_packagingalias WHERE componentID IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pRefSalesOrderDetID         \n" +
                "						AND refRfqLineitem = pRefRfqLineitem AND deletedAt IS NULL) AND deletedAt IS NULL                                 \n" +
                "				) AND deletedAt IS NULL;        \n" +
                "			END IF;        \n" +
                "		END IF;        \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForComponent;                \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForComponent AS                      \n" +
                "		SELECT 		a.mfgPNID,   \n" +
                "				c.mfgPN,   \n" +
                "				c.connecterTypeID   \n" +
                "		FROM    	tempResultForPackaginAndCPN a                      \n" +
                "		INNER JOIN 	component c ON c.id = a.mfgPNID AND c.deletedAt IS NULL                      \n" +
                "		WHERE 		FIND_IN_SET(c.connecterTypeID, CONCAT('-2', (CASE WHEN v_GenericAliasHeaderBreakaway IS NOT NULL THEN ',' ELSE '' END), IFNULL(v_GenericAliasHeaderBreakaway,'')));            \n" +
                "  \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(mfgPNID) INTO vPartIds FROM tempResultForComponent;                      \n" +
                "  \n" +
                "		IF (vPartIds IS NULL) THEN                      \n" +
                "			SET v_ScrapedPins = 0;                      \n" +
                "		ELSE          \n" +
                "			SELECT 	SUM(((FLOOR(MOD(partPin, IFNULL(pBomPin, 0))) * IFNULL(allocatedUnit, 0))))    \n" +
                "			INTO 	v_ScrapedPins  \n" +
                "			FROM 	(  \n" +
                "					SELECT 		ka.refUIDId, SUM(ka.allocatedUnit) AS allocatedUnit, ka.refBOMLineID, IFNULL(c.noOfPosition, 0) partPin                     \n" +
                "					FROM 		kit_allocation ka     \n" +
                "					INNER JOIN	component c ON c.id = ka.partId AND c.isDeleted = 0                \n" +
                "					WHERE 		ka.`status` = 'A'   \n" +
                "								AND (  \n" +
                "									CASE  \n" +
                "										WHEN (pConsolidated = TRUE) THEN  \n" +
                "											assyID = assyID  \n" +
                "										ELSE  \n" +
                "											assyID = pAssyId  \n" +
                "									END  \n" +
                "								)   \n" +
                "								AND ka.refSalesOrderDetID = pRefSalesOrderDetID   \n" +
                "								AND FIND_IN_SET(ka.partId, vPartIds)                    \n" +
                "					GROUP BY 	ka.refUIDId  \n" +
                "				) a;  \n" +
                "		END IF;    \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	RETURN IFNULL(CAST(v_ScrapedPins AS DECIMAL(18,8)),0);                                   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAvilableStockWithPackagingAliasInPins` ;  \n" +
                "CREATE FUNCTION `fun_getAvilableStockWithPackagingAliasInPins`(                                                         \n" +
                "		pLineItemId INT(11),                                \n" +
                "		pAssyId VARCHAR(10000),                                \n" +
                "		pSaleOrderDetailId INT(11),  \n" +
                "		pBomPin DECIMAL(18,8)                               \n" +
                "	) RETURNS DECIMAL(18,8)  \n" +
                "BEGIN                                    \n" +
                "	DECLARE result DECIMAL(18,8);                                   \n" +
                "	DECLARE v_TotalStockInSystemRecord DECIMAL(18,8);               \n" +
                "	DECLARE v_AllocatedToKitStock DECIMAL(18,8);           \n" +
                "	DECLARE v_NonUMIDStock DECIMAL(18,8);                           \n" +
                "  \n" +
                "	/*First get all Stock of UMID of BOM line including Packing Alias,and Line alternate parts */    \n" +
                "	SELECT 	SUM((FLOOR(IFNULL(noOfPosition, 0)/IFNULL(pBomPin, 0)) * IFNULL(pBomPin, 0)) * IFNULL(pkgUnit, 0))  \n" +
                "	INTO v_TotalStockInSystemRecord   \n" +
                "	FROM 	(  \n" +
                "		SELECT 		css.pkgUnit, c.noOfPosition                                         \n" +
                "		FROM 		component_sid_stock css    \n" +
                "		INNER JOIN 	component c ON c.id = css.refcompid AND c.isDeleted = 0                                          \n" +
                "		WHERE 		refcompid IN (                      \n" +
                "					SELECT 	mfgPNID                       \n" +
                "					FROM 	kit_allocation_lineitems_alternatepart a    \n" +
                "					WHERE 	refSalesOrderDetID = pSaleOrderDetailId             \n" +
                "							AND (CASE WHEN pAssyId IS NULL THEN partID = partID ELSE partID = pAssyId END)             \n" +
                "							AND FIND_IN_SET(refRfqLineitem, pLineItemId)                          \n" +
                "							AND deletedAt IS NULL       \n" +
                "					UNION    \n" +
                "					SELECT  custPNID AS mfgPNID            \n" +
                "					FROM 	kit_allocation_lineitems             \n" +
                "					WHERE 	refSalesOrderDetID = pSaleOrderDetailId             \n" +
                "							AND (CASE WHEN pAssyId IS NULL THEN partID = partID ELSE partID = pAssyId END)             \n" +
                "							AND FIND_IN_SET(refRfqLineitem, pLineItemId)  \n" +
                "							AND custPNID IS NOT NULL    \n" +
                "							AND deletedAt IS NULL          \n" +
                "					UNION    \n" +
                "					SELECT 	a.componentID     \n" +
                "					FROM 	component_packagingalias a     \n" +
                "					WHERE  	a.AliasGroupId IN (  \n" +
                "							SELECT 	b.AliasGroupid   \n" +
                "							FROM 	component_packagingalias b     \n" +
                "							WHERE 	EXISTS (  \n" +
                "								SELECT 	1   \n" +
                "								FROM 	kit_allocation_lineitems_alternatepart c    \n" +
                "								WHERE 	c.mfgPNID = b.componentid   \n" +
                "										AND (CASE WHEN pAssyId IS NULL THEN c.partID = c.partID ELSE partID = pAssyId END)   \n" +
                "										AND FIND_IN_SET(refRfqLineitem, pLineItemId)               \n" +
                "										AND c.deletedAt IS NULL   \n" +
                "								)  \n" +
                "							)                     \n" +
                "					)                                           \n" +
                "					AND IFNULL(css.isDeleted,0) = 0    \n" +
                "				) a;                                  \n" +
                "  \n" +
                "	-- v_AllocatedToKitStock                           \n" +
                "	SELECT 	SUM((FLOOR(IFNULL(noOfPosition, 0)/IFNULL(pBomPin, 0)) * IFNULL(pBomPin, 0)) * IFNULL(allocatedUnit, 0))  \n" +
                "	INTO	v_AllocatedToKitStock  \n" +
                "	FROM 	(            \n" +
                "			SELECT 		ka.allocatedUnit, c.noOfPosition    \n" +
                "			FROM 		kit_allocation ka  \n" +
                "			INNER JOIN 	component c ON c.id = ka.partId AND c.isDeleted = 0                                             \n" +
                "			WHERE 		ka.partid IN (                      \n" +
                "						SELECT 	mfgPNID                       \n" +
                "						FROM 	kit_allocation_lineitems_alternatepart a    \n" +
                "						WHERE 	refSalesOrderDetID = pSaleOrderDetailId             \n" +
                "								AND (CASE WHEN pAssyId IS NULL THEN partID = partID ELSE partID = pAssyId END)   \n" +
                "								AND FIND_IN_SET(refRfqLineitem, pLineItemId)                          \n" +
                "								AND deletedAt IS NULL       \n" +
                "						UNION    \n" +
                "						SELECT 	custPNID AS mfgPNID            \n" +
                "						FROM 	kit_allocation_lineitems             \n" +
                "						WHERE 	refSalesOrderDetID = pSaleOrderDetailId             \n" +
                "								AND (CASE WHEN pAssyId IS NULL THEN partID = partID ELSE partID = pAssyId END)             \n" +
                "								AND FIND_IN_SET(refRfqLineitem, pLineItemId)        \n" +
                "								AND custPNID IS NOT NULL    \n" +
                "								AND deletedAt IS NULL          \n" +
                "						UNION    \n" +
                "						SELECT 	a.componentID     \n" +
                "						FROM 	component_packagingalias a     \n" +
                "						WHERE  	a.AliasGroupId IN (  \n" +
                "								SELECT 	b.AliasGroupid   \n" +
                "								FROM 	component_packagingalias b     \n" +
                "								WHERE 	EXISTS (  \n" +
                "										SELECT 	1   \n" +
                "										FROM 	kit_allocation_lineitems_alternatepart c    \n" +
                "										WHERE 	c.mfgPNID = b.componentid   \n" +
                "												AND c.refSalesOrderDetID = pSaleOrderDetailId    \n" +
                "												AND (CASE WHEN pAssyId IS NULL THEN c.partID = c.partID ELSE partID = pAssyId END)   \n" +
                "												AND FIND_IN_SET(c.refRfqLineitem, pLineItemId)               \n" +
                "												AND c.deletedAt IS NULL   \n" +
                "									)  \n" +
                "								)     \n" +
                "					)                                           \n" +
                "					AND ka.STATUS = 'A'  \n" +
                "			) a;                     \n" +
                "  \n" +
                "	-- v_NonUMIDStock                  \n" +
                "	SELECT 	SUM((FLOOR(IFNULL(noOfPosition, 0)/IFNULL(pBomPin, 0)) * IFNULL(pBomPin, 0)) * IFNULL(nonUMIDStock, 0))  \n" +
                "	INTO v_NonUMIDStock                  \n" +
                "	FROM 	(            \n" +
                "			SELECT 		SUM((IFNULL(vu.BalanceQty, 1) * IFNULL(c.unit, 1))) AS nonUMIDStock, c.noOfPosition             \n" +
                "			FROM 		vu_umid_creation_pending vu                  \n" +
                "			INNER JOIN 	component c ON c.id = vu.PartId                  \n" +
                "			WHERE 		vu.PartId IN (                  \n" +
                "						SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pSaleOrderDetailId AND FIND_IN_SET(refRfqLineitem, pLineItemId) AND deletedAt IS NULL                            \n" +
                "						UNION                            \n" +
                "						SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (                                      \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pSaleOrderDetailId AND FIND_IN_SET(refRfqLineitem, pLineItemId) AND deletedAt IS NULL) AND deletedAt IS NULL                                       \n" +
                "						) AND deletedAt IS NULL          \n" +
                "						UNION          \n" +
                "						SELECT 	 custPNID AS mfgPNID            \n" +
                "						FROM 	kit_allocation_lineitems             \n" +
                "						WHERE 	refSalesOrderDetID = pSaleOrderDetailId             \n" +
                "								AND (CASE WHEN pAssyId IS NULL THEN partID = partID ELSE partID = pAssyId END)             \n" +
                "								AND FIND_IN_SET(refRfqLineitem, pLineItemId)            \n" +
                "								AND deletedAt IS NULL                         \n" +
                "					) AND BalanceQty > 0            \n" +
                "		) a;                                    \n" +
                "  \n" +
                "	SET result = (IFNULL(v_TotalStockInSystemRecord,0) - IFNULL(v_AllocatedToKitStock,0)) + IFNULL(v_NonUMIDStock, 0);                                    \n" +
                "  \n" +
                "	RETURN result;                                    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_CalculateKitFeasibility` ;  \n" +
                "CREATE FUNCTION `fun_CalculateKitFeasibility`(                            \n" +
                "	pRefSalesOrderDetID INT(11),                                \n" +
                "	pAssyID INT(11),                                \n" +
                "	pIsConsolidated TINYINT(1),                          \n" +
                "	pInputQty DECIMAL(18,8)                            \n" +
                ") RETURNS DECIMAL(18,8)  \n" +
                "BEGIN                            \n" +
                "	DECLARE vKitQty DECIMAL(18,8);                            \n" +
                "	SELECT kitQty INTO vKitQty FROM salesorderdet WHERE id = pRefSalesOrderDetID;                              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempMountingTypeWiseKitDet;                                \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempMountingTypeWiseKitDet            \n" +
                "	(                                \n" +
                "		mountingTypeID INT(11),  		            \n" +
                "		mountingType VARCHAR(50),  \n" +
                "		connecterTypeID INT(11),  \n" +
                "		connecterType VARCHAR(50),  \n" +
                "		feasibilityWithAllocation DECIMAL(18,8),	                                \n" +
                "		shortageLine DECIMAL(18,8), 	            \n" +
                "		feasibilityWithAvailableAndAllocatedStock DECIMAL(18,8),                                \n" +
                "		shortageWithAvailableQty DECIMAL(18,8),						            \n" +
                "		shortageForInputQty DECIMAL(18,8),                                \n" +
                "		releasedQty DECIMAL(18,8),		            \n" +
                "		pendingQty DECIMAL(18,8),	            \n" +
                "		releasePercentage DECIMAL(18,8),            \n" +
                "		totalLine INT                                \n" +
                "	);          \n" +
                "  \n" +
                "	IF(pIsConsolidated = 1) THEN                                \n" +
                "		CALL Sproc_GetKitConsolidateData(pAssyID, FALSE);                                 \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempFeasibilityDetail;                                \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempFeasibilityDetail AS                                \n" +
                "		SELECT  	r.lineid,           \n" +
                "				r.rfqLineItemsID refRfqLineitem, 	          \n" +
                "				r.qpa,   \n" +
                "				r.numOfPosition,      \n" +
                "				fun_getKitAllocatedUnits(pAssyID, pRefSalesOrderDetID, r.rfqLineItemsID, r.consolidatedLineItemIDs, TRUE) allocatedUnit,                              \n" +
                "				fun_getKitAllocatedPin(pAssyID, pRefSalesOrderDetID, r.rfqLineItemsID, r.consolidatedLineItemIDs, r.numOfPosition, TRUE) allocatedPin,         \n" +
                "				fun_getKitAllocatedMountingType(pRefSalesOrderDetID, r.rfqLineItemsID, c.mountingTypeID) mountingTypeID,                          \n" +
                "				fun_getAvilableStockWithPackagingAliasForConsolidate(pRefSalesOrderDetID, r.consolidatedLineItemIDs) availableStock,    \n" +
                "				fun_getAvilableStockWithPackagingAliasInPins(r.consolidatedLineItemIDs, NULL, pRefSalesOrderDetID, r.numOfPosition) availableStockInPin,   \n" +
                "				r.partID                                \n" +
                "		FROM 		temp_Sproc_GetKitConsolidateData r                                  \n" +
                "		INNER JOIN 	component c ON r.mfgPNID = c.id           \n" +
                "					AND c.isGoodPart = 1                               \n" +
                "		LEFT JOIN 	kit_allocation k ON r.rfqLineItemsID = k.refBOMLineID                                 \n" +
                "					AND k.status = 'A'                                 \n" +
                "					AND k.refSalesOrderDetID = pRefSalesOrderDetID                                \n" +
                "		GROUP BY 	r.rfqLineItemsID, r.qpa                                \n" +
                "		ORDER BY 	R.lineid;            \n" +
                "  \n" +
                "		INSERT INTO tempMountingTypeWiseKitDet                                \n" +
                "		SELECT 	mountingTypeID,                                 \n" +
                "			mountingType, 	     \n" +
                "			connecterTypeID,    \n" +
                "			connecterType,                           \n" +
                "			MIN(feasibilityWithAllocation) feasibilityWithAllocation,                                \n" +
                "			SUM(Shortage) shortageLine,                        \n" +
                "			MIN(feasibilityWithAvailableAndAllocatedStock) feasibilityWithAvailableAndAllocatedStock,                                \n" +
                "			SUM(ShortageWithAvailableQty) shortageWithAvailableQty,                                \n" +
                "			SUM(shortageForInputQty) shortageForInputQty,                                \n" +
                "			0 releasedQty,                                \n" +
                "			vKitQty pendingQty,                                \n" +
                "			0 releasePercentage,            \n" +
                "			COUNT(1) totalLine                                \n" +
                "		FROM    (                                \n" +
                "				SELECT 	mountingTypeID,		            \n" +
                "					mountingType,   \n" +
                "					connecterTypeID,	    \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN connecterTypeID IS NOT NULL THEN   \n" +
                "								fun_getConnectorTypeNameByID(connecterTypeID)  \n" +
                "							ELSE   \n" +
                "								NULL  \n" +
                "						END  \n" +
                "					) connecterType,                        \n" +
                "					lineID,		            \n" +
                "					refRfqLineitem, 	            \n" +
                "					qpa,               \n" +
                "					allocatedUnit,                                \n" +
                "					feasibilityWithAllocation,              \n" +
                "					CASE WHEN (shortagePerBuil > 0) THEN 1 ELSE 0 END Shortage,                                 \n" +
                "					availableStock,		                                \n" +
                "					feasibilityWithAvailableAndAllocatedStock,                                \n" +
                "					CASE WHEN (feasibilityWithAvailableAndAllocatedStock < vKitQty) THEN 1 ELSE 0 END ShortageWithAvailableQty,                                 \n" +
                "					CASE WHEN (feasibilityWithAvailableAndAllocatedStock < pInputQty) THEN 1 ELSE 0 END shortageForInputQty                                \n" +
                "				FROM 	(                                \n" +
                "						SELECT 	mountingTypeID,		            \n" +
                "							fun_getMountingTypeNameByID(mountingTypeID) mountingType,  \n" +
                "							(CASE WHEN numOfPosition IS NOT NULL AND numOfPosition != 0 THEN -2 ELSE NULL END) connecterTypeID, 	  \n" +
                "							numOfPosition,            \n" +
                "							lineID,		            \n" +
                "							refRfqLineitem, 	            \n" +
                "							qpa,               \n" +
                "							allocatedUnit,    \n" +
                "							allocatedPin,     \n" +
                "							(  \n" +
                "								CASE   \n" +
                "									WHEN numOfPosition IS NULL OR numOfPosition = 0 THEN  \n" +
                "										(allocatedUnit/qpa)  \n" +
                "									ELSE  \n" +
                "										(IFNULL(allocatedPin, 0) / (qpa * numOfPosition))  \n" +
                "								END   \n" +
                "							) feasibilityWithAllocation,                                \n" +
                "							availableStock,    \n" +
                "							availableStockInPin,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN numOfPosition IS NULL OR numOfPosition = 0 THEN  \n" +
                "										((availableStock + allocatedUnit)/qpa)  \n" +
                "									ELSE  \n" +
                "										((IFNULL(allocatedPin,0) + IFNULL(availableStockInPin, 0)) / (qpa * numOfPosition))  \n" +
                "								END  \n" +
                "							) feasibilityWithAvailableAndAllocatedStock,          \n" +
                "							partID,          \n" +
                "							fun_getShortagePerBuild(qpa, vKitQty, partID, pRefSalesOrderDetID, refRfqLineitem) shortagePerBuil                                \n" +
                "						FROM 	tempFeasibilityDetail                                \n" +
                "					) AS a                                \n" +
                "			) AS feasibilityDet                                \n" +
                "		GROUP BY mountingTypeID, connecterTypeID                                \n" +
                "		ORDER BY mountingType;                              \n" +
                "	ELSE                                 \n" +
                "		INSERT INTO tempMountingTypeWiseKitDet (mountingTypeID, mountingType, connecterTypeID, connecterType, feasibilityWithAllocation, totalLine, shortageLine, feasibilityWithAvailableAndAllocatedStock, shortageWithAvailableQty, shortageForInputQty)                                \n" +
                "		SELECT 		mountingTypeID,          \n" +
                "				fun_getMountingTypeNameByID(mountingTypeID) mountingType,  \n" +
                "				connecterTypeID,    \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN connecterTypeID = -2 THEN  \n" +
                "							fun_getConnectorTypeNameByID(connecterTypeID)  \n" +
                "						ELSE   \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) connecterType,  \n" +
                "				MIN(feasibility) feasibilityWithAllocation,          \n" +
                "				COUNT(1) totalLine,          \n" +
                "				SUM(countOfShortageLineForAllocatedUnit) shortageLine,          \n" +
                "				MIN(feasibilityWithAvailable) feasibilityWithAvailableAndAllocatedStock,          \n" +
                "				SUM(countOfshortageForAvailableUnits) shortageWithAvailableQty,          \n" +
                "				SUM(countShortageForInput) shortageForInputQty          \n" +
                "		FROM 		(          \n" +
                "					SELECT 		mountingTypeID,  \n" +
                "							connecterTypeID,  \n" +
                "							feasibility,    \n" +
                "							feasibilityWithAvailable,       \n" +
                "							(          \n" +
                "								CASE          \n" +
                "									WHEN shortage > 0 THEN          \n" +
                "										1          \n" +
                "									ELSE           \n" +
                "										0          \n" +
                "								END          \n" +
                "							) AS countOfShortageLineForAllocatedUnit,          \n" +
                "							(          \n" +
                "								CASE          \n" +
                "									WHEN shortageForAvailable < 0 THEN          \n" +
                "										1          \n" +
                "									ELSE           \n" +
                "										0          \n" +
                "								END          \n" +
                "							) AS countOfshortageForAvailableUnits,          \n" +
                "							(IFNULL(feasibilityWithAvailable, 0) - IFNULL(pInputQty, 0)) shortageForInput,          \n" +
                "							(          \n" +
                "								CASE          \n" +
                "									WHEN ((IFNULL(feasibilityWithAvailable, 0) - IFNULL(pInputQty, 0)) < 0) THEN          \n" +
                "										1          \n" +
                "									ELSE          \n" +
                "										0          \n" +
                "								END          \n" +
                "							) AS countShortageForInput          \n" +
                "					FROM 		vu_kit_feasibility_detail           \n" +
                "					WHERE 		refSalesOrderDetID = pRefSalesOrderDetID           \n" +
                "								AND assyid = pAssyID           \n" +
                "					GROUP BY 	lineid          \n" +
                "				) a           \n" +
                "		GROUP BY 	mountingTypeID, connecterTypeID            \n" +
                "		ORDER BY 	mountingType;                               \n" +
                "    END IF;                            \n" +
                "  \n" +
                "  \n" +
                "    RETURN vKitQty;                            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getConnectorTypeNameByID` ;  \n" +
                "CREATE FUNCTION `fun_getConnectorTypeNameByID`(          \n" +
                "	pConnectorTypeID INT(11)        \n" +
                ") RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN          \n" +
                "	DECLARE vConnocterTypeName VARCHAR(100);     \n" +
                "  \n" +
                "	SELECT 	`name`   \n" +
                "	INTO 	vConnocterTypeName   \n" +
                "	FROM 	rfq_connectertypemst   \n" +
                "	WHERE 	id = pConnectorTypeID  \n" +
                "			AND isDeleted = 0;   \n" +
                "  \n" +
                "	RETURN vConnocterTypeName;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2680,'2.00','V1','DB changes related to kit allocation, stock allocation, feasibility pop-up - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2680:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetriveKitAllocationConsolidatedList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationConsolidatedList`(                                                                                                \n" +
                "	IN pPageIndex INT(11),                                                                                                          \n" +
                "	IN pRecordPerPage INT(11),                                                                                                            \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                                          \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                 \n" +
                "	IN pRefSalesOrderDetID INT(11),                                  \n" +
                "	IN pLineId INT(11),                                                                                              \n" +
                "	IN pPartId INT(11),                                                                                    \n" +
                "	IN pKitQty INT(11),                                                                      \n" +
                "	IN pPackagingAlias BOOLEAN,                                                                \n" +
                "	IN pFunctionalType VARCHAR(1000),                                                                \n" +
                "	IN pMountingType VARCHAR(1000),                                                                                                  \n" +
                "	IN pCartType VARCHAR(1000),                                                                                                  \n" +
                "	IN pWarehouse VARCHAR(1000),          \n" +
                "	IN pIsCallFromFeasibility BOOLEAN                                                                \n" +
                ")  \n" +
                "BEGIN                                                                                    \n" +
                "	DECLARE pOffset INT(11);                                                                                                          \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                                        \n" +
                "	DECLARE pWhereLineId VARCHAR(500);                                                                              \n" +
                "	DECLARE vCartLineId VARCHAR(16383);                                                                \n" +
                "	DECLARE vWHLineId VARCHAR(16383);                                                                \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);                          \n" +
                "	SET SESSION group_concat_max_len = 500000;                                                                                    \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';                                                                \n" +
                "  \n" +
                "	IF (pLineId != 0) THEN                                                                                \n" +
                "		SET pWhereLineId = CONCAT(\" AND rl.lineID = \",pLineId);                                                                                \n" +
                "	ELSE                                                                                 \n" +
                "		SET pWhereLineId = ' AND 1=1';                                                                                \n" +
                "	END IF;                                                       \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                                                                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);                                                                                        \n" +
                "	ELSE                                                                                        \n" +
                "		SET pOrderBy = \"ORDER BY lineID ASC\";                                                                                        \n" +
                "	END IF;                                                                                        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = \"\") THEN                                                                                                                              \n" +
                "		SET pWhereClause = ' 1=1';                                                                                 \n" +
                "	END IF;	                                                                 \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN                                                                       \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');                                                                      \n" +
                "	END IF;                                                                \n" +
                "  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN                                                                       \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');                                                                      \n" +
                "	END IF;                                                                 \n" +
                "  \n" +
                "	IF(pCartType IS NOT NULL AND pCartType != '') THEN                                                                       \n" +
                "		SELECT GROUP_CONCAT(refBOMLineID) INTO vCartLineId FROM (                                                                \n" +
                "			SELECT 		wm.ID, wm.Name, IFNULL(wm.cartMfr,'-1') AS cartMfr, tempKit.umidId, tempKit.refBOMLineID FROM binmst bm                                                                \n" +
                "			LEFT JOIN 	warehousemst wm ON wm.ID = bm.WarehouseID                                                                \n" +
                "			INNER JOIN 	(                                                                \n" +
                "				SELECT css.id, css.binID, css.id AS umidId, ka.refBOMLineID FROM kit_allocation ka                                                                \n" +
                "				LEFT JOIN component_sid_stock css ON css.id = ka.refUIDId                                                                \n" +
                "				WHERE ka.refSalesOrderDetID = pRefSalesOrderDetID AND `status` = 'A' AND css.deletedAt IS NULL                                                                \n" +
                "			) tempKit ON tempKit.binID = bm.id                                                                \n" +
                "			WHERE bm.deletedAt IS NULL                                                                \n" +
                "		) a WHERE FIND_IN_SET(a.cartMfr, pCartType);                                                                \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN                                                                \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vCartLineId, ') ');                                                                      \n" +
                "		END IF;                                                                \n" +
                "	END IF;                                                                 \n" +
                "  \n" +
                "	IF(pWarehouse IS NOT NULL AND pWarehouse != '') THEN                                                                       \n" +
                "		SELECT GROUP_CONCAT(refBOMLineID) INTO vWHLineId FROM (                                                                \n" +
                "			SELECT 		wm.ID, wm.Name, IFNULL(wm.cartMfr,'-1') AS cartMfr, tempKit.umidId, tempKit.refBOMLineID FROM binmst bm                                                                \n" +
                "			LEFT JOIN 	warehousemst wm ON wm.ID = bm.WarehouseID                                                                \n" +
                "			INNER JOIN 	(                                                                \n" +
                "				SELECT css.id, css.binID, css.id AS umidId, ka.refBOMLineID FROM kit_allocation ka                                                                \n" +
                "				LEFT JOIN component_sid_stock css ON css.id = ka.refUIDId                                                                \n" +
                "				WHERE ka.refSalesOrderDetID = pRefSalesOrderDetID AND `status` = 'A' AND css.deletedAt IS NULL                                                                \n" +
                "			) tempKit ON tempKit.binID = bm.id                                                                \n" +
                "			WHERE bm.deletedAt IS NULL                                                                \n" +
                "		) a WHERE a.ID IN (pWarehouse);                                                                \n" +
                "  \n" +
                "		IF (vWHLineId IS NOT NULL AND vWHLineId != '') THEN                                                                \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vWHLineId, ') ');                                                                      \n" +
                "		END IF;                                                                \n" +
                "	END IF;                                                                                             \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                                                                                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                                                                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                                                \n" +
                "	ELSE	                                                                                                                                \n" +
                "		SET rowNumWhere = '';                                                                                                                                \n" +
                "	END IF;                                                                               \n" +
                "  \n" +
                "	IF (pIsCallFromFeasibility) THEN          \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildWithAvailable > 0 ');          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	CALL Sproc_GetKitConsolidateData(pPartId, FALSE);                            \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT('                                      \n" +
                "		SELECT	*                                  \n" +
                "		FROM 	(                                  \n" +
                "				SELECT 	id, 		  \n" +
                "					qpa, 			  \n" +
                "					lineID, 	  \n" +
                "					unitName, 		  \n" +
                "					uomID, 			  \n" +
                "					PIDCode,     \n" +
                "					isCustom,                                                                           \n" +
                "					partID,		  \n" +
                "					mfgPNID,		  \n" +
                "					rohsName,	  \n" +
                "					rohsIcon,		                                        \n" +
                "					parttypeID,	  \n" +
                "					fun_getPartTypeNameByID(parttypeID) partTypeName,                                                                              \n" +
                "					mountingtypeID,	  \n" +
                "					fun_getMountingTypeNameByID(mountingtypeID) mountingTypeName,	                                        \n" +
                "					component,	  \n" +
                "					mfgPN,			  \n" +
                "					consolidatedQPA,		  \n" +
                "					consolidatedLineItemIDs,	  \n" +
                "					requireQty,	  \n" +
                "					requirePins,   \n" +
                "					allocatedQty,                                                                              \n" +
                "					allocatedUnit,	  \n" +
                "					allocatedPins,		  \n" +
                "					scrapedPins,   \n" +
                "					consolidatedpartlineID,		  \n" +
                "					refRfqLineitem,			  \n" +
                "					consumeUnits,	  \n" +
                "					consumeQty,                                                      \n" +
                "					mfgPart,	  \n" +
                "					shortagePerBuild,	  \n" +
                "					dnpQPA,				  \n" +
                "					isInstall,       		  \n" +
                "					custPNID,	  \n" +
                "					custPN,	 	                      \n" +
                "					custPIDCode, 	  \n" +
                "					custIsCustom, 		  \n" +
                "					restrictCPNUseWithPermissionStep, 				  \n" +
                "					restrictCPNUsePermanentlyStep, 	                    \n" +
                "					restrictCPNUseInBOMStep, 		  \n" +
                "					restrictPackagingUsePermanently,                   \n" +
                "					restrictPackagingUseWithpermission,       \n" +
                "					(IFNULL(shortagePerBuild,0) - IFNULL(availabelStock, 0)) shortagePerBuildWithAvailable,             \n" +
                "					cpnRoHsIcon,				  \n" +
                "					cpnRoHsName,              \n" +
                "					uomMismatchedStep, 			  \n" +
                "					rfqLineItemIds, 	  \n" +
                "					availabelStock	                                                                                      	                                    	                        	                                                                               -- , warehouseCart                                                                              \n" +
                "				FROM	(	                                                                              \n" +
                "						SELECT 		rl.id, 			  \n" +
                "								IFNULL(r.qpa,0) qpa, 	                                                                              \n" +
                "								rl.lineID, 		                                                                              \n" +
                "								rl.uomID,		  \n" +
                "								fun_getUnitNameByID(rl.uomID) unitName,                                                                              \n" +
                "								rl.partID,		  \n" +
                "								ra.mfgPNID,		  \n" +
                "								com.PIDCode,   \n" +
                "								com.isCustom,	                                                                              \n" +
                "								fun_getRoHSIconByID(com.RoHSStatusID) rohsIcon, 				                                                                              \n" +
                "								fun_getRoHSNameByID(com.RoHSStatusID) rohsName,                                                                              \n" +
                "								fun_getKitAllocatedFunctionalType(', pRefSalesOrderDetID ,', ra.refRfqLineitem, com.functionalCategoryID) parttypeID,		                                                                              \n" +
                "								-- fun_getPartTypeNameByID(com.functionalCategoryID) partTypeName,                                                                              \n" +
                "								fun_getKitAllocatedMountingType(', pRefSalesOrderDetID ,', ra.refRfqLineitem, com.mountingTypeID) mountingTypeID,                                                                              \n" +
                "								-- fun_getMountingTypeNameByID(com.mountingTypeID) mountingTypeName,                                                         \n" +
                "								(                    \n" +
                "									CASE                    \n" +
                "										WHEN rl.custPNID IS NOT NULL THEN                    \n" +
                "											CONCAT((GROUP_CONCAT(DISTINCT(com.id))), \",\", (GROUP_CONCAT(DISTINCT(rl.custPNID))))                    \n" +
                "										ELSE                    \n" +
                "											(GROUP_CONCAT(DISTINCT(com.id)))                    \n" +
                "									END                    \n" +
                "								) mfgPart,                                                                           \n" +
                "								fun_getKitAllocationPIDsForComponent(ra.refRfqLineitem, ',pRefSalesOrderDetID,' , ',pPackagingAlias,') component,                                                                      \n" +
                "								fun_getKitAllocationPIDsForMfgPN(ra.refRfqLineitem, ',pRefSalesOrderDetID,' , ',pPackagingAlias,') mfgPN,                                                                       \n" +
                "								IFNULL(r.qpa,0) consolidatedQPA,                                              \n" +
                "								IFNULL(r.dnpWithoutQPA,0) dnpQPA,                                            \n" +
                "								r.isInstall,                                                                            \n" +
                "								(              \n" +
                "									CASE               \n" +
                "										WHEN ra.uomMismatchedStep = 0 THEN              \n" +
                "											0              \n" +
                "										ELSE              \n" +
                "											(IFNULL(r.qpa,0) * ', pKitQty,')              \n" +
                "									END              \n" +
                "								) requireQty,    \n" +
                "								(              \n" +
                "									CASE               \n" +
                "										WHEN ra.uomMismatchedStep = 0 THEN              \n" +
                "											0              \n" +
                "										ELSE              \n" +
                "											(IFNULL(r.qpa,0) * ', pKitQty,' * IFNULL(rl.numOfPosition, 0))              \n" +
                "									END              \n" +
                "								) requirePins,                                                                              \n" +
                "								fun_getKitAllocatedQty(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, r.consolidatedLineItemIDs, TRUE) allocatedQty,                                                                        \n" +
                "								fun_getKitAllocatedUnits(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, r.consolidatedLineItemIDs, TRUE) allocatedUnit,                                                                   \n" +
                "								fun_getKitAllocatedPin(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, r.consolidatedLineItemIDs, rl.numOfPosition, TRUE) allocatedPins,  \n" +
                "								fun_getKitScrapedPin(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, r.consolidatedLineItemIDs, rl.numOfPosition, TRUE) scrapedPins,                                                                       \n" +
                "								fun_getShortagePerBuild(IFNULL(r.qpa,0), ',pKitQty,',0,',pRefSalesOrderDetID,',r.consolidatedLineItemIDs) shortagePerBuild,                                                                                    \n" +
                "								fun_getAvilableStockWithPackagingAliasForConsolidate(',pRefSalesOrderDetID,',r.consolidatedLineItemIDs) availabelStock,        \n" +
                "								r.consolidatedpartlineID,                              \n" +
                "								r.consolidatedLineItemIDs,                            \n" +
                "								ra.refRfqLineitem,                                                          \n" +
                "								fun_getKitConsumeUnits(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, r.consolidatedLineItemIDs, TRUE) consumeUnits,                                                          \n" +
                "								fun_getKitConsumeQty(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, r.consolidatedLineItemIDs, TRUE) consumeQty,                      \n" +
                "								rl.custPNID,		  \n" +
                "								rl.custPN,	  \n" +
                "								fun_getAssyPIDCodeByID(custPNID) custPIDCode,   \n" +
                "								cpnCom.isCustom custIsCustom,                  \n" +
                "								rl.restrictCPNUseWithPermissionStep, 	  \n" +
                "								rl.restrictCPNUsePermanentlyStep, 	  \n" +
                "								rl.restrictCPNUseInBOMStep,                  \n" +
                "								cpnCom.restrictPackagingUsePermanently, 	  \n" +
                "								cpnCom.restrictPackagingUseWithpermission,                  \n" +
                "								fun_getRoHSIconByID(cpnCom.RoHSStatusID) cpnRoHsIcon,				  \n" +
                "								fun_getRoHSNameByID(cpnCom.RoHSStatusID) cpnRoHsName,              \n" +
                "								ra.uomMismatchedStep,        \n" +
                "								r.consolidatedLineItemIDs AS rfqLineItemIds        \n" +
                "								-- ,	fun_getWarehouseCartByBOMLineId(ra.refRfqLineitem) warehouseCart                                                                              \n" +
                "						FROM 		temp_Sproc_GetKitConsolidateData r                                      \n" +
                "						LEFT JOIN	kit_allocation_lineitems rl ON rl.refRfqLineitem = r.rfqLineItemsID AND rl.refSalesOrderDetID = ',pRefSalesOrderDetID,'		                                                                             \n" +
                "						LEFT JOIN 	kit_allocation_lineitems_alternatepart ra ON ra.refRfqLineitem = rl.refRfqLineitem                                      \n" +
                "						LEFT JOIN 	component com ON com.id = ra.mfgPNID AND com.deletedAt IS NULL                    \n" +
                "						LEFT JOIN 	component cpnCom ON cpnCom.id = rl.custPNID AND com.deletedAt IS NULL AND cpnCom.isCPN = 1                                                                                                                                               \n" +
                "						LEFT JOIN 	(                                                                            \n" +
                "									SELECT 		ka.partId, refSalesOrderdetId, SUM(ka.allocatedQty) allocatedQty, SUM(ka.allocatedUnit) allocatedUnit                                                                            \n" +
                "									FROM 		kit_allocation ka                                                                          \n" +
                "									WHERE		ka.status = \"A\"                                                                           \n" +
                "									GROUP BY 	partid, RefSalesorderDetId                                                                             \n" +
                "								) As ka on ka.partID IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = ra.refsalesOrderdetid AND refRfqLineitem = rl.refRfqLineitem AND deletedAt IS NULL) AND                                                                         \n" +
                "										ka.refsalesOrderdetid =  ra.refsalesOrderdetid                                                                            \n" +
                "						WHERE 		ra.refSalesOrderDetID = ',pRefSalesOrderDetID,' AND ra.partcategoryID != 3 AND ra.deletedAt IS NULL ',pWhereLineId ,'                                                                          \n" +
                "								AND com.isGoodPart = 1                                                    \n" +
                "						GROUP BY 	rl.id                                                                              \n" +
                "						ORDER BY 	rl.partID                                                                              \n" +
                "					) As tempData                                      \n" +
                "			) As mainData                                  \n" +
                "		WHERE', pWhereClause, ' ',vFilterWhereClause                                                                              \n" +
                "		-- GROUP BY tempData.mfgPNID' 	                                                                              \n" +
                "	);                                                                     \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS ConsolidatedResult;                                                                              \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS ConsolidatedResult AS \", @vFromSQLQuery, \" \" , rowNumWhere);                                                                             	        \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                                                                                                                              \n" +
                "	EXECUTE mainQuery;                                                                                                                              \n" +
                "	DEALLOCATE PREPARE mainQuery;                                                                                    \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'TotalRecord' from ( \", @vFromSQLQuery, \") as a\");           \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                                                              \n" +
                "	EXECUTE query1;                                                                                                                              \n" +
                "	DEALLOCATE PREPARE query1;                                                                                          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM ConsolidatedResult \", pOrderBy);                                                                                                                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                                                              \n" +
                "	EXECUTE query2;                                                                                                                              \n" +
                "	DEALLOCATE PREPARE query2;                                                                                         \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");           \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                                                                                                              \n" +
                "	EXECUTE query3;                                                                                                                              \n" +
                "	DEALLOCATE PREPARE query3;                                                                                                                   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetriveKitAllocationList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationList`(                                                                                                      \n" +
                "	IN pPageIndex INT(11),                                                                                                                \n" +
                "	IN pRecordPerPage INT(11),                                                                                                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                                                \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                                                      \n" +
                "	IN pPartId INT(11),                                                                                          \n" +
                "	IN pRefSalesOrderDetailId INT(11),                                                                              \n" +
                "	IN pLineId INT(11),                                  \n" +
                "	IN pPackagingAlias BOOLEAN,                                                                \n" +
                "	IN pFunctionalType VARCHAR(1000),                                                                \n" +
                "	IN pMountingType VARCHAR(1000),                                                                                                  \n" +
                "	IN pCartType VARCHAR(1000),                                                                                                  \n" +
                "	IN pWarehouse VARCHAR(1000),          \n" +
                "	IN pFeasibilityQty INT(11),          \n" +
                "	IN pIsCallFromFeasibility BOOLEAN          \n" +
                ")  \n" +
                "BEGIN                                                                                          \n" +
                "	DECLARE pOffset INT(11);                                                                                                                \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                                                                          \n" +
                "	DECLARE pAllocatedSharedCount INT(11);                                                                                     \n" +
                "	DECLARE pKitQty INT(11);                                                                              \n" +
                "	DECLARE pWhereLineId VARCHAR(500);                                                                  \n" +
                "	DECLARE vCartLineId VARCHAR(16383);                                                                \n" +
                "	DECLARE vWHLineId VARCHAR(16383);                                                                \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);                                                                       \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';                                                                                              \n" +
                "  \n" +
                "	IF (pLineId != 0) THEN                                                                              \n" +
                "		SET pWhereLineId = CONCAT(\" AND rl.lineID = \",pLineId);                                                                              \n" +
                "	ELSE                                                                               \n" +
                "		SET pWhereLineId = ' AND 1=1';                                                                              \n" +
                "	END IF;                                                                               \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                                                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                                                                                                                \n" +
                "	ELSE                                                                                                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                                                                \n" +
                "	END IF;	                                                                                          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                                                                \n" +
                "		SET pWhereClause = ' 1=1' ;                                                                                                                \n" +
                "	END IF;                                                                                          \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN                                                                       \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');                                                                      \n" +
                "	END IF;                                                                \n" +
                "  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN                                                                       \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');                                                                      \n" +
                "	END IF;                                                                \n" +
                "  \n" +
                "	IF(pCartType IS NOT NULL AND pCartType != '') THEN                                                                       \n" +
                "		SELECT GROUP_CONCAT(refBOMLineID) INTO vCartLineId FROM (                                                                \n" +
                "			SELECT 		wm.ID, wm.Name, IFNULL(wm.cartMfr,'-1') AS cartMfr, tempKit.umidId, tempKit.refBOMLineID FROM binmst bm                                                                \n" +
                "			LEFT JOIN 	warehousemst wm ON wm.ID = bm.WarehouseID                                                                \n" +
                "			INNER JOIN 	(                                                                \n" +
                "				SELECT css.id, css.binID, css.id AS umidId, ka.refBOMLineID FROM kit_allocation ka                                                                \n" +
                "				LEFT JOIN component_sid_stock css ON css.id = ka.refUIDId                                                                \n" +
                "				WHERE ka.refSalesOrderDetID = pRefSalesOrderDetailId AND ka.assyID = pPartId AND `status` = 'A' AND css.deletedAt IS NULL                                                                \n" +
                "			) tempKit ON tempKit.binID = bm.id                                                                \n" +
                "			WHERE bm.deletedAt IS NULL                                                                \n" +
                "		) a WHERE FIND_IN_SET(a.cartMfr, pCartType);                                                                \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN                                                                \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vCartLineId, ') ');                                                                      \n" +
                "		END IF;                                                                \n" +
                "	END IF;                                                                 \n" +
                "  \n" +
                "	IF(pWarehouse IS NOT NULL AND pWarehouse != '') THEN                                                                       \n" +
                "		SELECT GROUP_CONCAT(refBOMLineID) INTO vWHLineId FROM (                                                                \n" +
                "			SELECT 		wm.ID, wm.Name, IFNULL(wm.cartMfr,'-1') AS cartMfr, tempKit.umidId, tempKit.refBOMLineID FROM binmst bm                                                                \n" +
                "			LEFT JOIN 	warehousemst wm ON wm.ID = bm.WarehouseID                                                                \n" +
                "			INNER JOIN 	(                                                                \n" +
                "				SELECT css.id, css.binID, css.id AS umidId, ka.refBOMLineID FROM kit_allocation ka                                                                \n" +
                "				LEFT JOIN component_sid_stock css ON css.id = ka.refUIDId                                                                \n" +
                "				WHERE ka.refSalesOrderDetID = pRefSalesOrderDetailId AND ka.assyID = pPartId AND `status` = 'A' AND css.deletedAt IS NULL                                                                \n" +
                "			) tempKit ON tempKit.binID = bm.id                                                                \n" +
                "			WHERE bm.deletedAt IS NULL                                                                \n" +
                "		) a WHERE a.ID IN (pWarehouse);                                                                \n" +
                "  \n" +
                "		IF (vWHLineId IS NOT NULL AND vWHLineId != '') THEN                                                                \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vWHLineId, ') ');                                                                      \n" +
                "		END IF;                                                                \n" +
                "	END IF;                                                                 \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                                                                 \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                                                                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                                \n" +
                "	ELSE	                                                                                                                \n" +
                "		SET rowNumWhere = '';                                                                                                                \n" +
                "	END IF;	                                 \n" +
                "  \n" +
                "	IF (pIsCallFromFeasibility AND pFeasibilityQty IS NOT NULL) THEN          \n" +
                "		SET pKitQty = pFeasibilityQty;          \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildWithAvailable > 0 ');                                                                      \n" +
                "	ELSE          \n" +
                "		SELECT 	totalAssyBuildQty           \n" +
                "		INTO 	pKitQty           \n" +
                "		FROM 	kit_allocation_assy_detail           \n" +
                "		WHERE 	partId = pPartId           \n" +
                "				AND refSalesOrderDetID = pRefSalesOrderDetailId           \n" +
                "				AND deletedAt IS NULL;                                                                                    \n" +
                "	END IF;          \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT('                                       \n" +
                "		SELECT		*                                  \n" +
                "		FROM		(					                                  \n" +
                "					SELECT		id,				  \n" +
                "							qpa,				  \n" +
                "							lineID,				  \n" +
                "							uomID,			                                        \n" +
                "							unitName, 			  \n" +
                "							partID, 			  \n" +
                "							refRfqLineitem,                   \n" +
                "							refsalesOrderdetid,                                                                   \n" +
                "							mfgPNID,			  \n" +
                "							PIDCode,	  \n" +
                "							isCustom,		  \n" +
                "							rohsIcon,			  \n" +
                "							rohsName,		                                        \n" +
                "							parttypeID,			  \n" +
                "							fun_getPartTypeNameByID(parttypeID) partTypeName,		                                        \n" +
                "							mountingtypeID,            	  \n" +
                "							fun_getMountingTypeNameByID(mountingtypeID) mountingTypeName,	                                        \n" +
                "							(              \n" +
                "								CASE               \n" +
                "									WHEN uomMismatchedStep = 0 THEN              \n" +
                "										0              \n" +
                "									ELSE              \n" +
                "										(qpa * IFNULL(',pKitQty,',0))              \n" +
                "								END              \n" +
                "							) requiredQtyBuild,    \n" +
                "							(              \n" +
                "								CASE               \n" +
                "									WHEN uomMismatchedStep = 0 THEN              \n" +
                "										0              \n" +
                "									ELSE              \n" +
                "										(qpa * IFNULL(',pKitQty,',0) * IFNULL(numOfPosition, 0))              \n" +
                "								END              \n" +
                "							) requirePinsBuild,    \n" +
                "							mfgPart,			  \n" +
                "							component,			  \n" +
                "							mfgPN,			                                        \n" +
                "							allocatedQty,			  \n" +
                "							allocatedUnit,			  \n" +
                "							allocatedPins, 			  \n" +
                "							scrapedPins, allocated_shared,		                                        \n" +
                "							fun_getShortagePerBuild(qpa, ',pKitQty,',',pPartId,',',pRefSalesOrderDetailId,',CAST(refRfqLineitem as CHAR(255))) shortagePerBuild,		                                        \n" +
                "							fun_getFreeToShareAmongOtherKits(qpa, ',pKitQty,',',pPartId,',',pRefSalesOrderDetailId,',refRfqLineitem) freeToShareAmongOtherKits,	                                        \n" +
                "							allocatedSTKPosition,		  \n" +
                "							availabelStock,          \n" +
                "							(IFNULL(fun_getShortagePerBuild(qpa, ',pKitQty,',',pPartId,',',pRefSalesOrderDetailId,',CAST(refRfqLineitem AS CHAR(255))), 0) - IFNULL(availabelStock, 0)) shortagePerBuildWithAvailable,                                                                                                      \n" +
                "							numOfPosition,			                                        \n" +
                "							(IFNULL(fun_getShortagePerBuild(qpa, ',pKitQty,',',pPartId,',',pRefSalesOrderDetailId,',refRfqLineitem),0) * IFNULL(numOfPosition,0)) shortagePin,			                                        \n" +
                "							consumeUnits,			  \n" +
                "							consumeQty,			  \n" +
                "							dnpQty,                                            \n" +
                "							isInstall,			  \n" +
                "							isBuyDNPQty, 			  \n" +
                "							lineCleanStatus,	                                      \n" +
                "							description,			  \n" +
                "							custPNID,			  \n" +
                "							custPN,			  \n" +
                "							custPIDCode,  custIsCustom,                  \n" +
                "							restrictCPNUseWithPermissionStep, 				  \n" +
                "							restrictCPNUsePermanentlyStep, 	                    \n" +
                "							restrictCPNUseInBOMStep,					  \n" +
                "							restrictPackagingUsePermanently,                   \n" +
                "							restrictPackagingUseWithpermission,				                  \n" +
                "							cpnRoHsIcon,							  \n" +
                "							cpnRoHsName,              \n" +
                "							uomMismatchedStep	                                                                                      	                                                      \n" +
                "					FROM		(                                                                                    \n" +
                "								SELECT 		rl.id,		  \n" +
                "										ra.refsalesOrderdetid,	 			                                        \n" +
                "										(                                        \n" +
                "											CASE 	WHEN rl.isPurchase = 1 OR rl.isInstall = 1 THEN                                    \n" +
                "												(                                    \n" +
                "													IFNULL(rl.qpa,0) + IF(rl.isBuyDNPQty = \"Y\" OR rl.isBuyDNPQty = \"C\", IFNULL(rl.dnpQty,0), 0)                                    \n" +
                "												)                                    \n" +
                "												ELSE                                    \n" +
                "												(                                    \n" +
                "													IF(rl.isBuyDNPQty = \"Y\" OR rl.isBuyDNPQty = \"C\", IFNULL(rl.dnpQty,0), 0)                                    \n" +
                "												)                                    \n" +
                "											END                               \n" +
                "										) AS qpa,                                        \n" +
                "										IFNULL(rl.dnpQty,0) dnpQty,	  \n" +
                "										rl.lineID, 	  \n" +
                "										CONCAT(IFNULL(rl.description,''''), IFNULL(ra.description,'''')) AS description, 		                                                                                    \n" +
                "										rl.uomID,		  \n" +
                "										fun_getUnitNameByID(rl.uomID) unitName,                                                                                    \n" +
                "										rl.partID,		  \n" +
                "										rl.refRfqLineitem,		  \n" +
                "										ra.mfgPNID,		  \n" +
                "										com.PIDCode,      \n" +
                "										com.isCustom,                                                    \n" +
                "										rl.numOfPosition,	  \n" +
                "										rl.isInstall,			  \n" +
                "										rl.isBuyDNPQty,	                                                                                    \n" +
                "										fun_getRoHSIconByID(com.RoHSStatusID) rohsIcon, 				                                                                                    \n" +
                "										fun_getRoHSNameByID(com.RoHSStatusID) rohsName,                                                                                    \n" +
                "										fun_getKitAllocatedFunctionalType(', pRefSalesOrderDetailId ,', ra.refRfqLineitem, com.functionalCategoryID) parttypeID,		                                                                              \n" +
                "										-- fun_getPartTypeNameByID(com.functionalCategoryID) partTypeName,                                                                              \n" +
                "										fun_getKitAllocatedMountingType(', pRefSalesOrderDetailId ,', ra.refRfqLineitem, com.mountingTypeID) mountingTypeID,                                                                              \n" +
                "										-- fun_getMountingTypeNameByID(com.mountingTypeID) mountingTypeName,                                                                                    \n" +
                "										-- (rl.qpa * IFNULL(',pKitQty,',0)) requiredQtyBuild,                                                                                    \n" +
                "										(                    \n" +
                "											CASE                    \n" +
                "												WHEN rl.custPNID IS NOT NULL THEN                    \n" +
                "													CONCAT((GROUP_CONCAT(DISTINCT(com.id))), \",\", (GROUP_CONCAT(DISTINCT(rl.custPNID))))                    \n" +
                "												ELSE                    \n" +
                "													(GROUP_CONCAT(DISTINCT(com.id)))                    \n" +
                "											END                    \n" +
                "										) mfgPart,                    \n" +
                "										fun_getKitAllocationPIDsForComponent(ra.refRfqLineitem, ',pRefSalesOrderDetailId,', ',pPackagingAlias,') component,                                                                        \n" +
                "										fun_getKitAllocationPIDsForMfgPN(ra.refRfqLineitem, ',pRefSalesOrderDetailId,' , ',pPackagingAlias,') mfgPN,                                                                         \n" +
                "										fun_getKitAllocatedQty(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, NULL, FALSE) allocatedQty,                                                                          \n" +
                "										fun_getKitAllocatedUnits(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, NULL, FALSE) allocatedUnit,                                                                                  \n" +
                "										fun_getKitAllocatedPin(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, NULL, rl.numOfPosition, FALSE) allocatedPins,                                                                  \n" +
                "										fun_getKitScrapedPin(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, NULL, rl.numOfPosition, FALSE) scrapedPins,                                                                  \n" +
                "										fun_getKitConsumeUnits(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, NULL, FALSE) consumeUnits,                                                            \n" +
                "										fun_getKitConsumeQty(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, NULL, FALSE) consumeQty,                                                            \n" +
                "										(                                                                                          \n" +
                "											CASE 	WHEN (SELECT COUNT(*) FROM (SELECT * FROM kit_allocation kit_all WHERE kit_all.partId = ra.mfgPNID AND kit_all.status = \"A\" GROUP BY kit_all.refBOMLineID) a) > 1 THEN                                                                                          \n" +
                "													(SELECT SUM(ka.allocatedQty) FROM kit_allocation ka WHERE ka.partId = ra.mfgPNID AND `status` = \"A\" GROUP BY ka.partId)                                                                                          \n" +
                "												ELSE 0                                                                                          \n" +
                "											END                                                                                          \n" +
                "										) allocated_shared,                                                                                     \n" +
                "										-- fun_getShortagePerBuild(rl.qpa, ',pKitQty,',',pPartId,',',pRefSalesOrderDetailId,',rl.refRfqLineitem) shortagePerBuild,                                                                                    \n" +
                "										-- fun_getFreeToShareAmongOtherKits(rl.qpa, ',pKitQty,',',pPartId,',',pRefSalesOrderDetailId,',rl.refRfqLineitem) freeToShareAmongOtherKits,                                                                                    \n" +
                "										fun_getAllocatedSTKPosition(',pRefSalesOrderDetailId,', ra.partId, rl.refRfqLineitem) allocatedSTKPosition,                                                                                           \n" +
                "										fun_getAvilableStockWithPackagingAlias(rl.refRfqLineitem,',pPartId,',',pRefSalesOrderDetailId,') availabelStock,                    \n" +
                "										fun_getBOMLineCleanStatusErrorCategoryWise(ra.refRfqLineItemAlternatePartId, NULL, NULL, NULL, 2) lineCleanStatus,                      \n" +
                "										rl.custPNID,		  \n" +
                "										rl.custPN,	  \n" +
                "										fun_getAssyPIDCodeByID(custPNID) custPIDCode,  cpnCom.isCustom custIsCustom,                   \n" +
                "										rl.restrictCPNUseWithPermissionStep, 	  \n" +
                "										rl.restrictCPNUsePermanentlyStep, 		  \n" +
                "										rl.restrictCPNUseInBOMStep,                  \n" +
                "										cpnCom.restrictPackagingUsePermanently, 	  \n" +
                "										cpnCom.restrictPackagingUseWithpermission,		                  \n" +
                "										fun_getRoHSIconByID(cpnCom.RoHSStatusID) cpnRoHsIcon,					  \n" +
                "										fun_getRoHSNameByID(cpnCom.RoHSStatusID) cpnRoHsName,              \n" +
                "										ra.uomMismatchedStep                  \n" +
                "								FROM		kit_allocation_lineitems_alternatepart ra                                                                                                                              \n" +
                "								LEFT JOIN 	kit_allocation_lineitems rl ON rl.refRfqLineitem = ra.refRfqLineitem AND rl.refsalesOrderdetid =  ra.refsalesOrderdetid AND rl.partID = ',pPartId,' AND rl.deletedAt IS NULL                                                                                    \n" +
                "								LEFT JOIN 	component com ON com.id = ra.mfgPNID AND com.deletedAt IS NULL                                                                                    \n" +
                "								LEFT JOIN 	component cpnCom ON cpnCom.id = rl.custPNID AND com.deletedAt IS NULL AND cpnCom.isCPN = 1                                                                                    \n" +
                "								WHERE		ra.deletedAt IS NULL AND ra.refSalesOrderDetID = ',pRefSalesOrderDetailId,' AND com.isGoodPart = 1 AND rl.partID = ',pPartId,'',pWhereLineId ,'                                                                               \n" +
                "								GROUP BY 	rl.id                                                                                     \n" +
                "								ORDER BY 	rl.lineID                                                                                    \n" +
                "							) As tempData                                    \n" +
                "				) As mainData                                                                                  \n" +
                "			WHERE', pWhereClause,' ', vFilterWhereClause                                                                                     \n" +
                "	);                                                                                    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS rfqLineItemsKitsResult;                                                              \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS rfqLineItemsKitsResult AS \", @vFromSQLQuery, \" \" , rowNumWhere);                                                                                 	          \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                                                                                                                                    \n" +
                "	EXECUTE mainQuery;                                                                                                                                    \n" +
                "	DEALLOCATE PREPARE mainQuery;                                                                                          \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'COUNT(*)' from ( \", @vFromSQLQuery, \") as a\");                                                                                              \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                                                                    \n" +
                "	EXECUTE query1;                                                                                                                                    \n" +
                "	DEALLOCATE PREPARE query1;                                                                                                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM rfqLineItemsKitsResult \", pOrderBy);                                                                                                                                    \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                                                                    \n" +
                "	EXECUTE query2;                                                                                                                                    \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");           \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                                                                                                              \n" +
                "	EXECUTE query3;                                                                                                                              \n" +
                "	DEALLOCATE PREPARE query3;                                                                                                                                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE rfqLineItemsKitsResult;                                                                                      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrivePurchaseConsolidatedList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePurchaseConsolidatedList`(                  \n" +
                "	IN pPageIndex INT(11),                  \n" +
                "	IN pRecordPerPage INT(11),                  \n" +
                "	IN pOrderBy VARCHAR(255),                  \n" +
                "	IN pWhereClause VARCHAR(16383),                  \n" +
                "	IN pPartId INT(11),                  \n" +
                "	IN pKitQty INT(11),                  \n" +
                "    IN pPOQty INT(11),                  \n" +
                "    IN pMRPQty INT(11),                  \n" +
                "	IN pPackagingAlias BOOLEAN,                  \n" +
                "	IN pRefSalesOrderDetID INT,                  \n" +
                "    IN pLineId INT(11)                  \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "	DECLARE pOffset INT(11);                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                  \n" +
                "    DECLARE pWhereLineId VARCHAR(500);                  \n" +
                "  \n" +
                "	IF (pLineId != 0) THEN                  \n" +
                "		SET pWhereLineId = CONCAT(\" AND rl.lineID = \",pLineId);                  \n" +
                "	ELSE                  \n" +
                "		SET pWhereLineId = ' AND 1=1';                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);                  \n" +
                "	ELSE                  \n" +
                "		SET pOrderBy = \"ORDER BY lineID ASC\";                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = \"\") THEN                  \n" +
                "		SET pWhereClause = ' 1=1';                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                  \n" +
                "	ELSE                  \n" +
                "		SET rowNumWhere = '';                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "    CALL Sproc_GetKitConsolidateData(pPartId, FALSE);    \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT('                  \n" +
                "		SELECT 	id, 		qpa, 			lineID, 	unitName, 		uomID, 			PIDCode,                  \n" +
                "			partID,			mfgPNID,		rohsName,	rohsIcon,                  \n" +
                "            parttypeID,	partTypeName 	,                  \n" +
                "			mountingtypeID,	mountingTypeName,                  \n" +
                "            component,	mfgPN,			consolidatedQPA,	requireQty,	requirePins, allocatedQty,                  \n" +
                "			allocatedUnit,	allocatedPins, scrapedPins,		consolidatedpartlineID,			refRfqLineitem,		consumeUnits,	consumeQty,                  \n" +
                "            mfgPart, 	shortagePerBuild, 	dnpQPA, 	isInstall,		isPurchase,		refSalesOrderDetID,                  \n" +
                "			restrictCPNUseInBOMStep,                restrictCPNUsePermanentlyStep,          restrictCPNUseWithPermissionStep,                  \n" +
                "			noOfPosition,  \n" +
                "			(qpa*',pPOQty,') requiredUnitsPOQty,                  \n" +
                "            ((qpa*',pPOQty,')*noOfPosition) requiredPinsPOQty,                  \n" +
                "            (qpa*',pMRPQty,') requiredUnitsMRPQty,                  \n" +
                "            ((qpa*',pMRPQty,')*noOfPosition) requiredPinsMRPQty,                  \n" +
                "            null quoteSupplier,                  \n" +
                "            null quotePartNo,                  \n" +
                "            0 quoteUnitPrice,                  \n" +
                "            null quotePackaging,                  \n" +
                "            null selectedPriceSupplier,                  \n" +
                "            null selectedPricePartNo,                  \n" +
                "            0 selectedPriceUnitPrice,                  \n" +
                "            null selectedPricePackaging,                  \n" +
                "            0 cumulativeStock,                  \n" +
                "            0 selectedSupplierStock,                  \n" +
                "            0 allocatedUnits,                  \n" +
                "            0 shortage,                  \n" +
                "            0 inTransitStock,                  \n" +
                "            0 possibilityOfAvailableQty,                  \n" +
                "            refMongoTrnsID,                  \n" +
                "            null BOMIssues,            \n" +
                "            consolidatedLineItemIDs                  \n" +
                "		FROM	(                  \n" +
                "				SELECT 		rl.id, 			IFNULL(r.qpa,0) qpa,                  \n" +
                "						rl.lineID,                  \n" +
                "						rl.uomID,		fun_getUnitNameByID(rl.uomID) unitName,                  \n" +
                "						rl.partID,		ra.mfgPNID,		com.PIDCode,                  \n" +
                "						fun_getRoHSIconByID(com.RoHSStatusID) rohsIcon,                  \n" +
                "						fun_getRoHSNameByID(com.RoHSStatusID) rohsName,                  \n" +
                "						fun_getKitAllocatedFunctionalType(', pRefSalesOrderDetID ,', ra.refRfqLineitem, com.functionalCategoryID) parttypeID,                  \n" +
                "						fun_getKitAllocatedMountingType(', pRefSalesOrderDetID ,', ra.refRfqLineitem, com.mountingTypeID) mountingTypeID,                  \n" +
                "						(GROUP_CONCAT(DISTINCT(com.id))) mfgPart,                  \n" +
                "						fun_getKitAllocationPIDsForComponent(ra.refRfqLineitem, ',pRefSalesOrderDetID,' , ',pPackagingAlias,') component,                  \n" +
                "						fun_getKitAllocationPIDsForMfgPN(ra.refRfqLineitem, ',pRefSalesOrderDetID,' , ',pPackagingAlias,') mfgPN,                  \n" +
                "						IFNULL(r.qpa,0) consolidatedQPA,                  \n" +
                "						IFNULL(r.dnpWithoutQPA,0) dnpQPA,                  \n" +
                "						r.isInstall,                  \n" +
                "						(IFNULL(r.qpa,0) * ', pMRPQty,') requireQty,  \n" +
                "						(IFNULL(r.qpa,0) * ', pMRPQty,' * IFNULL(rl.numOfPosition, 0)) requirePins,                  \n" +
                "						fun_getKitAllocatedQty(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, r.consolidatedLineItemIDs, TRUE) allocatedQty,                  \n" +
                "						fun_getKitAllocatedUnits(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, r.consolidatedLineItemIDs, TRUE) allocatedUnit,                  \n" +
                "						fun_getKitAllocatedPin(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, r.consolidatedLineItemIDs, rl.numOfPosition, TRUE) allocatedPins,                  \n" +
                "						fun_getKitScrapedPin(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, r.consolidatedLineItemIDs, rl.numOfPosition, TRUE) scrapedPins,                  \n" +
                "						fun_getShortagePerBuild(IFNULL(r.qpa,0), ',pMRPQty,',0,',pRefSalesOrderDetID,',r.consolidatedLineItemIDs) shortagePerBuild,                  \n" +
                "						r.consolidatedpartlineID,                  \n" +
                "						ra.refRfqLineitem,                  \n" +
                "						fun_getKitConsumeUnits(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, r.consolidatedLineItemIDs, TRUE) consumeUnits,                  \n" +
                "						fun_getKitConsumeQty(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, r.consolidatedLineItemIDs, TRUE) consumeQty,                  \n" +
                "						rl.isPurchase,                  \n" +
                "						ra.refSalesOrderDetID,                  \n" +
                "						IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep,                  \n" +
                "						IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep,                  \n" +
                "						IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,                  \n" +
                "						rl.refMongoTrnsID,                  \n" +
                "						rl.numOfPosition as noOfPosition,              \n" +
                "						r.consolidatedLineItemIDs,              \n" +
                "						fun_getPartTypeNameByID(fun_getKitAllocatedFunctionalType(', pRefSalesOrderDetID ,', ra.refRfqLineitem, com.functionalCategoryID)) partTypeName,                \n" +
                "						fun_getMountingTypeNameByID(fun_getKitAllocatedMountingType(', pRefSalesOrderDetID ,', ra.refRfqLineitem, com.mountingTypeID)) mountingTypeName                \n" +
                "				FROM 		temp_Sproc_GetKitConsolidateData r                  \n" +
                "				LEFT JOIN	kit_allocation_lineitems rl ON rl.refRfqLineitem = r.rfqLineItemsID AND rl.refSalesOrderDetID = ',pRefSalesOrderDetID,'                  \n" +
                "				LEFT JOIN 	kit_allocation_lineitems_alternatepart ra ON ra.refRfqLineitem = rl.refRfqLineitem                  \n" +
                "				LEFT JOIN 	component com ON com.id = ra.mfgPNID AND com.deletedAt IS NULL                  \n" +
                "				LEFT JOIN 	(                  \n" +
                "							SELECT 		ka.partId, refSalesOrderdetId, SUM(ka.allocatedQty) allocatedQty, SUM(ka.allocatedUnit) allocatedUnit                  \n" +
                "							FROM 		kit_allocation ka                  \n" +
                "							WHERE		ka.status = \"A\"                  \n" +
                "							GROUP BY 	partid, RefSalesorderDetId                  \n" +
                "						) As ka on ka.partID IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = ra.refsalesOrderdetid AND refRfqLineitem = rl.refRfqLineitem AND deletedAt IS NULL) AND                  \n" +
                "								ka.refsalesOrderdetid =  ra.refsalesOrderdetid                  \n" +
                "				WHERE 		ra.refSalesOrderDetID = ',pRefSalesOrderDetID,' AND ra.partcategoryID != 3 AND ra.deletedAt IS NULL ',pWhereLineId ,'                  \n" +
                "						AND com.isGoodPart = 1                  \n" +
                "				GROUP BY 	rl.id                  \n" +
                "				ORDER BY 	rl.partID                  \n" +
                "			) As tempData                  \n" +
                "		WHERE', pWhereClause                  \n" +
                "	);                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS ConsolidatedResult;                  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS ConsolidatedResult AS \", @vFromSQLQuery, \" \" , rowNumWhere);                  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                  \n" +
                "	EXECUTE mainQuery;                  \n" +
                "	DEALLOCATE PREPARE mainQuery;                  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");                  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                  \n" +
                "	EXECUTE query1;                  \n" +
                "	DEALLOCATE PREPARE query1;                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM ConsolidatedResult \", pOrderBy);                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                  \n" +
                "	EXECUTE query2;                  \n" +
                "	DEALLOCATE PREPARE query2;                  \n" +
                "  \n" +
                "	SET @SQLStatement3 = (SELECT fun_lastPricingStatus(pRefSalesOrderDetID,0,1));                  \n" +
                "			PREPARE query3 FROM @SQLStatement3;                  \n" +
                "			EXECUTE query3;                  \n" +
                "			DEALLOCATE PREPARE query3;                  \n" +
                "  \n" +
                "	#DROP TEMPORARY TABLE Results_Sproc_RetrivePurchaseConsolidatedList;                  \n" +
                "	DROP TEMPORARY TABLE ConsolidatedResult;                  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrivePurchaseList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePurchaseList`(    \n" +
                "	IN pPageIndex INT(11),    \n" +
                "	IN pRecordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN pPartId INT(11),    \n" +
                "	IN pRefSalesOrderDetailId INT(11),    \n" +
                "	IN pLineId INT(11),    \n" +
                "	IN pPackagingAlias BOOLEAN    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "	DECLARE pAllocatedSharedCount INT(11);    \n" +
                "	DECLARE pKitQty INT(11);    \n" +
                "	DECLARE pWhereLineId VARCHAR(500);    \n" +
                "	IF (pLineId != 0) THEN    \n" +
                "		SET pWhereLineId = CONCAT(\" AND rl.lineID = \",pLineId);    \n" +
                "	ELSE    \n" +
                "		SET pWhereLineId = ' AND 1=1';    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		SET pOrderBy = \" ORDER BY lineID ASC \";    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = ' 1=1' ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "	SELECT totalAssyMrpQty INTO pKitQty FROM kit_allocation_assy_detail WHERE partId = pPartId AND refSalesOrderDetID = pRefSalesOrderDetailId AND deletedAt IS NULL;    \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT('    \n" +
                "		SELECT		id,				qpa,				lineID,				uomID,    \n" +
                "				unitName, 			partID, 			refRfqLineitem, 	refsalesOrderdetid,    \n" +
                "				mfgPNID,			PIDCode,			rohsIcon,			rohsName,    \n" +
                "                parttypeID,partTypeName,    \n" +
                "                mountingtypeID, mountingTypeName,    \n" +
                "				(qpa * IFNULL(',pKitQty,',0)) requiredQtyBuild, requiredPinsBuild,   \n" +
                "                mfgPart,			component,			mfgPN,    \n" +
                "                allocatedQty,		allocatedUnit,      allocatedPins, 	scrapedPins,		allocated_shared,    \n" +
                "                fun_getShortagePerBuild(qpa, ',pKitQty,',',pPartId,',',pRefSalesOrderDetailId,',CAST(refRfqLineitem AS CHAR(255))) shortagePerBuild,    \n" +
                "                fun_getFreeToShareAmongOtherKits(qpa, ',pKitQty,',',pPartId,',',pRefSalesOrderDetailId,',refRfqLineitem) freeToShareAmongOtherKits,    \n" +
                "                allocatedSTKPosition,	availabelStock,    \n" +
                "                numOfPosition,    \n" +
                "                (IFNULL(fun_getShortagePerBuild(qpa, ',pKitQty,',',pPartId,',',pRefSalesOrderDetailId,',refRfqLineitem),0) * IFNULL(numOfPosition,0)) shortagePin,    \n" +
                "                consumeUnits,		consumeQty,				dnpQty,    \n" +
                "				isInstall,			isBuyDNPQty, 			lineCleanStatus,    \n" +
                "				description,		poQty, 					poUnits,    \n" +
                "                poDetails    \n" +
                "		FROM		(    \n" +
                "					SELECT 		rl.id, 			ra.refsalesOrderdetid,    \n" +
                "							(    \n" +
                "								CASE 	WHEN rl.isBuyDNPQty = ''Y'' then    \n" +
                "										IFNULL(rl.qpa,0) + IFNULL(rl.dnpQty,0)    \n" +
                "									ELSE    \n" +
                "										IFNULL(rl.qpa,0)    \n" +
                "									END    \n" +
                "							) AS qpa,    \n" +
                "							IFNULL(rl.dnpQty,0) dnpQty,    \n" +
                "                            rl.lineID,    \n" +
                "                            CONCAT(IFNULL(rl.description,''''), IFNULL(ra.description,'''')) AS description,    \n" +
                "							rl.uomID,		fun_getUnitNameByID(rl.uomID) unitName,    \n" +
                "							rl.partID,		rl.refRfqLineitem,		ra.mfgPNID,		com.PIDCode,    \n" +
                "                            rl.numOfPosition,	rl.isInstall,			rl.isBuyDNPQty,    \n" +
                "							fun_getRoHSIconByID(com.RoHSStatusID) rohsIcon,    \n" +
                "							fun_getRoHSNameByID(com.RoHSStatusID) rohsName,    \n" +
                "							fun_getKitAllocatedFunctionalType(', pRefSalesOrderDetailId ,', ra.refRfqLineitem, com.functionalCategoryID) parttypeID,    \n" +
                "							fun_getKitAllocatedMountingType(', pRefSalesOrderDetailId ,', ra.refRfqLineitem, com.mountingTypeID) mountingTypeID,    \n" +
                "							(rl.qpa * IFNULL(',pKitQty,',0)) requiredQtyBuild,  \n" +
                "							(rl.qpa * IFNULL(',pKitQty,',0) * IFNULL(rl.numOfPosition, 0)) requiredPinsBuild,    \n" +
                "							(GROUP_CONCAT(DISTINCT(com.id))) mfgPart,    \n" +
                "							fun_getKitAllocationPIDsForComponent(ra.refRfqLineitem, ',pRefSalesOrderDetailId,', ',pPackagingAlias,') component,    \n" +
                "							fun_getKitAllocationPIDsForMfgPN(ra.refRfqLineitem, ',pRefSalesOrderDetailId,' , ',pPackagingAlias,') mfgPN,    \n" +
                "							fun_getKitAllocatedQty(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, NULL, FALSE) allocatedQty,    \n" +
                "							fun_getKitAllocatedUnits(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, NULL, FALSE) allocatedUnit,    \n" +
                "							fun_getKitAllocatedPin(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, NULL, rl.numOfPosition, FALSE) allocatedPins,    \n" +
                "							fun_getKitScrapedPin(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, NULL, rl.numOfPosition, FALSE) scrapedPins,    \n" +
                "							fun_getKitConsumeUnits(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, NULL, FALSE) consumeUnits,    \n" +
                "							fun_getKitConsumeQty(',pPartId,',ra.refsalesOrderdetid, rl.refRfqLineitem, NULL, FALSE) consumeQty,    \n" +
                "							(    \n" +
                "								CASE 	WHEN (SELECT COUNT(*) FROM (SELECT * FROM kit_allocation kit_all WHERE kit_all.partId = ra.mfgPNID AND kit_all.status = \"A\" GROUP BY kit_all.refBOMLineID) a) > 1 THEN                \n" +
                "										(SELECT SUM(ka.allocatedQty) FROM kit_allocation ka WHERE ka.partId = ra.mfgPNID AND `status` = \"A\" GROUP BY ka.partId)                \n" +
                "									ELSE 0                \n" +
                "								END                \n" +
                "							) allocated_shared,                \n" +
                "							fun_getAllocatedSTKPosition(',pRefSalesOrderDetailId,', ra.partId, rl.refRfqLineitem) allocatedSTKPosition,                \n" +
                "							fun_getAvilableStockWithPackagingAlias(rl.refRfqLineitem,',pPartId,',',pRefSalesOrderDetailId,') availabelStock,                \n" +
                "							fun_getBOMLineCleanStatus(ra.refRfqLineItemAlternatePartId) lineCleanStatus,                \n" +
                "							fun_getShortagePerBuild(rl.qpa, ',pKitQty,',',pPartId,',',pRefSalesOrderDetailId,',CAST(rl.refRfqLineitem As CHAR(255))) shortagePerBuild,                \n" +
                "							fun_getFreeToShareAmongOtherKits(rl.qpa, ',pKitQty,',',pPartId,',',pRefSalesOrderDetailId,',rl.refRfqLineitem) freeToShareAmongOtherKits,                \n" +
                "							fun_getPurchasedQty(',pPartId,',rl.refRfqLineitem, FALSE) poQty,                \n" +
                "							fun_convertUOM(com.uom,rl.uomID, (fun_getPurchasedUnits(',pPartId,',rl.refRfqLineitem, FALSE) * com.unit)) poUnits,                \n" +
                "							fun_getPurchasedDetails(',pPartId,',rl.refRfqLineitem, FALSE) poDetails,              \n" +
                "							fun_getPartTypeNameByID(fun_getKitAllocatedFunctionalType(', pRefSalesOrderDetailId ,', ra.refRfqLineitem, com.functionalCategoryID)) partTypeName,              \n" +
                "							fun_getMountingTypeNameByID(fun_getKitAllocatedMountingType(', pRefSalesOrderDetailId ,', ra.refRfqLineitem, com.mountingTypeID)) mountingTypeName              \n" +
                "  \n" +
                "					FROM		kit_allocation_lineitems_alternatepart ra                \n" +
                "					LEFT JOIN 	kit_allocation_lineitems rl ON rl.refRfqLineitem = ra.refRfqLineitem AND rl.refsalesOrderdetid =  ra.refsalesOrderdetid AND rl.partID = ',pPartId,' AND rl.deletedAt IS NULL                \n" +
                "					LEFT JOIN 	component com ON com.id = ra.mfgPNID AND com.deletedAt IS NULL                \n" +
                "					WHERE		ra.deletedAt IS NULL AND ra.refSalesOrderDetID = ',pRefSalesOrderDetailId,' AND com.isGoodPart = 1 AND rl.partID = ',pPartId,'',pWhereLineId ,'                \n" +
                "					GROUP BY 	rl.id                \n" +
                "					ORDER BY 	rl.lineID                \n" +
                "				) As tempData                      \n" +
                "			WHERE', pWhereClause                      \n" +
                "	);                      \n" +
                "	#select @vFromSQLQuery;                \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  rfqLineItemsKitsResult;                  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS rfqLineItemsKitsResult AS \", @vFromSQLQuery);                      \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                      \n" +
                "	EXECUTE mainQuery;                      \n" +
                "	DEALLOCATE PREPARE mainQuery;                      \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from rfqLineItemsKitsResult \");                      \n" +
                "	PREPARE query1 FROM @SQLStatement1;                      \n" +
                "	EXECUTE query1;                      \n" +
                "	DEALLOCATE PREPARE query1;                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM rfqLineItemsKitsResult \", pOrderBy, rowNumWhere);                      \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                      \n" +
                "	EXECUTE query2;                  \n" +
                "	DEALLOCATE PREPARE query2;                  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2681,'2.00','V1','DB changes related to kit allocation, stock allocation, feasibility pop-up - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2681:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllocatedKitForComponent` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllocatedKitForComponent`(                      \n" +
                "	IN pPageIndex INT(11),                      \n" +
                "	IN pRecordPerPage INT(11),                      \n" +
                "	IN pOrderBy VARCHAR(255),                      \n" +
                "	IN pWhereClause VARCHAR(16383),                       \n" +
                "	IN pPartID INT(11),                  \n" +
                "	IN pShowPackagingAlias TINYINT(1)                     \n" +
                ")  \n" +
                "BEGIN                      \n" +
                "	DECLARE pOffset INT(11);                     \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                      \n" +
                "	DECLARE vFromSQLQuery VARCHAR(16383);                      \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);                                  \n" +
                "	ELSE                                  \n" +
                "		SET pOrderBy = \"ORDER BY PIDCode, uid\";                                  \n" +
                "	END IF;                         \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"' OR pWhereClause = '') THEN                                                                          \n" +
                "		SET pWhereClause = ' 1=1';                                    \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                           \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                                          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                          \n" +
                "	ELSE	                                                                          \n" +
                "		SET rowNumWhere = '';                                                                          \n" +
                "	END IF;                         \n" +
                "  \n" +
                "	SET vFromSQLQuery = CONCAT(\"                                  \n" +
                "		SELECT 	id,		refSalesOrderDetID,	salesOrderNumber,	poNumber,                      \n" +
                "			assyID,		nickname,		assyPIDCode,	                  \n" +
                "			kitName,	                      \n" +
                "			lineID,		qpa,			kitQty,			requireUnitsForBuild,                  \n" +
                "			partId,                  \n" +
                "			mfgPart,		                  \n" +
                "			component,                  \n" +
                "			mfgPN,                  \n" +
                "			refUIDId,	uid,			pkgQty,			pkgUnit,		uom,				                      \n" +
                "			allocatedQty,	allocatedUnit,		allocatedUOM,		allocatedUOMID, 	allocatedPins                  \n" +
                "		FROM 	(		                            \n" +
                "				select 	k.id,			k.refSalesOrderDetID,	s.salesOrderNumber,		s.poNumber,                      \n" +
                "					k.assyID,		assy.nickname,		assy.PIDCode assyPIDCode,	                      \n" +
                "					kl.lineID,		kl.qpa,			ka.kitQty,                  \n" +
                "					concat(s.poNumber, ', ', s.salesOrderNumber, ', ', assy.PIDCode) kitName,					                  \n" +
                "					(kl.qpa * ka.kitQty) requireUnitsForBuild,                  \n" +
                "					k.partId,		                  \n" +
                "					-- (select GROUP_CONCAT(DISTINCT(kalt.mfgPNID)) from kit_allocation_lineitems_alternatepart kalt where kalt.partID = k.assyID AND kalt.mfgPNID = \", pPartID, \" AND kalt.refSalesOrderDetID = k.refSalesOrderDetID)  mfgPart,                      \n" +
                "					(select GROUP_CONCAT(DISTINCT(p.mfgPNID))                 \n" +
                "				from 	(	  \n" +
                "						select 	kalt.mfgPNID                \n" +
                "						from 	kit_allocation_lineitems_alternatepart kalt                 \n" +
                "						where 	kalt.partID =  k.assyID                  \n" +
                "						AND  	kalt.refRfqLineitem = k.refBOMLineID                \n" +
                "						union                 \n" +
                "						SELECT 	componentID as mfgPNID   \n" +
                "						FROM 	component_packagingalias WHERE aliasgroupID IN (                                \n" +
                "							SELECT aliasgroupID FROM component_packagingalias                 \n" +
                "							WHERE 	componentID in (  \n" +
                "								select 	kalt.mfgPNID                \n" +
                "								from 	kit_allocation_lineitems_alternatepart kalt                 \n" +
                "								where 	kalt.partID = k.assyID                 \n" +
                "										AND  kalt.refRfqLineitem = k.refBOMLineID  \n" +
                "							)                 \n" +
                "							AND deletedAt IS NULL                                  \n" +
                "						) AND deletedAt IS NULL  \n" +
                "					) as p                \n" +
                "			)  mfgPart,                  \n" +
                "			fun_getKitAllocationPIDsForComponent(kl.refRfqLineitem, k.refSalesOrderDetID, \", pShowPackagingAlias, \") component,                  \n" +
                "			fun_getKitAllocationPIDsForMfgPN(kl.refRfqLineitem, k.refSalesOrderDetID, \", pShowPackagingAlias, \") mfgPN,                   \n" +
                "			k.refUIDId,		csd.uid,		csd.pkgQty,			csd.pkgUnit,	                      \n" +
                "			fun_getUnitNameByID(csd.uom) uom,				                      \n" +
                "			k.allocatedQty,	k.allocatedUnit,		                      \n" +
                "			fun_getUnitNameByID(k.allocatedUOM) allocatedUOM,		                      \n" +
                "			k.allocatedUOM allocatedUOMID,              \n" +
                "			fun_getKitAllocatedPin(k.assyID, k.refSalesOrderDetID, k.refBOMLineID, NULL, kl.numOfPosition, FALSE) allocatedPins              \n" +
                "		from 	kit_allocation k                       \n" +
                "		inner join	kit_allocation_lineitems kl on k.refBOMLineID = kl.refRfqLineitem and k.refSalesOrderDetID = kl.refSalesOrderDetID                  \n" +
                "		inner join	kit_allocation_assy_detail ka on k.assyID = ka.partId and k.refSalesOrderDetID = ka.refSalesOrderDetID                  \n" +
                "		inner join 	salesorderdet sd on k.refSalesOrderDetID = sd.id                      \n" +
                "		inner join 	salesordermst s on sd.refSalesOrderID = s.id                       \n" +
                "		inner join	component assy on k.assyID = assy.id                      \n" +
                "		inner join	component c on k.partId = c.id                      \n" +
                "		inner join	component_sid_stock csd on k.refUIDId = csd.id                      \n" +
                "		where 		k.status = 'A'                      \n" +
                "				AND	(  \n" +
                "					k.partId IN (	  \n" +
                "							SELECT 	componentID                      \n" +
                "							FROM 	component_packagingalias                       \n" +
                "							WHERE 	aliasgroupID IN (	  \n" +
                "									SELECT 	aliasgroupID                       \n" +
                "									FROM 	component_packagingalias                       \n" +
                "									WHERE 	componentID = \",pPartID,\"                     \n" +
                "									AND 	deletedAt is null                    \n" +
                "								      )                    \n" +
                "							AND deletedAt is null                    \n" +
                "						)                     \n" +
                "				OR k.partId = \",pPartID,\"  \n" +
                "			)                    \n" +
                "		 ) As tempUMID  where\", pWhereClause);                       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_GetAllocatedKitForComponent;               \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_GetAllocatedKitForComponent AS \", vFromSQLQuery, \" \" , rowNumWhere);                               \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                                                                        \n" +
                "	EXECUTE mainQuery;                                                                        \n" +
                "	DEALLOCATE PREPARE mainQuery;                       \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", vFromSQLQuery, \") as a\");                                  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                        \n" +
                "	EXECUTE query1;                                                                        \n" +
                "	DEALLOCATE PREPARE query1;                                    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM temp_Sproc_GetAllocatedKitForComponent \", pOrderBy);                                                                        \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                        \n" +
                "	EXECUTE query2;                                                                        \n" +
                "	DEALLOCATE PREPARE query2;                         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;                   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetKitFeasibility` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitFeasibility`(                \n" +
                "	pRefSalesOrderDetID INT(11),                   \n" +
                "	pAssyID INT(11),                \n" +
                "	pIsConsolidated TINYINT(1),                \n" +
                "	pInputQty DECIMAL(18,8)            \n" +
                ")  \n" +
                "BEGIN                \n" +
                "	DECLARE vKitQty DECIMAL(18,8);          \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempMountingTypeWiseKitDet;                \n" +
                "	-- Call Sproc_CalculateKitFeasibility(pRefSalesOrderDetID, pAssyID, pIsConsolidated, pInputQty);                \n" +
                "	SET vKitQty = fun_CalculateKitFeasibility(pRefSalesOrderDetID, pAssyID, pIsConsolidated, pInputQty);            \n" +
                "  \n" +
                "	SELECT 	mountingTypeID, 		      \n" +
                "		mountingType, 	  \n" +
                "		connecterTypeID,  \n" +
                "		connecterType,		      \n" +
                "		feasibilityWithAllocation, 	      \n" +
                "		shortageLine,                 \n" +
                "		feasibilityWithAvailableAndAllocatedStock,		      \n" +
                "		shortageWithAvailableQty, 	      \n" +
                "		shortageForInputQty,                \n" +
                "		releasedQty,			      \n" +
                "		pendingQty,				      \n" +
                "		releasePercentage,      \n" +
                "		totalLine                \n" +
                "	FROM 	tempMountingTypeWiseKitDet;                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetStockAllocateList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockAllocateList`(	                                                                                                \n" +
                "	IN pRefSalesOrderDetID VARCHAR(255),                                                                                                \n" +
                "	IN pAssyId INT,                                                                                                \n" +
                "	IN pPartId VARCHAR(255),                                                                                                \n" +
                "	IN pToUOM INT(11),                                                            \n" +
                "	IN pRfqLineItemIds VARCHAR(255),                                                                                   \n" +
                "	IN pType VARCHAR(255)                          \n" +
                ")  \n" +
                "BEGIN                                                                                                       \n" +
                "	DECLARE v_WhareClause VARCHAR(255);                                                                                                \n" +
                "	DECLARE v_FromSQLQuery VARCHAR(16383);                                                                      \n" +
                "	DECLARE v_AssyId INT;                                            \n" +
                "	SET SESSION group_concat_max_len = 500000;                                                                \n" +
                "  \n" +
                "	IF (pType = 'AvailableStock') THEN                                                            \n" +
                "		SELECT 	*                                                        \n" +
                "		FROM 	(                                                        \n" +
                "				SELECT  	*                                                                                                  \n" +
                "				FROM 		(                                                                                                  \n" +
                "							SELECT 		cst.id, 			  \n" +
                "									cst.uid, 		  \n" +
                "									cst.refcompid,                                                         \n" +
                "									cst.pkgQty, 			  \n" +
                "									cst.costCategoryID, 	  \n" +
                "									cst.lotCode, 	                                                        \n" +
                "									cst.dateCode, 			  \n" +
                "									cst.customerID, 	  \n" +
                "									cst.binID, 	                                                        \n" +
                "									cst.spq, 			  \n" +
                "									cst.salesOrderDetailID, cst.assyID,                                                         \n" +
                "									cst.receiveMaterialType, 	  \n" +
                "									cst.uom, 		  \n" +
                "									cst.packaging,                                                         \n" +
                "									cst.fromBin, 			  \n" +
                "									fun_getBinNameByID(cst.fromBin) fromBinName,                                                        \n" +
                "									cst.fromWarehouse,      	  \n" +
                "									fun_getWarehouseNameByID(cst.fromWarehouse) fromWarehouseName,                                                                                           \n" +
                "									cst.fromDepartment,     	  \n" +
                "									fun_getWarehouseNameByID(cst.fromDepartment) fromDepartmentName,                                                                                  \n" +
                "									cst.pkgUnit, 			  \n" +
                "									c.PIDCode,		  \n" +
                "									cst.nickName,			                                                                                                  \n" +
                "									fun_getMfgCodeAndNameByID(cst.customerID) customer,	  \n" +
                "									ca.PIDCode assembly,                                                                 \n" +
                "									fun_getRoHSNameByID(ca.RoHSStatusID) assyRohsName, 	  \n" +
                "									fun_getRoHSIconByID(ca.RoHSStatusID) assyRohsIcon,                                                                \n" +
                "									fun_getRoHSNameByID(c.RoHSStatusID) rohsName, 		  \n" +
                "									fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,                  \n" +
                "									c.RoHSStatusID	rohsID,		                                                                                                  \n" +
                "									fun_getBinNameByID(cst.binID) binName,			  \n" +
                "									fun_getWarehouseNameByBinID(cst.binID) warehouseName,          \n" +
                "									fun_getWareHouseTypeByBinID(cst.binID) warehouseType,          \n" +
                "									fun_getDepartmentNameByBinID(cst.binID) departmentName,	                                                                                                  \n" +
                "									fun_getUnitNameByID(cst.uom) unitName,			  \n" +
                "									c.mfgPN,	  \n" +
                "									0 pendingUMIDQty,                                                                                                \n" +
                "									fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) convertedUnit,                                                                                                \n" +
                "									fun_getAllocatedKitsNameByID(cst.id, 'A') allocatedToKit,                                                                                                \n" +
                "									IFNULL(ka.allocatedQty, 0) allocatedQty, 		  \n" +
                "									IFNULL(ka.allocatedUnit, 0) allocatedUnit,    \n" +
                "									((FLOOR(IFNULL(c.noOfPosition,0)/fun_getNoPinOfBomByLineId(pRfqLineItemIds)) * fun_getNoPinOfBomByLineId(pRfqLineItemIds)) * IFNULL(ka.allocatedUnit,0)) allocatedPins,                                                          \n" +
                "									(FLOOR(MOD(IFNULL(c.noOfPosition,0), fun_getNoPinOfBomByLineId(pRfqLineItemIds))) * IFNULL(ka.allocatedUnit,0)) scrapedPins,  \n" +
                "									(IFNULL(fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit), 0) - IFNULL(ka.allocatedUnit, 0)) FreeToShare,                                                                                    \n" +
                "									(SELECT id FROM kit_allocation WHERE FIND_IN_SET(refSalesOrderDetID, pRefSalesOrderDetID) AND assyID = pAssyId AND FIND_IN_SET(refBOMLineID, pRfqLineItemIds) AND FIND_IN_SET(refBOMLineID, pRfqLineItemIds) AND refUIDId = cst.id AND `status` = 'A') kitAllocationId,                                          \n" +
                "									c.noOfPosition,                                                                             \n" +
                "									fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,   \n" +
                "									c.isGoodPart,                                                                         \n" +
                "									c.restrictUsePermanently,   \n" +
                "									c.restrictUSEwithpermission,                                                              \n" +
                "									c.restrictPackagingUsePermanently,   \n" +
                "									c.restrictPackagingUseWithpermission,                                                                       \n" +
                "									fun_getKitAllocationBOMRestrict(pAssyId,pRefSalesOrderDetID,cst.refcompid,'RestrictUseInBOMIncludingPermanently') restrictUseInBOM,                                                            \n" +
                "									fun_getKitAllocationBOMRestrict(pAssyId,pRefSalesOrderDetID,cst.refcompid,'RestrictUseInBOMIncludingPermission') restrictUseInBOMWithPermission,                                                \n" +
                "									fun_getKitAllocationBOMRestrict(pAssyId,pRefSalesOrderDetID,cst.refcompid,'RestrictUseInBOMExcludingPermanently') restrictUseInBOMExcluding,                                                            \n" +
                "									fun_getKitAllocationBOMRestrict(pAssyId,pRefSalesOrderDetID,cst.refcompid,'RestrictUseInBOMExcludingPermission') restrictUseInBOMExcludingAliasWithPermission,                            \n" +
                "									fun_getKitAllocationCPNBOMRestrict(pAssyId,pRefSalesOrderDetID,cst.refcompid) restrictUseCPNInBOM,                                               \n" +
                "									cst.isUMIDRestrict,	  \n" +
                "									fun_convertUOM(cst.uom,pToUOM,c.unit) unit,                                          \n" +
                "									fun_getKitAllocationCustomerApproveStatus(pAssyId, pRefSalesOrderDetID, cst.refcompid, pRfqLineItemIds) customerApproveStatus,                              \n" +
                "									fun_getKitAllocationCPNCustomerApproveStatus(pAssyId, pRefSalesOrderDetID, cst.refcompid, pRfqLineItemIds) customerApproveStatusCPN,                              \n" +
                "									fun_getKitAllocationBOMErrorLineWise(pAssyId, pRefSalesOrderDetID, pRfqLineItemIds, 'UOMMISMATCHED') isBOMCleanUOMError,                  \n" +
                "									cst.rohsStatusID UMIDRohsStatusID,fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus                                                \n" +
                "							FROM 		component_sid_stock cst                                                                                    \n" +
                "							LEFT JOIN 	component c ON c.id = cst.refcompid                                                                   \n" +
                "							LEFT JOIN	component ca ON ca.id = cst.assyID                                                                                               \n" +
                "							LEFT JOIN 	(                                                                                                    \n" +
                "										SELECT 		ka.id kitAllocationId,   \n" +
                "												ka.refUIDId,   \n" +
                "												ka.assyID,   \n" +
                "												ka.partId,   \n" +
                "												refSalesOrderdetId,   \n" +
                "												SUM(ka.allocatedQty) allocatedQty,                                               \n" +
                "												SUM(                                              \n" +
                "													(                                              \n" +
                "														CASE                                              \n" +
                "															WHEN (ka.allocatedUOM = pToUOM) THEN                                               \n" +
                "																IFNULL(ka.allocatedUnit, 0)                                               \n" +
                "															ELSE                                               \n" +
                "																IFNULL(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0)), 0)                                              \n" +
                "														END                                              \n" +
                "													)                                              \n" +
                "												) AS allocatedUnit, `status`                                               \n" +
                "										FROM 		kit_allocation ka                                                                                      \n" +
                "										WHERE 		ka.status = 'A'                                                                                               \n" +
                "										GROUP BY 	ka.refUIDId                                                                                                \n" +
                "									) AS ka ON ka.refUIDId = cst.id                                                                                                  \n" +
                "							WHERE 		(cst.refcompid IN (                                                                                                    \n" +
                "												SELECT componentID FROM component_packagingalias WHERE aliasgroupID IN (                                                                                                    \n" +
                "													SELECT aliasgroupID FROM component_packagingalias WHERE FIND_IN_SET(componentID, pPartId) AND deletedAt IS NULL                                                                                                      \n" +
                "												) AND deletedAt IS NULL                                                                                                      \n" +
                "											) OR FIND_IN_SET(cst.refcompid, pPartId))                                                   \n" +
                "											AND cst.deletedAt IS NULL                                                         \n" +
                "						) a                                                                                                  \n" +
                "				WHERE 		FreeToShare > 0                                                                                                \n" +
                "				ORDER BY 	dateCode, costCategory, uid                                                        \n" +
                "		) b                                                        \n" +
                "		UNION                                                        \n" +
                "		SELECT 		*                                                    \n" +
                "		FROM 		(                                                    \n" +
                "					SELECT 		NULL AS id, 			  \n" +
                "							NULL AS uid, 			  \n" +
                "							c.id AS refcompid,                                                         \n" +
                "							NULL AS pkgQty, 		  \n" +
                "							NULL AS costCategoryID, 	  \n" +
                "							NULL AS lotCode, 	                                                        \n" +
                "							NULL AS dateCode, 		  \n" +
                "							NULL AS customerID, 		  \n" +
                "							NULL AS binID, 	                                                        \n" +
                "							NULL AS spq, 			  \n" +
                "							NULL AS salesOrderDetailID, 	  \n" +
                "							NULL AS assyID,                                                         \n" +
                "							NULL AS receiveMaterialType, 	  \n" +
                "							c.uom, 				  \n" +
                "							c.packagingID,                                                         \n" +
                "							vu.BinID AS fromBin, 		  \n" +
                "							b.Name fromBinName,                                                        \n" +
                "							b.WarehouseID fromWarehouse,	  \n" +
                "							w.Name fromWarehouseName,                                                        \n" +
                "							w.parentWHID fromDepartment,	  \n" +
                "							fun_getWarehouseNameByID(w.parentWHID) fromDepartmentName,                                                        \n" +
                "							NULL AS pkgUnit, 			  \n" +
                "							c.PIDCode,		  \n" +
                "							NULL nickName,			                                                                                                  \n" +
                "							NULL AS customer,		  \n" +
                "							NULL AS assembly,                                                                 \n" +
                "							NULL AS assyRohsName, 		  \n" +
                "							NULL AS assyRohsIcon,                                                                \n" +
                "							fun_getRoHSNameByID(c.RoHSStatusID) rohsName, 		  \n" +
                "							fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,                  \n" +
                "							c.RoHSStatusID	rohsID,			                                                                                                  \n" +
                "							NULL AS binName,		  \n" +
                "							NULL AS warehouseName, NULL AS warehouseType,                                                                                                   \n" +
                "							NULL AS departmentName,	                                                                                                  \n" +
                "							fun_getUnitNameByID(c.uom) unitName,	  \n" +
                "							c.mfgPN, 	  \n" +
                "							SUM(vu.BalanceQty) pendingUMIDQty,                                                                                                \n" +
                "							NULL AS convertedUnit,                                                                                                \n" +
                "							NULL AS allocatedToKit,                                                                                                \n" +
                "							0 AS allocatedQty, 		  \n" +
                "							0 AS allocatedUnit, 	  \n" +
                "							0 AS allocatedPins,                                                                                                                \n" +
                "							0 AS scrapedPins,  \n" +
                "							0 AS FreeToShare,                                                                                    \n" +
                "							0 AS kitAllocationId,			  \n" +
                "							c.noOfPosition,                                                                             \n" +
                "							NULL costCategory, 			  \n" +
                "							c.isGoodPart,                                                                         \n" +
                "							c.restrictUsePermanently, 		  \n" +
                "							c.restrictUSEwithpermission,                                                              \n" +
                "							c.restrictPackagingUsePermanently, 	  \n" +
                "							c.restrictPackagingUseWithpermission,                                                                       \n" +
                "							1 AS restrictUseInBOM,                 	  \n" +
                "							0 AS restrictUseInBOMWithPermission,	                            \n" +
                "							1 AS restrictUseInBOMExcluding,		  \n" +
                "							0 AS restrictUseInBOMExcludingAliasWithPermission,                            \n" +
                "							1 AS restrictUseCPNInBOM,                            \n" +
                "							0 AS isUMIDRestrict,                                            \n" +
                "							fun_convertUOM(c.uom,pToUOM,c.unit) unit,                                          \n" +
                "							NULL customerApproveStatus,		  \n" +
                "							NULL customerApproveStatusCPN,                            \n" +
                "							1 isBOMCleanUOMError, NULL UMIDRohsStatusID,             \n" +
                "							NULL UMIDRohsStatus                               \n" +
                "					FROM 		vu_umid_creation_pending vu                                                        \n" +
                "					LEFT JOIN 	component c ON c.id = vu.PartId                                                        \n" +
                "					INNER JOIN 	binmst b ON b.id = vu.BinID AND b.deletedAt IS NULL                                                          \n" +
                "					INNER JOIN 	warehousemst w ON w.ID = b.WarehouseID AND w.deletedAt IS NULL                                                         \n" +
                "					WHERE 		c.id IN (                                                                                                    \n" +
                "								SELECT componentID FROM component_packagingalias WHERE aliasgroupID IN (                                                                                                    \n" +
                "									SELECT aliasgroupID FROM component_packagingalias WHERE FIND_IN_SET(componentID, pPartId) AND deletedAt IS NULL                                                                                                      \n" +
                "								) AND deletedAt IS NULL                                                                                                      \n" +
                "							) OR FIND_IN_SET(c.id, pPartId)                                                     \n" +
                "					GROUP BY 	c.id, vu.BinID                                                    \n" +
                "				) c   \n" +
                "			WHERE pendingUMIDQty > 0;                                                                                               \n" +
                "	ELSEIF (pType = 'AllocatedStock') THEN                                                                                              \n" +
                "		SELECT 		cst.*,	  \n" +
                "				c.PIDCode,                                                                \n" +
                "				fun_getMfgCodeAndNameByID(cst.customerID) customer,	  \n" +
                "				fun_getAssyPIDCodeByID(cst.assyID) assembly,                                                                \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName, 		  \n" +
                "				fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,                  \n" +
                "				c.RoHSStatusID	rohsID,			  			                                                                                                  \n" +
                "				fun_getBinNameByID(cst.binID) binName,			  \n" +
                "				fun_getWarehouseNameByBinID(cst.binID) warehouseName,          \n" +
                "				fun_getWareHouseTypeByBinID(cst.binID) warehouseType,          \n" +
                "				fun_getDepartmentNameByBinID(cst.binID) departmentName,	     \n" +
                "				fun_getDepartmentTypeByBinID(cst.binID) departmentType,                                                                                                 \n" +
                "				fun_getUnitNameByID(cst.uom) unitName,			  \n" +
                "				c.mfgPN,                                                                       \n" +
                "				fun_getUnitNameByID(ka.allocatedUOM) allocatedUOM,                                                                                           \n" +
                "				fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) convertedUnit,       \n" +
                "				fun_getNoPinOfBomByLineId(pRfqLineItemIds) bomPin,                                                                                           \n" +
                "				fun_getAllocatedKitsNameByID(cst.id, 'A') allocatedToKit,                                                                                                \n" +
                "				SUM(ka.allocatedQty) allocatedQty, 		  \n" +
                "				IFNULL(SUM(ka.allocatedUnit), 0) allocatedUnit,   \n" +
                "				((FLOOR(IFNULL(c.noOfPosition,0)/fun_getNoPinOfBomByLineId(pRfqLineItemIds)) * fun_getNoPinOfBomByLineId(pRfqLineItemIds)) * IFNULL(SUM(ka.allocatedUnit), 0)) allocatedPins,  \n" +
                "				(FLOOR(MOD(IFNULL(c.noOfPosition,0), fun_getNoPinOfBomByLineId(pRfqLineItemIds))) * IFNULL(SUM(ka.allocatedUnit), 0)) scrapedPins,  \n" +
                "				c.noOfPosition,  \n" +
                "				(fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) - IFNULL((SELECT SUM(fun_convertUOM(kal.allocatedUOM,pToUOM,IFNULL(kal.allocatedUnit, 0))) FROM kit_allocation kal WHERE kal.`status` = 'A' AND kal.refUIDId = cst.id GROUP BY refUIDId), 0)) AS FreeToShare,                                                                           \n" +
                "				fun_getWarehouseCartByUMIDId(cst.id) warehouseCart,                                                                                    \n" +
                "				(SELECT id FROM kit_allocation WHERE FIND_IN_SET(refSalesOrderDetID, pRefSalesOrderDetID) AND (CASE WHEN pAssyId = 0 THEN assyID = assyID ELSE assyID = pAssyId END) AND FIND_IN_SET(refBOMLineID, pRfqLineItemIds) AND refUIDId = cst.id AND `status` = 'A' LIMIT 1) kitAllocationId,                                          \n" +
                "				fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,                        \n" +
                "				fun_getUMIDTransitStatus(cst.uid) isTransit,                  \n" +
                "				c.isCustom,                \n" +
                "				cst.rohsStatusID UMIDRohsStatusID,                  \n" +
                "				fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,            \n" +
                "				ka.roHSApprovalReason,            \n" +
                "				fun_getUserNameByID(ka.roHSApprovedBy) roHSApprovedBy            \n" +
                "		FROM 		component_sid_stock cst                                                                                                    \n" +
                "		LEFT JOIN 	component c ON c.id = cst.refcompid                                                                    \n" +
                "		LEFT JOIN 	kit_allocation ka ON ka.refUIDId = cst.id                                                                                                     \n" +
                "		WHERE 		FIND_IN_SET(ka.refSalesOrderDetID, pRefSalesOrderDetID)                                                                    \n" +
                "					AND                                                       \n" +
                "					(                                                                      \n" +
                "						CASE WHEN pAssyId = 0 THEN ka.assyID = ka.assyID ELSE ka.assyID = pAssyId END                                                                      \n" +
                "					)                                                                      \n" +
                "					AND                                                       \n" +
                "					(                                                                                      \n" +
                "						FIND_IN_SET(ka.partID, pPartId) OR ka.partID IN (                                                                                      \n" +
                "							SELECT componentID FROM component_packagingalias WHERE aliasgroupID IN (                                                                                                    \n" +
                "								SELECT aliasgroupID FROM component_packagingalias WHERE FIND_IN_SET(componentID, pPartId) AND deletedAt IS NULL                                                                                                      \n" +
                "							) AND deletedAt IS NULL                                                                                      \n" +
                "						)                                                                                      \n" +
                "					)                                                       \n" +
                "					AND FIND_IN_SET(ka.refBOMLineID, pRfqLineItemIds)                                                                                     \n" +
                "					AND ka.`status` = 'A' AND cst.deletedAt IS NULL                                                                                                \n" +
                "		GROUP BY 	uid                                                                                             \n" +
                "		ORDER BY 	cst.dateCode, costCategory, cst.uid;                                                                                                \n" +
                "	ELSEIF (pType = 'ConsumedStock') THEN                                          \n" +
                "		SELECT 		cst.*,	  \n" +
                "				c.PIDCode,                                                                \n" +
                "				fun_getMfgCodeAndNameByID(cst.customerID) customer,	  \n" +
                "				fun_getAssyPIDCodeByID(cst.assyID) assembly,                                                                \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName, 		  \n" +
                "				fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,                  \n" +
                "				c.RoHSStatusID	rohsID,			  			                                                                                                  \n" +
                "				fun_getBinNameByID(cst.binID) binName,			  \n" +
                "				fun_getWarehouseNameByBinID(cst.binID) warehouseName,          \n" +
                "				fun_getWareHouseTypeByBinID(cst.binID) warehouseType,          \n" +
                "				fun_getDepartmentNameByBinID(cst.binID) departmentName,	                                                                                                  \n" +
                "				fun_getUnitNameByID(cst.uom) unitName,			  \n" +
                "				c.mfgPN,                                                                       \n" +
                "				fun_getUnitNameByID(ka.consumeUOM) consumeUOM,                                                                                           \n" +
                "				fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) convertedUnit,                                                                                                \n" +
                "				fun_getAllocatedKitsNameByID(cst.id, NULL) allocatedToKit,                                                                                                \n" +
                "				SUM(ka.consumeQty) consumeQty, 		  \n" +
                "				IFNULL(SUM(ka.consumeUnit), 0) consumeUnit,        \n" +
                "				((FLOOR(IFNULL(c.noOfPosition,0)/fun_getNoPinOfBomByLineId(pRfqLineItemIds)) * fun_getNoPinOfBomByLineId(pRfqLineItemIds)) * IFNULL(SUM(ka.consumeUnit), 0)) consumePins,                                                                                                                                                   \n" +
                "				(FLOOR(MOD(IFNULL(c.noOfPosition,0), fun_getNoPinOfBomByLineId(pRfqLineItemIds))) * IFNULL(SUM(ka.consumeUnit), 0)) scrapedPins,  \n" +
                "				c.noOfPosition,  \n" +
                "				fun_getWarehouseCartByUMIDId(cst.id) warehouseCart,                                               \n" +
                "				fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,                        \n" +
                "				fun_getUMIDTransitStatus(cst.uid) isTransit,                  \n" +
                "				cst.rohsStatusID UMIDRohsStatusID,                  \n" +
                "				fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,            \n" +
                "				ka.roHSApprovalReason,            \n" +
                "				fun_getUserNameByID(ka.roHSApprovedBy) roHSApprovedBy            \n" +
                "		FROM 		component_sid_stock cst                                                                                                    \n" +
                "		LEFT JOIN 	component c ON c.id = cst.refcompid                                                                    \n" +
                "		LEFT JOIN 	kit_allocation ka ON ka.refUIDId = cst.id                                                                                                     \n" +
                "		WHERE 		FIND_IN_SET(ka.refSalesOrderDetID, pRefSalesOrderDetID)                                                                    \n" +
                "				AND                                                       \n" +
                "				(                                                                      \n" +
                "					CASE WHEN pAssyId = 0 THEN ka.assyID = ka.assyID ELSE ka.assyID = pAssyId END                                                                      \n" +
                "				)                                                                      \n" +
                "				AND                                                       \n" +
                "				(                                                                                      \n" +
                "					FIND_IN_SET(ka.partID, pPartId) OR ka.partID IN (                                                                                      \n" +
                "						SELECT componentID FROM component_packagingalias WHERE aliasgroupID IN (                                                                                                    \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE FIND_IN_SET(componentID, pPartId) AND deletedAt IS NULL                                                                                                      \n" +
                "						) AND deletedAt IS NULL                                                                                      \n" +
                "					)                                                                                      \n" +
                "				)                                                       \n" +
                "				AND FIND_IN_SET(ka.refBOMLineID, pRfqLineItemIds)                                                                                     \n" +
                "				AND ka.`status` = 'R' AND cst.deletedAt IS NULL                                                                                                \n" +
                "		GROUP BY 	uid                                                                                             \n" +
                "		ORDER BY 	cst.dateCode, costCategory, cst.uid;                                          \n" +
                "	END IF;                                                                                                  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP VIEW IF EXISTS `vu_kit_feasibility_detail` ;  \n" +
                "CREATE VIEW `vu_kit_feasibility_detail` AS   \n" +
                "SELECT  \n" +
                "  `e`.`refRfqLineitem`         AS `refRfqLineitem`,  \n" +
                "  `e`.`refSalesOrderDetID`     AS `refSalesOrderDetID`,  \n" +
                "  `e`.`assyid`                 AS `assyid`,  \n" +
                "  `e`.`lineID`                 AS `lineID`,  \n" +
                "  `e`.`totalAssyBuildQty`      AS `totalAssyBuildQty`,  \n" +
                "  `e`.`qpawithdnp`             AS `qpawithdnp`,  \n" +
                "  `e`.`kitQty`                 AS `kitQty`,  \n" +
                "  `e`.`reqqty`                 AS `reqqty`,  \n" +
                "  `e`.`requnits`               AS `requnits`,  \n" +
                "  `e`.`allocatedqty`           AS `allocatedqty`,  \n" +
                "  `e`.`allocatedunit`          AS `allocatedunit`,  \n" +
                "  `e`.`allocatedpin`           AS `allocatedpin`,  \n" +
                "  `e`.`shortage`               AS `shortage`,  \n" +
                "  `e`.`availableStock`         AS `availableStock`,  \n" +
                "  (CASE WHEN (ISNULL(`e`.`BOMnumofPosition`) OR (`e`.`BOMnumofPosition` = 0)) THEN (IFNULL(`e`.`allocatedunit`,0) / IFNULL(`e`.`qpawithdnp`,0)) ELSE (`e`.`allocatedPins` / (IFNULL(`e`.`qpawithdnp`,0) * IFNULL(`e`.`BOMnumofPosition`,0))) END) AS `feasibility`,  \n" +
                "  (CASE WHEN (ISNULL(`e`.`BOMnumofPosition`) OR (`e`.`BOMnumofPosition` = 0)) THEN ((IFNULL(`e`.`allocatedunit`,0) + IFNULL(`e`.`availableStock`,0)) / IFNULL(`e`.`qpawithdnp`,0)) ELSE ((`e`.`allocatedPins` + IFNULL(`e`.`availableStockInPin`,0)) / (IFNULL(`e`.`qpawithdnp`,0) * IFNULL(`e`.`BOMnumofPosition`,0))) END) AS `feasibilityWithAvailable`,  \n" +
                "  (CASE WHEN (ISNULL(`e`.`BOMnumofPosition`) OR (`e`.`BOMnumofPosition` = 0)) THEN (CASE WHEN ((((IFNULL(`e`.`allocatedunit`,0) + IFNULL(`e`.`availableStock`,0)) / IFNULL(`e`.`qpawithdnp`,0)) - IFNULL(`e`.`totalAssyBuildQty`,0)) > 0) THEN 0 ELSE (((IFNULL(`e`.`allocatedunit`,0) + IFNULL(`e`.`availableStock`,0)) / IFNULL(`e`.`qpawithdnp`,0)) - IFNULL(`e`.`totalAssyBuildQty`,0)) END) ELSE (CASE WHEN (((`e`.`allocatedPins` + IFNULL(`e`.`availableStockInPin`,0)) / (IFNULL(`e`.`qpawithdnp`,0) * IFNULL(`e`.`BOMnumofPosition`,0))) > 0) THEN 0 ELSE ((`e`.`allocatedPins` + IFNULL(`e`.`availableStockInPin`,0)) / (IFNULL(`e`.`qpawithdnp`,0) * IFNULL(`e`.`BOMnumofPosition`,0))) END) END) AS `shortageForAvailable`,  \n" +
                "  `e`.`mountingTypeID`         AS `mountingTypeID`,  \n" +
                "  `e`.`approvedmountingtypeID` AS `approvedmountingtypeID`,  \n" +
                "  `e`.`connecterTypeID`        AS `connecterTypeID`,  \n" +
                "  `e`.`BOMnumofPosition`       AS `BOMnumofPosition`  \n" +
                "FROM (SELECT  \n" +
                "        `d`.`refRfqLineitem`          AS `refRfqLineitem`,  \n" +
                "        `d`.`refSalesOrderDetID`      AS `refSalesOrderDetID`,  \n" +
                "        `d`.`assyid`                  AS `assyid`,  \n" +
                "        `d`.`lineID`                  AS `lineID`,  \n" +
                "        `d`.`totalAssyBuildQty`       AS `totalAssyBuildQty`,  \n" +
                "        `d`.`kitQty`                  AS `kitQty`,  \n" +
                "        IFNULL((`d`.`totalAssyBuildQty` * IFNULL(`d`.`qpawithdnp`,0)),0) AS `reqqty`,  \n" +
                "        IFNULL((`d`.`totalAssyBuildQty` * IFNULL(`d`.`qpawithdnp`,0)),0) AS `requnits`,  \n" +
                "        `d`.`qpawithdnp`              AS `qpawithdnp`,  \n" +
                "        `d`.`allocatedqty`            AS `allocatedqty`,  \n" +
                "        `d`.`allocatedunit`           AS `allocatedunit`,  \n" +
                "        `d`.`allocatedpin`            AS `allocatedpin`,  \n" +
                "        `FUN_GETSHORTAGEPERBUILD`(  \n" +
                "`d`.`qpawithdnp`,`d`.`kitQty`,`d`.`assyid`,`d`.`refSalesOrderDetID`,`d`.`refRfqLineitem`)  AS `shortage`,  \n" +
                "        `FUN_GETAVILABLESTOCKWITHPACKAGINGALIAS`(  \n" +
                "`d`.`refRfqLineitem`,`d`.`assyid`,`d`.`refSalesOrderDetID`)  AS `availableStock`,  \n" +
                "        `fun_getAvilableStockWithPackagingAliasInPins`(  \n" +
                "CAST(`d`.`refRfqLineitem` AS CHAR(100) CHARSET utf8),`d`.`assyid`,`d`.`refSalesOrderDetID`,`d`.`bomnumofPosition`)  AS `availableStockInPin`,  \n" +
                "        `d`.`mountingTypeID`          AS `mountingTypeID`,  \n" +
                "        `d`.`approvedmountingtypeID`  AS `approvedmountingtypeID`,  \n" +
                "        `d`.`connecterTypeID`         AS `connecterTypeID`,  \n" +
                "        `d`.`bomnumofPosition`        AS `BOMnumofPosition`,  \n" +
                "        `fun_getKitAllocatedPin`(  \n" +
                "`d`.`assyid`,`d`.`refSalesOrderDetID`,`d`.`refRfqLineitem`,NULL,`d`.`bomnumofPosition`,FALSE)  AS `allocatedPins`  \n" +
                "      FROM (SELECT  \n" +
                "              `a`.`refRfqLineitem`           AS `refRfqLineitem`,  \n" +
                "              `a`.`refSalesOrderDetID`       AS `refSalesOrderDetID`,  \n" +
                "              `a`.`assyid`                   AS `assyid`,  \n" +
                "              `a`.`lineID`                   AS `lineID`,  \n" +
                "              `a`.`totalAssyBuildQty`        AS `totalAssyBuildQty`,  \n" +
                "              `a`.`kitQty`                   AS `kitQty`,  \n" +
                "              `a`.`qpawithdnp`               AS `qpawithdnp`,  \n" +
                "              `c`.`allocatedqty`             AS `allocatedqty`,  \n" +
                "              `c`.`allocatedunit`            AS `allocatedunit`,  \n" +
                "              `c`.`allocatedpin`             AS `allocatedpin`,  \n" +
                "              `ka`.`mountingTypeID`          AS `mountingTypeID`,  \n" +
                "              `ka`.`approvedmountingtypeID`  AS `approvedmountingtypeID`,  \n" +
                "              `ka`.`connecterTypeID`         AS `connecterTypeID`,  \n" +
                "              `a`.`bomnumofPosition`         AS `bomnumofPosition`  \n" +
                "            FROM (((SELECT  \n" +
                "                      `b`.`refRfqLineitem`            AS `refRfqLineitem`,  \n" +
                "                      `b`.`refSalesOrderDetID`        AS `refSalesOrderDetID`,  \n" +
                "                      `b`.`partID`                    AS `assyid`,  \n" +
                "                      `b`.`lineID`                    AS `lineID`,  \n" +
                "                      `b`.`numOfPosition`             AS `bomnumofPosition`,  \n" +
                "                      `a`.`totalAssyBuildQty`         AS `totalAssyBuildQty`,  \n" +
                "                      `a`.`kitQty`                    AS `kitQty`,  \n" +
                "                      (CASE WHEN ((`b`.`isPurchase` = 1) OR (`b`.`isInstall` = 1)) THEN (IFNULL(`b`.`qpa`,0) + IF(((`b`.`isBuyDNPQty` = 'Y') OR (`b`.`isBuyDNPQty` = 'C')),IFNULL(`b`.`dnpQty`,0),0)) ELSE IF(((`b`.`isBuyDNPQty` = 'Y') OR (`b`.`isBuyDNPQty` = 'C')),IFNULL(`b`.`dnpQty`,0),0) END) AS `qpawithdnp`  \n" +
                "                    FROM (`kit_allocation_assy_detail` `a`  \n" +
                "                       JOIN `kit_allocation_lineitems` `b`  \n" +
                "                         ON (((`a`.`refSalesOrderDetID` = `b`.`refSalesOrderDetID`)  \n" +
                "                              AND (`a`.`partId` = `b`.`partID`)  \n" +
                "                              AND (`b`.`isDeleted` = 0))))) `a`  \n" +
                "                LEFT JOIN (SELECT  \n" +
                "                             `ka`.`refSalesOrderDetID`       AS `refSalesOrderDetID`,  \n" +
                "                             `ka`.`refRfqLineitem`           AS `refRfqLineitem`,  \n" +
                "                             (CASE WHEN (MAX(`cp`.`mountingTypeID`) = MIN(`cp`.`mountingTypeID`)) THEN MIN(`cp`.`mountingTypeID`) ELSE -(2) END) AS `mountingTypeID`,  \n" +
                "                             MAX((CASE WHEN ((`ka`.`mismatchMountingTypeStep` = 1) AND (`ka`.`approvedMountingType` = 1)) THEN `cp`.`mountingTypeID` ELSE NULL END)) AS `approvedmountingtypeID`,  \n" +
                "                             MIN(`cp`.`connecterTypeID`)     AS `connecterTypeID`,  \n" +
                "                             MIN(`cp`.`noOfRows`)            AS `noOfRows`  \n" +
                "                           FROM (`kit_allocation_lineitems_alternatepart` `ka`  \n" +
                "                              JOIN `component` `cp`  \n" +
                "                                ON ((`ka`.`mfgPNID` = `cp`.`id`)))  \n" +
                "                           GROUP BY `ka`.`refSalesOrderDetID`,`ka`.`refRfqLineitem`) `ka`  \n" +
                "                  ON (((`a`.`refSalesOrderDetID` = `ka`.`refSalesOrderDetID`)  \n" +
                "                       AND (`a`.`refRfqLineitem` = `ka`.`refRfqLineitem`))))  \n" +
                "               LEFT JOIN (SELECT  \n" +
                "                            `ka`.`refSalesOrderDetID`       AS `refsalesorderdetid`,  \n" +
                "                            `ka`.`assyID`                   AS `assyid`,  \n" +
                "                            `ka`.`refBOMLineID`             AS `refbomlineid`,  \n" +
                "                            SUM((CASE WHEN (`ka`.`STATUS` = 'R') THEN `ka`.`consumeQty` WHEN (`ka`.`STATUS` = 'D') THEN 0 ELSE `ka`.`allocatedQty` END)) AS `allocatedqty`,  \n" +
                "                            SUM((CASE WHEN (`ka`.`STATUS` = 'R') THEN `ka`.`consumeUnit` WHEN (`ka`.`STATUS` = 'D') THEN 0 ELSE `ka`.`allocatedUnit` END)) AS `allocatedunit`,  \n" +
                "                            SUM((CASE WHEN (`cp`.`connecterTypeID` = -(2)) THEN (CASE WHEN (`ka`.`STATUS` = 'R') THEN ((IFNULL(`ka`.`consumeUnit`,0) * IFNULL(`cp`.`noOfPosition`,0)) / (CASE WHEN (IFNULL(`cp`.`noOfRows`,0) > 1) THEN `cp`.`noOfRows` ELSE 1 END)) WHEN (`ka`.`STATUS` = 'D') THEN 0 ELSE (IFNULL(`ka`.`allocatedUnit`,0) * IFNULL(`cp`.`noOfPosition`,0)) END) ELSE 0 END)) AS `allocatedpin`  \n" +
                "                          FROM (`kit_allocation` `ka`  \n" +
                "                             JOIN `component` `cp`  \n" +
                "                               ON ((`ka`.`partId` = `cp`.`id`)))  \n" +
                "                          GROUP BY `ka`.`refSalesOrderDetID`,`ka`.`assyID`,`ka`.`refBOMLineID`) `c`  \n" +
                "                 ON (((`a`.`refSalesOrderDetID` = `c`.`refsalesorderdetid`)  \n" +
                "                      AND (`a`.`refRfqLineitem` = `c`.`refbomlineid`)  \n" +
                "                      AND (`a`.`assyid` = `c`.`assyid`))))) `d`) `e`;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2682,'2.00','V1','DB changes related to kit allocation, stock allocation, feasibility pop-up - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2682:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-08-2020 *********************************** */
                "ALTER TABLE `component`   \n" +
                "ADD INDEX `FK_component_activityStartedBY_idx` (`activityStartBy` ASC) VISIBLE;  \n" +
                "ALTER TABLE `component`   \n" +
                "ADD CONSTRAINT `FK_component_activityStartedBY`  \n" +
                "  FOREIGN KEY (`activityStartBy`)  \n" +
                "  REFERENCES `users` (`id`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION;  \n" +
                "ALTER TABLE `equipment`   \n" +
                "ADD COLUMN `calibrationRequired` TINYINT(1) NULL DEFAULT '0';  \n" +
                "CREATE TABLE `calibration_details` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `refEqpID` int(11) NOT NULL,  \n" +
                "  `calibrationType` int(11) NOT NULL,  \n" +
                "  `calibrationDate` date NOT NULL,  \n" +
                "  `calibrationExpirationDate` date NOT NULL,  \n" +
                "  `calibrationComments` varchar(255) DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `createByRoleId` int(11) NOT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updateByRoleId` int(11) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deleteByRoleId` int(11) DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_Equipment_idx` (`refEqpID`),  \n" +
                "  CONSTRAINT `FK_Equipment` FOREIGN KEY (`refEqpID`) REFERENCES `equipment` (`eqpID`)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2683,'2.00','V1','Added field in equipment and FK in part master - Ashish '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2683:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-08-2020 *********************************** */
                "UPDATE `page_detail`   \n" +
                "  SET `iconClass` = 'icons-operating-temperature-conversion1'  \n" +
                "WHERE pageRoute = 'app.operatingtemperatureconversion';  \n" +
                "INSERT INTO `page_detail`(`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `orderBy`, `tabLevel`, `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`)  \n" +
                "VALUES ('Calibration Details', '0', '0', 'setting.equipmentSpecialTools.calibrationdetails ',  \n" +
                "		'app.calibrationdetails', '/calibrationdetails', 'Calibration Details',  \n" +
                "		(select p.pageID from page_detail p where p.menuRoute = 'setting.equipmentSpecialTools'),  \n" +
                "		'0', '36', '1', 'icon-puzzle', '1', '1', '0', '1', 'Calibration Details', '1');  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2684,'2.00','V1','created menu entry for Calibration Details - Ashish '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2684:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-08-2020 *********************************** */
                "drop procedure if exists `Sproc_checkDelete_component`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component`(      \n" +
                "	IN tableName VARCHAR(255),      \n" +
                "	IN IDs LONGTEXT,      \n" +
                "	IN deletedBy INT,      \n" +
                "	IN entityID VARCHAR(255),      \n" +
                "	IN refrenceIDs LONGTEXT,      \n" +
                "	IN countList INT,      \n" +
                "    IN pRoleID INT      \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION      \n" +
                "BEGIN      \n" +
                "	ROLLBACK;      \n" +
                "	RESIGNAL;      \n" +
                "END;      \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING      \n" +
                "BEGIN      \n" +
                "	ROLLBACK;      \n" +
                "	RESIGNAL;      \n" +
                "END;      \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempComponentIds;      \n" +
                "SET @sqlIds = CONCAT(' create temporary table tempComponentIds        \n" +
                "					select GROUP_CONCAT(id) id        \n" +
                "					  from component        \n" +
                "					 where systemGenerated = false      \n" +
                "                       and id in (',IDs,')        \n" +
                "						or refSupplierMfgpnComponentID in (',IDs,') ');        \n" +
                "		PREPARE stmt FROM @sqlIds;        \n" +
                "        EXECUTE stmt;        \n" +
                "  \n" +
                "	SELECT id INTO IDs        \n" +
                "    FROM tempComponentIds;        \n" +
                "    SET @deletedByUser = deletedBy;      \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempComponent;      \n" +
                "	SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as      \n" +
                "				select sum(cnt) cnt, msg, min(componentID) componentID  \n" +
                "                from (      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                        \n" +
                "					UNION ALL                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_alternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                        \n" +
                "					UNION ALL                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_packagingalias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                        \n" +
                "					UNION ALL                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_processmaterial WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                        \n" +
                "					UNION ALL                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_rohsalternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                        \n" +
                "					UNION ALL                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(mfgPNID) componentID FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)                        \n" +
                "					UNION ALL                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_drivetools WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                        \n" +
                "					UNION ALL                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg, min(partID) componentID FROM assemblystock WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                        \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg, min(fromPartID) componentID FROM eco_request WHERE deletedAt IS NULL AND fromPartID IN(',IDs,') LIMIT 1)                        \n" +
                "                    union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg, min(toPartID) componentID FROM eco_request WHERE deletedAt IS NULL AND toPartID IN(',IDs,') LIMIT 1)                        \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(partID) componentID FROM rfq_lineitems_additional_comment WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                        \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assembly_excessstock_location\" else \"\" end as msg, min(partID) componentID FROM workorder_assembly_excessstock_location WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                        \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(refComponentID) componentID FROM component_cust_alias_rev_pn WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                        \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg, min(partID) componentID FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                        \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg, min(partID) componentID FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                        \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(refComponentID) componentID FROM rfq_bom_header_component_configuration WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                        \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg, min(partID) componentID FROM workorder WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                        \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg, min(partID) componentID FROM shippedassembly WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                        \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"kit_allocation\" else \"\" end as msg, min(assyID) componentID FROM kit_allocation WHERE assyID IN(',IDs,') LIMIT 1)                        \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg, min(partID) componentID FROM rfq_assemblies WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                        \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg, min(partID) componentID FROM salesorderdet WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                        \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det\" else \"\" end as msg, min(partID) componentID FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                        \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(custPNID) componentID FROM rfq_lineitems WHERE deletedAt IS NULL AND custPNID IN(',IDs,') LIMIT 1)  \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(partID) componentID FROM rfq_lineitems WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
                "                    union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(distMfgPNID) componentID FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND distMfgPNID IN(',IDs,') LIMIT 1)  \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(mfgPNID) componentID FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)  \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(partID) componentID FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
                "                    union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(assyID) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)  \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(refcompid) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND refcompid IN(',IDs,') LIMIT 1)  \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(RefCPNMFGPNID) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND RefCPNMFGPNID IN(',IDs,') LIMIT 1)  \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(refSupplierPartId) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND refSupplierPartId IN(',IDs,') LIMIT 1)  \n" +
                "					union all                       \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(replacementPartID) componentID FROM component WHERE deletedAt IS NULL AND replacementPartID IN(',IDs,') LIMIT 1)            \n" +
                "					union all            \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg, min(assyId) componentID FROM equipment WHERE deletedAt IS NULL and equipmentAs =''S'' AND assyId IN(',IDs,') LIMIT 1)          \n" +
                "					union all            \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"componenet_inspection_requirement_det\" else \"\" end as msg, min(partId) componentID FROM componenet_inspection_requirement_det WHERE deletedAt IS NULL AND partId IN(',IDs,') LIMIT 1)          \n" +
                "                ) q group by msg');          \n" +
                "  #select @SQL;  \n" +
                "		PREPARE stmt FROM @SQL;          \n" +
                "        EXECUTE stmt;          \n" +
                "        IF (countList=FALSE) THEN          \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempComponent t)=0 THEN          \n" +
                "				START TRANSACTION;          \n" +
                "				SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" , packaginggroupID = null  where id IN(',IDs,') and deletedAt is NULL');          \n" +
                "						PREPARE stmt1 FROM @SQL1;          \n" +
                "						EXECUTE stmt1;          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update part_sub_assy_relationship set  isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where (partID IN(',IDs,') or prPerPartID IN (',IDs,'))and deletedAt is NULL');          \n" +
                "						PREPARE stmt1 FROM @SQL1;          \n" +
                "						EXECUTE stmt1;          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_alternatepn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');          \n" +
                "						PREPARE stmt1 FROM @SQL1;          \n" +
                "						EXECUTE stmt1;          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_processmaterial set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');          \n" +
                "						PREPARE stmt1 FROM @SQL1;          \n" +
                "						EXECUTE stmt1;          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_drivetools set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');          \n" +
                "						PREPARE stmt1 FROM @SQL1;          \n" +
                "						EXECUTE stmt1;          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_cust_alias_rev_pn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refCPNPartID IN(',IDs,') and deletedAt is NULL');          \n" +
                "						PREPARE stmt1 FROM @SQL1;          \n" +
                "						EXECUTE stmt1;          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');          \n" +
                "						PREPARE stmt1 FROM @SQL1;          \n" +
                "						EXECUTE stmt1;          \n" +
                "  \n" +
                "				-- start delete packaging alias          \n" +
                "                SET @SQl1 = CONCAT('update component_packagingalias set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');          \n" +
                "						PREPARE stmt1 FROM @SQL1;          \n" +
                "						EXECUTE stmt1;          \n" +
                "					UPDATE component          \n" +
                "					   SET packaginggroupID = NULL,          \n" +
                "							updatedBy = @deletedByUser,          \n" +
                "							updateByRoleId = pRoleID,          \n" +
                "							updatedAt = fun_DatetimetoUTCDateTime()          \n" +
                "					 WHERE isdeleted = FALSE          \n" +
                "					   AND id IN (SELECT c1.componentID           \n" +
                "							 FROM component_packagingalias c1          \n" +
                "								WHERE c1.isdeleted = FALSE          \n" +
                "								  AND c1.aliasgroupID IN          \n" +
                "										(SELECT c2.aliasgroupID          \n" +
                "										   FROM component_packagingalias c2          \n" +
                "										  WHERE c2.isdeleted = FALSE          \n" +
                "										  GROUP BY c2.aliasgroupID          \n" +
                "										 HAVING COUNT(1)=1));          \n" +
                "  \n" +
                "				UPDATE component_packagingalias a          \n" +
                "                JOIN (SELECT c2.aliasgroupID          \n" +
                "							FROM component_packagingalias c2          \n" +
                "							WHERE c2.isdeleted = FALSE          \n" +
                "							GROUP BY c2.aliasgroupID          \n" +
                "							HAVING COUNT(1)=1) b          \n" +
                "				   SET a.isDeleted = 1,          \n" +
                "						a.deletedBy = @deletedByUser,          \n" +
                "						a.deleteByRoleId = pRoleID,          \n" +
                "						a.deletedAt = fun_DatetimetoUTCDateTime()          \n" +
                "					WHERE a.isdeleted = FALSE          \n" +
                "					AND a.aliasgroupID = b.aliasgroupID;          \n" +
                "				-- end delete packaging alias          \n" +
                "  \n" +
                "                -- start delete RoHS alias          \n" +
                "                SET @SQl1 = CONCAT('update component_rohsalternatepn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');          \n" +
                "						PREPARE stmt1 FROM @SQL1;          \n" +
                "						EXECUTE stmt1;          \n" +
                "  \n" +
                "				UPDATE component          \n" +
                "				 SET rohsgroupID = NULL,          \n" +
                "					updatedBy = @deletedByUser,          \n" +
                "					updateByRoleId = pRoleID,          \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()          \n" +
                "					WHERE isdeleted = FALSE          \n" +
                "					  AND id IN (          \n" +
                "						SELECT c1.componentID          \n" +
                "						 FROM component_rohsalternatepn c1          \n" +
                "						WHERE c1.isdeleted = FALSE          \n" +
                "						  AND c1.aliasgroupID IN          \n" +
                "								(SELECT c2.aliasgroupID          \n" +
                "								   FROM component_rohsalternatepn c2          \n" +
                "									WHERE c2.isdeleted = FALSE          \n" +
                "									GROUP BY c2.aliasgroupID          \n" +
                "									HAVING COUNT(1)=1));          \n" +
                "  \n" +
                "				UPDATE component_rohsalternatepn a          \n" +
                "                JOIN (SELECT c2.aliasgroupID          \n" +
                "							   FROM component_rohsalternatepn c2          \n" +
                "								WHERE c2.isdeleted = FALSE          \n" +
                "								GROUP BY c2.aliasgroupID          \n" +
                "								HAVING COUNT(1)=1) b          \n" +
                "					SET a.isDeleted = 1,          \n" +
                "						a.deletedBy = @deletedByUser,          \n" +
                "						a.deleteByRoleId = pRoleID,          \n" +
                "						a.deletedAt = fun_DatetimetoUTCDateTime()          \n" +
                "					WHERE a.isdeleted = FALSE          \n" +
                "					  AND a.aliasgroupID = b.aliasgroupID;          \n" +
                "                -- start delete RoHS alias          \n" +
                "  \n" +
                "                SET @SQl1 = CONCAT('update component_otherpn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');          \n" +
                "						PREPARE stmt1 FROM @SQL1;          \n" +
                "						EXECUTE stmt1;          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update Component_FunctionalTestingEquipment set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');          \n" +
                "						PREPARE stmt1 FROM @SQL1;          \n" +
                "						EXECUTE stmt1;          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_requirefunctionaltype set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');          \n" +
                "						PREPARE stmt1 FROM @SQL1;          \n" +
                "						EXECUTE stmt1;          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_requiremountingtype set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');          \n" +
                "						PREPARE stmt1 FROM @SQL1;          \n" +
                "						EXECUTE stmt1;          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_standard_details set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');          \n" +
                "						PREPARE stmt1 FROM @SQL1;          \n" +
                "						EXECUTE stmt1;          \n" +
                "  \n" +
                "				SELECT * FROM tempComponent WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";                      \n" +
                "				COMMIT;                      \n" +
                "			ELSE                      \n" +
                "					SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempComponent t;                      \n" +
                "			END IF;                      \n" +
                "		ELSE                      \n" +
                "				SELECT t1.cnt,t2.display_page_name AS msg, componentID, mf.mfgType  \n" +
                "				   FROM tempComponent t1                      \n" +
                "					INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name      \n" +
                "                    left join component co ON co.id = t1.componentID  \n" +
                "					join mfgcodemst mf ON mf.id = co.mfgcodeid  \n" +
                "					WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"                      \n" +
                "					ORDER BY t2.display_page_name;                      \n" +
                "		END IF;                      \n" +
                "		DROP TEMPORARY TABLE tempComponent;                      \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_GetCalibrationDetailsList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCalibrationDetailsList`(      \n" +
                "IN ppageIndex INT(11),      \n" +
                "IN precordPerPage INT(11),      \n" +
                "IN pOrderBy VARCHAR(255),      \n" +
                "IN pWhereClause VARCHAR(16383),  \n" +
                "IN pCurrentCalibrationDetail TINYINT(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_MainQuery =  \n" +
                "    CONCAT(\" select rank() over (partition by refEqpID,calibrationType order by calibrationDate desc) rnk,  \n" +
                "					cd.id,  \n" +
                "					cd.refEqpID,  \n" +
                "                    e.assetName,  \n" +
                "                    e.eqpMake,  \n" +
                "                    e.eqpModel,  \n" +
                "                    e.eqpYear,  \n" +
                "                    e.calibrationRequired,  \n" +
                "                    case when e.calibrationRequired = 1 then  \n" +
                "							'Yes'  \n" +
                "						when  e.calibrationRequired = 0 then  \n" +
                "							'No'  \n" +
                "                    end calibrationRequiredValue,  \n" +
                "					cd.calibrationType,  \n" +
                "                    case when cd.calibrationType = 1 then  \n" +
                "							'Calibration'  \n" +
                "						when  cd.calibrationType = 2 then  \n" +
                "							'Repair'  \n" +
                "                    end calibrationTypeValue,  \n" +
                "					cd.calibrationDate,  \n" +
                "                    cd.calibrationExpirationDate,  \n" +
                "                    cd.calibrationComments,  \n" +
                "					fun_getUserNameByID(cd.createdBy) createdbyValue,  \n" +
                "					fun_getUserNameByID(cd.updatedBy) updatedbyValue,  \n" +
                "					fun_getRoleByID(cd.createByRoleId) createdbyRoleValue,  \n" +
                "					fun_getRoleByID(cd.updateByRoleId) updatedbyRoleValue,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue  \n" +
                "			  from calibration_details cd  \n" +
                "              join equipment e ON e.eqpID = cd.refEqpID  \n" +
                "			 where cd.isDeleted = 0  \n" +
                "               and e.isDeleted = 0  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY assetName ASC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN   \n" +
                "		SET pWhereClause = ' 1=1 ';  \n" +
                "	END IF;      \n" +
                "  \n" +
                "    if (pCurrentCalibrationDetail = true) then  \n" +
                "		SET pWhereClause = concat(pWhereClause, ' and rnk = 1 ');  \n" +
                "    end if;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN      \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;      \n" +
                "	ELSE      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;      \n" +
                "	/* to get total count of rows */      \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_MainQuery,\" ) c where \", pWhereClause);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_MainQuery,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query1 FROM @SQLStatement2;      \n" +
                "	EXECUTE query1;      \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_checkDelete`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(                     \n" +
                "    IN tableName VARCHAR(255),                     \n" +
                "    IN IDs LONGTEXT,                     \n" +
                "    IN deletedBy INT,                     \n" +
                "    IN entityID VARCHAR(255),                     \n" +
                "    IN refrenceIDs LONGTEXT,          \n" +
                "    IN countList INT,                          \n" +
                "    IN pRoleID INT                          \n" +
                ")  \n" +
                "BEGIN                                                      \n" +
                "IF tableName=\"employees\" THEN                     \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;                     \n" +
                "IF tableName=\"eco_type_category\" THEN                     \n" +
                "     CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                 \n" +
                "END IF;                     \n" +
                "IF tableName=\"eco_type_values\" THEN                     \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);               \n" +
                "END IF;                     \n" +
                "IF tableName=\"customers\" THEN                     \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                   \n" +
                "END IF;                     \n" +
                "IF tableName=\"certificate_standards\" THEN                     \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                 \n" +
                "END IF;                     \n" +
                "IF tableName=\"department\" THEN                     \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                     \n" +
                "END IF;                     \n" +
                "IF tableName=\"genericcategory\" THEN                     \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;                     \n" +
                "IF tableName=\"equipment\" THEN                     \n" +
                "    CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;                                             \n" +
                "IF tableName=\"master_templates\" THEN                     \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;                     \n" +
                "IF tableName=\"operations\" THEN                     \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);               \n" +
                "END IF;                     \n" +
                "IF tableName=\"workorder\" THEN                     \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                     \n" +
                "IF tableName=\"roles\" THEN                    \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;                     \n" +
                "IF tableName=\"standard_class\" THEN                     \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;                     \n" +
                "IF tableName=\"dataelement\" THEN                     \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);          \n" +
                "END IF;                     \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN                     \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                \n" +
                "END IF;                     \n" +
                "IF tableName=\"component\" THEN                     \n" +
                "    CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                     \n" +
                "IF tableName=\"workorder_cluster\" THEN                      \n" +
                "    CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);          \n" +
                "END IF;                     \n" +
                "IF tableName=\"workorder_operation\" THEN                    \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);          \n" +
                "END IF;                     \n" +
                "IF tableName=\"workorder_operation_part\" THEN                     \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                 \n" +
                "END IF;                     \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN                     \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                   \n" +
                "END IF;                     \n" +
                "IF tableName=\"workorder_operation_employee\" THEN                     \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                     \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN                     \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                 \n" +
                "END IF;                     \n" +
                "IF tableName=\"entity\" THEN                     \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;                     \n" +
                "IF tableName=\"salesordermst\" THEN                     \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                   \n" +
                "END IF;                     \n" +
                "IF tableName=\"mfgcodemst\" THEN                     \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);               \n" +
                "END IF;                     \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN                     \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);            \n" +
                "END IF;                     \n" +
                "IF tableName=\"shippedassembly\" THEN                     \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;                     \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN                     \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);           \n" +
                "END IF;                     \n" +
                "IF tableName=\"br_label_template\" THEN                     \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);           \n" +
                "END IF;                     \n" +
                "IF tableName=\"measurement_types\" THEN                     \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                   \n" +
                "END IF;                     \n" +
                "IF tableName=\"uoms\" THEN                     \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                     \n" +
                "IF tableName=\"jobtypes\" THEN                     \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                     \n" +
                "IF tableName=\"rfqtype\" THEN                     \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                   \n" +
                "END IF;                     \n" +
                "IF tableName=\"reasonmst\" THEN                     \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;                     \n" +
                "IF tableName=\"component_sid_stock\" THEN           \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                     \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN            \n" +
                "    CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);             \n" +
                "END IF;                     \n" +
                "IF tableName=\"chart_templatemst\" THEN                      \n" +
                "    CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                    \n" +
                "END IF;                     \n" +
                "IF tableName=\"shipping_requestdet\" THEN                     \n" +
                "    CALL Sproc_checkDelete_shipping_requestdet(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                     \n" +
                "IF tableName=\"chart_rawdata_category\" THEN                     \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);               \n" +
                "END IF;                            \n" +
                "IF tableName=\"rfq_lineitems\" THEN                     \n" +
                "      CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                     \n" +
                "IF tableName=\"requirement\" THEN                     \n" +
                "    CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);           \n" +
                "END IF;                     \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN                \n" +
                "    CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                   \n" +
                "END IF;                     \n" +
                "IF tableName=\"customer_addresses\" THEN                     \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                   \n" +
                "END IF;                     \n" +
                "IF tableName=\"rfqforms\" THEN                     \n" +
                "    CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                   \n" +
                "END IF;                     \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN                     \n" +
                "    CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;                     \n" +
                "IF tableName=\"who_bought_who\" THEN                     \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);          \n" +
                "END IF;                     \n" +
                "IF tableName=\"rfq_parttypemst\" THEN                     \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;                     \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN                     \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);          \n" +
                "END IF;                     \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN                     \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;               \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                     \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                   \n" +
                "END IF;                                            \n" +
                "IF tableName=\"cost_category\" THEN                     \n" +
                "    CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                               \n" +
                "END IF;                             \n" +
                "IF tableName=\"chartypemst\" THEN                     \n" +
                "    CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                            \n" +
                "END IF;            \n" +
                "IF tableName=\"countrymst\" THEN            \n" +
                "     CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;          \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN            \n" +
                "     CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;          \n" +
                "IF tableName=\"rfq_assy_typemst\" THEN          \n" +
                "     CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                      \n" +
                "END IF;                                                                    \n" +
                "IF tableName=\"warehousemst\" THEN          \n" +
                "     CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                       \n" +
                "END IF;                                                                 \n" +
                "IF tableName=\"binmst\" THEN          \n" +
                "     CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                      \n" +
                "END IF;                                                             \n" +
                "IF tableName=\"rackmst\" THEN          \n" +
                "     CALL Sproc_checkDelete_rackmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                      \n" +
                "END IF;                \n" +
                "IF tableName=\"component_logicalgroup\" THEN                                                                \n" +
                "     CALL Sproc_checkDelete_component_logical_group(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                      \n" +
                "END IF;                                                             \n" +
                "IF tableName=\"packing_slip_material_receive\" THEN                                                                \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);           \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"packing_slip_material_receive_det\" THEN                                                                \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive_det(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                      \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"packing_slip_track_number\" THEN                                                                \n" +
                "     CALL Sproc_checkDelete_packing_slip_track_number(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                      \n" +
                "END IF;                                                     \n" +
                "IF tableName=\"reserve_stock_request\" THEN                                                    \n" +
                "       	 CALL Sproc_checkDelete_reserve_stock_request(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                    \n" +
                "END IF;               \n" +
                "IF tableName=\"component_packagingmst\" THEN                                                                  \n" +
                "     CALL Sproc_checkDelete_component_packagingmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;             \n" +
                "IF tableName=\"workorder_trans_narrative_history\" THEN                                                                  \n" +
                "     CALL Sproc_checkDelete_workorder_trans_narrative_history(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;                                                 \n" +
                "IF tableName=\"scannermst\" THEN                                                                  \n" +
                "     CALL Sproc_checkDelete_Scanner(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;                                                \n" +
                "IF tableName=\"component_alternatepn_validations\" THEN                                                                 \n" +
                "     CALL Sproc_checkDelete_Alias_Parts_Validation(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);          \n" +
                "END IF;          \n" +
                "IF tableName=\"workorder_operation_equipment_feeder_details\" THEN                      \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment_feeder_details(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                    \n" +
                "END IF;                                        \n" +
                "IF tableName=\"component_price_break_details\" THEN                      \n" +
                "    CALL Sproc_checkDelete_component_price_break_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                    \n" +
                "END IF;                                         \n" +
                "IF tableName=\"department_location\" THEN                      \n" +
                "    CALL Sproc_checkDelete_department_location(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                    \n" +
                "END IF;                                                     \n" +
                "IF tableName=\"purchase_parts_details\" THEN                      \n" +
                "    CALL Sproc_checkDelete_purchase_parts_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                    \n" +
                "END IF;                                                     \n" +
                "IF tableName=\"rfq_rohsmst\" THEN                      \n" +
                "    CALL Sproc_checkDelete_rfq_rohsmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                    \n" +
                "END IF;                                \n" +
                "IF tableName=\"component_partstatusmst\" THEN                      \n" +
                "    CALL Sproc_checkDelete_component_partstatusmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                    \n" +
                "END IF;                                \n" +
                "IF tableName=\"workorder_trans_umid_details\" THEN                      \n" +
                "    CALL Sproc_checkDelete_workorder_trans_umid_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                    \n" +
                "END IF;                         \n" +
                "IF tableName=\"labor_cost_template\" THEN                      \n" +
                "    CALL Sproc_checkDelete_labor_cost_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                    \n" +
                "END IF;                                                        \n" +
                "IF tableName=\"rfq_packagecasetypemst\" THEN                      \n" +
                "    CALL Sproc_checkDelete_rfq_packagecasetypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                      \n" +
                "END IF;                    \n" +
                "IF tableName=\"component_dynamic_attribute\" THEN                      \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                      \n" +
                "END IF;                    \n" +
                "IF tableName=\"component_dynamic_attribute_mapping_part\" THEN                      \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute_mapping_part(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                      \n" +
                "END IF;                  \n" +
                "IF tableName=\"labeltemplatesmst\" THEN                  \n" +
                "    CALL Sproc_checkDelete_labeltemplates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;               \n" +
                "IF tableName=\"reportmaster\" THEN                  \n" +
                "    CALL Sproc_checkDelete_reportMaster(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;                 \n" +
                "IF tableName=\"operating_temperature_conversion_mst\" THEN                  \n" +
                "    CALL Sproc_checkDelete_operating_temperature_conversion_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;           \n" +
                "IF tableName=\"inspection_mst\" THEN                  \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementMst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;                 \n" +
                "IF tableName=\"inspection_template_mst\" THEN                  \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementTemplate(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;       \n" +
                "IF tableName=\"componenet_inspection_requirement_det\" THEN                  \n" +
                "    CALL Sproc_checkDelete_componenet_inspection_requirement_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                \n" +
                "END IF;          \n" +
                "IF tableName=\"supplier_quote_mst\" THEN  \n" +
                "   CALL Sproc_checkDelete_supplier_quote(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"supplier_quote_parts_det\" THEN  \n" +
                "   CALL Sproc_checkDelete_supplier_quote_parts(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"calibration_details\" THEN  \n" +
                "   CALL Sproc_checkDelete_CalibrationDetails(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2685,'2.00','V1','change Sproc_checkDelete_component, Sproc_checkDelete, created Sproc_GetCalibrationDetailsList SP - Ashish '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2685:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-08-2020 *********************************** */
                "drop procedure if exists `Sproc_checkDelete_CalibrationDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_CalibrationDetails`(    \n" +
                "	IN tableName VARCHAR(255),    \n" +
                "	IN IDs LONGTEXT,    \n" +
                "	IN deletedBy INT,    \n" +
                "	IN entityID VARCHAR(255),    \n" +
                "	IN refrenceIDs LONGTEXT,    \n" +
                "	IN countList INT,    \n" +
                "    IN pRoleID INT    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION    \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "    set @deletedByUser = deletedBy;    \n" +
                "    DROP TEMPORARY TABLE if exists tempCalibrationDetails;    \n" +
                "	SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempCalibrationDetails as    \n" +
                "				select sum(cnt) cnt, msg    \n" +
                "                from (  \n" +
                "                    (SELECT 0 cnt ,CASE WHEN 0 > 0 then \"dummy\" else \"\" end as msg)  \n" +
                "                ) q group by msg');        \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "        EXECUTE stmt;  \n" +
                "        IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempCalibrationDetails t) = 0 THEN  \n" +
                "				START TRANSACTION;  \n" +
                "				SET @SQl1 = CONCAT('update calibration_details set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "  \n" +
                "				SELECT * FROM tempCalibrationDetails WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "				COMMIT;  \n" +
                "			ELSE  \n" +
                "					SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempCalibrationDetails t;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "				SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "				   FROM tempCalibrationDetails t1  \n" +
                "					INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "					WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "					ORDER BY t2.display_page_name;  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE tempCalibrationDetails;  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_RetrieveEquipment`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveEquipment`(        \n" +
                "IN ppageIndex INT(11),        \n" +
                "IN precordPerPage INT(11),        \n" +
                "IN pOrderBy VARCHAR(255),        \n" +
                "IN pWhereClause VARCHAR(16383)        \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	DECLARE pOffset INT(11);        \n" +
                "	DECLARE rowNumWhere VARCHAR(255);        \n" +
                "	DECLARE vTextAngularKeyCode VARCHAR(500);        \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();        \n" +
                "	SET @temp_Sproc_RetrieveEquipment = CONCAT(\"        \n" +
                "		SELECT `eqp`.eqpID,`eqp`.assetName,`eqp`.eqpMake,`eqp`.eqpModel,`eqp`.eqpYear,`eqp`.assetNumber,`eqp`.eqpGroupID,        \n" +
                "		`eqp`.equipmentAs,`eqp`.equipmentSetupMethod,`eqp`.placedInServiceDate,`eqp`.outOfServiceDate,`eqp`.isActive,        \n" +
                "		/*CONCAT('(',mfg.mfgCode, ') ',co.mfgPN) mfgPNWithMfgCode,*/        \n" +
                "		co.PIDCode,        \n" +
                "		bin.name binName,         \n" +
                "		wm.Name binWarehouseName,         \n" +
                "		pwm.Name binParentWarehouseName,        \n" +
                "		eqp.serialNumber  ,      \n" +
                "		fun_getTextAngularData(`eqp`.eqpDescription, '\", vTextAngularKeyCode,\"') eqpDescription,                \n" +
                "		fun_getUserNameByID(`eqp`.updatedBy) updatedby,        \n" +
                "		fun_getUserNameByID(`eqp`.createdBy) createdby,        \n" +
                "		fun_getUserNameByID(`eqp`.deletedBy) deletedby,        \n" +
                "		fun_getRoleByID(`eqp`.createByRoleId) createdbyRole,        \n" +
                "		fun_getRoleByID(`eqp`.updateByRoleId) updatedbyRole,        \n" +
                "		fun_getRoleByID(`eqp`.deleteByRoleId) deletedbyRole,        \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(`eqp`.createdAt) createdAt,        \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(`eqp`.UpdatedAt) updatedAt,        \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(`eqp`.deletedAt) deletedAt,        \n" +
                "		warehousemst.Name as warehouseName,        \n" +
                "		(SELECT gencCategoryName FROM genericcategory        \n" +
                "			WHERE deletedAt IS NULL AND gencCategoryID = `eqp`.eqpTypeID) AS `eqpTypeIDConvertedValue` ,        \n" +
                "		(SELECT gencCategoryName FROM genericcategory        \n" +
                "			WHERE deletedAt IS NULL AND gencCategoryID = `eqp`.eqpGroupID) AS `eqpGroupIDConvertedValue` ,        \n" +
                "		(SELECT gencCategoryName FROM genericcategory        \n" +
                "			WHERE deletedAt IS NULL AND gencCategoryID = `eqp`.eqpSubGroupID) AS `eqpSubGroupIDConvertedValue` ,        \n" +
                "		(SELECT gencCategoryName FROM genericcategory        \n" +
                "			WHERE deletedAt IS NULL AND gencCategoryID = `eqp`.eqpOwnershipTypeID) AS `eqpOwnershipTypeIDConvertedValue` ,        \n" +
                "			(SELECT gencCategoryName FROM genericcategory        \n" +
                "			WHERE deletedAt IS NULL AND gencCategoryID = `eqp`.locationTypeID) AS locationName,        \n" +
                "		(CASE WHEN (`eqp`.`equipmentAs` = 'E') THEN 'Equipment'        \n" +
                "				WHEN (`eqp`.`equipmentAs` = 'W') THEN 'Workstation'        \n" +
                "				WHEN (`eqp`.`equipmentAs` = 'S') THEN 'Sample' ELSE '' END) AS `equipmentAsConvertedValue` ,        \n" +
                "		(CASE WHEN (`eqp`.`isActive` = 0) THEN 'Inactive'        \n" +
                "				WHEN (`eqp`.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`,dept.`deptName` AS `department` ,        \n" +
                "		(select gencFileName FROM genericfiles where deletedAt IS NULL AND refTransID = `eqp`.eqpID        \n" +
                "				AND gencFileName like 'profile%' AND entityID = '-3'        \n" +
                "				AND gencFileOwnerType = 'equipment') AS gencFileNameAsProfileImage,        \n" +
                "		case when eqp.calibrationRequired = 1 then  \n" +
                "				'Yes'  \n" +
                "			when  eqp.calibrationRequired = 0 then  \n" +
                "				'No'  \n" +
                "		end calibrationRequiredValue  \n" +
                "		FROM `equipment` AS `eqp`        \n" +
                "		LEFT JOIN department dept ON `dept`.`deptID` = `eqp`.`departmentID`        \n" +
                "		LEFT JOIN warehousemst `warehousemst` ON `warehousemst`.`refEqpID` = `eqp`.`eqpID`        \n" +
                "		left join binmst bin on eqp.binId = bin.id        \n" +
                "		left join warehousemst wm on wm.id = bin.WarehouseID        \n" +
                "		left join warehousemst pwm on pwm.id = wm.parentWHID        \n" +
                "		left join component co ON co.id = eqp.assyId        \n" +
                "		/*left join mfgcodemst mfg on mfg.id = co.mfgcodeID*/        \n" +
                "		WHERE eqp.`deletedAt` IS NULL     \n" +
                "	\");        \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"assetName ASC\") ;        \n" +
                "	ELSE        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "	END IF;        \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
                "		SET pWhereClause = '1=1' ;        \n" +
                "	END IF;        \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN        \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "	ELSE        \n" +
                "		SET rowNumWhere = '';        \n" +
                "	END IF;        \n" +
                "	/* to get total count of rows */        \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveEquipment,\" ) c where 1=1 and \", pWhereClause);        \n" +
                "	PREPARE query2 FROM @SQLStatement2;        \n" +
                "	EXECUTE query2;        \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveEquipment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "	PREPARE query1 FROM @SQLStatement2;        \n" +
                "	EXECUTE query1;        \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_RetrieveSupplierQuote`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuote`(                                                  \n" +
                "	IN ppageIndex INT(11),                                                  \n" +
                "	IN precordPerPage INT(11),                                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                                  \n" +
                "	IN pWhereClause VARCHAR(16383),               \n" +
                "    IN pPartId INT(11),  \n" +
                "    IN pMfgType VARCHAR(255)  \n" +
                ")  \n" +
                "BEGIN                                                  \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"            \n" +
                "			SELECT 						    \n" +
                "				s.id,    \n" +
                "                sqpd.id AS supplierQuotePartDetID,      \n" +
                "				fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		    \n" +
                "                fun_getMfgCodeByID(c.mfgcodeID) mfgCode,    \n" +
                "				s.supplierID,    \n" +
                "                sqpd.partID,    \n" +
                "				c.mfgPN AS mfgPN,    \n" +
                "                c.mfgcodeID,    \n" +
                "				sc.mfgPN AS supplierPN,    \n" +
                "				sqpd.supplierPartID,        \n" +
                "                m.mfgName AS supplier,    \n" +
                "                s.quoteNumber,    \n" +
                "                s.quoteDate,    \n" +
                "                s.reference,    \n" +
                "                s.quoteStatus,    \n" +
                "                (                                \n" +
                "				 CASE  WHEN (s.quoteStatus = 'D') THEN                                 \n" +
                "				   'Draft'                                                                     \n" +
                "				  WHEN (s.quoteStatus = 'P') THEN                                 \n" +
                "				   'Published'                                                                    \n" +
                "				  ELSE                                 \n" +
                "				   ''                                 \n" +
                "				 END                                \n" +
                "				) AS `statusConvertedValue`,       \n" +
                "                (            \n" +
                "				CASE                                           \n" +
                "					WHEN (`sqpd`.`isActive` = 0) THEN 'Inactive'                                                   \n" +
                "					WHEN (`sqpd`.`isActive` = 1) THEN 'Active'                                           \n" +
                "					ELSE ''                                           \n" +
                "					END            \n" +
                "				) AS `isActiveConvertedValueDetail`,    \n" +
                "                sqpd.isActive,    \n" +
                "                c.isCustom,    \n" +
                "				sc.isCustom AS isCustomSupplier,    \n" +
                "				fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,    \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                        \n" +
                "				fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	    \n" +
                "				fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,     \n" +
                "				fun_getPartAttibutesBySupplierQuoteDetailID(sqpd.id) AS attributesList,    \n" +
                "				fun_getPartPricingCountBySupplierQuoteDetailID(sqpd.id) AS pricingCount,    \n" +
                "				fun_getUserNameByID(s.createdBy) createdby,                  \n" +
                "				fun_getUserNameByID(s.updatedBy) updatedby,              								               \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(s.createdAt) createdAt,                  \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(s.UpdatedAt) updatedAt    \n" +
                "			FROM    \n" +
                "				supplier_quote_parts_det sqpd	    \n" +
                "			RIGHT JOIN supplier_quote_mst s ON sqpd.supplierQuoteMstID = s.id      \n" +
                "            LEFT JOIN 	component c ON sqpd.partID = c.id AND c.deletedAt IS NULL                        \n" +
                "			LEFT JOIN	component sc ON sqpd.supplierPartID = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL             \n" +
                "            LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.deletedAt IS NULL        \n" +
                "            WHERE    \n" +
                "				sqpd.deletedAt is NULL AND     \n" +
                "                s.deletedAt IS NULL                    				    \n" +
                "	\");                      \n" +
                "  \n" +
                "	if(pMfgType = 'MFG' ) then  \n" +
                "		set @temp_Sproc_RetrieveSupplierQuote  = concat(@temp_Sproc_RetrieveSupplierQuote, ' AND sqpd.partID = ', pPartId, ' ');  \n" +
                "	else  \n" +
                "		set @temp_Sproc_RetrieveSupplierQuote  = concat(@temp_Sproc_RetrieveSupplierQuote, ' AND sqpd.supplierPartID = ', pPartId, ' ');  \n" +
                "	end if;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;                                                  \n" +
                "	ELSE                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                  \n" +
                "	END IF;	                                                  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                  \n" +
                "		SET pWhereClause = '1=1' ;                                                  \n" +
                "	END IF;	                                                  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                  \n" +
                "	ELSE	                                                  \n" +
                "		SET rowNumWhere = '';                                                  \n" +
                "	END IF;	                                                   \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                               \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuote,\" ) c where 1=1 and \", pWhereClause);                              \n" +
                "	PREPARE query1 FROM @SQLStatement1;                              \n" +
                "	EXECUTE query1;                              \n" +
                "	DEALLOCATE PREPARE query1;                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuote,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query2;                              \n" +
                "	DEALLOCATE PREPARE query2;                           \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2686,'2.00','V1','created Sproc_checkDelete_CalibrationDetails, change Sproc_RetrieveEquipment, Sproc_RetrieveSupplierQuote SP - Ashish '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2686:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "ALTER TABLE dataentrychange_auditlog   \n" +
                "ADD COLUMN valueDataType VARCHAR(30) ;  \n" +
                "  \n" +
                "ALTER TABLE dataentrychange_auditlog   \n" +
                "ADD COLUMN woVersion VARCHAR(255) ;  \n" +
                "  \n" +
                "ALTER TABLE dataentrychange_auditlog   \n" +
                "ADD COLUMN opVersion VARCHAR(255) ;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2687,'2.00','v1','Add Columns to dataentrychange_auditlog for WO History - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;


        case 2687:
            allDbChangesArray.push(
                /* **************************** new script -> 06-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_WorkOrder`;  \n" +
                "CREATE TRIGGER `Trg_AU_WorkOrder` AFTER UPDATE ON `workorder` FOR EACH ROW BEGIN              \n" +
                "	IF IFNULL(OLD.WONUMBER, 0) != IFNULL(NEW.WONUMBER, 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, updateByRoleId , woVersion  ,valueDataType)               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'WONUMBER',              \n" +
                "			CAST(OLD.WONUMBER AS CHAR),CAST(NEW.WONUMBER AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "			NEW.woVersion, 'String');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.PARTID, 0) != IFNULL(NEW.PARTID, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId , woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'PARTID',              \n" +
                "			CAST(OLD.PARTID AS CHAR),CAST(NEW.PARTID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "			NEW.woVersion , 'String');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.EXCESSQTY, 0) != IFNULL(NEW.EXCESSQTY , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby , updateByRoleId,  woVersion  ,valueDataType)               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'EXCESSQTY',              \n" +
                "			CAST(OLD.excessQty AS CHAR),CAST(NEW.excessQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "			NEW.woVersion , 'Number');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.BUILDQTY , 0)!= IFNULL(NEW.BUILDQTY , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId , woVersion  ,valueDataType)               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'BUILDQTY',              \n" +
                "			CAST(OLD.buildQty AS CHAR),CAST(NEW.buildQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy , NEW.updateByRoleId,  \n" +
                "			NEW.woVersion , 'Number');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.STARTTIME, 0) != IFNULL(NEW.STARTTIME, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'STARTTIME',              \n" +
                "			CAST(OLD.startTime AS CHAR),CAST(NEW.startTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "			NEW.woVersion , 'DateTime');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.ENDTIME, 0) != IFNULL(NEW.ENDTIME , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ENDTIME',              \n" +
                "			CAST(OLD.endTime AS CHAR),CAST(NEW.endTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "			NEW.woVersion,'DateTime');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.MASTERTEMPLATEID, 0) != IFNULL(NEW.MASTERTEMPLATEID, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby , updateByRoleId,woVersion  ,valueDataType)               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'MASTERTEMPLATEID',              \n" +
                "			CAST(OLD.MASTERTEMPLATEID AS CHAR),CAST(NEW.MASTERTEMPLATEID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "			NEW.woVersion ,'Id');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.REFRENCEWOID, 0) != IFNULL(NEW.REFRENCEWOID , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'REFRENCEWOID',              \n" +
                "			CAST(OLD.REFRENCEWOID AS CHAR),CAST(NEW.REFRENCEWOID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "			NEW.woVersion , 'String');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.WOVERSION, 0) != IFNULL(NEW.WOVERSION , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'WOVERSION',              \n" +
                "			CAST(OLD.woVersion AS CHAR),CAST(NEW.woVersion AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            NEW.woVersion,'String');              \n" +
                "	END IF;            	             \n" +
                "	IF IFNULL(OLD.ISCLUSTERAPPLIED, 0) != IFNULL(NEW.ISCLUSTERAPPLIED, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISCLUSTERAPPLIED',              \n" +
                "			CAST(OLD.ISCLUSTERAPPLIED AS CHAR),CAST(NEW.ISCLUSTERAPPLIED AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "			NEW.woVersion , 'Boolean');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.ROHSSTATUSID, 0) != IFNULL(NEW.ROHSSTATUSID, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ROHSSTATUSID',              \n" +
                "			CAST(OLD.ROHSSTATUSID AS CHAR),CAST(NEW.ROHSSTATUSID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "			NEW.woVersion , 'String');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.ISNOCLEAN, 0) != IFNULL(NEW.ISNOCLEAN , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISNOCLEAN',              \n" +
                "			CAST(OLD.ISNOCLEAN AS CHAR),CAST(NEW.ISNOCLEAN AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "			NEW.woVersion, 'Boolean');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.ISWATERSOLUBLE, 0) != IFNULL(NEW.ISWATERSOLUBLE, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISWATERSOLUBLE',              \n" +
                "			CAST(OLD.ISWATERSOLUBLE AS CHAR),CAST(NEW.ISWATERSOLUBLE AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "			NEW.woVersion,'Boolean');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.ISOPERATIONTRACKBYSERIALNO, 0) != IFNULL(NEW.ISOPERATIONTRACKBYSERIALNO , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISOPERATIONTRACKBYSERIALNO',              \n" +
                "			CAST(OLD.ISOPERATIONTRACKBYSERIALNO AS CHAR),CAST(NEW.ISOPERATIONTRACKBYSERIALNO AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "			NEW.woVersion,'Boolean');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.WOSUBSTATUS, 0) != IFNULL(NEW.WOSUBSTATUS , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'WOSTATUS',              \n" +
                "			CAST(OLD.WOSUBSTATUS AS CHAR),CAST(NEW.WOSUBSTATUS AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            NEW.woVersion, 'String');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.CUSTOMERID, 0) != IFNULL(NEW.CUSTOMERID, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'CUSTOMER',              \n" +
                "			CAST(OLD.customerID AS CHAR),CAST(NEW.customerID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            NEW.woVersion , 'String');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.ECOREMARK, 0) != IFNULL(NEW.ECOREMARK , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ECOREMARK',              \n" +
                "			CAST(OLD.ECORemark AS CHAR),CAST(NEW.ECORemark AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            NEW.woVersion, 'String');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.FCOREMARK, 0) != IFNULL(NEW.FCOREMARK, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'FCOREMARK',              \n" +
                "			CAST(OLD.FCORemark AS CHAR),CAST(NEW.FCORemark AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            NEW.woVersion, 'String');              \n" +
                "	END IF;              \n" +
                "	#IF IFNULL(OLD.SAMPLEDETAILS , 0)!= IFNULL(NEW.SAMPLEDETAILS , 0) THEN               \n" +
                "	#	INSERT INTO DataEntryChange_auditLog               \n" +
                "	#		( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby , woVersion  ,valueDataType )               \n" +
                "	#	VALUES (\"WORKORDER\",              \n" +
                "	#		CAST(NEW.woID AS CHAR),              \n" +
                "	#		'SAMPLEDETAILS',              \n" +
                "	#		CAST(OLD.sampleDetails AS CHAR),CAST(NEW.sampleDetails AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,  \n" +
                "    #        NEW.woVersion , 'String');              \n" +
                "	#END IF;              \n" +
                "	IF IFNULL(OLD.LOCATIONDETAILS , 0)!= IFNULL(NEW.LOCATIONDETAILS , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'LOCATIONDETAILS',              \n" +
                "			CAST(OLD.locationDetails AS CHAR),CAST(NEW.locationDetails AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            NEW.woVersion ,'String');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.ISDELETED, 0) != IFNULL(NEW.ISDELETED , 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISDELETED',              \n" +
                "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            NEW.woVersion,'Boolean');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.ISSTOPWORKORDER, 0) != IFNULL(NEW.ISSTOPWORKORDER, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISSTOPWORKORDER',              \n" +
                "			CAST(OLD.isStopWorkorder AS CHAR),CAST(NEW.isStopWorkorder AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            NEW.woVersion , 'Boolean');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.ISREVISEDWO, 0) != IFNULL(NEW.ISREVISEDWO, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType)               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISREVISEDWO',              \n" +
                "			CAST(OLD.isRevisedWO AS CHAR),CAST(NEW.isRevisedWO AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            NEW.woVersion ,'Boolean');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.ISOPERATIONSVERIFIED, 0) != IFNULL(NEW.ISOPERATIONSVERIFIED, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion  ,valueDataType)               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISOPERATIONSVERIFIED',              \n" +
                "			CAST(OLD.isOperationsVerified AS CHAR),CAST(NEW.isOperationsVerified AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            NEW.woVersion,'Boolean');              \n" +
                "	END IF;              \n" +
                "	IF IFNULL(OLD.TERMINATEWOID, 0) != IFNULL(NEW.TERMINATEWOID, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'TERMINATEWOID',              \n" +
                "			CAST(OLD.terminateWOID AS CHAR),CAST(NEW.terminateWOID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            NEW.woVersion, 'Boolean');              \n" +
                "	END IF;              \n" +
                "  IF IFNULL(OLD.ISRACKTRACKINGREQUIRED, 0) != IFNULL(NEW.ISRACKTRACKINGREQUIRED, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISRACKTRACKINGREQUIRED',              \n" +
                "			CAST(OLD.ISRACKTRACKINGREQUIRED AS CHAR),CAST(NEW.ISRACKTRACKINGREQUIRED AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "			NEW.woVersion, 'Boolean');              \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.ISSTRICTLYFOLLOWRACKVALIDATION, 0) != IFNULL(NEW.ISSTRICTLYFOLLOWRACKVALIDATION, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISSTRICTLYFOLLOWRACKVALIDATION',              \n" +
                "			CAST(OLD.ISSTRICTLYFOLLOWRACKVALIDATION AS CHAR),CAST(NEW.ISSTRICTLYFOLLOWRACKVALIDATION AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "			NEW.woVersion, 'Boolean');              \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.ISHOTJOB, 0) != IFNULL(NEW.ISHOTJOB, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISHOTJOB',              \n" +
                "			CAST(OLD.ISHOTJOB AS CHAR),CAST(NEW.ISHOTJOB AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "			NEW.woVersion, 'Boolean');              \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF IFNULL(OLD.isIncludeSubAssembly, 0) != IFNULL(NEW.isIncludeSubAssembly, 0)  THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )               \n" +
                "		VALUES (\"WORKORDER\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISINCLUDESUBASSEMBLY',              \n" +
                "			CAST(OLD.isIncludeSubAssembly AS CHAR),CAST(NEW.isIncludeSubAssembly AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "			NEW.woVersion, 'Boolean');              \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** add script version -> 06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2688,'2.00','v1','Trg_AU_Workorder - shweta'," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;



        case 2688:
            allDbChangesArray.push(
                /* **************************** new script -> 06-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AI_WorkOrder_Certification;  \n" +
                "CREATE TRIGGER `Trg_AI_WorkOrder_Certification` AFTER INSERT ON `workorder_certification` FOR EACH ROW BEGIN        \n" +
                "	DECLARE vWoVersion VARCHAR(200);  \n" +
                "	SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w  \n" +
                "    WHERE w.woID = NEW.woID  \n" +
                "    AND ifnull(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "	IF NEW.classIDs IS NOT NULL THEN  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, updatedAt, Updatedby, createdAt, createdBy ,updateByRoleId, woVersion  ,valueDataType)         \n" +
                "		VALUES (\"WORKORDER_CERTIFICATION\",CAST(NEW.woCertificationID AS CHAR),'ADDCLASSIDS',        \n" +
                "			null,CAST(NEW.classIDs AS CHAR),fun_DatetimetoUTCDateTime(),NEW.updatedBy,fun_DatetimetoUTCDateTime(),NEW.createdBy, NEW.updateByRoleId,  \n" +
                "			vWoVersion, 'String');        \n" +
                "    ELSE  \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, updatedAt, Updatedby,createdAt, createdBy ,updateByRoleId, woVersion  ,valueDataType)         \n" +
                "		VALUES (\"WORKORDER_CERTIFICATION\",CAST(NEW.woCertificationID AS CHAR),'STANDARDIDS',        \n" +
                "			null,CAST(NEW.certificateStandardID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.updatedBy,fun_DatetimetoUTCDateTime(),NEW.createdBy, NEW.updateByRoleId,  \n" +
                "			vWoVersion, 'String');   \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** add script version -> 06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2689,'2.00','v1',' Trg_AI_WorkOrder_Certification - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;



        case 2689:
            allDbChangesArray.push(
                /* **************************** new script -> 06-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_WorkOrder_Certification;  \n" +
                "CREATE TRIGGER `Trg_AU_WorkOrder_Certification` AFTER UPDATE ON `workorder_certification` FOR EACH ROW BEGIN        \n" +
                "DECLARE vWoVersion VARCHAR(200);  \n" +
                "	SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w  \n" +
                "    WHERE w.woID = NEW.woID  \n" +
                "    AND ifnull(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.classIDs,0) != IFNULL(NEW.classIDs,0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, updatedAt, Updatedby,createdAt, createdBy ,updateByRoleId , woVersion  ,valueDataType)         \n" +
                "		VALUES (\"WORKORDER_CERTIFICATION\",CAST(NEW.woCertificationID AS CHAR),'UPDATECLASSIDS',        \n" +
                "			CAST(OLD.classIDs AS CHAR),CAST(NEW.classIDs AS CHAR),fun_DatetimetoUTCDateTime(),NEW.updatedBy,fun_DatetimetoUTCDateTime(),NEW.createdBy, NEW.updateByRoleId ,  \n" +
                "            vWoVersion, 'String');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, updatedAt, Updatedby,createdAt, createdBy , updateByRoleId , woVersion  ,valueDataType)         \n" +
                "		VALUES (\"WORKORDER_CERTIFICATION\",CAST(NEW.woCertificationID AS CHAR),'ISSTANDARDDELETED',        \n" +
                "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.updatedBy,fun_DatetimetoUTCDateTime(),NEW.createdBy, NEW.updateByRoleId ,  \n" +
                "            vWoVersion,'Boolean');        \n" +
                "	END IF;        \n" +
                "END;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2690,'2.00','v1','Trg_AU_WorkOrder_Certification - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;


        case 2690:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_WorkOrder_Cluster ;  \n" +
                "CREATE TRIGGER `Trg_AU_WorkOrder_Cluster` AFTER UPDATE ON `workorder_cluster` FOR EACH ROW BEGIN        \n" +
                "	DECLARE vWoVersion VARCHAR(200);  \n" +
                "	SELECT woVersion INTO vWoVersion  \n" +
                "	FROM workorder w  \n" +
                "	WHERE w.woID = NEW.woID  \n" +
                "	AND ifnull(w.isDeleted,0) = 0;  \n" +
                "	IF IFNULL(OLD.clusterName,0) != IFNULL(NEW.clusterName,0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, updatedAt, Updatedby , createdAt, createdBy, updateByRoleId, woVersion ,valueDataType)         \n" +
                "		VALUES (\"WORKORDER_CLUSTER\",CAST(NEW.clusterID AS CHAR),'CLUSTERNAME',        \n" +
                "			CAST(OLD.clusterName AS CHAR),CAST(NEW.clusterName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.updatedBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion , 'String');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.displayOrder,0) != IFNULL(NEW.displayOrder,0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, updatedAt, Updatedby , createdAt, createdBy,updateByRoleId, woVersion ,valueDataType)         \n" +
                "		VALUES (\"WORKORDER_CLUSTER\",CAST(NEW.clusterID AS CHAR),'CLUSTERDISPLAYORDER',        \n" +
                "			CAST(OLD.displayOrder AS CHAR),CAST(NEW.displayOrder AS CHAR),fun_DatetimetoUTCDateTime(),NEW.updatedBy,fun_DatetimetoUTCDateTime(),NEW.createdBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion ,'Number');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, updatedAt, Updatedby , createdAt, createdBy,updateByRoleId, woVersion ,valueDataType)         \n" +
                "		VALUES (\"WORKORDER_CLUSTER\",CAST(NEW.clusterID AS CHAR),'ISCLUSTERDELETED',        \n" +
                "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.updatedBy,fun_DatetimetoUTCDateTime(),NEW.createdBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion ,'Boolean');        \n" +
                "	END IF;     \n" +
                "    IF IFNULL(OLD.isParellelOperation,0) != IFNULL(NEW.isParellelOperation,0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, updatedAt, Updatedby , createdAt, createdBy,updateByRoleId, woVersion ,valueDataType)         \n" +
                "		VALUES (\"WORKORDER_CLUSTER\",CAST(NEW.clusterID AS CHAR),'ISPARELLELOPERATION',        \n" +
                "			CAST(OLD.isParellelOperation AS CHAR),CAST(NEW.isParellelOperation AS CHAR),fun_DatetimetoUTCDateTime(),NEW.updatedBy,fun_DatetimetoUTCDateTime(),NEW.createdBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion ,'Boolean');        \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2691,'2.00','v1','Trg_AU_WorkOrder_Cluster  - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;


        case 2691:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AI_workorder_coowner ;  \n" +
                "CREATE TRIGGER `Trg_AI_workorder_coowner` AFTER INSERT ON `workorder_coowner` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vWoVersion VARCHAR(200);  \n" +
                "	SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w  \n" +
                "    WHERE w.woID = NEW.woID  \n" +
                "    AND ifnull(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "	INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId , woVersion , valueDataType )     \n" +
                "	VALUES (\"WORKORDER_COOWNER\",CAST(NEW.coOwnerID AS CHAR),'WORKORDERCOOWNER',    \n" +
                "			null,CAST(NEW.employeeID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, null ,   \n" +
                "            vWoVersion, 'String');    \n" +
                "END;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2692,'2.00','v1','Trg_AI_workorder_coowner  - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;



        case 2692:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS TRG_AI_workorder_dataelement;  \n" +
                "CREATE TRIGGER `TRG_AI_workorder_dataelement` AFTER INSERT ON `workorder_dataelement` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vWoVersion VARCHAR(200);  \n" +
                "	SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w  \n" +
                "    WHERE w.woID = NEW.woID  \n" +
                "    AND ifnull(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "	INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId , woVersion , valueDataType )     \n" +
                "	VALUES (\"WORKORDER_DATAELEMENT\",CAST(NEW.woDataElementID AS CHAR),'WORKORDERDATAFIELD',    \n" +
                "			null,CAST(NEW.dataElementID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId ,   \n" +
                "            vWoVersion, 'String');    \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2693,'2.00','v1','TRG_AI_workorder_dataelement  - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;

        case 2693:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS TRG_AU_workorder_dataelement;  \n" +
                "CREATE TRIGGER `TRG_AU_workorder_dataelement` AFTER UPDATE ON `workorder_dataelement` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vWoVersion VARCHAR(200);  \n" +
                "	SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w  \n" +
                "    WHERE w.woID = NEW.woID  \n" +
                "    AND ifnull(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.dataElementID, 0) != IFNULL(NEW.dataElementID, 0) THEN    \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId ,  woVersion , valueDataType )     \n" +
                "		VALUES (\"WORKORDER_DATAELEMENT\",CAST(NEW.woDataElementID AS CHAR),'WORKORDERDATAFIELD',    \n" +
                "				CAST(OLD.dataElementID AS CHAR),CAST(NEW.dataElementID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId ,  \n" +
                "				vWoVersion, 'String');    \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isDeleted, 0) != IFNULL(NEW.isDeleted, 0) THEN    \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId ,  woVersion , valueDataType )     \n" +
                "		VALUES (\"WORKORDER_DATAELEMENT\",CAST(NEW.woDataElementID AS CHAR),'WORKORDERDATAFIELDDELETED',    \n" +
                "				CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId , NEW.updateByRoleId ,    \n" +
                "				vWoVersion, 'Boolean');    \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2694,'2.00','v1','TRG_AU_workorder_dataelement  - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;



        case 2694:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_WorkOrder_Operation;  \n" +
                "CREATE TRIGGER `Trg_AU_WorkOrder_Operation` AFTER UPDATE ON `workorder_operation` FOR EACH ROW BEGIN      \n" +
                "  \n" +
                "    DECLARE vWoVersion VARCHAR(200);  \n" +
                "	SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w  \n" +
                "    WHERE w.woID = NEW.woID  \n" +
                "    AND ifnull(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.opName, 0) != IFNULL(NEW.opName, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby , updateByRoleId, woVersion , opVersion  ,  valueDataType )       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPNAME',      \n" +
                "			CAST(OLD.opName AS CHAR),CAST(NEW.opName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion ,'String');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.processTime, 0) != IFNULL(NEW.processTime, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'PROCESSTIME',      \n" +
                "			CAST(OLD.processTime AS CHAR),CAST(NEW.processTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'Date');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.setupTime, 0) != IFNULL(NEW.setupTime, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType  )       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'SETUPTIME',      \n" +
                "			CAST(OLD.setupTime AS CHAR),CAST(NEW.setupTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'Date');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.perPieceTime , 0)!= IFNULL(NEW.perPieceTime, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby , updateByRoleId, woVersion , opVersion  ,  valueDataType )       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'PERPIECETIME',      \n" +
                "			CAST(OLD.perPieceTime AS CHAR),CAST(NEW.perPieceTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'Date');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.qtyControl, 0) != IFNULL(NEW.qtyControl, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'QTYCONTROL',      \n" +
                "			CAST(OLD.qtyControl AS CHAR),CAST(NEW.qtyControl AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,   \n" +
                "            vWoVersion  , NEW.opVersion ,'Boolean');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.cleaningType, 0) != IFNULL(NEW.cleaningType, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType  )       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'CLEANINGTYPE',      \n" +
                "			CAST(OLD.cleaningType AS CHAR),CAST(NEW.cleaningType AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,              \n" +
                "            vWoVersion , NEW.opVersion,'Case');      \n" +
                "	END IF;      \n" +
                "	-- IF IFNULL(OLD.isWatersoluble, 0) != IFNULL(NEW.isWatersoluble , 0) THEN       \n" +
                "	-- 	INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )       \n" +
                "	-- 	VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISWATERSOLUBLE',      \n" +
                "	-- 		CAST(OLD.isWatersoluble AS CHAR),CAST(NEW.isWatersoluble AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);      \n" +
                "	-- END IF;      \n" +
                "	IF IFNULL(OLD.opDescription, 0) != IFNULL(NEW.opDescription , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType  )       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPDESCRIPTION',      \n" +
                "			CAST(OLD.opDescription AS CHAR),CAST(NEW.opDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'TextAngular');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.opWorkingCondition, 0) != IFNULL(NEW.opWorkingCondition, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType )       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPWORKINGCONDITION',      \n" +
                "			CAST(OLD.opWorkingCondition AS CHAR),CAST(NEW.opWorkingCondition AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy ,NEW.updateByRoleId,   \n" +
                "            vWoVersion, NEW.opVersion ,'TextAngular');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.opManagementInstruction, 0) != IFNULL(NEW.opManagementInstruction, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPMANAGEMENTINSTRUCTION',      \n" +
                "			CAST(OLD.opManagementInstruction AS CHAR),CAST(NEW.opManagementInstruction AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'TextAngular');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.opDeferredInstruction, 0) != IFNULL(NEW.opDeferredInstruction, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby ,updateByRoleId,  woVersion , opVersion  ,  valueDataType )       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPDEFERREDINSTRUCTION',      \n" +
                "			CAST(OLD.opDeferredInstruction AS CHAR),CAST(NEW.opDeferredInstruction AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'TextAngular');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.opDoes, 0) != IFNULL(NEW.opDoes, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPDOES',      \n" +
                "			CAST(OLD.opDoes AS CHAR),CAST(NEW.opDoes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,   \n" +
                "            vWoVersion, NEW.opVersion, 'TextAngular');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.opDonts , 0)!= IFNULL(NEW.opDonts , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby ,updateByRoleId,  woVersion , opVersion  ,  valueDataType )       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPDONTS',      \n" +
                "			CAST(OLD.opDonts AS CHAR),CAST(NEW.opDonts AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,   \n" +
                "            vWoVersion, NEW.opVersion,'TextAngular');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.opStatus, 0) != IFNULL(NEW.opStatus , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPSTATUS',      \n" +
                "			CAST(OLD.opStatus AS CHAR),CAST(NEW.opStatus AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'String');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.opOrder , 0)!= IFNULL(NEW.opOrder , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType  )       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPORDER',      \n" +
                "			CAST(OLD.opOrder AS CHAR),CAST(NEW.opOrder AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,   \n" +
                "            vWoVesion , NEW.opVersion , 'Number');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.operationTypeID, 0) != IFNULL(NEW.operationTypeID, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby ,updateByRoleId,  woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPERATIONTYPEID',      \n" +
                "			CAST(OLD.operationTypeID AS CHAR),CAST(NEW.operationTypeID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'String');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.parentOPID, 0) != IFNULL(NEW.parentOPID, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'PARENTOPID',      \n" +
                "			CAST(OLD.parentOPID AS CHAR),CAST(NEW.parentOPID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'String');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.isDeleted , 0)!= IFNULL(NEW.isDeleted , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISOPERATIONDELETED',      \n" +
                "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,   \n" +
                "            vWoVersion,  NEW.opVersion , 'Boolean');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.firstPcsConclusion, 0) != IFNULL(NEW.firstPcsConclusion , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'FIRSTPCSCONCLUSION',      \n" +
                "			CAST(OLD.firstPcsConclusion AS CHAR),CAST(NEW.firstPcsConclusion AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'String');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.firstPcsModel, 0) != IFNULL(NEW.firstPcsModel , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'FIRSTPCSMODEL',      \n" +
                "			CAST(OLD.firstPcsModel AS CHAR),CAST(NEW.firstPcsModel AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion ,'String');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.firstPcsStatus, 0) != IFNULL(NEW.firstPcsStatus, 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'FIRSTPCSSTATUS',      \n" +
                "			CAST(OLD.firstPcsStatus AS CHAR),CAST(NEW.firstPcsStatus AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'String');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.isIssueQty, 0) != IFNULL(NEW.isIssueQty, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISISSUEQTY',      \n" +
                "			CAST(OLD.isIssueQty AS CHAR),CAST(NEW.isIssueQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.isPreProgrammingComponent, 0) != IFNULL(NEW.isPreProgrammingComponent, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISPREPROGRAMMINGCOMPONENT',      \n" +
                "			CAST(OLD.isPreProgrammingComponent AS CHAR),CAST(NEW.isPreProgrammingComponent AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,   \n" +
                "            vWoVersion, NEW.opVersion , 'Boolean');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.isRework, 0) != IFNULL(NEW.isRework, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISREWORK',      \n" +
                "			CAST(OLD.isRework AS CHAR),CAST(NEW.isRework AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.isStopOperation, 0) != IFNULL(NEW.isStopOperation, 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISSTOPOPERATION',      \n" +
                "			CAST(OLD.isStopOperation AS CHAR),CAST(NEW.isStopOperation AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.isTeamOperation , 0) != IFNULL(NEW.isTeamOperation , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISTEAMOPERATION',      \n" +
                "			CAST(OLD.isTeamOperation AS CHAR),CAST(NEW.isTeamOperation AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.isTerminated, 0) != IFNULL(NEW.isTerminated, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISTERMINATED',      \n" +
                "			CAST(OLD.isTerminated AS CHAR),CAST(NEW.isTerminated AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.opVersion, 0) != IFNULL(NEW.opVersion , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy,  updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType )       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPVERSION',      \n" +
                "			CAST(OLD.opVersion AS CHAR),CAST(NEW.opVersion AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'String');      \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.colorCode, 0) != IFNULL(NEW.colorCode , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy,  updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'COLORCODE',      \n" +
                "			CAST(OLD.colorCode AS CHAR),CAST(NEW.colorCode AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion ,'Color');      \n" +
                "	END IF;   \n" +
                "    IF IFNULL(OLD.isMoveToStock , 0) != IFNULL(NEW.isMoveToStock , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISMOVETOSTOCK',      \n" +
                "			CAST(OLD.isMoveToStock AS CHAR),CAST(NEW.isMoveToStock AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');      \n" +
                "	END IF;    \n" +
                "     IF IFNULL(OLD.isPlacementTracking , 0) != IFNULL(NEW.isPlacementTracking , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISPLACEMENTTRACKING',      \n" +
                "			CAST(OLD.isPlacementTracking AS CHAR),CAST(NEW.isPlacementTracking AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');      \n" +
                "	END IF;    \n" +
                "     IF IFNULL(OLD.isTrackBySerialNo , 0) != IFNULL(NEW.isTrackBySerialNo , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISTRACKBYSERIALNO',      \n" +
                "			CAST(OLD.isTrackBySerialNo AS CHAR),CAST(NEW.isTrackBySerialNo AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');      \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.isLoopOperation , 0) != IFNULL(NEW.isLoopOperation , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, woVersion , updateByRoleId, opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISLOOPOPERATION',      \n" +
                "			CAST(OLD.isLoopOperation AS CHAR),CAST(NEW.isLoopOperation AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');      \n" +
                "	END IF;   \n" +
                "    IF IFNULL(OLD.isAllowMissingPartQty , 0) != IFNULL(NEW.isAllowMissingPartQty , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISALLOWMISSINGPARTQTY',      \n" +
                "			CAST(OLD.isAllowMissingPartQty AS CHAR),CAST(NEW.isAllowMissingPartQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');      \n" +
                "	END IF;   \n" +
                "    IF IFNULL(OLD.isAllowByPassQty , 0) != IFNULL(NEW.isAllowByPassQty , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISALLOWBYPASSQTY',      \n" +
                "			CAST(OLD.isAllowByPassQty AS CHAR),CAST(NEW.isAllowByPassQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');      \n" +
                "	END IF;    \n" +
                "     IF IFNULL(OLD.tabLimitAtTraveler , 0) != IFNULL(NEW.tabLimitAtTraveler , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'TABLIMITATTRAVELER',      \n" +
                "			CAST(OLD.tabLimitAtTraveler AS CHAR),CAST(NEW.tabLimitAtTraveler AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'String');      \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.mountingTypeID , 0) != IFNULL(NEW.mountingTypeID , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'MOUNTINGTYPE',      \n" +
                "			CAST(OLD.mountingTypeID AS CHAR),CAST(NEW.mountingTypeID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'String');      \n" +
                "	END IF;   \n" +
                "	IF IFNULL(OLD.opNumber , 0) != IFNULL(NEW.opNumber , 0) THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPNUMBER',      \n" +
                "			CAST(OLD.opNumber AS CHAR),CAST(NEW.opNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,   \n" +
                "            vWoVersion , NEW.opVersion , 'String');      \n" +
                "	END IF;   \n" +
                "END;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2695,'2.00','v1','Trg_AU_WorkOrder_Operation - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;


        case 2695:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP TRIGGER  IF EXISTS TRG_AI_workorder_operation_cluster ;  \n" +
                "CREATE TRIGGER `TRG_AI_workorder_operation_cluster` AFTER INSERT ON `workorder_operation_cluster` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vWoVersion VARCHAR(200);  \n" +
                "    DECLARE vOpVersion VARCHAR(200);  \n" +
                "  \n" +
                "    SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w  \n" +
                "    JOIN workorder_operation woop ON woop.woID= w.woID AND IFNULL(woop.isDeleted,0) = 0   \n" +
                "    WHERE woop.woOpId = NEW.woOPID  \n" +
                "    AND ifnull(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "    SELECT opVersion INTO vOpVersion  \n" +
                "    FROM workorder_operation woop  \n" +
                "    WHERE woop.woOPID = NEW.woOPID   \n" +
                "    AND IFNULL(woop.isDeleted,0) = 0 ;  \n" +
                "  \n" +
                "	INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion , opVersion , valueDataType)     \n" +
                "	VALUES (\"WORKORDER_OPERATION_CLUSTER\",CAST(NEW.woClusterID AS CHAR),'OPERATIONCLUSTERID',    \n" +
                "			null,CAST(NEW.clusterID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , vOpVersion , 'String');  \n" +
                "  \n" +
                "  \n" +
                "END ;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2696,'2.00','v1','TRG_AI_workorder_operation_cluster - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;


        case 2696:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_WorkOrder_Operation_Cluster;  \n" +
                "CREATE TRIGGER `Trg_AU_WorkOrder_Operation_Cluster` AFTER UPDATE ON `workorder_operation_cluster` FOR EACH ROW BEGIN    \n" +
                "	DECLARE vWoVersion VARCHAR(200);  \n" +
                "    DECLARE vOpVersion VARCHAR(200);  \n" +
                "  \n" +
                "    SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w  \n" +
                "    JOIN workorder_operation woop ON woop.woID= w.woID AND IFNULL(woop.isDeleted,0) = 0   \n" +
                "    WHERE woop.woOpId = NEW.woOPID  \n" +
                "    AND ifnull(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "    SELECT opVersion INTO vOpVersion  \n" +
                "    FROM workorder_operation woop  \n" +
                "    WHERE woop.woOPID = NEW.woOPID   \n" +
                "    AND IFNULL(woop.isDeleted,0) = 0 ;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.clusterID, 0) != IFNULL(NEW.clusterID, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion , opVersion , valueDataType)     \n" +
                "		VALUES (\"WORKORDER_OPERATION_CLUSTER\",CAST(NEW.woClusterID AS CHAR),'OPERATIONCLUSTERID',    \n" +
                "			CAST(OLD.clusterID AS CHAR),CAST(NEW.clusterID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , vOpVerison , 'String');    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.displayOrder, 0) != IFNULL(NEW.displayOrder, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion , opVersion , valueDataType)     \n" +
                "		VALUES (\"WORKORDER_OPERATION_CLUSTER\",CAST(NEW.woClusterID AS CHAR),'DISPLAYORDER',    \n" +
                "			CAST(OLD.displayOrder AS CHAR),CAST(NEW.displayOrder AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion ,vOpVersion ,'Number');    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.isDeleted, 0) != IFNULL(NEW.isDeleted, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion , opVersion , valueDataType)     \n" +
                "		VALUES (\"WORKORDER_OPERATION_CLUSTER\",CAST(NEW.woClusterID AS CHAR),'ISOPCLUSTERDELETED',    \n" +
                "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion,vOpVersion , 'Boolean');    \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2697,'2.00','v1','Trg_AU_WorkOrder_Operation_Cluster - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;


        case 2697:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS TRG_AI_workorder_operation_dataelement;  \n" +
                "CREATE TRIGGER `TRG_AI_workorder_operation_dataelement` AFTER INSERT ON `workorder_operation_dataelement` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vWoVersion VARCHAR(200);  \n" +
                "    DECLARE vOpVersion VARCHAR(200);  \n" +
                "  \n" +
                "    SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w      \n" +
                "    WHERE w.woID = NEW.woID  \n" +
                "    AND ifnull(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "    SELECT opVersion INTO vOpVersion  \n" +
                "    FROM workorder_operation woop  \n" +
                "    WHERE woop.woOPID = NEW.woOPID   \n" +
                "    AND IFNULL(woop.isDeleted,0) = 0 ;  \n" +
                "	INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId ,woVersion ,opVersion , valueDataType)     \n" +
                "	VALUES (\"WORKORDER_OPERATION_DATAELEMENT\",CAST(NEW.woOpDataElementID AS CHAR),'OPERATIONDATAFIELD',    \n" +
                "		null,CAST(NEW.dataElementID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "		vWoVersion , vOpVersion ,'Number');       \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2698,'2.00','v1','TRG_AI_workorder_operation_dataelement - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;


        case 2698:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_WorkOrder_Operation_Dataelement;  \n" +
                "CREATE TRIGGER `Trg_AU_WorkOrder_Operation_Dataelement` AFTER UPDATE ON `workorder_operation_dataelement` FOR EACH ROW BEGIN    \n" +
                "	DECLARE vWoVersion VARCHAR(200);  \n" +
                "    DECLARE vOpVersion VARCHAR(200);  \n" +
                "  \n" +
                "    SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w      \n" +
                "    WHERE w.woID = NEW.woID  \n" +
                "    AND ifnull(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "    SELECT opVersion INTO vOpVersion  \n" +
                "    FROM workorder_operation woop  \n" +
                "    WHERE woop.woOPID = NEW.woOPID   \n" +
                "    AND IFNULL(woop.isDeleted,0) = 0 ;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.displayOrder, 0) != IFNULL(NEW.displayOrder, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,woVersion ,opVersion , valueDataType)     \n" +
                "		VALUES (\"WORKORDER_OPERATION_DATAELEMENT\",CAST(NEW.woOpDataElementID AS CHAR),'OPDATAFIELDDISPLAYORDER',    \n" +
                "			CAST(OLD.displayOrder AS CHAR),CAST(NEW.displayOrder AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , vOpVersion ,'Number');    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.isDeleted , 0) != IFNULL(NEW.isDeleted, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId , woVersion ,opVersion , valueDataType)     \n" +
                "		VALUES (\"WORKORDER_OPERATION_DATAELEMENT\",CAST(NEW.woOpDataElementID AS CHAR),'ISOPERATIONDATAFIELDDELETED',    \n" +
                "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,  NEW.updateByRoleId,            \n" +
                "            vWoVersion, vOpVersion ,'Boolean');    \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2699,'2.00','v1',' Trg_AU_WorkOrder_Operation_Dataelement- Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;

        case 2699:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS TRG_AI_workorder_operation_employee;  \n" +
                "CREATE TRIGGER `TRG_AI_workorder_operation_employee` AFTER INSERT ON `workorder_operation_employee` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vWoVersion VARCHAR(200);  \n" +
                "    DECLARE vOpVersion VARCHAR(200);  \n" +
                "  \n" +
                "    SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w  \n" +
                "    WHERE w.woID = NEW.woID  \n" +
                "    AND ifnull(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "    SELECT opVersion INTO vOpVersion  \n" +
                "    FROM workorder_operation woop  \n" +
                "    WHERE woop.woOPID = NEW.woOPID   \n" +
                "    AND IFNULL(woop.isDeleted,0) = 0 ;  \n" +
                "  \n" +
                "	INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion , opVersion, valueDataType)     \n" +
                "	VALUES (\"WORKORDER_OPERATION_EMPLOYEE\",CAST(NEW.woOpEmployeeID AS CHAR),'ADDEDEMPLOYEE',    \n" +
                "			null,CAST(NEW.employeeID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , vOpVersion ,'String');    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2700,'2.00','v1','TRG_AI_workorder_operation_employee - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;



        case 2700:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_WorkOrder_Operation_Employee;  \n" +
                "CREATE TRIGGER `Trg_AU_WorkOrder_Operation_Employee` AFTER UPDATE ON `workorder_operation_employee` FOR EACH ROW BEGIN    \n" +
                "	DECLARE vWoVersion VARCHAR(200);  \n" +
                "    DECLARE vOpVersion VARCHAR(200);  \n" +
                "  \n" +
                "    SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w  \n" +
                "    WHERE w.woID = NEW.woID  \n" +
                "    AND ifnull(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "    SELECT opVersion INTO vOpVersion  \n" +
                "    FROM workorder_operation woop  \n" +
                "    WHERE woop.woOPID = NEW.woOPID   \n" +
                "    AND IFNULL(woop.isDeleted,0) = 0 ;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isDeleted, 0) != IFNULL(NEW.isDeleted, 0) THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId , woVersion , opVersion, valueDataType)     \n" +
                "		VALUES (\"WORKORDER_OPERATION_EMPLOYEE\",CAST(NEW.woOpEmployeeID AS CHAR),'ISEMPLOYEEDELETED',    \n" +
                "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , vOpVersion ,'Boolean');    \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2701,'2.00','v1','Trg_AU_WorkOrder_Operation_Employee - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;


        case 2701:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS TRG_AI_workorder_operation_equipment ;   \n" +
                "CREATE TRIGGER `TRG_AI_workorder_operation_equipment` AFTER INSERT ON `workorder_operation_equipment` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vWoVersion VARCHAR(200);  \n" +
                "    DECLARE vOpVersion VARCHAR(200);  \n" +
                "  \n" +
                "    SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w  \n" +
                "    WHERE w.woID = NEW.woID  \n" +
                "    AND ifnull(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "    SELECT opVersion INTO vOpVersion  \n" +
                "    FROM workorder_operation woop  \n" +
                "    WHERE woop.woOPID = NEW.woOPID   \n" +
                "    AND IFNULL(woop.isDeleted,0) = 0 ;  \n" +
                "  \n" +
                "    INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion, opVersion, valueDataType )     \n" +
                "	VALUES (\"WORKORDER_OPERATION_EQUIPMENT\",CAST(NEW.woOpEqpID AS CHAR),'ADDEDEQUIPMENT',    \n" +
                "			null,CAST(NEW.eqpID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , vOpVersion , 'String');    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2702,'2.00','v1',' - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;


        case 2702:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_WorkOrder_Operation_Equipment;  \n" +
                "CREATE TRIGGER `Trg_AU_WorkOrder_Operation_Equipment` AFTER UPDATE ON `workorder_operation_equipment` FOR EACH ROW BEGIN    \n" +
                "  	DECLARE vWoVersion VARCHAR(200);  \n" +
                "    DECLARE vOpVersion VARCHAR(200);  \n" +
                "  \n" +
                "    SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w  \n" +
                "    WHERE w.woID = NEW.woID  \n" +
                "    AND ifnull(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "    SELECT opVersion INTO vOpVersion  \n" +
                "    FROM workorder_operation woop  \n" +
                "    WHERE woop.woOPID = NEW.woOPID   \n" +
                "    AND IFNULL(woop.isDeleted,0) = 0 ;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted , 0)!= IFNULL(NEW.isDeleted, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion, opVersion, valueDataType )     \n" +
                "		VALUES (\"WORKORDER_OPERATION_EQUIPMENT\",CAST(NEW.woOpEqpID AS CHAR),'ISEQUIPMENTDELETED',    \n" +
                "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "            vWoVersion , vOpVersion , 'Boolean');    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.qty , 0) != IFNULL(NEW.qty, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion, opVersion, valueDataType )     \n" +
                "		VALUES (\"WORKORDER_OPERATION_EQUIPMENT\",CAST(NEW.woOpEqpID AS CHAR),'QTY',    \n" +
                "			CAST(OLD.qty AS CHAR),CAST(NEW.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , vOpVersion , 'Number');    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.isOnline , 0) != IFNULL(NEW.isOnline, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId , woVersion, opVersion, valueDataType )     \n" +
                "		VALUES (\"WORKORDER_OPERATION_EQUIPMENT\",CAST(NEW.woOpEqpID AS CHAR),'ISONLINE',    \n" +
                "			CAST(OLD.isOnline AS CHAR),CAST(NEW.isOnline AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , vOpVersion , 'Boolean');    \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2703,'2.00','v1','Trg_AU_WorkOrder_Operation_Equipment - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;


        case 2703:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_workorder_operation_equipment_feeder_details_Reason;  \n" +
                "CREATE TRIGGER `Trg_AU_workorder_operation_equipment_feeder_details_Reason` AFTER UPDATE ON `workorder_operation_equipment_feeder_details` FOR EACH ROW BEGIN        \n" +
                "	DECLARE vWoVersion VARCHAR(200);  \n" +
                "    DECLARE vOpVersion VARCHAR(200);  \n" +
                "  \n" +
                "    SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w      \n" +
                "    WHERE w.woID = NEW.woID  \n" +
                "    AND ifnull(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "    SELECT opVersion INTO vOpVersion  \n" +
                "    FROM workorder_operation woop  \n" +
                "    WHERE woop.woOPID = NEW.woOPID   \n" +
                "    AND IFNULL(woop.isDeleted,0) = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "	IF (OLD.lineItemSelectReason <> NEW.lineItemSelectReason) THEN      \n" +
                "         INSERT INTO taskconfirmation(confirmationType, reason,refTableName,refID,createdBy,updatedBy,isDeleted)       \n" +
                "         VALUES (\"ReasonChangeRequest\", OLD.lineItemSelectReason,\"workorder_operation_equipment_feeder_details\",NEW.id,OLD.updatedBy,OLD.updatedBy,0);      \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.feederLocation, 0) != IFNULL(NEW.feederLocation, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,woVersion ,opVersion , valueDataType)     \n" +
                "		VALUES (\"WORKORDER_OPERATION_FEEDER\",CAST(NEW.id AS CHAR),'FEEDERLOCATION',    \n" +
                "			CAST(OLD.feederLocation AS CHAR),CAST(NEW.feederLocation AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , vOpVersion ,'Number');    \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.qty, 0) != IFNULL(NEW.qty, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId , woVersion ,opVersion , valueDataType)     \n" +
                "		VALUES (\"WORKORDER_OPERATION_FEEDER\",CAST(NEW.id AS CHAR),'FEEDERQTY',    \n" +
                "			CAST(OLD.qty AS CHAR),CAST(NEW.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , vOpVersion ,'Number');    \n" +
                "	END IF;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2704,'2.00','v1','Trg_AU_workorder_operation_equipment_feeder_details_Reason - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;


        case 2704:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS TRG_AI_workorder_operation_firstpiece ;  \n" +
                "CREATE TRIGGER `TRG_AI_workorder_operation_firstpiece` AFTER INSERT ON `workorder_operation_firstpiece` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vWoVersion VARCHAR(200);  \n" +
                "    DECLARE vOpVersion VARCHAR(200);  \n" +
                "  \n" +
                "    SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w      \n" +
                "    WHERE w.woID = NEW.woID  \n" +
                "    AND ifnull(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "    SELECT opVersion INTO vOpVersion  \n" +
                "    FROM workorder_operation woop  \n" +
                "    WHERE woop.woOPID = NEW.woOPID   \n" +
                "    AND IFNULL(woop.isDeleted,0) = 0 ;  \n" +
                "  \n" +
                "	INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,woVersion ,opVersion , valueDataType)     \n" +
                "	VALUES (\"WORKORDER_OPERATION_FIRSTPIECE\",CAST(NEW.wofirstpieceID AS CHAR),'1STARTICLESERIALNO',    \n" +
                "		null,CAST(NEW.serialno AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "		vWoVersion , vOpVersion ,'Number');    \n" +
                "	INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,woVersion ,opVersion , valueDataType)     \n" +
                "	VALUES (\"WORKORDER_OPERATION_FIRSTPIECE\",CAST(NEW.wofirstpieceID AS CHAR),'1STARTICLEDATECODE',    \n" +
                "		null,CAST(NEW.dateCode AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "		vWoVersion , vOpVersion ,'String');    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2705,'2.00','v1','TRG_AI_workorder_operation_firstpiece - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;


        case 2705:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS TRG_AI_workorder_operation_part ;   \n" +
                "CREATE TRIGGER `TRG_AI_workorder_operation_part` AFTER INSERT ON `workorder_operation_part` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vWoVersion VARCHAR(200);  \n" +
                "    DECLARE vOpVersion VARCHAR(200);  \n" +
                "  \n" +
                "    SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w  \n" +
                "    WHERE w.woID = NEW.woID  \n" +
                "    AND ifnull(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "    SELECT opVersion INTO vOpVersion  \n" +
                "    FROM workorder_operation woop  \n" +
                "    WHERE woop.woOPID = NEW.woOPID   \n" +
                "    AND IFNULL(woop.isDeleted,0) = 0 ;  \n" +
                "  \n" +
                "    INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion ,opVersion , valueDataType)     \n" +
                "	VALUES (\"WORKORDER_OPERATION_PART\",CAST(NEW.woOPPartID AS CHAR),'ADDEDSMT',    \n" +
                "			null,CAST(NEW.partID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion ,vOpVersion , 'String');        \n" +
                "  \n" +
                "END ;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2706,'2.00','v1',' TRG_AI_workorder_operation_part- Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;

        case 2706:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_WorkOrder_Operation_Part;  \n" +
                "CREATE TRIGGER `Trg_AU_WorkOrder_Operation_Part` AFTER UPDATE ON `workorder_operation_part` FOR EACH ROW BEGIN    \n" +
                "	DECLARE vWoVersion VARCHAR(200);  \n" +
                "    DECLARE vOpVersion VARCHAR(200);  \n" +
                "  \n" +
                "    SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w  \n" +
                "    WHERE w.woID = NEW.woID  \n" +
                "    AND ifnull(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "    SELECT opVersion INTO vOpVersion  \n" +
                "    FROM workorder_operation woop  \n" +
                "    WHERE woop.woOPID = NEW.woOPID   \n" +
                "    AND IFNULL(woop.isDeleted,0) = 0 ;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted, 0) != IFNULL(NEW.isDeleted, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId , woVersion ,opVersion , valueDataType)     \n" +
                "		VALUES (\"WORKORDER_OPERATION_PART\",CAST(NEW.woOPPartID AS CHAR),'ISSMTDELETED',    \n" +
                "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion ,vOpVersion , 'Boolean');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "    IF IFNULL(OLD.qpa, 0) != IFNULL(NEW.qpa, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion ,opVersion , valueDataType )     \n" +
                "		VALUES (\"WORKORDER_OPERATION_PART\",CAST(NEW.woOPPartID AS CHAR),'SMTQPA',    \n" +
                "			CAST(OLD.qpa AS CHAR),CAST(NEW.qpa AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion ,vOpVersion, 'Number');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF IFNULL(OLD.actualQpa, 0) != IFNULL(NEW.actualQpa, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,woVersion ,opVersion , valueDataType)     \n" +
                "		VALUES (\"WORKORDER_OPERATION_PART\",CAST(NEW.woOPPartID AS CHAR),'SMTACTUALQPA',    \n" +
                "			CAST(OLD.actualQpa AS CHAR),CAST(NEW.actualQpa AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,  \n" +
                "            vWoVersion , vOpVersion ,'Number');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF IFNULL(OLD.uomID, 0) != IFNULL(NEW.uomID, 0)  THEN     \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion ,opVersion, valueDataType)     \n" +
                "		VALUES (\"WORKORDER_OPERATION_PART\",CAST(NEW.woOPPartID AS CHAR),'SMTUOM',    \n" +
                "			CAST(OLD.uomID AS CHAR),CAST(NEW.uomID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "            vWoVersion , vOpVersion , 'String');    \n" +
                "	END IF;      \n" +
                "END ;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2707,'2.00','v1','Trg_AU_WorkOrder_Operation_Part - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;


        case 2707:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS TRG_AU_workorder_reqrevinvitedemp ;   \n" +
                "CREATE TRIGGER `TRG_AU_workorder_reqrevinvitedemp` AFTER UPDATE ON `workorder_reqrevinvitedemp` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vWoVersion VARCHAR(200);  \n" +
                "	SELECT woVersion INTO vWoVersion  \n" +
                "    FROM workorder w  \n" +
                "    WHERE w.woID = NEW.woID  \n" +
                "    AND ifnull(w.isDeleted,0) = 0;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.timeline, 0) != IFNULL(NEW.timeline, 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby ,updateByRoleId, woVersion  ,valueDataType)               \n" +
                "		VALUES (\"WORKORDER_REQREVEMP\",              \n" +
                "			CAST(NEW.woID AS CHAR),'TIMELINE',              \n" +
                "			CAST(fun_ConvertUTCDatetimeToDataKeyTimeZone(OLD.timeline) AS CHAR),CAST(fun_ConvertUTCDatetimeToDataKeyTimeZone(NEW.timeline) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,  \n" +
                "			vWoVersion, 'Date');              \n" +
                "	END IF;   \n" +
                "  \n" +
                "	IF IFNULL(OLD.isCompulsory, 0) != IFNULL(NEW.isCompulsory, 0) THEN               \n" +
                "		INSERT INTO DataEntryChange_auditLog               \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby ,updateByRoleId, woVersion  ,valueDataType)               \n" +
                "		VALUES (\"WORKORDER_REQREVEMP\",              \n" +
                "			CAST(NEW.woID AS CHAR),              \n" +
                "			'ISCOMPULSORY',              \n" +
                "			CAST(OLD.isCompulsory AS CHAR),CAST(NEW.isCompulsory AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,  \n" +
                "			vWoVersion, 'Case');              \n" +
                "	END IF;   \n" +
                "END;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2708,'2.00','v1',' TRG_AU_workorder_reqrevinvitedemp - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;

        case 2708:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_setWOHistoryColDisplayName`  ;  \n" +
                "CREATE FUNCTION `fun_setWOHistoryColDisplayName`(    \n" +
                " pColName VARCHAR(255)       \n" +
                ") RETURNS varchar(500) CHARSET utf8mb4  \n" +
                "BEGIN    \n" +
                "	DECLARE vName VARCHAR(500);  \n" +
                "	SELECT   \n" +
                "		CASE WHEN pColName = 'ISOPERATIONSVERIFIED' THEN 'Validate Operations'   \n" +
                "			WHEN pColName = 'ISINCLUDESUBASSEMBLY' THEN 'Build Sub Assembly Within Operations'           \n" +
                "			 WHEN pColName = 'ADDEDEMPLOYEE' THEN  'Add Personnel'   \n" +
                "			 WHEN pColName = 'OPSTATUS' THEN 'Operation Status'                \n" +
                "             WHEN pColName = 'OPVERSION' THEN 'Operation Version'     \n" +
                "             WHEN pColName = 'TABLIMITATTRAVELER' THEN  'Access Tab Limit'   \n" +
                "             WHEN pColName = 'MOUNTINGTYPE' THEN  'Mounting Type'   \n" +
                "             WHEN pColName = 'OPNUMBER' THEN  'Operation#'   \n" +
                "             WHEN pColName = 'ADDEDEQUIPMENT' THEN 'Add Equipment'                \n" +
                "             WHEN pColName = 'ISWATERSOLUBLE' THEN 'Water Soluble'   \n" +
                "             WHEN pColName = 'WONUMBER' THEN 'WO#'   \n" +
                "			 WHEN pColName = 'PARTID' THEN 'Assy ID'   \n" +
                "			 WHEN pColName = 'EXCESSQTY' THEN 'Excess Qty'   \n" +
                "             WHEN pColName = 'BUILDQTY' THEN 'Build Qty'   \n" +
                "			 WHEN pColName = 'MASTERTEMPLATEID' THEN 'Master Template'   \n" +
                "			 WHEN pColName = 'REFRENCEWOID' THEN 'Ref. WO#'   \n" +
                "             WHEN pColName = 'WOVERSION' THEN 'WO Version'   \n" +
                "             WHEN pColName = 'ISCLUSTERAPPLIED' THEN 'Cluster Applied'  \n" +
                "			 WHEN pColName = 'ROHSSTATUSID' THEN 'RoHs Status'  \n" +
                "             WHEN pColName = 'ISNOCLEAN' THEN 'No-Clean'  \n" +
                "             WHEN pColName = 'ISWATERSOLUBLE' THEN 'Water-Soluble'  \n" +
                "             WHEN pColName = 'ISOPERATIONTRACKBYSERIALNO' THEN 'Track Serial Numbers'  \n" +
                "             WHEN pColName = 'WOSTATUS' THEN 'WO Status'  \n" +
                "             WHEN pColName = 'CUSTOMER' THEN 'MFR '  \n" +
                "             WHEN pColName = 'ECOREMARK' THEN 'ECO Remark '  \n" +
                "             WHEN pColName = 'FCOREMARK' THEN 'FCO Remark '  \n" +
                "             WHEN pColName = 'LOCATIONDETAILS' THEN 'Location'  \n" +
                "             WHEN pColName = 'ISSTOPWORKORDER' THEN 'Halt Workorder'  \n" +
                "             WHEN pColName = 'ISREVISEDWO' THEN 'Revised WO'  \n" +
                "             WHEN pColName = 'TERMINATEWOID' THEN 'Terminate WO#'  \n" +
                "             WHEN pColName = 'ISRACKTRACKINGREQUIRED' THEN 'Rack Tracking Required'  \n" +
                "             WHEN pColName = 'ISSTRICTLYFOLLOWRACKVALIDATION' THEN 'Strictly Follow  Rack Validation'  \n" +
                "             WHEN pColName = 'ADDCLASSIDS' THEN 'Add Standard'  \n" +
                "             WHEN pColName = 'UPDATECLASSIDS' THEN 'Update Standard'  \n" +
                "             WHEN pColName = 'STANDARDIDS' THEN 'Add Standard'  \n" +
                "             WHEN pColName = 'ISSTANDARDDELETED' THEN 'Remove Standard'  \n" +
                "             WHEN pColName = 'CLUSTERNAME' THEN 'Cluster Name'  \n" +
                "             WHEN pColName = 'CLUSTERDISPLAYORDER' THEN 'Cluster Display Order'  \n" +
                "             WHEN pColName = 'ISCLUSTERDELETED' THEN 'Delete Cluster'  \n" +
                "             WHEN pColName = 'ISPARELLELOPERATION' THEN 'Pareller Cluster'               \n" +
                "             WHEN pColName = 'WORKORDERDATAFIELD' THEN 'WO Data Field'  \n" +
                "             WHEN pColName = 'WORKORDERDATAFIELDDELETED' THEN 'Remove Data Field'  \n" +
                "             WHEN pColName = 'OPERATIONCLUSTERID' THEN 'Add Oepration To Cluster '  \n" +
                "             WHEN pColName = 'DISPLAYORDER' THEN 'Opeation Display Order'  \n" +
                "             WHEN pColName = 'ISOPCLUSTERDELETED' THEN 'Remove Operation From Cluster'  \n" +
                "             WHEN pColName = 'OPERATIONDATAFIELD' THEN 'Add Opeation Data Field'  \n" +
                "             WHEN pColName = 'OPDATAFIELDDISPLAYORDER' THEN 'Operation Data Field Disply Order'  \n" +
                "             WHEN pColName = 'ISOPERATIONDATAFIELDDELETED' THEN 'Remove Operation Data Field'               \n" +
                "             WHEN pColName = 'ISEMPLOYEEDELETED' THEN 'Remove Personnel'  \n" +
                "             WHEN pColName = 'ISEQUIPMENTDELETED' THEN 'Remove Equipment'  \n" +
                "             WHEN pColName = 'QTY' THEN 'Equipment Qty'  \n" +
                "             WHEN pColName = 'ISONLINE' THEN 'Equipment Online'  \n" +
                "             WHEN pColName = 'ISOPERATIONDELETED' THEN 'Remove Operation'  \n" +
                "             WHEN pColName = 'FEEDERLOCATION' THEN 'Feeder Location'  \n" +
                "             WHEN pColName = 'FEEDERQTY' THEN 'Feeder Qty'  \n" +
                "             WHEN pColName = '1STARTICLESERIALNO' THEN '1st Article Serial NO'  \n" +
                "             WHEN pColName = '1STARTICLEDATECODE' THEN '1st Artile Date Code'  \n" +
                "             WHEN pColName = 'ADDEDSMT' THEN 'Add Supplies Materials & Tools'  \n" +
                "             WHEN pColName = 'ISSMTDELETED' THEN 'Remove Supplies Materials & Tools'  \n" +
                "             WHEN pColName = 'SMTQPA' THEN 'Supplies Materials & Tools QPA'  \n" +
                "             WHEN pColName = 'SMTACTUALQPA' THEN 'Supplies Materials & Tools Actual QPA'  \n" +
                "             WHEN pColName = 'SMTUOM' THEN 'Supplies Materials & Tools UOM'  \n" +
                "             WHEN pColName = 'TIMELINE' THEN 'Review Requested By (Date & Time) '  \n" +
                "             WHEN pColName = 'WORKORDERCOOWNER' THEN 'Review Co Owner'  \n" +
                "             WHEN pColName = 'ISCOMPULSORY' THEN 'Review Response'               \n" +
                "             WHEN pColName = 'OPNAME' THEN 'Operation Name'  \n" +
                "             WHEN pColName = 'PROCESSTIME' THEN 'Total Process Time'  \n" +
                "             WHEN pColName = 'SETUPTIME' THEN 'Setup Time'  \n" +
                "             WHEN pColName = 'PERPIECETIME' THEN 'Per pcs Target Time'  \n" +
                "             WHEN pColName = 'QTYCONTROL' THEN 'Qty Tracking Required'  \n" +
                "             WHEN pColName = 'CLEANINGTYPE' THEN 'Cleaning Type'  \n" +
                "             WHEN pColName = 'OPDESCRIPTION' THEN 'Operation Description'  \n" +
                "             WHEN pColName = 'OPWORKINGCONDITION' THEN 'Job Specification'  \n" +
                "             WHEN pColName = 'OPMANAGEMENTINSTRUCTION' THEN 'Management Communication'  \n" +
                "             WHEN pColName = 'OPDEFERREDINSTRUCTION' THEN 'Deferred Instruction'  \n" +
                "             WHEN pColName = 'OPDOES' THEN 'Do'  \n" +
                "             WHEN pColName = 'OPDONTS' THEN 'Do Not'  \n" +
                "             WHEN pColName = 'OPORDER' THEN 'Operation Order'  \n" +
                "             WHEN pColName = 'OPERATIONTYPEID' THEN 'Operation Type'  \n" +
                "             WHEN pColName = 'PARENTOPID' THEN 'Parent Opeartion'  \n" +
                "             WHEN pColName = 'FIRSTPCSCONCLUSION' THEN '1st Article Conclusion'  \n" +
                "             WHEN pColName = 'FIRSTPCSMODEL' THEN '1st Article Model'  \n" +
                "             WHEN pColName = 'ISISSUEQTY' THEN 'Issue Qty Required'  \n" +
                "             WHEN pColName = 'ISPREPROGRAMMINGCOMPONENT' THEN 'Part Pre-Programming Required'  \n" +
                "             WHEN pColName = 'ISREWORK' THEN 'Rework Operation'  \n" +
                "             WHEN pColName = 'ISSTOPOPERATION' THEN 'Halt Operation'  \n" +
                "             WHEN pColName = 'ISTEAMOPERATION' THEN 'Team Operation'  \n" +
                "             WHEN pColName = 'ISTERMINATED' THEN 'Terminted Opearion'  \n" +
                "             WHEN pColName = 'COLORCODE' THEN 'Operation Color'  \n" +
                "             WHEN pColName = 'ISMOVETOSTOCK' THEN 'Move to Stock'  \n" +
                "             WHEN pColName = 'ISPLACEMENTTRACKING' THEN 'Requires REF DES To Use UMID'  \n" +
                "             WHEN pColName = 'ISTRACKBYSERIALNO' THEN 'Track Serial# In Operation'  \n" +
                "             WHEN pColName = 'ISLOOPOPERATION' THEN 'Loop Operation'  \n" +
                "             WHEN pColName = 'ISALLOWMISSINGPARTQTY' THEN 'Allow Operation with Missing Parts Placements'  \n" +
                "             WHEN pColName = 'ISALLOWBYPASSQTY' THEN 'Allow Operation With Bypassing Qty'  \n" +
                "             ELSE pColName  \n" +
                "		END    INTO vName;     \n" +
                "	RETURN vName;        \n" +
                "END ;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2709,'2.00','v1','fun_setWOHistoryColDisplayName  - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;

        case 2709:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_setWOHistoryDescription`  ;  \n" +
                "CREATE FUNCTION `fun_setWOHistoryDescription`(    \n" +
                " pColName VARCHAR(255)       \n" +
                ") RETURNS varchar(500) CHARSET utf8mb4  \n" +
                "BEGIN    \n" +
                "	DECLARE vName VARCHAR(500);  \n" +
                "	SELECT   \n" +
                "		CASE WHEN pColName = 'ISOPERATIONSVERIFIED' THEN 'Operation validated or not.'   \n" +
                "			WHEN pColName = 'ISINCLUDESUBASSEMBLY' THEN 'Sub Assembly Within Operations included or not.'   \n" +
                "			 WHEN pColName = 'TABLIMITATTRAVELER' THEN  'Access tab limit changed.'   \n" +
                "             WHEN pColName = 'MOUNTINGTYPE' THEN  'Mounting Type Changed.'   \n" +
                "             WHEN pColName = 'OPNUMBER' THEN  'Operation# changed.'   \n" +
                "             WHEN pColName = 'ADDEDEMPLOYEE' THEN  'Personnel Added to work order.'   \n" +
                "			 WHEN pColName = 'OPSTATUS' THEN 'Status of Operation in work order changed.'            \n" +
                "             WHEN pColName = 'OPVERSION' THEN 'Operation Version changed.'      \n" +
                "             WHEN pColName = 'ADDEDEQUIPMENT' THEN 'Equipment added Operation/Work order.'                             \n" +
                "             WHEN pColName = 'WONUMBER' THEN 'WO# Changed.'   \n" +
                "			 WHEN pColName = 'PARTID' THEN 'Assy ID changed.'  \n" +
                "			 WHEN pColName = 'EXCESSQTY' THEN 'Excess qty changed.'   \n" +
                "             WHEN pColName = 'BUILDQTY' THEN 'Build qty changed.'    \n" +
                "			 WHEN pColName = 'MASTERTEMPLATEID' THEN 'Master Template'   \n" +
                "			 WHEN pColName = 'REFRENCEWOID' THEN 'Ref. WO# '   \n" +
                "             WHEN pColName = 'WOVERSION' THEN 'WO Version changed.'   \n" +
                "             WHEN pColName = 'ISCLUSTERAPPLIED' THEN 'Cluster Applied to work order.'  \n" +
                "			 WHEN pColName = 'ROHSSTATUSID' THEN 'RoHs Status changed.'  \n" +
                "             WHEN pColName = 'ISNOCLEAN' THEN 'No-Clean'  \n" +
                "             WHEN pColName = 'ISWATERSOLUBLE' THEN 'Water-Soluble'  \n" +
                "             WHEN pColName = 'ISOPERATIONTRACKBYSERIALNO' THEN 'Tracking By serial numbers.'  \n" +
                "             WHEN pColName = 'WOSTATUS' THEN 'WO status changed.'  \n" +
                "             WHEN pColName = 'CUSTOMER' THEN 'MFR '  \n" +
                "             WHEN pColName = 'ECOREMARK' THEN 'ECO Remark changed.'  \n" +
                "             WHEN pColName = 'FCOREMARK' THEN 'FCO Remark changed.'  \n" +
                "             WHEN pColName = 'LOCATIONDETAILS' THEN 'Location changed.'  \n" +
                "             WHEN pColName = 'ISSTOPWORKORDER' THEN 'Hold the Workorder.'  \n" +
                "             WHEN pColName = 'ISREVISEDWO' THEN 'Revised WO .'  \n" +
                "             WHEN pColName = 'TERMINATEWOID' THEN 'Terminate WO#'  \n" +
                "             WHEN pColName = 'ISRACKTRACKINGREQUIRED' THEN 'Rack Tracking required.'  \n" +
                "             WHEN pColName = 'ISSTRICTLYFOLLOWRACKVALIDATION' THEN 'Strictly follow rack validation.'  \n" +
                "             WHEN pColName = 'ADDCLASSIDS' THEN 'Added Standard to work order.'               \n" +
                "             WHEN pColName = 'UPDATECLASSIDS' THEN 'Standard changed in work order.'  \n" +
                "             WHEN pColName = 'STANDARDIDS' THEN 'Add Standard to work order.'  \n" +
                "             WHEN pColName = 'ISSTANDARDDELETED' THEN 'Standard removed from work order.'  \n" +
                "             WHEN pColName = 'CLUSTERNAME' THEN 'Cluster name changed.'  \n" +
                "             WHEN pColName = 'CLUSTERDISPLAYORDER' THEN 'Cluster display order changed.'  \n" +
                "             WHEN pColName = 'ISCLUSTERDELETED' THEN 'Cluster deleted from work order.'   \n" +
                "             WHEN pColName = 'ISPARELLELOPERATION' THEN 'Pareller Cluster'               \n" +
                "             WHEN pColName = 'WORKORDERDATAFIELD' THEN 'Added Work order data field.'  \n" +
                "             WHEN pColName = 'WORKORDERDATAFIELDDELETED' THEN 'Work order data field removed.'  \n" +
                "             WHEN pColName = 'OPERATIONCLUSTERID' THEN 'Oepration added to cluster.'  \n" +
                "             WHEN pColName = 'DISPLAYORDER' THEN 'Opeation Display Order'  \n" +
                "             WHEN pColName = 'ISOPCLUSTERDELETED' THEN 'Operation removed from cluster.'  \n" +
                "             WHEN pColName = 'OPERATIONDATAFIELD' THEN 'Added opeation data field.'  \n" +
                "             WHEN pColName = 'OPDATAFIELDDISPLAYORDER' THEN 'Operation data field disply order.'  \n" +
                "             WHEN pColName = 'ISOPERATIONDATAFIELDDELETED' THEN 'Removed Operation data field.'               \n" +
                "             WHEN pColName = 'ISEMPLOYEEDELETED' THEN 'Personnel removed from work order/operation.'  \n" +
                "             WHEN pColName = 'ISEQUIPMENTDELETED' THEN 'Equipment removed from  operation.'  \n" +
                "             WHEN pColName = 'QTY' THEN 'Equipment Qty changed.'  \n" +
                "             WHEN pColName = 'ISONLINE' THEN 'Equipment Online/Offline.'  \n" +
                "             WHEN pColName = 'ISOPERATIONDELETED' THEN 'Removed Operation from work order'  \n" +
                "             WHEN pColName = 'FEEDERLOCATION' THEN 'Feeder Location in equipment changed.'  \n" +
                "             WHEN pColName = 'FEEDERQTY' THEN 'Feeder Qty changed.'  \n" +
                "             WHEN pColName = '1STARTICLESERIALNO' THEN '1st Article Serial NO genereated.'  \n" +
                "             WHEN pColName = '1STARTICLEDATECODE' THEN '1st Artile Date Code.'  \n" +
                "             WHEN pColName = 'ADDEDSMT' THEN 'Added Supplies Materials & Tools to  Operation.'  \n" +
                "             WHEN pColName = 'ISSMTDELETED' THEN 'Removed Supplies Materials & Tools from Operation.'  \n" +
                "             WHEN pColName = 'SMTQPA' THEN 'Supplies Materials & Tools QPA changed.'  \n" +
                "             WHEN pColName = 'SMTACTUALQPA' THEN 'Supplies Materials & Tools Actual QPA changed.'  \n" +
                "             WHEN pColName = 'SMTUOM' THEN 'Supplies Materials & Tools UOM changed.'  \n" +
                "             WHEN pColName = 'TIMELINE' THEN 'Review Requested By (Date & Time).'  \n" +
                "             WHEN pColName = 'WORKORDERCOOWNER' THEN 'Added Co Owner for review. '  \n" +
                "             WHEN pColName = 'ISCOMPULSORY' THEN 'Review Response (Mandatory / Optional)'  \n" +
                "             WHEN pColName = 'OPNAME' THEN 'Operation name changed.'  \n" +
                "             WHEN pColName = 'PROCESSTIME' THEN 'Total Process Time changed.'  \n" +
                "             WHEN pColName = 'SETUPTIME' THEN 'Setup Time changed.'  \n" +
                "             WHEN pColName = 'PERPIECETIME' THEN 'Per pcs Target Time changed.'  \n" +
                "             WHEN pColName = 'QTYCONTROL' THEN 'Qty Tracking Required changed.'  \n" +
                "             WHEN pColName = 'CLEANINGTYPE' THEN 'Cleaning Type changed.'  \n" +
                "             WHEN pColName = 'OPDESCRIPTION' THEN 'Operation Description changed.'  \n" +
                "             WHEN pColName = 'OPWORKINGCONDITION' THEN 'Job Specification changed.'  \n" +
                "             WHEN pColName = 'OPMANAGEMENTINSTRUCTION' THEN 'Management Communication changed.'  \n" +
                "             WHEN pColName = 'OPDEFERREDINSTRUCTION' THEN 'Deferred Instruction changed.'  \n" +
                "             WHEN pColName = 'OPDOES' THEN 'Do changed.'  \n" +
                "             WHEN pColName = 'OPDONTS' THEN 'Do Not changed.'  \n" +
                "             WHEN pColName = 'OPORDER' THEN 'Operation Order changed.'  \n" +
                "             WHEN pColName = 'OPERATIONTYPEID' THEN 'Operation Type changed.'  \n" +
                "             WHEN pColName = 'PARENTOPID' THEN 'Parent Opeartion changed.'  \n" +
                "             WHEN pColName = 'FIRSTPCSCONCLUSION' THEN '1st Article Conclusion changed.'   \n" +
                "             WHEN pColName = 'FIRSTPCSMODEL' THEN '1st Article Model changed.'  \n" +
                "             WHEN pColName = 'ISISSUEQTY' THEN 'Issue Qty Required changed.'  \n" +
                "             WHEN pColName = 'ISPREPROGRAMMINGCOMPONENT' THEN 'Part Pre-Programming Required changed.'  \n" +
                "             WHEN pColName = 'ISREWORK' THEN 'Rework Operation changed.'  \n" +
                "             WHEN pColName = 'ISSTOPOPERATION' THEN 'Operation halt.'  \n" +
                "             WHEN pColName = 'ISTEAMOPERATION' THEN 'Team Operation changed.'  \n" +
                "             WHEN pColName = 'ISTERMINATED' THEN 'Terminted Opearion changed.'  \n" +
                "             WHEN pColName = 'COLORCODE' THEN 'Operation Color changed.'  \n" +
                "             WHEN pColName = 'ISMOVETOSTOCK' THEN 'Move to Stock changed.'  \n" +
                "             WHEN pColName = 'ISPLACEMENTTRACKING' THEN 'Requires REF DES To Use UMID changed.'  \n" +
                "             WHEN pColName = 'ISTRACKBYSERIALNO' THEN 'Track Serial# In Operation changed.'  \n" +
                "             WHEN pColName = 'ISLOOPOPERATION' THEN 'Loop Operation changed.'  \n" +
                "             WHEN pColName = 'ISALLOWMISSINGPARTQTY' THEN 'Allow Operation with Missing Parts Placements changed.'  \n" +
                "             WHEN pColName = 'ISALLOWBYPASSQTY' THEN 'Allow Operation With Bypassing Qty changed.'               \n" +
                "             ELSE pColName  \n" +
                "		END    INTO vName;     \n" +
                "	RETURN vName;        \n" +
                "END ;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2710,'2.00','v1','fun_setWOHistoryDescription - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;

        case 2710:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP  FUNCTION IF EXISTS `fun_getNameByID`;  \n" +
                "CREATE FUNCTION `fun_getNameByID`(        \n" +
                "	pColName VARCHAR(255),  \n" +
                "    pId VARCHAR(255)    ,  \n" +
                "    pDataType VARCHAR(20)  \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN        \n" +
                "	DECLARE vName varchar(1000);     \n" +
                "  \n" +
                "	IF pColName = 'WOSTATUS' OR  pColName = 'FIRSTPCSSTATUS' THEN    \n" +
                "		SET vName = fun_getStatusNameByColumnAndID (pColName, pId);  \n" +
                "    ELSEIF pColName = 'CUSTOMER' THEN  \n" +
                "		SET vName = fun_getMfgCodeAndNameByID(pId);  \n" +
                "    ELSEIF pColName = 'REFRENCEWOID' THEN  \n" +
                "		SET vName = fun_getWorkorderNumberByID(pId);  \n" +
                "    ELSEIF pColName = 'ROHSSTATUSID' THEN  \n" +
                "		SET vName = fun_getRoHSNameByID(pId);  \n" +
                "	ELSEIF pColName = 'PARTID' THEN  \n" +
                "		SET vName = fun_getComponentNameByID(pId);   \n" +
                "	ELSEIF pColName = 'CLASSIDS' OR pColName = 'ADDCLASSIDS' OR pColName = 'UPDATECLASSIDS' THEN  \n" +
                "		SET vName = fun_getCetificateNameById(pColName, pId);       \n" +
                "	ELSEIF pColName = 'STANDARDIDS' THEN  \n" +
                "		SET vName = fun_getCetificateNameById(pColName, pId);               \n" +
                "	ELSEIF pColName = 'WORKORDERDATAFIELD' THEN  \n" +
                "		SET vName = fun_getDataElementNameById(pId, -7);     \n" +
                "	ELSEIF pColName = 'OPERATIONDATAFIELD' THEN  \n" +
                "		SET vName = fun_getDataElementNameById(pId, -1);    \n" +
                "	ELSEIF pColName = 'ADDEDEMPLOYEE' THEN  \n" +
                "		SET vName = fun_getEmployeeInitialNameByEmpID(pId);     \n" +
                "	ELSEIF pColName = 'WORKORDERCOOWNER' THEN  \n" +
                "		SET vName = fun_getEmployeeInitialNameByEmpID(pId);    \n" +
                "	ELSEIF pColName = 'OPSTATUS' THEN  \n" +
                "		SET vName = fun_getOpStatusNameByID(pId);   \n" +
                "	ELSEIF pColName = 'PARENTOPID' THEN  \n" +
                "		SET vName = fun_getOperationNameById(pId);   \n" +
                "	ELSEIF pColName = 'OPERATIONTYPEID' THEN  \n" +
                "		SET vName = fun_getGenericCategoryNameByID(pId);      \n" +
                "	ELSEIF pColName = 'OPERATIONCLUSTERID' THEN  \n" +
                "		SET vName = fun_getClusterNameById(pId);      \n" +
                "	ELSEIF pColName = 'ADDEDEQUIPMENT' THEN  \n" +
                "		SET vName = fun_getEqpWSNameByID(pId);      \n" +
                "	ELSEIF pColName = 'SMTUOM' THEN  \n" +
                "		SET vName = fun_getUnitNameByID(pId);     \n" +
                "	ELSEIF pColName = 'ADDEDSMT' THEN  \n" +
                "		#SET vName = fun_getComponentPIDCodeByID(pId);             \n" +
                "        SET vName = fun_getAssyPIDCodeByID(pId);    \n" +
                "	ELSEIF pColName = 'MOUNTINGTYPE' THEN		        \n" +
                "        SET vName = fun_getMountingTypeNameByID(pId);     \n" +
                "	ELSE  \n" +
                "		SET vName = pId;  \n" +
                "    END IF;      \n" +
                "	IF pDataType = 'Boolean' THEN  \n" +
                "		IF pId = 1 THEN SET vName ='Yes' ;  \n" +
                "		ELSEIF pId = 0 THEN SET vName = 'No';  \n" +
                "		END IF ;  \n" +
                "	ELSEIF pDataType = 'Case' THEN   		  \n" +
                "		IF pId = 'NC' THEN SET vName= \"No-Clean\";  \n" +
                "		ELSEIF pId= 'NA' THEN SET vName= \"Not Applicable\";  \n" +
                "		ELSEIF pId= 'WS' THEN SET vName = \"Water-Soluble\";  \n" +
                "		END IF;     \n" +
                "	END IF ;  \n" +
                "  \n" +
                "  \n" +
                "	RETURN vName;          \n" +
                "END ;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2711,'2.00','v1','fun_getNameByID  - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;



        case 2711:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP  PROCEDURE IF EXISTS `Sproc_WOChangeHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_WOChangeHistory`(            \n" +
                "	IN pWoID INT(11),            \n" +
                "	IN ppageIndex INT(11),            \n" +
                "	IN precordPerPage INT(11),            \n" +
                "	IN pOrderBy VARCHAR(255),            \n" +
                "	IN pWhereClause VARCHAR(16383),                \n" +
                "    IN pwoOPID INT,            \n" +
                "    -- If woOPID is passed then it is from operation version else from woVersion            \n" +
                "    IN fromVersion VARCHAR(255),            \n" +
                "    -- If woOPID is passed then it is to operation version else to woVersion            \n" +
                "    IN toVersion VARCHAR(255)            \n" +
                "    )  \n" +
                "BEGIN            \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);            \n" +
                "	DECLARE rowNumWhere VARCHAR(255);            \n" +
                "  \n" +
                "    /* [S] Get ID for given WO or WOOP versiob */            \n" +
                "    DECLARE fromWOVersionID INT;            \n" +
                "    DECLARE toWoVersionID INT;            \n" +
                "    DECLARE fromOPVersionID INT;            \n" +
                "    DECLARE toOPVersionID INT;            \n" +
                "    DECLARE woversioncheck VARCHAR(50);            \n" +
                "    IF (pwoOPID IS NULL AND fromVersion IS NOT NULL AND toVersion IS NOT NULL) THEN            \n" +
                "		SELECT a.ID INTO fromWOVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID AND a.Colname = 'WOVERSION'            \n" +
                "        AND a.Newval = fromVersion ORDER BY a.ID DESC LIMIT 1;            \n" +
                "		SELECT a.ID INTO toWoVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID AND a.Colname = 'WOVERSION'            \n" +
                "        AND a.Newval = toVersion ORDER BY a.ID DESC LIMIT 1;          \n" +
                "/* code for new changes */        \n" +
                "IF(fromWOVersionID=toWoVersionID)THEN        \n" +
                "    SET fromWOVersionID= (NULL);        \n" +
                "    END IF;        \n" +
                "    SELECT woVersion INTO woversioncheck FROM workorder WHERE woid=pWoID LIMIT 1;        \n" +
                "  IF (fromWOVersionID IS NULL AND toWoVersionID IS NULL)THEN        \n" +
                "        IF(woversioncheck=fromVersion AND woversioncheck=toVersion)THEN        \n" +
                "		SELECT MIN(a.ID) INTO fromWOVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID ;           \n" +
                "  \n" +
                "		SELECT MAX(a.ID) INTO toWoVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID;            \n" +
                "        ELSE         \n" +
                "         SELECT a.ID INTO toWoVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID AND a.Colname = 'WOVERSION'            \n" +
                "        AND a.OldVal = toVersion ORDER BY a.ID DESC LIMIT 1;           \n" +
                "        IF(toWoVersionID IS NOT NULL)THEN        \n" +
                "        SELECT MIN(a.ID) INTO fromWOVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID ;           \n" +
                "        END IF;         \n" +
                "         END IF;        \n" +
                "      END IF;        \n" +
                "      IF(fromWOVersionID IS NOT NULL AND toWoVersionID IS NULL AND fromVersion=toVersion)THEN        \n" +
                "      IF(woversioncheck=fromVersion)THEN        \n" +
                "           SELECT MAX(a.ID) INTO toWoVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID;             \n" +
                "	ELSE        \n" +
                "        SELECT a.ID INTO toWoVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID AND a.Colname = 'WOVERSION'            \n" +
                "        AND a.OldVal = toVersion ORDER BY a.ID DESC LIMIT 1;        \n" +
                "        END IF;         \n" +
                "      END IF;        \n" +
                "  \n" +
                "      IF(toWoVersionID IS NOT NULL AND fromWOVersionID IS NULL AND fromVersion=toVersion)THEN        \n" +
                "      SET fromWOVersionID = IFNULL(toWoVersionID, 0);         \n" +
                "      IF(woversioncheck=fromVersion)THEN        \n" +
                "           SELECT MAX(a.ID) INTO toWoVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID;             \n" +
                "	ELSE        \n" +
                "        SELECT a.ID INTO toWoVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER' AND a.RefTransID = pWoID AND a.Colname = 'WOVERSION'            \n" +
                "        AND a.OldVal = toVersion ORDER BY a.ID DESC LIMIT 1;        \n" +
                "        END IF;           \n" +
                "  \n" +
                "      END IF;        \n" +
                "  \n" +
                "  /*  code end        */            \n" +
                "  \n" +
                "        SET fromWOVersionID = IFNULL(fromWOVersionID, 0);            \n" +
                "        SET toWoVersionID = IFNULL(toWoVersionID, 0);          \n" +
                "  \n" +
                "  \n" +
                "	ELSEIF (pwoOPID IS NOT NULL AND fromVersion IS NOT NULL AND toVersion IS NOT NULL) THEN            \n" +
                "		SELECT a.ID INTO fromOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID AND a.Colname = 'OPVERSION'            \n" +
                "        AND a.Newval = fromVersion ORDER BY a.ID DESC LIMIT 1;            \n" +
                "		SELECT a.ID INTO toOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID AND a.Colname = 'OPVERSION'            \n" +
                "        AND a.Newval = toVersion ORDER BY a.ID DESC LIMIT 1;            \n" +
                "  \n" +
                "/* code for new changes */        \n" +
                "IF(fromOPVersionID=toOPVersionID)THEN        \n" +
                "    SET fromOPVersionID= (NULL);        \n" +
                "    END IF;        \n" +
                "    SELECT opVersion INTO woversioncheck FROM workorder_operation WHERE woOPID=pwoOPID LIMIT 1;        \n" +
                "  IF (fromOPVersionID IS NULL AND toOPVersionID IS NULL)THEN        \n" +
                "        IF(woversioncheck=fromVersion AND woversioncheck=toVersion)THEN        \n" +
                "		SELECT MIN(a.ID) INTO fromOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID ;           \n" +
                "  \n" +
                "		SELECT MAX(a.ID) INTO toOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID;            \n" +
                "        ELSE         \n" +
                "         SELECT a.ID INTO toOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID AND a.Colname = 'OPVERSION'            \n" +
                "        AND a.OldVal = toVersion ORDER BY a.ID DESC LIMIT 1;           \n" +
                "        IF(toOPVersionID IS NOT NULL)THEN        \n" +
                "        SELECT MIN(a.ID) INTO fromOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID ;           \n" +
                "        END IF;         \n" +
                "         END IF;        \n" +
                "      END IF;        \n" +
                "      IF(fromOPVersionID IS NOT NULL AND toOPVersionID IS NULL AND fromVersion=toVersion)THEN        \n" +
                "      IF(woversioncheck=fromVersion)THEN        \n" +
                "           SELECT MAX(a.ID) INTO toOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID;             \n" +
                "	ELSE        \n" +
                "        SELECT a.ID INTO toOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID AND a.Colname = 'OPVERSION'            \n" +
                "        AND a.OldVal = toVersion ORDER BY a.ID DESC LIMIT 1;        \n" +
                "        END IF;         \n" +
                "      END IF;        \n" +
                "  \n" +
                "      IF(toOPVersionID IS NOT NULL AND fromOPVersionID IS NULL AND fromVersion=toVersion)THEN        \n" +
                "      SET fromOPVersionID = IFNULL(toOPVersionID, 0);         \n" +
                "      IF(woversioncheck=fromVersion)THEN        \n" +
                "           SELECT MAX(a.ID) INTO toOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID;             \n" +
                "	ELSE        \n" +
                "        SELECT a.ID INTO toOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID AND a.Colname = 'OPVERSION'            \n" +
                "        AND a.OldVal = toVersion ORDER BY a.ID DESC LIMIT 1;        \n" +
                "        END IF;           \n" +
                "  \n" +
                "      END IF;        \n" +
                "  \n" +
                "  /*  code end        */                \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "        SET fromOPVersionID = IFNULL(fromOPVersionID, 0);            \n" +
                "        SET toOPVersionID = IFNULL(toOPVersionID, 0);            \n" +
                "    END IF;           \n" +
                "	/* [E] Get ID for given WO or WOOP versiob */            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;          \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS            \n" +
                "	   SELECT * FROM            \n" +
                "		   (            \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,                       \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,    \n" +
                "			#(fun_getStatusNameByColumnAndID (`dca`.`Colname`, `dca`.`Oldval`)) Oldval,          \n" +
                "			#(fun_getStatusNameByColumnAndID (`dca`.`Colname`, `dca`.`Newval`)) Newval,           \n" +
                "        updatedAt,Updatedby,  \n" +
                "        fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,            \n" +
                "            NULL opName , woVersion, opVersion , valueDataType  \n" +
                "			FROM dataentrychange_auditlog dca  WHERE Tablename = 'WORKORDER' AND RefTransID = pWoID            \n" +
                "			UNION ALL             \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,   \n" +
                "			(fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,    \n" +
                "            updatedAt,Updatedby ,           \n" +
                "			fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,            \n" +
                "            (            \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo             \n" +
                "                WHERE wo.woOPID = (SELECT woe.woOPID FROM workorder_operation_employee woe WHERE woe.woOpEmployeeID = dca.RefTransID)            \n" +
                "            ) opName    , woVersion, opVersion , valueDataType        \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_EMPLOYEE'             \n" +
                "			AND RefTransID IN (SELECT woOpEmployeeID FROM workorder_operation_employee WHERE  woID =  pWoID )			            \n" +
                "			UNION ALL             \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,   \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,    \n" +
                "			updatedAt,Updatedby   ,         \n" +
                "			fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,            \n" +
                "            (            \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo             \n" +
                "                WHERE wo.woOPID = (SELECT woe.woOPID FROM workorder_operation_equipment woe WHERE woe.woOpEqpID = dca.RefTransID)            \n" +
                "            ) opName          , woVersion, opVersion , valueDataType  \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_EQUIPMENT'             \n" +
                "			AND RefTransID IN (SELECT woOpEqpID FROM workorder_operation_equipment WHERE  woID =  pWoID )            \n" +
                "  \n" +
                "			UNION ALL             \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,   \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,    \n" +
                "			updatedAt,Updatedby,            \n" +
                "			fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,            \n" +
                "		    (            \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo             \n" +
                "                WHERE wo.woOPID = (SELECT wop.woOPID FROM workorder_operation_part wop WHERE wop.woOPPartID = dca.RefTransID)            \n" +
                "            ) opName  , woVersion, opVersion , valueDataType          \n" +
                "			FROM dataentrychange_auditlog dca WHERE TableName = 'WORKORDER_OPERATION_PART'             \n" +
                "			AND RefTransID IN (SELECT woOPPartID FROM workorder_operation_part WHERE  woID =  pWoID )            \n" +
                "  \n" +
                "			UNION ALL             \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,   \n" +
                "            Oldval,Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,    \n" +
                "            updatedAt,Updatedby            \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,   fun_getRoleByID(dca.updateByRoleId) updatedbyRole,   \n" +
                "            NULL opName  , woVersion, opVersion , valueDataType          \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_CLUSTER'             \n" +
                "			AND RefTransID IN (SELECT clusterID FROM workorder_cluster WHERE  woID =  pWoID )            \n" +
                "  \n" +
                "			UNION ALL             \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,   \n" +
                "			(fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,    \n" +
                "            updatedAt,Updatedby            \n" +
                "			,#(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,                                  \n" +
                "             fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,            \n" +
                "            (            \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo             \n" +
                "                WHERE wo.woOPID = (SELECT wopcl.woOPID FROM workorder_operation_cluster wopcl WHERE wopcl.woClusterID = dca.RefTransID)            \n" +
                "            ) opName  , woVersion, opVersion , valueDataType          \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_CLUSTER'             \n" +
                "			AND RefTransID IN (SELECT woClusterID FROM workorder_operation_cluster             \n" +
                "						WHERE  clusterID IN   (SELECT clusterID FROM workorder_cluster WHERE  woID =  pWoID )   \n" +
                "                        )  \n" +
                "  \n" +
                "			UNION ALL             \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,   \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,    \n" +
                "            updatedAt,Updatedby            \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,            \n" +
                "            (            \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo             \n" +
                "                WHERE wo.woOPID = (SELECT wopde.woOPID FROM workorder_operation_dataelement wopde WHERE wopde.woOPDataElementID = dca.RefTransID)            \n" +
                "            )  opName  , woVersion, opVersion , valueDataType          \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_DATAELEMENT'             \n" +
                "			AND RefTransID IN (SELECT woOpDataElementID FROM workorder_operation_dataelement WHERE  woID =  pWoID )            \n" +
                "  \n" +
                "			UNION ALL             \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,   \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,    \n" +
                "            updatedAt,Updatedby            \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,            \n" +
                "            (            \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ',wo.opName) FROM workorder_operation wo             \n" +
                "                WHERE wo.woOPID = RefTransID            \n" +
                "            ) opName  , woVersion, opVersion , valueDataType          \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION'             \n" +
                "			AND RefTransID IN (SELECT woOPID FROM workorder_operation WHERE  woID =  pWoID )            \n" +
                "  \n" +
                "			UNION ALL             \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,   \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,    \n" +
                "            updatedAt,Updatedby            \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,   \n" +
                "            NULL opName   , woVersion, opVersion , valueDataType         \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_CERTIFICATION'             \n" +
                "			AND RefTransID IN (SELECT woCertificationID FROM workorder_certification WHERE  woID =  pWoID )	            \n" +
                "  \n" +
                "			UNION ALL             \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,    \n" +
                "            updatedAt,Updatedby            \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,   \n" +
                "            NULL opName     , woVersion, opVersion , valueDataType       \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'DATAELEMENT_TRANSACTIONVALUES'             \n" +
                "			AND RefTransID IN (SELECT dataElementTransID FROM dataelement_transactionvalues            \n" +
                "						WHERE  entityID = 7 AND RefTransID =  pWoID )     		  \n" +
                "  \n" +
                "  \n" +
                "			UNION ALL  \n" +
                "            SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,   \n" +
                "            Oldval,Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,    \n" +
                "            updatedAt,Updatedby            \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,   \n" +
                "            NULL opName  , woVersion, opVersion , valueDataType          \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_REQREVEMP'    \n" +
                "			AND RefTransID IN (SELECT woRevReqInvitedID FROM workorder_reqrevinvitedemp WHERE  woID =  pWoID )	  \n" +
                "            UNION ALL             \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,   \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,    \n" +
                "            updatedAt,Updatedby            \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,   \n" +
                "            NULL opName   , woVersion, opVersion , valueDataType         \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_DATAELEMENT'             \n" +
                "			AND RefTransID IN (SELECT woDataElementID FROM workorder_dataelement WHERE  woID =  pWoID )	    \n" +
                "  \n" +
                "			UNION ALL  \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,   \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,    \n" +
                "            updatedAt,Updatedby            \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,   \n" +
                "            (            \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo             \n" +
                "                WHERE wo.woOPID = (SELECT wopfp.woOPID FROM workorder_operation_firstpiece wopfp WHERE wopfp.wofirstpieceID = dca.RefTransID)            \n" +
                "            )  opName  , woVersion, opVersion , valueDataType          \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_FIRSTPIECE'             \n" +
                "			AND RefTransID IN (SELECT wofirstpieceID FROM workorder_operation_firstpiece WHERE  woID =  pWoID )            \n" +
                "  \n" +
                "			UNION ALL  \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,   \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,    \n" +
                "            updatedAt,Updatedby            \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,   \n" +
                "            (            \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo             \n" +
                "                WHERE wo.woOPID = (SELECT wopfdr.woOPID FROM workorder_operation_equipment_feeder_details wopfdr WHERE wopfdr.id = dca.RefTransID)            \n" +
                "            )  opName  , woVersion, opVersion , valueDataType          \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_FEEDER'             \n" +
                "			AND RefTransID IN (SELECT id FROM workorder_operation_equipment_feeder_details WHERE  woID =  pWoID )            \n" +
                "  \n" +
                "            	UNION ALL  \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,  \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,   \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,  \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,  \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,    \n" +
                "            updatedAt,Updatedby            \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,   \n" +
                "            null opName  , woVersion, opVersion , valueDataType          \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_COOWNER'             \n" +
                "			AND RefTransID IN (SELECT coOwnerID FROM workorder_coowner WHERE  woID =  pWoID )            \n" +
                "  \n" +
                "		) AS a            \n" +
                "		WHERE CASE WHEN fromWOVersionID IS NOT NULL THEN a.ID BETWEEN fromWOVersionID AND toWoVersionID ELSE TRUE END            \n" +
                "		AND CASE WHEN fromOPVersionID IS NOT NULL THEN a.ID BETWEEN fromOPVersionID AND toOPVersionID ELSE TRUE END;            \n" +
                "	IF (pOrderBy IS NOT NULL) THEN            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
                "	ELSE            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"ID DESC\") ;            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN            \n" +
                "		SET pWhereClause = '1=1' ;            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
                "	ELSE	            \n" +
                "		SET rowNumWhere = '';            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "	/* to get total count of rows */            \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );            \n" +
                "	PREPARE query1 FROM @SQLStatement1;            \n" +
                "	EXECUTE query1;            \n" +
                "	DEALLOCATE PREPARE query1;            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
                "	PREPARE query2 FROM @SQLStatement2;            \n" +
                "	EXECUTE query2;            \n" +
                "	DEALLOCATE PREPARE query2;            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2712,'2.00','v1',' Sproc_WOChangeHistory - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;


        case 2712:
            allDbChangesArray.push(
                /* **************************** new script ->06-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS fun_checkUMIDScan ;  \n" +
                "CREATE FUNCTION `fun_checkUMIDScan`(                                            \n" +
                "	pUMID VARCHAR(100),                                            \n" +
                "	ppartID INT,                                            \n" +
                "	pwoTransID INT,                                           \n" +
                "	pwoOPID INT,                                           \n" +
                "	pemployeeId INT,                                          \n" +
                "	pcheckKitAllocation VARCHAR(5000),                                         \n" +
                "	ptransactionType VARCHAR(1),                                           \n" +
                "	pFromFeeder INT,                                        \n" +
                "	pisVerify INT,                                        \n" +
                "	pwoOpEqpID INT,                                        \n" +
                "	pfeederLocation VARCHAR(1000),                           \n" +
                "	pwoID INT(11),                          \n" +
                "	pCreatedBy VARCHAR(500),                          \n" +
                "	pisConfirmed INT(11)) RETURNS varchar(500) CHARSET utf8mb4  \n" +
                "BEGIN                                                      \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;                                                 \n" +
                "	DECLARE temp_umid_comp_id INT(11);                                                     \n" +
                "	DECLARE temp_umid_binID INT(11);                                                 \n" +
                "    DECLARE temp_umid_sid INT(11);  \n" +
                "	DECLARE temp_umid_package_id INT(11);                                         \n" +
                "	DECLARE temp_comp_alertExpiryDays INT(11);                                                  \n" +
                "	DECLARE flag_isKitValid INT (11);                                                        \n" +
                "	DECLARE flag_isTeamOperation INT (11) DEFAULT 0;                                                           \n" +
                "	DECLARE temp_expiryDate DATETIME;                                                         \n" +
                "	DECLARE temp_expiryDaysLeftValidation INT(11);                                                           \n" +
                "	DECLARE temp_expiryDaysLeftCount INT(11);                                                              \n" +
                "	DECLARE temp_config_dateFormat VARCHAR(1000);                                                            \n" +
                "	DECLARE temp_umid_valid INT (11) DEFAULT 1;                                                             \n" +
                "	DECLARE temp_isIncludeSubassembly INT (11) DEFAULT 0;                                                       \n" +
                "	DECLARE temp_recordFoundInAssembly VARCHAR (500);                                             \n" +
                "  \n" +
                "	DECLARE temp_comp_isGoodPart INT(11) DEFAULT 0;                       \n" +
                "	DECLARE temp_comp_partLevelRestrictUsePermanently INT(11) DEFAULT 0;                                                                    \n" +
                "	DECLARE temp_comp_partLevelRestrictPackagingUsePermanently INT(11) DEFAULT 0;                                   \n" +
                "	DECLARE temp_umid_restrictFromUMID INT(11) DEFAULT 0;                                   \n" +
                "	DECLARE temp_comp_is_cpn INT(11) DEFAULT 0;                                          \n" +
                "  \n" +
                "	SET temp_expiryDate = NULL;                                                        \n" +
                "	SET temp_expiryDaysLeftValidation = NULL;                                                      \n" +
                "	SET temp_expiryDaysLeftCount = NULL;                                        \n" +
                "	#########################################################################################                                            \n" +
                "	################### NOTE: Temporaray table for error comes from sp ######################                                            \n" +
                "	#########################################################################################                                           \n" +
                "	IF(pUMID IS NOT NULL) THEN	                                          \n" +
                "		# step 1 - get umid details from umid                                                \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_umid_details;                                                \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details AS                                              \n" +
                "		SELECT c.id, c.PIDCode, c.mfgPN,                                           \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgCodeID) mfgCode,                                        \n" +
                "			c.restrictUSEwithpermission AS partLevelRestrictUSEwithpermission,                                          \n" +
                "			c.restrictUsePermanently AS partLevelRestrictUsePermanently,                                          \n" +
                "			c.restrictPackagingUseWithpermission AS partLevelRestrictPackagingUseWithpermission,                                          \n" +
                "			c.restrictPackagingUsePermanently AS partLevelRestrictPackagingUsePermanently,                                          \n" +
                "			c.packagingGroupId,                                              \n" +
                "			c.rev AS rev,                                         \n" +
                "			c.imageURL AS imageURL,                                         \n" +
                "			c.documentPath,            \n" +
                "			c.mfgPNDescription AS mfgPNDescription,                                          \n" +
                "			c.roHSStatusID,                                         \n" +
                "			c.alertExpiryDays,                                        \n" +
                "			c.umidVerificationRequire,                                        \n" +
                "			c.uom,                             \n" +
                "			c.isGoodPart isGoodPart,                                        \n" +
                "			rr.name rohsStatus,                                         \n" +
                "			rr.rohsIcon rohsIcon,                                           \n" +
                "			css.id AS refsidid,                                          \n" +
                "			css.binID AS binID,                                              \n" +
                "			css.pkgQty AS pkgQty,                                                  \n" +
                "			-- css.pkgCount AS pkgCount,                                                     \n" +
                "			css.pkgUnit AS pkgUnit,                                                      \n" +
                "			css.uom AS pkgUOM,                                        \n" +
                "			css.uid,                                    \n" +
                "			fun_getUnitNameByID(c.uom) unitName,                                        \n" +
                "			css.isUMIDRestrict AS RestrictFromUMID,                                            \n" +
                "			css.expiryDate,                                          \n" +
                "			1 isActualComponent,                                               \n" +
                "			0 isPackagingAlias,                    \n" +
                "			c.isCPN AS isCPN,           \n" +
                "			c.isCustom AS isCustom ,               \n" +
                "			CAST(NULL AS CHAR(3000)) AS refDesig,              \n" +
                "			(SELECT feederLocation FROM workorder_operation_equipment_feeder_details	              \n" +
                "				WHERE id IN (SELECT eqpFeederID FROM workorder_trans_umid_details               \n" +
                "					WHERE refsidid IN (SELECT id FROM component_sid_stock                 \n" +
                "					WHERE uid=pUMID AND isDeleted=0) AND isDeleted=0 AND reelStatus=\"P\")              \n" +
                "					AND woOPID=pwoOPID) feederLocation                                                    \n" +
                "		FROM component c                                              \n" +
                "		LEFT JOIN component_sid_stock css                                              \n" +
                "		ON css.refcompid = c.id AND css.deletedAt IS NULL                                            \n" +
                "		LEFT JOIN rfq_rohsmst rr ON (rr.id = c.roHSStatusID AND IFNULL(rr.isDeleted,0) =0)                                        \n" +
                "		WHERE css.uid = pUMID                                              \n" +
                "		AND c.deletedAt IS NULL;                                           \n" +
                "  \n" +
                "		SELECT isTeamOperation INTO flag_isTeamOperation FROM workorder_operation WHERE woopid = pwoOpID;                        \n" +
                "  \n" +
                "		#check UMID already scanned in operation                                          \n" +
                "		IF ((pFromFeeder <> 1 AND pisVerify <> 1)) THEN                            \n" +
                "			-- IF(IFNULL(flag_isTeamOperation,0) = 1) THEN                        \n" +
                "			-- 	IF ((SELECT COUNT(1) FROM workorder_trans_umid_details wtud                                           \n" +
                "			-- 		WHERE wtud.deletedAt IS NULL AND wtud.refsidid IN (SELECT refsidid FROM temp_umid_details)                                          \n" +
                "			-- 		AND wtud.woOPID = pwoOPID AND wtud.woTransID = pwoTransID                                    \n" +
                "			-- 		AND IFNULL(transactionType,ptransactionType)=ptransactionType) > 0) THEN                        \n" +
                "			-- 		-- ALREADY_IN_USE                                        \n" +
                "			-- 		SET temp_umid_valid = 0;                        \n" +
                "			-- 		SET result = fun_checkAndInsertError('UMID003', 0, 1, 0, 0, 0, NULL, NULL, NULL);                              \n" +
                "			-- 	END IF;                        \n" +
                "			-- ELSE                        \n" +
                "				IF (pisConfirmed = 0 AND (SELECT COUNT(1) FROM workorder_trans_umid_details wtud                                           \n" +
                "			 		WHERE wtud.deletedAt IS NULL AND wtud.refsidid IN (SELECT refsidid FROM temp_umid_details)                                          \n" +
                "			 		AND wtud.woOPID = pwoOPID                               \n" +
                "			 		AND IFNULL(transactionType,ptransactionType)=ptransactionType              \n" +
                "			 		AND woTransID = pwoTransID) > 0) THEN                        \n" +
                "			 		-- ALREADY_IN_USE                         \n" +
                "			 		SET temp_umid_valid = 0;                                       \n" +
                "			 		SET result = fun_checkAndInsertError('UMID037', 0, 0, 1, 0, 0, \"DUP\", NULL, NULL);                              \n" +
                "			 	END IF;                        \n" +
                "			-- END IF;                         \n" +
                "		END IF;                            \n" +
                "		IF(temp_umid_valid = 1) THEN                        \n" +
                "			# check umid available in list                                    \n" +
                "			# yes -  check for pid in bom                                              \n" +
                "			# no - invalid umid                                              \n" +
                "			## restrict to use forever - restrictUsePermanently                                       \n" +
                "			IF((SELECT COUNT(1) FROM temp_umid_details) > 0) THEN                                    \n" +
                "				SELECT id,packagingGroupId,                                \n" +
                "					alertExpiryDays,expiryDate,                                 \n" +
                "					IFNULL(partLevelRestrictUsePermanently,0),IFNULL(partLevelRestrictPackagingUsePermanently,0),                                 \n" +
                "					IFNULL(RestrictFromUMID,0), isGoodPart, isCPN, binID , refsidid                        \n" +
                "					-- , refSalesOrderDetID                                          \n" +
                "				INTO temp_umid_comp_id,temp_umid_package_id,                                 \n" +
                "					temp_comp_alertExpiryDays, temp_expiryDate,                                \n" +
                "					temp_comp_partLevelRestrictUsePermanently,temp_comp_partLevelRestrictPackagingUsePermanently,                                    \n" +
                "					temp_umid_restrictFromUMID, temp_comp_isGoodPart, temp_comp_is_cpn, temp_umid_binID ,temp_umid_sid                   \n" +
                "					-- , temp_umid_refSalesOrderDetID                                \n" +
                "				FROM temp_umid_details WHERE uid=pUMID;                                 \n" +
                "  \n" +
                "				#check for part expired or not                                          \n" +
                "				#alertExpiryDays                                        \n" +
                "				#umidVerificationRequire                    \n" +
                "				SELECT `values` INTO temp_config_dateFormat FROM systemconfigrations WHERE `key`=\"DatePickerDateFormat\";                            \n" +
                "				IF((IFNULL(temp_expiryDate,0) > 0) AND (fun_DatetimetoUTCDateTime() > (temp_expiryDate))) THEN                                     \n" +
                "					-- EXPIRED_ON                                        \n" +
                "					SET result = fun_checkAndInsertError('UMID011', 0, 1, 0, 0, 0, temp_expiryDate, temp_config_dateFormat, NULL);                                        \n" +
                "				ELSEIF(temp_comp_partLevelRestrictUsePermanently = 1) THEN                                \n" +
                "					-- RESTRICTED_FROM_PART                                      \n" +
                "					SET result = fun_checkAndInsertError('UMID013', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                \n" +
                "				ELSEIF(temp_comp_partLevelRestrictPackagingUsePermanently = 1) THEN                                \n" +
                "					-- RESTRICTED_FROM_PART_PACKAGING                                        \n" +
                "					SET result = fun_checkAndInsertError('UMID022', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                 \n" +
                "				ELSEIF(temp_umid_restrictFromUMID = 1) THEN                                \n" +
                "					-- RESTRICTED_FROM_UMID                                        \n" +
                "					SET result = fun_checkAndInsertError('UMID012', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                 \n" +
                "				ELSEIF(temp_comp_isGoodPart <> 1) THEN                                \n" +
                "					-- RESTRICTED_INCORRECT_PART                                        \n" +
                "					SET result = fun_checkAndInsertError('UMID028', 0, 1, 0, 0, 0, NULL, NULL, NULL);                     \n" +
                "				ELSEIF((SELECT COUNT(1) FROM binmst b                     \n" +
                "						WHERE deletedAt IS NULL                     \n" +
                "						AND warehouseID IN                     \n" +
                "							(SELECT id FROM warehousemst WHERE deletedAt IS NULL AND parentWHID=-2)                     \n" +
                "						AND id=temp_umid_binID) = 0)  THEN                    \n" +
                "					-- UMID_MUST_BE_FROM_PRODUCTION_WAREHOUSE                                        \n" +
                "					SET result = fun_checkAndInsertError('UMID031', 0, 1, 0, 0, 0, NULL, NULL, NULL);    	                    \n" +
                "				ELSEIF((SELECT COUNT(1) FROM workorder_trans_umid_details ud                     \n" +
                "						WHERE deletedAt IS NULL                     \n" +
                "						AND reelstatus = 'P'  \n" +
                "                        AND transactionType  = 'F'  \n" +
                "                        AND refsidid = temp_umid_sid) > 0)  THEN                    \n" +
                "					-- UMID SHOULD NOT BE ALREADY  IN FEEDER                                       \n" +
                "					SET result = fun_checkAndInsertError('UMID041', 0, 1, 0, 0, 0, pUMID, NULL, NULL);                     								  \n" +
                "				ELSE                                                     \n" +
                "					#check current umid is assigned in bom or not                                              \n" +
                "					#check with part available in BOM or not                       \n" +
                "					-- check for subassembly flag in work order and then check kit allocation case in subaasembly too.                      \n" +
                "					SELECT IFNULL(isIncludeSubAssembly,0) INTO temp_isIncludeSubassembly FROM workorder WHERE woID=pwoID;                            \n" +
                "					IF (pFromFeeder = 1) THEN                                  \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;                                                 \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list                                                \n" +
                "						SELECT mfgpn AS mfgPN,                              \n" +
                "							AssemblyID AS AssemblyID,                                           \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,                                             \n" +
                "							restrictPart AS restrictPart,                                            \n" +
                "							custPN AS custPN,                                              \n" +
                "							custPNID AS custPNID,                                              \n" +
                "							PIDCode,                                              \n" +
                "							LineID,                                              \n" +
                "							id AS rfqLineItemsID,                                              \n" +
                "							refDesig AS refDesig,                                              \n" +
                "							isBOMPart AS isActualComponent,                                              \n" +
                "							isPackagingAlias,                                              \n" +
                "							isCPN,                                \n" +
                "							isInstall,                                \n" +
                "							isPurchase,                                \n" +
                "							isBuyDNPQty,                                \n" +
                "							customerApprovalCPN,                                \n" +
                "							partLevelRestrictUSEwithpermission,                                \n" +
                "							partLevelRestrictUsePermanently,                                \n" +
                "							partLevelRestrictPackagingUseWithpermission,                                \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,                                \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,                                \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,                                \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,                                \n" +
                "							lineLevelRestrictUseWithPermissionStep,                                \n" +
                "							lineLevelReStrictUsePermanentlyStep,                                \n" +
                "							lineLevelRestrictUseInBOMStep,                                \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,                      \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,                    \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,                              \n" +
                "							lineLevelCustomerApproval,                    \n" +
                "							RoHSStatusID                                              \n" +
                "						FROM vu_bom_details_with_alias WHERE AssyID = ppartID;         \n" +
                "                    ELSEIF pcheckKitAllocation = 'MISSINGPART' THEN   -- ADDED FOR MISSING PART AS  NO NEED TO CHECK KIT ALLOCATION       \n" +
                "                    #SELECT 'CREATE TEMP temp_assy_part_list TABLE ';      \n" +
                "                    DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;                                                 \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list                                                \n" +
                "						SELECT mfgpn AS mfgPN,                              \n" +
                "							AssemblyID AS AssemblyID,                                           \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,                                                                      \n" +
                "							restrictPart AS restrictPart,                                            \n" +
                "							custPN AS custPN,                                              \n" +
                "							custPNID AS custPNID,                                              \n" +
                "							PIDCode,                                              \n" +
                "							LineID,                                              \n" +
                "							id AS rfqLineItemsID,                                              \n" +
                "							refDesig AS refDesig,                                              \n" +
                "							isBOMPart AS isActualComponent,                                              \n" +
                "							isPackagingAlias,                                              \n" +
                "							isCPN,                                \n" +
                "							isInstall,                                \n" +
                "							isPurchase,                                \n" +
                "							isBuyDNPQty,                                \n" +
                "							customerApprovalCPN,                                \n" +
                "							partLevelRestrictUSEwithpermission,                                \n" +
                "							partLevelRestrictUsePermanently,                                \n" +
                "							partLevelRestrictPackagingUseWithpermission,                                \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,                                \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,                                \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,                                \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,                                \n" +
                "							lineLevelRestrictUseWithPermissionStep,                                \n" +
                "							lineLevelReStrictUsePermanentlyStep,                                \n" +
                "							lineLevelRestrictUseInBOMStep,                                \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,                         \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,                    \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,                                   \n" +
                "							lineLevelCustomerApproval,                    \n" +
                "							RoHSStatusID                                              \n" +
                "						FROM vu_bom_details_with_alias WHERE                       \n" +
                "						(AssyID IN (SELECT prPerPartID FROM part_sub_assy_relationship                           \n" +
                "									WHERE partID=ppartID AND deletedAt IS NULL)                      \n" +
                "						OR (AssyID IN (SELECT assyID FROM kit_allocation                       \n" +
                "							WHERE refSalesOrderDetID                           \n" +
                "							IN (SELECT salesOrderDetailID FROM workorder_salesorder_details                           \n" +
                "							WHERE deletedAt IS NULL AND woID=pwoID) AND `status` = \"A\" AND assyID=ppartID)));            \n" +
                "					ELSEIF (temp_isIncludeSubassembly = 1 AND pFromFeeder <> 1) THEN                      \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;                                                 \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list                                                \n" +
                "						SELECT mfgpn AS mfgPN,                              \n" +
                "							AssemblyID AS AssemblyID,                                           \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,                                                                      \n" +
                "							restrictPart AS restrictPart,                                            \n" +
                "							custPN AS custPN,                                              \n" +
                "							custPNID AS custPNID,                                              \n" +
                "							PIDCode,                                              \n" +
                "							LineID,                                              \n" +
                "							id AS rfqLineItemsID,                                              \n" +
                "							refDesig AS refDesig,                                              \n" +
                "							isBOMPart AS isActualComponent,                                              \n" +
                "							isPackagingAlias,                                              \n" +
                "							isCPN,                                \n" +
                "							isInstall,                                \n" +
                "							isPurchase,                                \n" +
                "							isBuyDNPQty,                                \n" +
                "							customerApprovalCPN,                                \n" +
                "							partLevelRestrictUSEwithpermission,                                \n" +
                "							partLevelRestrictUsePermanently,                                \n" +
                "							partLevelRestrictPackagingUseWithpermission,                                \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,                                \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,                                \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,                                \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,                                \n" +
                "							lineLevelRestrictUseWithPermissionStep,                                \n" +
                "							lineLevelReStrictUsePermanentlyStep,                                \n" +
                "							lineLevelRestrictUseInBOMStep,                                \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,                         \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,                    \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,                                   \n" +
                "							lineLevelCustomerApproval,                    \n" +
                "							RoHSStatusID                                              \n" +
                "						FROM vu_bom_details_with_alias WHERE                       \n" +
                "						(AssyID IN (SELECT prPerPartID FROM part_sub_assy_relationship                           \n" +
                "									WHERE partID=ppartID AND deletedAt IS NULL)                      \n" +
                "						OR (AssyID IN (SELECT assyID FROM kit_allocation                       \n" +
                "							WHERE refSalesOrderDetID                           \n" +
                "							IN (SELECT salesOrderDetailID FROM workorder_salesorder_details                           \n" +
                "							WHERE deletedAt IS NULL AND woID=pwoID) AND `status` = \"A\" AND assyID=ppartID)));                                 \n" +
                "					ELSE                               \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;                                                 \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list                                                \n" +
                "						SELECT mfgpn AS mfgPN,                                 \n" +
                "							AssemblyID AS AssemblyID,                                          \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,                                             \n" +
                "							restrictPart AS restrictPart,                                            \n" +
                "							custPN AS custPN,                                              \n" +
                "							custPNID AS custPNID,                                              \n" +
                "							PIDCode,                                              \n" +
                "							LineID,                                              \n" +
                "							id AS rfqLineItemsID,                                              \n" +
                "							refDesig AS refDesig,                                              \n" +
                "							isBOMPart AS isActualComponent,                                              \n" +
                "							isPackagingAlias,                                              \n" +
                "							isCPN,                                \n" +
                "							isInstall,                                \n" +
                "							isPurchase,                                \n" +
                "							isBuyDNPQty,                                \n" +
                "							customerApprovalCPN,                                \n" +
                "							partLevelRestrictUSEwithpermission,                                \n" +
                "							partLevelRestrictUsePermanently,                                \n" +
                "							partLevelRestrictPackagingUseWithpermission,                                \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,                                \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,                                \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,                                \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,                                \n" +
                "							lineLevelRestrictUseWithPermissionStep,                                \n" +
                "							lineLevelReStrictUsePermanentlyStep,                                \n" +
                "							lineLevelRestrictUseInBOMStep,                                \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,                       \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,                    \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,                                     \n" +
                "							lineLevelCustomerApproval,                    \n" +
                "							RoHSStatusID                                              \n" +
                "						FROM vu_bom_details_with_alias                           \n" +
                "							WHERE AssyID                           \n" +
                "							IN (SELECT assyID FROM kit_allocation                           \n" +
                "								WHERE refSalesOrderDetID                           \n" +
                "								IN (SELECT salesOrderDetailID FROM workorder_salesorder_details                           \n" +
                "									WHERE deletedAt IS NULL AND woID=pwoID) AND `status` = \"A\" AND assyID=ppartID);                          \n" +
                "							-- IN (SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID=ppartID AND deletedAt IS NULL);                              \n" +
                "  \n" +
                "					END IF;                                  \n" +
                "					# if umid assigned in bom than check for feeder details available for pid		                                              \n" +
                "					#yes - check with umid allocated in kit or not                                              \n" +
                "					#no - umid not assigned in bom        \n" +
                "  \n" +
                "					IF((SELECT COUNT(1) FROM temp_assy_part_list                                               \n" +
                "						WHERE mfgPNID IN (SELECT id FROM temp_umid_details)                     \n" +
                "						) = 0) THEN                                                \n" +
                "						IF (pFromFeeder = 1) THEN                    \n" +
                "							-- UMID_NOT_ASSIGNED                                    \n" +
                "							SET result = fun_checkAndInsertError('UMID008', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                             \n" +
                "						ELSE                                      \n" +
                "							## Check for Supply materials and tools                                           \n" +
                "							IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND                                           \n" +
                "								wop.partID = temp_umid_comp_id AND                                           \n" +
                "								wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN                                          \n" +
                "								SET result = 1;                    \n" +
                "							## Check for packaging part for umid.                                         \n" +
                "							ELSEIF((SELECT COUNT(1) FROM component_packagingalias cp WHERE cp.aliasgroupID = temp_umid_package_id                                        \n" +
                "								AND cp.componentID = temp_umid_comp_id AND cp.deletedAt IS NULL AND cp.aliasgroupID IN (SELECT c.packagingGroupId FROM component c                        \n" +
                "											WHERE c.id IN (SELECT woop.partID FROM workorder_operation_part woop WHERE woop.woID=pwoID AND woop.woOPID=pwoOPID AND woop.deletedAt IS NULL)                         \n" +
                "											AND c.deletedAt IS NULL))  > 0) THEN                                     \n" +
                "								SET result = 1;                    \n" +
                "							ELSE                                          \n" +
                "								-- UMID_NOT_IN_WORKORDER_OR_KIT                                   \n" +
                "								SET result = fun_checkAndInsertError('UMID007', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                   \n" +
                "							END IF;                                          \n" +
                "  \n" +
                "						END IF;                   \n" +
                "					ELSE                  \n" +
                "						SET result = 1;                               \n" +
                "					END IF;                                 \n" +
                "				END IF;                                \n" +
                "			ELSE                                            \n" +
                "				-- INVALID                                      \n" +
                "				SET result = fun_checkAndInsertError('UMID004', 0, 1, 0, 0, 0, NULL, NULL, NULL);  	                                    \n" +
                "			END IF;                                           \n" +
                "		END IF;                                             \n" +
                "	ELSE                                               \n" +
                "		-- REQUIRED                                        \n" +
                "		SET result = fun_checkAndInsertError('UMID005', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                \n" +
                "	END IF;                                              \n" +
                "	RETURN result;                                               \n" +
                "END;  \n" +
                /* **************************** add script version ->06-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2713,'2.00','v1','fun_checkUMIDScan - Shweta '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;
        case 2713:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-08-2020 *********************************** */
                "drop procedure if exists `Sproc_RetrieveSupplierQuote`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuote`(                                                  \n" +
                "	IN ppageIndex INT(11),                                                  \n" +
                "	IN precordPerPage INT(11),                                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                                  \n" +
                "	IN pWhereClause VARCHAR(16383),               \n" +
                "    IN pPartId INT(11),  \n" +
                "    IN pMfgType VARCHAR(255)  \n" +
                ")  \n" +
                "BEGIN                                                  \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"            \n" +
                "			SELECT 						    \n" +
                "				s.id,    \n" +
                "                sqpd.id AS supplierQuotePartDetID,      \n" +
                "				fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		    \n" +
                "                fun_getMfgCodeByID(c.mfgcodeID) mfgCode,    \n" +
                "				s.supplierID,    \n" +
                "                sqpd.partID,    \n" +
                "				c.mfgPN AS mfgPN,    \n" +
                "                c.mfgcodeID,    \n" +
                "				sc.mfgPN AS supplierPN,    \n" +
                "				sqpd.supplierPartID,        \n" +
                "                m.mfgName AS supplier,    \n" +
                "                s.quoteNumber,    \n" +
                "                s.quoteDate,    \n" +
                "                s.reference,    \n" +
                "                s.quoteStatus,    \n" +
                "                (                                \n" +
                "				 CASE  WHEN (s.quoteStatus = 'D') THEN                                 \n" +
                "				   'Draft'                                                                     \n" +
                "				  WHEN (s.quoteStatus = 'P') THEN                                 \n" +
                "				   'Published'                                                                    \n" +
                "				  ELSE                                 \n" +
                "				   ''                                 \n" +
                "				 END                                \n" +
                "				) AS `statusConvertedValue`,       \n" +
                "                (            \n" +
                "				CASE                                           \n" +
                "					WHEN (`sqpd`.`isActive` = 0) THEN 'Inactive'                                                   \n" +
                "					WHEN (`sqpd`.`isActive` = 1) THEN 'Active'                                           \n" +
                "					ELSE ''                                           \n" +
                "					END            \n" +
                "				) AS `isActiveConvertedValueDetail`,    \n" +
                "                sqpd.isActive,    \n" +
                "                c.isCustom,    \n" +
                "				sc.isCustom AS isCustomSupplier,    \n" +
                "				fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,    \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                        \n" +
                "				fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	    \n" +
                "				fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,     \n" +
                "				fun_getPartAttibutesBySupplierQuoteDetailID(sqpd.id) AS attributesList,    \n" +
                "				fun_getPartPricingCountBySupplierQuoteDetailID(sqpd.id) AS pricingCount,    \n" +
                "				fun_getUserNameByID(s.createdBy) createdby,                  \n" +
                "				fun_getUserNameByID(s.updatedBy) updatedby,              								               \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(s.createdAt) createdAt,                  \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(s.UpdatedAt) updatedAt    \n" +
                "			FROM    \n" +
                "				supplier_quote_parts_det sqpd	    \n" +
                "			RIGHT JOIN supplier_quote_mst s ON sqpd.supplierQuoteMstID = s.id      \n" +
                "            LEFT JOIN 	component c ON sqpd.partID = c.id AND c.deletedAt IS NULL                        \n" +
                "			LEFT JOIN	component sc ON sqpd.supplierPartID = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL             \n" +
                "            LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.deletedAt IS NULL        \n" +
                "            WHERE    \n" +
                "				sqpd.deletedAt is NULL AND     \n" +
                "                s.deletedAt IS NULL                    				    \n" +
                "	\");                      \n" +
                "  \n" +
                "	if (pMfgType != '' && pMfgType != null && pPartId != null) then  \n" +
                "		if(pMfgType = 'MFG' ) then  \n" +
                "			set @temp_Sproc_RetrieveSupplierQuote  = concat(@temp_Sproc_RetrieveSupplierQuote, ' AND sqpd.partID = ', pPartId, ' ');  \n" +
                "		else  \n" +
                "			set @temp_Sproc_RetrieveSupplierQuote  = concat(@temp_Sproc_RetrieveSupplierQuote, ' AND sqpd.supplierPartID = ', pPartId, ' ');  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;                                                  \n" +
                "	ELSE                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                  \n" +
                "	END IF;	                                                  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                  \n" +
                "		SET pWhereClause = '1=1' ;                                                  \n" +
                "	END IF;	                                                  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                  \n" +
                "	ELSE	                                                  \n" +
                "		SET rowNumWhere = '';                                                  \n" +
                "	END IF;	                                                   \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                               \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuote,\" ) c where 1=1 and \", pWhereClause);                              \n" +
                "	PREPARE query1 FROM @SQLStatement1;                              \n" +
                "	EXECUTE query1;                              \n" +
                "	DEALLOCATE PREPARE query1;                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuote,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                              \n" +
                "	PREPARE query2 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query2;                              \n" +
                "	DEALLOCATE PREPARE query2;                           \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2714,'2.00','V1','changes in SP - Ashish '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2714:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-08-2020 *********************************** */
                "ALTER TABLE salesordermst ADD COLUMN salesCommissionTo INT;  \n" +
                "ALTER TABLE salesordermst  \n" +
                "ADD CONSTRAINT FK_salesordermst_salesCommissionTo  \n" +
                "FOREIGN KEY (salesCommissionTo) REFERENCES employees(id);  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "ALTER TABLE salesorderdet ADD COLUMN salesCommissionTo INT;  \n" +
                "ALTER TABLE salesorderdet ADD COLUMN refRFQGroupID INT;  \n" +
                "ALTER TABLE salesorderdet ADD COLUMN refRFQQtyTurnTimeID INT;  \n" +
                "ALTER TABLE salesorderdet  \n" +
                "ADD CONSTRAINT FK_salesorderdet_salesCommissionTo  \n" +
                "FOREIGN KEY (salesCommissionTo) REFERENCES employees(id);  \n" +
                "  \n" +
                "ALTER TABLE salesorderdet  \n" +
                "ADD CONSTRAINT FK_salesorderdet_refRFQGroupID  \n" +
                "FOREIGN KEY (refRFQGroupID) REFERENCES rfqforms(id);  \n" +
                "  \n" +
                "ALTER TABLE salesorderdet  \n" +
                "ADD CONSTRAINT FK_salesorderdet_refRFQQtyTurnTimeID  \n" +
                "FOREIGN KEY (refRFQQtyTurnTimeID) REFERENCES rfq_assy_quantity_turn_time(id);  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "ALTER TABLE salesshippingmst ADD COLUMN releaseNumber INT;  \n" +
                "  \n" +
                "ALTER TABLE mfgcodemst ADD COLUMN freeOnBoard VARCHAR (2000);  \n" +
                "ALTER TABLE salesordermst ADD COLUMN freeOnBoard VARCHAR (2000);  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP TABLE IF EXISTS `salesorderdet_commission_attribute`;  \n" +
                "CREATE TABLE `salesorderdet_commission_attribute` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `refSalesorderdetID` int(11) NOT NULL,  \n" +
                "  `unitPrice` decimal(16,6) DEFAULT NULL,  \n" +
                "  `refQuoteAttributeId` int(11) NOT NULL,  \n" +
                "  `commissionPercentage` decimal(16,6) DEFAULT NULL,  \n" +
                "  `commissionValue` decimal(16,6) DEFAULT NULL,  \n" +
                "  `org_commissionPercentage` decimal(16,6) DEFAULT NULL,  \n" +
                "  `org_commissionValue` decimal(16,6) DEFAULT NULL,  \n" +
                "  `category` varchar(100) DEFAULT NULL,  \n" +
                "  `partID` int(11) DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint(1) DEFAULT '0',  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `createByRoleId` int(11) DEFAULT NULL,  \n" +
                "  `updateByRoleId` int(11) DEFAULT NULL,  \n" +
                "  `deleteByRoleId` int(11) DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_salesorderdet_commission_attribute_refSalesorderdetID` (`refSalesorderdetID`),  \n" +
                "  KEY `FK_salesorderdet_commission_attribute_refQuoteAttributeId` (`refQuoteAttributeId`),  \n" +
                "  KEY `FK_salesorderdet_commission_attribute_partID` (`partID`),  \n" +
                "  CONSTRAINT `FK_salesorderdet_commission_attribute_partID` FOREIGN KEY (`partID`) REFERENCES `component` (`id`),  \n" +
                "  CONSTRAINT `FK_salesorderdet_commission_attribute_refQuoteAttributeId` FOREIGN KEY (`refQuoteAttributeId`) REFERENCES `quotecharges_dynamic_fields_mst` (`id`),  \n" +
                "  CONSTRAINT `FK_salesorderdet_commission_attribute_refSalesorderdetID` FOREIGN KEY (`refSalesorderdetID`) REFERENCES `salesorderdet` (`id`)) ;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyQtyTurntimeByRfqGroup` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyQtyTurntimeByRfqGroup`(	                                                            \n" +
                "	IN prfqGroupID INT(11),   \n" +
                "	IN ppartid INT                                                           \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN                                                            \n" +
                "  \n" +
                "	DECLARE prfqassyID INT(11);                                                            \n" +
                "	    SELECT ra.id INTO prfqassyID FROM rfq_assemblies ra WHERE ra.rfqrefID=prfqGroupID AND ra.partID= ppartid;                                                      \n" +
                "  SELECT raqt.id,CONCAT(\"(\",raq.requestQty,\")\",\" \",raqt.turnTime,\" \",fun_getRFQUnitOfTime(raqt.unitoftime)) qtyTurnTime FROM rfq_assy_quantity_turn_time raqt INNER JOIN rfq_assy_quantity raq ON raq.id=raqt.rfqAssyQtyID  \n" +
                "WHERE raqt.isDeleted=0 AND raq.rfqAssyID=prfqassyID ORDER BY raq.id;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesCommissionDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesCommissionDetails`(                                                        \n" +
                "	IN psalesDetId INT(11),  \n" +
                "	IN ppartID INT(11)                        \n" +
                ")  \n" +
                "BEGIN                \n" +
                "  \n" +
                "   SELECT sc.id,sc.unitPrice,sc.commissionPercentage,sc.commissionValue,sc.org_commissionPercentage,sc.org_commissionValue,  \n" +
                "   qd.fieldName,sc.category  \n" +
                "    FROM salesorderdet_commission_attribute sc JOIN quotecharges_dynamic_fields_mst qd ON  \n" +
                "   sc.refQuoteAttributeId=qd.id WHERE sc.refSalesorderdetID=psalesDetId AND sc.isDeleted=0 AND sc.partid=ppartID;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWinOrFollowRfqQuoteGroup` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWinOrFollowRfqQuoteGroup`(                                                        \n" +
                "	IN ppartID INT(11)                        \n" +
                ")  \n" +
                "BEGIN                \n" +
                "  \n" +
                "   SELECT ra.rfqrefID,ra.status,ra.partID  \n" +
                "    FROM rfq_assemblies ra  WHERE ra.partID=ppartID AND ra.status IN (2,3) AND ra.isDeleted=0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getTotalSalesCommission` ;  \n" +
                "CREATE FUNCTION `fun_getTotalSalesCommission`(  	    \n" +
                "	pattributeID INT,    \n" +
                "	prfqAssyQuoteID INT ,  \n" +
                "	pcustomPartId INT,  \n" +
                "	ptype INT  \n" +
                "  \n" +
                ") RETURNS DECIMAL(16,6)  \n" +
                "BEGIN                      \n" +
                "	DECLARE pPrice DECIMAL (16,6);  \n" +
                "	DECLARE actualPrice DECIMAL (16,6);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempPricetable;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS  tempPricetable AS  \n" +
                "  \n" +
                "	SELECT * FROM ( WITH RECURSIVE cte AS              \n" +
                "	(              \n" +
                "	  SELECT id,refAttributeID FROM quotecharges_dynamic_fields_mst WHERE id=pattributeID AND deletedAt IS NULL        \n" +
                "  \n" +
                "  \n" +
                "	  UNION ALL              \n" +
                "  \n" +
                "	  SELECT ra.id,ra.refAttributeID FROM quotecharges_dynamic_fields_mst ra           \n" +
                "	  LEFT JOIN cte ON cte.refAttributeID=ra.id          \n" +
                "	   WHERE ra.id=cte.refAttributeID AND ra.deletedAt IS NULL      \n" +
                "  \n" +
                "  \n" +
                "	)              \n" +
                "	SELECT DISTINCT c.id        \n" +
                "	         FROM cte c) a ;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  IF(ptype=1)THEN  \n" +
                "	SELECT IFNULL(unitprice,0) INTO actualPrice FROM rfq_assy_quotations WHERE id=prfqAssyQuoteID;  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(ra.amount),0) INTO pPrice FROM rfq_assy_quotations_additionalcost ra INNER JOIN quotecharges_dynamic_fields_mst qd ON qd.id=ra.quotechargedynamicfieldid  \n" +
                "	WHERE qd.quoteAttributeType='R' AND qd.costingType='Material' AND ra.quotechargedynamicfieldid IN (SELECT tp.id FROM tempPricetable tp) AND ra.quotechargedynamicfieldid!=pattributeID AND ra.isdeleted=0;  \n" +
                "  \n" +
                "	SET pPrice=pPrice+actualPrice;  \n" +
                "  END IF;  \n" +
                "  IF(ptype=2)THEN  \n" +
                "	SELECT IFNULL(unitprice,0) INTO actualPrice FROM rfq_assy_quotations_customparts WHERE rfqAssyQuoteId=prfqAssyQuoteID AND id=pcustomPartId;  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(ra.amount),0) INTO pPrice FROM rfq_assy_quotations_additionalcost ra INNER JOIN quotecharges_dynamic_fields_mst qd ON qd.id=ra.quotechargedynamicfieldid  \n" +
                "	WHERE qd.quoteAttributeType='R' AND qd.costingType='Material' AND ra.quotechargedynamicfieldid IN (SELECT tp.id FROM tempPricetable tp) AND ra.quotechargedynamicfieldid!=pattributeID AND refCustomPartQuoteID=pcustomPartId AND ra.isdeleted=0;  \n" +
                "  \n" +
                "	SET pPrice=pPrice+actualPrice;  \n" +
                "  END IF;  \n" +
                "  IF(ptype=3)THEN  \n" +
                "	SELECT IFNULL(laborunitPrice,0) INTO actualPrice FROM rfq_assy_quotations WHERE id=prfqAssyQuoteID;  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(ra.amount),0) INTO pPrice FROM rfq_assy_quotations_additionalcost ra INNER JOIN quotecharges_dynamic_fields_mst qd ON qd.id=ra.quotechargedynamicfieldid  \n" +
                "	WHERE qd.quoteAttributeType='R' AND qd.costingType='Labor' AND ra.quotechargedynamicfieldid IN (SELECT tp.id FROM tempPricetable tp) AND ra.quotechargedynamicfieldid!=pattributeID  \n" +
                "	AND ra.isdeleted=0;  \n" +
                "  \n" +
                "	SET pPrice=pPrice+actualPrice;  \n" +
                "  END IF;  \n" +
                "	 RETURN    pPrice;                \n" +
                "END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_saveSalesCommissionDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_saveSalesCommissionDetails`(	                                                            \n" +
                "	IN prfqGroupID INT(11),   \n" +
                "	IN ppartid INT,  \n" +
                "	IN pqty INT,  \n" +
                "	IN pprice DECIMAL(16,6) ,  \n" +
                "	IN puserID INT,  \n" +
                "	IN psalesDetailID INT,  \n" +
                "	IN prefQtyTurnTimeID INT  \n" +
                "    )  \n" +
                "BEGIN    \n" +
                " DECLARE pstatus INT;  \n" +
                " DECLARE pAssyID INT;  \n" +
                " DECLARE pmaterialUnitPrice DECIMAL(16,6);  \n" +
                " DECLARE plaborUnitPrce DECIMAL(16,6);  \n" +
                " DECLARE prefQuoteID INT;  \n" +
                " DECLARE ptotalmaterialcost DECIMAL(16,6);  \n" +
                " DECLARE ptotalcustompartcost DECIMAL(16,6);  \n" +
                "IF(prfqGroupID IS NOT NULL)THEN                                                          \n" +
                "  \n" +
                "        SELECT ra.status,ra.id INTO pstatus,pAssyID FROM rfq_assemblies ra WHERE ra.partID=ppartID AND ra.rfqrefID=prfqGroupID AND ra.isDeleted=0;  \n" +
                "	IF(pstatus=2 OR pstatus=3)THEN  \n" +
                "		UPDATE rfq_assemblies SET `status`=3, winprice=pprice,winquantity=pqty,reason='Auto',quoteclosedDate=CURRENT_TIMESTAMP ,quoteclosedby=puserID,  \n" +
                "		updatedBy=puserID  \n" +
                "		WHERE partID=ppartID AND rfqrefID=prfqGroupID AND isDeleted=0;  \n" +
                "	END IF;  \n" +
                "	IF(SELECT COUNT(1) FROM salesorderdet_commission_attribute WHERE partid=ppartid AND refSalesorderdetID=psalesDetailID)=0 THEN  \n" +
                "		IF(pAssyID IS NOT NULL)THEN  \n" +
                "			SELECT unitprice,laborunitPrice,id INTO pmaterialUnitPrice,plaborUnitPrce,prefQuoteID FROM rfq_assy_quotations WHERE rfqAssyID=pAssyID AND rfqAssyQtyTurnTimeID=prefQtyTurnTimeID AND isDeleted=0  ORDER BY id DESC LIMIT 1;  \n" +
                "			-- material detail insert  \n" +
                "			IF(prefQuoteID IS NOT NULL) THEN  \n" +
                "				IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf   \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND rad.refCustomPartQuoteID IS NULL AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN  \n" +
                "  \n" +
                "					IF(pmaterialUnitPrice IS NOT NULL AND pmaterialUnitPrice>0)THEN  \n" +
                "  \n" +
                "					INSERT INTO salesorderdet_commission_attribute(refSalesorderdetID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,  \n" +
                "					org_commissionPercentage,org_commissionValue,createdBy,updatedBy,partid,category)  \n" +
                "  \n" +
                "					SELECT psalesDetailID,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid,prefQuoteID,rad.refCustomPartQuoteID,1),rad.quotechargedynamicfieldid,rad.percentage,rad.amount,rad.percentage,rad.amount,puserID,puserID,ppartID,qdf.costingType FROM rfq_assy_quotations_additionalcost rad   \n" +
                "					INNER JOIN quotecharges_dynamic_fields_mst qdf   \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND  rad.refCustomPartQuoteID IS NULL  AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0;  \n" +
                "  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf   \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id=rad.refCustomPartQuoteID  \n" +
                "					WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1   \n" +
                "					AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN  \n" +
                "  \n" +
                "					INSERT INTO salesorderdet_commission_attribute(refSalesorderdetID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,  \n" +
                "					org_commissionPercentage,org_commissionValue,createdBy,updatedBy,partid,category)  \n" +
                "  \n" +
                "					SELECT psalesDetailID,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid,prefQuoteID,rad.refCustomPartQuoteID,2),rad.quotechargedynamicfieldid,rad.percentage,rad.amount,rad.percentage,rad.amount,puserID,  \n" +
                "					puserID,ppartID,fun_getAssyPIDCodeByID(rac.mfgPNID)   \n" +
                "					FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf   \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id=rad.refCustomPartQuoteID  \n" +
                "					WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1   \n" +
                "					AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0;  \n" +
                "  \n" +
                "  \n" +
                "				END IF;  \n" +
                "				-- IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf   \n" +
                "				-- 	ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' and rad.isdeleted=0)>0 THEN  \n" +
                "				-- 	if(prefQuoteID is not null)then  \n" +
                "				-- 		SELECT ifnull(materialCost,0) INTO ptotalmaterialcost FROM rfq_assy_quotations WHERE rfqAssyID=pAssyID AND rfqAssyQtyTurnTimeID=prefQtyTurnTimeID AND isDeleted=0  ORDER BY id DESC LIMIT 1;					  \n" +
                "				-- 	SELECT IFNULL(SUM(totalprice),0) into ptotalcustompartcost FROM rfq_assy_quotations_customparts where rfqAssyQuoteId=prefQuoteID and isdeleted=0;  \n" +
                "				-- 	set @totalPrice=ptotalmaterialcost+ptotalcustompartcost;  \n" +
                "				-- 	if(@totalPrice>0)then  \n" +
                "				-- 	INSERT INTO salesorderdet_commission_attribute(refSalesorderdetID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,  \n" +
                "				-- 	org_commissionPercentage,org_commissionValue,createdBy,updatedBy,partid,category)  \n" +
                "  \n" +
                "				-- 	SELECT psalesDetailID,@totalPrice,rad.quotechargedynamicfieldid,rad.percentage,rad.amount,rad.percentage,rad.amount,puserID,puserID,ppartID,qdf.costingType FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf   \n" +
                "				-- 	ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' and rad.isdeleted=0;  \n" +
                "				-- 	end if;  \n" +
                "				-- 	end if;  \n" +
                "				-- END IF;  \n" +
                "				IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf   \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0)>0 THEN  \n" +
                "					IF(plaborUnitPrce IS NOT NULL AND plaborUnitPrce>0)THEN  \n" +
                "					INSERT INTO salesorderdet_commission_attribute(refSalesorderdetID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,  \n" +
                "					org_commissionPercentage,org_commissionValue,createdBy,updatedBy,partid,category)  \n" +
                "  \n" +
                "					SELECT psalesDetailID,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid,prefQuoteID,rad.refCustomPartQuoteID,3),rad.quotechargedynamicfieldid,rad.percentage,rad.amount,rad.percentage,rad.amount,puserID,puserID,ppartID,qdf.costingType FROM rfq_assy_quotations_additionalcost rad   \n" +
                "					INNER JOIN quotecharges_dynamic_fields_mst qdf   \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0;  \n" +
                "  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END IF;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "ALTER TABLE salesorderdet ADD COLUMN custPOLineNumber INT;  \n" +
                "  \n" +
                "ALTER TABLE salesordermst ADD COLUMN intermediateShipmentId INT;  \n" +
                "ALTER TABLE salesordermst  \n" +
                "ADD CONSTRAINT FK_salesordermst_intermediateShipmentId  \n" +
                "FOREIGN KEY (intermediateShipmentId) REFERENCES customer_addresses(id);  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP TABLE IF EXISTS `customer_packingslip`;  \n" +
                "CREATE TABLE `customer_packingslip` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `customerID` int(11) NOT NULL,  \n" +
                "  `packingSlipType` int(11) NOT NULL COMMENT '1-MISC,2-PO',  \n" +
                "  `transType` int(11) NOT NULL COMMENT '1-PackingSlip,2-Invoice',  \n" +
                "  `status` int(11) NOT NULL COMMENT '1-Draft,2-Publish',  \n" +
                "  `refSalesOrderID` int(11) DEFAULT NULL,  \n" +
                "  `poNumber` varchar(50) NOT NULL,  \n" +
                "  `poDate` datetime NOT NULL,  \n" +
                "  `soNumber` varchar(50) NOT NULL,  \n" +
                "  `soDate` datetime NOT NULL,  \n" +
                "  `packingSlipNumber` varchar(50) NOT NULL,  \n" +
                "  `packingSlipDate` datetime NOT NULL,  \n" +
                "  `refEpicorePSNumber` int(11) DEFAULT NULL,  \n" +
                "  `invoiceNumber` varchar(50) DEFAULT NULL,  \n" +
                "  `invoiceDate` datetime DEFAULT NULL,  \n" +
                "  `refEpicoreINVNumber` int(11) DEFAULT NULL,  \n" +
                "  `shippingMethodId` int(11) DEFAULT NULL,  \n" +
                "  `shipToId` int(11) DEFAULT NULL,  \n" +
                "  `contactPersonId` int(11) DEFAULT NULL,  \n" +
                "  `packingSlipComment` varchar(2000) DEFAULT NULL,  \n" +
                "  `freeOnBoard` varchar(2000) DEFAULT NULL,  \n" +
                "  `paymentNumber` varchar(100) DEFAULT NULL,  \n" +
                "  `paymentDate` datetime DEFAULT NULL,  \n" +
                "  `paymentAmount` decimal(16,6) DEFAULT NULL,  \n" +
                "  `paymentStatus` char(10) DEFAULT NULL,  \n" +
                "  `headerComment` text,  \n" +
                "  `intermediateShipmentId` int(11) DEFAULT NULL,  \n" +
                "  `sorevision` varchar(50) DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `createdAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `createByRoleId` int(11) DEFAULT NULL,  \n" +
                "  `updateByRoleId` int(11) DEFAULT NULL,  \n" +
                "  `deleteByRoleId` int(11) DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_customer_packingslip_customerID` (`customerID`),  \n" +
                "  KEY `FK_customer_packingslip_refSalesOrderID` (`refSalesOrderID`),  \n" +
                "  KEY `FK_customer_packingslip_shippingMethodId` (`shippingMethodId`),  \n" +
                "  KEY `FK_customer_packingslip_shipToId` (`shipToId`),  \n" +
                "  KEY `FK_customer_packingslip_intermediateShipmentId` (`intermediateShipmentId`),  \n" +
                "  KEY `FK_customer_packingslip_contactPersonId` (`contactPersonId`),  \n" +
                "  CONSTRAINT `FK_customer_packingslip_contactPersonId` FOREIGN KEY (`contactPersonId`) REFERENCES `customer_contactperson` (`personId`),  \n" +
                "  CONSTRAINT `FK_customer_packingslip_customerID` FOREIGN KEY (`customerID`) REFERENCES `mfgcodemst` (`id`),  \n" +
                "  CONSTRAINT `FK_customer_packingslip_intermediateShipmentId` FOREIGN KEY (`intermediateShipmentId`) REFERENCES `customer_addresses` (`id`),  \n" +
                "  CONSTRAINT `FK_customer_packingslip_refSalesOrderID` FOREIGN KEY (`refSalesOrderID`) REFERENCES `salesordermst` (`id`),  \n" +
                "  CONSTRAINT `FK_customer_packingslip_shipToId` FOREIGN KEY (`shipToId`) REFERENCES `customer_addresses` (`id`),  \n" +
                "  CONSTRAINT `FK_customer_packingslip_shippingMethodId` FOREIGN KEY (`shippingMethodId`) REFERENCES `genericcategory` (`gencCategoryID`)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP TABLE IF EXISTS `customer_packingslip_det`;  \n" +
                "CREATE TABLE `customer_packingslip_det` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `refCustPackingSlipID` int(11) NOT NULL,  \n" +
                "  `refSalesorderDetid` int(11) DEFAULT NULL,  \n" +
                "  `partId` int(11) NOT NULL,  \n" +
                "  `custPOLineID` int(11) DEFAULT NULL,  \n" +
                "  `poQty` int(11) NOT NULL,  \n" +
                "  `shipQty` int(11) NOT NULL,  \n" +
                "  `remainingQty` int(11) NOT NULL,  \n" +
                "  `shippedQty` int(11) NOT NULL,  \n" +
                "  `unitPrice` decimal(16,6) DEFAULT NULL,  \n" +
                "  `shippingNotes` varchar(255) DEFAULT NULL,  \n" +
                "  `whID` int(11) DEFAULT NULL,  \n" +
                "  `binID` int(11) DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint(1) DEFAULT '0',  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `createByRoleId` int(11) DEFAULT NULL,  \n" +
                "  `updateByRoleId` int(11) DEFAULT NULL,  \n" +
                "  `deleteByRoleId` int(11) DEFAULT NULL,  \n" +
                "  `shippingId` int(11) DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_customer_packingslip_det_refCustPackingSlipID` (`refCustPackingSlipID`),  \n" +
                "  KEY `FK_customer_packingslip_det_refSalesorderDetid` (`refSalesorderDetid`),  \n" +
                "  KEY `FK_customer_packingslip_det_partId` (`partId`),  \n" +
                "  KEY `FK_customer_packingslip_det_whID` (`whID`),  \n" +
                "  KEY `FK_customer_packingslip_det_binID` (`binID`),  \n" +
                "  KEY `FK_customer_packingslip_det_shippingId` (`shippingId`),  \n" +
                "  CONSTRAINT `FK_customer_packingslip_det_binID` FOREIGN KEY (`binID`) REFERENCES `binmst` (`id`),  \n" +
                "  CONSTRAINT `FK_customer_packingslip_det_partId` FOREIGN KEY (`partId`) REFERENCES `component` (`id`),  \n" +
                "  CONSTRAINT `FK_customer_packingslip_det_refCustPackingSlipID` FOREIGN KEY (`refCustPackingSlipID`) REFERENCES `customer_packingslip` (`id`),  \n" +
                "  CONSTRAINT `FK_customer_packingslip_det_refSalesorderDetid` FOREIGN KEY (`refSalesorderDetid`) REFERENCES `salesorderdet` (`id`),  \n" +
                "  CONSTRAINT `FK_customer_packingslip_det_shippingId` FOREIGN KEY (`shippingId`) REFERENCES `salesshippingmst` (`shippingID`),  \n" +
                "  CONSTRAINT `FK_customer_packingslip_det_whID` FOREIGN KEY (`whID`) REFERENCES `warehousemst` (`ID`)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */

                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2715,'2.00','V1',' Sales Order Commission details-champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2715:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "ALTER TABLE shippedassembly ADD COLUMN refCustPackingSlipDetID INT;  \n" +
                "ALTER TABLE shippedassembly  \n" +
                "ADD CONSTRAINT FK_shippedassembly_refCustPackingSlipDetID  \n" +
                "FOREIGN KEY (refCustPackingSlipDetID) REFERENCES customer_packingslip_det(id);  \n" +
                "ALTER TABLE shippedassembly ADD COLUMN woNumber VARCHAR(20);  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report` ;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS   \n" +
                "SELECT  \n" +
                "  `a`.`wosalesOrderDetail`       AS `wosalesOrderDetail`,  \n" +
                "  `a`.`salesOrderId`             AS `Sales Order ID`,  \n" +
                "  `a`.`salesOrderNumber`         AS `Sales Order`,  \n" +
                "  `a`.`poNumber`                 AS `Po Number`,  \n" +
                "  `a`.`poDate`                   AS `Po Date`,  \n" +
                "  `a`.`customerID`               AS `Customer ID`,  \n" +
                "  `a`.`contactPersonID`          AS `ContactPerson ID`,  \n" +
                "  `a`.`shippingMethodID`         AS `ShippingMethod ID`,  \n" +
                "  `a`.`status`                   AS `Sales Order Status`,  \n" +
                "  `a`.`revision`                 AS `Revision`,  \n" +
                "  `a`.`shippingComment`          AS `Shipping Comment`,  \n" +
                "  `a`.`termsID`                  AS `Terms ID`,  \n" +
                "  `a`.`soDate`                   AS `So Date`,  \n" +
                "  `a`.`partID`                   AS `PartID`,  \n" +
                "  `a`.`PIDCode`                  AS `Assy ID`,  \n" +
                "  `a`.`mfgPN`                    AS `Assy Name`,  \n" +
                "  `a`.`rev`                      AS `Assy Revision`,  \n" +
                "  `a`.`nickName`                 AS `NickName`,  \n" +
                "  `a`.`liveVersion`              AS `liveVersion`,  \n" +
                "  `a`.`mfgPNDescription`         AS `AssyDescr`,  \n" +
                "  `a`.`isCustomPart`             AS `isCustomPart`,  \n" +
                "  `a`.`qty`                      AS `PO Qty`,  \n" +
                "  `a`.`ShippedQty`               AS `Shipped Qty`,  \n" +
                "  `a`.`shippingQty`              AS `shippingQty`,  \n" +
                "  `a`.`companyName`              AS `Company Name`,  \n" +
                "  `a`.`mfgCode`                  AS `mfgCode`,  \n" +
                "  `a`.`fullName`                 AS `Full Name`,  \n" +
                "  `a`.`gencCategoryCode`         AS `GencCategory Code`,  \n" +
                "  `a`.`isCancle`                 AS `isCancle`,  \n" +
                "  `a`.`cancleReason`             AS `cancleReason`,  \n" +
                "  `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "  `a`.`materialDueDate`          AS `materialDueDate`,  \n" +
                "  `a`.`shippingDate`             AS `shippingDate`,  \n" +
                "  `a`.`prcNumberofWeek`          AS `prcNumberofWeek`,  \n" +
                "  `a`.`remark`                   AS `remark`,  \n" +
                "  `a`.`price`                    AS `price`,  \n" +
                "  `a`.`mrpQty`                   AS `mrpQty`,  \n" +
                "  `a`.`kitQty`                   AS `kitQty`,  \n" +
                "  `a`.`isHotJob`                 AS `isHotJob`,  \n" +
                "  `a`.`RoHSStatusID`             AS `RoHSStatusID`,  \n" +
                "  `a`.`RoHSName`                 AS `RoHSName`,  \n" +
                "  `a`.`rohsIcon`                 AS `RohsIcon`,  \n" +
                "  (IFNULL(`a`.`qty`,0) - IFNULL(`a`.`ShippedQty`,0)) AS `Balanced Due Qty`,  \n" +
                "  (CASE WHEN (`a`.`isCancle` = 1) THEN 'Canceled' WHEN (((IFNULL(`a`.`qty`,0) - IFNULL(`a`.`ShippedQty`,0)) > 0) OR ISNULL(`a`.`salesOrderDetailId`)) THEN 'In Progress' ELSE 'Completed' END) AS `Status`,  \n" +
                "  `a`.`modifyDate`               AS `modifyDate`,  \n" +
                "  `a`.`createdDate`              AS `createdDate`,  \n" +
                "  `a`.`soModifiedBy`             AS `soModifiedBy`,  \n" +
                "  `a`.`soCreatedBy`              AS `soCreatedBy`,  \n" +
                "  `a`.`updatedbyRole`            AS `updatedbyRole`,  \n" +
                "  `a`.`deletedbyRole`            AS `deletedbyRole`,  \n" +
                "  `a`.`salesOrderDetailId`       AS `SalesOrderDetailId`,  \n" +
                "  `a`.`releasedWorkorder`        AS `releasedWorkorder`,  \n" +
                "  `a`.`kitnumber`                AS `kitnumber`,  \n" +
                "  `a`.`custPOLineNumber`         AS `custPOLineNumber`,  \n" +
                "  `a`.`freeOnBoard`              AS `Free On Board`,  \n" +
                "  `a`.`intermediateShipmentId`   AS `intermediateShipmentId`,  \n" +
                "  `a`.`billingAddressID`         AS `billingAddressID`,  \n" +
                "  `a`.`shippingAddressID`        AS `shippingAddressID`  \n" +
                "FROM (SELECT  \n" +
                "        `sm`.`id`                       AS `salesOrderId`,  \n" +
                "        `sm`.`salesOrderNumber`         AS `salesOrderNumber`,  \n" +
                "        `sm`.`poNumber`                 AS `poNumber`,  \n" +
                "        `sm`.`poDate`                   AS `poDate`,  \n" +
                "        `sm`.`customerID`               AS `customerID`,  \n" +
                "        `sm`.`contactPersonID`          AS `contactPersonID`,  \n" +
                "        `sm`.`shippingMethodID`         AS `shippingMethodID`,  \n" +
                "        `sm`.`status`                   AS `status`,  \n" +
                "        `sm`.`revision`                 AS `revision`,  \n" +
                "        `sm`.`shippingComment`          AS `shippingComment`,  \n" +
                "        `sm`.`termsID`                  AS `termsID`,  \n" +
                "        `sm`.`soDate`                   AS `soDate`,  \n" +
                "        `sm`.`billingAddressID`         AS `billingAddressID`,  \n" +
                "        `sm`.`shippingAddressID`        AS `shippingAddressID`,  \n" +
                "        `sm`.`freeOnBoard`              AS `freeOnBoard`,  \n" +
                "        `sm`.`intermediateShipmentId`   AS `intermediateShipmentId`,  \n" +
                "        `FUN_GETUSERNAMEBYID`(  \n" +
                "`sm`.`updatedBy`)  AS `soModifiedBy`,  \n" +
                "        `FUN_GETUSERNAMEBYID`(  \n" +
                "`sm`.`createdBy`)  AS `soCreatedBy`,  \n" +
                "        `FUN_GETROLEBYID`(  \n" +
                "`sm`.`updateByRoleId`)  AS `updatedbyRole`,  \n" +
                "        `FUN_GETROLEBYID`(  \n" +
                "`sm`.`deleteByRoleId`)  AS `deletedbyRole`,  \n" +
                "        `FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE`(  \n" +
                "`sm`.`createdAt`)  AS `createdDate`,  \n" +
                "        `FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE`(  \n" +
                "`sm`.`updatedAt`)  AS `modifyDate`,  \n" +
                "        (SELECT  \n" +
                "           1  \n" +
                "         FROM `workorder_salesorder_details` `x`  \n" +
                "         WHERE ((`x`.`salesOrderDetailID` = `a`.`id`)  \n" +
                "                AND (`x`.`isDeleted` = 0))  \n" +
                "         LIMIT 1) AS `wosalesOrderDetail`,  \n" +
                "        `co`.`PIDCode`                  AS `PIDCode`,  \n" +
                "        `co`.`mfgPN`                    AS `mfgPN`,  \n" +
                "        `co`.`rev`                      AS `rev`,  \n" +
                "        `co`.`nickName`                 AS `nickName`,  \n" +
                "        `co`.`liveVersion`              AS `liveVersion`,  \n" +
                "        `co`.`mfgPNDescription`         AS `mfgPNDescription`,  \n" +
                "        `co`.`isCustom`                 AS `isCustomPart`,  \n" +
                "        CONCAT('(',`cu`.`mfgCode`,') ',`cu`.`mfgName`) AS `companyName`,  \n" +
                "        `cu`.`mfgCode`                  AS `mfgCode`,  \n" +
                "        CONCAT(`cc`.`firstName`,' ',`cc`.`lastName`) AS `fullName`,  \n" +
                "        `gc`.`gencCategoryCode`         AS `gencCategoryCode`,  \n" +
                "        `co`.`RoHSStatusID`             AS `RoHSStatusID`,  \n" +
                "        `roh`.`name`                    AS `RoHSName`,  \n" +
                "        `roh`.`rohsIcon`                AS `rohsIcon`,  \n" +
                "        `a`.`qty`                       AS `qty`,  \n" +
                "        `a`.`id`                        AS `salesOrderDetailId`,  \n" +
                "        `a`.`kitNumber`                 AS `kitnumber`,  \n" +
                "        `a`.`partID`                    AS `partID`,  \n" +
                "        `a`.`isCancle`                  AS `isCancle`,  \n" +
                "        `a`.`isHotJob`                  AS `isHotJob`,  \n" +
                "        `a`.`cancleReason`              AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate`  AS `materialTentitiveDocDate`,  \n" +
                "        (SELECT  \n" +
                "           MIN(`ssm`.`shippingDate`)  \n" +
                "         FROM `salesshippingmst` `ssm`  \n" +
                "         WHERE ((`ssm`.`sDetID` = `a`.`id`)  \n" +
                "                AND (`ssm`.`isDeleted` = 0))) AS `shippingDate`,  \n" +
                "        `a`.`materialDueDate`           AS `materialDueDate`,  \n" +
                "        `a`.`prcNumberofWeek`           AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark`                    AS `remark`,  \n" +
                "        `a`.`price`                     AS `price`,  \n" +
                "        `a`.`mrpQty`                    AS `mrpQty`,  \n" +
                "        `a`.`kitQty`                    AS `kitQty`,  \n" +
                "        `a`.`shippingQty`               AS `shippingQty`,  \n" +
                "        `a`.`custPOLineNumber`          AS `custPOLineNumber`,  \n" +
                "        (SELECT  \n" +
                "           IFNULL(SUM(`shippedassembly`.`shippedqty`),0)  \n" +
                "         FROM `shippedassembly`  \n" +
                "         WHERE ((`shippedassembly`.`partID` = `a`.`partID`)  \n" +
                "                AND (`shippedassembly`.`isDeleted` = 0)  \n" +
                "                AND `shippedassembly`.`shippingId` IN(SELECT  \n" +
                "                                                        `salesshippingmst`.`shippingID`  \n" +
                "                                                      FROM `salesshippingmst`  \n" +
                "                                                      WHERE ((`salesshippingmst`.`sDetID` = `a`.`id`)  \n" +
                "                                                             AND (IFNULL(`salesshippingmst`.`isDeleted`,0) = 0))))) AS `ShippedQty`,  \n" +
                "        `k`.`releasedWorkorder`         AS `releasedWorkorder`  \n" +
                "      FROM (((((((`salesordermst` `sm`  \n" +
                "               LEFT JOIN `salesorderdet` `a`  \n" +
                "                 ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "                      AND ISNULL(`a`.`deletedAt`)  \n" +
                "                      AND ISNULL(`sm`.`deletedAt`))))  \n" +
                "              LEFT JOIN `mfgcodemst` `cu`  \n" +
                "                ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "                     AND ISNULL(`cu`.`deletedAt`))))  \n" +
                "             LEFT JOIN `component` `co`  \n" +
                "               ON ((`a`.`partID` = `co`.`id`)))  \n" +
                "            LEFT JOIN `rfq_rohsmst` `roh`  \n" +
                "              ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "                   AND ISNULL(`roh`.`deletedAt`))))  \n" +
                "           LEFT JOIN `customer_contactperson` `cc`  \n" +
                "             ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "                  AND ISNULL(`cc`.`deletedAt`))))  \n" +
                "          LEFT JOIN `genericcategory` `gc`  \n" +
                "            ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "                 AND ISNULL(`gc`.`deletedAt`))))  \n" +
                "         LEFT JOIN (SELECT  \n" +
                "                      `s`.`salesOrderDetID`            AS `salesOrderDetID`,  \n" +
                "                      `s`.`refAssyId`                  AS `refAssyId`,  \n" +
                "                      GROUP_CONCAT(DISTINCT ' ',`wo`.`woNumber` SEPARATOR ',') AS `releasedWorkorder`  \n" +
                "                    FROM (`salesorder_plan_detailsmst` `s`  \n" +
                "                       LEFT JOIN `workorder` `wo`  \n" +
                "                         ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
                "                    GROUP BY `s`.`salesOrderDetID`) `k`  \n" +
                "           ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
                "      WHERE ISNULL(`sm`.`deletedAt`)) `a`;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesorderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(                                                                   \n" +
                " IN ppageIndex INT(11),                                                                  \n" +
                " IN precordPerPage INT(11),                                                                  \n" +
                " IN pOrderBy VARCHAR(255),                                                                   \n" +
                " IN pWhereClause VARCHAR(16383),                                                      \n" +
                " IN pIsKitList TINYINT(1),                              \n" +
                " IN pPlannedStatus VARCHAR(10),                              \n" +
                " IN pSalesOrderDetailId INT,          \n" +
                " IN pIsPendingWOCreationList TINYINT(1),          \n" +
                " IN pCustomPendingWOCreationWhereClause VARCHAR(255)                                          \n" +
                ")  \n" +
                "BEGIN                                                                        \n" +
                " DECLARE pOffset INT(11);                                                                  \n" +
                " DECLARE rowNumWhere VARCHAR(255);                                 \n" +
                " DECLARE v_PlannedWhere VARCHAR(1000);                                 \n" +
                " DECLARE v_SalesOrderDetailWhere VARCHAR(1000);                                 \n" +
                " DECLARE v_DynamicJoin VARCHAR(16383);                    \n" +
                " DECLARE v_DynamicColumns VARCHAR(16383);                    \n" +
                " DECLARE v_PendingWOWhereClause VARCHAR(16383);                    \n" +
                " SET v_PendingWOWhereClause='';       \n" +
                " IF(pIsKitList=1) THEN                    \n" +
                "  SET v_DynamicColumns = CONCAT(\",                    \n" +
                "    hu.refType as refTypeKR,hu.status as haltStatusKR,                    \n" +
                "    (CASE                              \n" +
                "          WHEN hu.status = 'H' THEN                   \n" +
                "           CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))                                      \n" +
                "          ELSE ''                            \n" +
                "    END) AS reasonKR,                  \n" +
                "    hutt.refType as refTypePO,hutt.status as haltStatusPO,                    \n" +
                "    (CASE                              \n" +
                "          WHEN hutt.status = 'H' THEN                   \n" +
                "           CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))                                      \n" +
                "          ELSE ''                            \n" +
                "    END) AS reasonPO\");                    \n" +
                "  SET v_DynamicJoin = CONCAT(\"                      \n" +
                "  LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refSalesOrderDetID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refSalesOrderDetID = htt.refSalesOrderDetID and htt.refType='KR' and htt.deletedAt is null)                   \n" +
                "  LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refSalesOrderDetID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refSalesOrderDetID = httt.refSalesOrderDetID and httt.refType='PO' and httt.deletedAt is null)\") ;                    \n" +
                " ELSE                    \n" +
                "  SET v_DynamicColumns=CONCAT(\",hut.refType as refTypePO,hut.status as haltStatusPO,                    \n" +
                "  (CASE                              \n" +
                "          WHEN hut.status = 'H' THEN                   \n" +
                "           CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))                                      \n" +
                "          ELSE ''                           \n" +
                "  END) AS reasonPO\");                    \n" +
                "  SET v_DynamicJoin =CONCAT(\"LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refSalesOrderDetID and hut.id = (SELECT MAX(ht.id) FROM holdunholdtrans ht WHERE hut.refSalesOrderDetID = ht.refSalesOrderDetID and ht.refType='PO' and ht.deletedAt is null)\") ;                    \n" +
                " END IF;                    \n" +
                " IF(pIsPendingWOCreationList = 1) THEN         \n" +
                "  SET v_PendingWOWhereClause=CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');       \n" +
                "  SET v_DynamicColumns=CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber\");                    \n" +
                "  SET v_DynamicJoin =CONCAT(v_DynamicJoin, \"LEFT JOIN (                  \n" +
                "  SELECT co.PIDCODE AS PIDCode, SUM(vusalesorderdet.totalPOQty) AS totalWO, GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber, vusalesorderdet.poNumber, vusalesorderdet.salesOrderNumber          \n" +
                "  FROM workorder wo                                                                      \n" +
                "        LEFT JOIN component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3            \n" +
                "        LEFT JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID          \n" +
                "        GROUP BY salesOrderNumber, poNumber, PIDCode ) AS WO           \n" +
                "  ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)\") ;                    \n" +
                " END IF;          \n" +
                "  \n" +
                " SET @temp_Sproc_GetSalesorderList = CONCAT(\"                                                \n" +
                "  SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,                                                                \n" +
                "    (                              \n" +
                "     CASE  WHEN (`vuss`.`isHotJob` = 0) THEN                               \n" +
                "       'No'                                                                  \n" +
                "      WHEN (`vuss`.`isHotJob` = 1) THEN                               \n" +
                "       'Yes'                               \n" +
                "      ELSE                               \n" +
                "       ''                               \n" +
                "     END                              \n" +
                "    ) AS `isHotJobValue`,                                                                  \n" +
                "    `vuss`.`Sales Order ID` AS id,                                                                \n" +
                "    `vuss`.`salesOrderDetailId` AS salesOrderDetailId,                                                              \n" +
                "    `vuss`.`Sales Order` AS salesOrderNumber,                                                                  \n" +
                "    `vuss`.`Po Number` AS poNumber,                                                                  \n" +
                "    `vuss`.`Po Date` AS poDate,                                                                  \n" +
                "    `vuss`.`Customer ID` AS customerID,                                                                  \n" +
                "    `vuss`.`ContactPerson ID` AS contactPersonID,                                                                  \n" +
                "    `vuss`.`ShippingMethod ID` AS shippingMethodID,                                                                  \n" +
                "    `vuss`.`Sales Order Status` AS `status`,                                                                  \n" +
                "    `vuss`.`Revision` AS revision,                                                                  \n" +
                "    `vuss`.`Shipping Comment` AS shippingComment,                                                                  \n" +
                "    `vuss`.`Terms ID` AS termsID,                                                                  \n" +
                "    `vuss`.`So Date` AS soDate,                                                                  \n" +
                "    `vuss`.`Company Name` AS companyName,          \n" +
                "                `vuss`.`mfgCode` AS mfgCode,          \n" +
                "    `vuss`.`Full Name` AS fullName,                                                                  \n" +
                "    `vuss`.`GencCategory Code` AS genCategoryCode,                                                              \n" +
                "    `vuss`.`PO Qty` AS qty,                                                              \n" +
                "    `vuss`.`mrpQty` AS mrpQty,    \n" +
                "    `vuss`.`custPOLineNumber` AS custPOLineNumber,             \n" +
                "    `vuss`.`kitQty` AS kitQty, \",                                                       \n" +
                "     IF(pIsPendingWOCreationList=1, \"\", \"`vuss`.`price` AS price,\"),                                                              \n" +
                "    \"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,                                                              \n" +
                "    `vuss`.`materialDueDate` AS materialDueDate,                                                              \n" +
                "    `vuss`.`prcNumberofWeek` AS prcNumberofWeek,                                                              \n" +
                "    `vuss`.`shippingQty` AS shippingQty,                                                              \n" +
                "    `vuss`.`remark` AS remark,                                                              \n" +
                "    `vuss`.`Assy ID` AS PIDCode,                                                        \n" +
                "    `vuss`.`Assy Name` AS mfgPN,                                                            \n" +
                "    `vuss`.`NickName` AS nickName,                                                             \n" +
                "    `vuss`.`liveVersion` AS liveVersion,                                                             \n" +
                "    `vuss`.`AssyDescr` AS mfgPNDescription,                                                              \n" +
                "    `vuss`.`cancleReason` AS cancleReason,                                                              \n" +
                "    `vuss`.`Status` AS completedStatus,                                                                  \n" +
                "    `vuss`.`modifyDate` AS modifyDate,                                                                    \n" +
                "    `vuss`.`createdDate` AS createdDate,                                                                \n" +
                "    `vuss`.`soModifiedBy` AS soModifiedBy,                                                               \n" +
                "    `vuss`.`soCreatedBy` AS soCreatedBy,                                                                  \n" +
                "    `vuss`.`updatedbyRole` AS updatedbyRole,                                                               \n" +
                "    `vuss`.`deletedbyRole` AS deletedbyRole,                                                               \n" +
                "    `vuss`.`PartID` AS partID,                   \n" +
                "                `vuss`.`isCustomPart` AS isCustomPart,            \n" +
                "    `vuss`.`kitNumber` AS kitNumber,                                          \n" +
                "    fun_CheckBuildFesibility(vuss.salesOrderDetailId) as isBuildWiseHotJob,                                            \n" +
                "    fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,               \n" +
                "    `vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,                                                              \n" +
                "    (                              \n" +
                "     CASE  WHEN (`vuss`.`Sales Order Status` = 0) THEN                               \n" +
                "       'Draft'                                                                   \n" +
                "      WHEN (`vuss`.`Sales Order Status` = 1) THEN                               \n" +
                "       'Published'                                                                  \n" +
                "      ELSE                               \n" +
                "       ''                               \n" +
                "     END                              \n" +
                "    ) AS `statusConvertedValue`,          \n" +
                "    hutkit.refType as refTypeKA,        \n" +
                "    hutkit.status as haltStatusKA,                    \n" +
                "    (CASE                              \n" +
                "          WHEN hutkit.status = 'H' THEN                   \n" +
                "           CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))                                      \n" +
                "          ELSE ''                            \n" +
                "    END) AS reasonKA,          \n" +
                "    ka.allocPerComponent AS `kitStatusPercentage`,                                                    \n" +
                "    ka.allocPerWithSubAssy AS `subKitStatusPercentage`,              \n" +
                "                (case when ka.kitReturnStatus is null then 'N/A' else ka.kitReturnStatus end) as kitReturnStatus,            \n" +
                "    (case when ka.kitReleaseStatus is null then 'Not Released' else ka.kitReleaseStatus end) as kitReleaseStatus,                                \n" +
                "    `vuss`.`Shipped Qty` AS shippedQty,                                        \n" +
                "    ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) AS  soCompletionPercentage,             \n" +
                "    p.nextReleaseDate,                               \n" +
                "                fun_getKitReleaseIndication(p.nextReleaseDate,ka.shortagePer) AS kitReleaseIndication,            \n" +
                "                concat(ka.shortageLine,'/', ka.totalLine) AS shortageLines,            \n" +
                "                p.releasedPlanCount totalkitRelease,                                      \n" +
                "                ifnull(p.totalPlan, 0) kitReleasePlanCount ,                            \n" +
                "    fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText                       \n" +
                "    , vuss.releasedWorkorder           \n" +
                "                \",v_DynamicColumns,\"                    \n" +
                "  FROM   vu_salesorder_updatedlist_report vuss                                             \n" +
                "  \",v_DynamicJoin,\"            \n" +
                "        left join  (            \n" +
                "      SELECT  salesOrderDetID, refAssyId,             \n" +
                "        count(1) totalPlan,             \n" +
                "        sum(case when kitStatus = 'R' then 1 else 0 end) releasedPlanCount,            \n" +
                "        min(Case when kitStatus = 'P' then kitReleaseDate else null end) nextReleaseDate            \n" +
                "      FROM salesorder_plan_detailsmst             \n" +
                "      WHERE deletedAt IS NULL and subAssyID is null             \n" +
                "      group by salesOrderDetID, refAssyId            \n" +
                "     ) as p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId =  `vuss`.`PartID`               \n" +
                "  left join (            \n" +
                "     SELECT `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  `k`.`assyID` AS `assyID`,  `k`.`totalLine` AS `totalLine`,            \n" +
                "       `k`.`shortageLine` AS `shortageLine`,                 \n" +
                "                            fun_getKitAllocationPercentageForSalesOrder(k.refSalesOrderDetID,k.assyID,false)  AS `allocPerComponent`,             \n" +
                "       `k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,            \n" +
                "       Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`,             \n" +
                "       fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,            \n" +
                "       fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`            \n" +
                "     FROM (            \n" +
                "       SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`, `k`.`assyID` AS `assyID`,            \n" +
                "         COUNT(1) AS `totalLine`, SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine`,            \n" +
                "         ROUND(IFNULL(AVG((CASE WHEN (`k`.`allocationPer` > 100) THEN 100 ELSE ROUND(IFNULL(`k`.`allocationPer`, 0), 2) END)), 0), 2) AS `allocPerWithSubAssy`            \n" +
                "       FROM (            \n" +
                "         SELECT  `vu_kit_allocation_detail`.`refSalesorderdetid` AS `refSalesOrderDetID`,            \n" +
                "           `vu_kit_allocation_detail`.`assyID` AS `assyID`,            \n" +
                "           ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedunit`, 0)) / (`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`, 0))) AS `allocationPer`,            \n" +
                "           `vu_kit_allocation_detail`.`shortage` AS `shortage`            \n" +
                "         FROM  `vu_kit_allocation_detail`            \n" +
                "        ) `k`            \n" +
                "       GROUP BY `k`.`refSalesOrderDetID`) `k`            \n" +
                "      ) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`               \n" +
                "  LEFT JOIN  rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0                  \n" +
                "  LEFT JOIN holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refSalesOrderDetID and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refSalesOrderDetID = htk.refSalesOrderDetID and htk.refType='KA' and htk.deletedAt is null)                               \n" +
                " \");                                                       \n" +
                "  \n" +
                " IF (pOrderBy IS NOT NULL) THEN                                                                  \n" +
                "  SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                  \n" +
                " ELSE                                                                  \n" +
                "  SET pOrderBy = CONCAT(\"ORDER BY \" , \"salesOrderNumber DESC\") ;                                                                  \n" +
                " END IF;                                                                   \n" +
                "  \n" +
                "  \n" +
                " IF (pWhereClause IS NULL OR pWhereClause = '') THEN                                                                  \n" +
                "  SET pWhereClause = '1=1' ;                                                                  \n" +
                " END IF;           \n" +
                "  \n" +
                "    IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN          \n" +
                "  SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);          \n" +
                "    END IF;          \n" +
                "  \n" +
                " IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN                                                                  \n" +
                "  IF (pPlannedStatus = 'P') THEN                              \n" +
                "   SET v_PlannedWhere = \" AND kitReleasePlanCount > 0\";                              \n" +
                "  ELSEIF (pPlannedStatus = 'R') THEN                              \n" +
                "   SET v_PlannedWhere = \" AND kitReleasePlanCount <= 0\";                              \n" +
                "  END IF;                                                                  \n" +
                " END IF;                                \n" +
                "  \n" +
                " IF (pSalesOrderDetailId != 0) THEN                              \n" +
                "  SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);                              \n" +
                " END IF;                                                               \n" +
                " IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                   \n" +
                "  SET pOffset = (ppageIndex -1) * precordPerPage;                                                                     \n" +
                "  SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                  \n" +
                " ELSE                                                                   \n" +
                "  SET rowNumWhere = '';                                                                  \n" +
                " END IF;                                               \n" +
                " /* to get total count of rows */                                                     \n" +
                " SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));                                                    \n" +
                "  \n" +
                " PREPARE query1 FROM @SQLStatement1;                                                    \n" +
                " EXECUTE query1;                                                    \n" +
                " DEALLOCATE PREPARE query1;                                                  \n" +
                "  \n" +
                " SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);                                                    \n" +
                " PREPARE query2 FROM @SQLStatement2;                                                    \n" +
                " EXECUTE query2;                                                    \n" +
                " DEALLOCATE PREPARE query2;                                                                   \n" +
                "  \n" +
                " SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) as UnPlannedCount FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND kitReleasePlanCount <= 0 AND \", pWhereClause, v_PendingWOWhereClause);                                                        \n" +
                " PREPARE query3 FROM @SQLStatement3;                                                    \n" +
                " EXECUTE query3;                                                    \n" +
                " DEALLOCATE PREPARE query3;                                 \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_salesorderdet` ;  \n" +
                "CREATE TRIGGER `Trg_AU_salesorderdet` AFTER UPDATE ON `salesorderdet`   \n" +
                "    FOR EACH ROW BEGIN          \n" +
                "    IF IFNULL(OLD.refSalesOrderID,0) != IFNULL(NEW.refSalesOrderID,0) THEN          \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'REFSALESORDERID',CAST(OLD.refSalesOrderID AS CHAR),          \n" +
                "       CAST(new.refSalesOrderID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'QTY',CAST(OLD.qty AS CHAR),          \n" +
                "       CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "        IF IFNULL(OLD.price,0) != IFNULL(NEW.price,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PRICE',CAST(OLD.price AS CHAR),          \n" +
                "       CAST(new.price AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.mrpQty,0) != IFNULL(NEW.mrpQty,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MRPQTY',CAST(OLD.mrpQty AS CHAR),          \n" +
                "       CAST(new.mrpQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.shippingQty,0) != IFNULL(NEW.shippingQty,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'SHIPPINGQTY',CAST(OLD.shippingQty AS CHAR),          \n" +
                "       CAST(new.shippingQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "     IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'REMARK',CAST(OLD.remark AS CHAR),          \n" +
                "       CAST(new.remark AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.materialTentitiveDocDate,0) != IFNULL(NEW.materialTentitiveDocDate,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MATERIALTENTITVEDOCDATE',CAST(OLD.materialTentitiveDocDate AS CHAR),          \n" +
                "       CAST(new.materialTentitiveDocDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "     IF IFNULL(OLD.prcNumberofWeek,0) != IFNULL(NEW.prcNumberofWeek,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'prcNUMBEROFWEEK',CAST(OLD.prcNumberofWeek AS CHAR),          \n" +
                "       CAST(new.prcNumberofWeek AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.isHotJob,0) != IFNULL(NEW.isHotJob,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISHOTJOB',CAST(OLD.isHotJob AS CHAR),          \n" +
                "       CAST(new.isHotJob AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "     IF IFNULL(OLD.materialDueDate,0) != IFNULL(NEW.materialDueDate,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MATERIALDUEDATE',CAST(OLD.materialDueDate AS CHAR),          \n" +
                "       CAST(new.materialDueDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "    IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN          \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PARTID',CAST(OLD.partID AS CHAR),          \n" +
                "       CAST(new.partID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "      IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN          \n" +
                "	 INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISDELETED',CAST(OLD.isDeleted AS CHAR),          \n" +
                "       CAST(new.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;          \n" +
                "     IF IFNULL(OLD.kitQty,0) != IFNULL(NEW.kitQty,0) THEN          \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'KITQTY',CAST(OLD.kitQty AS CHAR),          \n" +
                "       CAST(new.kitQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "	END IF;   \n" +
                "	IF IFNULL(old.custPOLineNumber,0)!=IFNULL(NEW.custPOLineNumber,0)THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)            \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'CustPOLine',CAST(OLD.custPOLineNumber AS CHAR),          \n" +
                "       CAST(new.custPOLineNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);          \n" +
                "  \n" +
                "       END IF;         \n" +
                "       END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesorderDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesorderDetails`(	      \n" +
                "	IN psoposearch LONGTEXT,  \n" +
                "	IN salesorderID INT  \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "CREATE TEMPORARY TABLE IF NOT EXISTS   tempsalesorder AS  \n" +
                " SELECT id FROM salesordermst WHERE id IN (SELECT `Sales ORDER ID` FROM vu_salesorder_updatedlist_report WHERE `status`='In Progress'  \n" +
                " ) ;  \n" +
                " SET @pWhereClause=\"1=1\";  \n" +
                " SET @temp_Sproc_GetPendingSOPO=CONCAT(\"  \n" +
                "select so.ID,CONCAT('(',m.mfgcode,')',' ',m.mfgName) customerName,so.salesOrderNumber as `SO#`,so.poNumber as `PO#`,so.customerID,so.billingAddressID,so.shippingAddressID,  \n" +
                "so.shippingMethodID,so.revision,so.shippingcomment,so.soDate,so.poDate,so.freeonBoard,so.intermediateShipmentId,m.mfgcode,so.contactPersonID,  \n" +
                "concat('(',m.mfgcode,')',' ',so.salesOrderNumber,',',so.poNumber) pendingSOPO,m.mfgName from salesordermst so left join  \n" +
                "mfgcodemst m on m.id=so.customerID where so.id in (select id from tempsalesorder) and so.isDeleted=0\");  \n" +
                "  \n" +
                "  IF(salesorderID IS NOT NULL)THEN  \n" +
                "  SET @temp_Sproc_GetPendingSOPO=CONCAT(@temp_Sproc_GetPendingSOPO,' and so.id=',salesorderID);  \n" +
                "  END IF;  \n" +
                "	IF(psoposearch IS NOT NULL)THEN  \n" +
                "	SET @pWhereClause=CONCAT(\"pendingSOPO like '%\",psoposearch,\"%'\");  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"select * from ( \", @temp_Sproc_GetPendingSOPO,\" ) c  where \", @pWhereClause);      \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                              \n" +
                "	EXECUTE query1;                              \n" +
                "	DEALLOCATE PREPARE query1;     \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2716,'2.00','V1',' Customer packing db-champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2716:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "ALTER TABLE assemblystock ADD COLUMN `type` VARCHAR(10) COMMENT 'OS-Opening Stock,WS-Work Order Stock,AS-Adjustment Stock';  \n" +
                "ALTER TABLE assemblystock ADD COLUMN whID INT;  \n" +
                "ALTER TABLE assemblystock ADD COLUMN binID INT;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "ALTER TABLE assemblystock  \n" +
                "ADD CONSTRAINT FK_assemblystock_whID  \n" +
                "FOREIGN KEY (whID) REFERENCES warehousemst(ID);  \n" +
                "  \n" +
                "ALTER TABLE assemblystock  \n" +
                "ADD CONSTRAINT FK_assemblystock_binID  \n" +
                "FOREIGN KEY (binID) REFERENCES binmst(id);  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */

                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2717,'2.00','V1','Shipped Assembly table-champak'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2717:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-08-2020 *********************************** */
                "ALTER TABLE `reportmaster`    \n" +
                "            ADD COLUMN `refReportId` INT(11) NULL DEFAULT NULL ,  \n" +
                "            ADD COLUMN `status` VARCHAR(1) NULL DEFAULT 0 ,    \n" +
                "            ADD COLUMN `entityId` INT(11) NULL DEFAULT NULL ,  \n" +
                "            ADD COLUMN `editingBy` INT(11) NULL,  \n" +
                "            ADD COLUMN `startDesigningDate` DATETIME NULL DEFAULT NULL ,  \n" +
                "            ADD COLUMN `reportVersion` VARCHAR(255) NULL DEFAULT NULL ;   \n" +
                "  \n" +
                "            ALTER TABLE `reportmaster`   \n" +
                "            ADD COLUMN `reportCategory` VARCHAR(1) NULL DEFAULT 1;   \n" +
                "  \n" +
                "  \n" +
                "            ALTER TABLE `reportmaster`   \n" +
                "            ADD INDEX `FK_reportmaster_entityId_idx` (`entityId` ASC) VISIBLE;   \n" +
                "            ALTER TABLE `reportmaster`   \n" +
                "            ADD CONSTRAINT `FK_reportmaster_entityId`    \n" +
                "            FOREIGN KEY (`entityId`)  \n" +
                "            REFERENCES `entity` (`entityID`)   \n" +
                "            ON DELETE NO ACTION   \n" +
                "            ON UPDATE NO ACTION;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2718,'2.00','V1',' Report Master table change - SHUBHAM'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2718:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-08-2020 *********************************** */
                "UPDATE reportmaster AS t1,  \n" +
                "(SELECT b.id, b.isEndUserReport FROM reportmaster b ) AS t2  \n" +
                "SET t1.reportCategory = (CASE WHEN (t2.isEndUserReport = 1) THEN 2 ELSE 1 END)  \n" +
                "where t1.id = t2.id;  \n" +

                "insert into reportmaster  \n" +
                "(reportName, rdlcReportFileName, createdAt, createdBy,   \n" +
                "fileName,reportCategory)  \n" +
                "values ('Default Header Footer Template',   \n" +
                "'Default Header Footer Template', CURDATE(), '1',  \n" +
                "'82de9a17-cb21-11ea-a50f-b42e990b373a', 3);  \n" +

                "update reportmaster set entityId = (select entityId from entity where entityName = category) where category is not null;  \n" +

                "DROP PROCEDURE IF EXISTS Sproc_RetrieveReportList;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveReportList`(                  \n" +
                "	IN ppageIndex INT(11),                  \n" +
                "	IN precordPerPage INT(11),                  \n" +
                "	IN pOrderBy VARCHAR(255),                  \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "    IN pIsEndUserReport TINYINT(1),  \n" +
                "    IN pIsPublishReport TINYINT(1)  \n" +
                "	)  \n" +
                "BEGIN                  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);                  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;                  \n" +
                "  \n" +
                "	SET @SQLStatement1=\"  \";          \n" +
                "	if pIsEndUserReport = true then      \n" +
                "		SET @SQLStatement1= \" and isEndUserReport = 1\";       \n" +
                "	end if;     \n" +
                "  \n" +
                "    if pIsPublishReport = true then      \n" +
                "		SET @SQLStatement1= \" and status = 1\";       \n" +
                "	end if;     \n" +
                "  \n" +
                "		set @tempQuery = concat(\"SELECT r.*,      \n" +
                "			fun_getUserNameByID(r.updatedBy) updatedbyvalue,      \n" +
                "			fun_getUserNameByID(r.createdBy) createdbyvalue,      \n" +
                "			fun_getUserNameByID(r.deletedBy) deletedbyvalue,      \n" +
                "			fun_getRoleByID(r.createByRoleId) createdbyRolevalue,      \n" +
                "			fun_getRoleByID(r.updateByRoleId) updatedbyRolevalue,      \n" +
                "			fun_getRoleByID(r.deleteByRoleId) deletedbyRolevalue,      \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(r.createdAt) createdAtvalue,      \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(r.UpdatedAt) updatedAtvalue,      \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(r.deletedAt) deletedAtvalue,        \n" +
                "		(CASE WHEN reportType THEN 'Detail' ELSE 'Summary' END) reportTypeConvertedvalue,  \n" +
                "        e.entityName,  \n" +
                "        fun_ConvertUTCDatetimeToDataKeyTimeZone(r.startDesigningDate) startActivityDate,           \n" +
                "        fun_getUserNameByID(r.editingBy) activityStartBy   \n" +
                "		FROM `reportmaster`  r   \n" +
                "        left join entity e on e.entityId = r.entityId  \n" +
                "        left join report_change_logs rc on r.id = rc.reportId and endActivityDate is null  \n" +
                "		WHERE r.deletedAt IS NULL and r.reportCategory != 3\", @SQLStatement1);        \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"reportName ASC\") ;                  \n" +
                "		ELSE                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                  \n" +
                "		END IF;	                  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                  \n" +
                "			SET pWhereClause = '1=1' ;                  \n" +
                "		END IF;	                  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                  \n" +
                "		ELSE	                  \n" +
                "			SET rowNumWhere = '';                  \n" +
                "		END IF;	                  \n" +
                "  \n" +
                "		/* to get total count of rows */             \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);            \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;            \n" +
                "			EXECUTE query2;            \n" +
                "			DEALLOCATE PREPARE query2;          \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c            \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement2;            \n" +
                "			EXECUTE query1;            \n" +
                "			DEALLOCATE PREPARE query1;         \n" +
                "  \n" +
                "    END;  \n" +

                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2719,'2.00','V1',' Report Master table Update and SP for retrieve report list - SHUBHAM'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2719:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "SELECT pageid INTO @paremtpageid FROM page_detail WHERE pagename='Material Management';  \n" +
                "  \n" +
                "INSERT INTO page_detail(pagename,ro,rw,menuRoute,pageRoute,pageURL,menuName,parentpageid,orderby,iconclass,isactive,createdby,isDisplay,displayMenuName,isAllowAsHomePage)  \n" +
                "VALUES('Customer Packing Slip',0,0,'Materialmanagement.customerpacking','app.transaction.customerpacking','/customerpackinglist','Customer Packing Slip',@paremtpageid,13.06,'icons-manage-shipped',1,1,1,'Customer Packing Slip',1);  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "SELECT pageid INTO @paremtpageid FROM page_detail WHERE pagename='Customer Packing Slip';  \n" +
                "INSERT INTO page_detail(pagename,ro,rw,pageRoute,pageURL,menuName,parentpageid,orderby,iconclass,isactive,createdby,isDisplay,displayMenuName,isAllowAsHomePage)  \n" +
                "VALUES('Customer Packing',1,1,'app.transaction.customerpacking.main','/customerpacking','Customer Packing',@paremtpageid,1.01,'icon icon-note-text',1,1,1,'Customer Packing',0);  \n" +
                "  \n" +
                "  \n" +
                "SELECT pageid INTO @paremtpageid FROM page_detail WHERE pagename='Customer Packing';  \n" +
                "INSERT INTO page_detail(pagename,ro,rw,pageRoute,pageURL,menuName,parentpageid,orderby,iconclass,isactive,createdby,isDisplay,displayMenuName,isAllowAsHomePage)  \n" +
                "VALUES('Manage Customer Packing Slip',0,0,'app.transaction.customerpacking.main.manage','/manage/:id/:sdetid','Add Customer Packing Slip',@paremtpageid,1.01,'icon icon-note-text',1,1,1,'Customer Packing Slip',0);  \n" +
                "  \n" +
                "SELECT pageid INTO @paremtpageid FROM page_detail WHERE pagename='Customer Packing';  \n" +
                "INSERT INTO page_detail(pagename,ro,rw,pageRoute,pageURL,menuName,parentpageid,orderby,iconclass,isactive,createdby,isDisplay,displayMenuName,isAllowAsHomePage)  \n" +
                "VALUES('Manage Customer Packing Slip Documents',0,0,'app.transaction.customerpacking.main.documents','/documents/:id/:sdetid','Add Customer Packing Slip Document',@paremtpageid,1.01,'icon icon-note-text',1,1,1,'Customer Packing Slip Document',0);  \n" +
                "  \n" +
                "INSERT INTO page_detail(pagename,ro,rw,pageRoute,pageURL,menuName,parentpageid,orderby,iconclass,isactive,createdby,isDisplay,displayMenuName,isAllowAsHomePage)  \n" +
                "VALUES('Manage Customer Packing Slip MISC',0,0,'app.transaction.customerpacking.main.misc','/misc/:id/:sdetid','Add Customer Packing Slip MISC',@paremtpageid,1.01,'icon icon-note-text',1,1,1,'Customer Packing Slip MISC',0);  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO entity (entityName,remark,isactive,createdby,systemGenerated,columnView)VALUES  \n" +
                "('Customer Packing Slip','Customer Packing Slip',1,1,1,100);  \n" +
                "DROP TRIGGER IF EXISTS Trg_BU_entity;  \n" +
                "UPDATE entity SET entityid=-17 WHERE entityName='Customer Packing Slip';  \n" +
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_BU_entity` ;  \n" +
                "CREATE TRIGGER `Trg_BU_entity` BEFORE UPDATE ON `entity`   \n" +
                "    FOR EACH ROW BEGIN        \n" +
                "	IF ((NEW.isDeleted = 0 AND NEW.deletedAt IS NULL) AND (SELECT COUNT(1) FROM entity        \n" +
                "			    WHERE entityName=NEW.entityName        \n" +
                "			    AND isdeleted = 0 AND deletedAt IS NULL        \n" +
                "			    AND entityID !=NEW.entityID)) > 0 THEN        \n" +
                "  \n" +
                "	SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='Duplicate entry';           \n" +
                "  \n" +
                "	END IF;         \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO systemconfigrations(`key`,`values`,isActive,createdBy,isEditable,description,displayName)VALUES  \n" +
                "('CustomerPackingSlipNumber','YYMMDD',1,1,1,'customer packing slip number will be generate based on this format.','Customer Packing Slip Number');  \n" +
                "INSERT INTO identity(`maxValue`,createdBy,TYPE) VALUES(1,'1','CustomerPackingSlipID');  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPackingSlipFormat` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingSlipFormat`(  \n" +
                ")  \n" +
                "BEGIN  \n" +
                " DECLARE pdateformat VARCHAR(50);  \n" +
                "SELECT `values` INTO pdateformat FROM systemconfigrations WHERE `key`='CustomerPackingSlipNumber' AND isdeleted=0;  \n" +
                " SELECT CASE WHEN `maxvalue`>9 THEN CONCAT('0',`maxvalue`) ELSE CAST(`maxvalue` AS CHAR) END AS maxPackingID,pdateformat FROM identity WHERE `type`='CustomerPackingSlipID' AND isdeleted=0;  \n" +
                "  \n" +
                " UPDATE identity SET `maxvalue`=`maxvalue`+1 WHERE `type`='CustomerPackingSlipID' AND isdeleted=0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesShippingDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(  \n" +
                "	IN salesorderID INT  \n" +
                "    )  \n" +
                "BEGIN   \n" +
                " SELECT ss.shippingID,ss.sDetId,IFNULL(sd.custPOLineNumber,1) custPOLineNumber,IFNULL(ss.releaseNumber,1) releaseNumber,ss.qty,ss.shippingDate,ss.releaseNotes,sd.tentativeBuild,sd.qty AS poQty,sd.partID,sd.price,sd.lineID,  \n" +
                " c.mfgpn,c.mfgpndescription,c.pidcode,fun_getUnitNameByID(c.uom) unitMeaser,c.nickName,CONCAT(c.pidcode,',',IFNULL(sd.custPOLineNumber,1),',',IFNULL(ss.releaseNumber,1),ss.qty,',',ss.shippingDate) shipping,  \n" +
                " (SELECT IFNULL(cpd.shippedQty,0) FROM customer_packingslip_det cpd WHERE refsalesorderdetid=ss.sDetId AND cpd.isdeleted=0) shippedQty  \n" +
                " FROM salesshippingmst ss LEFT JOIN salesorderdet sd ON ss.sDetID=sd.id  \n" +
                "LEFT JOIN component c ON c.id=sd.partid  \n" +
                "WHERE sd.refsalesOrderID=salesorderID AND ss.isdeleted=0 AND ss.sdetid NOT IN (SELECT refsalesorderdetid FROM customer_packingslip_det WHERE remainingQty=0 AND isdeleted=0);  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerPackingShippingDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingShippingDetail`(                \n" +
                "	IN ppageIndex INT(11),                \n" +
                "	IN precordPerPage INT(11),                \n" +
                "	IN pOrderBy VARCHAR(255),                \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefCustPackingSlipID  INT        \n" +
                "	)  \n" +
                "BEGIN                \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);                \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;            \n" +
                "  \n" +
                "  SET @tempQuerypackingSlip = CONCAT(\"SELECT cpd.id, cpd.refCustPackingSlipID,cpd.refSalesorderDetid, cpd.partId , cpd.custPOLineID,  \n" +
                "  cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,cpd.shippingNotes,cpd.shippingId, cpd.binID, cpd.whID,     \n" +
                "			fun_getUserNameByID(cpd.updatedBy) updatedby,      \n" +
                "			fun_getUserNameByID(cpd.createdBy) createdby,    \n" +
                "			fun_getRoleByID(cpd.createByRoleId) createdbyRole,      \n" +
                "			fun_getRoleByID(cpd.updateByRoleId) updatedbyRole,   \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.createdAt) createdAt,      \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.UpdatedAt) updatedAt,  \n" +
                "			c.mfgpn,c.pidcode,c.nickName,c.mfgpndescription,rr.name as rohsName,rr.rohsIcon,  \n" +
                "			fun_getUnitNameByID(c.uom) unitMeaser  \n" +
                "		FROM `customer_packingslip_det` AS cpd  left join component c on c.id=cpd.partid left join  \n" +
                "		rfq_rohsmst rr on rr.id=c.rohsStatusID    \n" +
                "		WHERE cpd.isDeleted=0 and cpd.refCustPackingSlipID=\",IFNULL(prefCustPackingSlipID,0));        \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                \n" +
                "		ELSE                \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                \n" +
                "		END IF;	                \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                \n" +
                "			SET pWhereClause = '1=1' ;                \n" +
                "		END IF;	                \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                 \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                \n" +
                "		ELSE	                \n" +
                "			SET rowNumWhere = '';                \n" +
                "		END IF;	                \n" +
                "        /* to get total count of rows */             \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempQuerypackingSlip,\" ) c where 1=1 and \", pWhereClause);            \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;            \n" +
                "			EXECUTE query2;            \n" +
                "			DEALLOCATE PREPARE query2;          \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempQuerypackingSlip,\" ) c            \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
                "			PREPARE query1 FROM @SQLStatement2;            \n" +
                "			EXECUTE query1;            \n" +
                "			DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerPackingSlipDeatils` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(              \n" +
                "	IN ppageIndex INT(11),              \n" +
                "	IN precordPerPage INT(11),              \n" +
                "	IN pOrderBy VARCHAR(255),              \n" +
                "	IN pWhereClause VARCHAR(16383)              \n" +
                ")  \n" +
                "BEGIN              \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);              \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;              \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"          \n" +
                "		SELECT cd.packingSlipNumber,cd.packingslipDate,cd.poNumber,cd.soNumber,cd.soDate,cd.poDate,  \n" +
                "	fun_getMfgCodeAndNameByID(cd.customerID) customerName,cd.freeOnBoard,cd.packingslipcomment,  \n" +
                "fun_getGenericCategoryNameByID(cd.shippingmethodid) shippingMethod,cd.status,cd.sorevision,cpd.partId,fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "fun_getRoHSIconByPartID(cpd.partId) rohsIcon,fun_getComponentNameByID(cpd.partId) assyName ,  \n" +
                "case when cd.status=0 then 'Draft' else 'Published' end statusConvertedValue,cd.refSalesOrderID,  \n" +
                "fun_getAssyidByID(cpd.partid) assyId,cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,  \n" +
                "cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,  \n" +
                "fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,      \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,      \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,   \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,   \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.createdAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.createdAt) END  createdAt,   \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.UpdatedAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.UpdatedAt) END  updatedAt  \n" +
                "  \n" +
                "		FROM customer_packingslip cd   LEFT JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND IFNULL(cpd.isdeleted,0)=0    \n" +
                "		LEFT JOIN component c ON c.id=cpd.partid         \n" +
                "		WHERE  cd.isDeleted=0            \n" +
                "	\");              \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN              \n" +
                "        SET pOrderBy = \"ORDER BY packingSlipNumber DESC\";    \n" +
                "	ELSE              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN              \n" +
                "		SET pWhereClause = '1=1' ;              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;              \n" +
                "	ELSE	              \n" +
                "		SET rowNumWhere = '';              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */                 \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                \n" +
                "	EXECUTE query2;                \n" +
                "	DEALLOCATE PREPARE query2;              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
                "	PREPARE query1 FROM @SQLStatement2;                \n" +
                "	EXECUTE query1;                \n" +
                "	DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO table_mapping_details(tabel_name,display_page_name) VALUES('shippedassembly','Shipping Records');  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_customer_packingslip` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_customer_packingslip`(            \n" +
                "	IN tableName VARCHAR(255),            \n" +
                "	IN IDs LONGTEXT,            \n" +
                "	IN deletedBy INT,            \n" +
                "	IN entityID VARCHAR(255),            \n" +
                "	IN refrenceIDs LONGTEXT,            \n" +
                "	IN countList INT,      \n" +
                "    IN pRoleID INT      \n" +
                "    )  \n" +
                "BEGIN            \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION            \n" +
                "BEGIN            \n" +
                "	ROLLBACK;            \n" +
                "	RESIGNAL;            \n" +
                "END;            \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING            \n" +
                "BEGIN            \n" +
                "	ROLLBACK;            \n" +
                "	RESIGNAL;            \n" +
                "END;            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempcustomerPackingslip;           \n" +
                "	-- delete sales order master if reference ID is not null        \n" +
                "	-- refernece ID is equal to salesOrderDetID        \n" +
                "	IF(IDs <> '') THEN        \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomerPackingslip as          \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly where refCustPackingSlipDetID IN(',IDs,') AND deletedAt IS NULL LIMIT 1)  \n" +
                "		');                                                                       \n" +
                "		PREPARE stmt FROM @SQL;                                                                        \n" +
                "		EXECUTE stmt;                                                                        \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN                                                                       \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempcustomerPackingslip t)=0 THEN                                                                      \n" +
                "			START TRANSACTION;     \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update customer_packingslip_det set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                                        \n" +
                "				PREPARE stmt1 FROM @SQL1;                                                                        \n" +
                "				EXECUTE stmt1;           \n" +
                "  \n" +
                "				SET @SQl3 =CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS temppackingslip AS   \n" +
                "				   SELECT cp.id,(SELECT COUNT(1) FROM customer_packingslip_det cd WHERE cd.refCustPackingSlipID=cp.id AND cd.deletedat IS NULL) cnt            \n" +
                "					FROM customer_packingslip cp  WHERE cp.deletedAt IS NULL AND          \n" +
                "					cp.id IN (SELECT refCustPackingSlipID FROM customer_packingslip_det WHERE id IN (',IDs,'))');		                                                                        \n" +
                "				PREPARE stmt3 FROM @SQL3;                                                                        \n" +
                "				EXECUTE stmt3;           \n" +
                "  \n" +
                "				SET @SQl4 = CONCAT('update customer_packingslip set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(select id from temppackingslip where cnt=0) and deletedAt is NULL');		                                                                        \n" +
                "				PREPARE stmt4 FROM @SQL4;                                                                        \n" +
                "				EXECUTE stmt4;           \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				SELECT * FROM tempcustomerPackingslip WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";                \n" +
                "			COMMIT;                                                                         \n" +
                "			ELSE                                                                        \n" +
                "			      SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcustomerPackingslip t;                                                                       \n" +
                "			END IF;              \n" +
                "		ELSE      \n" +
                "  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg              \n" +
                "				FROM tempcustomerPackingslip t1              \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name              \n" +
                "				WHERE IFNULL(t1.cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"              \n" +
                "				ORDER BY t2.display_page_name;                            \n" +
                "		END IF;         \n" +
                "		DROP TABLE tempcustomerPackingslip;                                                                           \n" +
                "	ELSE        \n" +
                "  \n" +
                "		-- Added for sales order master record delete        \n" +
                "		SET @SQl5 = CONCAT('update customer_packingslip set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in (', refrenceIDs ,') and deletedAt is NULL');		                                                                        \n" +
                "		PREPARE stmt5 FROM @SQl5;                                                                        \n" +
                "		EXECUTE stmt5;         \n" +
                "		SELECT \"\" TotalCount ,\"\" AS Message FROM customer_packingslip WHERE id IN(refrenceIDs) AND deletedAt IS NULL LIMIT 1;                                                                                                      \n" +
                "	END IF;             \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(                       \n" +
                "    IN tableName VARCHAR(255),                       \n" +
                "    IN IDs LONGTEXT,                       \n" +
                "    IN deletedBy INT,                       \n" +
                "    IN entityID VARCHAR(255),                       \n" +
                "    IN refrenceIDs LONGTEXT,            \n" +
                "    IN countList INT,                            \n" +
                "    IN pRoleID INT                            \n" +
                ")  \n" +
                "BEGIN                                                        \n" +
                "IF tableName=\"employees\" THEN                       \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                       \n" +
                "IF tableName=\"eco_type_category\" THEN                       \n" +
                "     CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                   \n" +
                "END IF;                       \n" +
                "IF tableName=\"eco_type_values\" THEN                       \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                 \n" +
                "END IF;                       \n" +
                "IF tableName=\"customers\" THEN                       \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                     \n" +
                "END IF;                       \n" +
                "IF tableName=\"certificate_standards\" THEN                       \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                   \n" +
                "END IF;                       \n" +
                "IF tableName=\"department\" THEN                       \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                       \n" +
                "END IF;                       \n" +
                "IF tableName=\"genericcategory\" THEN                       \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                       \n" +
                "IF tableName=\"equipment\" THEN                       \n" +
                "    CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                                               \n" +
                "IF tableName=\"master_templates\" THEN                       \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                       \n" +
                "IF tableName=\"operations\" THEN                       \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                 \n" +
                "END IF;                       \n" +
                "IF tableName=\"workorder\" THEN                       \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                    \n" +
                "END IF;                       \n" +
                "IF tableName=\"roles\" THEN                      \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"standard_class\" THEN                       \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"dataelement\" THEN                       \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN                       \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                       \n" +
                "IF tableName=\"component\" THEN                       \n" +
                "    CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;                       \n" +
                "IF tableName=\"workorder_cluster\" THEN                        \n" +
                "    CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"workorder_operation\" THEN                      \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"workorder_operation_part\" THEN                       \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                   \n" +
                "END IF;                       \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN                       \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                     \n" +
                "END IF;                       \n" +
                "IF tableName=\"workorder_operation_employee\" THEN                       \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                    \n" +
                "END IF;                       \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN                       \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                   \n" +
                "END IF;                       \n" +
                "IF tableName=\"entity\" THEN                       \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                       \n" +
                "IF tableName=\"salesordermst\" THEN                       \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                     \n" +
                "END IF;                       \n" +
                "IF tableName=\"mfgcodemst\" THEN                       \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                 \n" +
                "END IF;                       \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN                       \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);              \n" +
                "END IF;                       \n" +
                "IF tableName=\"shippedassembly\" THEN                       \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN                       \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);             \n" +
                "END IF;                       \n" +
                "IF tableName=\"br_label_template\" THEN                       \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);             \n" +
                "END IF;                       \n" +
                "IF tableName=\"measurement_types\" THEN                       \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                     \n" +
                "END IF;                       \n" +
                "IF tableName=\"uoms\" THEN                       \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                    \n" +
                "END IF;                       \n" +
                "IF tableName=\"jobtypes\" THEN                       \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                    \n" +
                "END IF;                       \n" +
                "IF tableName=\"rfqtype\" THEN                       \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                     \n" +
                "END IF;                       \n" +
                "IF tableName=\"reasonmst\" THEN                       \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"component_sid_stock\" THEN             \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;                       \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN              \n" +
                "    CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);               \n" +
                "END IF;                       \n" +
                "IF tableName=\"chart_templatemst\" THEN                        \n" +
                "    CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                      \n" +
                "END IF;                       \n" +
                "IF tableName=\"shipping_requestdet\" THEN                       \n" +
                "    CALL Sproc_checkDelete_shipping_requestdet(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                    \n" +
                "END IF;                       \n" +
                "IF tableName=\"chart_rawdata_category\" THEN                       \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                 \n" +
                "END IF;                              \n" +
                "IF tableName=\"rfq_lineitems\" THEN                       \n" +
                "      CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                            \n" +
                "END IF;                       \n" +
                "IF tableName=\"requirement\" THEN                       \n" +
                "    CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);             \n" +
                "END IF;                       \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN                  \n" +
                "    CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                     \n" +
                "END IF;                       \n" +
                "IF tableName=\"customer_addresses\" THEN                       \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                     \n" +
                "END IF;                       \n" +
                "IF tableName=\"rfqforms\" THEN                       \n" +
                "    CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                     \n" +
                "END IF;                       \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN                       \n" +
                "    CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"who_bought_who\" THEN                       \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"rfq_parttypemst\" THEN                       \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN                       \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN                       \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                 \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                       \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                     \n" +
                "END IF;                                              \n" +
                "IF tableName=\"cost_category\" THEN                       \n" +
                "    CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                 \n" +
                "END IF;                               \n" +
                "IF tableName=\"chartypemst\" THEN                       \n" +
                "    CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                              \n" +
                "END IF;              \n" +
                "IF tableName=\"countrymst\" THEN              \n" +
                "     CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;            \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN              \n" +
                "     CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;            \n" +
                "IF tableName=\"rfq_assy_typemst\" THEN            \n" +
                "     CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                        \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"warehousemst\" THEN            \n" +
                "     CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                         \n" +
                "END IF;                                                                   \n" +
                "IF tableName=\"binmst\" THEN            \n" +
                "     CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                        \n" +
                "END IF;                                                               \n" +
                "IF tableName=\"rackmst\" THEN            \n" +
                "     CALL Sproc_checkDelete_rackmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                        \n" +
                "END IF;                  \n" +
                "IF tableName=\"component_logicalgroup\" THEN                                                                  \n" +
                "     CALL Sproc_checkDelete_component_logical_group(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                        \n" +
                "END IF;                                                               \n" +
                "IF tableName=\"packing_slip_material_receive\" THEN                                                                  \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);             \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"packing_slip_material_receive_det\" THEN                                                                  \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive_det(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                        \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"packing_slip_track_number\" THEN                                                                  \n" +
                "     CALL Sproc_checkDelete_packing_slip_track_number(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                        \n" +
                "END IF;                                                       \n" +
                "IF tableName=\"reserve_stock_request\" THEN                                                      \n" +
                "       	 CALL Sproc_checkDelete_reserve_stock_request(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                      \n" +
                "END IF;                 \n" +
                "IF tableName=\"component_packagingmst\" THEN                                                                    \n" +
                "     CALL Sproc_checkDelete_component_packagingmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;               \n" +
                "IF tableName=\"workorder_trans_narrative_history\" THEN                                                                    \n" +
                "     CALL Sproc_checkDelete_workorder_trans_narrative_history(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                                                   \n" +
                "IF tableName=\"scannermst\" THEN                                                                    \n" +
                "     CALL Sproc_checkDelete_Scanner(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                                                  \n" +
                "IF tableName=\"component_alternatepn_validations\" THEN                                                                   \n" +
                "     CALL Sproc_checkDelete_Alias_Parts_Validation(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;            \n" +
                "IF tableName=\"workorder_operation_equipment_feeder_details\" THEN                        \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment_feeder_details(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                      \n" +
                "END IF;                                          \n" +
                "IF tableName=\"component_price_break_details\" THEN                        \n" +
                "    CALL Sproc_checkDelete_component_price_break_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                      \n" +
                "END IF;                                           \n" +
                "IF tableName=\"department_location\" THEN                        \n" +
                "    CALL Sproc_checkDelete_department_location(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                      \n" +
                "END IF;                                                       \n" +
                "IF tableName=\"purchase_parts_details\" THEN                        \n" +
                "    CALL Sproc_checkDelete_purchase_parts_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                      \n" +
                "END IF;                                                       \n" +
                "IF tableName=\"rfq_rohsmst\" THEN                        \n" +
                "    CALL Sproc_checkDelete_rfq_rohsmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                      \n" +
                "END IF;                                  \n" +
                "IF tableName=\"component_partstatusmst\" THEN                        \n" +
                "    CALL Sproc_checkDelete_component_partstatusmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                      \n" +
                "END IF;                                  \n" +
                "IF tableName=\"workorder_trans_umid_details\" THEN                        \n" +
                "    CALL Sproc_checkDelete_workorder_trans_umid_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                      \n" +
                "END IF;                           \n" +
                "IF tableName=\"labor_cost_template\" THEN                        \n" +
                "    CALL Sproc_checkDelete_labor_cost_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                      \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"rfq_packagecasetypemst\" THEN                        \n" +
                "    CALL Sproc_checkDelete_rfq_packagecasetypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                        \n" +
                "END IF;                      \n" +
                "IF tableName=\"component_dynamic_attribute\" THEN                        \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                        \n" +
                "END IF;                      \n" +
                "IF tableName=\"component_dynamic_attribute_mapping_part\" THEN                        \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute_mapping_part(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                        \n" +
                "END IF;                    \n" +
                "IF tableName=\"labeltemplatesmst\" THEN                    \n" +
                "    CALL Sproc_checkDelete_labeltemplates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                 \n" +
                "IF tableName=\"reportmaster\" THEN                    \n" +
                "    CALL Sproc_checkDelete_reportMaster(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                   \n" +
                "IF tableName=\"operating_temperature_conversion_mst\" THEN                    \n" +
                "    CALL Sproc_checkDelete_operating_temperature_conversion_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;             \n" +
                "IF tableName=\"inspection_mst\" THEN                    \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementMst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                   \n" +
                "IF tableName=\"inspection_template_mst\" THEN                    \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementTemplate(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;         \n" +
                "IF tableName=\"componenet_inspection_requirement_det\" THEN                    \n" +
                "    CALL Sproc_checkDelete_componenet_inspection_requirement_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;            \n" +
                "IF tableName=\"supplier_quote_mst\" THEN    \n" +
                "   CALL Sproc_checkDelete_supplier_quote(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;    \n" +
                "IF tableName=\"supplier_quote_parts_det\" THEN    \n" +
                "   CALL Sproc_checkDelete_supplier_quote_parts(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;    \n" +
                "IF tableName=\"calibration_details\" THEN    \n" +
                "   CALL Sproc_checkDelete_CalibrationDetails(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;    \n" +
                "IF tableName=\"customer_packingslip\" THEN    \n" +
                "   CALL Sproc_checkDelete_customer_packingslip(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAddressbyID` ;  \n" +
                "CREATE FUNCTION `fun_getAddressbyID`(          \n" +
                "	pAddressID INT(11)        \n" +
                ") RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN          \n" +
                "	DECLARE pAddress VARCHAR(2000);         \n" +
                "	SELECT CONCAT(ca.street1,',',ca.city,',',ca.state,',',c.countryName,'-',ca.postcode) INTO pAddress FROM customer_addresses ca LEFT JOIN countrymst c ON c.countryID=ca.countryID  \n" +
                "	WHERE ca.id=pAddressID ;  \n" +
                "  \n" +
                "	RETURN pAddress;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP VIEW IF EXISTS `vu_customer_packing_slip_qty` ;  \n" +
                "CREATE VIEW `vu_customer_packing_slip_qty` AS   \n" +
                "SELECT  \n" +
                "  `a`.`opStock`      AS `opStock`,  \n" +
                "  `a`.`woNumber`     AS `woNumber`,  \n" +
                "  `a`.`assyID`       AS `assyID`,  \n" +
                "  `a`.`availableQty` AS `availableQty`,  \n" +
                "  `a`.`partID`       AS `partID`,  \n" +
                "  `a`.`rohsIcon`     AS `rohsIcon`,  \n" +
                "  `a`.`rohsName`     AS `rohsName`,  \n" +
                "  `a`.`mfgPN`        AS `mfgPN`,  \n" +
                "  0                  AS `selectedQty`  \n" +
                "FROM (SELECT  \n" +
                "        SUM(`atk`.`openingStock`) AS `opStock`,  \n" +
                "        `atk`.`partID`      AS `partID`,  \n" +
                "        `atk`.`woNumber`    AS `woNumber`,  \n" +
                "        `fun_getAssyPIDCodeByID`(  \n" +
                "`atk`.`partID`)  AS `assyID`,  \n" +
                "        `fun_getRoHSIconByPartID`(  \n" +
                "`atk`.`partID`)  AS `rohsIcon`,  \n" +
                "        `fun_getRoHSNameByPartID`(  \n" +
                "`atk`.`partID`)  AS `rohsName`,  \n" +
                "        `fun_getComponentNameByID`(  \n" +
                "`atk`.`partID`)  AS `mfgPN`,  \n" +
                "        (SUM(`atk`.`openingStock`) - (SELECT IFNULL(SUM(`ss`.`shippedqty`),0) FROM `shippedassembly` `ss` WHERE ((`ss`.`isDeleted` = 0) AND (`ss`.`woNumber` = `atk`.`woNumber`) AND (`ss`.`partID` = `atk`.`partID`)))) AS `availableQty`  \n" +
                "      FROM `assemblystock` `atk`  \n" +
                "      WHERE (`atk`.`isDeleted` = 0)  \n" +
                "      GROUP BY `atk`.`woNumber`,`atk`.`partID`) `a`  \n" +
                "WHERE (`a`.`availableQty` > 0);  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getCustomerPackingSlipTransferQty` ;  \n" +
                "CREATE PROCEDURE `Sproc_getCustomerPackingSlipTransferQty`(        \n" +
                "	IN pPartID INT(11)  \n" +
                "	)  \n" +
                "BEGIN        \n" +
                "  \n" +
                "		SELECT * FROM vu_customer_packing_slip_qty WHERE partID=pPartID;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2720,'2.00','V1',' Customer packing Slip master-Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2720:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-08-2020 *********************************** */
                "DROP  PROCEDURE IF EXISTS `Sproc_GetActiveOperationsList` ;   \n" +
                "CREATE PROCEDURE `Sproc_GetActiveOperationsList`(    \n" +
                "	IN ppageIndex INT(11),          \n" +
                "	IN precordPerPage INT(11),          \n" +
                "	IN pOrderBy VARCHAR(255),          \n" +
                "	IN pWhereClause VARCHAR(16383),          \n" +
                "	pEmployeeID INT(11),    \n" +
                "    pWoID INT(11),    \n" +
                "    pCount INT(11)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT(11);          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;          \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "	ELSE          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"checkInDateTime DESC\") ;          \n" +
                "	END IF;	          \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = \"''\") THEN          \n" +
                "		SET pWhereClause = '1=1' ;          \n" +
                "	END IF;	          \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN           \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
                "	ELSE	          \n" +
                "		SET rowNumWhere = '';          \n" +
                "	END IF;      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS `temp_Sproc_GetActiveOperationsList`;    \n" +
                "	CREATE TEMPORARY TABLE temp_Sproc_GetActiveOperationsList AS    \n" +
                "	SELECT           \n" +
                "	(SELECT CONCAT(woNumber,'-',woVersion)  FROM workorder WHERE woid=woop.woid AND deletedAt IS NULL) woNumber,          \n" +
                "	woop.opNumber,          \n" +
                "    woop.opName,  \n" +
                "	CONCAT(\"(\",woop.opNumber,\") \", woop.opName) opFullName,          \n" +
                "	woop.woID,          \n" +
                "	woop.woOPID,          \n" +
                "	woempinout.woTransID,          \n" +
                "    woempinout.employeeID,   \n" +
                "    wtrans.isSetup,  \n" +
                "    (CASE WHEN wtrans.isSetup = 1 THEN 'Setup Activity' ELSE 'Production Activity' END ) displayActivityType,   \n" +
                "    (select CONCAT('(',e.initialName,')',e.firstName,' ', e.lastName) from employees e where e.id =  woempinout.employeeID and IFNULL(e.isDeleted,0) = 0) employeeName,    \n" +
                "	(SELECT fun_ConvertUTCDatetimeToDataKeyTimeZone(`woempinout`.`checkinTime`)) checkinDateTime,    \n" +
                "    TIMESTAMPDIFF(SECOND,`woempinout`.`checkinTime` ,  fun_DatetimetoUTCDateTime()) currentTotalTime,    \n" +
                "    CAST((CASE WHEN woempinout.isPaused =1 THEN  'Paused' ELSE Null END) AS CHAR(30)) opStatus    \n" +
                "	FROM workorder_trans_empinout woempinout          \n" +
                "	LEFT JOIN workorder_operation woop  ON woop.woopid = woempinout.woopid AND woop.deletedAt IS NULL          \n" +
                "    JOIN workorder_trans wtrans ON wtrans.woTransID = woempinout.woTransID and IFNULL(wtrans.isDeleted ,0) = 0   \n" +
                "	WHERE woempinout.employeeID = IFNULL(pEmployeeID, woempinout.employeeID)    \n" +
                "    AND woempinout.woID = IFNULL(pWoID,woempinout.woID)        \n" +
                "	AND woempinout.deletedAt IS NULL     \n" +
                "    AND woempinout.checkoutTime IS NULL;        \n" +
                "  \n" +
                "    UPDATE temp_Sproc_GetActiveOperationsList tempList    \n" +
                "    SET opStatus = CASE WHEN  ( (SELECT count(1) from workorder_trans_operation_hold_unhold wohold    \n" +
                "				WHERE wohold.woID = tempList.woID       \n" +
                "                AND wohold.woOPID = tempList.woOPID    \n" +
                "				AND endDate is Null    \n" +
                "				AND IFNULL(isDeleted,0) = 0 ) > 0 ) THEN 'Hold' ELSE opStatus END  ,    \n" +
                "		currentTotalTime = (	SELECT (SUM(TimeDiff1) - IFNULL(SUM(pauseTime),0)) TotalConsumptionTime       		    \n" +
                "							FROM ( SELECT   TIMESTAMPDIFF(SECOND, b.checkinTime, IFNULL(b.checkoutTime,fun_DatetimetoUTCDateTime())             \n" +
                "								 ) TimeDiff1,        \n" +
                "								(SELECT SUM( TIMESTAMPDIFF(SECOND,c.pausedTime, IFNULL(c.resumeTime,fun_DatetimetoUTCDateTime())))         \n" +
                "								 FROM workorder_trans_emp_pausedet c WHERE c.woTransinoutID = b.woTransinoutID) pauseTime				    \n" +
                "							FROM 	workorder_trans a,workorder_trans_empinout b            \n" +
                "							WHERE 	a.woTransID = b.woTransID            \n" +
                "							AND 	a.woOPID = tempList.woOPID    \n" +
                "							AND 	a.checkinEmployeeID = tempList.employeeID    \n" +
                "                            AND 	b.checkoutTime IS NULL  \n" +
                "							AND 	a.deletedAt IS NULL       \n" +
                "							AND 	b.deletedAt IS NULL )  currtime        \n" +
                "					  )  ;    \n" +
                "  \n" +
                "		UPDATE temp_Sproc_GetActiveOperationsList tempList   \n" +
                "        SET opStatus = 'Work In Progress'   \n" +
                "        WHERE opStatus IS NULL;  \n" +
                "    SET  @SQL1 = CONCAT('    select woNumber,    \n" +
                "			opNumber,    \n" +
                "            opName,    \n" +
                "            opFullName,  \n" +
                "            woID,    \n" +
                "            woOPID,    \n" +
                "            woTransID,    \n" +
                "            employeeID,    \n" +
                "            employeeName,    \n" +
                "            checkinDateTime,    \n" +
                "            currentTotalTime,    \n" +
                "            opStatus  ,  \n" +
                "            displayActivityType  \n" +
                "		from temp_Sproc_GetActiveOperationsList ');    \n" +
                "  \n" +
                "  \n" +
                "     IF pCount = 1 THEN    \n" +
                "		SET @SQL2 = CONCAT(\"select count(1) opCount from ( \", @SQL1,\" ) c   \");      \n" +
                "	 ELSE    \n" +
                "		SET @SQL2 = CONCAT(\"select * from ( \", @SQL1,\" ) c                  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "     END IF;    \n" +
                "     PREPARE stmt FROM @SQL2;                                                                              \n" +
                "	 EXECUTE stmt;     \n" +
                "  \n" +
                "     DROP TEMPORARY TABLE IF EXISTS `temp_Sproc_GetActiveOperationsList`;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2721,'2.00','V1','Sproc_GetActiveOperationsList- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2721:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getTotalSalesCommission` ;  \n" +
                "CREATE FUNCTION `fun_getTotalSalesCommission`(  	    \n" +
                "	pattributeID INT,    \n" +
                "	prfqAssyQuoteID INT ,  \n" +
                "	pcustomPartId INT,  \n" +
                "	ptype INT  \n" +
                "  \n" +
                ") RETURNS DECIMAL(16,6)  \n" +
                "BEGIN                      \n" +
                "	DECLARE pPrice DECIMAL (16,6);  \n" +
                "	DECLARE actualPrice DECIMAL (16,6);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempPricetable;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS  tempPricetable AS  \n" +
                "  \n" +
                "	SELECT * FROM ( WITH RECURSIVE cte AS              \n" +
                "	(              \n" +
                "	  SELECT id,refAttributeID FROM quotecharges_dynamic_fields_mst WHERE id=pattributeID AND deletedAt IS NULL        \n" +
                "  \n" +
                "  \n" +
                "	  UNION ALL              \n" +
                "  \n" +
                "	  SELECT ra.id,ra.refAttributeID FROM quotecharges_dynamic_fields_mst ra           \n" +
                "	  LEFT JOIN cte ON cte.refAttributeID=ra.id          \n" +
                "	   WHERE ra.id=cte.refAttributeID AND ra.deletedAt IS NULL      \n" +
                "  \n" +
                "  \n" +
                "	)              \n" +
                "	SELECT DISTINCT c.id        \n" +
                "	         FROM cte c) a WHERE a.id!=pattributeID;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  IF(ptype=1)THEN  \n" +
                "	SELECT IFNULL(unitprice,0) INTO actualPrice FROM rfq_assy_quotations WHERE id=prfqAssyQuoteID;  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(ra.amount),0) INTO pPrice FROM rfq_assy_quotations_additionalcost ra INNER JOIN quotecharges_dynamic_fields_mst qd ON qd.id=ra.quotechargedynamicfieldid  \n" +
                "	WHERE qd.quoteAttributeType='R' AND qd.costingType='Material' AND ra.quotechargedynamicfieldid IN (SELECT tp.id FROM tempPricetable tp) AND ra.rfqassyquoteid=prfqAssyQuoteID   \n" +
                "	 AND ra.refCustomPartQuoteID IS NULL AND ra.isdeleted=0;  \n" +
                "  \n" +
                "	SET pPrice=pPrice+actualPrice;  \n" +
                "  END IF;  \n" +
                "  IF(ptype=2)THEN  \n" +
                "	SELECT IFNULL(unitprice,0) INTO actualPrice FROM rfq_assy_quotations_customparts WHERE rfqAssyQuoteId=prfqAssyQuoteID AND id=pcustomPartId;  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(ra.amount),0) INTO pPrice FROM rfq_assy_quotations_additionalcost ra INNER JOIN quotecharges_dynamic_fields_mst qd ON qd.id=ra.quotechargedynamicfieldid  \n" +
                "	WHERE qd.quoteAttributeType='R' AND qd.costingType='Material' AND ra.quotechargedynamicfieldid IN (SELECT tp.id FROM tempPricetable tp) AND  ra.rfqassyquoteid=prfqAssyQuoteID   \n" +
                "	 AND ra.refCustomPartQuoteID=pcustomPartId AND ra.isdeleted=0;  \n" +
                "  \n" +
                "	SET pPrice=pPrice+actualPrice;  \n" +
                "  END IF;  \n" +
                "  IF(ptype=3)THEN  \n" +
                "	SELECT IFNULL(laborunitPrice,0) INTO actualPrice FROM rfq_assy_quotations WHERE id=prfqAssyQuoteID;  \n" +
                "  \n" +
                "	SELECT IFNULL(SUM(ra.amount),0) INTO pPrice FROM rfq_assy_quotations_additionalcost ra INNER JOIN quotecharges_dynamic_fields_mst qd ON qd.id=ra.quotechargedynamicfieldid  \n" +
                "	WHERE qd.quoteAttributeType='R' AND qd.costingType='Labor' AND ra.quotechargedynamicfieldid IN (SELECT tp.id FROM tempPricetable tp) AND  ra.rfqassyquoteid=prfqAssyQuoteID   \n" +
                "  \n" +
                "	AND ra.isdeleted=0;  \n" +
                "  \n" +
                "	SET pPrice=pPrice+actualPrice;  \n" +
                "  END IF;  \n" +
                "	 RETURN    pPrice;                \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2722,'2.00','V1',' Alter function fun_getTotalSalesCommission-champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2722:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_component` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component`(        \n" +
                "	IN tableName VARCHAR(255),        \n" +
                "	IN IDs LONGTEXT,        \n" +
                "	IN deletedBy INT,        \n" +
                "	IN entityID VARCHAR(255),        \n" +
                "	IN refrenceIDs LONGTEXT,        \n" +
                "	IN countList INT,        \n" +
                "    IN pRoleID INT        \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION        \n" +
                "BEGIN        \n" +
                "	ROLLBACK;        \n" +
                "	RESIGNAL;        \n" +
                "END;        \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING        \n" +
                "BEGIN        \n" +
                "	ROLLBACK;        \n" +
                "	RESIGNAL;        \n" +
                "END;        \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempComponentIds;        \n" +
                "SET @sqlIds = CONCAT(' create temporary table tempComponentIds          \n" +
                "					select GROUP_CONCAT(id) id          \n" +
                "					  from component          \n" +
                "					 where systemGenerated = false        \n" +
                "                       and id in (',IDs,')          \n" +
                "						or refSupplierMfgpnComponentID in (',IDs,') ');          \n" +
                "		PREPARE stmt FROM @sqlIds;          \n" +
                "        EXECUTE stmt;          \n" +
                "  \n" +
                "	SELECT id INTO IDs          \n" +
                "    FROM tempComponentIds;          \n" +
                "    SET @deletedByUser = deletedBy;        \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempComponent;        \n" +
                "	SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as        \n" +
                "				select sum(cnt) cnt, msg, min(componentID) componentID    \n" +
                "                from (        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                          \n" +
                "					UNION ALL                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_alternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                          \n" +
                "					UNION ALL                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_packagingalias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                          \n" +
                "					UNION ALL                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_processmaterial WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                          \n" +
                "					UNION ALL                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_rohsalternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                          \n" +
                "					UNION ALL                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(mfgPNID) componentID FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)                          \n" +
                "					UNION ALL                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_drivetools WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                          \n" +
                "					UNION ALL                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg, min(partID) componentID FROM assemblystock WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                          \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg, min(fromPartID) componentID FROM eco_request WHERE deletedAt IS NULL AND fromPartID IN(',IDs,') LIMIT 1)                          \n" +
                "                    union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg, min(toPartID) componentID FROM eco_request WHERE deletedAt IS NULL AND toPartID IN(',IDs,') LIMIT 1)                          \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(partID) componentID FROM rfq_lineitems_additional_comment WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                          \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assembly_excessstock_location\" else \"\" end as msg, min(partID) componentID FROM workorder_assembly_excessstock_location WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                          \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(refComponentID) componentID FROM component_cust_alias_rev_pn WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                          \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg, min(partID) componentID FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                          \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg, min(partID) componentID FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                          \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(refComponentID) componentID FROM rfq_bom_header_component_configuration WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                          \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg, min(partID) componentID FROM workorder WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                          \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg, min(partID) componentID FROM shippedassembly WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                          \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"kit_allocation\" else \"\" end as msg, min(assyID) componentID FROM kit_allocation WHERE assyID IN(',IDs,') LIMIT 1)                          \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg, min(partID) componentID FROM rfq_assemblies WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                          \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg, min(partID) componentID FROM salesorderdet WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                          \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det\" else \"\" end as msg, min(partID) componentID FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                          \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(custPNID) componentID FROM rfq_lineitems WHERE deletedAt IS NULL AND custPNID IN(',IDs,') LIMIT 1)    \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(partID) componentID FROM rfq_lineitems WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)    \n" +
                "                    union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(distMfgPNID) componentID FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND distMfgPNID IN(',IDs,') LIMIT 1)    \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(mfgPNID) componentID FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)    \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(partID) componentID FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)    \n" +
                "                    union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(assyID) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)    \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(refcompid) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND refcompid IN(',IDs,') LIMIT 1)    \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(RefCPNMFGPNID) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND RefCPNMFGPNID IN(',IDs,') LIMIT 1)    \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(refSupplierPartId) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND refSupplierPartId IN(',IDs,') LIMIT 1)    \n" +
                "					union all                         \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(replacementPartID) componentID FROM component WHERE deletedAt IS NULL AND replacementPartID IN(',IDs,') LIMIT 1)              \n" +
                "					union all              \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg, min(assyId) componentID FROM equipment WHERE deletedAt IS NULL and equipmentAs =''S'' AND assyId IN(',IDs,') LIMIT 1)            \n" +
                "					union all              \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"componenet_inspection_requirement_det\" else \"\" end as msg, min(partId) componentID FROM componenet_inspection_requirement_det WHERE deletedAt IS NULL AND partId IN(',IDs,') LIMIT 1)            \n" +
                "					union all              \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_parts_det\" else \"\" end as msg, min(partID) componentID FROM supplier_quote_parts_det WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)          		  \n" +
                "					union all              \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_parts_det\" else \"\" end as msg, min(supplierPartID) componentID FROM supplier_quote_parts_det WHERE deletedAt IS NULL AND supplierPartID IN(',IDs,') LIMIT 1)          		  \n" +
                "                ) q group by msg');            \n" +
                "  #select @SQL;    \n" +
                "		PREPARE stmt FROM @SQL;            \n" +
                "        EXECUTE stmt;            \n" +
                "        IF (countList=FALSE) THEN            \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempComponent t)=0 THEN            \n" +
                "				START TRANSACTION;            \n" +
                "				SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" , packaginggroupID = null  where id IN(',IDs,') and deletedAt is NULL');            \n" +
                "						PREPARE stmt1 FROM @SQL1;            \n" +
                "						EXECUTE stmt1;            \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update part_sub_assy_relationship set  isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where (partID IN(',IDs,') or prPerPartID IN (',IDs,'))and deletedAt is NULL');            \n" +
                "						PREPARE stmt1 FROM @SQL1;            \n" +
                "						EXECUTE stmt1;            \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_alternatepn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');            \n" +
                "						PREPARE stmt1 FROM @SQL1;            \n" +
                "						EXECUTE stmt1;            \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_processmaterial set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');            \n" +
                "						PREPARE stmt1 FROM @SQL1;            \n" +
                "						EXECUTE stmt1;            \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_drivetools set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');            \n" +
                "						PREPARE stmt1 FROM @SQL1;            \n" +
                "						EXECUTE stmt1;            \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_cust_alias_rev_pn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refCPNPartID IN(',IDs,') and deletedAt is NULL');            \n" +
                "						PREPARE stmt1 FROM @SQL1;            \n" +
                "						EXECUTE stmt1;            \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');            \n" +
                "						PREPARE stmt1 FROM @SQL1;            \n" +
                "						EXECUTE stmt1;            \n" +
                "  \n" +
                "				-- start delete packaging alias            \n" +
                "                SET @SQl1 = CONCAT('update component_packagingalias set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');            \n" +
                "						PREPARE stmt1 FROM @SQL1;            \n" +
                "						EXECUTE stmt1;            \n" +
                "					UPDATE component            \n" +
                "					   SET packaginggroupID = NULL,            \n" +
                "							updatedBy = @deletedByUser,            \n" +
                "							updateByRoleId = pRoleID,            \n" +
                "							updatedAt = fun_DatetimetoUTCDateTime()            \n" +
                "					 WHERE isdeleted = FALSE            \n" +
                "					   AND id IN (SELECT c1.componentID             \n" +
                "							 FROM component_packagingalias c1            \n" +
                "								WHERE c1.isdeleted = FALSE            \n" +
                "								  AND c1.aliasgroupID IN            \n" +
                "										(SELECT c2.aliasgroupID            \n" +
                "										   FROM component_packagingalias c2            \n" +
                "										  WHERE c2.isdeleted = FALSE            \n" +
                "										  GROUP BY c2.aliasgroupID            \n" +
                "										 HAVING COUNT(1)=1));            \n" +
                "  \n" +
                "				UPDATE component_packagingalias a            \n" +
                "                JOIN (SELECT c2.aliasgroupID            \n" +
                "							FROM component_packagingalias c2            \n" +
                "							WHERE c2.isdeleted = FALSE            \n" +
                "							GROUP BY c2.aliasgroupID            \n" +
                "							HAVING COUNT(1)=1) b            \n" +
                "				   SET a.isDeleted = 1,            \n" +
                "						a.deletedBy = @deletedByUser,            \n" +
                "						a.deleteByRoleId = pRoleID,            \n" +
                "						a.deletedAt = fun_DatetimetoUTCDateTime()            \n" +
                "					WHERE a.isdeleted = FALSE            \n" +
                "					AND a.aliasgroupID = b.aliasgroupID;            \n" +
                "				-- end delete packaging alias            \n" +
                "  \n" +
                "                -- start delete RoHS alias            \n" +
                "                SET @SQl1 = CONCAT('update component_rohsalternatepn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');            \n" +
                "						PREPARE stmt1 FROM @SQL1;            \n" +
                "						EXECUTE stmt1;            \n" +
                "  \n" +
                "				UPDATE component            \n" +
                "				 SET rohsgroupID = NULL,            \n" +
                "					updatedBy = @deletedByUser,            \n" +
                "					updateByRoleId = pRoleID,            \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()            \n" +
                "					WHERE isdeleted = FALSE            \n" +
                "					  AND id IN (            \n" +
                "						SELECT c1.componentID            \n" +
                "						 FROM component_rohsalternatepn c1            \n" +
                "						WHERE c1.isdeleted = FALSE            \n" +
                "						  AND c1.aliasgroupID IN            \n" +
                "								(SELECT c2.aliasgroupID            \n" +
                "								   FROM component_rohsalternatepn c2            \n" +
                "									WHERE c2.isdeleted = FALSE            \n" +
                "									GROUP BY c2.aliasgroupID            \n" +
                "									HAVING COUNT(1)=1));            \n" +
                "  \n" +
                "				UPDATE component_rohsalternatepn a            \n" +
                "                JOIN (SELECT c2.aliasgroupID            \n" +
                "							   FROM component_rohsalternatepn c2            \n" +
                "								WHERE c2.isdeleted = FALSE            \n" +
                "								GROUP BY c2.aliasgroupID            \n" +
                "								HAVING COUNT(1)=1) b            \n" +
                "					SET a.isDeleted = 1,            \n" +
                "						a.deletedBy = @deletedByUser,            \n" +
                "						a.deleteByRoleId = pRoleID,            \n" +
                "						a.deletedAt = fun_DatetimetoUTCDateTime()            \n" +
                "					WHERE a.isdeleted = FALSE            \n" +
                "					  AND a.aliasgroupID = b.aliasgroupID;            \n" +
                "                -- start delete RoHS alias            \n" +
                "  \n" +
                "                SET @SQl1 = CONCAT('update component_otherpn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');            \n" +
                "						PREPARE stmt1 FROM @SQL1;            \n" +
                "						EXECUTE stmt1;            \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update Component_FunctionalTestingEquipment set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');            \n" +
                "						PREPARE stmt1 FROM @SQL1;            \n" +
                "						EXECUTE stmt1;            \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_requirefunctionaltype set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');            \n" +
                "						PREPARE stmt1 FROM @SQL1;            \n" +
                "						EXECUTE stmt1;            \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_requiremountingtype set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');            \n" +
                "						PREPARE stmt1 FROM @SQL1;            \n" +
                "						EXECUTE stmt1;            \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_standard_details set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');            \n" +
                "						PREPARE stmt1 FROM @SQL1;            \n" +
                "						EXECUTE stmt1;            \n" +
                "  \n" +
                "				SELECT * FROM tempComponent WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";                        \n" +
                "				COMMIT;                        \n" +
                "			ELSE                        \n" +
                "					SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempComponent t;                        \n" +
                "			END IF;                        \n" +
                "		ELSE                        \n" +
                "				SELECT t1.cnt,t2.display_page_name AS msg, componentID, mf.mfgType    \n" +
                "				   FROM tempComponent t1                        \n" +
                "					INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name        \n" +
                "                    LEFT JOIN component co ON co.id = t1.componentID    \n" +
                "					JOIN mfgcodemst mf ON mf.id = co.mfgcodeid    \n" +
                "					WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"                        \n" +
                "					ORDER BY t2.display_page_name;                        \n" +
                "		END IF;                        \n" +
                "		DROP TEMPORARY TABLE tempComponent;                        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_mfgcodemst` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_mfgcodemst`(                                                                            \n" +
                "  IN tableName VARCHAR(255),      \n" +
                "	IN IDs LONGTEXT,      \n" +
                "	IN deletedBy INT,      \n" +
                "	IN entityID VARCHAR(255),      \n" +
                "	IN refrenceIDs LONGTEXT,      \n" +
                "	IN countList INT,      \n" +
                "    IN pRoleID INT      \n" +
                "    )  \n" +
                "BEGIN                       \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                                  \n" +
                "BEGIN                                  \n" +
                "	ROLLBACK;                                  \n" +
                "	RESIGNAL;                                  \n" +
                "END;                                  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                                  \n" +
                "BEGIN                                  \n" +
                "	ROLLBACK;                                  \n" +
                "	RESIGNAL;                                  \n" +
                "END;                \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempMFGCodeMst;          \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as                                                                            \n" +
                "  \n" +
                "			        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mfgcodeID IN(',IDs,') LIMIT 1)                                                                                                                                      \n" +
                "				UNION ALL                                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND mfgcodeid IN(',IDs,') LIMIT 1)                                                                                                                          		                                                                         \n" +
                "				UNION ALL                                                                            \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)                                                                            \n" +
                "				UNION ALL                                                                             \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)                            \n" +
                "				UNION ALL                                                                             \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)                  \n" +
                "				UNION ALL                                                                             \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)                                                                                                                                      \n" +
                "				UNION ALL                                                                             \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)                                         \n" +
                "				UNION ALL                                                                             \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employees WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)                           \n" +
                "				UNION ALL                                                                             \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND certificateSupplierID IN(',IDs,') LIMIT 1)                 \n" +
                "				UNION ALL    \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyTo IN(',IDs,') OR buyBy IN(',IDs,')) LIMIT 1)                 \n" +
                "				UNION ALL                                                                             \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)                 \n" +
                "		 ');                \n" +
                "                   -- (SELECT COUNT(1) cnt , CASE WHEN COUNT(1) > 0 THEN \"rfq_consolidated_mfgpn_lineitem_alternate\" ELSE \"\" END AS msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE mfgCodeID IN(',IDs,')  LIMIT 1)                              \n" +
                "		   -- UNION ALL                    \n" +
                "		   -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)                                                                            \n" +
                "		   -- UNION ALL             \n" +
                "		   -- UNION ALL                    \n" +
                "		   -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"billing_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') AND addressType=\"B\"  LIMIT 1)              \n" +
                "		   -- UNION ALL                    \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') AND addressType=\"S\" LIMIT 1)              \n" +
                "	           -- UNION ALL                                                                            \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_contactperson\" else \"\" end as msg FROM customer_contactperson WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)             \n" +
                "	           -- UNION ALL                                                                            \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyBy IN(',IDs,') OR buyTo IN(',IDs,')) LIMIT 1)      		                                                           \n" +
                "		PREPARE stmt FROM @SQL;                                                                            \n" +
                "		EXECUTE stmt;                \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN                                                                   \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempMFGCodeMst t)=0 THEN                                                                            \n" +
                "				START TRANSACTION;                    \n" +
                "  \n" +
                "				SET @SQl1 = 	CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                                            \n" +
                "						PREPARE stmt1 FROM @SQL1;                                                                            \n" +
                "						EXECUTE stmt1;                                    \n" +
                "  \n" +
                "				SET @SQl2 = 	CONCAT('update mfgcodealias set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" WHERE mfgcodeId IN(',IDs,') and deletedAt is NULL');                                    \n" +
                "						PREPARE stmt2 FROM @SQL2;                                                                            \n" +
                "						EXECUTE stmt2;                                       \n" +
                "				SELECT * FROM tempMFGCodeMst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";                    \n" +
                "				COMMIT;                                                                            \n" +
                "			ELSE                                                                            \n" +
                "				SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempMFGCodeMst t;               \n" +
                "  \n" +
                "			END IF;               \n" +
                "		ELSE              \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg              \n" +
                "                                   FROM tempMFGCodeMst t1              \n" +
                "                                    INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name              \n" +
                "                                    WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"              \n" +
                "                                    ORDER BY t2.display_page_name;                          \n" +
                "		END IF;               \n" +
                "  \n" +
                " DROP TEMPORARY TABLE IF EXISTS tempMFGCodeMst;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_quotecharges_dynamic_fields_mst` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_quotecharges_dynamic_fields_mst`(       \n" +
                "	IN tableName VARCHAR(255),       \n" +
                "	IN IDs LONGTEXT,       \n" +
                "	IN deletedBy INT,       \n" +
                "	IN entityID VARCHAR(255),       \n" +
                "	IN refrenceIDs LONGTEXT,       \n" +
                "	IN countList INT,    \n" +
                "	IN pRoleID INT    \n" +
                ")  \n" +
                "BEGIN       \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION       \n" +
                "	BEGIN       \n" +
                "		ROLLBACK;       \n" +
                "		RESIGNAL;       \n" +
                "	END;       \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING       \n" +
                "	BEGIN       \n" +
                "		ROLLBACK;       \n" +
                "		RESIGNAL;       \n" +
                "	END;       \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempQuotecharges_dynamic_fields_mst;       \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempQuotecharges_dynamic_fields_mst as       \n" +
                "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assy_quotations_additionalcost\" else \"\" end as msg       \n" +
                "	FROM rfq_assy_quotations_additionalcost WHERE deletedAt IS NULL AND quoteChargeDynamicFieldID IN (',IDs,') LIMIT 1)    \n" +
                "		UNION ALL         \n" +
                "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_part_attribute\" else \"\" end as msg       \n" +
                "	FROM supplier_quote_part_attribute WHERE deletedAt IS NULL AND attributeID IN (',IDs,') LIMIT 1)      \n" +
                "		UNION ALL    \n" +
                "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_part_price_attribute\" else \"\" end as msg       \n" +
                "	FROM supplier_quote_part_price_attribute WHERE deletedAt IS NULL AND attributeID IN (',IDs,') LIMIT 1)         \n" +
                "	');       \n" +
                "	PREPARE stmt FROM @SQL;       \n" +
                "	EXECUTE stmt;       \n" +
                "  \n" +
                "    IF (countList=FALSE) THEN       \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempQuotecharges_dynamic_fields_mst t)=0 THEN       \n" +
                "			SET @SQl1 = CONCAT('update quotecharges_dynamic_fields_mst set isDeleted=',1,', deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');	      \n" +
                "			PREPARE stmt1 FROM @SQL1;       \n" +
                "			EXECUTE stmt1;       \n" +
                "			SELECT * FROM tempQuotecharges_dynamic_fields_mst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";       \n" +
                "		ELSE       \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempQuotecharges_dynamic_fields_mst t;       \n" +
                "		END IF;       \n" +
                "	ELSE       \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg       \n" +
                "		FROM tempQuotecharges_dynamic_fields_mst t1       \n" +
                "		INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name       \n" +
                "		WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"       \n" +
                "		ORDER BY t2.display_page_name;       \n" +
                "	END IF;       \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2723,'2.00','V1',' Supplier Quote  - Dharmesh P'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2723:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO table_mapping_details (tabel_name, display_page_name) VALUES ('supplier_quote_part_price_attribute', 'Supplier Quote Part Attribute Price');    \n" +
                "INSERT INTO table_mapping_details (tabel_name, display_page_name) VALUES ('supplier_quote_mst', 'Supplier Quote');  \n" +
                "INSERT INTO table_mapping_details (tabel_name, display_page_name) VALUES ('supplier_quote_parts_det', 'Supplier Quote Parts Detail');  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2724,'2.00','V1',' Supplier Quote  - Dharmesh P'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2724:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS fun_CovnertDateTimeByTimezoneValue;  \n" +
                "CREATE FUNCTION `fun_CovnertDateTimeByTimezoneValue`(      \n" +
                "	pDateTime datetime,    \n" +
                "    pTimezoneOffset varchar(50)    \n" +
                "    ) RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN    \n" +
                "    return convert_tz(pDateTime ,'+00:00',pTimezoneOffset);    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2725,'2.00','V1',' Common Function for Get Converted DateTime by TimezoneKey Value  - SHUBHAN'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2725:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS fun_getOperationNameById;  \n" +
                "CREATE FUNCTION `fun_getOperationNameById`(              \n" +
                "	pId INT) RETURNS varchar(500) CHARSET utf8mb4  \n" +
                "BEGIN              \n" +
                "	DECLARE vName VARCHAR(500);    \n" +
                "	SET vName = NULL;    \n" +
                "	SELECT opName INTO vName FROM operations WHERE opID = pId;                    \n" +
                "	RETURN vName;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2726,'2.00','V1','fun_getOperationNameById  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2726:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS fun_getEqpWSNameByID;  \n" +
                "CREATE FUNCTION `fun_getEqpWSNameByID`(    \n" +
                " pId INT(11)       \n" +
                ") RETURNS varchar(500) CHARSET utf8mb4  \n" +
                "BEGIN    \n" +
                "	DECLARE vName VARCHAR(500);           \n" +
                "	 SELECT assetName INTO vName FROM equipment e     \n" +
                "	 where   e.eqpID = pId;          \n" +
                "	RETURN vName;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2727,'2.00','V1','fun_getEqpWSNameByID  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2727:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS fun_getCetificateNameById;  \n" +
                "CREATE FUNCTION `fun_getCetificateNameById`(            \n" +
                "    pColName VARCHAR(255),  \n" +
                "	pId VARCHAR(255)	  \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN            \n" +
                "  \n" +
                "	DECLARE vName VARCHAR(100);    \n" +
                "    IF pColName  = 'CLASSIDS' OR pColName = 'ADDCLASSIDS' OR pColName = 'UPDATECLASSIDS' THEN  \n" +
                "		SELECT concat(cs.shortName , ' ', sc.className)   into vName  \n" +
                "		FROM standard_class  sc  \n" +
                "		JOIN certificate_standards cs ON cs.certificateStandardID = sc.certificateStandardID  AND IFNULL(cs.isDeleted,0) = 0  \n" +
                "		WHERE	sc.classID = pId   \n" +
                "        AND IFNULL(sc.isDeleted,0) = 0;  \n" +
                "	ELSEIF pColName = 'STANDARDIDS' THEN  \n" +
                "		SELECT cs.shortName into vName   \n" +
                "        FROM certificate_standards cs  \n" +
                "        WHERE cs.certificateStandardID = pId  \n" +
                "        AND IFNULL(cs.isDeleted,0) = 0;  \n" +
                "	END IF;  \n" +
                "    RETURN vName;             \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2728,'2.00','V1','fun_getCetificateNameById  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2728:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS fun_getClusterNameById;  \n" +
                "CREATE FUNCTION `fun_getClusterNameById`(              \n" +
                "	pId INT) RETURNS varchar(500) CHARSET utf8mb4  \n" +
                "BEGIN              \n" +
                "	DECLARE vName VARCHAR(500);    \n" +
                "  \n" +
                "	SELECT clusterName INTO vName FROM workorder_cluster WHERE clusterID = pId;                    \n" +
                "	RETURN vName;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2729,'2.00','V1','fun_getClusterNameById  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2729:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "UPDATE `page_detail` SET `menuName` = 'Purchase/Incoming Inspection Requirement(s)',   \n" +
                "`pageName` = 'Purchase/Incoming Inspection Requirement(s)', `displayMenuName` = 'Purchase/Incoming Inspection Requirement(s)'   \n" +
                "WHERE (`pageRoute` = 'app.purchaseinspection');  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2730,'2.00','V1',' Purchase/Incoming Inspection Requirement - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2730:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "CREATE TABLE `report_change_logs` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `reportId` int(11) NOT NULL,  \n" +
                "  `startActivityDate` datetime NOT NULL,  \n" +
                "  `endActivityDate` datetime DEFAULT NULL,  \n" +
                "  `activityStartBy` int(11) NOT NULL,  \n" +
                "  `isDeleted` tinyint(1) DEFAULT '0',  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `createdAt` datetime NOT NULL,  \n" +
                "  `updatedAt` datetime DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `createByRoleId` int(11) DEFAULT NULL,  \n" +
                "  `updateByRoleId` int(11) DEFAULT NULL,  \n" +
                "  `deleteByRoleId` int(11) DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_report_change_logs_reportd_idx` (`reportId`),  \n" +
                "  CONSTRAINT `FK_report_change_logs_reportd` FOREIGN KEY (`reportId`) REFERENCES `reportmaster` (`id`)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2731,'2.00','V1',' Report Change Log - SHUBHAM'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2731:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrievePurchaseInspectionRequirementList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseInspectionRequirementList`(                              \n" +
                "	IN pPageIndex INT(11),                              \n" +
                "	IN pRecordPerPage INT(11),                              \n" +
                "	IN pOrderBy VARCHAR(255),                              \n" +
                "	IN pWhereClause VARCHAR(16383),          \n" +
                "	IN pPartId INT(11)          \n" +
                ")  \n" +
                "BEGIN                              \n" +
                "	DECLARE pOffset INT(11);                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);       \n" +
                "	DECLARE v_PartId INT(11);     \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);               \n" +
                "	DECLARE v_TimeZone VARCHAR(50);            \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;      \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;      \n" +
                "  \n" +
                "	SELECT IFNULL(refSupplierMfgpnComponentID, pPartId) INTO v_PartId FROM component WHERE id = pPartId AND isDeleted = 0;    \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseInspectionRequirementList = CONCAT(\"       \n" +
                "		SELECT 		cird.id,      \n" +
                "				cird.partId,      \n" +
                "				cird.inspectionRequirementId,    \n" +
                "				im.requirement requirement,      \n" +
                "				fun_getUserNameByID(cird.updatedBy) updatedby,                          \n" +
                "				fun_getUserNameByID(cird.createdBy) createdby,                          \n" +
                "				fun_getRoleByID(cird.createByRoleId) createdbyRole,                          \n" +
                "				fun_getRoleByID(cird.updateByRoleId) updatedbyRole,                          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(cird.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(cird.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt          					     \n" +
                "		FROM 		componenet_inspection_requirement_det cird      \n" +
                "		INNER JOIN 	inspection_mst im ON im.id = cird.inspectionRequirementId AND im.isDeleted = 0    \n" +
                "		WHERE		cird.partId = \", v_PartId ,\"      \n" +
                "					AND cird.isDeleted = 0      \n" +
                "	\");      \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \",\" requirement ASC \") ;                                                \n" +
                "	ELSE                                                \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;                                                \n" +
                "	END IF;	                                                \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                  \n" +
                "		SET pWhereClause = ' 1=1 ' ;                  \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                \n" +
                "	ELSE	                                                \n" +
                "		SET rowNumWhere = '';                                                \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseInspectionRequirementList,\" ) c where 1=1 and \", pWhereClause);          \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                  \n" +
                "	EXECUTE query1;                                  \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT a.* FROM ( \", @temp_Sproc_RetrievePurchaseInspectionRequirementList,\" ) a WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "	EXECUTE query2;                       \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetReceivingMaterial` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(	                                                                                                                            \n" +
                "	IN ppageIndex INT(11),                                                                                    \n" +
                "	IN precordPerPage INT(11),                                                                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                                    \n" +
                "	IN pWHId INT(11),                                                                                   \n" +
                "	IN pBinId INT(11),                                                                        \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),                                                                        \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),                                                                        \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),                                                                        \n" +
                "	IN pAssyIDs VARCHAR(16383),                                                                       \n" +
                "	IN pRestrictPart TINYINT(1),                                                                      \n" +
                "	IN pExpireMaterial TINYINT(1),                                                                    \n" +
                "	IN pPartId INT(11),                                                                      \n" +
                "	IN pIsShowPackagingAlias TINYINT(1),                                                      \n" +
                "	IN pStandardIDs VARCHAR(16383),                                                      \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),                                                      \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),                                                      \n" +
                "	IN pDateCode VARCHAR(16383),                                                      \n" +
                "	IN pIsAvailableToSell TINYINT(1),                                              \n" +
                "	IN pIsRestrictedUMID TINYINT(1),                                      \n" +
                "	IN pdepartmentIDs VARCHAR(16383),                                      \n" +
                "	IN pwarehouseType VARCHAR(255),                                \n" +
                "	IN pWarehouse VARCHAR(16383),                                \n" +
                "	IN pExpiredDay INT(11),        \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),        \n" +
                "	IN pCustomerId INT(11)        \n" +
                ")  \n" +
                "BEGIN                                                                                                                         \n" +
                "	DECLARE pOffset INT(11);                                                                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                                                              \n" +
                "	DECLARE vInnerJoinMainQuery VARCHAR(16383) ;                                                                          \n" +
                "	DECLARE vComponentWhereClause VARCHAR(16383);                                                                        \n" +
                "	DECLARE vKitWhereClause VARCHAR(16383);                                                                        \n" +
                "	DECLARE vUMIDWhereClause VARCHAR(16383);                       \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);               \n" +
                "	DECLARE v_TimeZone VARCHAR(50);            \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;      \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;      \n" +
                "  \n" +
                "	SET vInnerJoinMainQuery = ' ', vComponentWhereClause ='', vKitWhereClause='', vUMIDWhereClause = '';                                                                                          \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                                                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);                                                                        \n" +
                "	ELSE                                                                                    \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";                                                                                    \n" +
                "	END IF;                                                                                    \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                                                                                                            \n" +
                "		SET pWhereClause = ' 1=1';                                                                                      \n" +
                "	END IF;	                                                                        \n" +
                "  \n" +
                "	IF(pExpireMaterial = 1) THEN                                \n" +
                "		IF(pExpiredDay = 0) THEN                                 \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND expiryDate is not null AND expiryDate < fun_DatetimetoUTCDateTime()');                                \n" +
                "		ELSE                                \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND expiryDate is not null AND expiryDate < fun_DatetimetoUTCDateTime() + INTERVAL ',pExpiredDay,' DAY');                                \n" +
                "		END IF;	                                \n" +
                "	END IF;	                                        \n" +
                "	IF(pWarehouse IS NOT NULL) THEN                                                                                                                            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND warehouseID in  (',pWarehouse,')');                                 \n" +
                "	END IF;	                                   \n" +
                "	 IF(pwarehouseType IS NOT NULL) THEN                                                                                                                            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND warehouseType = ''',pwarehouseType,'''');                                                                                      \n" +
                "	END IF;	                                      \n" +
                "	IF(pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN                                                                                                                           \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND departmentID in (',pdepartmentIDs,')');                                                                                      \n" +
                "	END IF;	         \n" +
                "	IF(pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN                                                                                                                           \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND UMIDrohsStatusID in (',pRohsStatusIDs,')');                                                                                      \n" +
                "	END IF;	                                                                      \n" +
                "  \n" +
                "	IF(pWHId IS NOT NULL) THEN                                                                                    \n" +
                "		SET vInnerJoinMainQuery = CONCAT(vInnerJoinMainQuery,' INNER JOIN binmst b ON css.binID = b.id  and b.WarehouseID = ', pWHId,' ');                                                                                    \n" +
                "	END IF;  	                                                                                  \n" +
                "  \n" +
                "	IF(pBinId IS NOT NULL) THEN                                                                                    \n" +
                "		SET @whereBin = CONCAT(' AND css.binID = ', pBinId, ' ');                                                                                    \n" +
                "	ELSE                                                                             \n" +
                "		SET @whereBin = '';                                                                                    \n" +
                "	END IF;                                                                            \n" +
                "  \n" +
                "	IF(pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN                                                                         \n" +
                "		SET vComponentWhereClause = CONCAT(vComponentWhereClause, ' AND c.mountingTypeID in (', pMountingTypeIDs, ') ');                                                                        \n" +
                "	END IF;                                                                        \n" +
                "  \n" +
                "	IF(pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN                                                                         \n" +
                "		SET vComponentWhereClause = CONCAT(vComponentWhereClause, ' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ');                                                                        \n" +
                "	END IF;                                                       \n" +
                "  \n" +
                "	IF (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN                                                          \n" +
                "		SET vComponentWhereClause = CONCAT(vComponentWhereClause, ' AND css.refcompid IN (select c.id from component_standard_details csd where csd.componentID = c.id AND csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ');                                                          \n" +
                "	ELSEIF (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN                                                          \n" +
                "		SET vComponentWhereClause = CONCAT(vComponentWhereClause, ' AND css.refcompid IN (select c.id from component_standard_details csd where csd.componentID = c.id AND csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ');                                                          \n" +
                "	ELSEIF (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN                                                          \n" +
                "		SET vComponentWhereClause = CONCAT(vComponentWhereClause, ' AND css.refcompid IN (select c.id from component_standard_details csd where csd.componentID = c.id AND csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ');                                                          \n" +
                "	END IF;                                                                         \n" +
                "  \n" +
                "	IF(pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN                                                                         \n" +
                "		SET vComponentWhereClause = CONCAT(vComponentWhereClause, ' AND css.costCategoryID in (', pCostCategoryIDs, ') ');                                                                        \n" +
                "	END IF;                                                       \n" +
                "  \n" +
                "	IF(pDateCode IS NOT NULL AND pDateCode != '') THEN                                                                         \n" +
                "		SET vComponentWhereClause = CONCAT(vComponentWhereClause, ' AND css.dateCode in (', pDateCode, ') ');                                                                        \n" +
                "	END IF;                                                       \n" +
                "  \n" +
                "	IF(pRestrictPart = 1) THEN                                                                         \n" +
                "		SET vComponentWhereClause = CONCAT(vComponentWhereClause, ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)');                                                                        \n" +
                "	END IF;                                       \n" +
                "	IF (pIsAvailableToSell = 1) THEN                                                      \n" +
                "		SET vComponentWhereClause = CONCAT(vComponentWhereClause, '                                                      \n" +
                "			AND refcompid NOT IN (                                                      \n" +
                "				SELECT 	mfgPNID                                                       \n" +
                "				FROM 	rfq_lineitems_alternatepart                                                       \n" +
                "				WHERE 	deletedAt IS NULL                                                       \n" +
                "						AND PartID IN (                                                      \n" +
                "							SELECT 	id                                                       \n" +
                "							FROM 	component                                                       \n" +
                "							WHERE 	partStatus = 1                                                       \n" +
                "									AND category = 3                                                       \n" +
                "									AND deletedAt IS NULL                                                      \n" +
                "							)                                                      \n" +
                "						AND mfgPNID IS NOT NULL		                                                      \n" +
                "				UNION                                                      \n" +
                "				SELECT 	componentID AS mfgPNID                                                       \n" +
                "				FROM 	component_packagingalias                                                       \n" +
                "				WHERE 	aliasgroupID IN (                                                                          \n" +
                "								SELECT 	aliasgroupID                                                       \n" +
                "								FROM 	component_packagingalias                                                       \n" +
                "								WHERE 	componentID IN (                                                      \n" +
                "												SELECT 	mfgPNID                                                       \n" +
                "												FROM 	rfq_lineitems_alternatepart                                                       \n" +
                "												WHERE 	deletedAt IS NULL                                                       \n" +
                "														AND PartID IN (                                                      \n" +
                "															SELECT 	id                                                       \n" +
                "															FROM 	component                                                       \n" +
                "															WHERE 	partStatus = 1                                                       \n" +
                "																	AND category = 3                                                       \n" +
                "																	AND deletedAt IS NULL                                                      \n" +
                "															)                                                      \n" +
                "														AND mfgPNID IS NOT NULL                                                      \n" +
                "											) AND deletedAt IS NULL                                                         \n" +
                "							)                                                      \n" +
                "			)                                                      \n" +
                "		');                                                      \n" +
                "	END IF;                                                  \n" +
                "  \n" +
                "	IF (pIsRestrictedUMID = 1) THEN                                              \n" +
                "		SET vComponentWhereClause = CONCAT(vComponentWhereClause, ' AND css.isUMIDRestrict = 1 ');                                                                        \n" +
                "	END IF;                                                   \n" +
                "  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN                                                                         \n" +
                "		SET vUMIDWhereClause = CONCAT(' AND (css.refcompid = ', pPartId);                                                                    \n" +
                "  \n" +
                "        IF(pIsShowPackagingAlias = 1) THEN                                                                       \n" +
                "  \n" +
                "			SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ' OR css.refcompid in (                                                                    \n" +
                "					SELECT cpa.componentID FROM component_packagingalias cpa WHERE cpa.aliasgroupID IN (                                                                                \n" +
                "						SELECT cp.aliasgroupID FROM component_packagingalias cp WHERE cp.componentID  = ', pPartId , '  AND cp.deletedAt IS NULL                                                                      \n" +
                "					) AND cpa.deletedAt IS NULL                                                                    \n" +
                "            ) ' );                                                                        \n" +
                "	END IF;                                                           \n" +
                "  \n" +
                "        SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ' ) ' );                                                                     \n" +
                "    END IF;                                                                      \n" +
                "  \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN		        \n" +
                "		SELECT GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs        \n" +
                "        FROM kit_allocation_assy_detail         \n" +
                "		WHERE deletedAt IS NULL AND partId IN (SELECT id FROM component WHERE deletedAt IS NULL AND mfgcodeid=pCustomerId);		            \n" +
                "    END IF;          \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;                                                              \n" +
                "    CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT(11));                                                                        \n" +
                "    IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN                                                                         \n" +
                "		-- SET @vKitQuery =  CONCAT(\"                                                                        \n" +
                "		-- 		INSERT INTO tempAllocatedKitUIDs (refUidID)                                                                         \n" +
                "		-- 		SELECT 	k.refUIDId                                                                         \n" +
                "		-- 		FROM 	kit_allocation k                                                                        \n" +
                "		-- 		WHERE 	k.refSalesOrderDetID in (\", pRefSalesOrderDetIDs, \")                                                                        \n" +
                "		-- 		AND		k.assyID in (\", pAssyIDs, \")\");                                                                                 \n" +
                "		-- PREPARE kitQuery FROM @vKitQuery;                                                                                                                          \n" +
                "		-- EXECUTE kitQuery;                                                                                                                          \n" +
                "		-- DEALLOCATE PREPARE kitQuery;                                                                            \n" +
                "  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)                                                                         \n" +
                "		SELECT 	k.refUIDId                                                                         \n" +
                "		FROM 	kit_allocation k                                                                        \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)                                                                        \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)                                                                \n" +
                "		AND	k.status = 'A';                                                                		        \n" +
                "		SET vKitWhereClause = CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs)');                                                                        \n" +
                "    END IF;        \n" +
                "  \n" +
                "    IF(pCustomerId IS NOT NULL AND (vKitWhereClause IS NULL OR  vKitWhereClause='')) THEN      \n" +
                "		SET vKitWhereClause = CONCAT(vKitWhereClause,' AND css.customerID=',pCustomerId,'');               \n" +
                "    -- END IF;          \n" +
                "	ELSEIF(pCustomerId IS NOT NULL) THEN        \n" +
                "		SET vKitWhereClause = CONCAT(vKitWhereClause,' OR css.customerID=',pCustomerId,'');           \n" +
                "    END IF;        \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                                                                             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                                                                            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                                            \n" +
                "	ELSE	                                                                                                                            \n" +
                "		SET rowNumWhere = '';                                                                                                                            \n" +
                "	END IF;                                                                                        \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT(\"                                                                                    \n" +
                "		SELECT 			id, 				  \n" +
                "					scanlabel, 		  \n" +
                "					uid, 			  \n" +
                "					pkgQty, 			  \n" +
                "					uom, 			  \n" +
                "					uomName, 			  \n" +
                "					printStatus, 		  \n" +
                "					costCategoryID,                                                                               \n" +
                "					costCategory, 			  \n" +
                "					lotCode, 		  \n" +
                "					dateCode, 		  \n" +
                "					refcompid, 			  \n" +
                "					mfgcodeID,		  \n" +
                "					mfgPN, 				  \n" +
                "					PIDCode, 		  \n" +
                "					packaginggroupID,                                                                               \n" +
                "					mfg, 				  \n" +
                "					packageQty, 		  \n" +
                "					mslLevel, 			  \n" +
                "					pictureCount, 		  \n" +
                "					RoHSStatusID, 			  \n" +
                "					rohsIcon, 		  \n" +
                "					rohsName, 		                                                                              \n" +
                "					binID, 				  \n" +
                "					warehouseID,		  \n" +
                "					location, 		  \n" +
                "					warehouse, 			  \n" +
                "					department, 		  \n" +
                "					customerID, 			  \n" +
                "					receiveMaterialType,	  \n" +
                "					displayReceiveMaterialType,	                            \n" +
                "					spq,				  \n" +
                "					pcbPerArray, 		  \n" +
                "					stockInventoryType, 	  \n" +
                "					displayStockInventoryType,	                                                                 \n" +
                "					customer, 			  \n" +
                "					pkgUnit,   		  \n" +
                "					orgPkgUnit, 		  \n" +
                "					assyID, 			  \n" +
                "					assembly, 		  \n" +
                "					cpn, 				  \n" +
                "					mfgAvailable, 		  \n" +
                "					customerConsign,                                                                               \n" +
                "					refCPNMFGPNID, 			  \n" +
                "					cpnMFGCode, 		  \n" +
                "					cpnMFGPN, 		  \n" +
                "					mfgPNDescription, 		  \n" +
                "					nickName, 		  \n" +
                "					refSupplierPartId, 		  \n" +
                "					supplierMFGCode, 	  \n" +
                "					supplieMFGPN,                                                                              \n" +
                "					packaging, 			  \n" +
                "					packagingName, 		  \n" +
                "					expiryDate, 		  \n" +
                "					allocatedToKit, 		  \n" +
                "					orgQty, 		  \n" +
                "					orgRecBin,			  \n" +
                "					orgRecBinName,		  \n" +
                "					orgRecWarehouse,                                                                              \n" +
                "					orgRecWHName,			  \n" +
                "					fromBin, 		  \n" +
                "					fromBinName, 		  \n" +
                "					fromWarehouse, 			  \n" +
                "					fromWHName, 		  \n" +
                "					fromDepartment, 		  \n" +
                "					fromDepartmentName, 	  \n" +
                "					specialNote, 		 		                                                                              \n" +
                "					orgRecDepartment, 		  \n" +
                "					orgRecDepartmentName, 	  \n" +
                "					updatedAt, 		  \n" +
                "					updatedBy, 			  \n" +
                "					umidModifiedBy, 	  \n" +
                "					createdAt, 			  \n" +
                "					createdBy, 		  \n" +
                "					createdByName,                                                                          \n" +
                "					isinStk,			  \n" +
                "					packingSlipId,		  \n" +
                "					packingSlipName,	  \n" +
                "					expiredStatus,		          \n" +
                "					umidPrefix,               \n" +
                "					createdbyRole,                    \n" +
                "					updatedbyRole,                                      \n" +
                "					refRestrictUMIDId,		  \n" +
                "					isUMIDRestrict,		  \n" +
                "					UMIDRestricted,		  \n" +
                "					restrictUsePermanently, 	  \n" +
                "					restrictUSEwithpermission,                                                     \n" +
                "					restrictPackagingUsePermanently, 			  \n" +
                "					restrictPackagingUseWithpermission,			  \n" +
                "					reasonUMIDRestricted,	countOfRestrictUMID,		  \n" +
                "					departmentID,		  \n" +
                "					warehouseType,                                  \n" +
                "					totalScrapUnit,			  \n" +
                "					((totalScrapUnit/orgPkgUnit)*100) perScrapQty,     \n" +
                "					tentativePrice,			  \n" +
                "					((totalScrapUnit/orgPkgUnit)*tentativePrice) costScrapQty,			  \n" +
                "					isTransit,		  \n" +
                "					searchUser,                          \n" +
                "					mountingTypeID,			  \n" +
                "					mountingTypeName,         \n" +
                "					externalPartPackage,                   \n" +
                "					partPackage,			  \n" +
                "					createdUserCode, 	  \n" +
                "					mfrDateCodeFormatID, 	  \n" +
                "					mfrDateCodeFormat,		  \n" +
                "					mfrDateCode,     \n" +
                "					side,  \n" +
                "					fromSide,  \n" +
                "					UMIDrohsStatusID,  \n" +
                "					UMIDrohsStatus,  \n" +
                "					isCustom,  \n" +
                "					internalPartPackage           					                                                                  \n" +
                "		FROM 		(		                                                                              \n" +
                "					SELECT 		css.id,					  	    \n" +
                "							css.scanlabel,						    \n" +
                "							css.uid,                                                                                      \n" +
                "							css.pkgQty,				  	    \n" +
                "							css.uom,						    \n" +
                "							fun_getUnitNameByID(css.uom) uomName,                                                                                                \n" +
                "							css.printStatus,				    \n" +
                "							css.costCategoryID,                  			    \n" +
                "							fun_getCostCategoryNameByID(css.costCategoryID, FALSE) costCategory,                                                                                 \n" +
                "							css.lotCode,					    \n" +
                "							css.dateCode,                  				    \n" +
                "							css.refcompid,                                                                              \n" +
                "							c.mfgcodeID,					    \n" +
                "							c.mfgPN,                  				    \n" +
                "							c.PIDCode,                                                                              \n" +
                "							c.packaginggroupID,				    \n" +
                "							-- fun_getMfgCodeByID(c.mfgcodeID) mfgCode,		    \n" +
                "							fun_getMfgCodeAndNameByID(c.mfgcodeID) mfg,                                                                                           \n" +
                "							c.packageQty,					    \n" +
                "							fun_getMSLLevelByID(c.mslID, false) mslLevel,        	    \n" +
                "							css.prefix umidPrefix,                                                          \n" +
                "							fun_getFileCountByTransIDAndType('component_sid_stock', css.id) pictureCount,                		    \n" +
                "							-- fun_getMSLLevelByID(c.mslID, true) mslLevelForPrint,                                                              \n" +
                "							c.RoHSStatusID,					    \n" +
                "							fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,		    \n" +
                "							fun_getRoHSNameByID(c.RoHSStatusID)  rohsName,                                                                              \n" +
                "							css.binID,    					    \n" +
                "							fun_getBinNameByID(css.binID) location,			    \n" +
                "							-- fun_getRoHSCategoryByID(c.RoHSStatusID) rohsCategory,      		                                                                                             \n" +
                "							css.customerID,					    \n" +
                "							fun_getMfgCodeAndNameByID(css.customerID) customer,                                                                              \n" +
                "							IFNULL(css.orgPkgUnit, 0) orgPkgUnit,         	    \n" +
                "							css.pkgUnit,                                                                              \n" +
                "							css.assyID,				  	    \n" +
                "							fun_getAssyPIDCodeByID(css.assyID) assembly,    \n" +
                "							fun_getBinSideName(css.binID) side,                                                                                               \n" +
                "							fun_getWarehouseNameByBinID(css.binID) warehouse,                                \n" +
                "							fun_getWarehouseIDByBinID(css.binID) warehouseID,                                                                             \n" +
                "							fun_getDepartmentNameByBinID(css.binID) department,                                                                              \n" +
                "							(    \n" +
                "								CASE     \n" +
                "									WHEN (css.cpn = 0) THEN 'No'     \n" +
                "									WHEN (css.cpn = 1) THEN 'Yes'     \n" +
                "									ELSE ''     \n" +
                "								END    \n" +
                "							) AS cpn,                                                                                                 \n" +
                "							(    \n" +
                "								CASE 	WHEN (css.mfgAvailabel = 0) THEN 'No'     \n" +
                "									WHEN (css.mfgAvailabel = 1) THEN 'Yes'     \n" +
                "									ELSE ''     \n" +
                "								END    \n" +
                "							) AS mfgAvailable,                                                                              \n" +
                "							(    \n" +
                "								CASE 	WHEN (css.customerConsign = 0) THEN 'No'     \n" +
                "									WHEN (css.customerConsign = 1) THEN 'Yes'     \n" +
                "									ELSE ''     \n" +
                "								END    \n" +
                "							) AS customerConsign,				                                                                                         \n" +
                "							css.refCPNMFGPNID,				    \n" +
                "							fun_getMfgCodeAndNameByPartID(css.refCPNMFGPNID) cpnMFGCode,		    \n" +
                "							fun_getMFGPNByID(css.refCPNMFGPNID) cpnMFGPN,                                                                              \n" +
                "							c.mfgPNDescription, 				    \n" +
                "							css.receiveMaterialType,			 						    \n" +
                "							css.spq,                              \n" +
                "							(                              \n" +
                "								CASE                               \n" +
                "									WHEN  css.receiveMaterialType = 'PP' THEN                              \n" +
                "										'Purchased Part'                              \n" +
                "									WHEN  css.receiveMaterialType = 'WC' THEN                              \n" +
                "										'Customer Consigned (with CPN) Part'                              \n" +
                "									WHEN  css.receiveMaterialType = 'WOC' THEN                              \n" +
                "										'Customer Consigned (without CPN) Part'                              \n" +
                "									WHEN  css.receiveMaterialType = 'PR' THEN                              \n" +
                "										'Purchased & Reserved Part'                              \n" +
                "									ELSE                              \n" +
                "										NULL                              \n" +
                "								END                              \n" +
                "  \n" +
                "							) displayReceiveMaterialType,                              \n" +
                "							css.stockInventoryType,                            \n" +
                "							(                              \n" +
                "								CASE                               \n" +
                "									WHEN  css.stockInventoryType = 'NI' THEN                              \n" +
                "										'New Stock'                              \n" +
                "									WHEN  css.stockInventoryType = 'OI' THEN                              \n" +
                "										'Existing Stock (Require to create UMID)'                              \n" +
                "									ELSE                              \n" +
                "										NULL                              \n" +
                "								END                              \n" +
                "  \n" +
                "							) displayStockInventoryType,                              \n" +
                "							css.pcbPerArray, 				    \n" +
                "							css.nickName,													                                                                                                \n" +
                "							css.packaging,					    \n" +
                "							fun_getPackagingNameByID(css.packaging) packagingName,                                                                                                \n" +
                "							css.refSupplierPartId, 				    \n" +
                "							fun_getMfgCodeAndNameByPartID(css.refSupplierPartId) supplierMFGCode,	    \n" +
                "							fun_getMFGPNByID(css.refSupplierPartId) supplieMFGPN,                                                                                                \n" +
                "							css.expiryDate,					    \n" +
                "							fun_getAllocatedKitsNameByID(css.id, 'A') allocatedToKit,                                                                              \n" +
                "							css.orgQty,				  	    \n" +
                "							css.specialNote,                                                                              \n" +
                "							css.fromBin,					    \n" +
                "							fun_getBinNameByID( css.fromBin) fromBinName,              \n" +
                "							fun_getBinSideName(css.fromBin) fromSide,                                                                               \n" +
                "							css.fromWarehouse,      			    \n" +
                "							fun_getWarehouseNameByID(css.fromWarehouse) fromWHName,                                                                                           \n" +
                "							css.fromDepartment,     			    \n" +
                "							fun_getWarehouseNameByID(css.fromDepartment) fromDepartmentName,                                                                                          \n" +
                "							css.orgRecBin,          			    \n" +
                "							fun_getBinNameByID(css.orgRecBin) orgRecBinName,              \n" +
                "							css.orgRecWarehouse,    			    \n" +
                "							fun_getWarehouseNameByID(css.orgRecWarehouse) orgRecWHName,                                                                              \n" +
                "							css.orgRecDepartment,   			    \n" +
                "							fun_getWarehouseNameByID(css.orgRecDepartment) orgRecDepartmentName,                                                                              \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,          					    \n" +
                "							css.updatedBy,	fun_getUserNameByID(css.updatedBy) AS umidModifiedBy,                                                                                \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,				    \n" +
                "							css.createdBy,	fun_getUserNameByID(css.createdBy) createdByName,                                                                          \n" +
                "							css.isinStk,                                      \n" +
                "							fun_getRoleByID(css.createByRoleId) createdbyRole,                                        \n" +
                "		                                        fun_getRoleByID(css.updateByRoleId) updatedbyRole,  					                                                          \n" +
                "							fun_getUMIDPackingSlipIdByID(css.id) packingSlipId,	                            \n" +
                "							(                            \n" +
                "								CASE                            \n" +
                "									WHEN  css.stockInventoryType = 'NI' THEN                              \n" +
                "										fun_getUMIDPackingSlipNameByID(css.id)                             \n" +
                "									WHEN  css.stockInventoryType = 'OI' THEN                              \n" +
                "										css.uid                            \n" +
                "								END                            \n" +
                "							) packingSlipName,                                       \n" +
                "							 fun_getDepartmentIDByBinID(css.binID) departmentID,                                       \n" +
                "							 fun_getWareHouseTypeByBinID(css.binID) warehouseType  ,                                                            \n" +
                "							(    \n" +
                "								CASE 	WHEN (css.expiryDate < fun_DatetimetoUTCDateTime()) THEN 'Expired'     \n" +
                "									ELSE NULL     \n" +
                "								END    \n" +
                "							) AS expiredStatus,                                                        \n" +
                "							refRestrictUMIDId, 				    \n" +
                "							isUMIDRestrict,                                                        \n" +
                "							(    \n" +
                "								CASE 	WHEN (css.isUMIDRestrict = 0) THEN 'No'     \n" +
                "									WHEN (css.isUMIDRestrict = 1) THEN 'Yes'     \n" +
                "									ELSE ''     \n" +
                "								END    \n" +
                "							) AS UMIDRestricted,                                                    \n" +
                "							c.restrictUsePermanently, 			    \n" +
                "							c.restrictUSEwithpermission,                                                     \n" +
                "							c.restrictPackagingUsePermanently, 		    \n" +
                "							c.restrictPackagingUseWithpermission,                                            \n" +
                "							fun_getReasonForRestrictUMID(css.id) reasonUMIDRestricted,                                  \n" +
                "							IFNULL(c.price, 0) tentativePrice,                                  \n" +
                "							-- (SELECT SUM(IFNULL(cssh.scrappedUnit, 0)) FROM component_sid_stock_history cssh WHERE cssh.refUIDId = css.id GROUP BY cssh.refUIDId) totalScrapUnit,                                  \n" +
                "							-- (SELECT COUNT(1) FROM component_sid_stock_restrict_umid WHERE deletedAt IS NULL AND refUMIDId = css.id) countOfRestrictUMID,                              \n" +
                "							fun_getTotalUMIDScrapUnit(css.id) totalScrapUnit,    \n" +
                "							fun_getCountOfRestrictUMID(css.id) countOfRestrictUMID,    \n" +
                "							fun_getUMIDTransitStatus(css.uid) isTransit,           \n" +
                "							fun_getUMIDTransitUserName(css.uid) searchUser,                        \n" +
                "							c.mountingTypeID,	    \n" +
                "							fun_getMountingTypeNameByID(c.mountingTypeID) mountingTypeName,                 \n" +
                "							c.partPackage externalPartPackage,                \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackage,		    \n" +
                "							fun_getUserCodeByID(css.createdBy) createdUserCode,                    \n" +
                "							css.mfrDateCodeFormatID,                          \n" +
                "							-- (SELECT dateCodeFormat FROM dateCodeFormatMst WHERE deletedAt IS NULL AND id = css.mfrDateCodeFormatID) mfrDateCodeFormat,                    \n" +
                "							fun_getMFRDateCodeFormatByID(css.mfrDateCodeFormatID) mfrDateCodeFormat,    \n" +
                "							css.mfrDateCode ,            \n" +
                "							css.rohsStatusID UMIDrohsStatusID,    \n" +
                "							fun_getRoHSNameByID(css.rohsStatusID) UMIDrohsStatus,    \n" +
                "							c.isCustom,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) internalPartPackage            \n" +
                "					FROM 		component_sid_stock css \", vInnerJoinMainQuery, \"                                                                               \n" +
                "					inner join 	component c on css.refcompid = c.id \", vComponentWhereClause, \"                                      \n" +
                "					WHERE 		(css.isdeleted is null or css.isdeleted = 0)\",                                                                         \n" +
                "								vUMIDWhereClause, @whereBin, vKitWhereClause,                                                                        \n" +
                "							\") As tempUMID                                                                               \n" +
                "				WHERE\", pWhereClause    \n" +
                "			);                                                                \n" +
                "  \n" +
                "	-- DROP TEMPORARY TABLE IF EXISTS temp_Sproc_GetReceivingMaterial;                                                              \n" +
                "	/*SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_GetReceivingMaterial AS \", @vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);                                                                         	  																								      \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                                                                                                                          \n" +
                "	EXECUTE mainQuery;                                                                                                                          \n" +
                "	DEALLOCATE PREPARE mainQuery; */                                                                               \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");                                 \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                                                          \n" +
                "	EXECUTE query1;                                                                                                                          \n" +
                "	DEALLOCATE PREPARE query1;                                                                                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");                                                                                    \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                                                          \n" +
                "	EXECUTE query2;                                                                                                                          \n" +
                "	DEALLOCATE PREPARE query2;       \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);                                                                         	  																								      \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                                                                                                                          \n" +
                "	EXECUTE mainQuery;                                                                                                                          \n" +
                "	DEALLOCATE PREPARE mainQuery;                                                                                   \n" +
                "  \n" +
                "	/*SELECT * FROM temp_Sproc_GetReceivingMaterial;                                                                         \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_GetReceivingMaterial;*/                                                     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                                                                                                                          \n" +
                "    IN pWhereClause VARCHAR(16383),                                                                                                                          \n" +
                "    IN puserID VARCHAR(50),                                                                                                    \n" +
                "    IN pnickName VARCHAR(20),                                                                                                                    \n" +
                "    IN pprefix VARCHAR(20),                                                                                                                    \n" +
                "    IN puid VARCHAR(20),                                                                                                                \n" +
                "    IN pComponentID INT,                                                                                                            \n" +
                "    IN pCustomerID INT,                                                                                                            \n" +
                "    IN pCPN BOOL,                                                                                                            \n" +
                "    IN pMFGAvailabel BOOL,                                                                                                            \n" +
                "    IN pRefCpnMfgID INT,                                                                                                        \n" +
                "    IN pAssyID INT,                                                                                                        \n" +
                "    IN pSalesOrderDetailID INT,		                                                                                                        \n" +
                "    IN pReceiveMaterialType VARCHAR(255),                                                                                              \n" +
                "    IN pkitAssemblyID INT,                                                                                        \n" +
                "    IN pBarcodeID INT,                                        \n" +
                "    IN pBOMLineID INT 	                                                                                                       \n" +
                "    )  \n" +
                "BEGIN                                                                                                                          \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                                                                                                          \n" +
                "	DECLARE v_delimiter VARCHAR(10);                                                                                                                          \n" +
                "	DECLARE v_length INT;                                                                                                                           \n" +
                "	DECLARE v_fieldType INT;                                                                                                                               \n" +
                "	DECLARE v_entityId INT;                                                                                                                          \n" +
                "	DECLARE v_dataElementId INT;                                                                                                                          \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                                                                                                                          \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                                                                                                                          \n" +
                "	DECLARE strLabel VARCHAR(2000);                                                                                                                          \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                                                                                                                          \n" +
                "	DECLARE StaticField VARCHAR(100);                                                                                                    \n" +
                "	DECLARE DynamicField VARCHAR(100);		                                                                                                    \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                                                                                                                          \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');                                                                                                                          \n" +
                "	DECLARE plen,slen INT;                                                                                                                          \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                                                                                                                          \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                                                                                                                      \n" +
                "	DECLARE barcode_type_id INT;                                                                                                                \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);                                                                                                            \n" +
                "	DECLARE UpdateValue VARCHAR(16383);                                                                                             \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';                                                                                            \n" +
                "	DECLARE v_SupplierID INT;                                                                                        \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);                                                                                          \n" +
                "	DECLARE v_barcode_id INT;                                                                                        \n" +
                "	DECLARE v_barcode_count INT;                                                                                        \n" +
                "	DECLARE v_NumberOfPart INT;                                                                                         \n" +
                "	DECLARE v_rfqLineItemsID INT;                                                                   \n" +
                "	DECLARE v_componentCount INT;                                                                \n" +
                "	DECLARE v_componentId INT;                                                                      \n" +
                "	DECLARE v_mfgPartNO VARCHAR(50);                                                                \n" +
                "	DECLARE v_partMFG INT;                                                                    \n" +
                "	DECLARE v_isGoodPart TINYINT(1);                                                                \n" +
                "	DECLARE v_restrictUsePermanently TINYINT(1);                                                                \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT(1);                                                                \n" +
                "	DECLARE v_restrictUseInBOM TINYINT(1);                                                          \n" +
                "	DECLARE v_isInstall TINYINT(1);                                                           \n" +
                "	DECLARE v_isBOMLineClean TINYINT(1);                                                        \n" +
                "	DECLARE v_BOMLineId INT(11);                                                      \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT(1);                                                      \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT(1);                                                      \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;                                                      \n" +
                "	DECLARE v_PIDCode VARCHAR(50);                                                   \n" +
                "	DECLARE v_isPurchase TINYINT(1);                                                \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);                                           \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);                                        \n" +
                "	DECLARE v_BOMLineCount INT(11);                                         \n" +
                "	DECLARE v_AlternateLineId INT(11);                                       \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);                                      \n" +
                "	DECLARE v_BOMAssyId INT(11);                                      \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);                                      \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT(1);                              \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT(1);                              \n" +
                "	DECLARE v_isCPNFlag TINYINT(1);                 \n" +
                "	DECLARE v_dateCodeFormatID INT;                   \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);                      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                                                                                                                           \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                                                                                                                          \n" +
                "	(                                                                                                                          \n" +
                "		errorText LONGTEXT,                                                                                                                          \n" +
                "		IsSuccess VARCHAR (2),                                                                                                                \n" +
                "		MFGPart VARCHAR(10000)                                                                                                                               \n" +
                "	);                                                                                             \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;                                                                                                                           \n" +
                "	CREATE TEMPORARY TABLE temp_Component_Sid_Stock                                                                                                                          \n" +
                "	(                                                                                                                          \n" +
                "		refcompid INT,                                                                                                                          \n" +
                "		pkgQty DECIMAL(18,6),                                                                                      \n" +
                "		dateCode VARCHAR(10),                                                                                      \n" +
                "		lotCode VARCHAR(255),                                                                                      \n" +
                "		scanlabel VARCHAR(1000),                                                                                      \n" +
                "		createdBy VARCHAR(255),                                                                                      \n" +
                "		uid VARCHAR(14),                                                                                      \n" +
                "		prefix VARCHAR(20),                                                                                      \n" +
                "		nickName VARCHAR(50),                                                                                      \n" +
                "		cpn TINYINT,                                                                                      \n" +
                "		mfgAvailabel TINYINT,                                                                                      \n" +
                "		refCPNMFGPNID INT,                                                                                      \n" +
                "		customerID INT,                                                                                      \n" +
                "		assyID INT,                                                                                      \n" +
                "		salesOrderDetailID INT,                                                                                      \n" +
                "		receiveMaterialType VARCHAR(255),                                                                                      \n" +
                "		refSupplierPartId INT,              \n" +
                "		mfrDateCode VARCHAR(50)                                                                                      \n" +
                "	);                                                                                       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;                                                                                                                           \n" +
                "	CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values                                                                                                                          \n" +
                "	(                                                                                                                          \n" +
                "		entityid INT,                                                                                      \n" +
                "		dataelementid INT,                                                                                      \n" +
                "		`value` LONGTEXT,                                                                                      \n" +
                "		createdBy VARCHAR(255)                                                                                      \n" +
                "	);                                                                                                         \n" +
                "	-- get data from barcode templates with seprator                                                                         \n" +
                "	# return error code                                                                      \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found                                                                      \n" +
                "	# 0: Barcode template does not exist, Please add template                                                                      \n" +
                "	# 1: Validation Clear                                                                      \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component                                                                      \n" +
                "	# 3: Mfgcode is not found                                                                      \n" +
                "	# 4: MFG PN does not exist                                                                      \n" +
                "	# 5: Multiple MFG PN found                                                                      \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code                                                                      \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly                                                                      \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer                                                                      \n" +
                "	# 9:  Multiple barcode template found.                                                                      \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check                                                                      \n" +
                "	# 11: MFG PN is incorrect part                                                                    \n" +
                "	# 12: PID PID1 was restricted part at part master level.                                                                  \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.                                                             \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.                                                            \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.                                                        \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.                                                      \n" +
                "	# 17: PID is contain more than 1 BOM line.                                 \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.                              \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.                                                             \n" +
                "  \n" +
                "	block1: BEGIN                            \n" +
                "		SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");                      \n" +
                "		IF (pBarcodeID IS NULL) THEN                                                                                        \n" +
                "			SELECT COUNT(*), id, barcodeType, `name` INTO v_barcode_count, v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                                                          \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                       \n" +
                "			-- AND (CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;                                                                                           \n" +
                "  \n" +
                "			IF (v_barcode_count > 1) THEN                                                                                        \n" +
                "				SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                                                            \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                       \n" +
                "				-- AND (CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;                                                                                          \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                                                                                                           \n" +
                "				('Multiple barcode template found.',9,@multiple_barcode_string);	                                                                                                                          \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                             \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS               \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                        \n" +
                "			ELSE                                                                           \n" +
                "				/*SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                                                          \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND                                                                                        \n" +
                "				(CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;   */                                                                                        \n" +
                "				SET pBarcodeID = v_barcode_id;                                                                                        \n" +
                "			END IF;                                                                                        \n" +
                "		ELSE                                                                                         \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND id = pBarcodeID AND `status`=1;                                                                                        \n" +
                "		END IF;                                                               \n" +
                "  \n" +
                "		IF (barcode_type_id IS NULL) THEN                              \n" +
                "			/*SELECT COUNT(1) INTO v_NumberOfPart FROM                                                                                                   \n" +
                "			(                                                                                                  \n" +
                "				SELECT c.id,c.mfgPN FROM component c WHERE c.mfgPN=pWhereClause AND c.deletedAt IS NULL                                                                                                  \n" +
                "				UNION                                                                                                  \n" +
                "				SELECT c.id,c.mfgPN FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID                                                                                                   \n" +
                "				WHERE (c.mfgPN=pWhereClause OR co.name=pWhereClause) AND co.deletedAt IS NULL AND c.deletedAt IS NULL                                                                                                  \n" +
                "			) a;                          \n" +
                "			IF (v_NumberOfPart > 0) THEN   */                                                                                    \n" +
                "				SET pWhereClause = CONCAT(\"NONE\", pWhereClause);       				                      \n" +
                "				SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                          \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;                                                                                        \n" +
                "				SET pBarcodeID = v_barcode_id;                                \n" +
                "			/*END IF;  */                    \n" +
                "		END IF;                                                                                         \n" +
                "  \n" +
                "		-- tempregexp;    	                                                                                                  \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */                                                                                          \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                                                                                                                        \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND id = pBarcodeID;                                                                                        \n" +
                "			SET v_BarcodeType = '2D';                                                                                                                \n" +
                "		ELSE /* barcode 1D */                         \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                                                                                                                         \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND id = pBarcodeID;                       \n" +
                "			SET v_BarcodeType = '1D';                                                                                                             \n" +
                "		END IF;                                                                                        \n" +
                "	END block1;                            \n" +
                "  \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                                                                        \n" +
                "		block2: BEGIN                                                                                        \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found                                                                                                                          \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR                                                                                                                          \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                                                                                                                       \n" +
                "				WHERE refbrID = pBarcodeID AND deletedAt IS NULL;                                                                                                                   \n" +
                "			-- declare exit loop if data not found                                                                                                                          \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                                                                                                          \n" +
                "			-- if any record match found than  check for delimiter and its value                                                                                                                     \n" +
                "			IF (pbr_template_ID > 0) THEN                                                                                                                          \n" +
                "				-- create temporary table for deliemeter and component dataelement                                                                                                                          \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                                                                                                                          \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                                                                                                                          \n" +
                "					pentityId INT,                                                                                                                          \n" +
                "					pdataElementId INT,                                                                                                                          \n" +
                "					pdelimiter_value VARCHAR(200)                                                                                                                          \n" +
                "				);                                                                                                                     \n" +
                "				-- create temporary table for separator string values                                                                                                                          \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                                                                                                                          \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));                                                                                                                \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string                                                                                                                          \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND id = pBarcodeID;                                                                                                               \n" +
                "				-- open cursor                                                                                                                          \n" +
                "				OPEN barcodeMatch_cursor;                                                                                                                          \n" +
                "				-- set str label as whereclause                                                                                                                          \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");                       \n" +
                "				-- if prefix is found than remove those from actual string match                                                                                                                          \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN				                                                                                                                          \n" +
                "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                                                  \n" +
                "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));                                                                                                                          \n" +
                "				 END IF;                                                                                                                         \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match                                                                                                                           \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN                                                                                                                          \n" +
                "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                                                                                                          \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                                                                                                          \n" +
                "				 END IF;	                                                  \n" +
                "				-- insert all values after seprator split                                                                                                \n" +
                "  \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                                        				                      \n" +
                "				PREPARE stmt1 FROM @SQL;                                                                                                                          \n" +
                "				EXECUTE stmt1;                                                                                \n" +
                "				-- create dynamic query to insert in recieving material                                                                                                                          \n" +
                "				SET QueryForStatic = 'insert into temp_Component_Sid_Stock';                                                                                                     \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template                                                                                                                          \n" +
                "				barcodeMatch_loop:LOOP                                                                                                       \n" +
                "					-- get all five selected values                                                                                                                          \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                                                                                                                  \n" +
                "					-- exit loop if no record found for barcode match                                                                                                                          \n" +
                "					IF exit_loop THEN                                                                                                                     \n" +
                "						CLOSE barcodeMatch_cursor;                                                                                                                          \n" +
                "						LEAVE barcodeMatch_loop;                                                                                                                          \n" +
                "					END IF;                                                                                                                     \n" +
                "  \n" +
                "					-- dynamic query to get dellimeter string with values from string                                                                                                                          \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                                                                                                                          \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                                                                                                                          \n" +
                "					EXECUTE stmtdelimiter;                                                                                                                \n" +
                "  \n" +
                "					-- get delimiter values from string                                                                                                                          \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                                                                                                                  \n" +
                "					-- check for field type is static or dynamic                                                                                                                          \n" +
                "					-- if static field than check for mfg code and mfg part number                \n" +
                "					IF v_fieldType = 0  THEN                                                                                                                      \n" +
                "						-- component_sid_stock                                                                                                                           \n" +
                "						-- get static field name from barcode table delimiter data element id                                                                                                                          \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                                                                                                                            \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                                                                                                                          \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN                                                                                                                \n" +
                "							SET MFG_Part_No = delimiter_value_data;                                                                                                                \n" +
                "							IF(pComponentID = 0)THEN                                                               \n" +
                "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;                                                               \n" +
                "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS                                                              \n" +
                "								SELECT id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission FROM                                                                                                   \n" +
                "								(                                                                                                  \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission                                                                 \n" +
                "									FROM 	component c                                                                 \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL                                                                                                  \n" +
                "									UNION                                                                                                  \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission                                                                 \n" +
                "									FROM 		component_otherpn co                                                                 \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID                                                                                                   \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL                                                                                                  \n" +
                "								) a;                                                              \n" +
                "  \n" +
                "								SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;                       \n" +
                "								IF (v_componentCount > 1) THEN                                                              \n" +
                "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;                                                               \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS                                                              \n" +
                "									SELECT * FROM temp_component_detail WHERE mfgcodeID > 0;                                                              \n" +
                "  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;                                                              \n" +
                "									IF (v_componentCount < 2) THEN                                                              \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                                       \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                                                \n" +
                "										FROM 	temp_component_supplier_detail;                                                              \n" +
                "									END IF;                                                              \n" +
                "								ELSE                                                               \n" +
                "									SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                                       \n" +
                "										INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                                               \n" +
                "									FROM 	temp_component_detail;                                                              \n" +
                "								END IF;                                                              \n" +
                "  \n" +
                "								/*SELECT COUNT(1), id, mfgPN, mfgcodeID, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission FROM                                                                                                   \n" +
                "								(                                                                                                  \n" +
                "									SELECT 	c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission                                                                 \n" +
                "									FROM 	component c                                                                 \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL                                                                                                  \n" +
                "									UNION                                                                                                  \n" +
                "									SELECT 		c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission                                                                 \n" +
                "									FROM 		component_otherpn co                                                                 \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID                                                                                                   \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL                                                                                                  \n" +
                "								) a; */                                                              \n" +
                "							ELSE                                                                                                      \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                                        \n" +
                "									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                                                 \n" +
                "								FROM 	component                                                                 \n" +
                "								WHERE 	id = pComponentID AND deletedAt IS NULL;                                                                                                                \n" +
                "							END IF;                                                                        \n" +
                "  \n" +
                "							/*IF (v_componentCount > 1) THEN                                                                \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission                                                                 \n" +
                "								FROM 	component                                                                 \n" +
                "								WHERE 	mfgPN = delimiter_value_data AND mfgcodeID > 0 AND deletedAt IS NULL;                                                                \n" +
                "							END IF;  */                                                              \n" +
                "  \n" +
                "							IF v_componentCount > 1 THEN                                                                                                                \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                          \n" +
                "								LEAVE barcodeMatch_loop;                                                                                                                \n" +
                "							END IF;                                                              \n" +
                "  \n" +
                "							IF (v_isGoodPart != 1) THEN                                                                      \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                          \n" +
                "								LEAVE barcodeMatch_loop;                                                                         \n" +
                "							END IF;                                                                      \n" +
                "  \n" +
                "							IF (v_restrictUsePermanently = 1) THEN                                                                    \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                          \n" +
                "								LEAVE barcodeMatch_loop;                                                                    \n" +
                "							END IF;                                                      \n" +
                "  \n" +
                "							IF (v_restrictPackagingAliasPermanently = 1) THEN                                                                    \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                          \n" +
                "								LEAVE barcodeMatch_loop;                                                                    \n" +
                "							END IF;                                                                    \n" +
                "  \n" +
                "							IF (@barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN                                                                                            \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';                                                                                            \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                          \n" +
                "								LEAVE barcodeMatch_loop;                                                                                              \n" +
                "							END IF;                                                                                            \n" +
                "  \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND deletedAt IS NULL;                                                                                            \n" +
                "							IF (@MFGType = 'DIST') THEN                                                                                            \n" +
                "								SET v_SupplierID = v_componentId;                                                                                            \n" +
                "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier;                                                                                            \n" +
                "							END IF;                                       \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN                                          \n" +
                "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE deletedAt IS NULL AND refSalesOrderDetID = pSalesOrderDetailID;			                                      \n" +
                "								-- SELECT DISTINCT rfqLineItemsID INTO v_rfqLineItemsID FROM rfq_lineitems_alternatepart WHERE partID = pkitAssemblyID AND mfgPNID = v_componentId limit 1;				                                                                                              \n" +
                "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId   -- a.bomLineCleanStatus, a.description,                                                     \n" +
                "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId  -- v_isBOMLineClean, v_bomErrorDescription,                                                                                        \n" +
                "								FROM 	(                          \n" +
                "									SELECT 	*                          \n" +
                "									FROM                                            \n" +
                "										(                                                                                        \n" +
                "											SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall, -- fun_getBOMLineCleanStatusErrorCategoryWise(rml.id, NULL, NULL, NULL, 3) AS bomLineCleanStatus,                                                 \n" +
                "													-- CONCAT(IFNULL(rl.description, ''), IFNULL(rml.description,'')) description,                                       \n" +
                "													rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId                              \n" +
                "											FROM 		component_packagingalias cp                                                                                          \n" +
                "											LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid                                                                                          \n" +
                "											LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id                                                           \n" +
                "											INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID                                                                                         \n" +
                "											WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.deletedAt IS NULL                                                                \n" +
                "											UNION                                                                                          \n" +
                "											SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall, -- fun_getBOMLineCleanStatusErrorCategoryWise(rla.id, NULL, NULL, NULL, 3) AS bomLineCleanStatus,                                                 \n" +
                "													-- CONCAT(IFNULL(rl.description, ''), IFNULL(rla.description,'')) description,                                       \n" +
                "													rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId                                                             \n" +
                "											FROM 		rfq_lineitems_alternatepart rla                                                          \n" +
                "											INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                                                                                                                         \n" +
                "											WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.deletedAt IS NULL                                                                              \n" +
                "											UNION                                         \n" +
                "											SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall, -- fun_getBOMLineCleanStatusErrorCategoryWise(rla.id, NULL, NULL, NULL, 3) AS bomLineCleanStatus,                                                 \n" +
                "													-- CONCAT(IFNULL(rl.description, ''), IFNULL(rla.description,'')) description,                                       \n" +
                "													rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId                                                              \n" +
                "											FROM 		rfq_lineitems_alternatepart rla                                                          \n" +
                "											INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                                                                                                                         \n" +
                "											WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.deletedAt IS NULL AND custPNID IS NOT NULL                                         \n" +
                "											GROUP BY 	custPNID, rla.partID                              \n" +
                "  \n" +
                "											/*SELECT 		id, custPNID AS componentID, 0 AS restrictUseInBOMStep, isInstall, 1 AS bomLineCleanStatus, description, isPurchase, isBuyDNPQty,                                           \n" +
                "													lineID                                                           \n" +
                "											FROM 		rfq_lineitems                                                                                          \n" +
                "											WHERE 		partID = pkitAssemblyID AND custPNID IS NOT NULL AND deletedAt IS NULL*/                                                                                      \n" +
                "										) b WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)                          \n" +
                "										GROUP BY b.lineID, b.assyId                          \n" +
                "								) a;                          \n" +
                "  \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN                                                                                              \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                          \n" +
                "									LEAVE barcodeMatch_loop;                                                            \n" +
                "								ELSEIF (v_BOMLineCount > 1) THEN                                                        \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                          \n" +
                "									LEAVE barcodeMatch_loop;                                                         \n" +
                "								ELSE                                      \n" +
                "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN                                                                                              \n" +
                "										CLOSE barcodeMatch_cursor;                                                                                                                          \n" +
                "										LEAVE barcodeMatch_loop;                                                                                              \n" +
                "									END IF;                                   \n" +
                "  \n" +
                "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;                                      \n" +
                "									IF (v_isBOMLineClean = 0) THEN                                                        \n" +
                "										CLOSE barcodeMatch_cursor;                                                                                                                          \n" +
                "										LEAVE barcodeMatch_loop;                                                         \n" +
                "									END IF;                                      \n" +
                "								END IF;                                                            \n" +
                "  \n" +
                "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN                                                          \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                          \n" +
                "									LEAVE barcodeMatch_loop;                                                          \n" +
                "								END IF;                                                           \n" +
                "							END IF;                                                                                              \n" +
                "							IF  v_componentCount = 1 THEN                                   \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                                                                                                          \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"'); 	    				                                                                                                                          \n" +
                "							END IF;                                                                                                    \n" +
                "						END IF;                                                                                                                          \n" +
                "  \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                                                                                                                          \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN                                                                                                                  \n" +
                "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                                                                                                                          \n" +
                "						END IF;                                                                                                            \n" +
                "  \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                    \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                                                                                                                          \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                          \n" +
                "						END IF;              \n" +
                "  \n" +
                "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                    \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                                                                                                          \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                          \n" +
                "						END IF;                                                                                                                                                                                                      \n" +
                "  \n" +
                "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                    \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');                                                                                                                          \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                          \n" +
                "  \n" +
                "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND deletedAt IS NULL;              \n" +
                "							IF (v_dateCodeFormatID IS NOT NULL) THEN              \n" +
                "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);              \n" +
                "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;              \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                                                                                                          \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');              \n" +
                "							END IF;              \n" +
                "						END IF;                                                                                                                                                                                                      \n" +
                "  \n" +
                "						/*IF v_componentCount > 1 THEN                                                                                                                \n" +
                "							CLOSE barcodeMatch_cursor;                                                                                                                          \n" +
                "							LEAVE barcodeMatch_loop;                                                                                                                \n" +
                "						END IF;      */                                                                                                             \n" +
                "  \n" +
                "						-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                                                                                                                          \n" +
                "						-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                                                                                                                           \n" +
                "  \n" +
                "						-- select strFeildforInsert,valuesforInsert;                                                                                                                          \n" +
                "  \n" +
                "					ELSE                                                                                                      \n" +
                "						-- component_sid_stock_dataelement_Values                                                                                                                            \n" +
                "						-- dynamic fields                                                                                                         \n" +
                "						/*SET DynamicField=(SELECT dataElementName FROM dataelement WHERE dataElementID=v_dataElementId AND deletedAt IS NULL);                                                                                                     \n" +
                "						IF(DynamicField=\"Mfg Date Code\" AND delimiter_value_data IS NOT NULL) THEN                                                                                                          \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                                                                                                          \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                          \n" +
                "						END IF;*/                                                                                                          \n" +
                "  \n" +
                "						/*IF(DynamicField=\"Lot Code\" AND delimiter_value_data IS NOT NULL) THEN                                                                                                          \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                                                                                                          \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                          \n" +
                "						END IF;*/                                                                                                    \n" +
                "  \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE                                                                                                                           \n" +
                "							dataElementID=v_dataElementId AND deletedAt IS NULL;                                                                                                                       \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                                                                                                                           \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);                                                                                                                   \n" +
                "					END IF;                                                                                                                          \n" +
                "  \n" +
                "				END LOOP barcodeMatch_loop;                                                                   \n" +
                "				-- check if mfg and component both found than                                                                  \n" +
                "				IF v_componentCount = 0 THEN                                                                                                                          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not exist',4,MFG_Part_No);                                                                                                                          \n" +
                "				ELSEIF (v_componentCount > 1) THEN                                                                                                                \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFR PN found',5,MFG_Part_No);                                                                                                                                  \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                                   \n" +
                "					IF (v_isGoodPart = 2) THEN                                              \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);                                                                    \n" +
                "					ELSE                                              \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);                                                                    \n" +
                "					END IF;                                              \n" +
                "				ELSEIF (v_restrictUsePermanently = 1) THEN                                                                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);                                                                    \n" +
                "				ELSEIF (v_restrictPackagingAliasPermanently = 1) THEN                                   \n" +
                "					IF (v_isCPNFlag = 1) THEN                              \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);                                                                    \n" +
                "					ELSE                               \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);                                                                    \n" +
                "					END IF;                              \n" +
                "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN                                                                                          \n" +
                "					-- In this case pass the barcodeid insted of MFGPN because in this case we have to not use the MFGPN                                                                                        \n" +
                "					-- if (v_BarcodeType = 1) then                                                                                        \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);                                                                                              \n" +
                "					-- else                                                                                        \n" +
                "					-- 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please check the manufacturer and if not exist then create new template for same manufacturer.'),8,v_barcode_id);                                                                                              \n" +
                "					-- end if;                                                                                        \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN                                                                                                                          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN or CPN is not found in bom of this assembly.',7,MFG_Part_No);                                                                                              \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN                                                                                                                          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));                                                                                              \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN                                                      \n" +
                "					-- INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Due to the below pending issues/status your BOM line is not clean. So, you can not allocate to kit.<br/><div class=\"cm-bom-error-block\">',v_bomErrorDescription,'</div>'),15,MFG_Part_No);                                                                                              \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line no <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> is not clean. So, you can not allocate UMID into kit.'),15,MFG_Part_No);                                                                                              \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN                                                                                                                          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);                                                                                              \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN                                                                                                                          \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);                                                                                             \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN                                                                                                                          \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);                                                                                             \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN                                                                                                                          \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);                                                                                             \n" +
                "				ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN                                                                                                                          \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                                                                                                                          \n" +
                "					IF @Mfgmatched = 0  THEN                                                                                                                          \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MFR PN are avialable but not matched in component',2,MFG_Part_No);							                                                                                                                          \n" +
                "					END IF;									                                                                                                                          \n" +
                "				ELSE 		                                                                                                                \n" +
                "					IF @mfgCount = 0 THEN                                                                                                                          \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);                                                                                                                          \n" +
                "					END IF;	                                                                                                                          \n" +
                "					/*IF v_componentCount = 0 THEN                                                                                                                          \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not exist',4,MFG_Part_No);                                                                                                                          \n" +
                "					END IF;*/	                                                                                                                          \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND v_componentCount=0  THEN                                                                                                                            \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                                                                                                                          \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MFR PN is not Found',0,MFG_Part_No);                                                                                                                          \n" +
                "					END IF;						                                                                                                                          \n" +
                "				END IF;	                                                                      \n" +
                "  \n" +
                "				IF (pCPN = 1) THEN                                                                                                         \n" +
                "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;                                                                                                            \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;                                                                                                            \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN                                                                                                            \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);                                                                                                                          \n" +
                "					END IF;                                                                               \n" +
                "  \n" +
                "					IF (@isCPNPart != 1) THEN                                                                            \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);                                                                                                                          \n" +
                "					END IF;                                                                                                         \n" +
                "				END IF;                                                                                                        \n" +
                "				IF (puid IS NOT NULL) THEN                                                         \n" +
                "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                                                                                                          \n" +
                "						IF (pprefix = '') THEN	                                                                                           \n" +
                "							CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					                                                                                                            \n" +
                "							SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;                                                                                                            \n" +
                "						END IF;                                                                                                         \n" +
                "  \n" +
                "						-- must call statements in sequence          				                                                                                                                \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',',','uid',')','VALUES','(',valuesforInsert,',',puserID,',\"',puid,'\")',';');                                                                																		        						              \n" +
                "						PREPARE stmt1 FROM @SQL1;                                                                                                                          \n" +
                "						EXECUTE stmt1;                                                                                                                       \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set prefix=','\"',pprefix,'\"');                                                                                                            \n" +
                "						IF (pnickName IS NOT NULL) THEN                                                                                                            \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');                                                                                                            \n" +
                "						END IF;                                                                                              \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);                                                                                        \n" +
                "  \n" +
                "						IF (pRefCpnMfgID IS NOT NULL) THEN                                                                                                            \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);                                                                                                            \n" +
                "						END IF;                                                                                               \n" +
                "  \n" +
                "						IF (pCustomerID IS NOT NULL) THEN                                                                                                            \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);                                                                                                            \n" +
                "						END IF;                                                                                           \n" +
                "  \n" +
                "						IF (pAssyID IS NOT NULL) THEN                                                                                                            \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);                                                                                                            \n" +
                "						END IF;                                                                                             \n" +
                "  \n" +
                "						IF (pSalesOrderDetailID IS NOT NULL) THEN                                                                                                            \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);                                                                                                            \n" +
                "						END IF;                                                                                              \n" +
                "  \n" +
                "						IF (pReceiveMaterialType IS NOT NULL) THEN                                                                                                            \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');                                                                                                         \n" +
                "						END IF;                                                                                           \n" +
                "  \n" +
                "						IF (v_SupplierID IS NOT NULL) THEN                                                                                                            \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);                                                                                                            \n" +
                "						END IF;                                                                                           \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue,' where uid=','\"',puid,'\"');                       \n" +
                "						SET @sql2 = UpdateValue;	                                                                                                                           \n" +
                "						PREPARE stmt2 FROM @SQL2;                                                                                                                          \n" +
                "						EXECUTE stmt2;	                                                                                        \n" +
                "  \n" +
                "						IF (pkitAssemblyID IS NULL) THEN                                      \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                                                                                                                          \n" +
                "						ELSE                                       \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));                                                                                                                          \n" +
                "						END IF;                                      \n" +
                "  \n" +
                "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                                                                                                                \n" +
                "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)                                                                                                                           \n" +
                "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                                                                                                                          \n" +
                "						END IF;                                                                                                                          \n" +
                "  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                          \n" +
                "						SELECT * FROM temp_Component_Sid_Stock;                                                                                          \n" +
                "  \n" +
                "						SELECT 	c.*,                    \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,                    \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                     \n" +
                "							csup.packageQty AS supplierPkgQty,                     \n" +
                "							csup.mfgcodeID AS supplierMfgId,                     \n" +
                "							mcm.mfgcode AS supplierMFGCode,                     \n" +
                "							mcm.mfgName AS supplierMFGName,                     \n" +
                "							csup.mfgPN AS supplierMFGPN,                     \n" +
                "							csup.packagingID AS supplierPackagingId,                     \n" +
                "							fun_getPackagingNameByID(csup.packagingID) AS supplierPackagingName,                     \n" +
                "							csup.minimum AS supplierMinimum,                     \n" +
                "							ccpn.id AS cpnID,                     \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,                     \n" +
                "							rfqroh.rohsIcon AS rohsIcon,                     \n" +
                "							rfqroh.name AS rohsName,                     \n" +
                "							rfqmou.name AS mountingTypeName,                     \n" +
                "							um.unitName AS uomName,                    \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE deletedAt IS NULL AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                    \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE deletedAt IS NULL AND id = mg.dateCodeFormatID) dateCodeFormat,                    \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName                     \n" +
                "						FROM component AS c                                                                                       \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID                                                                                      \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID                                                                                      \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                    \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID                                                                                      \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                                                                                  \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID                                                                                      \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID                                                                        \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom                                                                                     \n" +
                "						WHERE c.id = v_componentId;                                                                                      \n" +
                "  \n" +
                "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`                                                                                      \n" +
                "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv                                                                                       \n" +
                "						LEFT OUTER JOIN `dataelement` AS dl                                                                                      \n" +
                "						ON cssdlv.dataelementid = dl.dataElementID AND dl.deletedAt IS NULL;                                                                             \n" +
                "  \n" +
                "						SELECT 	id, refComponentID, refCPNPartID                                             \n" +
                "						FROM 	component_cust_alias_rev_pn                                             \n" +
                "						WHERE 	refCPNPartID = v_componentId AND deletedAt IS NULL;                              \n" +
                "  \n" +
                "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (                                                                \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND deletedAt IS NULL                                                                 \n" +
                "						) AND deletedAt IS NULL;                                      \n" +
                "  \n" +
                "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,                               \n" +
                "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN                                             \n" +
                "						FROM 		rfq_lineitems_alternatepart rla                                            \n" +
                "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.deletedAt IS NULL                                \n" +
                "						WHERE 		rla.deletedAt IS NULL                                             \n" +
                "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))                                             \n" +
                "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)                                             \n" +
                "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);                                                      \n" +
                "  \n" +
                "					ELSE                                                                                                                         \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                                                          \n" +
                "					END IF;                                                                          \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                                                                             \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                        \n" +
                "				ELSE                                                                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                 \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                             \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                             \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                     \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                             \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                \n" +
                "					SELECT 	c.*,                     \n" +
                "						fun_getPackagingNameByID(c.packagingID) AS packagingName,                     \n" +
                "						CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                     \n" +
                "						csup.packageQty AS supplierPkgQty,                     \n" +
                "						csup.mfgcodeID AS supplierMfgId,                     \n" +
                "						mcm.mfgcode AS supplierMFGCode,                     \n" +
                "						mcm.mfgName AS supplierMFGName,                     \n" +
                "						csup.packagingID AS supplierPackagingId,                     \n" +
                "						csup.mfgPN AS supplierMFGPN,                     \n" +
                "						csup.id AS supplierMFGPNID,                     \n" +
                "						fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,                     \n" +
                "						fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,                               \n" +
                "						ccpn.id AS cpnID,                     \n" +
                "						ccpn.mfgcodeID AS cpnMFGCodeID,                     \n" +
                "						rfqroh.rohsIcon AS rohsIcon,                     \n" +
                "						rfqroh.name AS rohsName,                     \n" +
                "						rfqmou.name AS mountingTypeName,                     \n" +
                "						um.unitName AS uomName,                    \n" +
                "						(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE deletedAt IS NULL AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                    \n" +
                "						(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE deletedAt IS NULL AND id = mg.dateCodeFormatID) dateCodeFormat,                    \n" +
                "						mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
                "						fun_getPackageCaseNameByID(c.partPackageID) partPackageName                                       \n" +
                "					FROM component AS c                                                                                       \n" +
                "					LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID                                                                                      \n" +
                "					LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID                                                                                      \n" +
                "					LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                    \n" +
                "					LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID                                                                                      \n" +
                "					LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                                                                                   \n" +
                "					LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID                                                                                 \n" +
                "					LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID                                                                          \n" +
                "					LEFT JOIN uoms AS um ON um.id = c.uom                                                                        \n" +
                "					WHERE c.id = v_componentId;                   \n" +
                "  \n" +
                "				END IF;                                                                                    \n" +
                "			ELSE                       \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                                                                                                           \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);	                                                                                                                          \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                                                                                                                            \n" +
                "			END IF;                                                                                                                          \n" +
                "  \n" +
                "		END block2;              \n" +
                "	ELSE            \n" +
                "		IF (puid IS NOT NULL) THEN            \n" +
                "			SELECT * FROM tempUIDSuccessDetail;            \n" +
                "		ELSE             \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                             \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS            \n" +
                "			SELECT 1;            \n" +
                "		END IF;            \n" +
                "	END IF;                                                                                                                                    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2732,'2.00','V1','Sproc_RetrievePurchaseInspectionRequirementList, Sproc_GetReceivingMaterial, Sproc_MatchBarCodeAndSaveDelimiters - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2732:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCurrentRackDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCurrentRackDetails`(                                            \n" +
                "	IN prackNumber VARCHAR(50)                                          \n" +
                "  \n" +
                ")  \n" +
                "BEGIN           \n" +
                "	DECLARE prackStatus VARCHAR(255);      \n" +
                "		DECLARE pRackID INT(11);        \n" +
                "		DECLARE pStatus INT(11);       \n" +
                "		DECLARE pcurWoOPID INT(11);      \n" +
                "		DECLARE pwoID INT(11);      \n" +
                "		DECLARE pwtrID INT(11);    \n" +
                "		DECLARE pwoName VARCHAR(50);    \n" +
                "		DECLARE pwoOperationName VARCHAR(100);    \n" +
                "		DECLARE  puserName VARCHAR(50);    \n" +
                "		DECLARE pidcode VARCHAR(100);      \n" +
                "		DECLARE partID INT;     \n" +
                "  \n" +
                "             SELECT rk.id,rk.opStatus,fun_getWorkorderNumberWithRevByID(wo.woID) woNumber,fun_getOperationNameByWOOPID(rk.woOPID),          \n" +
                "             (CASE WHEN (`rk`.`opStatus` = 1) THEN `fun_getUserNameByID`(`rk`.`updatedBy`) ELSE          \n" +
                "		(SELECT fun_getUserNameByID(wtr.createdBy) FROM workorder_trans_rack wtr WHERE wtr.deletedat IS NULL AND             \n" +
                "				wtr.rackID=rk.id ORDER BY wtr.id DESC LIMIT 1)END),            \n" +
                "				(SELECT wtr.id FROM workorder_trans_rack wtr WHERE wtr.deletedat IS NULL AND             \n" +
                "				wtr.rackID=rk.id AND wtr.woOPID=rk.woOPID ORDER BY wtr.id DESC LIMIT 1),        \n" +
                "				rk.woOPID ,        \n" +
                "				(SELECT GROUP_CONCAT(cs.fullName ,' ' , CASE WHEN wc.classIDs IS NULL THEN ''                                      \n" +
                "							ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,''))                       \n" +
                "							FROM standard_class WHERE classID = wc.classIDs) END                                      \n" +
                "							ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@')								                      \n" +
                "				   FROM `workorder_certification` wc                                        \n" +
                "					   JOIN certificate_standards cs ON  wc.certificateStandardID = cs.certificateStandardID                                        \n" +
                "				   WHERE wc.deletedAt IS NULL AND wc.woID = `wo`.`woID`) ,c.pidcode,fun_getRoHSIconByID(c.rohsstatusid),fun_getRoHSNameByID(c.rohsstatusid),        \n" +
                "				   (CASE WHEN (`rk`.`opStatus` = 1) THEN `fun_ConvertUTCDatetimeToDataKeyTimeZone`(`rk`.`updatedAt`) ELSE        \n" +
                "				   (SELECT `fun_ConvertUTCDatetimeToDataKeyTimeZone`(`wtr`.`createdAt`)         \n" +
                "					FROM `workorder_trans_rack` `wtr` WHERE wtr.deletedat IS NULL AND             \n" +
                "				wtr.rackID=rk.id AND wtr.woOPID=rk.woOPID ORDER BY wtr.id DESC LIMIT 1) END),c.id,rk.woID                 \n" +
                "				INTO pRackID,pStatus,pwoName,pwoOperationName,puserName,pwtrID,pcurWoOPID,@pwocerti,pidcode,@rohsicon,@prohsName,@scanTime,partID,pwoID            \n" +
                "				 FROM rackmst rk LEFT JOIN workorder wo ON wo.woid=rk.woid AND wo.deletedAt IS NULL        \n" +
                "				LEFT JOIN component c ON c.id=wo.partid AND c.deletedat IS NULL        \n" +
                "				  WHERE rk.`name`=pRackNumber AND rk.isdeleted=0 AND rk.isActive=1;           \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				 DROP TEMPORARY TABLE IF EXISTS temp_workorder_trans_rack_status_details;      \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS  temp_workorder_trans_rack_status_details AS      \n" +
                "				SELECT `status`,fun_getRackStatusbyID(`status`) statusName  FROM workorder_trans_rack_status_details WHERE woTransRackID=pwtrID;       \n" +
                "  \n" +
                "				SELECT GROUP_CONCAT(statusName) INTO prackStatus  FROM temp_workorder_trans_rack_status_details; 				      \n" +
                "  \n" +
                "				SELECT pRackID,pStatus,pwoName,pwoOperationName,puserName,prackStatus,pcurWoOPID,@pwocerti pwocerti,        \n" +
                "				 pidcode,@rohsicon rohsicon,@prohsName prohsName,@scanTime scantime,partID,pwoID woID;          \n" +
                "  \n" +
                "				 -- get available operation detail only for rack completed        \n" +
                "  \n" +
                "	       IF(pStatus=3 AND (SELECT COUNT(1) FROM temp_workorder_trans_rack_status_details WHERE `status` NOT IN(4))>0)THEN        \n" +
                "  \n" +
                "			/*check current operation parameter have cluster */        		             \n" +
                "			SELECT a.isteamoperation,  a.isrework,  a.qtyControl,                   \n" +
                "				b.ClusterID,  b.isparellelOperation, a.isIssueQty,                    \n" +
                "				a.opNumber, a.isLoopOperation                 \n" +
                "				INTO                 \n" +
                "				@pisteamoperation ,@pisrework,@pqtyControl,                \n" +
                "				@pclusterID,@pisparellelOperation,@pisIssueQty,                \n" +
                "				@popNumber, @pisloopoperation                  \n" +
                "			FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                     \n" +
                "			a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID  AND   IFNULL(a.isdeleted,0) = 0                    \n" +
                "			WHERE  a.woid = pwoID   AND a.woOPID = pcurWoOPID  AND  IFNULL(a.isdeleted,0) = 0 ;                    \n" +
                "  \n" +
                "	/*check previous operation parameter have cluster */                    \n" +
                "			SELECT a.woOPID, a.opNumber, a.isteamoperation,                \n" +
                "					a.isrework,a.qtyControl,b.ClusterID,                 \n" +
                "				b.isparellelOperation, a.isLoopOperation                     \n" +
                "			INTO                 \n" +
                "				@prevwoOPID, @prevopnumber,@previsteamoperation,                \n" +
                "				@prevpisrework, @prevpqtyControl,@prevpclusterID,                \n" +
                "				@prevpisparellelOperation, @prevpisloopoperation                    \n" +
                "				FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                     \n" +
                "				a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID                    \n" +
                "			WHERE  a.woid = pwoID AND  IFNULL(a.isdeleted,0) = 0                    \n" +
                "			AND  a.opNumber  = (SELECT MAX(opNumber)                    \n" +
                "			    FROM workorder_operation b                     \n" +
                "			    WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0                    \n" +
                "				 AND b.qtyControl = 1 AND b.opNumber < @popNumber);                     \n" +
                "  \n" +
                "	/*check next operation Pramtere have loop operation */                    \n" +
                "			SELECT a.woOPID, a.opNumber, a.isteamoperation,                \n" +
                "			a.isrework,a.qtyControl,b.ClusterID,                 \n" +
                "			b.isparellelOperation, a.isLoopOperation                     \n" +
                "		INTO                 \n" +
                "			@nextwoOPID, @nextopnumber,@nextisteamoperation,                \n" +
                "			@nextpisrework, @nextpqtyControl,@nextpclusterID,                \n" +
                "			@nextpisparellelOperation, @nextpisloopoperation                    \n" +
                "			FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                     \n" +
                "			a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID                    \n" +
                "			WHERE  a.woid = pwoID  AND  IFNULL(a.isdeleted,0) = 0                    \n" +
                "			AND  a.opNumber  = (SELECT MIN(opNumber)                    \n" +
                "			    FROM workorder_operation b                     \n" +
                "			    WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0                    \n" +
                "				 AND b.qtyControl = 1 AND b.opNumber > @popNumber);        \n" +
                "				 IF(IFNULL(@pisrework,0)=0 AND IFNULL(@pisparellelOperation,0)=0)THEN        \n" +
                "					IF(IFNULL(@nextpisparellelOperation,0)=1)THEN        \n" +
                "						DROP TEMPORARY TABLE IF EXISTS tempRacktbl;            \n" +
                "						CREATE TEMPORARY TABLE IF NOT EXISTS tempRacktbl            \n" +
                "						SELECT MAX(wtr.id) wtrID FROM workorder_trans_rack wtr             \n" +
                "							WHERE wtr.woopid IN (SELECT woc.woopid FROM workorder_operation_cluster woc               \n" +
                "							WHERE woc.clusterID=@nextpclusterID AND woc.deletedAt IS NULL) AND wtr.rackid=pRackID;        \n" +
                "						SELECT  GROUP_CONCAT(wtr.woOPID) INTO @currwoopIds FROM workorder_trans_rack wtr WHERE wtr.id IN (SELECT wtrID FROM tempRacktbl)        \n" +
                "						AND EXISTS(SELECT 1 FROM workorder_trans_rack_status_details wtrs WHERE wtrs.woTransRackID=wtr.id AND wtrs.status=0);   	        \n" +
                "						SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid IN (        \n" +
                "						SELECT woc.woOPID FROM workorder_operation_cluster woc WHERE woc.clusterID=@nextpclusterID AND woc.deletedAt IS NULL)AND        \n" +
                "						woOpid NOT IN (IFNULL(@currwoopIds,0));        \n" +
                "					END IF;        \n" +
                "  \n" +
                "					IF(IFNULL(@nextpisrework,0)=1)THEN        \n" +
                "						IF(SELECT COUNT(1) FROM temp_workorder_trans_rack_status_details WHERE `status`  IN(3,5))>0 THEN        \n" +
                "							SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid=@nextwoOPID;        \n" +
                "						ELSE        \n" +
                "							SELECT a.woOPID, a.opNumber,a.qtyControl,b.ClusterID,                  \n" +
                "							b.isparellelOperation, a.isLoopOperation              \n" +
                "							INTO @prlwoOPID, @prlopnumber,                  \n" +
                "							@prlpqtyControl,@prlpclusterID,                  \n" +
                "							@prlpisparellelOperation, @prlpisloopoperation                      \n" +
                "							FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                       \n" +
                "							a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID                      \n" +
                "							WHERE  a.woid = pwoID  AND  IFNULL(a.isdeleted,0) = 0                      \n" +
                "							AND  a.opNumber  = (SELECT MAX(opNumber)                      \n" +
                "							FROM workorder_operation b                       \n" +
                "							WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0                      \n" +
                "							AND b.qtyControl = 1 AND b.opNumber > @nextopnumber);         \n" +
                "  \n" +
                "								IF(IFNULL(@prlpisparellelOperation,0)=1)THEN        \n" +
                "  \n" +
                "									DROP TEMPORARY TABLE IF EXISTS tempRacktbl;            \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS tempRacktbl            \n" +
                "								SELECT MAX(wtr.id) wtrID FROM workorder_trans_rack wtr             \n" +
                "							WHERE wtr.woopid IN (SELECT woc.woopid FROM workorder_operation_cluster woc               \n" +
                "							WHERE woc.clusterID=@prlpclusterID AND woc.deletedAt IS NULL) AND wtr.rackid=pRackID;        \n" +
                "  \n" +
                "							SELECT  GROUP_CONCAT(wtr.woOPID) INTO @currwoopIds FROM workorder_trans_rack wtr WHERE wtr.id IN (SELECT wtrID FROM tempRacktbl)  AND       \n" +
                "							EXISTS(SELECT 1 FROM workorder_trans_rack_status_details wtrs WHERE wtrs.woTransRackID=wtr.id AND wtrs.status=0);        \n" +
                "  \n" +
                "							SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid IN (        \n" +
                "							SELECT woc.woOPID FROM workorder_operation_cluster woc WHERE woc.clusterID=@prlpclusterID AND woc.deletedAt IS NULL)AND        \n" +
                "							woOpid NOT IN (IFNULL(@currwoopIds,0));        \n" +
                "								ELSE        \n" +
                "								SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid=@prlwoOPID;        \n" +
                "								END IF;        \n" +
                "  \n" +
                "						END IF;        \n" +
                "					END IF;        \n" +
                "					IF(IFNULL(@nextpisparellelOperation,0)=0 AND IFNULL(@nextpisrework,0)=0)THEN        \n" +
                "					SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid=@nextwoOPID;        \n" +
                "					END IF;        \n" +
                "				 END IF;        \n" +
                "				 IF(IFNULL(@pisrework,0)=1 AND IFNULL(@pisloopoperation,0)=1)THEN        \n" +
                "					SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid=@prevwoOPID;        \n" +
                "				 END IF;        \n" +
                "				 IF(IFNULL(@pisrework,0)=1 AND IFNULL(@pisloopoperation,0)=0)THEN        \n" +
                "					SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid=@nextwoOPID;        \n" +
                "				 END IF;        \n" +
                "				 IF(IFNULL(@pisparellelOperation,0)=1)THEN        \n" +
                "  \n" +
                "				 SELECT woc.woopid INTO @usedwoopid FROM workorder_trans_rack woc WHERE woc.rackid=pRackID ORDER BY woc.id DESC LIMIT 1;        \n" +
                "						SELECT MAX(wo.opNumber) INTO @parallelOPNumber FROM workorder_operation_cluster woc LEFT JOIN workorder_operation wo ON wo.woOPID=woc.woOPID AND wo.deletedAt IS NULL                \n" +
                "					WHERE woc.clusterID = @pclusterID AND woc.deletedAt IS NULL;        \n" +
                "  \n" +
                "						SELECT a.woOPID, a.opNumber, a.isteamoperation,                \n" +
                "						a.isrework,a.qtyControl,b.ClusterID,                 \n" +
                "						b.isparellelOperation, a.isLoopOperation                     \n" +
                "						INTO   	              \n" +
                "					@nextwoOPID, @nextopnumber,@nextisteamoperation,                \n" +
                "					@nextpisrework, @nextpqtyControl,@nextpclusterID,                \n" +
                "					@nextpisparellelOperation, @nextpisloopoperation                    \n" +
                "						FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                     \n" +
                "					a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID                    \n" +
                "					WHERE  a.woid = pwoID  AND  IFNULL(a.isdeleted,0) = 0                    \n" +
                "					AND  a.opNumber  = (SELECT MIN(opNumber)                    \n" +
                "					FROM workorder_operation b                     \n" +
                "					WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0                    \n" +
                "						AND b.qtyControl = 1 AND b.opNumber > @parallelOPNumber);        \n" +
                "  \n" +
                "						IF(IFNULL(@nextpisrework,0)=1)  THEN        \n" +
                "							IF(SELECT COUNT(1) FROM temp_workorder_trans_rack_status_details WHERE `status`  IN(3,5))>0 THEN        \n" +
                "							SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE         \n" +
                "							(woOpid=@nextwoOPID OR (woOPID IN (        \n" +
                "							SELECT woc.woOPID FROM workorder_operation_cluster woc WHERE woc.clusterID=@pclusterID AND woc.deletedAt IS NULL)AND        \n" +
                "							 woopid NOT IN (@usedwoopid)AND        \n" +
                "							woOpid NOT IN (IFNULL(pcurWoOPID,0))));        \n" +
                "						      ELSE        \n" +
                "							SELECT a.woOPID, a.opNumber,a.qtyControl,b.ClusterID,                  \n" +
                "							b.isparellelOperation, a.isLoopOperation              \n" +
                "							INTO @prlwoOPID, @prlopnumber,                  \n" +
                "							@prlpqtyControl,@prlpclusterID,                  \n" +
                "							@prlpisparellelOperation, @prlpisloopoperation                      \n" +
                "							FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                       \n" +
                "							a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID                      \n" +
                "							WHERE  a.woid = pwoID  AND  IFNULL(a.isdeleted,0) = 0                      \n" +
                "							AND  a.opNumber  = (SELECT MIN(opNumber)                      \n" +
                "							FROM workorder_operation b                       \n" +
                "							WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0                      \n" +
                "							AND b.qtyControl = 1 AND b.opNumber > @nextopnumber);         \n" +
                "  \n" +
                "							SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE         \n" +
                "							(woOpid=@prlwoOPID OR (woOPID IN (        \n" +
                "							SELECT woc.woOPID FROM workorder_operation_cluster woc WHERE woc.clusterID=@pclusterID AND woc.deletedAt IS NULL)        \n" +
                "							AND        \n" +
                "						     woopid NOT IN (@usedwoopid)AND        \n" +
                "							woOpid NOT IN (IFNULL(pcurWoOPID,0))));        \n" +
                "						    END IF;        \n" +
                "						END IF;	        \n" +
                "						IF(IFNULL(@nextpisrework,0)=0)THEN        \n" +
                "						SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE         \n" +
                "							(woOpid=@nextwoOPID OR (woOPID IN (        \n" +
                "							SELECT woc.woOPID FROM workorder_operation_cluster woc WHERE woc.clusterID=@pclusterID AND woc.deletedAt IS NULL)AND        \n" +
                "							woOpid NOT IN (IFNULL(pcurWoOPID,0))        \n" +
                "							AND  woopid NOT IN (@usedwoopid)));        \n" +
                "						END IF;        \n" +
                "  \n" +
                "				 END IF;        \n" +
                "  \n" +
                "	       END IF;        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */

                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2733,'2.00','V1',' Alter procedure Sproc_GetCurrentRackDetails-champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2733:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveSupplierQuotePartPricingHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuotePartPricingHistory`(                                                    \n" +
                "	IN pSupplierQuotePartDetID INT(11),                                                    \n" +
                "	IN ppageIndex INT(11),                                                    \n" +
                "	IN precordPerPage INT(11),                                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                                    \n" +
                "	IN pWhereClause VARCHAR(16383)                 \n" +
                ")  \n" +
                "BEGIN                                                    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                    \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveSupplierQuotePartPricingHistory = CONCAT(\"              \n" +
                "			SELECT 						      \n" +
                "				s.id,      \n" +
                "                s.refSupplierQuotePartDetID,    \n" +
                "                s.itemNumber,    \n" +
                "                s.colName,    \n" +
                "                s.oldVal,    \n" +
                "                s.newVal,                \n" +
                "				fun_getUserNameByID(s.updatedBy) updatedBy,              						       \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(s.UpdatedAt) updatedAt      \n" +
                "			FROM      \n" +
                "				supplier_quote_part_price_history s	  		    \n" +
                "            WHERE      \n" +
                "				s.refSupplierQuotePartDetID =\",pSupplierQuotePartDetID,\"    \n" +
                "	\");                          \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;                                                    \n" +
                "	ELSE                                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                    \n" +
                "	END IF;	                                                    \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                    \n" +
                "		SET pWhereClause = '1=1' ;                                                    \n" +
                "	END IF;	                                                    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                    \n" +
                "	ELSE	                                                    \n" +
                "		SET rowNumWhere = '';                                                    \n" +
                "	END IF;	                                                     \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                 \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuotePartPricingHistory,\" ) c where 1=1 and \", pWhereClause);                            	     \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                \n" +
                "	EXECUTE query1;                                \n" +
                "	DEALLOCATE PREPARE query1;                              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuotePartPricingHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                \n" +
                "	EXECUTE query2;                                \n" +
                "	DEALLOCATE PREPARE query2;                             \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getUnitOfTimeByKey` ;  \n" +
                "CREATE FUNCTION `fun_getUnitOfTimeByKey`(          \n" +
                "	pKey VARCHAR(5)) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN          \n" +
                "		DECLARE vUnitOfTime VARCHAR(20);               \n" +
                "		IF (pKey='D') THEN  \n" +
                "			SET vUnitOfTime='Weekdays';  \n" +
                "		ELSEIF (pKey='W') THEN  \n" +
                "			SET vUnitOfTime='Week';  \n" +
                "		ELSEIF (pKey='B') THEN  \n" +
                "			SET vUnitOfTime='Business Days';  \n" +
                "		ELSE  \n" +
                "			SET vUnitOfTime='';	  \n" +
                "		END IF;      \n" +
                "	RETURN vUnitOfTime;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2734,'2.00','V1',' Supplier Quote - Dharmesh P'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2734:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getShortagePerBuild` ;  \n" +
                "CREATE FUNCTION `fun_getShortagePerBuild`(                                        \n" +
                "	pQPA DECIMAL(18,8),                                  \n" +
                "	pKitQty INT(11),                                     \n" +
                "	pPartId INT(11),                                \n" +
                "	pRefSalesOrderDetID INT(11),                              \n" +
                "	pRefRfqLineitem VARCHAR(255)                                  \n" +
                ") RETURNS DECIMAL(18,8)  \n" +
                "BEGIN                                        \n" +
                "	DECLARE vShortageValue DECIMAL(18,6);                                     \n" +
                "	DECLARE vAllocatedUnit DECIMAL(18,6);                     \n" +
                "	DECLARE vConsumeUnit DECIMAL(18,6);                                 \n" +
                "	DECLARE vTotalQty DECIMAL(18,8);                               \n" +
                "	DECLARE vPartIds VARCHAR(500);                           \n" +
                "	DECLARE vConnectorTypeId VARCHAR(100);                              \n" +
                "	-- DECLARE vShortagePin DECIMAL(18,6);                   \n" +
                "	-- DECLARE vConsumePin DECIMAL(18,6);               \n" +
                "	DECLARE v_CustPNID VARCHAR(1000);      \n" +
                "	DECLARE v_BomPin INT(11);       \n" +
                "	DECLARE v_TotalRequirePin DECIMAL(18,6);               \n" +
                "	DECLARE v_AllocatedPin DECIMAL(18,6);    \n" +
                "	DECLARE v_ConsumePin DECIMAL(18,6);    \n" +
                "  \n" +
                "	SET vShortageValue = 0;                                   \n" +
                "	SELECT 	GROUP_CONCAT(custPNID) INTO v_CustPNID       \n" +
                "	FROM 	kit_allocation_lineitems       \n" +
                "	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID     \n" +
                "			AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitem)     \n" +
                "			AND deletedAt IS NULL;              \n" +
                "  \n" +
                "	SELECT  GROUP_CONCAT(c.id), GROUP_CONCAT(c.connecterTypeID)                   \n" +
                "	INTO 	vPartIds, vConnectorTypeId      \n" +
                "	FROM 	component c WHERE id IN (	    \n" +
                "			SELECT 	mfgPNID     \n" +
                "			FROM 	kit_allocation_lineitems_alternatepart       \n" +
                "			WHERE 	refSalesOrderDetID = pRefSalesOrderDetID     \n" +
                "					AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitem)     \n" +
                "					AND deletedAt IS NULL                        \n" +
                "			UNION                        \n" +
                "			SELECT 	componentID AS mfgPNID     \n" +
                "			FROM 	component_packagingalias       \n" +
                "			WHERE 	aliasgroupID IN (      \n" +
                "				SELECT 	aliasgroupID     \n" +
                "				FROM 	component_packagingalias       \n" +
                "				WHERE 	componentID IN (    \n" +
                "					SELECT mfgPNID     \n" +
                "					FROM 	kit_allocation_lineitems_alternatepart       \n" +
                "					WHERE 	refSalesOrderDetID = pRefSalesOrderDetID     \n" +
                "							AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitem)     \n" +
                "							AND deletedAt IS NULL    \n" +
                "					)       \n" +
                "					AND deletedAt IS NULL     \n" +
                "				)       \n" +
                "				AND deletedAt IS NULL        \n" +
                "			UNION        \n" +
                "			SELECT 	custPNID AS mfgPNID     \n" +
                "			FROM 	kit_allocation_lineitems       \n" +
                "			WHERE 	refSalesOrderDetID = pRefSalesOrderDetID       \n" +
                "					AND FIND_IN_SET(refRfqLineitem, pRefRfqLineitem) AND deletedAt IS NULL      \n" +
                "					AND custPNID IS NOT NULL     \n" +
                "			)          \n" +
                "			AND c.deletedAt IS NULL;                          \n" +
                "  \n" +
                "	SELECT IFNULL((pQPA * pKitQty), 0) INTO vTotalQty;                                  \n" +
                "  \n" +
                "	SELECT 	CASE WHEN ka.status = 'A' THEN IFNULL(SUM(ka.allocatedUnit),0) ELSE 0 END AllocatedUnits,      \n" +
                "		CASE WHEN ka.status = 'R' THEN IFNULL(SUM(ka.consumeUnit),0) ELSE 0 END  ConsumeUnits      \n" +
                "	INTO 	vAllocatedUnit, vConsumeUnit            \n" +
                "	FROM 	kit_allocation ka                 \n" +
                "	WHERE 	FIND_IN_SET(ka.PartId, (vPartIds))     \n" +
                "			AND ka.status IN('A','R')                 \n" +
                "			AND (CASE WHEN pPartId = 0 THEN ka.assyID = ka.assyID ELSE ka.assyID = pPartId END)                \n" +
                "			AND refSalesOrderDetID = pRefSalesOrderDetID              \n" +
                "			AND FIND_IN_SET(ka.refBOMLineID, pRefRfqLineitem);             \n" +
                "  \n" +
                "	IF (vConnectorTypeId LIKE '%-2%') THEN       \n" +
                "		SELECT 	numOfPosition      \n" +
                "		INTO	v_BomPin               \n" +
                "		FROM 	kit_allocation_lineitems                 \n" +
                "		WHERE  	FIND_IN_SET(refRfqLineitem, pRefRfqLineitem)                 \n" +
                "				AND refSalesOrderDetID = pRefSalesOrderDetID                   \n" +
                "				AND (CASE WHEN pPartId = 0 THEN partID = partID ELSE partID = pPartId END)  \n" +
                "		LIMIT 	1;                \n" +
                "		SELECT vTotalQty * IFNULL(v_BomPin, 0) INTO v_TotalRequirePin;    \n" +
                "		SELECT 	(    \n" +
                "				CASE    \n" +
                "					WHEN `status` = 'A' THEN    \n" +
                "						SUM(((FLOOR(partPin/IFNULL(v_BomPin, 0)) * IFNULL(v_BomPin, 0)) * IFNULL(allocatedUnit, 0)))    \n" +
                "					ELSE     \n" +
                "						0    \n" +
                "				END     \n" +
                "		) AS allocatedPin,    \n" +
                "		(    \n" +
                "				CASE    \n" +
                "					WHEN `status` = 'R' THEN    \n" +
                "						SUM(((FLOOR(partPin/IFNULL(v_BomPin, 0)) * IFNULL(v_BomPin, 0)) * IFNULL(consumeUnit, 0)))    \n" +
                "					ELSE     \n" +
                "						0    \n" +
                "				END     \n" +
                "		) AS consumedPin    \n" +
                "		INTO 	v_AllocatedPin, v_ConsumePin 	    \n" +
                "		FROM 	(    \n" +
                "				SELECT 		ka.refUIDId, SUM(ka.allocatedUnit) AS allocatedUnit, ka.refBOMLineID, IFNULL(c.noOfPosition, 0) partPin, ka.`status`, consumeUnit                       \n" +
                "				FROM 		kit_allocation ka       \n" +
                "				INNER JOIN	component c ON c.id = ka.partId AND c.isDeleted = 0                  \n" +
                "				WHERE 		ka.`status` IN ('A','R')     \n" +
                "							AND (    \n" +
                "								CASE    \n" +
                "									WHEN (pPartId = 0) THEN    \n" +
                "										assyID = assyID    \n" +
                "									ELSE    \n" +
                "										assyID = pPartId    \n" +
                "								END    \n" +
                "							)     \n" +
                "							AND ka.refSalesOrderDetID = pRefSalesOrderDetID     \n" +
                "							AND FIND_IN_SET(ka.partId, vPartIds)   \n" +
                "							AND FIND_IN_SET(ka.refBOMLineID, pRefRfqLineitem)                     \n" +
                "				GROUP BY 	ka.refUIDId    \n" +
                "			) a;    \n" +
                "		IF ((v_TotalRequirePin - IFNULL(v_AllocatedPin,0)  - IFNULL(v_ConsumePin,0)) > 0) THEN                          \n" +
                "			SET vShortageValue = v_TotalRequirePin - IFNULL(v_AllocatedPin,0)  - IFNULL(v_ConsumePin,0);                          \n" +
                "		ELSE                           \n" +
                "			SET vShortageValue = 0;                          \n" +
                "		END IF;                             \n" +
                "	ELSE                          \n" +
                "		IF ((vTotalQty - IFNULL(vAllocatedUnit,0) - IFNULL(vConsumeUnit,0)) > 0) THEN                                  \n" +
                "			SET vShortageValue = vTotalQty - IFNULL(vAllocatedUnit,0) - IFNULL(vConsumeUnit,0);                                  \n" +
                "		ELSE                                   \n" +
                "			SET vShortageValue = 0;                                  \n" +
                "		END IF;                    \n" +
                "	END IF;                          \n" +
                "  \n" +
                "	RETURN CAST(vShortageValue AS DECIMAL(18,8));                                         \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2735,'2.00','V1','fun_getShortagePerBuild - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2735:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "UPDATE page_detail SET iconClass ='mdi mdi-file-document' WHERE pageName='Manage Supplier Quote Documents';   \n" +
                "UPDATE page_detail SET iconClass ='icons-supplier-quote' WHERE pageName IN ('Supplier Quote List','Add Supplier Quote');  \n" +
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2736,'2.00','V1',' Supplier Quote - Dharmesh P'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2736:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "UPDATE page_detail  \n" +
                "SET menuName=\"Manage Parts MISC\"  \n" +
                "WHERE menuName=\"Manage Parts Miscellaneous\";  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET menuName=\"Manage Standard MISC\"  \n" +
                "WHERE menuName=\"Manage Standard misc\";  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET menuName=\"Manage Personnel MISC\"  \n" +
                "WHERE menuName=\"Manage Personnel Miscellaneous\";  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET menuName=\"Manage Department MISC\"  \n" +
                "WHERE menuName=\"Manage Department Misc\";  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET menuName=\"Manage Work Order MISC\"  \n" +
                "WHERE menuName=\"Manage Work Order Other Details\";  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET menuName=\"Manage Work Order Operation MISC\",   \n" +
                "displayMenuName=\"Manage Work Order Operation MISC\"  \n" +
                "WHERE menuName=\"Manage Work Order Operation Other Details\";  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET menuName=\"Manage Work Order Supplies, Materials & Tools\"  \n" +
                "WHERE menuName=\"Manage Work Order Parts\";  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET menuName=\"Manage Work Order Operation Supplies, Materials & Tools\",   \n" +
                "displayMenuName=\"Manage Work Order Operation Supplies, Materials & Tools\"  \n" +
                "WHERE menuName=\"Manage Work Order Operation Parts\";  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET menuName=\"Manage Operation Supplies, Materials & Tools\"  \n" +
                "WHERE menuName=\"Manage Operation Parts\";  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET pageRoute=\"app.workorder\"  \n" +
                "WHERE pageRoute=\"app.workorder.list\";  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET pageRoute=\"app.workorder.profile\"  \n" +
                "WHERE pageRoute=\"app.workorder.list.profile\";  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET pageRoute=\"app.workorder.manualentrylist\"  \n" +
                "WHERE pageRoute=\"app.workorder.list.manualentrylist\";  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET pageRoute=\"app.workorder.managewomanualentry\"  \n" +
                "WHERE pageRoute=\"app.workorder.list.managewomanualentry\";  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET pageRoute=\"app.workorder.dataentrychangeauditloglist\"  \n" +
                "WHERE pageRoute=\"app.workorder.list.dataentrychangeauditloglist\";  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET pageRoute=\"app.workorder.dfmrequestlist\"  \n" +
                "WHERE pageRoute=\"app.workorder.list.dfmrequestlist\";  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET pageRoute=\"app.workorder.ecorequestlist\"  \n" +
                "WHERE pageRoute=\"app.workorder.list.ecorequestlist\";  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET menuRoute=NULL,  \n" +
                "pageRoute=\"app.transaction.salesorder.manage\"  \n" +
                "WHERE pageRoute=\"app.transaction.manage\";  \n" +
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2737,'2.00','V1','Menu Script changes Sales Order and Work ORder - Vaibhav'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2737:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_CalculateKitFeasibility` ;  \n" +
                "CREATE FUNCTION `fun_CalculateKitFeasibility`(                              \n" +
                "	pRefSalesOrderDetID INT(11),                                  \n" +
                "	pAssyID INT(11),                                  \n" +
                "	pIsConsolidated TINYINT(1),                            \n" +
                "	pInputQty DECIMAL(18,8)                              \n" +
                ") RETURNS DECIMAL(18,8)  \n" +
                "BEGIN                              \n" +
                "	DECLARE vKitQty DECIMAL(18,8);   \n" +
                "	SET SESSION group_concat_max_len = 500000;                                 \n" +
                "  \n" +
                "	SELECT kitQty INTO vKitQty FROM salesorderdet WHERE id = pRefSalesOrderDetID;                                \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempMountingTypeWiseKitDet;                                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempMountingTypeWiseKitDet              \n" +
                "	(                                  \n" +
                "		mountingTypeID INT(11),  		              \n" +
                "		mountingType VARCHAR(50),    \n" +
                "		connecterTypeID INT(11),    \n" +
                "		connecterType VARCHAR(50),    \n" +
                "		feasibilityWithAllocation DECIMAL(18,8),	                                  \n" +
                "		shortageLine DECIMAL(18,8), 	              \n" +
                "		feasibilityWithAvailableAndAllocatedStock DECIMAL(18,8),                                  \n" +
                "		shortageWithAvailableQty DECIMAL(18,8),						              \n" +
                "		shortageForInputQty DECIMAL(18,8),                                  \n" +
                "		releasedQty DECIMAL(18,8),		              \n" +
                "		pendingQty DECIMAL(18,8),	              \n" +
                "		releasePercentage DECIMAL(18,8),              \n" +
                "		totalLine INT                                  \n" +
                "	);            \n" +
                "  \n" +
                "	IF(pIsConsolidated = 1) THEN                                  \n" +
                "		CALL Sproc_GetKitConsolidateData(pAssyID, FALSE);                                   \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempFeasibilityDetail;                                  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempFeasibilityDetail AS                                  \n" +
                "		SELECT  	r.lineid,             \n" +
                "				r.rfqLineItemsID refRfqLineitem, 	            \n" +
                "				r.qpa,     \n" +
                "				r.numOfPosition,        \n" +
                "				fun_getKitAllocatedUnits(pAssyID, pRefSalesOrderDetID, r.rfqLineItemsID, r.consolidatedLineItemIDs, TRUE) allocatedUnit,                                \n" +
                "				fun_getKitAllocatedPin(pAssyID, pRefSalesOrderDetID, r.rfqLineItemsID, r.consolidatedLineItemIDs, r.numOfPosition, TRUE) allocatedPin,           \n" +
                "				fun_getKitAllocatedMountingType(pRefSalesOrderDetID, r.rfqLineItemsID, c.mountingTypeID) mountingTypeID,                            \n" +
                "				fun_getAvilableStockWithPackagingAliasForConsolidate(pRefSalesOrderDetID, r.consolidatedLineItemIDs) availableStock,      \n" +
                "				fun_getAvilableStockWithPackagingAliasInPins(r.consolidatedLineItemIDs, NULL, pRefSalesOrderDetID, r.numOfPosition) availableStockInPin,     \n" +
                "				r.partID                                  \n" +
                "		FROM 		temp_Sproc_GetKitConsolidateData r                                    \n" +
                "		INNER JOIN 	component c ON r.mfgPNID = c.id             \n" +
                "					AND c.isGoodPart = 1                                 \n" +
                "		LEFT JOIN 	kit_allocation k ON r.rfqLineItemsID = k.refBOMLineID                                   \n" +
                "					AND k.status = 'A'                                   \n" +
                "					AND k.refSalesOrderDetID = pRefSalesOrderDetID                                  \n" +
                "		GROUP BY 	r.rfqLineItemsID, r.qpa                                  \n" +
                "		ORDER BY 	R.lineid;              \n" +
                "  \n" +
                "		INSERT INTO tempMountingTypeWiseKitDet                                  \n" +
                "		SELECT 	mountingTypeID,                                   \n" +
                "			mountingType, 	       \n" +
                "			connecterTypeID,      \n" +
                "			connecterType,                             \n" +
                "			MIN(feasibilityWithAllocation) feasibilityWithAllocation,                                  \n" +
                "			SUM(Shortage) shortageLine,                          \n" +
                "			MIN(feasibilityWithAvailableAndAllocatedStock) feasibilityWithAvailableAndAllocatedStock,                                  \n" +
                "			SUM(ShortageWithAvailableQty) shortageWithAvailableQty,                                  \n" +
                "			SUM(shortageForInputQty) shortageForInputQty,                                  \n" +
                "			0 releasedQty,                                  \n" +
                "			vKitQty pendingQty,                                  \n" +
                "			0 releasePercentage,              \n" +
                "			COUNT(1) totalLine                                  \n" +
                "		FROM    (                                  \n" +
                "				SELECT 	mountingTypeID,		              \n" +
                "					mountingType,     \n" +
                "					connecterTypeID,	      \n" +
                "					(    \n" +
                "						CASE    \n" +
                "							WHEN connecterTypeID IS NOT NULL THEN     \n" +
                "								fun_getConnectorTypeNameByID(connecterTypeID)    \n" +
                "							ELSE     \n" +
                "								NULL    \n" +
                "						END    \n" +
                "					) connecterType,                          \n" +
                "					lineID,		              \n" +
                "					refRfqLineitem, 	              \n" +
                "					qpa,                 \n" +
                "					allocatedUnit,                                  \n" +
                "					feasibilityWithAllocation,                \n" +
                "					CASE WHEN (shortagePerBuil > 0) THEN 1 ELSE 0 END Shortage,                                   \n" +
                "					availableStock,		                                  \n" +
                "					feasibilityWithAvailableAndAllocatedStock,                                  \n" +
                "					CASE WHEN (feasibilityWithAvailableAndAllocatedStock < vKitQty) THEN 1 ELSE 0 END ShortageWithAvailableQty,                                   \n" +
                "					CASE WHEN (feasibilityWithAvailableAndAllocatedStock < pInputQty) THEN 1 ELSE 0 END shortageForInputQty                                  \n" +
                "				FROM 	(                                  \n" +
                "						SELECT 	mountingTypeID,		              \n" +
                "							fun_getMountingTypeNameByID(mountingTypeID) mountingType,    \n" +
                "							(CASE WHEN numOfPosition IS NOT NULL AND numOfPosition != 0 THEN -2 ELSE NULL END) connecterTypeID, 	    \n" +
                "							numOfPosition,              \n" +
                "							lineID,		              \n" +
                "							refRfqLineitem, 	              \n" +
                "							qpa,                 \n" +
                "							allocatedUnit,      \n" +
                "							allocatedPin,       \n" +
                "							(    \n" +
                "								CASE     \n" +
                "									WHEN numOfPosition IS NULL OR numOfPosition = 0 THEN    \n" +
                "										(allocatedUnit/qpa)    \n" +
                "									ELSE    \n" +
                "										(IFNULL(allocatedPin, 0) / (qpa * numOfPosition))    \n" +
                "								END     \n" +
                "							) feasibilityWithAllocation,                                  \n" +
                "							availableStock,      \n" +
                "							availableStockInPin,    \n" +
                "							(    \n" +
                "								CASE    \n" +
                "									WHEN numOfPosition IS NULL OR numOfPosition = 0 THEN    \n" +
                "										((availableStock + allocatedUnit)/qpa)    \n" +
                "									ELSE    \n" +
                "										((IFNULL(allocatedPin,0) + IFNULL(availableStockInPin, 0)) / (qpa * numOfPosition))    \n" +
                "								END    \n" +
                "							) feasibilityWithAvailableAndAllocatedStock,            \n" +
                "							partID,            \n" +
                "							fun_getShortagePerBuild(qpa, vKitQty, partID, pRefSalesOrderDetID, refRfqLineitem) shortagePerBuil                                  \n" +
                "						FROM 	tempFeasibilityDetail                                  \n" +
                "					) AS a                                  \n" +
                "			) AS feasibilityDet                                  \n" +
                "		GROUP BY mountingTypeID, connecterTypeID                                  \n" +
                "		ORDER BY mountingType;                                \n" +
                "	ELSE                                   \n" +
                "		INSERT INTO tempMountingTypeWiseKitDet (mountingTypeID, mountingType, connecterTypeID, connecterType, feasibilityWithAllocation, totalLine, shortageLine, feasibilityWithAvailableAndAllocatedStock, shortageWithAvailableQty, shortageForInputQty)                                  \n" +
                "		SELECT 		mountingTypeID,            \n" +
                "				fun_getMountingTypeNameByID(mountingTypeID) mountingType,    \n" +
                "				connecterTypeID,      \n" +
                "				(    \n" +
                "					CASE    \n" +
                "						WHEN connecterTypeID = -2 THEN    \n" +
                "							fun_getConnectorTypeNameByID(connecterTypeID)    \n" +
                "						ELSE     \n" +
                "							NULL    \n" +
                "					END    \n" +
                "				) connecterType,    \n" +
                "				MIN(feasibility) feasibilityWithAllocation,            \n" +
                "				COUNT(1) totalLine,            \n" +
                "				SUM(countOfShortageLineForAllocatedUnit) shortageLine,            \n" +
                "				MIN(feasibilityWithAvailable) feasibilityWithAvailableAndAllocatedStock,            \n" +
                "				SUM(countOfshortageForAvailableUnits) shortageWithAvailableQty,            \n" +
                "				SUM(countShortageForInput) shortageForInputQty            \n" +
                "		FROM 		(            \n" +
                "					SELECT 		mountingTypeID,    \n" +
                "							connecterTypeID,    \n" +
                "							feasibility,      \n" +
                "							feasibilityWithAvailable,         \n" +
                "							(            \n" +
                "								CASE            \n" +
                "									WHEN shortage > 0 THEN            \n" +
                "										1            \n" +
                "									ELSE             \n" +
                "										0            \n" +
                "								END            \n" +
                "							) AS countOfShortageLineForAllocatedUnit,            \n" +
                "							(            \n" +
                "								CASE            \n" +
                "									WHEN shortageForAvailable < 0 THEN            \n" +
                "										1            \n" +
                "									ELSE             \n" +
                "										0            \n" +
                "								END            \n" +
                "							) AS countOfshortageForAvailableUnits,            \n" +
                "							(IFNULL(feasibilityWithAvailable, 0) - IFNULL(pInputQty, 0)) shortageForInput,            \n" +
                "							(            \n" +
                "								CASE            \n" +
                "									WHEN ((IFNULL(feasibilityWithAvailable, 0) - IFNULL(pInputQty, 0)) < 0) THEN            \n" +
                "										1            \n" +
                "									ELSE            \n" +
                "										0            \n" +
                "								END            \n" +
                "							) AS countShortageForInput            \n" +
                "					FROM 		vu_kit_feasibility_detail             \n" +
                "					WHERE 		refSalesOrderDetID = pRefSalesOrderDetID             \n" +
                "								AND assyid = pAssyID             \n" +
                "					GROUP BY 	lineid            \n" +
                "				) a             \n" +
                "		GROUP BY 	mountingTypeID, connecterTypeID              \n" +
                "		ORDER BY 	mountingType;                                 \n" +
                "    END IF;                              \n" +
                "  \n" +
                "  \n" +
                "    RETURN vKitQty;                              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2738,'2.00','V1','fun_CalculateKitFeasibility - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2738:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_WorkOrder_Operation  ;  \n" +
                "CREATE TRIGGER `Trg_AU_WorkOrder_Operation` AFTER UPDATE ON `workorder_operation` FOR EACH ROW BEGIN        \n" +
                "  \n" +
                "    DECLARE vWoVersion VARCHAR(200);    \n" +
                "	SELECT woVersion INTO vWoVersion    \n" +
                "    FROM workorder w    \n" +
                "    WHERE w.woID = NEW.woID    \n" +
                "    AND IFNULL(w.isDeleted,0) = 0;    \n" +
                "  \n" +
                "	IF IFNULL(OLD.opName, 0) != IFNULL(NEW.opName, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby , updateByRoleId, woVersion , opVersion  ,  valueDataType )         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPNAME',        \n" +
                "			CAST(OLD.opName AS CHAR),CAST(NEW.opName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion ,'String');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.processTime, 0) != IFNULL(NEW.processTime, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'PROCESSTIME',        \n" +
                "			CAST(OLD.processTime AS CHAR),CAST(NEW.processTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'Date');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.setupTime, 0) != IFNULL(NEW.setupTime, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType  )         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'SETUPTIME',        \n" +
                "			CAST(OLD.setupTime AS CHAR),CAST(NEW.setupTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'Date');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.perPieceTime , 0)!= IFNULL(NEW.perPieceTime, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby , updateByRoleId, woVersion , opVersion  ,  valueDataType )         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'PERPIECETIME',        \n" +
                "			CAST(OLD.perPieceTime AS CHAR),CAST(NEW.perPieceTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'Date');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.qtyControl, 0) != IFNULL(NEW.qtyControl, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'QTYCONTROL',        \n" +
                "			CAST(OLD.qtyControl AS CHAR),CAST(NEW.qtyControl AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,     \n" +
                "            vWoVersion  , NEW.opVersion ,'Boolean');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.cleaningType, 0) != IFNULL(NEW.cleaningType, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType  )         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'CLEANINGTYPE',        \n" +
                "			CAST(OLD.cleaningType AS CHAR),CAST(NEW.cleaningType AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,                \n" +
                "            vWoVersion , NEW.opVersion,'Case');        \n" +
                "	END IF;        \n" +
                "	-- IF IFNULL(OLD.isWatersoluble, 0) != IFNULL(NEW.isWatersoluble , 0) THEN         \n" +
                "	-- 	INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )         \n" +
                "	-- 	VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISWATERSOLUBLE',        \n" +
                "	-- 		CAST(OLD.isWatersoluble AS CHAR),CAST(NEW.isWatersoluble AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);        \n" +
                "	-- END IF;        \n" +
                "	IF IFNULL(OLD.opDescription, 0) != IFNULL(NEW.opDescription , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType  )         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPDESCRIPTION',        \n" +
                "			CAST(OLD.opDescription AS CHAR),CAST(NEW.opDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'TextAngular');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.opWorkingCondition, 0) != IFNULL(NEW.opWorkingCondition, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType )         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPWORKINGCONDITION',        \n" +
                "			CAST(OLD.opWorkingCondition AS CHAR),CAST(NEW.opWorkingCondition AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy ,NEW.updateByRoleId,     \n" +
                "            vWoVersion, NEW.opVersion ,'TextAngular');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.opManagementInstruction, 0) != IFNULL(NEW.opManagementInstruction, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPMANAGEMENTINSTRUCTION',        \n" +
                "			CAST(OLD.opManagementInstruction AS CHAR),CAST(NEW.opManagementInstruction AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'TextAngular');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.opDeferredInstruction, 0) != IFNULL(NEW.opDeferredInstruction, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby ,updateByRoleId,  woVersion , opVersion  ,  valueDataType )         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPDEFERREDINSTRUCTION',        \n" +
                "			CAST(OLD.opDeferredInstruction AS CHAR),CAST(NEW.opDeferredInstruction AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'TextAngular');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.opDoes, 0) != IFNULL(NEW.opDoes, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPDOES',        \n" +
                "			CAST(OLD.opDoes AS CHAR),CAST(NEW.opDoes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,     \n" +
                "            vWoVersion, NEW.opVersion, 'TextAngular');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.opDonts , 0)!= IFNULL(NEW.opDonts , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby ,updateByRoleId,  woVersion , opVersion  ,  valueDataType )         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPDONTS',        \n" +
                "			CAST(OLD.opDonts AS CHAR),CAST(NEW.opDonts AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,     \n" +
                "            vWoVersion, NEW.opVersion,'TextAngular');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.opStatus, 0) != IFNULL(NEW.opStatus , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPSTATUS',        \n" +
                "			CAST(OLD.opStatus AS CHAR),CAST(NEW.opStatus AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'String');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.opOrder , 0)!= IFNULL(NEW.opOrder , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType  )         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPORDER',        \n" +
                "			CAST(OLD.opOrder AS CHAR),CAST(NEW.opOrder AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,     \n" +
                "            vWoVesion , NEW.opVersion , 'Number');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.operationTypeID, 0) != IFNULL(NEW.operationTypeID, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby ,updateByRoleId,  woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPERATIONTYPEID',        \n" +
                "			CAST(OLD.operationTypeID AS CHAR),CAST(NEW.operationTypeID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'String');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.parentOPID, 0) != IFNULL(NEW.parentOPID, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'PARENTOPID',        \n" +
                "			CAST(OLD.parentOPID AS CHAR),CAST(NEW.parentOPID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'String');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.isDeleted , 0)!= IFNULL(NEW.isDeleted , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISOPERATIONDELETED',        \n" +
                "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,     \n" +
                "            vWoVersion,  NEW.opVersion , 'Boolean');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.firstPcsConclusion, 0) != IFNULL(NEW.firstPcsConclusion , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'FIRSTPCSCONCLUSION',        \n" +
                "			CAST(OLD.firstPcsConclusion AS CHAR),CAST(NEW.firstPcsConclusion AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'String');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.firstPcsModel, 0) != IFNULL(NEW.firstPcsModel , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'FIRSTPCSMODEL',        \n" +
                "			CAST(OLD.firstPcsModel AS CHAR),CAST(NEW.firstPcsModel AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion ,'String');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.firstPcsStatus, 0) != IFNULL(NEW.firstPcsStatus, 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'FIRSTPCSSTATUS',        \n" +
                "			CAST(OLD.firstPcsStatus AS CHAR),CAST(NEW.firstPcsStatus AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'String');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.isIssueQty, 0) != IFNULL(NEW.isIssueQty, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISISSUEQTY',        \n" +
                "			CAST(OLD.isIssueQty AS CHAR),CAST(NEW.isIssueQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.isPreProgrammingComponent, 0) != IFNULL(NEW.isPreProgrammingComponent, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISPREPROGRAMMINGCOMPONENT',        \n" +
                "			CAST(OLD.isPreProgrammingComponent AS CHAR),CAST(NEW.isPreProgrammingComponent AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,     \n" +
                "            vWoVersion, NEW.opVersion , 'Boolean');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.isRework, 0) != IFNULL(NEW.isRework, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISREWORK',        \n" +
                "			CAST(OLD.isRework AS CHAR),CAST(NEW.isRework AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.isStopOperation, 0) != IFNULL(NEW.isStopOperation, 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISSTOPOPERATION',        \n" +
                "			CAST(OLD.isStopOperation AS CHAR),CAST(NEW.isStopOperation AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.isTeamOperation , 0) != IFNULL(NEW.isTeamOperation , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISTEAMOPERATION',        \n" +
                "			CAST(OLD.isTeamOperation AS CHAR),CAST(NEW.isTeamOperation AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.isTerminated, 0) != IFNULL(NEW.isTerminated, 0)  THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISTERMINATED',        \n" +
                "			CAST(OLD.isTerminated AS CHAR),CAST(NEW.isTerminated AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.opVersion, 0) != IFNULL(NEW.opVersion , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy,  updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType )         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPVERSION',        \n" +
                "			CAST(OLD.opVersion AS CHAR),CAST(NEW.opVersion AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'String');        \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.colorCode, 0) != IFNULL(NEW.colorCode , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy,  updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'COLORCODE',        \n" +
                "			CAST(OLD.colorCode AS CHAR),CAST(NEW.colorCode AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion ,'Color');        \n" +
                "	END IF;     \n" +
                "    IF IFNULL(OLD.isMoveToStock , 0) != IFNULL(NEW.isMoveToStock , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISMOVETOSTOCK',        \n" +
                "			CAST(OLD.isMoveToStock AS CHAR),CAST(NEW.isMoveToStock AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');        \n" +
                "	END IF;      \n" +
                "     IF IFNULL(OLD.isPlacementTracking , 0) != IFNULL(NEW.isPlacementTracking , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISPLACEMENTTRACKING',        \n" +
                "			CAST(OLD.isPlacementTracking AS CHAR),CAST(NEW.isPlacementTracking AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');        \n" +
                "	END IF;      \n" +
                "     IF IFNULL(OLD.isTrackBySerialNo , 0) != IFNULL(NEW.isTrackBySerialNo , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISTRACKBYSERIALNO',        \n" +
                "			CAST(OLD.isTrackBySerialNo AS CHAR),CAST(NEW.isTrackBySerialNo AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');        \n" +
                "	END IF;      \n" +
                "	IF IFNULL(OLD.isLoopOperation , 0) != IFNULL(NEW.isLoopOperation , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,  updateByRoleId,woVersion, opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISLOOPOPERATION',        \n" +
                "			CAST(OLD.isLoopOperation AS CHAR),CAST(NEW.isLoopOperation AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');        \n" +
                "	END IF;     \n" +
                "    IF IFNULL(OLD.isAllowMissingPartQty , 0) != IFNULL(NEW.isAllowMissingPartQty , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISALLOWMISSINGPARTQTY',        \n" +
                "			CAST(OLD.isAllowMissingPartQty AS CHAR),CAST(NEW.isAllowMissingPartQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');        \n" +
                "	END IF;     \n" +
                "    IF IFNULL(OLD.isAllowByPassQty , 0) != IFNULL(NEW.isAllowByPassQty , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISALLOWBYPASSQTY',        \n" +
                "			CAST(OLD.isAllowByPassQty AS CHAR),CAST(NEW.isAllowByPassQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');        \n" +
                "	END IF;      \n" +
                "     IF IFNULL(OLD.tabLimitAtTraveler , 0) != IFNULL(NEW.tabLimitAtTraveler , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'TABLIMITATTRAVELER',        \n" +
                "			CAST(OLD.tabLimitAtTraveler AS CHAR),CAST(NEW.tabLimitAtTraveler AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'String');        \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.mountingTypeID , 0) != IFNULL(NEW.mountingTypeID , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'MOUNTINGTYPE',        \n" +
                "			CAST(OLD.mountingTypeID AS CHAR),CAST(NEW.mountingTypeID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'String');        \n" +
                "	END IF;     \n" +
                "	IF IFNULL(OLD.opNumber , 0) != IFNULL(NEW.opNumber , 0) THEN         \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)         \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPNUMBER',        \n" +
                "			CAST(OLD.opNumber AS CHAR),CAST(NEW.opNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,     \n" +
                "            vWoVersion , NEW.opVersion , 'String');        \n" +
                "	END IF;     \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2739,'2.00','V1','Trg_AU_WorkOrder_Operation - Shweta'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2739:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS fun_getNameByID;  \n" +
                "CREATE FUNCTION `fun_getNameByID`(          \n" +
                "	pColName VARCHAR(255),    \n" +
                "    pId LONGTEXT   ,    \n" +
                "    pDataType VARCHAR(20)    \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN          \n" +
                "	DECLARE vName LONGTEXT;       \n" +
                "  \n" +
                "	IF pColName = 'WOSTATUS' OR  pColName = 'FIRSTPCSSTATUS' THEN      \n" +
                "		SET vName = fun_getStatusNameByColumnAndID (pColName, pId);    \n" +
                "    ELSEIF pColName = 'CUSTOMER' THEN    \n" +
                "		SET vName = fun_getMfgCodeAndNameByID(pId);    \n" +
                "    ELSEIF pColName = 'REFRENCEWOID' THEN    \n" +
                "		SET vName = fun_getWorkorderNumberByID(pId);    \n" +
                "    ELSEIF pColName = 'ROHSSTATUSID' THEN    \n" +
                "		SET vName = fun_getRoHSNameByID(pId);    \n" +
                "	ELSEIF pColName = 'PARTID' THEN    \n" +
                "		SET vName = fun_getComponentNameByID(pId);     \n" +
                "	ELSEIF pColName = 'CLASSIDS' OR pColName = 'ADDCLASSIDS' OR pColName = 'UPDATECLASSIDS' THEN    \n" +
                "		SET vName = fun_getCetificateNameById(pColName, pId);         \n" +
                "	ELSEIF pColName = 'STANDARDIDS' THEN    \n" +
                "		SET vName = fun_getCetificateNameById(pColName, pId);                 \n" +
                "	ELSEIF pColName = 'WORKORDERDATAFIELD' THEN    \n" +
                "		SET vName = fun_getDataElementNameById(pId, -7);       \n" +
                "	ELSEIF pColName = 'OPERATIONDATAFIELD' THEN    \n" +
                "		SET vName = fun_getDataElementNameById(pId, -1);      \n" +
                "	ELSEIF pColName = 'ADDEDEMPLOYEE' THEN    \n" +
                "		SET vName = fun_getEmployeeInitialNameByEmpID(pId);       \n" +
                "	ELSEIF pColName = 'WORKORDERCOOWNER' THEN    \n" +
                "		SET vName = fun_getEmployeeInitialNameByEmpID(pId);      \n" +
                "	ELSEIF pColName = 'OPSTATUS' THEN    \n" +
                "		SET vName = fun_getOpStatusNameByID(pId);     \n" +
                "	ELSEIF pColName = 'PARENTOPID' THEN    \n" +
                "		SET vName = fun_getOperationNameById(pId);     \n" +
                "	ELSEIF pColName = 'OPERATIONTYPEID' THEN    \n" +
                "		SET vName = fun_getGenericCategoryNameByID(pId);        \n" +
                "	ELSEIF pColName = 'OPERATIONCLUSTERID' THEN    \n" +
                "		SET vName = fun_getClusterNameById(pId);        \n" +
                "	ELSEIF pColName = 'ADDEDEQUIPMENT' THEN    \n" +
                "		SET vName = fun_getEqpWSNameByID(pId);        \n" +
                "	ELSEIF pColName = 'SMTUOM' THEN    \n" +
                "		SET vName = fun_getUnitNameByID(pId);       \n" +
                "	ELSEIF pColName = 'ADDEDSMT' THEN    \n" +
                "		#SET vName = fun_getComponentPIDCodeByID(pId);               \n" +
                "        SET vName = fun_getAssyPIDCodeByID(pId);      \n" +
                "	ELSEIF pColName = 'MOUNTINGTYPE' THEN		          \n" +
                "        SET vName = fun_getMountingTypeNameByID(pId);       \n" +
                "	ELSE    \n" +
                "		SET vName = pId;    \n" +
                " END IF;        \n" +
                "	IF pDataType = 'Boolean' THEN    \n" +
                "		IF pId = 1 THEN SET vName ='Yes' ;    \n" +
                "		ELSEIF pId = 0 THEN SET vName = 'No';    \n" +
                "		END IF ;    \n" +
                "	ELSEIF pDataType = 'Case' THEN   		    \n" +
                "		IF pId = 'NC' THEN SET vName= \"No-Clean\";    \n" +
                "		ELSEIF pId= 'NA' THEN SET vName= \"Not Applicable\";    \n" +
                "		ELSEIF pId= 'WS' THEN SET vName = \"Water-Soluble\";    \n" +
                "		END IF;       \n" +
                "	END IF ;    \n" +
                "  \n" +
                "  \n" +
                "	RETURN vName;            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2740,'2.00','V1',' fun_getNameByID - Shweta'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2740:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerPackingSlipDeatils` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(              \n" +
                "	IN ppageIndex INT(11),              \n" +
                "	IN precordPerPage INT(11),              \n" +
                "	IN pOrderBy VARCHAR(255),              \n" +
                "	IN pWhereClause VARCHAR(16383)              \n" +
                ")  \n" +
                "BEGIN              \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);              \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;              \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"          \n" +
                "		SELECT cd.packingSlipNumber,cd.packingslipDate,cd.poNumber,cd.soNumber,cd.soDate,cd.poDate,  \n" +
                "	fun_getMfgCodeAndNameByID(cd.customerID) customerName,cd.freeOnBoard,cd.packingslipcomment,  \n" +
                "(SELECT gen.gencCategoryCode  FROM genericcategory gen WHERE gen.gencCategoryID = cd.shippingmethodid) shippingMethod,cd.status,cd.sorevision,cpd.partId,fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "fun_getRoHSIconByPartID(cpd.partId) rohsIcon,fun_getComponentNameByID(cpd.partId) assyName ,  \n" +
                "case when cd.status=0 then 'Draft' else 'Published' end statusConvertedValue,cd.refSalesOrderID,  \n" +
                "fun_getAssyidByID(cpd.partid) assyId,cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,  \n" +
                "cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,  \n" +
                "fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,      \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,      \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,   \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,   \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.createdAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.createdAt) END  createdAt,   \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.UpdatedAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.UpdatedAt) END  updatedAt  \n" +
                "  \n" +
                "		FROM customer_packingslip cd   LEFT JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND IFNULL(cpd.isdeleted,0)=0    \n" +
                "		LEFT JOIN component c ON c.id=cpd.partid         \n" +
                "		WHERE  cd.isDeleted=0            \n" +
                "	\");              \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN              \n" +
                "        SET pOrderBy = \"ORDER BY packingSlipNumber DESC\";    \n" +
                "	ELSE              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN              \n" +
                "		SET pWhereClause = '1=1' ;              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;              \n" +
                "	ELSE	              \n" +
                "		SET rowNumWhere = '';              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */                 \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                \n" +
                "	EXECUTE query2;                \n" +
                "	DEALLOCATE PREPARE query2;              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
                "	PREPARE query1 FROM @SQLStatement2;                \n" +
                "	EXECUTE query1;                \n" +
                "	DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "UPDATE page_detail SET isDisplay=0 WHERE pageName='Customer Packing';  \n" +
                "UPDATE page_detail SET isAllowAsHomePage=1 WHERE pageName='Manage Customer Packing Slip';  \n" +
                "SELECT pageID INTO @pageID FROM page_detail WHERE pageName='Customer Packing Slip';  \n" +
                "INSERT INTO help_blog(pageID,title,description,`version`,isPublished,createdBy,updatedBy)VALUES  \n" +
                "(@pageID,'Customer Packing Slip','<p>Coming Soon</p>',0,1,1,1);  \n" +
                "UPDATE page_detail SET iconClass='mdi mdi-clipboard-check-outline' WHERE pagename='Customer Packing Slip';  \n" +
                "UPDATE page_detail SET iconClass='icons-manage-shipped' WHERE pagename IN ('Manage Customer Packing Slip','Manage Customer Packing Slip Documents','Manage Customer Packing Slip MISC');  \n" +
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesorderDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesorderDetails`(	      \n" +
                "	IN psoposearch LONGTEXT,  \n" +
                "	IN salesorderID INT  \n" +
                "    )  \n" +
                "BEGIN   \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "CREATE TEMPORARY TABLE IF NOT EXISTS   tempsalesorder AS  \n" +
                " SELECT sd.id FROM salesordermst sd WHERE id IN (SELECT vu.`Sales ORDER ID` FROM vu_salesorder_updatedlist_report vu WHERE vu.`status`='In Progress' AND vu.`Sales Order status`=1) AND sd.`status`=1 AND sd.isdeleted=0;  \n" +
                " SET @pWhereClause=\"1=1\";  \n" +
                " SET @temp_Sproc_GetPendingSOPO=CONCAT(\"  \n" +
                "select so.ID,CONCAT('(',m.mfgcode,')',' ',m.mfgName) customerName,so.salesOrderNumber as `SO#`,so.poNumber as `PO#`,so.customerID,so.billingAddressID,so.shippingAddressID,  \n" +
                "so.shippingMethodID,so.revision,so.shippingcomment,so.soDate,so.poDate,so.freeonBoard,so.intermediateShipmentId,m.mfgcode,so.contactPersonID,  \n" +
                "concat('(',m.mfgcode,')',' ',so.salesOrderNumber,',',so.poNumber) pendingSOPO,m.mfgName from salesordermst so left join  \n" +
                "mfgcodemst m on m.id=so.customerID where so.id in (select id from tempsalesorder) and so.`status`=1 and so.isDeleted=0\");  \n" +
                "  \n" +
                "  IF(salesorderID IS NOT NULL)THEN  \n" +
                "  SET @temp_Sproc_GetPendingSOPO=CONCAT(@temp_Sproc_GetPendingSOPO,' and so.id=',salesorderID);  \n" +
                "  END IF;  \n" +
                "	IF(psoposearch IS NOT NULL)THEN  \n" +
                "	SET @pWhereClause=CONCAT(\"pendingSOPO like '%\",psoposearch,\"%'\");  \n" +
                "	END IF;	  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"select * from ( \", @temp_Sproc_GetPendingSOPO,\" ) c  where \", @pWhereClause);      \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                              \n" +
                "	EXECUTE query1;                              \n" +
                "	DEALLOCATE PREPARE query1;     \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesShippingDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(  \n" +
                "	IN salesorderID INT  \n" +
                "    )  \n" +
                "BEGIN   \n" +
                " SELECT ss.shippingID,ss.sDetId,IFNULL(sd.custPOLineNumber,1) custPOLineNumber,IFNULL(ss.releaseNumber,1) releaseNumber,ss.qty,ss.shippingDate,ss.releaseNotes,sd.tentativeBuild,sd.qty AS poQty,sd.partID,sd.price,sd.lineID,  \n" +
                " c.mfgpn,c.mfgpndescription,c.pidcode,fun_getUnitNameByID(c.uom) unitMeaser,c.nickName,CONCAT(c.pidcode,',',IFNULL(sd.custPOLineNumber,1),',',IFNULL(ss.releaseNumber,1),',',ss.qty,',',DATE_FORMAT(ss.shippingDate, '%m-%d-%y')) shipping,  \n" +
                " (SELECT IFNULL(cpd.shippedQty,0) FROM customer_packingslip_det cpd WHERE refsalesorderdetid=ss.sDetId AND cpd.isdeleted=0) shippedQty  \n" +
                " FROM salesshippingmst ss LEFT JOIN salesorderdet sd ON ss.sDetID=sd.id  \n" +
                "LEFT JOIN component c ON c.id=sd.partid  \n" +
                "WHERE sd.refsalesOrderID=salesorderID AND ss.isdeleted=0 AND ss.sdetid NOT IN (SELECT refsalesorderdetid FROM customer_packingslip_det WHERE remainingQty=0 AND isdeleted=0);  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2741,'2.00','V1',' Customer packing Slip-Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2741:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "select chartRawDataCatID into @chartRawDataCatID from chart_rawdata_category where dbViewName='vu_kit_plan_release_status_report';  \n" +
                "  \n" +
                "UPDATE `chart_rawdata_category_fields` SET `field` = 'kitReturnBy' WHERE (`chartRawdataCatID` = (select @chartRawdataCatID) and displayName='Kit Returned By');  \n" +
                "UPDATE `chart_rawdata_category_fields` SET `field` = 'releasedByName' WHERE (`chartRawdataCatID` = (select @chartRawdataCatID) and displayName='Release By');  \n" +
                "UPDATE `chart_rawdata_category_fields` SET `displayName` = 'Released By' WHERE (`chartRawdataCatID` = (select @chartRawdataCatID) and displayName='Release By');  \n" +
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2742,'2.00','V1',' Kit plan Release report - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2742:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "DROP VIEW IF EXISTS `vu_kit_plan_release_status_report`;  \n" +
                "CREATE VIEW `vu_kit_plan_release_status_report` AS  \n" +
                "    SELECT   \n" +
                "        `a`.`id` AS `id`,  \n" +
                "        `a`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "        `a`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "        `s`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "        `s`.`poNumber` AS `poNumber`,  \n" +
                "        `a`.`refAssyId` AS `refAssyId`,  \n" +
                "        `c`.`PIDCode` AS `assyPIDCode`,  \n" +
                "        `c`.`nickName` AS `assyNickName`,  \n" +
                "        `c`.`mfgPN` AS `assyMFRPN`,  \n" +
                "        `a`.`subAssyID` AS `subAssyID`,  \n" +
                "        `sc`.`PIDCode` AS `subAssyPIDCode`,  \n" +
                "        `sc`.`nickName` AS `subAssyNickName`,  \n" +
                "        `sc`.`mfgPN` AS `subAssyMFRPN`,  \n" +
                "        `sd`.`qty` AS `poQty`,  \n" +
                "        `sd`.`mrpQty` AS `mrpQty`,  \n" +
                "        `sd`.`kitQty` AS `kitQty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`subAssyID` IS NOT NULL) THEN CONCAT(`sd`.`kitNumber`, '+', `sc`.`PIDCode`)  \n" +
                "            ELSE `sd`.`kitNumber`  \n" +
                "        END) AS `kitNumber`,  \n" +
                "        `a`.`planPOQty` AS `planPOQty`,  \n" +
                "        `a`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "        `a`.`poDueDate` AS `poDueDate`,  \n" +
                "        `a`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "        `a`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "        `a`.`materialDockDate` AS `materialDockDate`,  \n" +
                "        `a`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "        `a`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
                "        `a`.`releasedBy` AS `releasedBy`,  \n" +
                "        `a`.`kitReturnBy` AS `kitReturnBy`,  \n" +
                "        FUN_GETUSERNAMEBYID(`a`.`releasedBy`) AS `releasedByName`,  \n" +
                "        `a`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "        `a`.`woID` AS `woID`,  \n" +
                "        FUN_GETWORKORDERNUMBERBYID(`a`.`woID`) AS `workorderNumber`,  \n" +
                "        `a`.`releasedNote` AS `releasedNote`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`kitStatus` = 'R') THEN 'Released'  \n" +
                "            WHEN (`a`.`kitStatus` = 'P') THEN 'In Progress'  \n" +
                "            ELSE '-'  \n" +
                "        END) AS `kitStatus`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`kitReturnStatus` IS NOT NULL) THEN 'Returned'  \n" +
                "            WHEN (`a`.`kitStatus` = 'R') THEN 'Not Returned'  \n" +
                "            ELSE 'N/A'  \n" +
                "        END) AS `kitReturnStatus`,  \n" +
                "        `a`.`kitReturnDate` AS `kitReturnDate`,  \n" +
                "        `a`.`refPlanId` AS `refPlanId`  \n" +
                "    FROM  \n" +
                "        (((((SELECT   \n" +
                "            `s`.`id` AS `id`,  \n" +
                "                `s`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                `s`.`subAssyID` AS `subAssyID`,  \n" +
                "                `s`.`poQty` AS `planPOQty`,  \n" +
                "                `s`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "                `s`.`poDueDate` AS `poDueDate`,  \n" +
                "                `s`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "                `s`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "                `s`.`materialDockDate` AS `materialDockDate`,  \n" +
                "                `s`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "                `s`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
                "                `s`.`releasedBy` AS `releasedBy`,  \n" +
                "                `s`.`kitReturnBy` AS `kitReturnBy`,  \n" +
                "                `s`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "                `s`.`woID` AS `woID`,  \n" +
                "                `s`.`releasedNote` AS `releasedNote`,  \n" +
                "                `s`.`kitStatus` AS `kitStatus`,  \n" +
                "                `s`.`kitReturnStatus` AS `kitReturnStatus`,  \n" +
                "                `s`.`kitReturnDate` AS `kitReturnDate`,  \n" +
                "                `s`.`refPlanId` AS `refPlanId`  \n" +
                "        FROM  \n" +
                "            `salesorder_plan_detailsmst` `s`  \n" +
                "        WHERE  \n" +
                "            (`s`.`isDeleted` = 0) UNION ALL SELECT   \n" +
                "            `s`.`id` AS `id`,  \n" +
                "                `s`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                `kassy`.`partId` AS `subAssyID`,  \n" +
                "                (`kassy`.`perAssyBuildQty` * `s`.`poQty`) AS `planPOQty`,  \n" +
                "                (`kassy`.`perAssyBuildQty` * `s`.`kitReleaseQty`) AS `kitReleaseQty`,  \n" +
                "                `s`.`poDueDate` AS `poDueDate`,  \n" +
                "                `s`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "                `s`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "                `s`.`materialDockDate` AS `materialDockDate`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseKitNumber`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releaseKitNumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`actualKitReleaseDate`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `actualKitReleaseDate`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedBy`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releasedBy`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnBy`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `kitReturnBy`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseTimeFeasibility`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releaseTimeFeasibility`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`woID`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `woID`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedNote`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releasedNote`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitStatus`  \n" +
                "                    ELSE 'P'  \n" +
                "                END) AS `kitStatus`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnStatus`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `kitReturnStatus`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnDate`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `kitReturnDate`,  \n" +
                "                `s`.`refPlanId` AS `refPlanId`  \n" +
                "        FROM  \n" +
                "            (`kit_allocation_assy_detail` `kassy`  \n" +
                "        LEFT JOIN `salesorder_plan_detailsmst` `s` ON (((`s`.`salesOrderDetID` = `kassy`.`refSalesOrderDetID`)  \n" +
                "            AND ISNULL(`s`.`subAssyID`))))  \n" +
                "        WHERE  \n" +
                "            ((`kassy`.`isDeleted` = 0)  \n" +
                "                AND (`kassy`.`bomAssyLevel` = 1)  \n" +
                "                AND (EXISTS( SELECT   \n" +
                "                    'Y'  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sp`  \n" +
                "                WHERE  \n" +
                "                    ((`sp`.`isDeleted` = 0)  \n" +
                "                        AND (`sp`.`refPlanId` = `s`.`id`)  \n" +
                "                        AND (`kassy`.`partId` = `sp`.`subAssyID`)))  \n" +
                "                IS FALSE))) `a`  \n" +
                "        JOIN `salesorderdet` `sd` ON ((`a`.`salesOrderDetID` = `sd`.`id`)))  \n" +
                "        JOIN `salesordermst` `s` ON ((`sd`.`refSalesOrderID` = `s`.`id`)))  \n" +
                "        JOIN `component` `c` ON ((`a`.`refAssyId` = `c`.`id`)))  \n" +
                "        LEFT JOIN `component` `sc` ON ((`a`.`subAssyID` = `sc`.`id`)))  \n" +
                "    WHERE  \n" +
                "  \n" +
                "        ((`a`.`salesOrderDetID` IS NOT NULL)  \n" +
                "            AND (`a`.`refAssyId` IS NOT NULL))  \n" +
                "    ORDER BY `a`.`salesOrderDetID` , `a`.`refAssyId` , `a`.`subAssyID`;  \n" +
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2743,'2.00','V1',' Kit plan Release report - CHARMI '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2743:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveSupplierQuote` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuote`(                                                    \n" +
                "	IN ppageIndex INT(11),                                                    \n" +
                "	IN precordPerPage INT(11),                                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                 \n" +
                "    IN pPartId INT(11),    \n" +
                "    IN pMfgType VARCHAR(255)    \n" +
                ")  \n" +
                "BEGIN                                                    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                 \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;        \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;   \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"              \n" +
                "			SELECT 						      \n" +
                "				s.id,      \n" +
                "                sqpd.id AS supplierQuotePartDetID,        \n" +
                "				fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		      \n" +
                "                fun_getMfgCodeByID(c.mfgcodeID) mfgCode,      \n" +
                "				s.supplierID,      \n" +
                "                sqpd.partID,      \n" +
                "				c.mfgPN AS mfgPN,      \n" +
                "                c.mfgcodeID,      \n" +
                "				sc.mfgPN AS supplierPN,      \n" +
                "				sqpd.supplierPartID,          \n" +
                "                m.mfgName AS supplier,      \n" +
                "                s.quoteNumber,      \n" +
                "                s.quoteDate,      \n" +
                "                s.reference,      \n" +
                "                s.quoteStatus,      \n" +
                "                (                                  \n" +
                "				 CASE  WHEN (s.quoteStatus = 'D') THEN                                   \n" +
                "				   'Draft'                                                                       \n" +
                "				  WHEN (s.quoteStatus = 'P') THEN                                   \n" +
                "				   'Published'                                                                      \n" +
                "				  ELSE                                   \n" +
                "				   ''                                   \n" +
                "				 END                                  \n" +
                "				) AS `statusConvertedValue`,         \n" +
                "                (              \n" +
                "				CASE                                             \n" +
                "					WHEN (`sqpd`.`isActive` = 0) THEN 'Inactive'                                                     \n" +
                "					WHEN (`sqpd`.`isActive` = 1) THEN 'Active'                                             \n" +
                "					ELSE ''                                             \n" +
                "					END              \n" +
                "				) AS `isActiveConvertedValueDetail`,      \n" +
                "                sqpd.isActive,      \n" +
                "                c.isCustom,      \n" +
                "				sc.isCustom AS isCustomSupplier,      \n" +
                "				fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,      \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                          \n" +
                "				fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	      \n" +
                "				fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,       \n" +
                "				fun_getPartAttibutesBySupplierQuoteDetailID(sqpd.id) AS attributesList,      \n" +
                "				fun_getPartPricingCountBySupplierQuoteDetailID(sqpd.id) AS pricingCount,    				  \n" +
                "				fun_getUserNameByID(sqpd.createdBy) createdby,                    \n" +
                "				fun_getUserNameByID(sqpd.updatedBy) updatedby,    \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(sqpd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,	  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(sqpd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,    \n" +
                "				fun_getRoleByID(sqpd.updateByRoleId) updatedbyRole  \n" +
                "  \n" +
                "			FROM      \n" +
                "				supplier_quote_parts_det sqpd	      \n" +
                "			RIGHT JOIN supplier_quote_mst s ON sqpd.supplierQuoteMstID = s.id        \n" +
                "            LEFT JOIN 	component c ON sqpd.partID = c.id AND c.deletedAt IS NULL                          \n" +
                "			LEFT JOIN	component sc ON sqpd.supplierPartID = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL               \n" +
                "            LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.deletedAt IS NULL          \n" +
                "            WHERE      \n" +
                "				sqpd.deletedAt is NULL AND       \n" +
                "                s.deletedAt IS NULL                    				      \n" +
                "	\");                        \n" +
                "  \n" +
                "	IF (pMfgType != '' && pMfgType != NULL && pPartId != NULL) THEN    \n" +
                "		IF(pMfgType = 'MFG' ) THEN    \n" +
                "			SET @temp_Sproc_RetrieveSupplierQuote  = CONCAT(@temp_Sproc_RetrieveSupplierQuote, ' AND sqpd.partID = ', pPartId, ' ');    \n" +
                "		ELSE    \n" +
                "			SET @temp_Sproc_RetrieveSupplierQuote  = CONCAT(@temp_Sproc_RetrieveSupplierQuote, ' AND sqpd.supplierPartID = ', pPartId, ' ');    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;                                                    \n" +
                "	ELSE                                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                    \n" +
                "	END IF;	                                                    \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                    \n" +
                "		SET pWhereClause = '1=1' ;                                                    \n" +
                "	END IF;	                                                    \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                    \n" +
                "	ELSE	                                                    \n" +
                "		SET rowNumWhere = '';                                                    \n" +
                "	END IF;	                                                     \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                 \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuote,\" ) c where 1=1 and \", pWhereClause);                                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                \n" +
                "	EXECUTE query1;                                \n" +
                "	DEALLOCATE PREPARE query1;                              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuote,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                \n" +
                "	EXECUTE query2;                                \n" +
                "	DEALLOCATE PREPARE query2;                             \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveSupplierQuotePartList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuotePartList`(                                                          \n" +
                "	IN pPageIndex INT(11),                                                                    \n" +
                "	IN pRecordPerPage INT(11),                                                                      \n" +
                "	IN pOrderBy VARCHAR(255),                                                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                                          \n" +
                "    IN pSupplierQuoteMstID INT(11)                                                       \n" +
                ")  \n" +
                "BEGIN                                                          \n" +
                "	DECLARE pOffset INT(11);                                                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                      \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);                 \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;        \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;     \n" +
                "	SET @temp_Sproc_RetrieveSupplierQuotePartList=CONCAT(\"      \n" +
                "		SELECT       \n" +
                "        sqpd.id,      \n" +
                "        sqpd.partID,      \n" +
                "        sqpd.supplierPartID,              \n" +
                "        sqpd.supplierQuoteMstID,              \n" +
                "        c.mfgPN AS mfgPN,      \n" +
                "        c.mfgcodeID,      \n" +
                "        sqm.supplierID,      \n" +
                "        fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		              \n" +
                "		fun_getMfgNameByID(sqm.supplierID) supplier,      \n" +
                "        fun_getMfgCodeByID(c.mfgcodeID) mfgCode,      \n" +
                "        fun_getMfgCodeByID(sc.mfgcodeID) supplierCode,      \n" +
                "        sc.mfgPN AS supplierPN,      \n" +
                "        sqpd.isActive,      \n" +
                "        (              \n" +
                "				CASE                                             \n" +
                "					WHEN (`sqpd`.`isActive` = 0) THEN 'Inactive'                                                     \n" +
                "					WHEN (`sqpd`.`isActive` = 1) THEN 'Active'                                             \n" +
                "					ELSE ''                                             \n" +
                "				END              \n" +
                "			) AS `isActiveConvertedValue`,      \n" +
                "        c.isCustom,      \n" +
                "        sc.isCustom AS isCustomSupplier,      \n" +
                "		fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,      \n" +
                "        fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                          \n" +
                "        fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	      \n" +
                "        fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,                   \n" +
                "        fun_getPartAttibutesBySupplierQuoteDetailID(sqpd.id) AS attributesList,      \n" +
                "        fun_getPartPricingCountBySupplierQuoteDetailID(sqpd.id) AS pricingCount,      \n" +
                "        fun_getUserNameByID(sqpd.createdBy) createdby,                    \n" +
                "		fun_getUserNameByID(sqpd.updatedBy) updatedby,              								                 \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(sqpd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,	  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(sqpd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,    \n" +
                "        fun_getRoleByID(sqpd.updateByRoleId) updatedbyRole  \n" +
                "    FROM		supplier_quote_parts_det sqpd                                    \n" +
                "	LEFT JOIN 	supplier_quote_mst sqm ON sqpd.supplierQuoteMstID = sqm.id AND sqm.deletedAt IS NULL                          \n" +
                "	LEFT JOIN 	component c ON sqpd.partID = c.id AND c.deletedAt IS NULL                          \n" +
                "	LEFT JOIN	component sc ON sqpd.supplierPartID = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL                              \n" +
                "	WHERE   sqpd.supplierQuoteMstID = \",pSupplierQuoteMstID,\"                                                           \n" +
                "	AND 	sqpd.deletedAt IS NULL                                                             \n" +
                "    \");      \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                                                                    \n" +
                "	ELSE                                                                    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                    \n" +
                "	END IF;	                                                                    \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                    \n" +
                "		SET pWhereClause = '1=1' ;                                                                    \n" +
                "	END IF;	                                                            \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                     \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                    \n" +
                "	ELSE	                                                                    \n" +
                "		SET rowNumWhere = '';                                                                    \n" +
                "	END IF;	          \n" +
                "  \n" +
                "  \n" +
                "    /* to get total count of rows */                                 \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuotePartList,\" ) c where 1=1 and \", pWhereClause);                          	           \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                \n" +
                "	EXECUTE query1;                                \n" +
                "	DEALLOCATE PREPARE query1;                        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuotePartList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                \n" +
                "	EXECUTE query2;                                \n" +
                "	DEALLOCATE PREPARE query2;            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveSupplierQuotePartPricingHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuotePartPricingHistory`(                                                      \n" +
                "	IN pSupplierQuotePartDetID INT(11),                                                      \n" +
                "	IN ppageIndex INT(11),                                                      \n" +
                "	IN precordPerPage INT(11),                                                      \n" +
                "	IN pOrderBy VARCHAR(255),                                                      \n" +
                "	IN pWhereClause VARCHAR(16383)                   \n" +
                ")  \n" +
                "BEGIN                                                      \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                                                      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                 \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                 \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;        \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;   \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveSupplierQuotePartPricingHistory = CONCAT(\"                \n" +
                "			SELECT 						        \n" +
                "				s.id,        \n" +
                "                s.refSupplierQuotePartDetID,      \n" +
                "                s.itemNumber,      \n" +
                "                s.colName,      \n" +
                "                s.oldVal,      \n" +
                "                s.newVal,                  \n" +
                "				fun_getUserNameByID(s.updatedBy) updatedBy,              			  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "			FROM        \n" +
                "				supplier_quote_part_price_history s	  		      \n" +
                "            WHERE        \n" +
                "				s.refSupplierQuotePartDetID =\",pSupplierQuotePartDetID,\"      \n" +
                "	\");                            \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;                                                      \n" +
                "	ELSE                                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                      \n" +
                "	END IF;	                                                      \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                      \n" +
                "		SET pWhereClause = '1=1' ;                                                      \n" +
                "	END IF;	                                                      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                      \n" +
                "	ELSE	                                                      \n" +
                "		SET rowNumWhere = '';                                                      \n" +
                "	END IF;	                                                       \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                   \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuotePartPricingHistory,\" ) c where 1=1 and \", pWhereClause);                            	       \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                  \n" +
                "	EXECUTE query1;                                  \n" +
                "	DEALLOCATE PREPARE query1;                                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuotePartPricingHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "	EXECUTE query2;                                  \n" +
                "	DEALLOCATE PREPARE query2;                               \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2744,'2.00','V1',' Supplier Quote - Dharmesh P'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2744:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "ALTER TABLE customer_packingslip MODIFY COLUMN packingSlipDate DATE NOT NULL;  \n" +
                "ALTER TABLE customer_packingslip MODIFY COLUMN soDate DATE NOT NULL;  \n" +
                "ALTER TABLE customer_packingslip MODIFY COLUMN poDate DATE NOT NULL;  \n" +
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_saveSalesCommissionDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_saveSalesCommissionDetails`(	                                                            \n" +
                "	IN prfqGroupID INT(11),   \n" +
                "	IN ppartid INT,  \n" +
                "	IN pqty INT,  \n" +
                "	IN pprice DECIMAL(16,6) ,  \n" +
                "	IN puserID INT,  \n" +
                "	IN psalesDetailID INT,  \n" +
                "	IN prefQtyTurnTimeID INT  \n" +
                "    )  \n" +
                "BEGIN    \n" +
                " DECLARE pstatus INT;  \n" +
                " DECLARE pAssyID INT;  \n" +
                " DECLARE pmaterialUnitPrice DECIMAL(16,6);  \n" +
                " DECLARE plaborUnitPrce DECIMAL(16,6);  \n" +
                " DECLARE prefQuoteID INT;  \n" +
                " DECLARE ptotalmaterialcost DECIMAL(16,6);  \n" +
                " DECLARE ptotalcustompartcost DECIMAL(16,6);  \n" +
                "IF(prfqGroupID IS NOT NULL)THEN                                                          \n" +
                "  \n" +
                "        SELECT ra.status,ra.id INTO pstatus,pAssyID FROM rfq_assemblies ra WHERE ra.partID=ppartID AND ra.rfqrefID=prfqGroupID AND ra.isDeleted=0;  \n" +
                "	IF(pstatus=2 OR pstatus=3)THEN  \n" +
                "		UPDATE rfq_assemblies SET `status`=3, winprice=pprice,winquantity=pqty,reason='Auto',quoteclosedDate=CURRENT_TIMESTAMP ,quoteclosedby=puserID,quoteFinalStatus=4,  \n" +
                "		updatedBy=puserID  \n" +
                "		WHERE partID=ppartID AND rfqrefID=prfqGroupID AND isDeleted=0;  \n" +
                "	END IF;  \n" +
                "	IF(SELECT COUNT(1) FROM salesorderdet_commission_attribute WHERE partid=ppartid AND refSalesorderdetID=psalesDetailID)=0 THEN  \n" +
                "		IF(pAssyID IS NOT NULL)THEN  \n" +
                "			SELECT unitprice,laborunitPrice,id INTO pmaterialUnitPrice,plaborUnitPrce,prefQuoteID FROM rfq_assy_quotations WHERE rfqAssyID=pAssyID AND rfqAssyQtyTurnTimeID=prefQtyTurnTimeID AND isDeleted=0  ORDER BY id DESC LIMIT 1;  \n" +
                "			-- material detail insert  \n" +
                "			IF(prefQuoteID IS NOT NULL) THEN  \n" +
                "				IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf   \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND rad.refCustomPartQuoteID IS NULL AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN  \n" +
                "  \n" +
                "					IF(pmaterialUnitPrice IS NOT NULL AND pmaterialUnitPrice>0)THEN  \n" +
                "  \n" +
                "					INSERT INTO salesorderdet_commission_attribute(refSalesorderdetID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,  \n" +
                "					org_commissionPercentage,org_commissionValue,createdBy,updatedBy,partid,category)  \n" +
                "  \n" +
                "					SELECT psalesDetailID,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid,prefQuoteID,rad.refCustomPartQuoteID,1),rad.quotechargedynamicfieldid,rad.percentage,rad.amount,rad.percentage,rad.amount,puserID,puserID,ppartID,qdf.costingType FROM rfq_assy_quotations_additionalcost rad   \n" +
                "					INNER JOIN quotecharges_dynamic_fields_mst qdf   \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND  rad.refCustomPartQuoteID IS NULL  AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0;  \n" +
                "  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf   \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id=rad.refCustomPartQuoteID  \n" +
                "					WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1   \n" +
                "					AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN  \n" +
                "  \n" +
                "					INSERT INTO salesorderdet_commission_attribute(refSalesorderdetID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,  \n" +
                "					org_commissionPercentage,org_commissionValue,createdBy,updatedBy,partid,category)  \n" +
                "  \n" +
                "					SELECT psalesDetailID,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid,prefQuoteID,rad.refCustomPartQuoteID,2),rad.quotechargedynamicfieldid,rad.percentage,rad.amount,rad.percentage,rad.amount,puserID,  \n" +
                "					puserID,ppartID,fun_getAssyPIDCodeByID(rac.mfgPNID)   \n" +
                "					FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf   \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id=rad.refCustomPartQuoteID  \n" +
                "					WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1   \n" +
                "					AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0;  \n" +
                "  \n" +
                "  \n" +
                "				END IF;  \n" +
                "				-- IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf   \n" +
                "				-- 	ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' and rad.isdeleted=0)>0 THEN  \n" +
                "				-- 	if(prefQuoteID is not null)then  \n" +
                "				-- 		SELECT ifnull(materialCost,0) INTO ptotalmaterialcost FROM rfq_assy_quotations WHERE rfqAssyID=pAssyID AND rfqAssyQtyTurnTimeID=prefQtyTurnTimeID AND isDeleted=0  ORDER BY id DESC LIMIT 1;					  \n" +
                "				-- 	SELECT IFNULL(SUM(totalprice),0) into ptotalcustompartcost FROM rfq_assy_quotations_customparts where rfqAssyQuoteId=prefQuoteID and isdeleted=0;  \n" +
                "				-- 	set @totalPrice=ptotalmaterialcost+ptotalcustompartcost;  \n" +
                "				-- 	if(@totalPrice>0)then  \n" +
                "				-- 	INSERT INTO salesorderdet_commission_attribute(refSalesorderdetID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,  \n" +
                "				-- 	org_commissionPercentage,org_commissionValue,createdBy,updatedBy,partid,category)  \n" +
                "  \n" +
                "				-- 	SELECT psalesDetailID,@totalPrice,rad.quotechargedynamicfieldid,rad.percentage,rad.amount,rad.percentage,rad.amount,puserID,puserID,ppartID,qdf.costingType FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf   \n" +
                "				-- 	ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' and rad.isdeleted=0;  \n" +
                "				-- 	end if;  \n" +
                "				-- 	end if;  \n" +
                "				-- END IF;  \n" +
                "				IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf   \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0)>0 THEN  \n" +
                "					IF(plaborUnitPrce IS NOT NULL AND plaborUnitPrce>0)THEN  \n" +
                "					INSERT INTO salesorderdet_commission_attribute(refSalesorderdetID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,  \n" +
                "					org_commissionPercentage,org_commissionValue,createdBy,updatedBy,partid,category)  \n" +
                "  \n" +
                "					SELECT psalesDetailID,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid,prefQuoteID,rad.refCustomPartQuoteID,3),rad.quotechargedynamicfieldid,rad.percentage,rad.amount,rad.percentage,rad.amount,puserID,puserID,ppartID,qdf.costingType FROM rfq_assy_quotations_additionalcost rad   \n" +
                "					INNER JOIN quotecharges_dynamic_fields_mst qdf   \n" +
                "					ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=prefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0;  \n" +
                "  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END IF;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "DELETE FROM table_mapping_details WHERE display_page_name='Shipping Records';  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_shippedassembly` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_shippedassembly`(    \n" +
                "	IN tableName VARCHAR(255),    \n" +
                "	IN IDs LONGTEXT,    \n" +
                "	IN deletedBy INT,    \n" +
                "	IN entityID VARCHAR(255),    \n" +
                "	IN refrenceIDs LONGTEXT,    \n" +
                "	IN countList INT,    \n" +
                "    IN pRoleID INT    \n" +
                "    )  \n" +
                "BEGIN             \n" +
                "       DROP TEMPORARY TABLE IF EXISTS tempshippedassembly;  \n" +
                "   SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempshippedassembly as         \n" +
                "       (SELECT 0 as cnt,0 as msg FROM shippedassembly WHERE id IN(',IDs,') LIMIT 1)                  \n" +
                "       ');          \n" +
                "            PREPARE stmt FROM @SQL;                                                                    \n" +
                "	    EXECUTE stmt;   \n" +
                "  \n" +
                "IF(countList=FALSE) THEN     \n" +
                "  \n" +
                "	IF (SELECT SUM(t.cnt) FROM tempshippedassembly t)=0 THEN          \n" +
                "         SET @SQl1 = CONCAT('update shippedassembly set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN (',IDs,') and deletedAt is NULL');  \n" +
                "  \n" +
                "		PREPARE stmt1 FROM @SQL1;                                                                  \n" +
                "		EXECUTE stmt1;                                                          \n" +
                "  \n" +
                "		/* [S] - Add Time line log for delete shipped assembly */                                                           \n" +
                "		SELECT GROUP_CONCAT(shippedqty) , workorderID  INTO @lvShippedqty,@lvWoID                                                          \n" +
                "		FROM shippedassembly                                                          \n" +
                "		WHERE FIND_IN_SET(id,IDs);                                                          \n" +
                "  \n" +
                "		SELECT woNumber INTO @lvWoNumber FROM workorder WHERE woID = @lvWoID ;                                                          \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Shipped assembly deleted\");                                                            \n" +
                "		SET @lvEventDescription = CONCAT(\"Shipped assembly for workorder \\\"\",@lvWoNumber,\"\\\" & quantity \\\"\",@lvShippedqty ,\"\\\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                            \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,9,NULL,deletedBy,3);  /* 3 = DELETE */                                                            \n" +
                "		/* [E] - Add Time line log for delete shipped assembly */           \n" +
                "  \n" +
                "                SELECT * FROM tempshippedassembly WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";                                                                    \n" +
                "		ELSE                                                                  \n" +
                "		      SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempshippedassembly t;            \n" +
                "              END IF;          \n" +
                "ELSE        \n" +
                "                  SELECT t1.cnt,t2.display_page_name AS msg        \n" +
                "                                   FROM tempshippedassembly t1        \n" +
                "                                    INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name        \n" +
                "                                    WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"        \n" +
                "                                    ORDER BY t2.display_page_name;                      \n" +
                "END IF;                                                                 \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesShippingDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(    \n" +
                "	IN salesorderID INT ,  \n" +
                "	IN packingSlipID INT   \n" +
                "    )  \n" +
                "BEGIN     \n" +
                " SELECT ss.shippingID,ss.sDetId,IFNULL(sd.custPOLineNumber,1) custPOLineNumber,IFNULL(ss.releaseNumber,1) releaseNumber,ss.qty,ss.shippingDate,  \n" +
                " ss.releaseNotes,sd.tentativeBuild,sd.qty AS poQty,sd.partID,sd.price,sd.lineID,    \n" +
                " c.mfgpn,c.mfgpndescription,c.pidcode,fun_getUnitNameByID(c.uom) unitMeaser,c.nickName,  \n" +
                " CONCAT(c.pidcode,',',IFNULL(sd.custPOLineNumber,1),',',IFNULL(ss.releaseNumber,1),',',ss.qty,',',DATE_FORMAT(ss.shippingDate, '%m-%d-%y')) shipping,    \n" +
                " (SELECT IFNULL(cpd.shippedQty,0) FROM customer_packingslip_det cpd WHERE refsalesorderdetid=ss.sDetId AND cpd.isdeleted=0) shippedQty    \n" +
                " FROM salesshippingmst ss LEFT JOIN salesorderdet sd ON ss.sDetID=sd.id    \n" +
                "LEFT JOIN component c ON c.id=sd.partid    \n" +
                "WHERE sd.refsalesOrderID=salesorderID AND ss.isdeleted=0 AND ss.sdetid NOT IN   \n" +
                "(SELECT cpd.refsalesorderdetid FROM customer_packingslip_det cpd WHERE cpd.remainingQty=0 AND cpd.refCustPackingSlipID!=packingSlipID  AND cpd.isdeleted=0);    \n" +
                "  \n" +
                "END;  \n" +
                "DROP FUNCTION IF EXISTS `fun_getAssyidByID` ;  \n" +
                "CREATE FUNCTION `fun_getAssyidByID`(      \n" +
                "	ppartID INT) RETURNS VARCHAR(50) CHARSET utf8mb4  \n" +
                "BEGIN      \n" +
                "	DECLARE result NVARCHAR(50);     \n" +
                "	SELECT PIDCode INTO result FROM component WHERE id = ppartID     \n" +
                "	AND IFNULL(category,0) = 3;      \n" +
                "  \n" +
                "	RETURN result;      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2745,'2.00','V1',' Customer packing slip-champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2745:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-08-2020 *********************************** */
                "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `iconClass`, `isActive`,  \n" +
                "				`createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`)   \n" +
                "VALUES ('Manage Operating Temperature Conversion', '0', '0', 'app.manageoperatingtemperatureconversion', '/detail', 'Add Operating Temperature Conversion',  \n" +
                "		(select p.pageID from page_detail p where p.menuRoute = 'setting.partmaintenance.operatingtemperatureconversion'),   \n" +
                "        '0', 'icons-operating-temperature-conversion1', '1', '1', '0', '1', 'Operating Temperature Conversion', '0');  \n" +
                "  \n" +
                "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `iconClass`, `isActive`,  \n" +
                "				`createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`)   \n" +
                "VALUES ('Manage Calibration Details', '0', '0', 'app.managecalibrationdetails', '/detail', 'Add Calibration Details',  \n" +
                "		(select p.pageID from page_detail p where p.menuRoute = 'setting.equipmentSpecialTools.calibrationdetails'),   \n" +
                "        '0', 'icon-puzzle', '1', '1', '0', '1', 'Calibration Details', '0');  \n" +
                /* **************************** Add Script Version -> 07-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2746,'2.00','V1','created Menu Entry - Ashish '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2746:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 07-07-2020 *********************************** */
                "CREATE TABLE `rfq_assembly_trans_history` (  \n" +
                "  `id` int(11) NOT NULL AUTO_INCREMENT,  \n" +
                "  `rfqAssyID` int(11) DEFAULT NULL,  \n" +
                "  `checkinTime` datetime DEFAULT NULL,  \n" +
                "  `checkoutTime` datetime DEFAULT NULL,  \n" +
                "  `userID` int(11) DEFAULT NULL,  \n" +
                "  `totalTime` int(11) DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `updatedAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `createByRoleId` int(11) DEFAULT NULL,  \n" +
                "  `updateByRoleId` int(11) DEFAULT NULL,  \n" +
                "  `deleteByRoleId` int(11) DEFAULT NULL,  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  KEY `FK_rfq_assembly_trans_history_userID` (`userID`),  \n" +
                "  KEY `FK_rfq_assembly_trans_history_rfqAssyID` (`rfqAssyID`),  \n" +
                "  CONSTRAINT `FK_rfq_assembly_trans_history_rfqAssyID` FOREIGN KEY (`rfqAssyID`) REFERENCES `rfq_assemblies` (`id`),  \n" +
                "  CONSTRAINT `FK_rfq_assembly_trans_history_userID` FOREIGN KEY (`userID`) REFERENCES `users` (`id`)  \n" +
                ");  \n" +
                /* **************************** Add Script Version -> 07-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2747,'2.00','V1','Start Stop Costing activity related change - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2747:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 07-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),                      \n" +
                "    IN pEmployeeID INT(11),          \n" +
                "	IN pCustomerIds VARCHAR(16383),    \n" +
                "	IN pAssyTypeIds VARCHAR(16383),              \n" +
                "	IN pRfqTypeIds VARCHAR(16383),              \n" +
                "	IN pJobTypeIds VARCHAR(16383),              \n" +
                "	IN pAssyIds VARCHAR(16383),             \n" +
                "	IN pAssyNicknameIds LONGTEXT,         \n" +
                "    IN pIsExportControlled TINYINT(1),          \n" +
                "    IN pIsQuoteOverdue TINYINT(1),          \n" +
                "    IN pIsSubAssemblyBOMs TINYINT(1),          \n" +
                "    IN pIsPriceGroupQuoteAssembly TINYINT(1),    \n" +
                "     IN pFromDate DATE,              \n" +
                "    IN pToDate DATE,    \n" +
                "    IN pOlderThenDays int(11)          \n" +
                "    )  \n" +
                "BEGIN                  \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;         \n" +
                "	DECLARE vTextAngularKeyCode VARCHAR(500);          \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);             \n" +
                "    DECLARE vTimeZone VARCHAR(50);             \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;              \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;           \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "  		SET pWhereClause = '1=1' ;    \n" +
                "	END IF;          \n" +
                "  \n" +
                "    IF(pCustomerIds IS NOT NULL AND pCustomerIds != '') THEN                   \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (', pCustomerIds, ') ');                  \n" +
                "	END IF;         \n" +
                "  \n" +
                "	IF(pAssyTypeIds IS NOT NULL AND pAssyTypeIds != '') THEN                   \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assemblyTypeID in (', pAssyTypeIds, ') ');                  \n" +
                "	END IF;         \n" +
                "  \n" +
                "	IF(pRfqTypeIds IS NOT NULL AND pRfqTypeIds != '') THEN                   \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND RFQTypeID in (', pRfqTypeIds, ') ');                  \n" +
                "	END IF;         \n" +
                "  \n" +
                "    IF(pJobTypeIds IS NOT NULL AND pJobTypeIds != '') THEN                   \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND jobTypeID in (', pJobTypeIds, ') ');                  \n" +
                "	END IF;          \n" +
                "  \n" +
                "     IF(pAssyIds IS NOT NULL AND pAssyIds != '') THEN                   \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND partID in (', pAssyIds, ') ');                  \n" +
                "	 END IF;          \n" +
                "  \n" +
                "     IF(pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN          \n" +
                "		SET pWhereClause=CONCAT(pWhereClause,' and partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' ))');          \n" +
                "	 END IF;     \n" +
                "  \n" +
                "	if (pFromDate is not null and pToDate is not null) then    \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND        \n" +
                "		   (CASE      \n" +
                "			WHEN rfq_statusID = 1 THEN      \n" +
                "				DATE(quoteDueDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")    \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN      \n" +
                "				DATE(quoteSubmitDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")    \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN      \n" +
                "				DATE(quoteClosedDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")    \n" +
                "		    END)');          \n" +
                "	end if;    \n" +
                "  \n" +
                "	if(pOlderThenDays is not null) then    \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND     \n" +
                "		 (CASE      \n" +
                "			WHEN rfq_statusID = 1 THEN      \n" +
                "				DATEDIFF(fun_DatetimetoUTCDateTime(), quoteDueDate) > ',pOlderThenDays,'    \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN      \n" +
                "				DATEDIFF(fun_DatetimetoUTCDateTime(), quoteSubmitDate) > ',pOlderThenDays,'    \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN      \n" +
                "				DATEDIFF(fun_DatetimetoUTCDateTime(), quoteClosedDate) > ',pOlderThenDays,'    \n" +
                "		    END)    \n" +
                "  \n" +
                "		');    \n" +
                "	end if;    \n" +
                "  \n" +
                "	IF pIsQuoteOverdue = 1 THEN     		              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND        \n" +
                "        (CASE      \n" +
                "        WHEN rfq_statusID = 1 THEN      \n" +
                "				quoteDueDate < fun_DatetimetoUTCDateTime()       \n" +
                "         WHEN (rfq_statusID = 2 OR rfq_statusID = 3 ) THEN      \n" +
                "				quoteSubmitDate > quoteDueDate       \n" +
                "		WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN      \n" +
                "				quoteClosedDate	> quoteDueDate		      \n" +
                "            END)');          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF pIsSubAssemblyBOMs = 1 THEN           \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assyLevel > 1');          \n" +
                "	END IF;         \n" +
                "  \n" +
                "    /* IF pIsPriceGroupQuoteAssembly = 1 THEN           \n" +
                "		SET pWhereClause = concat(pWhereClause, ' AND assyLevel > 1');          \n" +
                "	END IF; */        \n" +
                "  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();    \n" +
                "	/* DECLARE SQLStatement varchar(255); */    \n" +
                "   #DROP TEMPORARY TABLE IF EXISTS Results;    \n" +
                "    SET @temp_Sproc_GetRFQList = CONCAT(\"SELECT (select COUNT(1) from rfq_lineitems rl where rl.partID = ra.partID and rl.isDeleted = 0) AS lineItemCount, rf.id, ra.partID,    \n" +
                "			count(1) over (partition by rf.id) AS quoteGroupAssyCount,      \n" +
                "            fun_getUserNameByEmployeID(rf.salesCommissionTo) salesCommissionTo,    \n" +
                "            (select count(1) from rfq_price_group rpg where refRFQID = rf.id and rpg.isDeleted = 0) priceGroupCount,        \n" +
                "            fun_getExportControlDetailFromPartID(ra.partID) as isExportControl,          \n" +
                "			#(SELECT COUNT(1) FROM rfq_assemblies WHERE rfqrefID = rf.id AND isDeleted = 0) AS quoteGroupAssyCount,    \n" +
                "			(SELECT MAX(pr.`level`)+1 FROM part_sub_assy_relationship pr WHERE pr.partID = ra.partID AND isDeleted = 0) AS assyLevel,    \n" +
                "			(SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id AND quoteNumber IS NOT NULL) AS revisedQuoteCount,    \n" +
                "			(SELECT max(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id) AS lastQuoteID, ra.isSummaryComplete,    \n" +
                "			part.PIDCode,part.isCustom,part.RoHSStatusID, part.mfgPN, part.custAssyPN, part.mfgPNDescription,part.rev,part.assyCode,part.nickName,ro.rohsIcon,    \n" +
                "			fun_getUserNameByEmployeID(rf.employeeID) AS rfqCreatedBy,    \n" +
                "			fun_getUserNameByID(ra.Updatedby) AS rfqModifiedBy,    \n" +
                "			part.liveVersion AS liveInternalVersion,    \n" +
                "			(SELECT fun_getBomProgressBar(IFNULL(ra.partID,0))) AS bomProgress,    \n" +
                "			(SELECT fun_getMaterialProgress(ra.id))AS materialProgress,    \n" +
                "			(CASE WHEN (SELECT fun_getCustomPartProgress(ra.id)) = -1 THEN 'N/A' ELSE (SELECT fun_getCustomPartProgress(ra.id)) END)AS customPartProgress,    \n" +
                "			(CASE WHEN ra.status = 1 THEN 'In Progress'    \n" +
                "				  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'    \n" +
                "				  WHEN ra.status = 3 THEN 'Won'        \n" +
                "				  WHEN ra.status = 4 THEN 'Lost'    \n" +
                "				  WHEN ra.status = 5 THEN 'Canceled' END) `status` ,    \n" +
                "			ra.status rfq_statusID,  \n" +
                "			(CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending'    \n" +
                "					WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote'    \n" +
                "					WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'    \n" +
                "					WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,    \n" +
                "			ro.name AS `rohsComplientConvertedValue`,    \n" +
                "			(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'    \n" +
                "				WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,    \n" +
                "			(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'    \n" +
                "				WHEN (`ra`.`timePeriod` = 1) THEN 'W'    \n" +
                "				WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,ra.jobTypeID,ra.assemblyTypeID,ra.RFQTypeID,        \n" +
                "			fun_getjobTypeByID(ra.jobTypeID) AS JobType, fun_getrfqTypeByID(ra.RFQTypeID) AS OrderType, CONCAT('(',cu.mfgCode,') ',cu.mfgName) AS Customer, cu.id customerID,    \n" +
                "			fun_getUserNameByID(ra.quoteSubmittedBy) AS RFQ_SubmitedBy, ra.winPrice,ra.winQuantity,    \n" +
                "			ra.quoteInDate, cast(ra.quoteDueDate as DATE) as quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,    \n" +
                "			part.isActivityStart, fun_getMfgCodeByPartID(ra.partID) customerCode,  \n" +
                "			(CASE WHEN part.isActivityStart THEN u.username ELSE '' END )AS username, part.activityStartBy,  \n" +
                "			TIMESTAMPDIFF(SECOND, part.activityStartAt,fun_DatetimetoUTCDateTime()) activityStartAt,   \n" +
                "            ra.isActivityStart as isCostingActivityStart, (CASE WHEN ra.isActivityStart THEN ur.username ELSE '' END )AS costingUserName, ra.activityStartBy as costingActivityBy,  \n" +
                "			TIMESTAMPDIFF(SECOND, ra.activityStartAt,fun_DatetimetoUTCDateTime()) costingActivityStartAt,   \n" +
                "			ra.isBOMVerified,fun_getTextAngularData(ra.reason,'\",vTextAngularKeyCode,\"') reason, fun_getUserNameByID(ra.quoteClosedBy) AS RFQ_ClosedBy,ra.quoteClosedDate,                               \n" +
                "            fun_getUserNameByID(ra.updatedBy) updatedby,                        \n" +
                "			fun_getUserNameByID(ra.createdBy) createdby,                         \n" +
                "			fun_getRoleByID(ra.createByRoleId) createdbyRole,                        \n" +
                "			fun_getRoleByID(ra.updateByRoleId) updatedbyRole,                        \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                        \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,                       \n" +
                "			fun_getRfqLabourPercentage(ra.id) laborPercentage                        \n" +
                "		FROM rfqforms rf    \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND ra.isdeleted = 0    \n" +
                "        LEFT OUTER JOIN users ur ON  ur.id = ra.activityStartBy    \n" +
                "		JOIN mfgcodemst cu ON cu.id = rf.customerId AND cu.isdeleted = 0    \n" +
                "		JOIN component part ON part.id = ra.partID AND part.category = 3 AND part.isdeleted = 0    \n" +
                "		JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0    \n" +
                "		LEFT OUTER JOIN users u ON  u.id = part.activityStartBy    \n" +
                "		WHERE rf.isdeleted = 0                      \n" +
                "        and (case when (select count(1) from employee_mfg_mapping where employeeId = \",pEmployeeID,\" and isDeleted = 0) > 0 then                       \n" +
                "		exists (select 1 from employee_mfg_mapping where mfgCodeId =  cu.id and employeeId = \",pEmployeeID,\" and isDeleted = 0)                      \n" +
                "		else 1=1 end)                      \n" +
                "        \");    \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"quoteDueDate DESC\") ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF pIsExportControlled = 1  AND pIsPriceGroupQuoteAssembly = 1 THEN           \n" +
                "		SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\" AND priceGroupCount > 1 ');          \n" +
                "	ELSEIF pIsExportControlled = 1 THEN        \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\"');              \n" +
                "	ELSEIF pIsExportControlled = 0 AND pIsPriceGroupQuoteAssembly = 1 THEN        \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having priceGroupCount > 0 ');                \n" +
                "	END IF;        \n" +
                "	/* to get total count of rows */       \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause);		    \n" +
                "			PREPARE query2 FROM @SQLStatement2;      \n" +
                "			EXECUTE query2;      \n" +
                "			DEALLOCATE PREPARE query2;    \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetRFQList,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                          			                        			     \n" +
                "			PREPARE query1 FROM @SQLStatement2;      \n" +
                "			EXECUTE query1;      \n" +
                "			DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_costingStartStopActivity`;  \n" +
                "CREATE PROCEDURE `Sproc_costingStartStopActivity`(              \n" +
                "	IN prfqAssyID int,              \n" +
                "	IN pUserId INT,              \n" +
                "	IN pIsActivityStart TINYINT          \n" +
                "    )  \n" +
                "BEGIN              \n" +
                "	DECLARE updatedUserID INT;       \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION            \n" +
                "	BEGIN              \n" +
                "		ROLLBACK;          \n" +
                "		RESIGNAL;          \n" +
                "	END;          \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                        \n" +
                "	BEGIN                        \n" +
                "		ROLLBACK;                        \n" +
                "		RESIGNAL;                        \n" +
                "	END;	          \n" +
                "	START TRANSACTION;          \n" +
                "  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() INTO @pCurrentTime;     \n" +
                "	IF( SELECT COUNT(1) FROM rfq_assemblies WHERE id = prfqAssyID AND isActivityStart = 1 > 0) THEN    \n" +
                "		SELECT activityStartBy INTO updatedUserID FROM rfq_assemblies WHERE id = prfqAssyID AND isActivityStart = 1;   \n" +
                "	END IF;   \n" +
                "    	IF updatedUserID IS NULL THEN     \n" +
                "			SET updatedUserID = pUserId;   \n" +
                "		END IF;    \n" +
                "	IF pIsActivityStart THEN     \n" +
                "		UPDATE rfq_assemblies SET    \n" +
                "			isActivityStart = pIsActivityStart,    \n" +
                "			activityStartBy = pUserId,    \n" +
                "			activityStartAt = @pCurrentTime    \n" +
                "		WHERE id = prfqAssyID;    \n" +
                "  \n" +
                "	# insert record in history for start activity  \n" +
                "		INSERT INTO rfq_assembly_trans_history   \n" +
                "        (`rfqAssyID`, `checkinTime`, `userID`, `createdBy`)   \n" +
                "        VALUES(prfqAssyID, @pCurrentTime, pUserId, pUserId);    \n" +
                "	ELSE     \n" +
                "		UPDATE rfq_assemblies SET    \n" +
                "			isActivityStart = pIsActivityStart,    \n" +
                "			activityStartBy = pUserId,    \n" +
                "			activityStopAt = @pCurrentTime    \n" +
                "		WHERE id = prfqAssyID;    \n" +
                "  \n" +
                "        SELECT a.id, a.checkinTime INTO @pid, @pcheckinTime FROM rfq_assembly_trans_history a WHERE a.rfqAssyID = prfqAssyID AND a.isDeleted = FALSE ORDER BY id DESC LIMIT 1;    \n" +
                "	# update transaction time on stop activity  \n" +
                "        UPDATE rfq_assembly_trans_history SET     \n" +
                "			checkoutTime = @pCurrentTime,    \n" +
                "			totalTime = TIMESTAMPDIFF(SECOND, @pcheckinTime,@pCurrentTime),          \n" +
                "			updatedBy = pUserId,    \n" +
                "			updatedAt = @pCurrentTime    \n" +
                "			 WHERE id = @pid;    \n" +
                "    END IF;    \n" +
                "	COMMIT;          \n" +
                "	SELECT updatedUserID;    \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetQuoteSummaryDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetQuoteSummaryDetails`(                  \n" +
                "	IN prfqAssyID INT(11),                  \n" +
                "    IN pAssyQuoteSubmittedID INT(11)                  \n" +
                "    )  \n" +
                "BEGIN                  \n" +
                "  \n" +
                "  DECLARE vTextAngularKeyCode VARCHAR(500);                \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();                 \n" +
                "		# select list for quote summary details of last submitted quote                  \n" +
                "			SELECT unitPrice, qty, turnTime,priceGroup,                 \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN CEILING(7*(turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))                  \n" +
                "            WHEN qo.turnType = 'D' THEN turntime                  \n" +
                "            WHEN qo.turnType = 'W' THEN (turntime*7) END) turntimedays,                  \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN 'Business Days'                  \n" +
                "            WHEN qo.turnType = 'D' THEN 'Week Days'                  \n" +
                "            WHEN qo.turnType = 'W' THEN 'Week' END) turnType,                  \n" +
                "            qo.excessMaterialCost, qo.extendedCost, (qo.nreCost + qo.toolingCost) nreCost ,(qo.nreDays + qo.toolingDays) nreDays, qo.nretoolingdescription,                  \n" +
                "            qo.additionalCost,qo.materialCost,qo.materialLeadTime,qo.laborCost,qo.laborLeadTime,qo.customItemLeadTime,qo.totalLeadTime                  \n" +
                "			FROM rfq_assy_quote_submitted_assydetail qo                  \n" +
                "			JOIN rfq_assemblies_quotation_submitted sb ON sb.id = qo.refSubmittedQuoteID                  \n" +
                "			WHERE refSubmittedQuoteID = pAssyQuoteSubmittedID                  \n" +
                "            ORDER BY qo.rfqPriceGroupId,qo.qty, qo.turnTime;                  \n" +
                "  \n" +
                "  \n" +
                "        # select details for assembly,customer, submitted quote of selected rfq assy                  \n" +
                "			SELECT ra.id rfqAssyID, ra.partID, rf.id quoteID, part.PIDCode , part.isCustom , part.nickName, part.liveInternalVersion, part.mfgPNDescription, part.mfgPN, part.rev,part.assyCode,                  \n" +
                "            part.custAssyPN, cu.mfgName,cu.mfgCode,rf.customerid,rqs.custBillingAddressID, IFNULL(rqs.custTermsID, cu.custTermsID) AS custTermsID, rqs.custShippingAddressID,                  \n" +
                "            (CASE WHEN rqs.quoteNumber IS NOT NULL THEN IFNULL(rqs.BOMIssues,'')                  \n" +
                "            WHEN rqs.quoteNumber IS NULL THEN IFNULL(fun_getQuoteSubjectToFollowing(ra.id),'') END) AS BOMIssues,                  \n" +
                "            (                  \n" +
                "				(                  \n" +
                "					CASE WHEN rqs.custTermsID IS NULL THEN                  \n" +
                "                    (                  \n" +
                "						SELECT gencCategoryName FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = (SELECT custTermsID FROM mfgcodemst WHERE id = rf.customerid)                  \n" +
                "					)                  \n" +
                "                    ELSE                  \n" +
                "                    (                  \n" +
                "                    	SELECT gencCategoryName FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = rqs.custTermsID                  \n" +
                "                    )                  \n" +
                "                    END                  \n" +
                "				)                  \n" +
                "			)paymentTerm,                  \n" +
                "            (                  \n" +
                "				(                  \n" +
                "					CASE WHEN rqs.custTermsID IS NULL THEN                  \n" +
                "                    (                  \n" +
                "						SELECT termsDays FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = (SELECT custTermsID FROM mfgcodemst WHERE id = rf.customerid)                  \n" +
                "					)                  \n" +
                "                    ELSE                  \n" +
                "                    (                  \n" +
                "                    	SELECT termsDays FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = rqs.custTermsID                  \n" +
                "                    )                  \n" +
                "                    END                  \n" +
                "				)                  \n" +
                "			)termDays,                  \n" +
                "            rqs.bomInternalVersion, rqs.quoteSubmitDate, rqs.quoteNumber, rqs.id quoteSubmittedID, ra.assyNote,               \n" +
                "            fun_getTextAngularData(ra.additionalRequirement, vTextAngularKeyCode) additionalRequirement ,                          \n" +
                "            rf.quoteNote, rt.name RFQType, jt.name JobType, rat.name AssyType,               \n" +
                "            fun_getTextAngularData(rqs.OtherNotes, vTextAngularKeyCode) OtherNotes,              \n" +
                "            ra.isSummaryComplete, ra.isReadyForPricing, CONCAT(su.firstName,' ',su.lastName) `submittedBy`, su.emailAddress,                  \n" +
                "            ra.quoteFinalStatus, ra.isCustomPartDetShowInReport,            \n" +
                "            fun_getTextAngularData(rqs.promotions, vTextAngularKeyCode) promotions,              \n" +
                "            ra.assyNote,    part.RoHSStatusID, ro.name AS rohsComplientConvertedValue, ro.rohsIcon AS rohsIconPath,                  \n" +
                "            ro.rohsIcon AS rohsIcon,                  \n" +
                "            (                  \n" +
                "				(                  \n" +
                "					CASE WHEN rqs.custBillingAddressID IS NULL THEN                  \n" +
                "					(                  \n" +
                "						SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                               \n" +
                "						IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))                             \n" +
                "						FROM customer_addresses ca                  \n" +
                "						JOIN countrymst co ON co.countryID = ca.countryID                  \n" +
                "						WHERE customerID = rf.customerid AND ca.isDefault = 1 AND ca.isDeleted = 0 AND ca.addressType = 'B'                  \n" +
                "					)                  \n" +
                "					ELSE                  \n" +
                "					(                  \n" +
                "						SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                               \n" +
                "						IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))                             \n" +
                "						FROM customer_addresses ca                  \n" +
                "						JOIN countrymst co ON co.countryID = ca.countryID                  \n" +
                "						WHERE id = rqs.custBillingAddressID                  \n" +
                "					)                  \n" +
                "					END                  \n" +
                "				)                  \n" +
                "			) billingAddress,                  \n" +
                "            (                  \n" +
                "				(                  \n" +
                "					CASE WHEN rqs.custBillingAddressID IS NULL THEN                  \n" +
                "						(                  \n" +
                "							SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                               \n" +
                "							IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))                             \n" +
                "							FROM customer_addresses ca                  \n" +
                "							JOIN countrymst co ON co.countryID = ca.countryID                  \n" +
                "							WHERE customerID = rf.customerid AND ca.isDefault = 1 AND ca.isDeleted = 0 AND ca.addressType = 'S'                  \n" +
                "						)                  \n" +
                "					ELSE                  \n" +
                "						(                  \n" +
                "							SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                               \n" +
                "							IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))                                              \n" +
                "							FROM customer_addresses ca                  \n" +
                "							JOIN countrymst co ON co.countryID = ca.countryID                  \n" +
                "							WHERE id = rqs.custShippingAddressID                  \n" +
                "						)                  \n" +
                "					END                  \n" +
                "                )                  \n" +
                "			) shippingAddress,                  \n" +
                "            (                  \n" +
                "				(                  \n" +
                "				CASE WHEN ra.isSummaryComplete = 1 THEN                  \n" +
                "					(                  \n" +
                "						SELECT GROUP_CONCAT(CONCAT(cs.fullName,(CASE WHEN sc.className IS NULL THEN '' ELSE ' ' END),IFNULL(sc.className,'')) SEPARATOR ' | ') standards                  \n" +
                "						FROM rfq_assy_standard_class_detail csd                  \n" +
                "						JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0                  \n" +
                "						LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0                  \n" +
                "						WHERE csd.refSubmittedQuoteID = rqs.id                  \n" +
                "					)                  \n" +
                "					ELSE                  \n" +
                "					(                  \n" +
                "						SELECT GROUP_CONCAT(CONCAT(cs.fullName,(CASE WHEN sc.className IS NULL THEN '' ELSE ' ' END),IFNULL(sc.className,'')) SEPARATOR ' | ') standards                  \n" +
                "						FROM component_standard_details  csd                  \n" +
                "						JOIN certificate_standards cs ON cs.certificateStandardID =  csd.certificateStandardID AND cs.isDeleted = 0                  \n" +
                "						LEFT JOIN standard_class sc  ON sc.classID =  csd.ClassID AND cs.isDeleted = 0                  \n" +
                "						WHERE csd.isDeleted = 0 AND csd.componentID = (SELECT partID FROM rfq_assemblies WHERE id = ra.id)                  \n" +
                "					)                  \n" +
                "                END                  \n" +
                "				)                  \n" +
                "			) standards,                  \n" +
                "            (                  \n" +
                "				(                  \n" +
                "				CASE WHEN ra.isSummaryComplete = 0 AND (SELECT MAX(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyId = ra.id) = rqs.id THEN                  \n" +
                "					(                  \n" +
                "						(SELECT GROUP_CONCAT(dataelement SEPARATOR '<br/>') dataelementdata FROM (                  \n" +
                "						SELECT CONCAT((CASE WHEN subFormName ='' THEN '' ELSE CONCAT('<b>',subFormName,'</b><br/>') END), GROUP_CONCAT(dataelement SEPARATOR '<br/>')) dataelement                  \n" +
                "						FROM (SELECT (CASE WHEN refSubFormTransID IS NOT NULL THEN fun_getDataElementSubFormNameByID(refSubFormTransID) ELSE '' END) subFormName,                  \n" +
                "						CONCAT(fun_getDataElementNameByID(dataElementID),': ',`value`) dataelement                  \n" +
                "						FROM dataelement_transactionvalues WHERE entityID = -12 AND isDeleted = 0 AND refTransID = (SELECT rfqrefID FROM rfq_assemblies WHERE id = ra.id)                  \n" +
                "						)dataelementForms                  \n" +
                "						GROUP BY subFormName                  \n" +
                "						)a)                  \n" +
                "					)                  \n" +
                "					ELSE                  \n" +
                "					(                  \n" +
                "						   rqs.RFQMISCData                  \n" +
                "					)                  \n" +
                "                END                  \n" +
                "				)                  \n" +
                "			) dataelementdata,                  \n" +
                "            (SELECT COUNT(1) > 0 FROM rfq_assemblies_quotation_submitted WHERE id>rqs.id AND rfqAssyID = ra.id AND isDeleted = 0 AND quoteNumber IS NOT NULL) isQuoteHistory,                  \n" +
                "            (CASE WHEN ra.status = 1 THEN 'In Progress'                  \n" +
                "			  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'                  \n" +
                "			  WHEN ra.status = 3 THEN 'Won'                  \n" +
                "			  WHEN ra.status = 4 THEN 'Lost'                  \n" +
                "              WHEN ra.status = 5 THEN 'Canceled' END) `status` ,                  \n" +
                "			ra.status rfq_statusID,                  \n" +
                "            ra.winPrice, ra.isActivityStart,   \n" +
                "            TIMESTAMPDIFF(SECOND, ra.activityStartAt,fun_DatetimetoUTCDateTime()) activityStartAt, fun_getEmpployeeNameByUserID(ra.activityStartBy) userName,  \n" +
                "            ra.winQuantity,ra.activityStartBy,  \n" +
                "            fun_getTextAngularData(ra.reason,vTextAngularKeyCode) reason                            \n" +
                "            FROM rfq_assemblies ra                  \n" +
                "            JOIN rfq_assemblies_quotation_submitted rqs ON rqs.rfqAssyID = ra.id                  \n" +
                "			JOIN rfqforms rf ON rf.id = ra.rfqrefID AND rf.isDeleted = 0                  \n" +
                "            JOIN rfqtype rt ON rt.id = ra.rfqTypeID AND rt.isDeleted = 0                  \n" +
                "            JOIN jobtype jt ON jt.id = ra.jobTypeID AND jt.isDeleted = 0                  \n" +
                "            JOIN rfq_assy_typemst rat ON rat.id = ra.assemblyTypeID AND rat.isDeleted = 0                  \n" +
                "			JOIN mfgcodemst cu ON cu.id = rf.customerid AND cu.isDeleted = 0                  \n" +
                "			JOIN component part ON part.id = ra.partID AND part.isDeleted = 0                  \n" +
                "            LEFT JOIN rfq_rohsmst ro ON ro.id = part.RoHSStatusID                  \n" +
                "            LEFT JOIN users su ON su.id = ra.quoteSubmittedBy                  \n" +
                "			WHERE ra.id= prfqAssyID AND rqs.id = pAssyQuoteSubmittedID;                  \n" +
                "  \n" +
                "  \n" +
                "        # select list of submitted quote summary                                                              \n" +
                "			SELECT bomInternalVersion,BOMIssues, bomLastVersion, createByRoleId, createdAt, createdBy, custBillingAddressID,              \n" +
                "			custShippingAddressID, custTermsID, deleteByRoleId, deletedAt, deletedBy, id, isDeleted, fun_getTextAngularData(OtherNotes, vTextAngularKeyCode) OtherNotes,              \n" +
                "			fun_getTextAngularData(promotions, vTextAngularKeyCode) promotions, quoteDueDate, quoteInDate, quoteNumber, quoteSubmitDate,              \n" +
                "			rfqAssyID, RFQMISCData, updateByRoleId, updatedAt, updatedBy               \n" +
                "            FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND id = pAssyQuoteSubmittedID ;                                                              \n" +
                "  \n" +
                "   # select list select terms and conditions of submitted quote summary                                                                \n" +
                "			SELECT qst.*, ec.name ecoTypeName, CONCAT('<ul><li>', GROUP_CONCAT(CONCAT(ecv.name, (CASE WHEN qst.note IS NOT NULL THEN CONCAT(' <b>Note:</b>', qst.note) ELSE '' END)) SEPARATOR '</li><li>'),'</li></ul>') ecoTypeValues                                                 \n" +
                "            FROM rfq_assy_quote_submitted_termsconditions qst                                                \n" +
                "            JOIN eco_type_category ec ON qst.termsconditionCatID = ec.ecoTypeCatID                                                \n" +
                "            JOIN eco_type_values ecv ON qst.termsconditionTypeValueID = ecv.ecoTypeValID                                                \n" +
                "            WHERE qst.isDeleted = 0                                                                \n" +
                "            AND RefSubmittedQuoteID = pAssyQuoteSubmittedID                                                \n" +
                "            GROUP BY ecv.ecoTypeCatID;                                                \n" +
                "  \n" +
                "  \n" +
                "		#select list of standard certification detail of submitted quote                                                              \n" +
                "			SELECT csd.id, csd.refSubmittedQuoteID, csd.standardID, csd.standardClassIDs, cs.fullName standard,sc.className stdclass                                                   \n" +
                "            FROM rfq_assy_standard_class_detail csd                                                              \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0                                                              \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0                                                              \n" +
                "			WHERE csd.refSubmittedQuoteID = pAssyQuoteSubmittedID;                                                              \n" +
                "  \n" +
                "		# select letest submited quote summary detail                                                          \n" +
                "			SELECT bomInternalVersion, BOMIssues, bomLastVersion, createByRoleId, createdAt, createdBy, custBillingAddressID, custShippingAddressID,  \n" +
                "            custTermsID, deleteByRoleId, deletedAt, deletedBy, id, isDeleted, fun_getTextAngularData(OtherNotes, vTextAngularKeyCode) OtherNotes,  \n" +
                "            fun_getTextAngularData(promotions, vTextAngularKeyCode) promotions, quoteDueDate, quoteInDate, quoteNumber, quoteSubmitDate, rfqAssyID,  \n" +
                "            RFQMISCData, updateByRoleId, updatedAt, updatedBy                \n" +
                "            FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1;                                                  \n" +
                "  \n" +
                "		#select list of Custom Part detail of assembly.       \n" +
                "  \n" +
                "			  SELECT *, (amount*requestedQty) AS extendedCost FROM (  \n" +
                "				SELECT prfqAssyID `rfqAssyID`,  com.mfgPn CustomPart,com.PIDCode,raqc.mfgPNID,  \n" +
                "				qoa.id additi, qo.requestedQty, fun_getRoHSNameByID(com.RoHSStatusID) rohsName, fun_getRoHSIconByID(com.RoHSStatusID) rohsIcon,   \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,  \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,  \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime  \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime  \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa  \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0  \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'Material'  \n" +
                "				left Join rfq_assy_quotations_customparts raqc on raqc.rfqAssyQuoteID = qoa.rfqAssyQuoteID and raqc.id = qoa.refCustomPartQuoteID AND qo.isDeleted = 0   \n" +
                "				left join component com on com.id = raqc.mfgPNID  \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID and qoa.refCustomPartQuoteID is not null     \n" +
                "				#HAVING amount>0  \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime,qdf.displayOrder  \n" +
                "			) a  \n" +
                "			GROUP BY requestedQty, turnTime,fieldName,amount,days;  \n" +
                "  \n" +
                "		#select list of NRE detail of assembly.                                              \n" +
                "  \n" +
                "            SELECT *, (amount*toolingQty) AS extendedCost FROM (                                    \n" +
                "				SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,                                              \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,                                             \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,                                            \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))                                                              \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime                                                        \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime , qoa.toolingQty                                    \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa                                               \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0                                              \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'NRE'                                    \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID                                        \n" +
                "				HAVING amount>0                                    \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime                                    \n" +
                "            ) a                                    \n" +
                "            GROUP BY fieldName,amount;                                    \n" +
                "  \n" +
                "  \n" +
                "		#select list of NRE detail of assembly.                                              \n" +
                "  \n" +
                "            SELECT *, (amount*toolingQty) AS extendedCost FROM (                                    \n" +
                "				SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,                                              \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,                                             \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,                                             \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))                                                              \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime                                                        \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime , qoa.toolingQty                                                 \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa                                               \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0                                              \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'TooLing'                                    \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID                                        \n" +
                "				HAVING amount>0                                    \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime                                    \n" +
                "            ) a                                    \n" +
                "            GROUP BY fieldName,amount,toolingQty;                                    \n" +
                "  \n" +
                "		# Company detail                                    \n" +
                "			SELECT CONCAT(street1,', ',city,', ',state,' ',postcode)AS address,cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo                                \n" +
                "			FROM customer_addresses cua                                    \n" +
                "			JOIN mfgcodemst cu ON cu.id = cua.customerId                                    \n" +
                "			WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1  AND cua.isDeleted = 0;                                    \n" +
                "		# select list of price Group detail          \n" +
                "            SELECT rpg.id priceGroupID, rpg.name priceGroup, rpg.qty, rpg.rfqAssyID,           \n" +
                "			com.mfgPN, com.PIDCode, ro.name rohsName, ro.rohsIcon, ra.partID          \n" +
                "			FROM rfq_assy_submitted_price_group_detail rpg          \n" +
                "			JOIN rfq_assemblies ra ON ra.id = rpg.rfqAssyID          \n" +
                "			JOIN component com ON com.id = ra.partID          \n" +
                "			JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID          \n" +
                "			WHERE rpg.refSubmittedQuoteID = pAssyQuoteSubmittedID          \n" +
                "            ORDER BY rpg.name;          \n" +
                "  \n" +
                "        # select list of price Group           \n" +
                "			SELECT DISTINCT `name` FROM rfq_assy_submitted_price_group_detail          \n" +
                "			WHERE refSubmittedQuoteID = pAssyQuoteSubmittedID          \n" +
                "            ORDER BY NAME;          \n" +
                "  \n" +
                "        # select list select terms and conditions of submitted quote summary                                                              \n" +
                "			SELECT qst.*, ec.name ecoTypeName, ecv.name ecoTypeValues FROM rfq_assy_quote_submitted_termsconditions qst                                              \n" +
                "            JOIN eco_type_category ec ON qst.termsconditionCatID = ec.ecoTypeCatID                                              \n" +
                "            JOIN eco_type_values ecv ON qst.termsconditionTypeValueID = ecv.ecoTypeValID                                              \n" +
                "            WHERE qst.isDeleted = 0                                                              \n" +
                "            AND RefSubmittedQuoteID = pAssyQuoteSubmittedID;                                                  \n" +
                "  \n" +
                "  \n" +
                "		# total requote count                                                   \n" +
                "			SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL AND isDeleted = 0;                                                  \n" +
                "  \n" +
                "		#select list of standard certification detail of assembly for not submitted quote                                                  \n" +
                "			SELECT csd.id, csd.certificateStandardID, csd.ClassID, cs.fullName standard,sc.className stdclass                                                  \n" +
                "            FROM component_standard_details  csd                                                              \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.certificateStandardID AND cs.isDeleted = 0                                                              \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.ClassID AND cs.isDeleted = 0                                                              \n" +
                "			WHERE csd.isDeleted = 0 AND csd.componentID = (SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID);          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getQuoteSubjectToFollowingDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_getQuoteSubjectToFollowingDetails`(	                                                                                \n" +
                "	IN prfqAssyID INT(11),        \n" +
                "    IN pAssyQuoteSubmittedID INT(11)           \n" +
                "    )  \n" +
                "BEGIN           \n" +
                "DECLARE pisSummaryCompleted TINYINT(1);        \n" +
                "SELECT isSummaryComplete INTO pisSummaryCompleted FROM rfq_assemblies WHERE id = prfqAssyID;        \n" +
                "	IF pisSummaryCompleted = 1 THEN        \n" +
                "  \n" +
                "		# Get Excess Material Details        \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID, fun_ConvertRefdesgString(a.refDesg) AS refDesg, a.mfrCode AS mfrCode, a.mfrPN AS mfrPN,        \n" +
                "			a.CPN AS CPN, a.CPNRev AS CPNRev,BOMIssue        \n" +
                "			FROM rfq_quote_issue_history a        \n" +
                "            WHERE issueType = \"ExcessMaterial\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID        \n" +
                "			ORDER BY a.lineID ;         \n" +
                "  \n" +
                "		# Get Custome Consigned Detail            \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID, fun_ConvertRefdesgString(a.refDesg) AS refDesg, a.mfrCode AS mfrCode, a.mfrPN AS mfrPN,        \n" +
                "            a.CPN AS CPN, a.CPNRev AS CPNRev,BOMIssue        \n" +
                "            FROM rfq_quote_issue_history a        \n" +
                "            WHERE issueType = \"CustomerConsigned\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID        \n" +
                "			ORDER BY a.lineID;        \n" +
                "  \n" +
                "		# get Unquoted Line item Details        \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID, fun_ConvertRefdesgString(a.refDesg) AS refDesg,         \n" +
                "            a.CPN AS CPN, a.CPNRev AS CPNRev,BOMIssue        \n" +
                "			FROM rfq_quote_issue_history a        \n" +
                "            WHERE issueType = \"UnquotedLineItem\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID        \n" +
                "			ORDER BY a.lineID;        \n" +
                "  \n" +
                "		# get Unquoted Labor Detail        \n" +
                "  \n" +
                "			SELECT PIDCode, BOMIssue                    \n" +
                "			FROM rfq_quote_issue_history a        \n" +
                "            WHERE issueType = \"UnquotedLabor\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID;                \n" +
                "  \n" +
                "		# get Low Stock Alert details        \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID , fun_ConvertRefdesgString(a.refDesg) AS refDesg, a.mfrCode AS mfrCode, a.mfrPN AS mfrPN,        \n" +
                "            a.CPN AS CPN, a.CPNRev AS CPNRev, BOMIssue, a.isCustom, CASE WHEN a.componentID IS NULL THEN 0 ELSE fun_getComponentStock(a.componentID) END AS actualStock                  \n" +
                "			FROM rfq_quote_issue_history a        \n" +
                "            WHERE issueType = \"LowStockAlert\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID AND isCustom = 0       \n" +
                "			ORDER BY a.lineID;        \n" +
                "  \n" +
                "		# Get Long Lead Time Parts Detail        \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID, fun_ConvertRefdesgString(a.refDesg) AS refDesg, a.mfrCode AS mfrCode, a.mfrPN AS mfrPN,        \n" +
                "            a.CPN AS CPN, a.CPNRev AS CPNRev, BOMIssue, a.isCustom, CASE WHEN a.componentID IS NULL THEN 0 ELSE fun_getComponentStock(a.componentID) END AS actualStock          \n" +
                "			FROM rfq_quote_issue_history a        \n" +
                "            WHERE issueType = \"LongLeadTime\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID        \n" +
                "            ORDER BY a.lineID;        \n" +
                "  \n" +
                "		# get Obsolete Part Detail        \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID , fun_ConvertRefdesgString(a.refDesg)  AS refDesg,        \n" +
                "            a.mfrCode AS mfrCode, a.mfrPN AS mfrPN,a.CPN AS CPN, a.CPNRev AS CPNRev,BOMIssue         \n" +
                "            FROM rfq_quote_issue_history a        \n" +
                "            WHERE issueType = \"ObsoletePart\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID        \n" +
                "			ORDER BY a.lineID;        \n" +
                "  \n" +
                "		# Get Part LOA Details        \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID ,fun_ConvertRefdesgString(a.refDesg)  AS refDesg,a.mfrCode AS mfrCode, a.mfrPN AS mfrPN,        \n" +
                "            a.CPN AS CPN, a.CPNRev AS CPNRev,BOMIssue        \n" +
                "			FROM rfq_quote_issue_history a        \n" +
                "            WHERE issueType = \"PartLOA\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID                 \n" +
                "			ORDER BY a.lineID;         \n" +
                "  \n" +
                "		# Get BOM Issue detail        \n" +
                "			SELECT PIDCode,TRIM(lineID)+0 AS lineID,fun_ConvertRefdesgString(a.refDesg) AS refDesg,a.mfrCode AS mfrCode,a.mfrPN AS mfrPN,        \n" +
                "            a.CPN AS CPN, a.CPNRev AS CPNRev, BOMIssue, (CASE WHEN a.isCustomerApproved = TRUE THEN 'Customer' ELSE 'Engineer' END) AS approvedBy, a.isCustomerApproved    \n" +
                "			FROM rfq_quote_issue_history a        \n" +
                "            WHERE issueType = \"BOMIssue\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID                           \n" +
                "			ORDER BY lineID;         \n" +
                "  \n" +
                "	ELSE         \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS leveldata;                    \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS leveldata AS                    \n" +
                "			WITH RECURSIVE cte AS                      \n" +
                "			(                    \n" +
                "				(                    \n" +
                "					SELECT rlc.id, rlc.rfqLineItemsAlternatePartID, rlc.rfqLineItemsID,                  \n" +
                "					(CASE WHEN rlc.isCustomerApproved = TRUE THEN 'Customer' ELSE 'Engineer' END) AS approvedBy,      \n" +
                "					rlc.`comment`, rlc.requiredToShowOnQuoteSummary, rlc.errorCode, rlc.isCustomerApproved,             \n" +
                "					comp.PIDCode, comp.mfgPN AS AssyPN, CASE WHEN rl.partID IS NULL THEN rla.mfgPNID ELSE rl.partId END AS partID, rl.refDesig, IFNULL(rla.mfgPNID, rl.partID) AS mfgPNID, IFNULL(com.isCustom, comp.isCustom) AS isCustom,IFNULL(rlc.mfgPN,rla.mfgPN) AS alternatepart,                  \n" +
                "					IFNULL(rlc.mfgCode,rla.mfgCode) AS alternatepartmfg, rla.id AS alternateID, 1 AS LEVEL,                   \n" +
                "					com.category, rl.lineID,rl.custPN,rl.customerRev                  \n" +
                "					FROM rfq_lineitems_alternatepart rla                  \n" +
                "					LEFT JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0                  \n" +
                "					JOIN rfq_lineitems_approval_comment rlc ON rlc.rfqLineItemsAlternatePartID = rla.id OR rlc.rfqLineItemsID = rl.id                  \n" +
                "					LEFT JOIN component com ON com.id = rla.mfgPNID                    \n" +
                "					LEFT JOIN component comp ON comp.id = rl.partID OR comp.id =  rla.partID                  \n" +
                "					WHERE rl.partId = ( SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID ) OR rla.partID = ( SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID )                  \n" +
                "					AND rla.isDeleted = 0        \n" +
                "				)                    \n" +
                "				UNION ALL                      \n" +
                "				(                    \n" +
                "					SELECT rlc.id, rlc.rfqLineItemsAlternatePartID, rlc.rfqLineItemsID,           \n" +
                "					(CASE WHEN rlc.isCustomerApproved = TRUE THEN 'Customer' ELSE 'Engineer' END) AS approvedBy,             \n" +
                "					rlc.`comment`, rlc.requiredToShowOnQuoteSummary, rlc.errorCode, rlc.isCustomerApproved,                 \n" +
                "					comp.PIDCode, comp.mfgPN AS AssyPN, CASE WHEN rl.partID IS NULL THEN rla.mfgPNID ELSE rl.partId END AS partID, rl.refDesig, IFNULL(rla.mfgPNID, rl.partID) AS mfgPNID, IFNULL(com.isCustom, comp.isCustom) AS isCustom,IFNULL(rlc.mfgPN,rla.mfgPN) AS alternatepart,                  \n" +
                "					IFNULL(rlc.mfgCode,rla.mfgCode) AS alternatepartmfg, rla.id AS alternateID, 1 AS LEVEL,                   \n" +
                "					com.category, rl.lineID,rl.custPN,rl.customerRev                  \n" +
                "					FROM rfq_lineitems_alternatepart rla                  \n" +
                "					LEFT JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0                  \n" +
                "					JOIN rfq_lineitems_approval_comment rlc ON rlc.rfqLineItemsAlternatePartID = rla.id OR rlc.rfqLineItemsID = rl.id                  \n" +
                "					LEFT JOIN component com ON com.id = rla.mfgPNID                    \n" +
                "					LEFT JOIN component comp ON comp.id = rl.partID OR comp.id =  rla.partID                  \n" +
                "					RIGHT JOIN cte cte ON cte.category = 3 AND rl.partID = cte.mfgPNID                   \n" +
                "					WHERE rla.isDeleted = 0                  \n" +
                "				)                    \n" +
                "			)                    \n" +
                "			SELECT cte.* FROM cte                    \n" +
                "            ORDER BY LEVEL;                   \n" +
                "  \n" +
                "		# Get Excess Material Details        \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID, fun_ConvertRefdesgString(a.refDesig) AS refDesg,        \n" +
                "            fun_getMfgCodeByPartID(a.componentID) AS mfrCode, fun_getMFGPNByID(a.componentID) AS mfrPN,a.custPN AS CPN, a.customerRev AS CPNRev,        \n" +
                "            CONCAT('UOM: ',a.unitName, ' : Requested QTY: ', requestQty, ' : QPA: ', TRIM(qpa)+0 ,        \n" +
                "            (CASE WHEN connecterTypeID = -2 THEN CONCAT(' : Requested Pin:',TRIM(reqQty*numOfPosition)+0) ELSE '' END),' : Quoted QTY: ', a.quoteQty,         \n" +
                "            ' : Excess QTY: ', a.excessqty, ' @ $', TRIM(a.unitPrice)+0,' / ',(CASE WHEN connecterTypeID = -2 THEN 'Pin' ELSE a.unitName END),        \n" +
                "            ' : Selected part contains excess material.') AS BOMIssue        \n" +
                "			FROM                    \n" +
                "			(                    \n" +
                "				SELECT rcl.id, rclq.qtyID, rclq.unitPrice, rcl.lineID, rcl.rfqAssyID, rcl.uomID, rcl.refDesig, raq.requestQty, rcl.qpa,        \n" +
                "                TRIM(raq.requestQty * rcl.qpa)+0 reqQty, rclq.quoteQty, rclq.componentID,fun_getUnitNameByID(rcl.uomID) AS unitName,                       \n" +
                "				(CASE WHEN com.connecterTypeID = -2 THEN         \n" +
                "                TRIM(rclq.quoteQty - (raq.requestQty * rcl.qpa * rcl.numOfPosition))+0         \n" +
                "                ELSE TRIM(rclq.quoteQty - (raq.requestQty * rcl.qpa))+0 END) excessqty, rl.custPN,rl.customerRev, com.connecterTypeID, rcl.numOfPosition                \n" +
                "				FROM rfq_consolidated_mfgpn_lineitem rcl                    \n" +
                "				LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID                    \n" +
                "				LEFT JOIN rfq_assy_quantity raq ON rclq.qtyID = raq.id                    \n" +
                "				LEFT JOIN component com ON com.id = rclq.componentID                    \n" +
                "				LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID          \n" +
                "				WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.finalprice IS NOT NULL AND rcl.isPurchase = 1                    \n" +
                "				GROUP BY rcl.id , rclq.qtyID                    \n" +
                "				HAVING excessqty > 0                    \n" +
                "			) a                    \n" +
                "			ORDER BY requestQty, a.lineID ;         \n" +
                "  \n" +
                "		# Get Custome Consigned Detail            \n" +
                "			SELECT TRIM(rcl.lineID) + 0 AS lineID , fun_ConvertRefdesgString(rcl.refDesig) AS refDesg, rl.custPN AS CPN, rl.customerRev AS CPNRev,        \n" +
                "            fun_getMfgCodeByPartID(rcla.mfgPNID) AS mfrCode, fun_getMFGPNByID(rcla.mfgPNID) AS mfrPN,        \n" +
                "            'Customer Consigned Items' AS BOMIssue        \n" +
                "			FROM rfq_consolidated_mfgpn_lineitem rcl        \n" +
                "			JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON rcl.id = rcla.consolidateID        \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID         \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID AND rcl.isDeleted = 0 AND rcl.isPurchase = 0        \n" +
                "			GROUP BY rcl.id        \n" +
                "			ORDER BY rcl.lineID;        \n" +
                "  \n" +
                "		# get Unquoted Line item Details        \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID,fun_ConvertRefdesgString(a.refDesig) AS refDesg, a.custPN AS CPN, a.customerRev AS CPNRev,         \n" +
                "            CONCAT(GROUP_CONCAT(CONCAT(fun_getMfgCodeByPartID(rcla.mfgPNID),' : ', fun_getMFGPNByID(rcla.mfgPNID)) SEPARATOR ' | '), ' : Requested QTY: ', a.requestQty, '  : Unquoted quantity.') AS BOMIssue        \n" +
                "			FROM                    \n" +
                "			(                    \n" +
                "				SELECT rcl.id, rcl.lineID, rcl.rfqAssyID, rcl.refDesig, GROUP_CONCAT(raq.requestQty) requestQty ,        \n" +
                "                rl.custPN,rl.customerRev                    \n" +
                "				FROM rfq_consolidated_mfgpn_lineitem rcl                    \n" +
                "				LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID                    \n" +
                "				LEFT JOIN rfq_assy_quantity raq ON rclq.qtyID = raq.id                    \n" +
                "				LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID                    \n" +
                "				WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.finalprice IS NULL AND rcl.isPurchase = 1                    \n" +
                "				GROUP BY rcl.id                    \n" +
                "			) a                     \n" +
                "			LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON a.id = rcla.consolidateID                    \n" +
                "			GROUP BY a.id                    \n" +
                "			ORDER BY a.lineID;        \n" +
                "  \n" +
                "		# get Unquoted Labor Detail        \n" +
                "			SELECT assyName AS PIDCode,CONCAT(' Mounting Type: ', mountingType,' QPA: ',TRIM(totalQPA)+0,' Quantity: ',  GROUP_CONCAT(TRIM(assyQPA*quantity)+0),' ', \"Labor does not considered.\") BOMIssue        \n" +
                "            FROM (                    \n" +
                "					SELECT fun_getAssyNameByID(ramd.partID) assyName, fun_getMountingTypeNameByID(ramd.mountingTypeID) mountingType,                     \n" +
                "					(SELECT SUM(perBuildQty) FROM rfq_labor_assy_qpa_detail WHERE subAssyID = ramd.partID AND rfqAssyID =  ramd.rfqAssyID AND isDeleted = 0) assyQPA,                     \n" +
                "					(SELECT requestQty FROM rfq_assy_quantity WHERE id = raql.rfqAssyQtyID) quantity, ramd.totalQPA, ramd.lineCount, raql.perAssyPrice,                    \n" +
                "					 raql.price, (SELECT MAX(`level`) FROM rfq_labor_assy_qpa_detail WHERE subAssyID = ramd.partID AND isDeleted = 0 AND rfqAssyID = ramd.rfqAssyID)assyLevel                     \n" +
                "					 FROM rfq_assy_qtywise_bom_laborcosting_detail raql                    \n" +
                "					JOIN rfq_assy_labor_bom_mountingtype_qpa_detail ramd ON ramd.id = raql.rfqAssyBOMMountingID AND ramd.isDeleted = 0                    \n" +
                "					WHERE raql.isDeleted  = 0 AND ramd.rfqAssyID = prfqAssyID AND ramd.mountingTypeID IS NOT NULL AND raql.price = 0                    \n" +
                "			)a                    \n" +
                "			GROUP BY a.assyName, a.mountingType                    \n" +
                "			ORDER BY assyLevel ASC;            \n" +
                "  \n" +
                "		# get Low Stock Alert details        \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID ,fun_ConvertRefdesgString(a.refDesig) AS refDesg, a.custPN AS CPN, a.customerRev AS CPNRev,        \n" +
                "            fun_getMfgCodeByPartID(a.componentID) AS mfrCode, fun_getMFGPNByID(a.componentID) AS mfrPN, a.isCustom AS isCustom,  fun_getComponentStock(a.componentID) AS actualStock,      \n" +
                "            CONCAT('Requested QTY: ', reqQty, ' : Supplier Stock: ', TRIM(a.grossStock)+0, '  : Supplier does not having sufficient stock for selected part.') AS BOMIssue        \n" +
                "			FROM        \n" +
                "			(        \n" +
                "				SELECT rcl.id, rclq.qtyID, rcl.lineID, rcl.refDesig, rcl.rfqAssyID, raq.requestQty, rcl.qpa, rclq.quoteQty, c.isCustom,        \n" +
                "				TRIM(raq.requestQty * rcl.qpa)+0 reqQty, rclq.grossStock, rclq.currentStock,rl.custPN,rl.customerRev,rclq.componentID        \n" +
                "				FROM rfq_consolidated_mfgpn_lineitem rcl        \n" +
                "				LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID        \n" +
                "				LEFT JOIN rfq_assy_quantity raq ON rclq.qtyID = raq.id        \n" +
                "				LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID      \n" +
                "				LEFT JOIN component c ON c.id = rclq.componentID         \n" +
                "				WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.finalprice IS NOT NULL AND rcl.isPurchase = 1        \n" +
                "				GROUP BY rcl.id , rclq.qtyID        \n" +
                "				HAVING reqQty > grossStock        \n" +
                "			) a       \n" +
                "			WHERE a.isCustom = 0     \n" +
                "			ORDER BY a.lineID;        \n" +
                "  \n" +
                "		# Get Long Lead Time Parts Detail        \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID, fun_ConvertRefdesgString(a.refDesig) AS refDesg, a.custPN AS CPN, a.customerRev AS CPNRev,        \n" +
                "            fun_getMfgCodeByPartID(a.componentID) AS mfrCode, fun_getMFGPNByID(a.componentID) AS mfrPN,        \n" +
                "            CONCAT('Requested QTY: ', reqQty, ' : Supplier Stock: ', TRIM(a.grossStock)+0, ' : Lead time: ', a.leadTime, ' week          \n" +
                "			: Lead time is high for selected part.') AS BOMIssue, isCustom , fun_getComponentStock(a.componentID) AS actualStock        \n" +
                "			FROM                    \n" +
                "			(                    \n" +
                "				SELECT rcl.id, rclq.qtyID, rcl.lineID, rcl.refDesig, rcl.rfqAssyID, raq.requestQty, rcl.qpa, rclq.quoteQty,rclq.componentID,c.isCustom,        \n" +
                "                TRIM(raq.requestQty * rcl.qpa)+0 reqQty, ifnull(grossStock,0) grossStock, IFNULL(rclq.leadTime,0)leadTime,rl.custPN,rl.customerRev        \n" +
                "                FROM rfq_consolidated_mfgpn_lineitem rcl        \n" +
                "                LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID        \n" +
                "                LEFT JOIN rfq_assy_quantity raq ON rclq.qtyID = raq.id        \n" +
                "                LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID       \n" +
                "                LEFT JOIN component c ON c.id = rclq.componentID      \n" +
                "                WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.finalprice IS NOT NULL AND rcl.isPurchase = 1        \n" +
                "                GROUP BY rcl.id , rclq.qtyID        \n" +
                "                HAVING grossStock < reqQty        \n" +
                "			) a        \n" +
                "            ORDER BY a.lineID;        \n" +
                "  \n" +
                "		# get Obsolete Part Detail        \n" +
                "			SELECT TRIM(rcl.lineID) + 0 AS lineID , fun_ConvertRefdesgString(rcl.refDesig) AS refDesg, rl.custPN AS CPN, rl.customerRev AS CPNRev,        \n" +
                "            fun_getMfgCodeByPartID(rcla.mfgPNID) AS mfrCode, fun_getMFGPNByID(rcla.mfgPNID) AS mfrPN,        \n" +
                "            CONCAT('Part is Obsoleted.') AS BOMIssue        \n" +
                "            FROM rfq_consolidated_mfgpn_lineitem rcl        \n" +
                "			JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON rcl.id = rcla.consolidateID        \n" +
                "			JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID AND rclq.componentID = rcla.mfgPNID        \n" +
                "			JOIN component com ON com.id = rcla.mfgPNID AND partstatus = (SELECT id FROM component_partstatusmst WHERE `name` = 'Obsolete')        \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID        \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0        \n" +
                "			GROUP BY rcl.id        \n" +
                "			ORDER BY rcl.lineID;        \n" +
                "  \n" +
                "		# Get Part LOA Details        \n" +
                "			SELECT TRIM(rcl.lineID) + 0 AS lineID ,fun_ConvertRefdesgString(rcl.refDesig) AS refDesg,rl.custPN AS CPN, rl.customerRev AS CPNRev,        \n" +
                "            fun_getMfgCodeByPartID(rclq.componentID) AS mfrCode, fun_getMFGPNByID(rclq.componentID) AS mfrPN, rclq.LOAprice,        \n" +
                "            CONCAT(CONCAT('LOA Price: $',CAST(rclq.LOAprice AS DECIMAL(10,5))),' : LOA Price given for part.') AS BOMIssue        \n" +
                "			FROM rfq_consolidated_mfgpn_lineitem rcl                    \n" +
                "			JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON rcl.id = rcla.consolidateID                    \n" +
                "			JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID                    \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID                    \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.LOAprice IS NOT NULL                    \n" +
                "			GROUP BY rcl.id,rclq.componentID                    \n" +
                "			ORDER BY rcl.lineID;         \n" +
                "  \n" +
                "		# Get BOM Issue detail        \n" +
                "			SELECT AssyPN AS PIDCode,TRIM(lineID)+0 AS lineID,fun_ConvertRefdesgString(refDesig) AS refDesg,LEVEL,custPN AS CPN, customerRev AS CPNRev,        \n" +
                "            alternatepartmfg AS mfrCode, alternatepart AS mfrPN, approvedBy,        \n" +
                "            `comment` AS BOMIssue     \n" +
                "			FROM leveldata                    \n" +
                "			WHERE requiredToShowOnQuoteSummary = 1                        \n" +
                "			ORDER BY LEVEL , lineID;         \n" +
                "  \n" +
                "  \n" +
                "	END IF;        \n" +
                "		# get Issues Require Customer Engineering Resolution detail        \n" +
                "            SELECT TRIM(lineID)+0 AS lineID,PIDCode,BOMIssue,issueType,refSubmittedQuoteID        \n" +
                "            FROM rfq_quote_issue_history a        \n" +
                "            WHERE issueType = \"CustomerEngineeringResolution\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID AND isDeleted = 0        \n" +
                "			ORDER BY a.lineID;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_Retrieve_costing_activity_history`;  \n" +
                "CREATE PROCEDURE `Sproc_Retrieve_costing_activity_history`(                \n" +
                "	IN prfqAssyID INT(11)          \n" +
                ")  \n" +
                "BEGIN                \n" +
                "  \n" +
                "	SELECT 	a.`rfqAssyID`,           \n" +
                "		a.`checkinTime`,           \n" +
                "		a.`checkoutTime`,           \n" +
                "		a.`totalTime`,           \n" +
                "		u.username AS userName,           \n" +
                "		stru.username AS startUserName,           \n" +
                "		stpu.username AS stopUserName   \n" +
                "	FROM `rfq_assembly_trans_history` AS a           \n" +
                "	LEFT OUTER JOIN `users` AS u ON a.`userID` = u.`id` AND u.`deletedAt` IS NULL           \n" +
                "	LEFT OUTER JOIN `users` AS stru ON a.`createdBy` = stru.`id` AND stru.`deletedAt` IS NULL           \n" +
                "	LEFT OUTER JOIN `users` AS stpu ON a.`updatedBy` = stpu.`id` AND stpu.`deletedAt` IS NULL           \n" +
                "	WHERE (a.`deletedAt` IS NULL AND           \n" +
                "	(a.`rfqAssyID` = prfqAssyID AND a.`checkOutTime` IS NOT NULL));          \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GenerateQuoteSummary`;  \n" +
                "CREATE PROCEDURE `Sproc_GenerateQuoteSummary`(        \n" +
                "	IN prfqAssyID INT(11)                    \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "	    SELECT qo.id,prfqAssyID `rfqAssyID`,        \n" +
                "         (CASE WHEN qo.timeType = 'B' THEN CEILING(7*(turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))        \n" +
                "            WHEN qo.timeType = 'D' THEN turntime        \n" +
                "            WHEN qo.timeType = 'W' THEN (turntime*7) END) turntimedays,        \n" +
                "            (CASE WHEN qo.timeType = 'B' THEN 'Business Days'        \n" +
                "            WHEN qo.timeType = 'D' THEN 'Week Days'        \n" +
                "            WHEN qo.timeType = 'W' THEN 'Week' END) turnType,        \n" +
                "        requestedQty `qty`, turntime `turnTime`, timeType `turnType`,        \n" +
                "		qo.materialCost AS materialCost, qo.materialDays AS materialLeadTime,        \n" +
                "		qo.laborCost AS laborCost, qo.laborDays AS laborLeadTime,        \n" +
                "		fun_generateSumOfAmountByCostingType(qo.id,prfqAssyID,'Overhead') additionalCost, fun_generateSumOfDaysByCostingType(qo.id,prfqAssyID,'Overhead') `customItemLeadTime`,        \n" +
                "		( qo.materialCost +qo.laborCost+fun_generateSumOfAmountByCostingType(qo.id,prfqAssyID,'Overhead')) `unitPrice`,        \n" +
                "		(IFNULL(qo.materialDays,0)+        \n" +
                "        (CASE WHEN (qo.laborDays>fun_generateSumOfDaysByCostingType(qo.id,prfqAssyID,'Overhead'))        \n" +
                "        THEN IFNULL(qo.laborDays,0)        \n" +
                "        ELSE fun_generateSumOfDaysByCostingType(qo.id,prfqAssyID,'Overhead') END        \n" +
                "        )) `totalLeadTime`,        \n" +
                "		(qo.requestedQty *(qo.materialCost +qo.laborCost +fun_generateSumOfAmountByCostingType(qo.id,prfqAssyID,'Overhead'))) extendedCost,        \n" +
                "		qo.excessQtyTotalPrice `excessMaterialCost`, (IFNULL(qo.nreDays,0)+ IFNULL(qo.toolingDays,0))nreDays, (IFNULL(qo.nreCost,0)+ IFNULL(qo.toolingCost,0))nreCost,fun_getNREToolingCostDescriptionbyQuoteID(qo.id,prfqAssyID) AS nretoolingdescription,        \n" +
                "        rpg.`name` priceGroup        \n" +
                "		FROM rfq_assy_quotations qo        \n" +
                "        LEFT JOIN rfq_price_group rpg ON rpg.id = qo.rfqPriceGroupId        \n" +
                "		WHERE qo.rfqAssyID = prfqAssyID AND qo.isDeleted = 0 AND qo.refSubmittedQuoteID IS NULL        \n" +
                "        ORDER BY rpg.id,qo.requestedQty, qo.turnTime;        \n" +
                "  \n" +
                "  # Generate Custom part Detail     \n" +
                "        SELECT * , (amount*requestedQty) AS extendedCost FROM (        \n" +
                "			SELECT prfqAssyID `rfqAssyID`,  qoa.id, qo.requestedQty,  com.mfgPn CustomPart,PIDCode,raqc.mfgPNID,          \n" +
                "			qoa.quoteChargeDynamicFieldID, qdf.fieldName, qdf.costingType, fun_getRoHSNameByID(com.RoHSStatusID) rohsName, fun_getRoHSIconByID(com.RoHSStatusID) rohsIcon,     \n" +
                "			requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,       \n" +
                "			(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))        \n" +
                "						WHEN qo.timeType = 'D' THEN qo.turntime        \n" +
                "						WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime       \n" +
                "			FROM  rfq_assy_quotations qo        \n" +
                "			LEFT JOIN rfq_assy_quotations_additionalcost qoa ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0     \n" +
                "            left Join rfq_assy_quotations_customparts raqc on raqc.rfqAssyQuoteID = qo.id and raqc.id = qoa.refCustomPartQuoteID AND qo.isDeleted = 0     \n" +
                "            left join component com on com.id = raqc.mfgPNID    \n" +
                "			LEFT JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = qoa.quoteChargeDynamicFieldID        \n" +
                "			WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qdf.costingType = 'Material' AND qo.refSubmittedQuoteID IS NULL and qoa.refCustomPartQuoteID is not null       \n" +
                "            HAVING amount>0        \n" +
                "            ORDER BY qo.requestedQty, qo.turnTime,qdf.displayOrder     \n" +
                "		) a        \n" +
                "		GROUP BY requestedQty, turnTime,fieldName,amount,days;     \n" +
                "  \n" +
                "	# Genereate NRE Details        \n" +
                "		SELECT * , (amount*toolingQty) AS extendedCost FROM (        \n" +
                "			SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,        \n" +
                "			qoa.quoteChargeDynamicFieldID, qdf.fieldName, qdf.costingType,        \n" +
                "			requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,    \n" +
                "			(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))        \n" +
                "						WHEN qo.timeType = 'D' THEN qo.turntime        \n" +
                "						WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime, qoa.toolingQty        \n" +
                "			FROM  rfq_assy_quotations qo        \n" +
                "			LEFT JOIN rfq_assy_quotations_additionalcost qoa ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0        \n" +
                "			LEFT JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = qoa.quoteChargeDynamicFieldID        \n" +
                "			WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qdf.costingType = 'NRE' AND qo.refSubmittedQuoteID IS NULL        \n" +
                "            HAVING amount>0        \n" +
                "            ORDER BY qo.requestedQty, qo.turnTime        \n" +
                "		) a        \n" +
                "		GROUP BY fieldName,amount,days;        \n" +
                "  \n" +
                "	# Genereate Tooling Details        \n" +
                "        SELECT *, (amount*toolingQty) AS extendedCost FROM (        \n" +
                "			SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,        \n" +
                "			qoa.quoteChargeDynamicFieldID, qdf.fieldName, qdf.costingType,        \n" +
                "			requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days,  qdf.isDaysRequire,       \n" +
                "			(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))        \n" +
                "						WHEN qo.timeType = 'D' THEN qo.turntime        \n" +
                "						WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime , qoa.toolingQty        \n" +
                "			FROM  rfq_assy_quotations qo        \n" +
                "			LEFT JOIN rfq_assy_quotations_additionalcost qoa ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0        \n" +
                "			LEFT JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = qoa.quoteChargeDynamicFieldID        \n" +
                "			WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qdf.costingType = 'TooLing' AND qo.refSubmittedQuoteID IS NULL        \n" +
                "            HAVING amount>0        \n" +
                "            ORDER BY qo.requestedQty, qo.turnTime        \n" +
                "		) a        \n" +
                "		GROUP BY fieldName,amount,toolingQty,days;        \n" +
                "  \n" +
                "	# return quotation current data count for assembly        \n" +
                "		SELECT COUNT(*) FROM rfq_assy_quotations WHERE rfqAssyID = prfqAssyID AND isDeleted = 0 AND refSubmittedQuoteID IS NULL;        \n" +
                "  \n" +
                "	# Return data for rfq Price Group Matrix        \n" +
                "		SELECT rpg.id priceGroupID, rpg.name priceGroup, rpgd.qty, rpgd.rfqAssyID,ra.partID,         \n" +
                "		com.mfgPN, com.PIDCode, ro.name rohsName, ro.rohsIcon         \n" +
                "        FROM rfq_assemblies ra        \n" +
                "		JOIN rfq_price_group rpg ON rpg.refRFQID = ra.rfqrefID AND rpg.isDeleted =0         \n" +
                "		LEFT JOIN rfq_price_group_detail rpgd ON rpgd.rfqPriceGroupID = rpg.id AND rpgd.rfqAssyID = ra.id AND rpgd.isDeleted = 0        \n" +
                "		JOIN component com ON com.id = ra.partID        \n" +
                "		JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID        \n" +
                "		WHERE rfqrefID = (SELECT rfqrefID FROM rfq_assemblies WHERE id = prfqAssyID) AND ra.isDeleted = 0        \n" +
                "        ORDER BY rpg.id;        \n" +
                "  \n" +
                "	# Return Price Group        \n" +
                "		SELECT * FROM rfq_price_group WHERE id IN (SELECT rfqPriceGroupID FROM rfq_price_group_detail WHERE isDeleted = 0         \n" +
                "        AND refRFQID =(SELECT rfqrefID FROM rfq_assemblies WHERE id = prfqAssyID)) AND isDeleted = 0        \n" +
                "        ORDER BY id;        \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 07-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyAssyBOMQuote`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyAssyBOMQuote`(      \n" +
                "	IN poldAssyID INT(11),      \n" +
                "	IN pnewAssyID INT(11),        \n" +
                "	IN UserID INT(11),        \n" +
                "	IN pIsBOM TINYINT,      \n" +
                "	IN pIsExistingRFQ TINYINT,      \n" +
                "	IN pFromCustomerID INT(11),      \n" +
                "	IN pCustomerID INT(11),      \n" +
                "	IN pRfqFormID INT(11),      \n" +
                "	IN pCustomerApprovalComment TEXT,      \n" +
                "	IN pIsCopyPricing TINYINT,      \n" +
                "	IN pfromRFQAssyID INT(11),      \n" +
                "	IN pEmployeeID INT(11),      \n" +
                "    IN pRoleID INT(11)      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "DECLARE pCount INT(11);      \n" +
                "DECLARE pToRFQAssyID INT(11);       \n" +
                "DECLARE pRFQTypeID INT(11);       \n" +
                "DECLARE pRFQInDate DATETIME;       \n" +
                "DECLARE pRFQDueDate DATETIME;       \n" +
                "DECLARE pQuoteDateDiff INT(11);      \n" +
                "DECLARE pToAssemblyLineCount INT(11);      \n" +
                "DECLARE pisBOMVarified TINYINT(1);      \n" +
                "DECLARE pisReadyForPricing TINYINT(1);      \n" +
                "DECLARE vRFQID INT(11);      \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION      \n" +
                "BEGIN      \n" +
                "	ROLLBACK;      \n" +
                "	RESIGNAL;      \n" +
                "END;      \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING      \n" +
                "  BEGIN      \n" +
                "	ROLLBACK;      \n" +
                "	RESIGNAL;      \n" +
                "END;      \n" +
                "  \n" +
                "  \n" +
                "    START TRANSACTION;      \n" +
                "	SELECT COUNT(1) INTO pToAssemblyLineCount FROM  rfq_lineitems WHERE partID = pnewAssyID AND IFNULL(isDeleted,0) = 0;                              \n" +
                "    IF pIsBOM OR pToAssemblyLineCount = 0 THEN       \n" +
                "	INSERT INTO `rfq_lineitems` (	`rfqAssyBomID`, `rfqAssyID`, 	`lineID`,	`qpa`,	`refDesig`,	`custPN`,      \n" +
                "					`custPNID`,	`uomID`,	`description`,	`level`,`isInstall`,	`isPurchase`,      \n" +
                "					`isNoBidsPN`,	`isDraft`,	`isActive`,	`partTypeID`,		`partclassID`,      \n" +
                "					`leadQty`,	`attritionRate`,`totalQty`,	`manualAdj`,      \n" +
                "					`createdBy`,	`createdAt`,	      \n" +
                "					`customerRev`,	`flextronRev`,	`customerDescription`,	`numOfPosition`,      \n" +
                "					`valueAddedCost`,	`refRFQLineItemID`,	`dnpQty`,		`dnpDesig`,      \n" +
                "					`org_lineID`,	`org_qpa`,	`org_refDesig`,	`org_custPN`,		`org_uomName`,      \n" +
                "					`org_level`,	`org_isInstall`,`org_isPurchase`,			`org_customerRev`,      \n" +
                "					`org_customerDescription`,	`org_numOfPosition`,			`org_refLineID`,      \n" +
                "					`qpaDesignatorStep`,		`customerPartDesc`,			`org_customerPartDesc`,      \n" +
                "					`mergeLines`,	`lineMergeStep`,`isBuyDNPQty`,	`qpaDesignatorColorPriority`,      \n" +
                "					`miscStep`,	`partID`,	`duplicateCPNStep`,			`requireMountingTypeStep`,      \n" +
                "					`requireFunctionalTypeStep`,	`programingStatus`,`substitutesAllow`,`org_substitutesAllow`,      \n" +
                "					`numOfRows`, 	`org_numOfRows`, 	`restrictCPNUseWithPermissionStep`,	`restrictCPNUsePermanentlyStep`,      \n" +
                "					`restrictCPNUseInBOMStep`,	`customerApprovalCPN`,	`customerApprovalCPNBy`,	`customerApprovalCPNDate`, `dnpDesigCount`,      \n" +
                "					`org_dnpQty`, `org_dnpDesig`, `org_buyDNPQty`, `requireMountingTypeError`, `requireFunctionalTypeError`, `dnpQPARefDesStep`, `customerApprovalForDNPQPAREFDESStep`, `customerApprovalForDNPBuyStep`, `dnpInvalidREFDESStep`, `createByRoleId`, `updateByRoleId`, `deleteByRoleId`)      \n" +
                "				SELECT 	`rfqAssyBomID`,	`rfqAssyID`, 	`lineID`, 	`qpa`, 	`refDesig`, 	`custPN`,       \n" +
                "					`custPNID`, 	`uomID`, 	`description`, 	`level`,`isInstall`, 	`isPurchase`,      \n" +
                "					`isNoBidsPN`,  	`isDraft`, 	`isActive`, 	`partTypeID`, 		`partclassID`,      \n" +
                "					`leadQty`, 	`attritionRate`, `totalQty`,	`manualAdj`, 		      \n" +
                "					UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,       \n" +
                "					`customerRev`, 	`flextronRev`, 	`customerDescription`, 	`numOfPosition`,         \n" +
                "					`valueAddedCost`, 	`refRFQLineItemID`, 	`dnpQty`, 		`dnpDesig`,      \n" +
                "					`org_lineID`, 	`org_qpa`, 	`org_refDesig`, `org_custPN`, 		`org_uomName`,       \n" +
                "					`org_level`, 	`org_isInstall`, `org_isPurchase`, 			`org_customerRev`,      \n" +
                "					`org_customerDescription`,	`org_numOfPosition`, 			`org_refLineID`,       \n" +
                "					`qpaDesignatorStep`,		`customerPartDesc`,			`org_customerPartDesc`,	      \n" +
                "					`mergeLines`,	`lineMergeStep`,`isBuyDNPQty`,	`qpaDesignatorColorPriority`,      \n" +
                "					`miscStep`,	pnewAssyID `partID`,	`duplicateCPNStep`,			`requireMountingTypeStep`,      \n" +
                "					`requireFunctionalTypeStep`,	`programingStatus` ,`substitutesAllow`,`org_substitutesAllow`,                  \n" +
                "					`numOfRows`, 	`org_numOfRows`, 	`restrictCPNUseWithPermissionStep`,	`restrictCPNUsePermanentlyStep`,                  \n" +
                "					`restrictCPNUseInBOMStep`,	`customerApprovalCPN`,	`customerApprovalCPNBy`,	`customerApprovalCPNDate`, `dnpDesigCount`,              \n" +
                "					`org_dnpQty`, `org_dnpDesig`, `org_buyDNPQty`, `requireMountingTypeError`, `requireFunctionalTypeError`, `dnpQPARefDesStep`, `customerApprovalForDNPQPAREFDESStep`, `customerApprovalForDNPBuyStep`, `dnpInvalidREFDESStep`, `createByRoleId`, `updateByRoleId`, `deleteByRoleId`              \n" +
                "			 FROM rfq_lineitems WHERE partID = poldAssyID AND IFNULL(isDeleted,0) = 0;          \n" +
                "	INSERT INTO `rfq_lineitems_alternatepart` (	`rfqLineItemsID`,	`distributor`,	`distMfgCodeID`,	`distPN`,      \n" +
                "							`distMfgPNID`,		`mfgCode`,	`mfgCodeID`,		`mfgPN`,      \n" +
                "							`mfgPNID`,		`description`,	`isActive`,		`isApproved`,      \n" +
                "							`isNoBidsPN`,		`isDraft`,	`RoHSStatusID`,		`copyAlternetPartID`,      \n" +
                "							`createdBy`,		`createdAt`,	`mfgVerificationStep`,      \n" +
                "							`mfgDistMappingStep`,	`mfgCodeStep`,	`distVerificationStep`,	`distCodeStep`,      \n" +
                "							`getMFGPNStep`,		`obsoletePartStep`,			`mfgGoodPartMappingStep`,      \n" +
                "							`mfgPNStep`,		`distPNStep`,	`org_mfgCode`,      \n" +
                "							`org_mfgPN`,		`org_distributor`,`org_distPN`,		`badMfgPN`,      \n" +
                "							`distGoodPartMappingStep`,		`nonRohsStep`,		`epoxyStep`,      \n" +
                "							`invalidConnectorTypeStep`,`duplicateMPNInSameLineStep`,      \n" +
                "							`parttypeID`,		`mountingtypeID`,`partcategoryID`,	`partID`,      \n" +
                "							`userData1`,            `userData2`,	`userData3`,		`userData4`,      \n" +
                "							`userData5`,		`userData6`,	`userData7`,		`userData8`,      \n" +
                "							`userData9`,		`userData10`,	`mismatchMountingTypeStep`,      \n" +
                "							`mismatchFunctionalCategoryStep`,	`restrictUseWithPermissionStep`,      \n" +
                "							`restrictUsePermanentlyStep`,		`pickupPadRequiredStep`,      \n" +
                "							`matingPartRquiredStep`,		`driverToolsRequiredStep`,      \n" +
                "							`functionalTestingRequiredStep`,	`mismatchValueStep`,      \n" +
                "							`mismatchPackageStep`,			`mismatchToleranceStep`,      \n" +
                "							`mismatchTempratureStep`,		`mismatchPowerStep`,      \n" +
                "							`uomMismatchedStep`,      \n" +
                "							`programingRequiredStep`,	        `mismatchColorStep`, 	`customerApproval`,                              \n" +
                "							`customerApprovalBy`, `customerApprovalDate`,`isCustomerUnAppoval`,`customerUnAppovalBy`,`customerUnAppovalDate`,                  \n" +
                "							`restrictUseInBOMStep`,`mismatchNumberOfRowsStep`,`partPinIsLessthenBOMPinStep`,`tbdPartStep`,`exportControlledStep`,`restrictUseInBOMWithPermissionStep`,                  \n" +
                "							`isUnlockApprovedPart`,`unknownPartStep`, `defaultInvalidMFRStep`, `restrictUseInBOMExcludingAliasStep`, `restrictUseInBOMExcludingAliasWithPermissionStep`, `restrictUseExcludingAliasStep`, `restrictUseExcludingAliasWithPermissionStep`, `createByRoleId`, `updateByRoleId`, `deleteByRoleId`, `approvedMountingType`)    	      \n" +
                "				SELECT 			rl.id `rfqLineItemsID`, ra.`distributor`, ra.`distMfgCodeID`, 	ra.`distPN`,       \n" +
                "							ra.`distMfgPNID`, 	ra.`mfgCode`, 	ra.`mfgCodeID`, 	ra.`mfgPN`,       \n" +
                "							ra.`mfgPNID`,		ra.`description`, ra.`isActive`, 	ra.`isApproved`,       \n" +
                "							ra.`isNoBidsPN`, 	ra.`isDraft`, 	ra.`RoHSStatusID`, 	ra.`copyAlternetPartID`,      \n" +
                "							UserID `createdBy`,	fun_DatetimetoUTCDateTime() `createdAt`,	ra.`mfgVerificationStep`,       \n" +
                "							ra.`mfgDistMappingStep`,ra.`mfgCodeStep`,ra.`distVerificationStep`,ra.`distCodeStep`,        \n" +
                "							ra.`getMFGPNStep`, 	ra.`obsoletePartStep`, 			ra.`mfgGoodPartMappingStep`,      \n" +
                "							ra.`mfgPNStep`, 	ra.`distPNStep`, ra.`org_mfgCode`,	      \n" +
                "							ra.`org_mfgPN`,		ra.`org_distributor`,ra.`org_distPN`,	ra.`badMfgPN`,      \n" +
                "							ra.`distGoodPartMappingStep`,		ra.`nonRohsStep`,		ra.`epoxyStep`,      \n" +
                "							ra.`invalidConnectorTypeStep`,ra.`duplicateMPNInSameLineStep`,      \n" +
                "							ra.`parttypeID`,		ra.`mountingtypeID`,ra.`partcategoryID`,	pnewAssyID `partID`,      \n" +
                "							ra.`userData1`,         ra.`userData2`,	ra.`userData3`,		ra.`userData4`,      \n" +
                "							ra.`userData5`,		ra.`userData6`,	ra.`userData7`,		ra.`userData8`,      \n" +
                "							ra.`userData9`,		ra.`userData10`,	ra.`mismatchMountingTypeStep`,      \n" +
                "							ra.`mismatchFunctionalCategoryStep`,	ra.`restrictUseWithPermissionStep`,      \n" +
                "							ra.`restrictUsePermanentlyStep`,	ra.`pickupPadRequiredStep`,      \n" +
                "							ra.`matingPartRquiredStep`,		ra.`driverToolsRequiredStep`,      \n" +
                "							ra.`functionalTestingRequiredStep`,	ra.`mismatchValueStep`,      \n" +
                "							ra.`mismatchPackageStep`,		ra.`mismatchToleranceStep`,      \n" +
                "							ra.`mismatchTempratureStep`,		ra.`mismatchPowerStep`,      \n" +
                "							ra.`uomMismatchedStep`,      \n" +
                "							ra.`programingRequiredStep`,	        ra.`mismatchColorStep`,	ra.`customerApproval`,                              \n" +
                "							ra.`customerApprovalBy`, 		ra.`customerApprovalDate`,ra.`isCustomerUnAppoval`,ra.`customerUnAppovalBy`,ra.`customerUnAppovalDate`,                  \n" +
                "							ra.`restrictUseInBOMStep`,ra.`mismatchNumberOfRowsStep`,ra.`partPinIsLessthenBOMPinStep`,ra.`tbdPartStep`,ra.`exportControlledStep`,ra.`restrictUseInBOMWithPermissionStep`,                  \n" +
                "							ra.`isUnlockApprovedPart`,ra.`unknownPartStep`, ra.`defaultInvalidMFRStep`, ra.`restrictUseInBOMExcludingAliasStep`, ra.`restrictUseInBOMExcludingAliasWithPermissionStep`, ra.`restrictUseExcludingAliasStep`, ra.`restrictUseExcludingAliasWithPermissionStep`, ra.`createByRoleId`, ra.`updateByRoleId`, ra.`deleteByRoleId`, ra.`approvedMountingType`                               \n" +
                "				FROM rfq_lineitems_alternatepart ra        \n" +
                "				JOIN rfq_lineitems ral ON ral.id = ra.rfqLineItemsID AND ral.partID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0        \n" +
                "				JOIN rfq_lineitems rl ON rl.lineID = ral.lineID AND rl.partID = pnewAssyID AND IFNULL(rl.isDeleted,0) = 0        \n" +
                "				WHERE ra.partID = poldAssyID AND IFNULL(ra.isDeleted, 0) = 0;      \n" +
                "  \n" +
                "		INSERT INTO rfq_lineitems_additional_comment (`lineID`,`description`,`rfqLineItemID`,`createdBy`,`createdAt`,`partID`)                            \n" +
                "			SELECT rl.lineID, ral.description, rl.id `rfqLineItemID`, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, pnewAssyID `partID` FROM rfq_lineitems_additional_comment rlc                            \n" +
                "			JOIN rfq_lineitems ral ON ral.id = rlc.rfqLineItemID AND ral.partID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0        \n" +
                "			JOIN rfq_lineitems rl ON rl.lineID = ral.lineID AND rl.partID = pnewAssyID AND IFNULL(rl.isDeleted,0) = 0        \n" +
                "			WHERE rlc.partID = poldAssyID AND IFNULL(rlc.isDeleted, 0) = 0;                             \n" +
                "  \n" +
                "		INSERT INTO rfq_lineitems_approval_comment (`comment`,`approvalBy`,`approvalDate`,                            \n" +
                "				`mfgCode`,`mfgPN`,`approvalType`,                            \n" +
                "				`createdBy`,`createdAt`, `errorCode`,`rfqLineItemsID`,              \n" +
                "				`requiredToShowOnQuoteSummary`, `isCustomerApproved`, `createByRoleId`, `updateByRoleId`, `deleteByRoleId`)	                            \n" +
                "			SELECT rac.comment,rac.`approvalBy`,rac.`approvalDate`,                            \n" +
                "				rac.`mfgCode`,rac.`mfgPN`,rac.`approvalType`,                             \n" +
                "			UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,rac.errorCode, rl.id `rfqLineItemsID`,              \n" +
                "			rac.`requiredToShowOnQuoteSummary`, rac.`isCustomerApproved`, rac.`createByRoleId`, rac.`updateByRoleId`, rac.`deleteByRoleId`                            \n" +
                "			FROM rfq_lineitems_approval_comment rac                            \n" +
                "			JOIN rfq_lineitems ral ON ral.id = rac.rfqLineItemsID AND ral.partID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0        \n" +
                "			JOIN rfq_lineitems rl ON rl.lineID = ral.lineID AND rl.partID = pnewAssyID AND IFNULL(rl.isDeleted,0) = 0        \n" +
                "			WHERE IFNULL(rac.isDeleted, 0) = 0;                              \n" +
                "		INSERT INTO `rfq_lineitems_approval_comment`                            \n" +
                "		(`rfqLineItemsAlternatePartID`,`comment`,`approvalBy`,`approvalDate`,                            \n" +
                "		`mfgCode`,`mfgPN`,`approvalType`,                            \n" +
                "             `createdBy`,`createdAt`, `errorCode`,              \n" +
                "             `requiredToShowOnQuoteSummary`, `isCustomerApproved`, `createByRoleId`, `updateByRoleId`, `deleteByRoleId`)                            \n" +
                "             SELECT  rl.id `rfqLineItemsAlternatePartID`, rac.comment,rac.`approvalBy`,rac.`approvalDate`,                            \n" +
                "             rac.`mfgCode`,rac.`mfgPN`,rac.`approvalType`,                             \n" +
                "			UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,rac.errorCode,              \n" +
                "			rac.`requiredToShowOnQuoteSummary`, rac.`isCustomerApproved`, rac.`createByRoleId`, rac.`updateByRoleId`, rac.`deleteByRoleId`      \n" +
                "			FROM rfq_lineitems_approval_comment rac                            \n" +
                "			JOIN rfq_lineitems_alternatepart ral ON ral.id = rac.rfqLineItemsAlternatePartID AND ral.partID = poldAssyID AND IFNULL(ral.isDeleted,0) = 0        \n" +
                "			JOIN rfq_lineitems_alternatepart rl ON rl.partID = pnewAssyID AND rl.mfgPNID = ral.mfgPNID AND IFNULL(rl.isDeleted,0) = 0        \n" +
                "			WHERE IFNULL(rac.isDeleted, 0) = 0;                             \n" +
                "	   -- Have to add Part assembly relation entry manage      \n" +
                "	   CALL Sproc_CreatePartAssyBomRelationshipForAllParent (pnewAssyID, UserID);      \n" +
                "	   END IF;                 \n" +
                "  \n" +
                "	   IF IFNULL(pIsBOM,FALSE) != TRUE THEN                 \n" +
                "	   	IF IFNULL(pIsExistingRFQ ,0) = 0 THEN      \n" +
                "        select salesCommissionTo into @salesCommissionTo from rfqforms where id = (select rfqrefID from rfq_assemblies where id = pfromRFQAssyID);  \n" +
                "			INSERT INTO `rfqforms`(	`customerId`,`employeeID`,`isActive`,`quoteNote`,`createdBy`,`createdAt`,`updatedBy`,`salesCommissionTo`)      \n" +
                "					VALUES (pCustomerID, pEmployeeID, TRUE, \"\", UserID, fun_DatetimetoUTCDateTime(),UserID,@salesCommissionTo);      \n" +
                "			SELECT LAST_INSERT_ID() INTO pRfqFormID;        \n" +
                "		END IF;                         \n" +
                "		IF (SELECT COUNT(1) FROM rfqType WHERE `name` = 'Repeat') = 0 THEN      \n" +
                "			INSERT INTO rfqType (`name`, `description`, `isActive`,`createdBy`,`createdAt`,`updatedBy`)              \n" +
                "				VALUES ('Repeat', 'Repeat Assembly', TRUE, UserID, fun_DatetimetoUTCDateTime(),UserID);                             \n" +
                "			SELECT LAST_INSERT_ID() INTO pRFQTypeID;                           \n" +
                "		ELSE              \n" +
                "		       SELECT id INTO pRFQTypeID FROM rfqType WHERE `name` = 'Repeat';              \n" +
                "		END IF;               \n" +
                "		SELECT quoteInDate , quoteDueDate INTO pRFQInDate, pRFQDueDate FROM rfq_assemblies WHERE id = pfromRFQAssyID AND IFNULL(isDeleted, 0) = 0;      \n" +
                "  \n" +
                "		SELECT DATEDIFF(pRFQDueDate, pRFQInDate) INTO pQuoteDateDiff;      \n" +
                "  \n" +
                "		INSERT INTO `rfq_assemblies`(`rfqrefID`,`assyNote`,`isActive`,`quoteNote`,`assyCloseNote`,`assyClosedStatus`,      \n" +
                "				`assyClosedReasonID`,`assyClosedDate`,`IsRepeated`,`createdBy`,`createdAt`,`updatedBy`,                            \n" +
                "				`assemblyNumber`,`assemblyDescription`,`assemblyRev`,`status`,`isBOMVerified`,`isReadyForPricing`,      \n" +
                "				`RoHSStatusID`,`isRepeat`,`description`,`assemblyVersion`,`isSummaryComplete`,      \n" +
                "				`repeatExpectedQty`,`repeatFrequency`,`quoteFinalStatus`,`bomStatus`,`jobTypeID`,      \n" +
                "				`RFQTypeID`,`partID`,`assemblyTypeID`,`eau`,`proposedBuildQty`,`noOfBuild`,`timePeriod`,      \n" +
                "				`additionalRequirement`,`quoteInDate`, `quoteDueDate`,      \n" +
                "				`copyRefRfqId`,`copyConfirmationDescription`)      \n" +
                "		SELECT pRfqFormID `rfqrefID` ,`assyNote`,`isActive`,`quoteNote`,`assyCloseNote`,`assyClosedStatus`,      \n" +
                "				`assyClosedReasonID`,`assyClosedDate`,`IsRepeated`,UserID `createdBy`,	fun_DatetimetoUTCDateTime() `createdAt`, UserID `updatedBy`,                               \n" +
                "				`assemblyNumber`,`assemblyDescription`,`assemblyRev`, 1 ,`isBOMVerified`,`isReadyForPricing`,      \n" +
                "				`RoHSStatusID`,`isRepeat`,`description`,`assemblyVersion`, 0 ,      \n" +
                "				`repeatExpectedQty`,`repeatFrequency`, 1 ,`bomStatus`,`jobTypeID`,      \n" +
                "				pRFQTypeID `RFQTypeID`,pnewAssyID `partID`,`assemblyTypeID`,`eau`,`proposedBuildQty`,`noOfBuild`,`timePeriod`,      \n" +
                "				`additionalRequirement`,fun_DatetimetoUTCDateTime() `quoteInDate`,DATE_ADD(fun_DatetimetoUTCDateTime(), INTERVAL pQuoteDateDiff DAY) `quoteDueDate`,                              \n" +
                "				pfromRFQAssyID `copyRefRfqId`, pCustomerApprovalComment `copyConfirmationDescription`      \n" +
                "		FROM rfq_assemblies WHERE id = pfromRFQAssyID AND IFNULL(isDeleted, 0) = 0;      \n" +
                "  \n" +
                "		SELECT LAST_INSERT_ID() INTO pToRFQAssyID;        \n" +
                "  \n" +
                "		INSERT INTO `rfq_assy_quantity`(`rfqAssyID`, `requestQty`,`materialTotal`,`materialHandling`,`materialScrapPercentage`,      \n" +
                "				`materialScrap`,`materialCarryingCostPercentage`,`materialCarryingCost`,`excessQtyTotal`,      \n" +
                "				`excessTotalDollar`,`leadCostTotal`,`attritionRateTotal`,      \n" +
                "				`createdBy`,`createdAt`,`quantityType`)      \n" +
                "		SELECT pToRFQAssyID `rfqAssyID`,`requestQty`,`materialTotal`,`materialHandling`,`materialScrapPercentage`,      \n" +
                "				`materialScrap`,`materialCarryingCostPercentage`,`materialCarryingCost`,`excessQtyTotal`,      \n" +
                "				`excessTotalDollar`,`leadCostTotal`,`attritionRateTotal`,      \n" +
                "				UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,`quantityType`      \n" +
                "		FROM rfq_assy_quantity WHERE rfqAssyID = pfromRFQAssyID AND IFNULL(isDeleted, 0) = 0      \n" +
                "        AND rfqPriceGroupId IS NULL AND rfqPriceGroupDetailId IS NULL;      \n" +
                "		INSERT INTO `rfq_assy_quantity_turn_time`(`rfqAssyQtyID`,`turnTime`,`unitOfTime`,`createdBy`,`createdAt`)      \n" +
                "		SELECT rq.`Id`, rqt.`turnTime`, rqt.`unitOfTime`, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`      \n" +
                "		FROM rfq_assy_quantity_turn_time rqt        \n" +
                "		JOIN rfq_assy_quantity raq ON raq.id = rqt.rfqAssyQtyID AND raq.rfqAssyID = pfromRFQAssyID AND IFNULL(raq.isDeleted,0) = 0 AND raq.rfqPriceGroupId IS NULL AND raq.rfqPriceGroupDetailId IS NULL      \n" +
                "		LEFT JOIN rfq_assy_quantity rq ON rq.requestQty = raq.requestQty AND rq.rfqAssyID = pToRFQAssyID AND IFNULL(rq.isDeleted,0) = 0        \n" +
                "		WHERE IFNULL(rqt.isDeleted, 0) = 0;                          \n" +
                "		INSERT INTO rfq_assy_quantity_price_selection_setting(`qtyID`,	`stock`,	`price`,                        \n" +
                "									`isCheckRequiredQty`,	`isLeadTime`,                        \n" +
                "									`createdBy`,	`createdAt`,	`remark`,                        \n" +
                "									`stockPercentage`,	`packagingID`,`settingType`,`leadTime`)                        \n" +
                "									SELECT rq.`Id` `qtyID`, rqt.`stock`, rqt.`price`,                        \n" +
                "									rqt.`isCheckRequiredQty`,	rqt.`isLeadTime`,                         \n" +
                "									UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, rqt.`remark`,                        \n" +
                "									rqt.`stockPercentage`,	rqt.`packagingID`, rqt.`settingType`,rqt.`leadTime`  \n" +
                "									FROM rfq_assy_quantity_price_selection_setting rqt        \n" +
                "									JOIN rfq_assy_quantity raq ON raq.id = rqt.qtyID AND raq.rfqAssyID = pfromRFQAssyID AND IFNULL(raq.isDeleted,0) = 0        \n" +
                "									LEFT JOIN rfq_assy_quantity rq ON rq.requestQty = raq.requestQty AND rq.rfqAssyID =  pToRFQAssyID AND IFNULL(rq.isDeleted,0) = 0        \n" +
                "									WHERE IFNULL(rqt.isDeleted, 0) = 0;                              \n" +
                "		# copy rfq_consolidated_mfgpn_lineitem data from old assy to new assy      \n" +
                "		INSERT INTO `rfq_consolidated_mfgpn_lineitem`        \n" +
                "					(`lineID`, `isInstall`, `isPurchase`, `rfqAssyID`, `partTypeID`, `partClassID`, `leadQty`, `attritionRate`, `isActive`, `rfqLineItemID`, `uomID`,        \n" +
                "					`isNoBidsPN`, `isDraft`, `leads`, `totalQty`, `requestQty`, `originalTotalQty`, `qpa`, `createdAt`, `createdBy`, `isMultiple`, `valueAddedCost`,         \n" +
                "					`numOfPosition`,`consolidatedLineItemIDs`, `refDesig`,`numOfRows`,`consolidatedpartlineID`,`isqpaMismatch`,`restrictCPNUseInBOMStep`,`restrictCPNUsePermanentlyStep`,`restrictCPNUseWithPermissionStep`,`custPNID`)        \n" +
                "				SELECT  rcl.`lineID`, rcl.`isInstall`, rcl.`isPurchase`, pToRFQAssyID `rfqAssyID`, rcl.`partTypeID`, rcl.`partClassID`, rcl.`leadQty`, rcl.`attritionRate`,        \n" +
                "					rcl.`isActive`, rcl.`rfqLineItemID`, rcl.`uomID`, rcl.`isNoBidsPN`, rcl.`isDraft`, rcl.`leads`, rcl.`totalQty`, rcl.`requestQty`, rcl.`originalTotalQty`,         \n" +
                "					rcl.`qpa`,fun_DatetimetoUTCDateTime() `createdAt`,UserID `createdBy`, rcl.`isMultiple`, rcl.`valueAddedCost`, rcl.`numOfPosition`,        \n" +
                "					fun_getconsolidatedlineitems(rcl.id,pfromRFQAssyID,pnewAssyID, poldAssyID) `consolidatedLineItemIDs` ,                              \n" +
                "					rcl.`refDesig`,rcl.`numOfRows`,rcl.`consolidatedpartlineID`,rcl.`isqpaMismatch`,rcl.`restrictCPNUseInBOMStep`,rcl.`restrictCPNUsePermanentlyStep`,rcl.`restrictCPNUseWithPermissionStep`,rcl.`custPNID`        \n" +
                "					FROM rfq_consolidated_mfgpn_lineitem rcl        \n" +
                "					WHERE rcl.rfqAssyID = pfromRFQAssyID AND rcl.deletedAt IS NULL;      \n" +
                "  \n" +
                "		# copy rfq_consolidated_mfgpn_lineitem_alternate data from old assy to new assy        \n" +
                "		INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`        \n" +
                "					(`mfgPN`, `consolidateID`, `mfgPNID`, `createdBy`, `createdAt`, `mfgCodeID`, `PIDCode`, `customerApproval`,isdeleted,deletedAt,deletedBy,`restrictUseInBOMStep`,`restrictUseWithPermissionStep`,`restrictUsePermanentlyStep`,`restrictUseInBOMWithPermissionStep`)        \n" +
                "					SELECT rap.`mfgPN`,rcl.id `consolidateID`, rap.`mfgPNID`, UserID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`, rap.`mfgCodeID`,                       \n" +
                "					com.PIDCode `PIDCode` , rap.`customerApproval`, rcl.isdeleted, rcl.deletedAt, rcl.deletedBy,rap.`restrictUseInBOMStep`,rap.`restrictUseWithPermissionStep`,rap.`restrictUsePermanentlyStep`,rap.`restrictUseInBOMWithPermissionStep`        \n" +
                "					FROM rfq_lineitems_alternatepart rap        \n" +
                "					JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.rfqLineItemID = rap.rfqLineItemsID       \n" +
                "					JOIN component com ON com.id = rap.mfgPNID AND IFNULL(com.isDeleted,0) = 0        \n" +
                "					WHERE rcl.rfqAssyId = pToRFQAssyID          \n" +
                "					GROUP BY rap.mfgPNID, rap.rfqLineItemsID;      \n" +
                "  \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS result;        \n" +
                "					CREATE TEMPORARY TABLE result         \n" +
                "					SELECT rcl.lineID, raq.requestQty, rcl.qpa, rcl.rfqLineItemID, rlq.*                               \n" +
                "					FROM rfq_consolidate_mfgpn_lineitem_quantity rlq         \n" +
                "					LEFT JOIN rfq_consolidated_mfgpn_lineitem rcl ON rcl.id = rlq.consolidateID AND rcl.rfqAssyID = pfromRFQAssyID        \n" +
                "					LEFT JOIN rfq_assy_quantity raq ON raq.id = rlq.qtyID      \n" +
                "					WHERE rlq.isDeleted = 0 AND rcl.isDeleted = 0 AND raq.isDeleted = 0 AND raq.rfqAssyID = pfromRFQAssyID;        \n" +
                "  \n" +
                "				# create temporary table for mapping quantity between old assembly and new assembly        \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS mapping;        \n" +
                "					CREATE TEMPORARY TABLE mapping        \n" +
                "					SELECT a.requestQty, IFNULL((SELECT MAX(b.requestqty)  FROM rfq_assy_quantity b         \n" +
                "					WHERE b.rfqAssyID = pfromRFQAssyID AND b.requestqty <= a.requestQty AND b.isDeleted = 0),        \n" +
                "					(SELECT MIN(b.requestqty)  FROM rfq_assy_quantity b         \n" +
                "					WHERE b.rfqAssyID = pfromRFQAssyID AND b.requestqty > a.requestQty AND b.isDeleted = 0))mappingQty        \n" +
                "					FROM rfq_assy_quantity a         \n" +
                "					WHERE a.rfqAssyID = pToRFQAssyID;        \n" +
                "				# copy rfq_consolidate_mfgpn_lineitem_quantity data from old assy to new assy        \n" +
                "  \n" +
                "		INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`        \n" +
                "					(`qtyID`, `finalPrice`, `consolidateID`, `createdAt`, `createdBy`, `unitPrice`, `supplier`, `selectedMpn`, `selectionMode`,        \n" +
                "					`min`, `mult`, `currentStock`,`selectedPIDCode`,`leadTime`,`supplierStock`,`grossStock`,                              \n" +
                "					`pricingSuppliers`, `apiLead`,`componentID`,`packaging`,`rfqQtySupplierID`,                              \n" +
                "					`quoteQty`,`pricenotselectreason`,`availableInternalStock`,`availableInternalStockTimeStamp`,                              \n" +
                "					`isBomUpdate`,`LOAprice`,`quoteQtyEach`, `unitEachPrice`)        \n" +
                "					SELECT rq.id `qtyID`, R.finalPrice `finalPrice`, cl.id `consolidateID`,         \n" +
                "					fun_DatetimetoUTCDateTime() `createdAt`, UserID `createdBy`, R.unitPrice `unitPrice`, R.`supplier`, R.`selectedMpn`,        \n" +
                "					R.`selectionMode`, R.`min`, R.`mult`, R.`currentStock`, R.`selectedPIDCode`,R.`leadTime`,R.`supplierStock`,R.`grossStock`,                              \n" +
                "					R.`pricingSuppliers`,R.`apiLead`,R.`componentID`,R.`packaging`,R.`rfqQtySupplierID`,                              \n" +
                "					R.`quoteQty`,R.`pricenotselectreason`,R.`availableInternalStock`,R.`availableInternalStockTimeStamp`,                              \n" +
                "					R.`isBomUpdate`,R.`LOAprice` ,R.`quoteQtyEach`, R.`unitEachPrice`         \n" +
                "					FROM rfq_consolidated_mfgpn_lineitem cl        \n" +
                "					JOIN rfq_assy_quantity rq ON rq.rfqAssyID = cl.rfqAssyID AND rq.isDeleted = 0        \n" +
                "					LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity clq ON clq.consolidateID = cl.id AND clq.qtyID = rq.id AND clq.isDeleted = 0       \n" +
                "					LEFT JOIN result R ON R.rfqLineItemID = cl.rfqLineItemID      \n" +
                "					LEFT JOIN mapping m ON  rq.requestQty = m.requestQty         \n" +
                "					WHERE cl.rfqAssyID = pToRFQAssyID AND cl.isDeleted = 0 AND m.mappingQty = R.requestQty;             \n" +
                "  \n" +
                "		# Start Labor details	copy            \n" +
                "		INSERT INTO `rfq_labor_assy_qpa_detail`            \n" +
                "				    (`rfqAssyID`, `partID`, `subAssyID`, `perBuildQty`, `bomInternalVersion`,            \n" +
                "				     `isDeleted`, `createdBy`, `createdAt`,             \n" +
                "				     `originalQPA`, `isMismatchQPA`, `parPartID`, `level`, `isInstall`,            \n" +
                "				     `createByRoleId`, `updateByRoleId`)              \n" +
                "				SELECT pToRFQAssyID `rfqAssyID`, rl.`partID`, rl.`subAssyID`, rl.`perBuildQty`, rl.`bomInternalVersion`,            \n" +
                "					0, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,            \n" +
                "					rl.`originalQPA`, rl.`isMismatchQPA`, rl.`parPartID`, rl.`level`, rl.`isInstall`,            \n" +
                "					rl.`createByRoleId`, rl.`updateByRoleId` FROM rfq_labor_assy_qpa_detail rl            \n" +
                "				WHERE rl.rfqAssyID = pfromRFQAssyID AND rl.isDeleted = 0;            \n" +
                "		INSERT INTO `rfq_assy_labor_bom_mountingtype_qpa_detail`            \n" +
                "				    (`rfqAssyID`, `partID`, `mountingTypeID`, `lineCount`,            \n" +
                "				     `totalQPA`, `isDeleted`, `createdBy`,            \n" +
                "				     `createdAt`, `subAssyID`,            \n" +
                "				     `isInstall`, `createByRoleId`, `updateByRoleId`)            \n" +
                "				SELECT pToRFQAssyID `rfqAssyID`,rlm.`partID`, rlm.`mountingTypeID`, rlm.`lineCount`,            \n" +
                "				     rlm.`totalQPA`, 0, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`, rlm.`subAssyID`,            \n" +
                "				     rlm.`isInstall`, rlm.`createByRoleId`, rlm.`updateByRoleId`            \n" +
                "				FROM rfq_assy_labor_bom_mountingtype_qpa_detail rlm            \n" +
                "				WHERE rlm.rfqAssyID = pfromRFQAssyID AND rlm.isDeleted = 0;              \n" +
                "  \n" +
                "		INSERT INTO `rfq_assy_qtywise_bom_laborcosting_detail`            \n" +
                "				    (`rfqAssyQtyID`, `rfqAssyBOMMountingID`, `price`, `perAssyPrice`,            \n" +
                "				     `isDeleted`, `createdBy`, `createdAt`,            \n" +
                "				     `isPricePending`, `overHeadPrice`, `overHeadAssyPrice`)            \n" +
                "			SELECT rq.id `rfqAssyQtyID`, lmc.id `rfqAssyBOMMountingID`,  rlc.`price`, rlc.`perAssyPrice`,            \n" +
                "					0, UserID `createdBy`, fun_DatetimetoUTCDateTime() `createdAt`,            \n" +
                "					rlc.`isPricePending`, rlc.`overHeadPrice`, rlc.`overHeadAssyPrice`            \n" +
                "					FROM rfq_assy_qtywise_bom_laborcosting_detail rlc        \n" +
                "					JOIN rfq_assy_quantity raq ON raq.id = rlc.rfqAssyQtyID AND raq.rfqAssyID = pfromRFQAssyID AND IFNULL(raq.isDeleted,0) = 0  AND raq.rfqPriceGroupId IS NULL AND raq.rfqPriceGroupDetailId IS NULL      \n" +
                "					LEFT JOIN rfq_assy_quantity rq ON rq.requestQty = raq.requestQty AND rq.rfqAssyID = pToRFQAssyID AND IFNULL(rq.isDeleted,0) = 0              \n" +
                "					JOIN rfq_assy_labor_bom_mountingtype_qpa_detail lm ON lm.id = rlc.rfqAssyBOMMountingID AND lm.rfqAssyID = pfromRFQAssyID AND IFNULL(lm.isDeleted,0) = 0  AND lm.mountingTypeID IS NOT NULL         \n" +
                "					LEFT JOIN rfq_assy_labor_bom_mountingtype_qpa_detail lmc ON lmc.mountingTypeID = lm.mountingTypeID AND lmc.rfqAssyID = pToRFQAssyID AND IFNULL(lmc.isDeleted,0) = 0 AND lmc.mountingTypeID IS NOT NULL         \n" +
                "					WHERE IFNULL(rlc.isDeleted, 0) = 0;             \n" +
                "		# End Labor details copy		            \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS mapping;        \n" +
                "					DROP TEMPORARY TABLE IF EXISTS result;      \n" +
                "  \n" +
                "					SELECT liveVersion INTO @internalVerion FROM component WHERE id = pnewAssyID;                              \n" +
                "					UPDATE rfq_assemblies SET partCostingBOMInternalVersion = @internalVerion WHERE id = pToRFQAssyID AND IFNULL(isDeleted, 0) = 0;      \n" +
                "  \n" +
                "    END IF;      \n" +
                "    COMMIT;                              \n" +
                "	SELECT pToRFQAssyID;         \n" +
                "    IF IFNULL(pIsBOM,FALSE) != TRUE THEN                 \n" +
                "		SELECT rfqrefID INTO vRFQID FROM rfq_assemblies WHERE id = pToRFQAssyID;      \n" +
                "		CALL Sproc_CopyRFQAssyDocFolderToNewRFQAssy(pfromRFQAssyID,pToRFQAssyID,UserID);        \n" +
                "		CALL Sproc_getRefTransDetailForDocument ('bom', pfromRFQAssyID);        \n" +
                "		CALL Sproc_getRefTransDetailForDocument ('bom', pToRFQAssyID);        \n" +
                "        CALL Sproc_CreateCostSummaryEntry (vRFQID,UserID,pRoleID);        \n" +
                "    END IF;        \n" +
                "	-- SELECT * FROM rfq_lineitems WHERE partID = pnewAssyID AND isDeleted = 0;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(                                                                        \n" +
                "	IN ppageIndex INT(11),                                                                        \n" +
                "	IN precordPerPage INT(11),                                                                        \n" +
                "	IN pOrderBy VARCHAR(255),                                                                        \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                        \n" +
                "	IN rfqAssyID INT(11),                                                                        \n" +
                "	IN puserID INT (11),                              \n" +
                "	IN ppackageing TINYINT(1),                              \n" +
                "	IN pcustomerID INT(11)                                                                   \n" +
                "    )  \n" +
                "BEGIN                                                                        \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                                                        \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                    \n" +
                "	    DECLARE ppartid INT(11);                                                                    \n" +
                "	    SET @SQLString = NULL;                       \n" +
                "	      SELECT partid INTO ppartid FROM rfq_assemblies WHERE id=rfqAssyID AND deletedat IS NULL;                                                                         \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                                                        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                        \n" +
                "		ELSE                                                                        \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                                                         \n" +
                "		END IF;	                                                                        \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                                                        \n" +
                "			SET pWhereClause = '1=1' ;                                                                        \n" +
                "		END IF;	                                                                        \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                         \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                        \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                        \n" +
                "		ELSE	                                                                        \n" +
                "			SET rowNumWhere = '';                                                                        \n" +
                "		END IF;	                    \n" +
                "  \n" +
                "  \n" +
                "		SELECT                                                                \n" +
                "                     GROUP_CONCAT(DISTINCT                                                                \n" +
                "				CONCAT(                                                                \n" +
                "					'Max((IF(ra.requestQty = ''',                                                                \n" +
                "						ra.requestQty,                                                                \n" +
                "					''', rq.finalPrice, null))) AS ''',                                                                \n" +
                "						ra.requestQty,''''                                                                \n" +
                "					)                                                                \n" +
                "					) INTO @SQLString                                                                \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                                                        \n" +
                "		   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                                                        \n" +
                "		   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                                                        \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NULL;   \n" +
                "  \n" +
                "            SELECT GROUP_CONCAT(DISTINCT    \n" +
                "				CONCAT(    \n" +
                "					'Max((IF(ra.requestQty = ''',    \n" +
                "						ra.requestQty,    \n" +
                "					''', rq.finalPrice, null))) AS ''',    \n" +
                "						pg.name,''''    \n" +
                "					)) INTO @SQLGroupString    \n" +
                "		   FROM rfq_consolidate_mfgpn_lineitem_quantity rq    \n" +
                "		   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID    \n" +
                "		   JOIN  rfq_price_group pg ON pg.id = rq.rfqPriceGroupId        \n" +
                "		   LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity pgq ON pgq.refConsolidateLineitemQtyId = rq.id        \n" +
                "		   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id    \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NOT NULL;     \n" +
                "  \n" +
                "      	IF(@SQLString IS NOT NULL and @SQLGroupString is not null) THEN                                                                        \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                                                        \n" +
                "					SELECT                                                                         \n" +
                "						rl.id,rl.isPurchase, rl.numOfPosition,rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,rl.uomID,fun_getUnitAbbrivationByID(rl.uomID) unitName,rl.isqpaMismatch,                \n" +
                "						rl.restrictCPNUseInBOMStep,rl.restrictCPNUsePermanentlyStep,rl.restrictCPNUseWithPermissionStep,                                                                                     \n" +
                "						(select partTypeName from rfq_parttypemst where id=co.functionalcategoryid) partTypeName, rm.name,rl.refDesig,                                                         \n" +
                "						rl.qpa,rl.consolidatedpartlineID,              \n" +
                "						fun_getPartStatusNameByID(co.PartStatus) PartStatus ,              \n" +
                "						co.ltbDate AS LTBDate,                                                    \n" +
                "						co.eolDate AS EOLDate,',(SELECT fun_getCommonConsolidateLineComponent(pcustomerID)),',          \n" +
                "						',(SELECT fun_getCommonConsolidateLineComponentExport(ppackageing)),',                                     \n" +
                "						',(SELECT fun_getCommonConsolidateLineMFGPNWithPackaging(ppackageing,ppartid)),', ',                                                                         \n" +
                "						@SQLString,', ',@SQLGroupString ,' FROM rfq_consolidated_mfgpn_lineitem rl                                                                        \n" +
                "						 JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID and rq.deletedAt is NULL                                                                       \n" +
                "					        JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id  and ra.deletedAt is NULL                         \n" +
                "						LEFT JOIN component co ON co.id=rq.componentid                     \n" +
                "						LEFT JOIN rfq_mountingtypemst rm ON co.mountingTypeID=rm.id                                                                         \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'                                                               \n" +
                "						AND ((co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR partstatus NOT IN (1))                                                             \n" +
                "					GROUP BY rl.id');                                                                          \n" +
                "			END IF;  \n" +
                "			IF(@SQLString IS NOT NULL and @SQLGroupString is null) THEN                                                                        \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                                                        \n" +
                "					SELECT                                                                         \n" +
                "						rl.id,rl.isPurchase, rl.numOfPosition,rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID,rl.uomID,fun_getUnitAbbrivationByID(rl.uomID) unitName,rl.isqpaMismatch,                \n" +
                "						rl.restrictCPNUseInBOMStep,rl.restrictCPNUsePermanentlyStep,rl.restrictCPNUseWithPermissionStep,                                                                                     \n" +
                "						(select partTypeName from rfq_parttypemst where id=co.functionalcategoryid) partTypeName, rm.name,rl.refDesig,                                                         \n" +
                "						rl.qpa,rl.consolidatedpartlineID,              \n" +
                "						fun_getPartStatusNameByID(co.PartStatus) PartStatus ,              \n" +
                "						co.ltbDate AS LTBDate,                                                    \n" +
                "						co.eolDate AS EOLDate,',(SELECT fun_getCommonConsolidateLineComponent(pcustomerID)),',          \n" +
                "						',(SELECT fun_getCommonConsolidateLineComponentExport(ppackageing)),',                                     \n" +
                "						',(SELECT fun_getCommonConsolidateLineMFGPNWithPackaging(ppackageing,ppartid)),', ',                                                                         \n" +
                "						@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                                                        \n" +
                "						 JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID and rq.deletedAt is NULL                                                                       \n" +
                "					        JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id  and ra.deletedAt is NULL                         \n" +
                "						LEFT JOIN component co ON co.id=rq.componentid                     \n" +
                "						LEFT JOIN rfq_mountingtypemst rm ON co.mountingTypeID=rm.id                                                                         \n" +
                "					WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',rfqAssyID,'                                                               \n" +
                "						AND ((co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR partstatus NOT IN (1))                                                             \n" +
                "					GROUP BY rl.id');                                                                          \n" +
                "			END IF;  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                                                      \n" +
                "			EXECUTE stmt;	                                                                        \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM consolidatetemp where \", pWhereClause );                                                                        \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                                                        \n" +
                "			EXECUTE query1;                                                                        \n" +
                "			DEALLOCATE PREPARE query1;                                                                        \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                                        \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                                                        \n" +
                "			EXECUTE query2;                                                                        \n" +
                "			DEALLOCATE PREPARE query2;                                  \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID,0));                                    \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                                                  \n" +
                "			EXECUTE query3;                                                                                  \n" +
                "			DEALLOCATE PREPARE query3;                                                                           \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                                                   \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                                                        \n" +
                "			EXECUTE query4;                                                                        \n" +
                "			DEALLOCATE PREPARE query4;                                                                        \n" +
                "  \n" +
                "			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                                                     \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                                                          \n" +
                "			EXECUTE query5;                                                                                          \n" +
                "			DEALLOCATE PREPARE query5;                                                                                 \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));                                  \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                                                          \n" +
                "			EXECUTE query6;                                                                                          \n" +
                "			DEALLOCATE PREPARE query6;                                       \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));                                  \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                                                          \n" +
                "			EXECUTE query7;                                                                                          \n" +
                "			DEALLOCATE PREPARE query7;                         \n" +
                "  \n" +
                "			SET @SQLStatement8= (SELECT fun_getRestrictedParts(rfqAssyID));                          \n" +
                "			PREPARE query8 FROM @SQLStatement8;                                                                                  \n" +
                "			EXECUTE query8;                                                                                  \n" +
                "			DEALLOCATE PREPARE query8;                                                                    \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                                                          \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetLeadTimeRiskLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetLeadTimeRiskLineItems`(                                                                      \n" +
                "	IN ppageIndex INT(11),                                                                      \n" +
                "	IN precordPerPage INT(11),                                                                      \n" +
                "	IN pOrderBy VARCHAR(255),                                                                      \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                      \n" +
                "	IN rfqAssyID INT(11),                                                                      \n" +
                "	IN puserID INT (11),                              \n" +
                "	IN pleadTime INT (11),                          \n" +
                "	IN ppackageing TINYINT(1),                          \n" +
                "	IN pcustomerID INT(11)                                          \n" +
                "    )  \n" +
                "BEGIN                                                                      \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                                                      \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                 \n" +
                "	    DECLARE ppartid INT(11);                \n" +
                "	            SELECT partid INTO ppartid FROM rfq_assemblies WHERE id=rfqAssyID AND deletedat IS NULL;                                                    \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                                                      \n" +
                "	    SET @SQLString = NULL;                                                                   \n" +
                "	    SET @HavingClause = NULL;                                                                       \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                                                      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                      \n" +
                "		ELSE                                                                      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;                                                                       \n" +
                "		END IF;	                                                                      \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                                                      \n" +
                "			SET pWhereClause = '1=1' ;                                                                      \n" +
                "		END IF;	                                                                      \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                       \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                      \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                      \n" +
                "		ELSE	                                                                      \n" +
                "			SET rowNumWhere = '';                                                                      \n" +
                "		END IF;	    \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(DISTINCT                                                                      \n" +
                "				CONCAT(                                                                      \n" +
                "					'Max((IF(ra.requestQty = ''',                                                                      \n" +
                "						ra.requestQty,                                                                      \n" +
                "					''', (IFNULL(rq.leadTime,0)), null))) AS ''',                                                                      \n" +
                "						ra.requestQty,''''                                                                      \n" +
                "					)                                                                      \n" +
                "					)                                         \n" +
                "				INTO @SQLString                                                                \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                                                      \n" +
                "		  JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                                                      \n" +
                "		   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                                                      \n" +
                "		WHERE rl.rfqAssyID = rfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NULL;  \n" +
                "  \n" +
                "      SELECT GROUP_CONCAT(DISTINCT                                                                      \n" +
                "				CONCAT(                                                                      \n" +
                "					'((Max((IF(ra.requestQty = ''',                                                                      \n" +
                "						ra.requestQty,                                                                      \n" +
                "					''', (IFNULL(rq.leadTime,0)), null)))))'                                                            \n" +
                "					) SEPARATOR ' OR '                                                                          \n" +
                "					)                                            \n" +
                "				INTO @HavingClause                                                                 \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq                                                                      \n" +
                "		  JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID                                                                      \n" +
                "		   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id                                                                      \n" +
                "		WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL;  \n" +
                "  \n" +
                "              SELECT GROUP_CONCAT(DISTINCT    \n" +
                "				CONCAT(    \n" +
                "					'Max((IF(ra.requestQty = ''',    \n" +
                "						ra.requestQty,    \n" +
                "					''', rq.finalPrice, null))) AS ''',    \n" +
                "						pg.name,''''    \n" +
                "					)) INTO @SQLGroupString    \n" +
                "		   FROM rfq_consolidate_mfgpn_lineitem_quantity rq    \n" +
                "		   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID    \n" +
                "		   JOIN  rfq_price_group pg ON pg.id = rq.rfqPriceGroupId        \n" +
                "		   LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity pgq ON pgq.refConsolidateLineitemQtyId = rq.id        \n" +
                "		   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id    \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NOT NULL;     \n" +
                "  \n" +
                "  \n" +
                "			IF(@SQLString IS NOT NULL and @SQLGroupString is not null) THEN                           \n" +
                "  \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                                                      \n" +
                "					SELECT                                                                       \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID, rl.uomID,rl.consolidatedpartlineID, fun_getUnitAbbrivationByID(rl.uomID) unitName,rl.isqpaMismatch,            \n" +
                "					  rl.restrictCPNUseInBOMStep,rl.restrictCPNUsePermanentlyStep,rl.restrictCPNUseWithPermissionStep,                       \n" +
                "					  CASE WHEN                         \n" +
                "			(SELECT COUNT( DISTINCT(rm.name)) FROM  rfq_mountingtypemst rm LEFT JOIN                        \n" +
                "		   component cm ON cm.mountingTypeID=rm.id LEFT JOIN                        \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id                        \n" +
                "		   WHERE rlam.consolidateID=rl.id)>1 THEN \"Mismatched\" ELSE                        \n" +
                "										  (SELECT rm.name FROM  rfq_mountingtypemst rm LEFT JOIN                        \n" +
                "		   component cm ON cm.mountingTypeID=rm.id LEFT JOIN                        \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id                        \n" +
                "		   WHERE rlam.consolidateID=rl.id LIMIT 1) END AS `name`,                      \n" +
                "		   CASE WHEN                         \n" +
                "			(SELECT COUNT( DISTINCT(rm.partTypeName)) FROM  rfq_parttypemst rm LEFT JOIN                        \n" +
                "		   component cm ON cm.functionalCategoryID=rm.id LEFT JOIN                        \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id                        \n" +
                "		   WHERE rlam.consolidateID=rl.id)>1 THEN \"Mismatched\" ELSE                        \n" +
                "										  (SELECT rm.partTypeName FROM  rfq_parttypemst rm LEFT JOIN                        \n" +
                "		   component cm ON cm.functionalCategoryID=rm.id LEFT JOIN                        \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id                        \n" +
                "		   WHERE rlam.consolidateID=rl.id LIMIT 1) END AS `partTypeName`,                                                                   \n" +
                "					  rl.qpa,',(SELECT fun_getCommonConsolidateLineComponent(pcustomerID)),',       \n" +
                "					  ',(SELECT fun_getCommonConsolidateLineComponentExport(ppackageing)),',                            \n" +
                "					',(SELECT fun_getCommonConsolidateLineMFGPNWithPackaging(ppackageing,ppartid)),', ',                                                                     \n" +
                "					@SQLString,', ',@SQLGroupString,' FROM rfq_consolidated_mfgpn_lineitem rl                                                                      \n" +
                "				        JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID and rq.deletedAt is NULL                                                                      \n" +
                "					JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id and ra.deletedAt is NULL          \n" +
                "					WHERE rl.isdeleted=0 and IFNULL(rq.leadTime,0)>',pleadTime,' AND  ( IFNULL(rq.quoteQty,0) > IFNULL(rq.currentStock,0)) AND  rl.rfqAssyID=',rfqAssyID,'                                                             \n" +
                "					GROUP BY rl.id');                           \n" +
                "  \n" +
                "				 SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);  	                                                                      \n" +
                "			END IF;    \n" +
                "  \n" +
                "			IF(@SQLString IS NOT NULL and @SQLGroupString is null) THEN                           \n" +
                "  \n" +
                "				SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS                                                                      \n" +
                "					SELECT                                                                       \n" +
                "					  rl.id,rl.isPurchase,rl.numOfPosition, rl.lineID,rl.rfqLineItemID,rl.rfqAssyBomID, rl.rfqAssyID, rl.uomID,rl.consolidatedpartlineID, fun_getUnitAbbrivationByID(rl.uomID) unitName,rl.isqpaMismatch,            \n" +
                "					  rl.restrictCPNUseInBOMStep,rl.restrictCPNUsePermanentlyStep,rl.restrictCPNUseWithPermissionStep,                       \n" +
                "					  CASE WHEN                         \n" +
                "			(SELECT COUNT( DISTINCT(rm.name)) FROM  rfq_mountingtypemst rm LEFT JOIN                        \n" +
                "		   component cm ON cm.mountingTypeID=rm.id LEFT JOIN                        \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id                        \n" +
                "		   WHERE rlam.consolidateID=rl.id)>1 THEN \"Mismatched\" ELSE                        \n" +
                "										  (SELECT rm.name FROM  rfq_mountingtypemst rm LEFT JOIN                        \n" +
                "		   component cm ON cm.mountingTypeID=rm.id LEFT JOIN                        \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id                        \n" +
                "		   WHERE rlam.consolidateID=rl.id LIMIT 1) END AS `name`,                      \n" +
                "		   CASE WHEN                         \n" +
                "			(SELECT COUNT( DISTINCT(rm.partTypeName)) FROM  rfq_parttypemst rm LEFT JOIN                        \n" +
                "		   component cm ON cm.functionalCategoryID=rm.id LEFT JOIN                        \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id                        \n" +
                "		   WHERE rlam.consolidateID=rl.id)>1 THEN \"Mismatched\" ELSE                        \n" +
                "										  (SELECT rm.partTypeName FROM  rfq_parttypemst rm LEFT JOIN                        \n" +
                "		   component cm ON cm.functionalCategoryID=rm.id LEFT JOIN                        \n" +
                "		   rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid=cm.id                        \n" +
                "		   WHERE rlam.consolidateID=rl.id LIMIT 1) END AS `partTypeName`,                                                                   \n" +
                "					  rl.qpa,',(SELECT fun_getCommonConsolidateLineComponent(pcustomerID)),',       \n" +
                "					  ',(SELECT fun_getCommonConsolidateLineComponentExport(ppackageing)),',                            \n" +
                "					',(SELECT fun_getCommonConsolidateLineMFGPNWithPackaging(ppackageing,ppartid)),', ',                                                                     \n" +
                "					@SQLString,' FROM rfq_consolidated_mfgpn_lineitem rl                                                                      \n" +
                "				        JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID and rq.deletedAt is NULL                                                                      \n" +
                "					JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id and ra.deletedAt is NULL          \n" +
                "					WHERE rl.isdeleted=0 and IFNULL(rq.leadTime,0)>',pleadTime,' AND  ( IFNULL(rq.quoteQty,0) > IFNULL(rq.currentStock,0)) AND  rl.rfqAssyID=',rfqAssyID,'                                                             \n" +
                "					GROUP BY rl.id');                           \n" +
                "  \n" +
                "				 SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);  	                                                                      \n" +
                "			END IF;    \n" +
                "  \n" +
                "			PREPARE stmt FROM @SQLStatement;                                                                      \n" +
                "			EXECUTE stmt;	                                                                      \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM consolidatetemp where \", pWhereClause );                                                                      \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                                                      \n" +
                "			EXECUTE query1;                                                                      \n" +
                "			DEALLOCATE PREPARE query1;                                                                      \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                                      \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                                                      \n" +
                "			EXECUTE query2;                                                                      \n" +
                "			DEALLOCATE PREPARE query2;                               \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID,0));                                \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                                              \n" +
                "			EXECUTE query3;                                                                              \n" +
                "			DEALLOCATE PREPARE query3;                                                                     \n" +
                "  \n" +
                "			SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));                                                                       \n" +
                "			PREPARE query4 FROM @SQLStatement4;                                                                      \n" +
                "			EXECUTE query4;                                                                      \n" +
                "			DEALLOCATE PREPARE query4;                                                                      \n" +
                "  \n" +
                "  			SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                                                                                 \n" +
                "			PREPARE query5 FROM @SQLStatement5;                                                                                      \n" +
                "			EXECUTE query5;                                                                                      \n" +
                "			DEALLOCATE PREPARE query5;                                                                             \n" +
                "  \n" +
                "			SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));                              \n" +
                "			PREPARE query6 FROM @SQLStatement6;                                                                                      \n" +
                "			EXECUTE query6;                                                                                      \n" +
                "			DEALLOCATE PREPARE query6;                                   \n" +
                "  \n" +
                "                     SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));                              \n" +
                "			PREPARE query7 FROM @SQLStatement7;                                                                                      \n" +
                "			EXECUTE query7;                                                                                      \n" +
                "			DEALLOCATE PREPARE query7;                  \n" +
                "  \n" +
                "			SET @SQLStatement8= (SELECT fun_getRestrictedParts(rfqAssyID));                      \n" +
                "			PREPARE query8 FROM @SQLStatement8;                                                                              \n" +
                "			EXECUTE query8;                                                                              \n" +
                "			DEALLOCATE PREPARE query8;                                                                           \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                                                        \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyBOMHeaderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyBOMHeaderList`(                                                      \n" +
                "	IN prfqAssyID INT(11),                                    \n" +
                "	IN pcustomerID INT(11)                                \n" +
                ")  \n" +
                "BEGIN                                              \n" +
                "	   SELECT   ra.rfqrefID AS quoteGroupNumber,ra.quoteinDate,ra.quoteDueDate,ra.partID,ra.quoteFinalStatus, ra.isSummaryComplete, c.mfgpn AS assyNumber,c.rev AS revision,          \n" +
                "	   jt.name AS jobType,              \n" +
                "CASE WHEN c.bomLock=0 THEN '' ELSE 'BOM is locked' END bomlockStatus,                                    \n" +
                "	   c.PIDCode AS assyID,c.mfgPNDescription,c.specialNote,ra.assemblyTypeID,rat.name AS assyType,         \n" +
                "       fun_getSamplePicturesUploadCount(ra.partID) sampleImageCnt,        \n" +
                "       (SELECT mfgType FROM mfgCodeMst mfg WHERE mfg.id  = c.mfgcodeID ) mfgType,        \n" +
                "	   (SELECT (MAX(LEVEL)+1) FROM part_sub_assy_relationship psar WHERE psar.partID =ra.partID AND psar.isdeleted=0) AS assyLevel,                                    \n" +
                "	   (SELECT COUNT(1) FROM rfq_assemblies rfqs WHERE rfqs.rfqrefID =ra.rfqrefID AND rfqs.isdeleted=0) AS assyCount,                                     \n" +
                "	   c.liveVersion AS liveInternalVersion,rh.id,rh.name AS rohs,rh.rohsIcon,c.rev,c.nickname,c.businessRisk,                                    \n" +
                "	   (SELECT COUNT(1) FROM rfq_assemblies_quotation_submitted raqs WHERE raqs.rfqAssyID=ra.id AND quoteNumber IS NOT NULL AND isDeleted = 0) AS totalQuoteCount,                                    \n" +
                "	   (SELECT rasp.quoteNumber FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id AND quoteNumber IS NOT NULL ORDER BY rasp.id DESC LIMIT 1) AS quoteNumber,                                    \n" +
                "	   (SELECT rasp.bomLastVersion FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id AND quoteNumber IS NOT NULL ORDER BY rasp.id DESC LIMIT 1) AS bomLastVersion,                                    \n" +
                "	   (SELECT rasp.quoteSubmitDate FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id AND quoteNumber IS NOT NULL ORDER BY rasp.id DESC LIMIT 1) AS quoteSubmitDate,                                    \n" +
                "	   (SELECT rasp.bomInternalVersion FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id AND quoteNumber IS NOT NULL ORDER BY rasp.id DESC LIMIT 1) AS bomInternalVersion,                                    \n" +
                "	   (SELECT CONCAT('(',mm.mfgCode,') ',mm.mfgName) FROM mfgcodemst mm WHERE mm.id=pcustomerID) AS customerName,                                 \n" +
                "	   (CASE WHEN ra.status = 1 THEN 'In Progress'                                         \n" +
                "			  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'                                       \n" +
                "			  WHEN ra.status = 3 THEN 'Won'                                        \n" +
                "			  WHEN ra.status = 4 THEN 'Lost'                                       \n" +
                "		 WHEN ra.status = 5 THEN 'Canceled' END) `status` ,                                      \n" +
                "	   (CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending'                                  \n" +
                "		 WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote'                                   \n" +
                "	 	 WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'                                    \n" +
                "		 WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,                    \n" +
                "         (                    \n" +
                "			CASE  WHEN IFNULL(ra.isSummaryComplete,0)=0 THEN                     \n" +
                "			(                    \n" +
                "                SELECT GROUP_CONCAT(CONCAT(IFNULL(cs.fullName,''),' ',IFNULL(css.className,''), '######', IFNULL(css.colorCode,'')) ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@')                    \n" +
                "                FROM component_standard_details csd                       \n" +
                "                LEFT JOIN certificate_standards cs ON csd.certificatestandardID=cs.certificatestandardid                       \n" +
                "                LEFT JOIN standard_class css ON csd.classID=css.classID WHERE csd.componentid= ra.partID AND csd.isDeleted = 0                      \n" +
                "			)                    \n" +
                "            ELSE                                \n" +
                "            (                    \n" +
                "				SELECT GROUP_CONCAT(CONCAT(IFNULL(cs.fullName,''),' ',IFNULL(css.className,''), '######', IFNULL(css.colorCode,'')) ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@')                        \n" +
                "                FROM rfq_assy_standard_class_detail csd                       \n" +
                "                LEFT JOIN certificate_standards cs ON csd.standardID=cs.certificatestandardid                       \n" +
                "                LEFT JOIN standard_class css ON csd.standardClassIds=css.classID                       \n" +
                "                WHERE csd.refSubmittedQuoteID=(SELECT id FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1)                      \n" +
                "			)                                \n" +
                "			END                    \n" +
                "		)AS standards, ra.isActivityStart  \n" +
                "	   FROM rfq_assemblies ra  LEFT JOIN component c                                    \n" +
                "	   ON c.id=ra.partID LEFT JOIN rfq_assy_typemst rat                                     \n" +
                "          ON rat.id=ra.assemblyTypeID LEFT JOIN rfq_rohsmst rh                                    \n" +
                "          ON rh.id=c.RoHSStatusID LEFT JOIN jobtype jt                                    \n" +
                "          ON jt.id = ra.jobTypeID          \n" +
                "  \n" +
                "           WHERE ra.id= prfqAssyID AND ra.isdeleted=0;                                                         \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_costingStopActivityForMultipleAssembly`;  \n" +
                "CREATE PROCEDURE `Sproc_costingStopActivityForMultipleAssembly`(              \n" +
                "	IN prfqAssyID text,              \n" +
                "	IN pUserId INT     \n" +
                "    )  \n" +
                "BEGIN              \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION            \n" +
                "	BEGIN              \n" +
                "		ROLLBACK;          \n" +
                "		RESIGNAL;          \n" +
                "	END;          \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                        \n" +
                "	BEGIN                        \n" +
                "		ROLLBACK;                        \n" +
                "		RESIGNAL;                        \n" +
                "	END;	          \n" +
                "	START TRANSACTION;          \n" +
                "  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() INTO @pCurrentTime;     \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRFQAssembly;  \n" +
                "    set @tempAssemblyDetail = concat(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempRFQAssembly AS   \n" +
                "    select * from rfq_assemblies where id in (\",prfqAssyID,\")\");  \n" +
                "  \n" +
                "    PREPARE query2 FROM @tempAssemblyDetail;                                                                        \n" +
                "	EXECUTE query2;                                                                        \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "  \n" +
                "	UPDATE rfq_assemblies SET    \n" +
                "		isActivityStart = 0,    \n" +
                "		activityStartBy = pUserId,    \n" +
                "		activityStopAt = @pCurrentTime    \n" +
                "	WHERE id in (select id from tempRFQAssembly);    \n" +
                "	# update transaction time on stop activity  \n" +
                "	UPDATE rfq_assembly_trans_history rth,(select * from rfq_assembly_trans_history where rfqAssyID in (select id from tempRFQAssembly) and  checkoutTime is null) rath  \n" +
                "    SET     \n" +
                "		rth.checkoutTime = @pCurrentTime,    \n" +
                "		rth.totalTime = TIMESTAMPDIFF(SECOND, rath.checkinTime,@pCurrentTime),          \n" +
                "		rth.updatedBy = pUserId,    \n" +
                "		rth.updatedAt = @pCurrentTime    \n" +
                "	 WHERE rth.id = rath.id and rth.rfqAssyID = rath.rfqAssyID;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRFQAssembly;  \n" +
                "    COMMIT;             \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-07-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetExcessMaterialLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetExcessMaterialLineItems`(    \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN rfqAssyID INT(11),    \n" +
                "	IN puserID INT (11),                      \n" +
                "	IN ppackageing TINYINT(1),                      \n" +
                "	IN pcustomerID INT(11)    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);    \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;    \n" +
                "	    SET @SQLString = NULL;                                                         \n" +
                "	    SET @HavingClause = NULL;                                                         \n" +
                "	    SET SESSION group_concat_max_len = 150000;    \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;    \n" +
                "		ELSE    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineID` asc\") ;     \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN    \n" +
                "			SET pWhereClause = '1=1' ;    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;    \n" +
                "		ELSE	    \n" +
                "			SET rowNumWhere = '';    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(DISTINCT CONCAT( 'Max((IF(ra.requestQty = ''', ra.requestQty,''',    \n" +
                "        (((IFNULL(rq.quoteQty,0))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * (CASE WHEN    \n" +
                "        (SELECT connecterTypeID FROM component WHERE id=rq.componentid)= -2 THEN    \n" +
                "        IFNULL(rl.numOfPosition,1)    \n" +
                "        ELSE 1 END)))* (IFNULL(rq.unitPrice,0))) , null))) AS ''', ra.requestQty,''''))    \n" +
                "        INTO @SQLString    \n" +
                "        FROM rfq_consolidate_mfgpn_lineitem_quantity rq    \n" +
                "        JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID    \n" +
                "        JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id    \n" +
                "        WHERE rl.rfqAssyID= rfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NULL;    \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(DISTINCT CONCAT('Max((IF(ra.requestQty = ''',ra.requestQty,''',    \n" +
                "        (((IFNULL(rq.quoteQty,0))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * (CASE WHEN    \n" +
                "        (SELECT connecterTypeID FROM component WHERE id=rq.componentid)= -2 THEN    \n" +
                "        IFNULL(rl.numOfPosition,1) ELSE 1 END)))* (IFNULL(rq.unitPrice,0))) , null)))> 0') SEPARATOR ' OR ')    \n" +
                "        INTO @HavingClause    \n" +
                "        FROM rfq_consolidate_mfgpn_lineitem_quantity rq    \n" +
                "        JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID    \n" +
                "        JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id    \n" +
                "        WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL;    \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(DISTINCT       \n" +
                "				CONCAT(       \n" +
                "					'Max((IF(ra.requestQty = ''',       \n" +
                "						ra.requestQty,       \n" +
                "					''', rq.finalPrice, null))) AS ''',       \n" +
                "						pg.name,''''       \n" +
                "					)       \n" +
                "					) INTO @SQLGroupString         \n" +
                "		   FROM rfq_consolidate_mfgpn_lineitem_quantity rq       \n" +
                "		   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID       \n" +
                "		   JOIN  rfq_price_group pg ON pg.id = rq.rfqPriceGroupId        \n" +
                "		   LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity pgq ON pgq.refConsolidateLineitemQtyId = rq.id        \n" +
                "		   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id       \n" +
                "		   WHERE rl.rfqAssyID=rfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NOT NULL;     \n" +
                "  \n" +
                "        IF (@SQLString IS NOT NULL) THEN    \n" +
                "			IF (ppackageing=1) THEN    \n" +
                "				SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItemsWithPackaging(rfqAssyID,@SQLString,pcustomerID,ppackageing,IFNULL(CONCAT(', ',@SQLGroupString),'')));    \n" +
                "			ELSE    \n" +
                "				SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItems(rfqAssyID,@SQLString,pcustomerID,ppackageing,IFNULL(CONCAT(', ',@SQLGroupString),'')));    \n" +
                "			END IF;    \n" +
                "  \n" +
                "            SET @SQLStatement = CONCAT(@SQLStatement, ' HAVING ', @HavingClause);    \n" +
                "		END IF;                                                 \n" +
                "        PREPARE stmt FROM @SQLStatement;    \n" +
                "		EXECUTE stmt;	    \n" +
                "  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM consolidatetemp where \", pWhereClause );    \n" +
                "		PREPARE query1 FROM @SQLStatement1;    \n" +
                "		EXECUTE query1;                        \n" +
                "		DEALLOCATE PREPARE query1;    \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "		PREPARE query2 FROM @SQLStatement2;    \n" +
                "		EXECUTE query2;    \n" +
                "		DEALLOCATE PREPARE query2;                        \n" +
                "		SET @SQLStatement3 = (SELECT fun_lastPricingStatus(rfqAssyID,puserID,0));                          \n" +
                "		PREPARE query3 FROM @SQLStatement3;              \n" +
                "		EXECUTE query3;              \n" +
                "		DEALLOCATE PREPARE query3;              \n" +
                "		SET @SQLStatement4 = (SELECT fun_getTotalQtyDetails(rfqAssyID));           \n" +
                "		PREPARE query4 FROM @SQLStatement4;              \n" +
                "		EXECUTE query4;              \n" +
                "		DEALLOCATE PREPARE query4;          \n" +
                "		SET @SQLStatement5= (SELECT fun_getselectedPartDetail(rfqAssyID));                 \n" +
                "		PREPARE query5 FROM @SQLStatement5;                      \n" +
                "		EXECUTE query5;                      \n" +
                "		DEALLOCATE PREPARE query5;             \n" +
                "		SET @SQLStatement6= (SELECT fun_getTotalPrice(rfqAssyID));                        \n" +
                "		PREPARE query6 FROM @SQLStatement6;                      \n" +
                "		EXECUTE query6;                      \n" +
                "		DEALLOCATE PREPARE query6;                             \n" +
                "		SET @SQLStatement7= (SELECT fun_getCustomLines(rfqAssyID));                        \n" +
                "		PREPARE query7 FROM @SQLStatement7;                      \n" +
                "		EXECUTE query7;                      \n" +
                "		DEALLOCATE PREPARE query7;                      \n" +
                "		SET @SQLStatement8= (SELECT fun_getRestrictedParts(rfqAssyID));                        \n" +
                "		PREPARE query8 FROM @SQLStatement8;                      \n" +
                "		EXECUTE query8;                      \n" +
                "		DEALLOCATE PREPARE query8;                                 \n" +
                "		DROP TEMPORARY TABLE consolidatetemp;     \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2748,'2.00','V1','Start Stop Costing activity related change - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2748:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_WorkorderTransfer` ;  \n" +
                "CREATE PROCEDURE `Sproc_WorkorderTransfer`(            \n" +
                "        IN fromWOOPID INT,            \n" +
                "        IN toWOOPID INT,            \n" +
                "        IN transferQty INT,            \n" +
                "        IN description TEXT,            \n" +
                "        IN userID INT            \n" +
                ")  \n" +
                "BEGIN            \n" +
                " DECLARE insertedWoTransID INT(11);            \n" +
                " DECLARE lvfromOpName VARCHAR(250);            \n" +
                " DECLARE lvfromWoNumber VARCHAR(250);            \n" +
                " DECLARE lvtoOpName VARCHAR(250);            \n" +
                " DECLARE lvtoWoNumber VARCHAR(250);    \n" +
                " DECLARE lv_totTerminatedTransQty INT;   \n" +
                " DECLARE lv_totScrapQty INT;     \n" +
                " DECLARE lv_fromWOBuildQty INT;     \n" +
                "  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION            \n" +
                "BEGIN            \n" +
                "	ROLLBACK;            \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS `tempWTE`;            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS `tempOPID`;	            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS `tempError`;            \n" +
                "	RESIGNAL;            \n" +
                "END;            \n" +
                "  \n" +
                "DROP TEMPORARY TABLE IF EXISTS `tempWTE`;            \n" +
                "DROP TEMPORARY TABLE IF EXISTS `tempOPID`;            \n" +
                "DROP TEMPORARY TABLE IF EXISTS `tempError`;            \n" +
                "  \n" +
                "CREATE TEMPORARY TABLE `tempError` (id TINYINT(1));            \n" +
                " # Get from and to work order operation details            \n" +
                " SELECT wo.woID, wo.opID, wo.opNumber INTO @fromWOID, @fromOPID, @fromOPNumber FROM workorder_operation wo WHERE IFNULL(wo.isDeleted, 0) = 0 AND wo.woOPID = fromWOOPID;            \n" +
                " SELECT wo.woID, wo.opID INTO @toWOID, @toOPID FROM workorder_operation wo WHERE IFNULL(wo.isDeleted, 0) = 0 AND wo.woOPID = toWOOPID;            \n" +
                " SELECT buildQty INTO lv_fromWOBuildQty FROM workorder WHERE woID = @fromWOID;   \n" +
                "  \n" +
                " # Check if any operation is running or not            \n" +
                " CREATE TEMPORARY TABLE `tempWTE`            \n" +
                " SELECT op.opID, op.opName, op.opNumber, CONCAT(emp.firstName , ' ' , emp.lastName) AS fullName             \n" +
                " FROM Workorder_Trans_Empinout AS wte            \n" +
                " LEFT OUTER JOIN operations AS op ON wte.opID = op.opID AND op.deletedAt IS NULL            \n" +
                " LEFT OUTER JOIN employees AS emp ON wte.employeeID = emp.id AND emp.deletedAt IS NULL             \n" +
                " WHERE wte.deletedAt IS NULL AND wte.woID = @fromWOID AND wte.checkoutTime IS NULL;            \n" +
                "  \n" +
                " # If operation is running then return            \n" +
                " IF EXISTS (SELECT 1 FROM tempWTE) THEN            \n" +
                "	SELECT 'operation' AS err;            \n" +
                "    SELECT * FROM `tempWTE`;            \n" +
                "	INSERT INTO tempError VALUES (1);            \n" +
                " ELSE            \n" +
                "	# Check if work order is track by serial number            \n" +
                "    SELECT COUNT(1) INTO @woTrackBySerial FROM Workorder AS wo WHERE wo.isOperationTrackBySerialNo = 1 AND woID = @fromWOID AND IFNULL(wo.isDeleted, 0) = 0 LIMIT 1;            \n" +
                "  \n" +
                "	IF (@woTrackBySerial = 1) THEN            \n" +
                "  \n" +
                "        # Get all operations which are followed by current terminated operation            \n" +
                "        CREATE TEMPORARY TABLE `tempOPID`            \n" +
                "        SELECT wo.opID FROM Workorder_Operation AS wo WHERE wo.woID = @fromWOID AND wo.opNumber >= @fromOPNumber AND IFNULL(wo.isDeleted, 0) = 0;            \n" +
                "        # Check total serial numbers which are assigned to current terminated and following operations            \n" +
                "        SELECT IFNULL(COUNT(ws.serialNo),0)  INTO @serialCount FROM Workorder_SerialMst AS ws            \n" +
                "        WHERE ws.woID = @fromWOID AND IFNULL(ws.isTransferred, 0) = 0            \n" +
                "        AND ws.currStatus IN ('1','3','5','6','7') AND IFNULL(ws.isDeleted, 0) = 0 AND            \n" +
                "        ws.curropID IN (SELECT opID FROM tempOPID);            \n" +
                "  \n" +
                "        # If total serial number and transfer qty do not match then return            \n" +
                "        IF (@serialCount <> transferQty) THEN            \n" +
                "			SELECT 'serialcount' AS err;            \n" +
                "            SELECT @serialCount AS serialCount;            \n" +
                "			INSERT INTO tempError VALUES (1);                 \n" +
                "        END IF;            \n" +
                "	END IF;                \n" +
                " END IF;            \n" +
                "  \n" +
                "IF NOT EXISTS(SELECT 1 FROM `tempError`) THEN    \n" +
                "  \n" +
                "	   START TRANSACTION;            \n" +
                "  \n" +
                "	    # Insert entry into work order transfer table            \n" +
                "	    INSERT INTO `workorder_transfer` (`fromWOID`, `fromOPID`, `fromWOOPID`, `toWOID`, `toOPID`, `toWOOPID`, `transferDate`, `transferQty`,            \n" +
                "											`description`, `createdAt`, `createdBy`, `isDeleted`)            \n" +
                "	    VALUES (@fromWOID, @fromOPID, fromWOOPID, @toWOID, @toOPID, toWOOPID, fun_DatetimetoUTCDateTime(), transferQty,            \n" +
                "			description,fun_DatetimetoUTCDateTime(), userID, 0);            \n" +
                "	    SET	insertedWoTransID = LAST_INSERT_ID();		            \n" +
                "  \n" +
                "		# Update from work order status to 'Under Termination'            \n" +
                "	    UPDATE Workorder SET woStatus = 6 , woSubStatus = 6 , updatedAt =  fun_DatetimetoUTCDateTime(), updatedBy = userID WHERE woID = @fromWOID AND IFNULL(isDeleted, 0) = 0;            \n" +
                "	    # Update from work order reference to work order and update build qty            \n" +
                "	    UPDATE Workorder SET terminateWOID = @fromWOID, buildQty = (IFNULL(buildQty,0) + transferQty), updatedAt =  fun_DatetimetoUTCDateTime(), updatedBy = userID WHERE woID = @toWOID AND IFNULL(isDeleted, 0) = 0;            \n" +
                "  \n" +
                "	    # Update is terminated flag for current terminated operation            \n" +
                "	    UPDATE workorder_operation SET isTerminated = 1, terminateDate = fun_DatetimetoUTCDateTime(), updatedAt =  fun_DatetimetoUTCDateTime(), updatedBy = userID            \n" +
                "	    WHERE woOPID = fromWOOPID AND IFNULL(isDeleted, 0) = 0;            \n" +
                "  \n" +
                "	    # Change status to 'Terminated' for follwing operations of current terminated operation            \n" +
                "	    UPDATE Workorder_Operation SET opStatus = 2, updatedAt =  fun_DatetimetoUTCDateTime(), updatedBy = userID WHERE woID = @fromWOID AND opNumber > @fromOPNumber AND IFNULL(isDeleted, 0) = 0;            \n" +
                "  \n" +
                "	    IF (@woTrackBySerial = 1) THEN                \n" +
                "  \n" +
                "			# Insert all serial numbers from from work order into to work order            \n" +
                "		INSERT INTO Workorder_SerialMst (woID, PrefixorSuffix, PreSuffix, dateCode, noofDigit, SerialNo, curropID, currStatus, isDeleted,            \n" +
                "			createdAt, createdBy, serialType, refSerialID,   \n" +
                "			prefix, suffix, serialIntVal, dateCodeFormat)            \n" +
                "		SELECT @toWOID woID, ws.PrefixorSuffix, ws.PreSuffix, ws.dateCode, ws.noofDigit, ws.SerialNo, NULL curropID, 'Idle' currStatus,             \n" +
                "			0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, userID createdBy, ws.serialType, ws.id refSerialID  ,  \n" +
                "			ws.prefix , ws.suffix , ws.serialIntVal , ws.dateCodeFormat         \n" +
                "		FROM Workorder_SerialMst ws   \n" +
                "		WHERE ws.woID = @fromWOID AND IFNULL(ws.isTransferred, 0) = 0   \n" +
                "		AND ws.currStatus IN ('1','3','5','6','7')   \n" +
                "		AND IFNULL(ws.isDeleted, 0) = 0 AND ws.curropID IN (SELECT opID FROM tempOPID);            \n" +
                "  \n" +
                "		# Update is transferred flag to all from work order serial numbers            \n" +
                "		UPDATE Workorder_SerialMst ws SET ws.isTransferred = 1, ws.updatedAt =  fun_DatetimetoUTCDateTime(), ws.updatedBy = userID            \n" +
                "			WHERE ws.woID = @fromWOID AND IFNULL(ws.isTransferred, 0) = 0 AND ws.currStatus IN ('1','3','5','6','7') AND IFNULL(ws.isDeleted, 0) = 0 AND            \n" +
                "			ws.curropID IN (SELECT opID FROM tempOPID);            \n" +
                "	    END IF;    \n" +
                "  \n" +
                "		# auto change status from 'under termination' to 'terminated' when all qty transfered   \n" +
                "		SELECT IFNULL(SUM(TerminatedTransQty),0)  , IFNULL(SUM(scrapQty),0) INTO lv_totTerminatedTransQty , lv_totScrapQty  \n" +
                "		FROM vu_workorder_production_stk  \n" +
                "		WHERE woID = @fromWOID ;  \n" +
                "  \n" +
                "		IF(lv_fromWOBuildQty = (lv_totTerminatedTransQty + lv_totScrapQty)) THEN  \n" +
                "			UPDATE workorder  \n" +
                "			SET woStatus = 7 , woSubStatus = 7 , updatedAt =  fun_DatetimetoUTCDateTime(), updatedBy = userID   \n" +
                "			WHERE woID = @fromWOID;            \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* [S] - Add Time line log for work order operation terminate & transfer */              \n" +
                "		SELECT woop.opName , (SELECT woNumber FROM workorder WHERE woID = woop.woID)            \n" +
                "			INTO lvfromOpName,lvfromWoNumber            \n" +
                "		FROM workorder_operation woop             \n" +
                "		WHERE woOPID = 	fromWOOPID ;            \n" +
                "  \n" +
                "		SELECT woop.opName , (SELECT woNumber FROM workorder WHERE woID = woop.woID)            \n" +
                "			INTO lvtoOpName,lvtoWoNumber            \n" +
                "		FROM workorder_operation woop             \n" +
                "		WHERE woOPID = 	toWOOPID ;            \n" +
                "  \n" +
                "		SELECT CONCAT(firstName,\" \",lastName),EmployeeID INTO @lvempName,@lvEmployeeID            \n" +
                "		FROM users WHERE id=userID AND deletedAt IS NULL;            \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Terminate and transfer quantity from one work order operation to another work order operation\");              \n" +
                "		SET @lvEventDescription = CONCAT(\"Terminate and transfer quantity \\\"\",transferQty,\"\\\" from operation \\\"\",lvfromOpName,\"\\\" of work order \",lvfromWoNumber,            \n" +
                "			\" to operation \\\"\",lvtoOpName,\"\\\" of work order \",lvtoWoNumber,\" by \" ,@lvempName,\".\");	              \n" +
                "		CALL Sproc_AddToTimeline(userID,@lvEventTitle,@lvEventDescription,'workorder_transfer',insertedWoTransID,5.07,CONCAT('task/tasklist/travel/',fromWOOPID,\"/\",@lvEmployeeID),userID,1);  /* 1 = CREATE */              \n" +
                "		/* [E] - Add Time line log for work order operation terminate & transfer */              \n" +
                "  \n" +
                "  \n" +
                "	    SELECT 1 AS `status`;  \n" +
                "	    IF(lv_fromWOBuildQty = (lv_totTerminatedTransQty + lv_totScrapQty)) THEN  \n" +
                "		SELECT 1 AS `is_from_wo_auto_terminated`;  \n" +
                "	    ELSE  \n" +
                "		SELECT 0 AS `is_from_wo_auto_terminated`;  \n" +
                "	    END IF;    \n" +
                "  \n" +
                "	    COMMIT;     \n" +
                "  \n" +
                "END IF;	            \n" +
                "DROP TEMPORARY TABLE IF EXISTS `tempWTE`;            \n" +
                "DROP TEMPORARY TABLE IF EXISTS `tempOPID`;            \n" +
                "DROP TEMPORARY TABLE IF EXISTS `tempError`;   \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2749,'2.00','V1',' terminate transfer work order sp - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2749:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPackingSlipFormat` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingSlipFormat`(  \n" +
                ")  \n" +
                "BEGIN  \n" +
                " DECLARE pdateformat VARCHAR(50);  \n" +
                "SELECT `values` INTO pdateformat FROM systemconfigrations WHERE `key`='CustomerPackingSlipNumber' AND isdeleted=0;  \n" +
                " SELECT `maxvalue` AS maxPackingID,pdateformat FROM identity WHERE `type`='CustomerPackingSlipID' AND isdeleted=0;  \n" +
                "  \n" +
                " UPDATE identity SET `maxvalue`=`maxvalue`+1 WHERE `type`='CustomerPackingSlipID' AND isdeleted=0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesShippingDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(      \n" +
                "	IN salesorderID INT ,    \n" +
                "	IN packingSlipID INT     \n" +
                "    )  \n" +
                "BEGIN       \n" +
                " SELECT ss.shippingID,ss.sDetId,IFNULL(sd.custPOLineNumber,1) custPOLineNumber,IFNULL(ss.releaseNumber,1) releaseNumber,ss.qty,ss.shippingDate,    \n" +
                " ss.releaseNotes,sd.tentativeBuild,sd.qty AS poQty,sd.partID,sd.price,sd.lineID,      \n" +
                " c.mfgpn,c.mfgpndescription,c.pidcode,fun_getUnitNameByID(c.uom) unitMeaser,c.nickName,   \n" +
                " ss.shippingMethodID,ss.shippingAddressID,   \n" +
                " CONCAT(c.pidcode,',',IFNULL(sd.custPOLineNumber,1),',',IFNULL(ss.releaseNumber,1),',',ss.qty,',',DATE_FORMAT(ss.shippingDate, '%m-%d-%y')) shipping,      \n" +
                " (SELECT IFNULL(cpd.shippedQty,0) FROM customer_packingslip_det cpd WHERE refsalesorderdetid=ss.sDetId AND cpd.isdeleted=0) shippedQty      \n" +
                " FROM salesshippingmst ss LEFT JOIN salesorderdet sd ON ss.sDetID=sd.id      \n" +
                "LEFT JOIN component c ON c.id=sd.partid      \n" +
                "WHERE sd.refsalesOrderID=salesorderID AND ss.isdeleted=0 AND ss.sdetid NOT IN     \n" +
                "(SELECT cpd.refsalesorderdetid FROM customer_packingslip_det cpd WHERE cpd.remainingQty=0 AND cpd.refCustPackingSlipID!=packingSlipID  AND cpd.isdeleted=0);      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2750,'2.00','V1',' Customer packing slip bug-champak'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2750:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAvilableStockWithPackagingAliasForConsolidate` ;  \n" +
                "CREATE FUNCTION `fun_getAvilableStockWithPackagingAliasForConsolidate`(                                                         \n" +
                "		pSaleOrderDetailId INT(11),      \n" +
                "		pRefRfqLineItemIds VARCHAR(1000)                               \n" +
                "	) RETURNS DECIMAL(18,8)  \n" +
                "BEGIN                      \n" +
                "	DECLARE result DECIMAL(18,8);          \n" +
                "	DECLARE v_AssyIds VARCHAR(1000);      \n" +
                "	DECLARE	v_MainAssyId INT;      \n" +
                "	DECLARE v_ToUom INT;      \n" +
                "	DECLARE v_MFRCPNIds VARCHAR(1000);      \n" +
                "	DECLARE v_PendingMFRCPNIds VARCHAR(1000);      \n" +
                "	DECLARE v_TotalReservedStock DECIMAL(18,8);      \n" +
                "	DECLARE v_AllocatedReservedStock DECIMAL(18,8);      \n" +
                "	DECLARE v_TotalStockInSystemRecord DECIMAL(18,8);      \n" +
                "	DECLARE v_AllocatedToKitStock DECIMAL(18,8);      \n" +
                "	DECLARE v_NonUMIDStock DECIMAL(18,8);      \n" +
                "	DECLARE v_TotalPackagingReservedStock DECIMAL(18,8);      \n" +
                "	DECLARE v_AllocatedReservedPackagingStock DECIMAL(18,8);      \n" +
                "	DECLARE v_TotalPackagingStockInSystemRecord DECIMAL(18,8);      \n" +
                "	DECLARE v_AllocatedPackagingStockToKitStock DECIMAL(18,8);      \n" +
                "	DECLARE v_ReservedPhysicalStock DECIMAL(18,8);      \n" +
                "	DECLARE v_AvailableStock DECIMAL(18,8);      \n" +
                "	DECLARE v_ReservedPackagingPhysicalStock DECIMAL(18,8);      \n" +
                "	DECLARE v_PackagingAliasStock DECIMAL(18,8);      \n" +
                "  \n" +
                "	SET SESSION group_concat_max_len = 500000;             \n" +
                "  \n" +
                "	SELECT GROUP_CONCAT(partId) INTO v_AssyIds FROM kit_allocation_assy_detail WHERE deletedAt IS NULL AND refSalesOrderDetID = pSaleOrderDetailId;      \n" +
                "	SELECT partId INTO v_MainAssyId FROM kit_allocation_assy_detail WHERE deletedAt IS NULL AND refSalesOrderDetID = pSaleOrderDetailId AND bomAssyLevel = 0;                               \n" +
                "	SELECT uomID INTO v_ToUom FROM kit_allocation_lineitems WHERE FIND_IN_SET(refRfqLineitem, pRefRfqLineItemIds) AND refSalesOrderDetID = pSaleOrderDetailId AND partID = v_MainAssyId AND deletedAt IS NULL GROUP BY uomID;      \n" +
                "	SELECT GROUP_CONCAT(mfgPNID) INTO v_MFRCPNIds       \n" +
                "	FROM 	(      \n" +
                "			SELECT DISTINCT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE deletedAt IS NULL AND refSalesOrderDetID = pSaleOrderDetailId AND FIND_IN_SET(refRfqLineitem, pRefRfqLineItemIds)      \n" +
                "			UNION      \n" +
                "			SELECT DISTINCT custPNID AS mfgPNID FROM kit_allocation_lineitems WHERE deletedAt IS NULL AND refSalesOrderDetID = pSaleOrderDetailId AND FIND_IN_SET(refRfqLineitem, pRefRfqLineItemIds)      \n" +
                "		) a;      \n" +
                "  \n" +
                "	SELECT GROUP_CONCAT(mfgPNID) INTO v_PendingMFRCPNIds       \n" +
                "	FROM 	(      \n" +
                "			SELECT DISTINCT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE deletedAt IS NULL AND refSalesOrderDetID = pSaleOrderDetailId AND FIND_IN_SET(refRfqLineitem, pRefRfqLineItemIds)      \n" +
                "			UNION      \n" +
                "			SELECT DISTINCT custPNID AS mfgPNID FROM kit_allocation_lineitems WHERE deletedAt IS NULL AND refSalesOrderDetID = pSaleOrderDetailId AND FIND_IN_SET(refRfqLineitem, pRefRfqLineItemIds)      \n" +
                "			UNION      \n" +
                "			SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (                                      \n" +
                "				SELECT aliasgroupID FROM component_packagingalias WHERE FIND_IN_SET(componentID, v_MFRCPNIds) AND deletedAt IS NULL                                       \n" +
                "			) AND deletedAt IS NULL          \n" +
                "		) a;      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSidStockRawDet;                          \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempSidStockRawDet AS                                     \n" +
                "	SELECT 	id, receiveMaterialType, fun_convertUOM(uom, v_ToUom, pkgUnit) pkgUnit                                            \n" +
                "	FROM 	component_sid_stock       \n" +
                "	WHERE 	FIND_IN_SET(refcompid, v_MFRCPNIds)                                          \n" +
                "			AND deletedAt IS NULL;      \n" +
                "	-- v_TotalReservedStock                                    \n" +
                "	SELECT 	IFNULL(SUM(pkgUnit), 0) INTO v_TotalReservedStock                                     \n" +
                "	FROM 	tempSidStockRawDet                                     \n" +
                "	WHERE 	receiveMaterialType = 'PR';      \n" +
                "  \n" +
                "	-- v_AllocatedReservedStock                                      \n" +
                "	SELECT 	IFNULL(SUM(pkgUnit), 0) INTO v_AllocatedReservedStock                                       \n" +
                "	FROM 	tempSidStockRawDet                                       \n" +
                "	WHERE 	receiveMaterialType = 'PR'                                      \n" +
                "	AND	id  IN (      \n" +
                "		SELECT 	refUIDId       \n" +
                "		FROM 	kit_allocation                                           \n" +
                "		WHERE 	`status` = 'A'      \n" +
                "	);      \n" +
                "  \n" +
                "	-- v_TotalStockInSystemRecord                                    \n" +
                "	SELECT 	IFNULL(SUM(pkgUnit), 0) INTO v_TotalStockInSystemRecord                                     \n" +
                "	FROM 	tempSidStockRawDet;        \n" +
                "  \n" +
                "	-- v_AllocatedToKitStock                                     \n" +
                "	SELECT 	IFNULL(SUM(fun_convertUOM(allocatedUOM, v_ToUom, IFNULL(allocatedUnit, 0))), 0) INTO v_AllocatedToKitStock                                        \n" +
                "	FROM 	kit_allocation                                           \n" +
                "	WHERE 	refUIDId IN (SELECT id FROM tempSidStockRawDet)                                           \n" +
                "	AND 	STATUS = 'A';      \n" +
                "  \n" +
                "	-- v_NonUMIDStock                  \n" +
                "	SELECT 	fun_convertUOM(uom, v_ToUom, nonUMIDStock) INTO v_NonUMIDStock                  \n" +
                "	FROM 	(            \n" +
                "		SELECT 		SUM((IFNULL(vu.BalanceQty, 1) * IFNULL(c.unit, 1))) AS nonUMIDStock, c.uom             \n" +
                "		FROM 		vu_umid_creation_pending vu                  \n" +
                "		INNER JOIN 	component c ON c.id = vu.PartId                  \n" +
                "		WHERE 		FIND_IN_SET(vu.PartId, v_PendingMFRCPNIds)       \n" +
                "					AND BalanceQty > 0            \n" +
                "	) a;       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempPackagingAliasSidStockRawDet;                            \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempPackagingAliasSidStockRawDet AS                                    \n" +
                "	SELECT 	c.id,       \n" +
                "		c.refcompid,       \n" +
                "		c.receiveMaterialType,       \n" +
                "		fun_convertUOM(uom, v_ToUom, c.pkgUnit) pkgUnit                                            \n" +
                "	FROM 	component_sid_stock c, component_packagingalias cp                                          \n" +
                "	WHERE 	c.refcompid = cp.componentID                                          \n" +
                "		AND 	c.deletedAt IS NULL       \n" +
                "		AND	cp.componentID NOT IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pSaleOrderDetailId AND FIND_IN_SET(partID, v_AssyIds) AND FIND_IN_SET(refRfqLineitem, pRefRfqLineItemIds))                                \n" +
                "		AND	cp.aliasgroupID IN (SELECT packaginggroupID FROM component WHERE FIND_IN_SET(id, v_MFRCPNIds))                                          \n" +
                "		AND 	cp.deletedAt IS NULL;      \n" +
                "  \n" +
                "	-- v_TotalPackagingReservedStock                                    \n" +
                "	SELECT IFNULL(SUM(pkgUnit), 0) INTO v_TotalPackagingReservedStock                                     \n" +
                "	FROM tempPackagingAliasSidStockRawDet                                     \n" +
                "	WHERE receiveMaterialType = 'PR';         \n" +
                "  \n" +
                "	-- v_AllocatedReservedPackagingStock                              \n" +
                "	SELECT 	IFNULL(SUM(pkgUnit), 0) INTO v_AllocatedReservedPackagingStock                                       \n" +
                "	FROM 	tempPackagingAliasSidStockRawDet                                       \n" +
                "	WHERE 	receiveMaterialType = 'PR'                                       \n" +
                "	AND	id IN (SELECT refUIDId FROM kit_allocation WHERE STATUS = 'A');        \n" +
                "  \n" +
                "	-- V_TotalPackagingStockInSystemRecord                                    \n" +
                "	SELECT 	IFNULL(SUM(pkgUnit), 0) INTO v_TotalPackagingStockInSystemRecord                                     \n" +
                "	FROM 	tempPackagingAliasSidStockRawDet;          \n" +
                "  \n" +
                "	-- v_AllocatedPackagingStockToKitStock                                     \n" +
                "	SELECT 	IFNULL(SUM(fun_convertUOM(allocatedUOM, v_ToUom, IFNULL(allocatedUnit, 0))), 0) INTO v_AllocatedPackagingStockToKitStock                                           \n" +
                "	FROM 	kit_allocation                                           \n" +
                "	WHERE 	refUIDId IN (SELECT id FROM tempPackagingAliasSidStockRawDet)                                           \n" +
                "	AND 	STATUS = 'A';      \n" +
                "	SET v_ReservedPhysicalStock = v_TotalReservedStock - v_AllocatedReservedStock;                                    \n" +
                "	SET v_AvailableStock = (v_TotalStockInSystemRecord - v_AllocatedToKitStock);                                  \n" +
                "	SET v_ReservedPackagingPhysicalStock = v_TotalPackagingReservedStock - v_AllocatedReservedPackagingStock;                                    \n" +
                "	SET v_PackagingAliasStock = (v_TotalPackagingStockInSystemRecord - v_ReservedPackagingPhysicalStock - v_AllocatedPackagingStockToKitStock);                                    \n" +
                "	SET result = v_AvailableStock + v_PackagingAliasStock + IFNULL(v_NonUMIDStock, 0);                                    \n" +
                "  \n" +
                "	RETURN result;                                    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAvilableStockWithPackagingAliasInPins` ;  \n" +
                "CREATE FUNCTION `fun_getAvilableStockWithPackagingAliasInPins`(                                                           \n" +
                "		pLineItemId INT(11),                                  \n" +
                "		pAssyId VARCHAR(10000),                                  \n" +
                "		pSaleOrderDetailId INT(11),    \n" +
                "		pBomPin DECIMAL(18,8)                                 \n" +
                "	) RETURNS DECIMAL(18,8)  \n" +
                "BEGIN                                      \n" +
                "	DECLARE result DECIMAL(18,8);                                     \n" +
                "	DECLARE v_TotalStockInSystemRecord DECIMAL(18,8);                 \n" +
                "	DECLARE v_AllocatedToKitStock DECIMAL(18,8);             \n" +
                "	DECLARE v_NonUMIDStock DECIMAL(18,8);                             \n" +
                "  \n" +
                "	SET SESSION group_concat_max_len = 500000;           \n" +
                "  \n" +
                "	/*First get all Stock of UMID of BOM line including Packing Alias,and Line alternate parts */      \n" +
                "	SELECT 	SUM((FLOOR(IFNULL(noOfPosition, 0)/IFNULL(pBomPin, 0)) * IFNULL(pBomPin, 0)) * IFNULL(pkgUnit, 0))    \n" +
                "	INTO v_TotalStockInSystemRecord     \n" +
                "	FROM 	(    \n" +
                "		SELECT 		css.pkgUnit, c.noOfPosition                                           \n" +
                "		FROM 		component_sid_stock css      \n" +
                "		INNER JOIN 	component c ON c.id = css.refcompid AND c.isDeleted = 0                                            \n" +
                "		WHERE 		refcompid IN (                        \n" +
                "					SELECT 	mfgPNID                         \n" +
                "					FROM 	kit_allocation_lineitems_alternatepart a      \n" +
                "					WHERE 	refSalesOrderDetID = pSaleOrderDetailId               \n" +
                "							AND (CASE WHEN pAssyId IS NULL THEN partID = partID ELSE partID = pAssyId END)               \n" +
                "							AND FIND_IN_SET(refRfqLineitem, pLineItemId)                            \n" +
                "							AND deletedAt IS NULL         \n" +
                "					UNION      \n" +
                "					SELECT  custPNID AS mfgPNID              \n" +
                "					FROM 	kit_allocation_lineitems               \n" +
                "					WHERE 	refSalesOrderDetID = pSaleOrderDetailId               \n" +
                "							AND (CASE WHEN pAssyId IS NULL THEN partID = partID ELSE partID = pAssyId END)               \n" +
                "							AND FIND_IN_SET(refRfqLineitem, pLineItemId)    \n" +
                "							AND custPNID IS NOT NULL      \n" +
                "							AND deletedAt IS NULL            \n" +
                "					UNION      \n" +
                "					SELECT 	a.componentID       \n" +
                "					FROM 	component_packagingalias a       \n" +
                "					WHERE  	a.AliasGroupId IN (    \n" +
                "							SELECT 	b.AliasGroupid     \n" +
                "							FROM 	component_packagingalias b       \n" +
                "							WHERE 	EXISTS (    \n" +
                "								SELECT 	1     \n" +
                "								FROM 	kit_allocation_lineitems_alternatepart c      \n" +
                "								WHERE 	c.mfgPNID = b.componentid     \n" +
                "										AND (CASE WHEN pAssyId IS NULL THEN c.partID = c.partID ELSE partID = pAssyId END)     \n" +
                "										AND FIND_IN_SET(refRfqLineitem, pLineItemId)                 \n" +
                "										AND c.deletedAt IS NULL     \n" +
                "								)    \n" +
                "							)                       \n" +
                "					)                                             \n" +
                "					AND IFNULL(css.isDeleted,0) = 0      \n" +
                "				) a;                                    \n" +
                "  \n" +
                "	-- v_AllocatedToKitStock                             \n" +
                "	SELECT 	SUM((FLOOR(IFNULL(noOfPosition, 0)/IFNULL(pBomPin, 0)) * IFNULL(pBomPin, 0)) * IFNULL(allocatedUnit, 0))    \n" +
                "	INTO	v_AllocatedToKitStock    \n" +
                "	FROM 	(              \n" +
                "			SELECT 		ka.allocatedUnit, c.noOfPosition      \n" +
                "			FROM 		kit_allocation ka    \n" +
                "			INNER JOIN 	component c ON c.id = ka.partId AND c.isDeleted = 0                                               \n" +
                "			WHERE 		ka.partid IN (                        \n" +
                "						SELECT 	mfgPNID                         \n" +
                "						FROM 	kit_allocation_lineitems_alternatepart a      \n" +
                "						WHERE 	refSalesOrderDetID = pSaleOrderDetailId               \n" +
                "								AND (CASE WHEN pAssyId IS NULL THEN partID = partID ELSE partID = pAssyId END)     \n" +
                "								AND FIND_IN_SET(refRfqLineitem, pLineItemId)                            \n" +
                "								AND deletedAt IS NULL         \n" +
                "						UNION      \n" +
                "						SELECT 	custPNID AS mfgPNID              \n" +
                "						FROM 	kit_allocation_lineitems               \n" +
                "						WHERE 	refSalesOrderDetID = pSaleOrderDetailId               \n" +
                "								AND (CASE WHEN pAssyId IS NULL THEN partID = partID ELSE partID = pAssyId END)               \n" +
                "								AND FIND_IN_SET(refRfqLineitem, pLineItemId)          \n" +
                "								AND custPNID IS NOT NULL      \n" +
                "								AND deletedAt IS NULL            \n" +
                "						UNION      \n" +
                "						SELECT 	a.componentID       \n" +
                "						FROM 	component_packagingalias a       \n" +
                "						WHERE  	a.AliasGroupId IN (    \n" +
                "								SELECT 	b.AliasGroupid     \n" +
                "								FROM 	component_packagingalias b       \n" +
                "								WHERE 	EXISTS (    \n" +
                "										SELECT 	1     \n" +
                "										FROM 	kit_allocation_lineitems_alternatepart c      \n" +
                "										WHERE 	c.mfgPNID = b.componentid     \n" +
                "												AND c.refSalesOrderDetID = pSaleOrderDetailId      \n" +
                "												AND (CASE WHEN pAssyId IS NULL THEN c.partID = c.partID ELSE partID = pAssyId END)     \n" +
                "												AND FIND_IN_SET(c.refRfqLineitem, pLineItemId)                 \n" +
                "												AND c.deletedAt IS NULL     \n" +
                "									)    \n" +
                "								)       \n" +
                "					)                                             \n" +
                "					AND ka.STATUS = 'A'    \n" +
                "			) a;                       \n" +
                "  \n" +
                "	-- v_NonUMIDStock                    \n" +
                "	SELECT 	SUM((FLOOR(IFNULL(noOfPosition, 0)/IFNULL(pBomPin, 0)) * IFNULL(pBomPin, 0)) * IFNULL(nonUMIDStock, 0))    \n" +
                "	INTO v_NonUMIDStock                    \n" +
                "	FROM 	(              \n" +
                "			SELECT 		SUM((IFNULL(vu.BalanceQty, 1) * IFNULL(c.unit, 1))) AS nonUMIDStock, c.noOfPosition               \n" +
                "			FROM 		vu_umid_creation_pending vu                    \n" +
                "			INNER JOIN 	component c ON c.id = vu.PartId                    \n" +
                "			WHERE 		vu.PartId IN (                    \n" +
                "						SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pSaleOrderDetailId AND FIND_IN_SET(refRfqLineitem, pLineItemId) AND deletedAt IS NULL                              \n" +
                "						UNION                              \n" +
                "						SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (                                        \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pSaleOrderDetailId AND FIND_IN_SET(refRfqLineitem, pLineItemId) AND deletedAt IS NULL) AND deletedAt IS NULL                                         \n" +
                "						) AND deletedAt IS NULL            \n" +
                "						UNION            \n" +
                "						SELECT 	 custPNID AS mfgPNID              \n" +
                "						FROM 	kit_allocation_lineitems               \n" +
                "						WHERE 	refSalesOrderDetID = pSaleOrderDetailId               \n" +
                "								AND (CASE WHEN pAssyId IS NULL THEN partID = partID ELSE partID = pAssyId END)               \n" +
                "								AND FIND_IN_SET(refRfqLineitem, pLineItemId)              \n" +
                "								AND deletedAt IS NULL                           \n" +
                "					) AND BalanceQty > 0              \n" +
                "		) a;                                      \n" +
                "  \n" +
                "	SET result = (IFNULL(v_TotalStockInSystemRecord,0) - IFNULL(v_AllocatedToKitStock,0)) + IFNULL(v_NonUMIDStock, 0);                                      \n" +
                "  \n" +
                "	RETURN result;                                      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetKitFeasibility` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitFeasibility`(                  \n" +
                "	pRefSalesOrderDetID INT(11),                     \n" +
                "	pAssyID INT(11),                  \n" +
                "	pIsConsolidated TINYINT(1),                  \n" +
                "	pInputQty DECIMAL(18,8)              \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "	DECLARE vKitQty DECIMAL(18,8);           \n" +
                "	SET SESSION group_concat_max_len = 500000;            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempMountingTypeWiseKitDet;                  \n" +
                "	-- Call Sproc_CalculateKitFeasibility(pRefSalesOrderDetID, pAssyID, pIsConsolidated, pInputQty);                  \n" +
                "	SET vKitQty = fun_CalculateKitFeasibility(pRefSalesOrderDetID, pAssyID, pIsConsolidated, pInputQty);              \n" +
                "  \n" +
                "	SELECT 	mountingTypeID, 		        \n" +
                "		mountingType, 	    \n" +
                "		connecterTypeID,    \n" +
                "		connecterType,		        \n" +
                "		feasibilityWithAllocation, 	        \n" +
                "		shortageLine,                   \n" +
                "		feasibilityWithAvailableAndAllocatedStock,		        \n" +
                "		shortageWithAvailableQty, 	        \n" +
                "		shortageForInputQty,                  \n" +
                "		releasedQty,			        \n" +
                "		pendingQty,				        \n" +
                "		releasePercentage,        \n" +
                "		totalLine                  \n" +
                "	FROM 	tempMountingTypeWiseKitDet;                  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters` ;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(		                                                                                                                            \n" +
                "    IN pWhereClause VARCHAR(16383),                                                                                                                            \n" +
                "    IN puserID VARCHAR(50),                                                                                                      \n" +
                "    IN pnickName VARCHAR(20),                                                                                                                      \n" +
                "    IN pprefix VARCHAR(20),                                                                                                                      \n" +
                "    IN puid VARCHAR(20),                                                                                                                  \n" +
                "    IN pComponentID INT,                                                                                                              \n" +
                "    IN pCustomerID INT,                                                                                                              \n" +
                "    IN pCPN BOOL,                                                                                                              \n" +
                "    IN pMFGAvailabel BOOL,                                                                                                              \n" +
                "    IN pRefCpnMfgID INT,                                                                                                          \n" +
                "    IN pAssyID INT,                                                                                                          \n" +
                "    IN pSalesOrderDetailID INT,		                                                                                                          \n" +
                "    IN pReceiveMaterialType VARCHAR(255),                                                                                                \n" +
                "    IN pkitAssemblyID INT,                                                                                          \n" +
                "    IN pBarcodeID INT,                                          \n" +
                "    IN pBOMLineID INT 	                                                                                                         \n" +
                "    )  \n" +
                "BEGIN                                                                                                                            \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                                                                                                            \n" +
                "	DECLARE v_delimiter VARCHAR(10);                                                                                                                            \n" +
                "	DECLARE v_length INT;                                                                                                                             \n" +
                "	DECLARE v_fieldType INT;                                                                                                                                 \n" +
                "	DECLARE v_entityId INT;                                                                                                                            \n" +
                "	DECLARE v_dataElementId INT;                                                                                                                            \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);                                                                                                                            \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);                                                                                                                            \n" +
                "	DECLARE strLabel VARCHAR(2000);                                                                                                                            \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);                                                                                                                            \n" +
                "	DECLARE StaticField VARCHAR(100);                                                                                                      \n" +
                "	DECLARE DynamicField VARCHAR(100);		                                                                                                      \n" +
                "	DECLARE strFeildforInsert VARCHAR(200) DEFAULT 'scanlabel';                                                                                                                            \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');                                                                                                                            \n" +
                "	DECLARE plen,slen INT;                                                                                                                            \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;                                                                                                                            \n" +
                "	DECLARE pbr_Separator VARCHAR(10);                                                                                                                        \n" +
                "	DECLARE barcode_type_id INT;                                                                                                                  \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);                                                                                                              \n" +
                "	DECLARE UpdateValue VARCHAR(16383);                                                                                               \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';                                                                                              \n" +
                "	DECLARE v_SupplierID INT;                                                                                          \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);                                                                                            \n" +
                "	DECLARE v_barcode_id INT;                                                                                          \n" +
                "	DECLARE v_barcode_count INT;                                                                                          \n" +
                "	DECLARE v_NumberOfPart INT;                                                                                           \n" +
                "	DECLARE v_rfqLineItemsID INT;                                                                     \n" +
                "	DECLARE v_componentCount INT;                                                                  \n" +
                "	DECLARE v_componentId INT;                                                                        \n" +
                "	DECLARE v_mfgPartNO VARCHAR(50);                                                                  \n" +
                "	DECLARE v_partMFG INT;                                                                      \n" +
                "	DECLARE v_isGoodPart TINYINT(1);                                                                  \n" +
                "	DECLARE v_restrictUsePermanently TINYINT(1);                                                                  \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT(1);                                                                  \n" +
                "	DECLARE v_restrictUseInBOM TINYINT(1);                                                            \n" +
                "	DECLARE v_isInstall TINYINT(1);                                                             \n" +
                "	DECLARE v_isBOMLineClean TINYINT(1);                                                          \n" +
                "	DECLARE v_BOMLineId INT(11);                                                        \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT(1);                                                        \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT(1);                                                        \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;                                                        \n" +
                "	DECLARE v_PIDCode VARCHAR(50);                                                     \n" +
                "	DECLARE v_isPurchase TINYINT(1);                                                  \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);                                             \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);                                          \n" +
                "	DECLARE v_BOMLineCount INT(11);                                           \n" +
                "	DECLARE v_AlternateLineId INT(11);                                         \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);                                        \n" +
                "	DECLARE v_BOMAssyId INT(11);                                        \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);                                        \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT(1);                                \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT(1);                                \n" +
                "	DECLARE v_isCPNFlag TINYINT(1);                   \n" +
                "	DECLARE v_dateCodeFormatID INT;                     \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);                        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                                                                                                                             \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                                                                                                                            \n" +
                "	(                                                                                                                            \n" +
                "		errorText LONGTEXT,                                                                                                                            \n" +
                "		IsSuccess VARCHAR (2),                                                                                                                  \n" +
                "		MFGPart VARCHAR(10000)                                                                                                                                 \n" +
                "	);                                                                                               \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;                                                                                                                             \n" +
                "	CREATE TEMPORARY TABLE temp_Component_Sid_Stock                                                                                                                            \n" +
                "	(                                                                                                                            \n" +
                "		refcompid INT,                                                                                                                            \n" +
                "		pkgQty DECIMAL(18,6),                                                                                        \n" +
                "		dateCode VARCHAR(10),                                                                                        \n" +
                "		lotCode VARCHAR(255),                                                                                        \n" +
                "		scanlabel VARCHAR(1000),                                                                                        \n" +
                "		createdBy VARCHAR(255),                                                                                        \n" +
                "		uid VARCHAR(14),                                                                                        \n" +
                "		prefix VARCHAR(20),                                                                                        \n" +
                "		nickName VARCHAR(50),                                                                                        \n" +
                "		cpn TINYINT,                                                                                        \n" +
                "		mfgAvailabel TINYINT,                                                                                        \n" +
                "		refCPNMFGPNID INT,                                                                                        \n" +
                "		customerID INT,                                                                                        \n" +
                "		assyID INT,                                                                                        \n" +
                "		salesOrderDetailID INT,                                                                                        \n" +
                "		receiveMaterialType VARCHAR(255),                                                                                        \n" +
                "		refSupplierPartId INT,                \n" +
                "		mfrDateCode VARCHAR(50)                                                                                        \n" +
                "	);                                                                                         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;                                                                                                                             \n" +
                "	CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values                                                                                                                            \n" +
                "	(                                                                                                                            \n" +
                "		entityid INT,                                                                                        \n" +
                "		dataelementid INT,                                                                                        \n" +
                "		`value` LONGTEXT,                                                                                        \n" +
                "		createdBy VARCHAR(255)                                                                                        \n" +
                "	);                                                                                                           \n" +
                "	-- get data from barcode templates with seprator                                                                           \n" +
                "	# return error code                                                                        \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found                                                                        \n" +
                "	# 0: Barcode template does not exist, Please add template                                                                        \n" +
                "	# 1: Validation Clear                                                                        \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component                                                                        \n" +
                "	# 3: Mfgcode is not found                                                                        \n" +
                "	# 4: MFG PN does not exist                                                                        \n" +
                "	# 5: Multiple MFG PN found                                                                        \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code                                                                        \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly                                                                        \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer                                                                        \n" +
                "	# 9:  Multiple barcode template found.                                                                        \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check                                                                        \n" +
                "	# 11: MFG PN is incorrect part                                                                      \n" +
                "	# 12: PID PID1 was restricted part at part master level.                                                                    \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.                                                               \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.                                                              \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.                                                          \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.                                                        \n" +
                "	# 17: PID is contain more than 1 BOM line.                                   \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.                                \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.                                                               \n" +
                "  \n" +
                "	block1: BEGIN                              \n" +
                "		SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");                        \n" +
                "		IF (pBarcodeID IS NULL) THEN                                                                                          \n" +
                "			SELECT COUNT(*), id, barcodeType, `name` INTO v_barcode_count, v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                                                            \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                         \n" +
                "			-- AND (CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;                                                                                             \n" +
                "  \n" +
                "			IF (v_barcode_count > 1) THEN                                                                                          \n" +
                "				SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                                                              \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                         \n" +
                "				-- AND (CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;                                                                                            \n" +
                "  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                                                                                                             \n" +
                "				('Multiple barcode template found.',9,@multiple_barcode_string);	                                                                                                                            \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                               \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                 \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                          \n" +
                "			ELSE                                                                             \n" +
                "				/*SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                                                            \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND                                                                                          \n" +
                "				(CASE WHEN LENGTH(pWhereClause) > 30 THEN '2' ELSE barcodeType END) = barcodeType;   */                                                                                          \n" +
                "				SET pBarcodeID = v_barcode_id;                                                                                          \n" +
                "			END IF;                                                                                          \n" +
                "		ELSE                                                                                           \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND id = pBarcodeID AND `status`=1;                                                                                          \n" +
                "		END IF;                                                                 \n" +
                "  \n" +
                "		IF (barcode_type_id IS NULL) THEN                                \n" +
                "			/*SELECT COUNT(1) INTO v_NumberOfPart FROM                                                                                                     \n" +
                "			(                                                                                                    \n" +
                "				SELECT c.id,c.mfgPN FROM component c WHERE c.mfgPN=pWhereClause AND c.deletedAt IS NULL                                                                                                    \n" +
                "				UNION                                                                                                    \n" +
                "				SELECT c.id,c.mfgPN FROM component_otherpn co LEFT JOIN component c ON c.id=co.refComponentID                                                                                                     \n" +
                "				WHERE (c.mfgPN=pWhereClause OR co.name=pWhereClause) AND co.deletedAt IS NULL AND c.deletedAt IS NULL                                                                                                    \n" +
                "			) a;                            \n" +
                "			IF (v_NumberOfPart > 0) THEN   */                                                                                      \n" +
                "				SET pWhereClause = CONCAT(\"NONE\", pWhereClause);       				                        \n" +
                "				SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template  WHERE deletedAt IS NULL AND `status`=1 AND                                                                                            \n" +
                "				pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;                                                                                          \n" +
                "				SET pBarcodeID = v_barcode_id;                                  \n" +
                "			/*END IF;  */                      \n" +
                "		END IF;                                                                                           \n" +
                "  \n" +
                "		-- tempregexp;    	                                                                                                    \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */                                                                                            \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                                                                                                                          \n" +
                "			WHERE b.deletedAt IS NULL AND `status`=1 AND id = pBarcodeID;                                                                                          \n" +
                "			SET v_BarcodeType = '2D';                                                                                                                  \n" +
                "		ELSE /* barcode 1D */                           \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                                                                                                                           \n" +
                "			WHERE deletedAt IS NULL AND `status`=1 AND id = pBarcodeID;                         \n" +
                "			SET v_BarcodeType = '1D';                                                                                                               \n" +
                "		END IF;                                                                                          \n" +
                "	END block1;                              \n" +
                "  \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                                                                          \n" +
                "		block2: BEGIN                                                                                          \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found                                                                                                                            \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR                                                                                                                            \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                                                                                                                         \n" +
                "				WHERE refbrID = pBarcodeID AND deletedAt IS NULL;                                                                                                                     \n" +
                "			-- declare exit loop if data not found                                                                                                                            \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                                                                                                            \n" +
                "			-- if any record match found than  check for delimiter and its value                                                                                                                       \n" +
                "			IF (pbr_template_ID > 0) THEN                                                                                                                            \n" +
                "				-- create temporary table for deliemeter and component dataelement                                                                                                                            \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                                                                                                                            \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                                                                                                                            \n" +
                "					pentityId INT,                                                                                                                            \n" +
                "					pdataElementId INT,                                                                                                                            \n" +
                "					pdelimiter_value VARCHAR(200)                                                                                                                            \n" +
                "				);                                                                                                                       \n" +
                "				-- create temporary table for separator string values                                                                                                                            \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;					                                                                                                                            \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));                                                                                                                  \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string                                                                                                                            \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength FROM br_label_template WHERE deletedAt IS NULL AND id = pBarcodeID;                                                                                                                 \n" +
                "				-- open cursor                                                                                                                            \n" +
                "				OPEN barcodeMatch_cursor;                                                                                                                            \n" +
                "				-- set str label as whereclause                                                                                                                            \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");                         \n" +
                "				-- if prefix is found than remove those from actual string match                                                                                                                            \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN				                                                                                                                            \n" +
                "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));                                                    \n" +
                "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));                                                                                                                            \n" +
                "				 END IF;                                                                                                                           \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match                                                                                                                             \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN                                                                                                                            \n" +
                "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                                                                                                            \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                                                                                                                            \n" +
                "				 END IF;	                                                    \n" +
                "				-- insert all values after seprator split                                                                                                  \n" +
                "  \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                                        				                        \n" +
                "				PREPARE stmt1 FROM @SQL;                                                                                                                            \n" +
                "				EXECUTE stmt1;         \n" +
                "  \n" +
                "				-- create dynamic query to insert in recieving material                                                                                                                            \n" +
                "				SET QueryForStatic = 'insert into temp_Component_Sid_Stock';                                                                                                       \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template                                                                                                                            \n" +
                "				barcodeMatch_loop:LOOP                                                                                                         \n" +
                "					-- get all five selected values                                                                                                                            \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;                                                                                                                    \n" +
                "					-- exit loop if no record found for barcode match                                                                                                                            \n" +
                "					IF exit_loop THEN                                                                                                                       \n" +
                "						CLOSE barcodeMatch_cursor;                                                                                                                            \n" +
                "						LEAVE barcodeMatch_loop;                                                                                                                            \n" +
                "					END IF;                                                                                                                       \n" +
                "  \n" +
                "					-- dynamic query to get dellimeter string with values from string                                                                                                                            \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                                                                                                                            \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                                                                                                                            \n" +
                "					EXECUTE stmtdelimiter;                                                                                                                  \n" +
                "					-- get delimiter values from string                                                                                                                            \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));                                                                                                                    \n" +
                "					-- check for field type is static or dynamic                                                                                                                            \n" +
                "					-- if static field than check for mfg code and mfg part number                  \n" +
                "					IF v_fieldType = 0  THEN                                                                                                                        \n" +
                "						-- component_sid_stock                                                                                                                             \n" +
                "						-- get static field name from barcode table delimiter data element id                                                                                                                            \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id=v_dataElementId AND deletedAt IS NULL);                                                                                                                              \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                                                                                                                            \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN                                                                                                                  \n" +
                "							SET MFG_Part_No = delimiter_value_data;                                                                                                                  \n" +
                "							IF(pComponentID = 0)THEN                                                                 \n" +
                "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;                                                                 \n" +
                "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS        \n" +
                "								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission FROM                                                                                                     \n" +
                "								(                                                                                                    \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission                                                                   \n" +
                "									FROM 	component c                                                                   \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND c.isGoodPart = 1 AND c.deletedAt IS NULL                                                                                                    \n" +
                "									UNION                                                                                                    \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission                                                                   \n" +
                "									FROM 		component_otherpn co                                                                   \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID AND c.deletedAt IS NULL                                                                                                     \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND c.isGoodPart = 1 AND co.deletedAt IS NULL 	  \n" +
                "								) a  \n" +
                "								UNION  \n" +
                "								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission FROM                                                                                                     \n" +
                "								(                                                                                                    \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission                                                                   \n" +
                "									FROM 	component c                                                                   \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL                                                                                                    \n" +
                "									UNION                                                                                                    \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission                                                                   \n" +
                "									FROM 		component_otherpn co                                                                   \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID                                                                                                     \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL	  \n" +
                "								) a  \n" +
                "								INNER JOIN component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;  \n" +
                "  \n" +
                "								/*SELECT id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission FROM                                                                                                     \n" +
                "								(                                                                                                    \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission                                                                   \n" +
                "									FROM 	component c                                                                   \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL                                                                                                    \n" +
                "									UNION                                                                                                    \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission                                                                   \n" +
                "									FROM 		component_otherpn co                                                                   \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID                                                                                                     \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL                                                                                                    \n" +
                "								) a;*/                                                                \n" +
                "  \n" +
                "								SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;                         \n" +
                "								IF (v_componentCount > 1) THEN                                                                \n" +
                "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;                                                                 \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS                                                                \n" +
                "									SELECT * FROM temp_component_detail WHERE mfgcodeID > 0;                                                                \n" +
                "  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;                                                                \n" +
                "									IF (v_componentCount < 2) THEN                                                                \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                                         \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                                                  \n" +
                "										FROM 	temp_component_supplier_detail;                                                                \n" +
                "									END IF;                                                                \n" +
                "								ELSE                                                                 \n" +
                "									SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                                         \n" +
                "										INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                                                 \n" +
                "									FROM 	temp_component_detail;                                                                \n" +
                "								END IF;                                                                \n" +
                "  \n" +
                "								/*SELECT COUNT(1), id, mfgPN, mfgcodeID, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission FROM                                                                                                     \n" +
                "								(                                                                                                    \n" +
                "									SELECT 	c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission                                                                   \n" +
                "									FROM 	component c                                                                   \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND c.deletedAt IS NULL                                                                                                    \n" +
                "									UNION                                                                                                    \n" +
                "									SELECT 		c.id,c.mfgPN,c.mfgcodeID,c.refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission                                                                   \n" +
                "									FROM 		component_otherpn co                                                                   \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID                                                                                                     \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.deletedAt IS NULL AND c.deletedAt IS NULL                                                                                                    \n" +
                "								) a; */                                                                \n" +
                "							ELSE                                                                                                        \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                                                          \n" +
                "									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                                                                   \n" +
                "								FROM 	component                                                                   \n" +
                "								WHERE 	id = pComponentID AND deletedAt IS NULL;                                                                                                                  \n" +
                "							END IF;                                                                          \n" +
                "  \n" +
                "							/*IF (v_componentCount > 1) THEN                                                                  \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission                                                                   \n" +
                "								FROM 	component                                                                   \n" +
                "								WHERE 	mfgPN = delimiter_value_data AND mfgcodeID > 0 AND deletedAt IS NULL;                                                                  \n" +
                "							END IF;  */                                                                \n" +
                "  \n" +
                "							IF v_componentCount > 1 THEN                                                                                                                  \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                            \n" +
                "								LEAVE barcodeMatch_loop;                                                                                                                  \n" +
                "							END IF;                                                                \n" +
                "  \n" +
                "							IF (v_isGoodPart != 1) THEN                                                                        \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                            \n" +
                "								LEAVE barcodeMatch_loop;                                                                           \n" +
                "							END IF;                                                                        \n" +
                "  \n" +
                "							IF (v_restrictUsePermanently = 1) THEN                                                                      \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                            \n" +
                "								LEAVE barcodeMatch_loop;                                                                      \n" +
                "							END IF;                                                        \n" +
                "  \n" +
                "							IF (v_restrictPackagingAliasPermanently = 1) THEN                                                                      \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                            \n" +
                "								LEAVE barcodeMatch_loop;                                                                      \n" +
                "							END IF;                                                                      \n" +
                "  \n" +
                "							IF (@barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN                                                                                              \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';                                                                                              \n" +
                "								CLOSE barcodeMatch_cursor;                                                                                                                            \n" +
                "								LEAVE barcodeMatch_loop;                                                                                                \n" +
                "							END IF;                                                                                              \n" +
                "  \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND deletedAt IS NULL;                                                                                              \n" +
                "							IF (@MFGType = 'DIST') THEN                                                                                              \n" +
                "								SET v_SupplierID = v_componentId;                                                                                              \n" +
                "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier;                                                                                              \n" +
                "							END IF;                                         \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN                                            \n" +
                "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE deletedAt IS NULL AND refSalesOrderDetID = pSalesOrderDetailID;			                                        \n" +
                "								-- SELECT DISTINCT rfqLineItemsID INTO v_rfqLineItemsID FROM rfq_lineitems_alternatepart WHERE partID = pkitAssemblyID AND mfgPNID = v_componentId limit 1;				                                                                                                \n" +
                "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId   -- a.bomLineCleanStatus, a.description,                                                       \n" +
                "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId  -- v_isBOMLineClean, v_bomErrorDescription,                                                                                          \n" +
                "								FROM 	(                            \n" +
                "									SELECT 	*                            \n" +
                "									FROM                                              \n" +
                "										(                                                                                          \n" +
                "											SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall, -- fun_getBOMLineCleanStatusErrorCategoryWise(rml.id, NULL, NULL, NULL, 3) AS bomLineCleanStatus,                                                   \n" +
                "													-- CONCAT(IFNULL(rl.description, ''), IFNULL(rml.description,'')) description,                                         \n" +
                "													rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId                                \n" +
                "											FROM 		component_packagingalias cp                                                                                            \n" +
                "											LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid                                                                                            \n" +
                "											LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id                                                             \n" +
                "											INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID                                                                                           \n" +
                "											WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.deletedAt IS NULL                                                                  \n" +
                "											UNION                                                                                            \n" +
                "											SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall, -- fun_getBOMLineCleanStatusErrorCategoryWise(rla.id, NULL, NULL, NULL, 3) AS bomLineCleanStatus,                                                   \n" +
                "													-- CONCAT(IFNULL(rl.description, ''), IFNULL(rla.description,'')) description,                                         \n" +
                "													rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId                                                               \n" +
                "											FROM 		rfq_lineitems_alternatepart rla                                                            \n" +
                "											INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                                                                                                                           \n" +
                "											WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.deletedAt IS NULL                                                                                \n" +
                "											UNION                                           \n" +
                "											SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall, -- fun_getBOMLineCleanStatusErrorCategoryWise(rla.id, NULL, NULL, NULL, 3) AS bomLineCleanStatus,                                                   \n" +
                "													-- CONCAT(IFNULL(rl.description, ''), IFNULL(rla.description,'')) description,                                         \n" +
                "													rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId                                                                \n" +
                "											FROM 		rfq_lineitems_alternatepart rla                                                            \n" +
                "											INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                                                                                                                           \n" +
                "											WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.deletedAt IS NULL AND custPNID IS NOT NULL                                           \n" +
                "											GROUP BY 	custPNID, rla.partID                                \n" +
                "  \n" +
                "											/*SELECT 		id, custPNID AS componentID, 0 AS restrictUseInBOMStep, isInstall, 1 AS bomLineCleanStatus, description, isPurchase, isBuyDNPQty,                                             \n" +
                "													lineID                                                             \n" +
                "											FROM 		rfq_lineitems                                                                                            \n" +
                "											WHERE 		partID = pkitAssemblyID AND custPNID IS NOT NULL AND deletedAt IS NULL*/                                                                                        \n" +
                "										) b WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)                            \n" +
                "										GROUP BY b.lineID, b.assyId                            \n" +
                "								) a;                            \n" +
                "  \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN                                                                                                \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                            \n" +
                "									LEAVE barcodeMatch_loop;                                                              \n" +
                "								ELSEIF (v_BOMLineCount > 1) THEN                                                          \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                            \n" +
                "									LEAVE barcodeMatch_loop;                                                           \n" +
                "								ELSE                                        \n" +
                "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN                                                                                                \n" +
                "										CLOSE barcodeMatch_cursor;                                                                                                                            \n" +
                "										LEAVE barcodeMatch_loop;                                                                                                \n" +
                "									END IF;                                     \n" +
                "  \n" +
                "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;                                        \n" +
                "									IF (v_isBOMLineClean = 0) THEN                                                          \n" +
                "										CLOSE barcodeMatch_cursor;                                                                                                                            \n" +
                "										LEAVE barcodeMatch_loop;                                                           \n" +
                "									END IF;                                        \n" +
                "								END IF;                                                              \n" +
                "  \n" +
                "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN                                                            \n" +
                "									CLOSE barcodeMatch_cursor;                                                                                                                            \n" +
                "									LEAVE barcodeMatch_loop;                                                            \n" +
                "								END IF;                                                             \n" +
                "							END IF;                                                                                                \n" +
                "							IF  v_componentCount = 1 THEN                                     \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                                                                                                                            \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"'); 	    				                                                                                                                            \n" +
                "							END IF;                                                                                                      \n" +
                "						END IF;                                                                                                                            \n" +
                "  \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                                                                                                                            \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN                                                                                                                    \n" +
                "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND deletedAt IS NULL;                                                                                                                                            \n" +
                "						END IF;                                                                                                              \n" +
                "  \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                      \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                                                                                                                            \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                            \n" +
                "						END IF;                \n" +
                "  \n" +
                "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                      \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                                                                                                            \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                            \n" +
                "						END IF;                                                                                                                                                                                                        \n" +
                "  \n" +
                "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN      		                                                                                                      \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');                                                                                                                            \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                            \n" +
                "  \n" +
                "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND deletedAt IS NULL;                \n" +
                "							IF (v_dateCodeFormatID IS NOT NULL) THEN                \n" +
                "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);                \n" +
                "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;                \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                                                                                                            \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');                \n" +
                "							END IF;                \n" +
                "						END IF;                                                                                                                                                                                                        \n" +
                "  \n" +
                "						/*IF v_componentCount > 1 THEN                                                                                                                  \n" +
                "							CLOSE barcodeMatch_cursor;                                                                                                                            \n" +
                "							LEAVE barcodeMatch_loop;                                                                                                                  \n" +
                "						END IF;      */                                                                                                               \n" +
                "  \n" +
                "						-- SET strFeildforInsert = CONCAT(strFeildforInsert,',',StaticField);                                                                                                                            \n" +
                "						-- SET valuesforInsert= CONCAT(valuesforInsert,',', '\"', delimiter_value, '\"');                                                                                                                             \n" +
                "  \n" +
                "						-- select strFeildforInsert,valuesforInsert;                                                                                                                            \n" +
                "  \n" +
                "					ELSE                                                                                                        \n" +
                "						-- component_sid_stock_dataelement_Values                                                                                                                              \n" +
                "						-- dynamic fields                                                                                                           \n" +
                "						/*SET DynamicField=(SELECT dataElementName FROM dataelement WHERE dataElementID=v_dataElementId AND deletedAt IS NULL);                                                                                                       \n" +
                "						IF(DynamicField=\"Mfg Date Code\" AND delimiter_value_data IS NOT NULL) THEN                                                                                                            \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                                                                                                                            \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                            \n" +
                "						END IF;*/                                                                                                            \n" +
                "  \n" +
                "						/*IF(DynamicField=\"Lot Code\" AND delimiter_value_data IS NOT NULL) THEN                                                                                                            \n" +
                "							SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                                                                                                                            \n" +
                "							SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                                                                                            \n" +
                "						END IF;*/                                                                                                      \n" +
                "  \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE                                                                                                                             \n" +
                "							dataElementID=v_dataElementId AND deletedAt IS NULL;                                                                                                                         \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                                                                                                                             \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);                                                                                                                     \n" +
                "					END IF;                                                                                                                            \n" +
                "  \n" +
                "				END LOOP barcodeMatch_loop;                                                                     \n" +
                "				-- check if mfg and component both found than                                                                    \n" +
                "				IF v_componentCount = 0 THEN                                                                                                                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not exist',4,MFG_Part_No);                                                                                                                            \n" +
                "				ELSEIF (v_componentCount > 1) THEN                                                                                                                  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFR PN found',5,MFG_Part_No);                                                                                                                                    \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                                     \n" +
                "					IF (v_isGoodPart = 2) THEN                                                \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);                                                                      \n" +
                "					ELSE                                                \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);                                                                      \n" +
                "					END IF;                                                \n" +
                "				ELSEIF (v_restrictUsePermanently = 1) THEN                                                                      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);                                                                      \n" +
                "				ELSEIF (v_restrictPackagingAliasPermanently = 1) THEN                                     \n" +
                "					IF (v_isCPNFlag = 1) THEN                                \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);                                                                      \n" +
                "					ELSE                                 \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);                                                                      \n" +
                "					END IF;                                \n" +
                "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN                                                                                            \n" +
                "					-- In this case pass the barcodeid insted of MFGPN because in this case we have to not use the MFGPN                                                                                          \n" +
                "					-- if (v_BarcodeType = 1) then                                                                                          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);                                                                                                \n" +
                "					-- else                                                                                          \n" +
                "					-- 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please check the manufacturer and if not exist then create new template for same manufacturer.'),8,v_barcode_id);                                                                                                \n" +
                "					-- end if;                                                                                          \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN                                                                                                                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN or CPN is not found in bom of this assembly.',7,MFG_Part_No);                                                                                                \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN                                                                                                                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));                                                                                                \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN                                                        \n" +
                "					-- INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Due to the below pending issues/status your BOM line is not clean. So, you can not allocate to kit.<br/><div class=\"cm-bom-error-block\">',v_bomErrorDescription,'</div>'),15,MFG_Part_No);                                                                                                \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line no <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> is not clean. So, you can not allocate UMID into kit.'),15,MFG_Part_No);                                                                                                \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN                                                                                                                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);                                                                                                \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN                                                                                                                            \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);                                                                                               \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN                                                                                                                            \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);                                                                                               \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN                                                                                                                            \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);                                                                                               \n" +
                "				ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN                                                                                                                            \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                                                                                                                            \n" +
                "					IF @Mfgmatched = 0  THEN                                                                                                                            \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MFR PN are avialable but not matched in component',2,MFG_Part_No);							                                                                                                                            \n" +
                "					END IF;									                                                                                                                            \n" +
                "				ELSE 		                                                                                                                  \n" +
                "					IF @mfgCount = 0 THEN                                                                                                                            \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);                                                                                                                            \n" +
                "					END IF;	                                                                                                                            \n" +
                "					/*IF v_componentCount = 0 THEN                                                                                                                            \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not exist',4,MFG_Part_No);                                                                                                                            \n" +
                "					END IF;*/	                                                                                                                            \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND v_componentCount=0  THEN                                                                                                                              \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                                                                                                                            \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MFR PN is not Found',0,MFG_Part_No);                                                                                                                            \n" +
                "					END IF;						                                                                                                                            \n" +
                "				END IF;	                                                                        \n" +
                "  \n" +
                "				IF (pCPN = 1) THEN                                                                                                           \n" +
                "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;                                                                                                              \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;                                                                                                              \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN                                                                                                              \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);                                                                                                                            \n" +
                "					END IF;                                                                                 \n" +
                "  \n" +
                "					IF (@isCPNPart != 1) THEN                                                                              \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);                                                                                                                            \n" +
                "					END IF;                                                                                                           \n" +
                "				END IF;                                                                                                          \n" +
                "				IF (puid IS NOT NULL) THEN                                                           \n" +
                "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN                                                                                                                            \n" +
                "						IF (pprefix = '') THEN	                                                                                             \n" +
                "							CALL Sproc_GetBarcodeUIDForCPN(MFG_Part_No);   					                                                                                                              \n" +
                "							SELECT pNewUID, pFinalPrefix INTO puid, pprefix FROM tempNewUIDForCPN;                                                                                                              \n" +
                "						END IF;                                                                                                           \n" +
                "  \n" +
                "						-- must call statements in sequence          				                                                                                                                  \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',',','uid',')','VALUES','(',valuesforInsert,',',puserID,',\"',puid,'\")',';');                                                                																		        						                \n" +
                "						PREPARE stmt1 FROM @SQL1;                                                                                                                            \n" +
                "						EXECUTE stmt1;                                                                                                                         \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set prefix=','\"',pprefix,'\"');                                                                                                              \n" +
                "						IF (pnickName IS NOT NULL) THEN                                                                                                              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');                                                                                                              \n" +
                "						END IF;                                                                                                \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);                                                                                          \n" +
                "  \n" +
                "						IF (pRefCpnMfgID IS NOT NULL) THEN                                                                                                              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);                                                                                                              \n" +
                "						END IF;                                                                                                 \n" +
                "  \n" +
                "						IF (pCustomerID IS NOT NULL) THEN                                                                                                              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);                                                                                                              \n" +
                "						END IF;                                                                                             \n" +
                "  \n" +
                "						IF (pAssyID IS NOT NULL) THEN                                                                                                              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);                                                                                                              \n" +
                "						END IF;                                                                                               \n" +
                "  \n" +
                "						IF (pSalesOrderDetailID IS NOT NULL) THEN                                                                                                              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);                                                                                                              \n" +
                "						END IF;                                                                                                \n" +
                "  \n" +
                "						IF (pReceiveMaterialType IS NOT NULL) THEN                                                                                                              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');                                                                                                           \n" +
                "						END IF;                                                                                             \n" +
                "  \n" +
                "						IF (v_SupplierID IS NOT NULL) THEN                                                                                                              \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);                                                                                                              \n" +
                "						END IF;                                                                                             \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue,' where uid=','\"',puid,'\"');                         \n" +
                "						SET @sql2 = UpdateValue;	                                                                                                                             \n" +
                "						PREPARE stmt2 FROM @SQL2;                                                                                                                            \n" +
                "						EXECUTE stmt2;	                                                                                          \n" +
                "  \n" +
                "						IF (pkitAssemblyID IS NULL) THEN                                        \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                                                                                                                            \n" +
                "						ELSE                                         \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));                                                                                                                            \n" +
                "						END IF;                                        \n" +
                "  \n" +
                "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN                                                                                                                  \n" +
                "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)                                                                                                                             \n" +
                "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 			                                                                                                                            \n" +
                "						END IF;                                                                                                                            \n" +
                "  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                            \n" +
                "						SELECT * FROM temp_Component_Sid_Stock;                                                                                            \n" +
                "  \n" +
                "						SELECT 	c.*,                      \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,                      \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                       \n" +
                "							csup.packageQty AS supplierPkgQty,                       \n" +
                "							csup.mfgcodeID AS supplierMfgId,                       \n" +
                "							mcm.mfgcode AS supplierMFGCode,                       \n" +
                "							mcm.mfgName AS supplierMFGName,                       \n" +
                "							csup.mfgPN AS supplierMFGPN,                       \n" +
                "							csup.packagingID AS supplierPackagingId,                       \n" +
                "							fun_getPackagingNameByID(csup.packagingID) AS supplierPackagingName,                       \n" +
                "							csup.minimum AS supplierMinimum,                       \n" +
                "							ccpn.id AS cpnID,                       \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,                       \n" +
                "							rfqroh.rohsIcon AS rohsIcon,                       \n" +
                "							rfqroh.name AS rohsName,                       \n" +
                "							rfqmou.name AS mountingTypeName,                       \n" +
                "							um.unitName AS uomName,                      \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE deletedAt IS NULL AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                      \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE deletedAt IS NULL AND id = mg.dateCodeFormatID) dateCodeFormat,                      \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,    \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName                       \n" +
                "						FROM component AS c                                                                                         \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID                                                                                        \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID                                                                                        \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                      \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID                                                                                        \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                                                                                    \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID                                                                                        \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID                                                                          \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom                                                                                       \n" +
                "						WHERE c.id = v_componentId;                                                                                        \n" +
                "  \n" +
                "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`                                                                                        \n" +
                "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv                                                                                         \n" +
                "						LEFT OUTER JOIN `dataelement` AS dl                                                                                        \n" +
                "						ON cssdlv.dataelementid = dl.dataElementID AND dl.deletedAt IS NULL;                                                                               \n" +
                "  \n" +
                "						SELECT 	id, refComponentID, refCPNPartID                                               \n" +
                "						FROM 	component_cust_alias_rev_pn                                               \n" +
                "						WHERE 	refCPNPartID = v_componentId AND deletedAt IS NULL;                                \n" +
                "  \n" +
                "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (                                                                  \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND deletedAt IS NULL                                                                   \n" +
                "						) AND deletedAt IS NULL;                                        \n" +
                "  \n" +
                "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,                                 \n" +
                "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN                                               \n" +
                "						FROM 		rfq_lineitems_alternatepart rla                                              \n" +
                "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.deletedAt IS NULL                                  \n" +
                "						WHERE 		rla.deletedAt IS NULL                                               \n" +
                "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))                                               \n" +
                "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)                                               \n" +
                "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);                                                        \n" +
                "  \n" +
                "					ELSE                                                                                                                           \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                                                            \n" +
                "					END IF;                                                                            \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                                                                               \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                          \n" +
                "				ELSE                                                                        \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                   \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                               \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                               \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                                                                                       \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                               \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                  \n" +
                "					SELECT 	c.*,                       \n" +
                "						fun_getPackagingNameByID(c.packagingID) AS packagingName,                       \n" +
                "						CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                       \n" +
                "						csup.packageQty AS supplierPkgQty,                       \n" +
                "						csup.mfgcodeID AS supplierMfgId,                       \n" +
                "						mcm.mfgcode AS supplierMFGCode,                       \n" +
                "						mcm.mfgName AS supplierMFGName,                       \n" +
                "						csup.packagingID AS supplierPackagingId,                       \n" +
                "						csup.mfgPN AS supplierMFGPN,                       \n" +
                "						csup.id AS supplierMFGPNID,                       \n" +
                "						fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,                       \n" +
                "						fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,                                 \n" +
                "						ccpn.id AS cpnID,                       \n" +
                "						ccpn.mfgcodeID AS cpnMFGCodeID,                       \n" +
                "						rfqroh.rohsIcon AS rohsIcon,                       \n" +
                "						rfqroh.name AS rohsName,                       \n" +
                "						rfqmou.name AS mountingTypeName,                       \n" +
                "						um.unitName AS uomName,                      \n" +
                "						(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE deletedAt IS NULL AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                      \n" +
                "						(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE deletedAt IS NULL AND id = mg.dateCodeFormatID) dateCodeFormat,                      \n" +
                "						mg.dateCodeFormatID AS dateCodeFormatId,    \n" +
                "						fun_getPackageCaseNameByID(c.partPackageID) partPackageName                                         \n" +
                "					FROM component AS c                                                                                         \n" +
                "					LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID                                                                                        \n" +
                "					LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID                                                                                        \n" +
                "					LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                      \n" +
                "					LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID                                                                                        \n" +
                "					LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID                                                                                     \n" +
                "					LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID                                                                                   \n" +
                "					LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID                                                                            \n" +
                "					LEFT JOIN uoms AS um ON um.id = c.uom                                                                          \n" +
                "					WHERE c.id = v_componentId;                     \n" +
                "  \n" +
                "				END IF;                                                                                      \n" +
                "			ELSE                         \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                                                                                                                             \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);	                                                                                                                            \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;			                                                                                                                              \n" +
                "			END IF;                                                                                                                            \n" +
                "  \n" +
                "		END block2;                \n" +
                "	ELSE              \n" +
                "		IF (puid IS NOT NULL) THEN              \n" +
                "			SELECT * FROM tempUIDSuccessDetail;              \n" +
                "		ELSE               \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                               \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS              \n" +
                "			SELECT 1;              \n" +
                "		END IF;              \n" +
                "	END IF;                                                                                                                                      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2751,'2.00','V1','fun_getAvilableStockWithPackagingAliasForConsolidate, fun_getAvilableStockWithPackagingAliasInPins, Sproc_GetKitFeasibility, Sproc_MatchBarCodeAndSaveDelimiters - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2751:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-08-2020 *********************************** */

                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2752,'2.00','V1',' Change Supplier quote document route - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2752:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-08-2020  *********************************** */
                "UPDATE page_detail SET pageName = 'BOM Summary (option 1)', menuName = 'BOM Summary', displayMenuName='Bill Of Materials - Summary' WHERE pageRoute = 'app.rfq.bom.summary';  \n" +
                "UPDATE page_detail SET pageName = 'BOM Summary', menuName = 'BOM Summary', displayMenuName='Bill Of Materials - Summary' WHERE pageRoute = 'app.rfq.bom.summary2';  \n" +
                /* **************************** New Script -> 08-08-2020  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSupplierQuoteByPartID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSupplierQuoteByPartID`(                                   \n" +
                "IN pPartID TEXT                                   \n" +
                ")  \n" +
                "BEGIN                                   \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(100);               \n" +
                "	DECLARE vTimeZone VARCHAR(50);               \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;      \n" +
                "	SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;                                        \n" +
                "  \n" +
                "	SET @quoteresult =  CONCAT(\"SELECT DISTINCT sq.id supplierQuoteID,    \n" +
                "		sp.id supplierQuotePartID,    \n" +
                "		sq.supplierID,    \n" +
                "		m.mfgCode AS supplierCode,    \n" +
                "		m.mfgName AS supplierName,   \n" +
                "		cm.mfgCode,    \n" +
                "		cm.mfgName,    \n" +
                "		sp.partID,    \n" +
                "		sp.supplierPartID,    \n" +
                "		sq.quoteNumber,    \n" +
                "		sq.quoteDate,    \n" +
                "		fun_ApplyCommonDateFormatByParaValue(sq.quoteDate,'\",vTimeZone,\"', '\",vDateDisplayFormat,\"') quoteDateValue,    \n" +
                "		sq.quoteStatus,    \n" +
                "		c.mfgPN,    \n" +
                "		c.PIDCode,    \n" +
                "		c.RoHSStatusID,    \n" +
                "		c.isCustom,    \n" +
                "		r.name rohs,    \n" +
                "		r.rohsIcon    \n" +
                "	FROM supplier_quote_parts_det sp    \n" +
                "	LEFT JOIN supplier_quote_mst sq ON sq.id = sp.supplierQuoteMstID    \n" +
                "	RIGHT OUTER JOIN supplier_quote_part_price pr ON pr.supplierQuotePartDetID = sp.id  \n" +
                "	LeFt Join mfgcodemst m on m.id = sq.supplierID    \n" +
                "	LEFT JOIN Component c ON c.id = sp.partID   \n" +
                "	LEFT JOIN mfgcodemst cm ON cm.id = c.mfgCodeID    \n" +
                "	LEFT JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID    \n" +
                "	WHERE sp.partID in (\",pPartID,\") AND sp.isDeleted = 0 AND sp.isActive;\");    \n" +
                "	PREPARE quoteresult1 FROM @quoteresult;            \n" +
                "	EXECUTE quoteresult1;                                                                      \n" +
                "	DEALLOCATE PREPARE quoteresult1;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2753,'2.00','V1','Resolved Issue - Jignesh K '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2753:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrivePackingSlipMaterialReceivePartInspectionList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceivePartInspectionList`(                            \n" +
                "	IN pPageIndex INT(11),                            \n" +
                "	IN pRecordPerPage INT(11),                            \n" +
                "	IN pOrderBy VARCHAR(255),                            \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "	IN pLineId INT(11)        \n" +
                ")  \n" +
                "BEGIN                            \n" +
                "	DECLARE pOffset INT(11);                \n" +
                "	DECLARE rowNumWhere VARCHAR(255);     \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePackingSlipMaterialReceivePartInspectionList = CONCAT(\"     \n" +
                "		SELECT 	pspid.id,    \n" +
                "			pspid.lineId,  \n" +
                "			pspid.partId,    \n" +
                "			pspid.instruction,  \n" +
                "			pspid.inspectionStatus,  \n" +
                "			(   \n" +
                "				CASE  \n" +
                "					WHEN pspid.inspectionStatus = 'P' THEN   \n" +
                "						'Pending'  \n" +
                "					WHEN pspid.inspectionStatus = 'A' THEN   \n" +
                "						'Accept'  \n" +
                "					WHEN pspid.inspectionStatus = 'R' THEN   \n" +
                "						'Reject'  \n" +
                "					WHEN pspid.inspectionStatus = 'AD' THEN   \n" +
                "						'Accept with Deviation'  \n" +
                "					ELSE  \n" +
                "						NULL  \n" +
                "				END  \n" +
                "			) inspectionStatusValue,  \n" +
                "			pspid.remark,  \n" +
                "			fun_getUserNameByID(pspid.updatedBy) updatedby,                        \n" +
                "			fun_getUserNameByID(pspid.createdBy) createdby,                        \n" +
                "			fun_getUserNameByID(pspid.deletedBy) deletedby,                        \n" +
                "			fun_getRoleByID(pspid.createByRoleId) createdbyRole,                        \n" +
                "			fun_getRoleByID(pspid.updateByRoleId) updatedbyRole,                        \n" +
                "			fun_getRoleByID(pspid.deleteByRoleId) deletedbyRole,                        \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(pspid.createdAt) createdAt,                        \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(pspid.UpdatedAt) updatedAt,                        \n" +
                "			fun_ConvertUTCDatetimeToDataKeyTimeZone(pspid.deletedAt) deletedAt     \n" +
                "		FROM 	packing_slip_material_receive_part_inspection_det pspid    \n" +
                "		WHERE	lineId = \", pLineId ,\"   \n" +
                "				AND isDeleted = 0    \n" +
                "	\");    \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                              \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \",\" id DESC \") ;                                              \n" +
                "	ELSE                                              \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;                                              \n" +
                "	END IF;	                                              \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                \n" +
                "		SET pWhereClause = ' 1=1 ' ;                \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                              \n" +
                "	ELSE	                                              \n" +
                "		SET rowNumWhere = '';                                              \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePackingSlipMaterialReceivePartInspectionList,\" ) c where 1=1 and \", pWhereClause);        \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                \n" +
                "	EXECUTE query1;                                \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT a.* FROM ( \", @temp_Sproc_RetrievePackingSlipMaterialReceivePartInspectionList,\" ) a WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                \n" +
                "	EXECUTE query2;                     \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2754,'2.00','V1','Sproc_RetrivePackingSlipMaterialReceivePartInspectionList - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2754:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-08-2020 *********************************** */
                "Update page_detail set pageRoute = 'app.transaction.supplierquote.documents' where pageRoute = 'app.transaction.supplierquote.managesupplierquote.documents';  \n" +
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2755,'2.00','V1',' Change Supplier quote document route - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2755:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-08-2020 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GenerateInternalDateCodeFromMFRDateCode`;  \n" +
                "CREATE PROCEDURE `Sproc_GenerateInternalDateCodeFromMFRDateCode`(            \n" +
                "	IN pMFRDateCodeFormatId INT(11),            \n" +
                "	IN pMFRDateCode VARCHAR(50),        \n" +
                "	IN pIsCallFromAPI BOOLEAN            \n" +
                ")  \n" +
                "BEGIN            \n" +
                "	DECLARE vDateFormat VARCHAR(50);            \n" +
                "	DECLARE pMFRConvertedDateCode VARCHAR(50);            \n" +
                "	DECLARE vInternalDateCodeFormat VARCHAR(4);            \n" +
                "	DECLARE vStrMFRDate VARCHAR(50);      \n" +
                "	DECLARE vMFRDate DATETIME;     \n" +
                "    DECLARE vMFRDateCodeYear int;  \n" +
                "    DECLARE vInternalDateCode VARCHAR(4);  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR 1411,1406      \n" +
                "	BEGIN      \n" +
                "		SELECT 	pMFRDateCodeFormatId mfrDateCodeFormatId,         \n" +
                "			(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE id = pMFRDateCodeFormatId) mfrDateCodeFormat,             \n" +
                "			pMFRDateCode mfrDateCode,             \n" +
                "			'WWYY' internalDateCodeFormat,             \n" +
                "			NULL internalDateCode,      \n" +
                "			'ERROR01' errorMessageCode;       \n" +
                "	END;      \n" +
                "  \n" +
                "	SET vInternalDateCodeFormat = 'WWYY';            \n" +
                "  \n" +
                "	SELECT dateCodeFormat INTO vDateFormat FROM dateCodeFormatMst WHERE id = pMFRDateCodeFormatId;            \n" +
                "  \n" +
                "	IF (vDateFormat = 'WWYY') THEN      \n" +
                "		set vMFRDateCodeYear = YEAR(STR_TO_DATE(RIGHT(pMFRDateCode, 2),'%Y'));  \n" +
                "		SET pMFRConvertedDateCode = CONCAT(vMFRDateCodeYear,LEFT(pMFRDateCode, 2),' Monday');            \n" +
                "		SELECT STR_TO_DATE(pMFRConvertedDateCode,'%x%v %W') INTO vMFRDate;    \n" +
                "  \n" +
                "		if(vMFRDateCodeYear > year(vMFRDate)) then  \n" +
                "			SELECT STR_TO_DATE(CONCAT(vMFRDateCodeYear,'-01-01'),'%Y-%m-%d') INTO vMFRDate;    \n" +
                "		end if;  \n" +
                "	ELSEIF (vDateFormat = 'YYWW') THEN            \n" +
                "		set vMFRDateCodeYear = YEAR(STR_TO_DATE(LEFT(pMFRDateCode, 2),'%Y'));  \n" +
                "		SET pMFRConvertedDateCode = CONCAT(vMFRDateCodeYear,RIGHT(pMFRDateCode, 2),' Monday');            \n" +
                "		SELECT STR_TO_DATE(pMFRConvertedDateCode,'%x%v %W') INTO vMFRDate;             \n" +
                "  \n" +
                "        if(vMFRDateCodeYear > year(vMFRDate)) then  \n" +
                "			SELECT STR_TO_DATE(CONCAT(vMFRDateCodeYear,'-01-01'),'%Y-%m-%d') INTO vMFRDate;    \n" +
                "		end if;  \n" +
                "	ELSEIF (vDateFormat = 'MMYY') THEN            \n" +
                "		SET pMFRConvertedDateCode = CONCAT('01',pMFRDateCode);            \n" +
                "		SELECT STR_TO_DATE(pMFRConvertedDateCode,'%d%m%y') INTO vMFRDate;            \n" +
                "	ELSEIF (vDateFormat = 'YYMM') THEN            \n" +
                "		SET pMFRConvertedDateCode = CONCAT('01',pMFRDateCode);            \n" +
                "		SELECT STR_TO_DATE(pMFRConvertedDateCode,'%d%y%m') INTO vMFRDate;            \n" +
                "	ELSEIF (vDateFormat = 'DDMMYY') THEN            \n" +
                "		SET pMFRConvertedDateCode = pMFRDateCode;            \n" +
                "		SELECT STR_TO_DATE(pMFRConvertedDateCode,'%d%m%y') INTO vMFRDate;            \n" +
                "	END IF;       \n" +
                "  \n" +
                "	set vInternalDateCode = (CASE WHEN vMFRDate IS NOT NULL THEN DATE_FORMAT(vMFRDate,'%u%y') ELSE NULL END);  \n" +
                "    IF(LEFT(vInternalDateCode, 2) = '00') THEN  \n" +
                "		SET vInternalDateCode = CONCAT('01', RIGHT(vInternalDateCode, 2));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_InternalDateCodeFromMFRDateCode;	                                  \n" +
                "	CREATE 	TEMPORARY TABLE IF NOT EXISTS temp_InternalDateCodeFromMFRDateCode AS                                  \n" +
                "	SELECT 	pMFRDateCodeFormatId mfrDateCodeFormatId,         \n" +
                "			vDateFormat mfrDateCodeFormat,             \n" +
                "			pMFRDateCode mfrDateCode,             \n" +
                "			vInternalDateCodeFormat internalDateCodeFormat,             \n" +
                "			vInternalDateCode AS internalDateCode;      \n" +
                "			-- (CASE WHEN vMFRDate IS NOT NULL THEN DATE_FORMAT(vMFRDate,'%u%y') ELSE NULL END) AS internalDateCode;      \n" +
                "	IF (pIsCallFromAPI) THEN        \n" +
                "		SELECT 	* FROM temp_InternalDateCodeFromMFRDateCode;            \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2756,'2.00','V1',' Modified internal date code logic for MMYY and YYMM format - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2756:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "UPDATE page_detail SET pageRoute ='app.transaction.supplierquote.manage'  \n" +
                ",pageURL='/manage/:id'  \n" +
                "WHERE pageName ='Add Supplier Quote';  \n" +
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2757,'2.00','V1',' Supplier Quote - Dharmesh'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2757:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "ALTER TABLE supplier_quote_part_price  \n" +
                "MODIFY COLUMN itemNumber DECIMAL(18,8) DEFAULT NULL;  \n" +
                "ALTER TABLE supplier_quote_part_price_history  \n" +
                "MODIFY COLUMN itemNumber DECIMAL(18,8) DEFAULT NULL;  \n" +
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2758,'2.00','V1',' Supplier Quote - Dharmesh'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2758:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetShippedPackingslipDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippedPackingslipDetails`(      \n" +
                "	IN salesOrderDetID INT ,    \n" +
                "	IN ppartID INT,  \n" +
                "	IN ppackingSlipID INT     \n" +
                "    )  \n" +
                "BEGIN       \n" +
                "	SELECT SUM(shipQty) shipQty,partID FROM customer_packingslip_det WHERE refsalesorderdetid=IFNULL(salesOrderDetID,refsalesorderdetid)   \n" +
                "	AND refCustPackingSlipID!=ppackingSlipID AND partID=ppartID AND isdeleted=0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "DROP VIEW IF EXISTS `vu_customer_packing_slip_qty` ;  \n" +
                "CREATE VIEW `vu_customer_packing_slip_qty` AS   \n" +
                "SELECT  \n" +
                "  `a`.`opStock`      AS `opStock`,  \n" +
                "  `a`.`woNumber`     AS `woNumber`,  \n" +
                "  `a`.`assyID`       AS `assyID`,  \n" +
                "  `a`.`availableQty` AS `availableQty`,  \n" +
                "  `a`.`availableQty` AS `actualAvalilableQty`,  \n" +
                "  `a`.`partID`       AS `partID`,  \n" +
                "  `a`.`rohsIcon`     AS `rohsIcon`,  \n" +
                "  `a`.`rohsName`     AS `rohsName`,  \n" +
                "  `a`.`mfgPN`        AS `mfgPN`,  \n" +
                "  0                  AS `selectedQty`  \n" +
                "FROM (SELECT  \n" +
                "        SUM(`atk`.`openingStock`) AS `opStock`,  \n" +
                "        `atk`.`partID`      AS `partID`,  \n" +
                "        `atk`.`woNumber`    AS `woNumber`,  \n" +
                "        `fun_getAssyPIDCodeByID`(  \n" +
                "`atk`.`partID`)  AS `assyID`,  \n" +
                "        `fun_getRoHSIconByPartID`(  \n" +
                "`atk`.`partID`)  AS `rohsIcon`,  \n" +
                "        `fun_getRoHSNameByPartID`(  \n" +
                "`atk`.`partID`)  AS `rohsName`,  \n" +
                "        `fun_getComponentNameByID`(  \n" +
                "`atk`.`partID`)  AS `mfgPN`,  \n" +
                "        (SUM(`atk`.`openingStock`) - (SELECT IFNULL(SUM(`ss`.`shippedqty`),0) FROM `shippedassembly` `ss` WHERE ((`ss`.`isDeleted` = 0) AND (`ss`.`woNumber` = `atk`.`woNumber`) AND (`ss`.`partID` = `atk`.`partID`)))) AS `availableQty`  \n" +
                "      FROM `assemblystock` `atk`  \n" +
                "      WHERE (`atk`.`isDeleted` = 0)  \n" +
                "      GROUP BY `atk`.`woNumber`,`atk`.`partID`) `a`  \n" +
                "WHERE (`a`.`availableQty` > 0);  \n" +
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_customer_packingslip_det` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_customer_packingslip_det`(            \n" +
                "	IN tableName VARCHAR(255),            \n" +
                "	IN IDs LONGTEXT,            \n" +
                "	IN deletedBy INT,            \n" +
                "	IN entityID VARCHAR(255),            \n" +
                "	IN refrenceIDs LONGTEXT,            \n" +
                "	IN countList INT,      \n" +
                "    IN pRoleID INT      \n" +
                "    )  \n" +
                "BEGIN            \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION            \n" +
                "BEGIN            \n" +
                "	ROLLBACK;            \n" +
                "	RESIGNAL;            \n" +
                "END;            \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING            \n" +
                "BEGIN            \n" +
                "	ROLLBACK;            \n" +
                "	RESIGNAL;            \n" +
                "END;            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempcustomerPackingslipdet;           \n" +
                "	-- delete sales order master if reference ID is not null        \n" +
                "	-- refernece ID is equal to salesOrderDetID        \n" +
                "  \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomerPackingslipdet as          \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly where refCustPackingSlipDetID IN(',IDs,') AND deletedAt IS NULL LIMIT 1)  \n" +
                "		');                                                                       \n" +
                "		PREPARE stmt FROM @SQL;                                                                        \n" +
                "		EXECUTE stmt;                                                                        \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN                                                                       \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempcustomerPackingslipdet t)=0 THEN                                                                      \n" +
                "			START TRANSACTION;     \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update customer_packingslip_det set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                                        \n" +
                "				PREPARE stmt1 FROM @SQL1;                                                                        \n" +
                "				EXECUTE stmt1;   \n" +
                "  \n" +
                "  \n" +
                "				SELECT * FROM tempcustomerPackingslipdet WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";                \n" +
                "			COMMIT;                                                                         \n" +
                "			ELSE                                                                        \n" +
                "			      SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcustomerPackingslipdet t;                                                                       \n" +
                "			END IF;              \n" +
                "		ELSE      \n" +
                "  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg              \n" +
                "				FROM tempcustomerPackingslipdet t1              \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name              \n" +
                "				WHERE IFNULL(t1.cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"              \n" +
                "				ORDER BY t2.display_page_name;                            \n" +
                "		END IF;         \n" +
                "		DROP TABLE tempcustomerPackingslipdet;                                                                           \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(                       \n" +
                "    IN tableName VARCHAR(255),                       \n" +
                "    IN IDs LONGTEXT,                       \n" +
                "    IN deletedBy INT,                       \n" +
                "    IN entityID VARCHAR(255),                       \n" +
                "    IN refrenceIDs LONGTEXT,            \n" +
                "    IN countList INT,                            \n" +
                "    IN pRoleID INT                            \n" +
                ")  \n" +
                "BEGIN                                                        \n" +
                "IF tableName=\"employees\" THEN                       \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                       \n" +
                "IF tableName=\"eco_type_category\" THEN                       \n" +
                "     CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                   \n" +
                "END IF;                       \n" +
                "IF tableName=\"eco_type_values\" THEN                       \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                 \n" +
                "END IF;                       \n" +
                "IF tableName=\"customers\" THEN                       \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                     \n" +
                "END IF;                       \n" +
                "IF tableName=\"certificate_standards\" THEN                       \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                   \n" +
                "END IF;                       \n" +
                "IF tableName=\"department\" THEN                       \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                       \n" +
                "END IF;                       \n" +
                "IF tableName=\"genericcategory\" THEN                       \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                       \n" +
                "IF tableName=\"equipment\" THEN                       \n" +
                "    CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                                               \n" +
                "IF tableName=\"master_templates\" THEN                       \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                       \n" +
                "IF tableName=\"operations\" THEN                       \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                 \n" +
                "END IF;                       \n" +
                "IF tableName=\"workorder\" THEN                       \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                    \n" +
                "END IF;                       \n" +
                "IF tableName=\"roles\" THEN                      \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"standard_class\" THEN                       \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"dataelement\" THEN                       \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN                       \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                  \n" +
                "END IF;                       \n" +
                "IF tableName=\"component\" THEN                       \n" +
                "    CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;                       \n" +
                "IF tableName=\"workorder_cluster\" THEN                        \n" +
                "    CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"workorder_operation\" THEN                      \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"workorder_operation_part\" THEN                       \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                   \n" +
                "END IF;                       \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN                       \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                     \n" +
                "END IF;                       \n" +
                "IF tableName=\"workorder_operation_employee\" THEN                       \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                    \n" +
                "END IF;                       \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN                       \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                   \n" +
                "END IF;                       \n" +
                "IF tableName=\"entity\" THEN                       \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                       \n" +
                "IF tableName=\"salesordermst\" THEN                       \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                     \n" +
                "END IF;                       \n" +
                "IF tableName=\"mfgcodemst\" THEN                       \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                 \n" +
                "END IF;                       \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN                       \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);              \n" +
                "END IF;                       \n" +
                "IF tableName=\"shippedassembly\" THEN                       \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN                       \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);             \n" +
                "END IF;                       \n" +
                "IF tableName=\"br_label_template\" THEN                       \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);             \n" +
                "END IF;                       \n" +
                "IF tableName=\"measurement_types\" THEN                       \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                     \n" +
                "END IF;                       \n" +
                "IF tableName=\"uoms\" THEN                       \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                    \n" +
                "END IF;                       \n" +
                "IF tableName=\"jobtypes\" THEN                       \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                    \n" +
                "END IF;                       \n" +
                "IF tableName=\"rfqtype\" THEN                       \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                     \n" +
                "END IF;                       \n" +
                "IF tableName=\"reasonmst\" THEN                       \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"component_sid_stock\" THEN             \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);              \n" +
                "END IF;                       \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN              \n" +
                "    CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);               \n" +
                "END IF;                       \n" +
                "IF tableName=\"chart_templatemst\" THEN                        \n" +
                "    CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                      \n" +
                "END IF;                       \n" +
                "IF tableName=\"shipping_requestdet\" THEN                       \n" +
                "    CALL Sproc_checkDelete_shipping_requestdet(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                    \n" +
                "END IF;                       \n" +
                "IF tableName=\"chart_rawdata_category\" THEN                       \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                 \n" +
                "END IF;                              \n" +
                "IF tableName=\"rfq_lineitems\" THEN                       \n" +
                "      CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                            \n" +
                "END IF;                       \n" +
                "IF tableName=\"requirement\" THEN                       \n" +
                "    CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);             \n" +
                "END IF;                       \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN                  \n" +
                "    CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                     \n" +
                "END IF;                       \n" +
                "IF tableName=\"customer_addresses\" THEN                       \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                     \n" +
                "END IF;                       \n" +
                "IF tableName=\"rfqforms\" THEN                       \n" +
                "    CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                     \n" +
                "END IF;                       \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN                       \n" +
                "    CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"who_bought_who\" THEN                       \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"rfq_parttypemst\" THEN                       \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN                       \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);            \n" +
                "END IF;                       \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN                       \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                 \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                       \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                     \n" +
                "END IF;                                              \n" +
                "IF tableName=\"cost_category\" THEN                       \n" +
                "    CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                 \n" +
                "END IF;                               \n" +
                "IF tableName=\"chartypemst\" THEN                       \n" +
                "    CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                              \n" +
                "END IF;              \n" +
                "IF tableName=\"countrymst\" THEN              \n" +
                "     CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;            \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN              \n" +
                "     CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;            \n" +
                "IF tableName=\"rfq_assy_typemst\" THEN            \n" +
                "     CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                        \n" +
                "END IF;                                                                      \n" +
                "IF tableName=\"warehousemst\" THEN            \n" +
                "     CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                         \n" +
                "END IF;                                                                   \n" +
                "IF tableName=\"binmst\" THEN            \n" +
                "     CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                        \n" +
                "END IF;                                                               \n" +
                "IF tableName=\"rackmst\" THEN            \n" +
                "     CALL Sproc_checkDelete_rackmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                        \n" +
                "END IF;                  \n" +
                "IF tableName=\"component_logicalgroup\" THEN                                                                  \n" +
                "     CALL Sproc_checkDelete_component_logical_group(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                                                                        \n" +
                "END IF;                                                               \n" +
                "IF tableName=\"packing_slip_material_receive\" THEN                                                                  \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);             \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"packing_slip_material_receive_det\" THEN                                                                  \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive_det(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                        \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"packing_slip_track_number\" THEN                                                                  \n" +
                "     CALL Sproc_checkDelete_packing_slip_track_number(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                                        \n" +
                "END IF;                                                       \n" +
                "IF tableName=\"reserve_stock_request\" THEN                                                      \n" +
                "       	 CALL Sproc_checkDelete_reserve_stock_request(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                                                      \n" +
                "END IF;                 \n" +
                "IF tableName=\"component_packagingmst\" THEN                                                                    \n" +
                "     CALL Sproc_checkDelete_component_packagingmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;               \n" +
                "IF tableName=\"workorder_trans_narrative_history\" THEN                                                                    \n" +
                "     CALL Sproc_checkDelete_workorder_trans_narrative_history(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                                                   \n" +
                "IF tableName=\"scannermst\" THEN                                                                    \n" +
                "     CALL Sproc_checkDelete_Scanner(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;                                                  \n" +
                "IF tableName=\"component_alternatepn_validations\" THEN                                                                   \n" +
                "     CALL Sproc_checkDelete_Alias_Parts_Validation(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);            \n" +
                "END IF;            \n" +
                "IF tableName=\"workorder_operation_equipment_feeder_details\" THEN                        \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment_feeder_details(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                      \n" +
                "END IF;                                          \n" +
                "IF tableName=\"component_price_break_details\" THEN                        \n" +
                "    CALL Sproc_checkDelete_component_price_break_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                      \n" +
                "END IF;                                           \n" +
                "IF tableName=\"department_location\" THEN                        \n" +
                "    CALL Sproc_checkDelete_department_location(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                      \n" +
                "END IF;                                                       \n" +
                "IF tableName=\"purchase_parts_details\" THEN                        \n" +
                "    CALL Sproc_checkDelete_purchase_parts_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                      \n" +
                "END IF;                                                       \n" +
                "IF tableName=\"rfq_rohsmst\" THEN                        \n" +
                "    CALL Sproc_checkDelete_rfq_rohsmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                      \n" +
                "END IF;                                  \n" +
                "IF tableName=\"component_partstatusmst\" THEN                        \n" +
                "    CALL Sproc_checkDelete_component_partstatusmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                      \n" +
                "END IF;                                  \n" +
                "IF tableName=\"workorder_trans_umid_details\" THEN                        \n" +
                "    CALL Sproc_checkDelete_workorder_trans_umid_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                      \n" +
                "END IF;                           \n" +
                "IF tableName=\"labor_cost_template\" THEN                        \n" +
                "    CALL Sproc_checkDelete_labor_cost_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                      \n" +
                "END IF;                                                          \n" +
                "IF tableName=\"rfq_packagecasetypemst\" THEN                        \n" +
                "    CALL Sproc_checkDelete_rfq_packagecasetypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                        \n" +
                "END IF;                      \n" +
                "IF tableName=\"component_dynamic_attribute\" THEN                        \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                        \n" +
                "END IF;                      \n" +
                "IF tableName=\"component_dynamic_attribute_mapping_part\" THEN                        \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute_mapping_part(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                        \n" +
                "END IF;                    \n" +
                "IF tableName=\"labeltemplatesmst\" THEN                    \n" +
                "    CALL Sproc_checkDelete_labeltemplates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                 \n" +
                "IF tableName=\"reportmaster\" THEN                    \n" +
                "    CALL Sproc_checkDelete_reportMaster(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                   \n" +
                "IF tableName=\"operating_temperature_conversion_mst\" THEN                    \n" +
                "    CALL Sproc_checkDelete_operating_temperature_conversion_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;             \n" +
                "IF tableName=\"inspection_mst\" THEN                    \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementMst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;                   \n" +
                "IF tableName=\"inspection_template_mst\" THEN                    \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementTemplate(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;         \n" +
                "IF tableName=\"componenet_inspection_requirement_det\" THEN                    \n" +
                "    CALL Sproc_checkDelete_componenet_inspection_requirement_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                  \n" +
                "END IF;            \n" +
                "IF tableName=\"supplier_quote_mst\" THEN    \n" +
                "   CALL Sproc_checkDelete_supplier_quote(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;    \n" +
                "IF tableName=\"supplier_quote_parts_det\" THEN    \n" +
                "   CALL Sproc_checkDelete_supplier_quote_parts(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;    \n" +
                "IF tableName=\"calibration_details\" THEN    \n" +
                "   CALL Sproc_checkDelete_CalibrationDetails(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;    \n" +
                "IF tableName=\"customer_packingslip\" THEN    \n" +
                "   CALL Sproc_checkDelete_customer_packingslip(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;   \n" +
                "IF tableName=\"customer_packingslip_det\" THEN    \n" +
                "   CALL Sproc_checkDelete_customer_packingslip_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);    \n" +
                "END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerPackingSlipDeatils` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(              \n" +
                "	IN ppageIndex INT(11),              \n" +
                "	IN precordPerPage INT(11),              \n" +
                "	IN pOrderBy VARCHAR(255),              \n" +
                "	IN pWhereClause VARCHAR(16383)              \n" +
                ")  \n" +
                "BEGIN              \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);              \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;              \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"          \n" +
                "		SELECT cd.packingSlipNumber,cd.packingslipDate,cd.poNumber,cd.soNumber,cd.soDate,cd.poDate,  \n" +
                "	fun_getMfgCodeAndNameByID(cd.customerID) customerName,cd.freeOnBoard,cd.packingslipcomment,  \n" +
                "(SELECT gen.gencCategoryCode  FROM genericcategory gen WHERE gen.gencCategoryID = cd.shippingmethodid) shippingMethod,cd.status,cd.sorevision,cpd.partId,fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "fun_getRoHSIconByPartID(cpd.partId) rohsIcon,fun_getComponentNameByID(cpd.partId) assyName ,fun_getAssyidByID(cpd.partid) assyId,  \n" +
                "case when cd.status=0 then 'Draft' else 'Published' end statusConvertedValue,cd.refSalesOrderID,  \n" +
                "cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,  \n" +
                "cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,  \n" +
                "case when cd.packingSlipType=1 then 'MISC' else 'PO' end as packingTypeText,cd.packingSlipType,  \n" +
                "fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,      \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,      \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,   \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,   \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.createdAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.createdAt) END  createdAt,   \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.UpdatedAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.UpdatedAt) END  updatedAt  \n" +
                "  \n" +
                "		FROM customer_packingslip cd   LEFT JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND IFNULL(cpd.isdeleted,0)=0    \n" +
                "		LEFT JOIN component c ON c.id=cpd.partid         \n" +
                "		WHERE  cd.isDeleted=0            \n" +
                "	\");              \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN              \n" +
                "        SET pOrderBy = \"ORDER BY packingSlipNumber DESC\";    \n" +
                "	ELSE              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN              \n" +
                "		SET pWhereClause = '1=1' ;              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;              \n" +
                "	ELSE	              \n" +
                "		SET rowNumWhere = '';              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */                 \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                \n" +
                "	EXECUTE query2;                \n" +
                "	DEALLOCATE PREPARE query2;              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
                "	PREPARE query1 FROM @SQLStatement2;                \n" +
                "	EXECUTE query1;                \n" +
                "	DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "update page_detail set pageRoute='app.transaction.customerpacking.main.documents' where pageName='Manage Customer Packing Slip Documents';  \n" +
                /* **************************** Add Script Version -> 08-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2759,'2.00','V1',' Customer packing slip changes-champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2759:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getTotalHistoryPrice` ;  \n" +
                "CREATE FUNCTION `fun_getTotalHistoryPrice`(                        \n" +
                "	prfqAssyID INT(11),          \n" +
                "	pqtyID INT(11)) RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN                        \n" +
                "	DECLARE result NVARCHAR(16383);                      \n" +
                "	SELECT  CONCAT(\"SELECT rq.refHistoryID,(SELECT fun_ConvertUTCDatetimeToDataKeyTimeZone(rch.createdAt)) createdAt,                                                               \n" +
                "						(SUM(rq.unitPrice * ra.qpa * (CASE WHEN         \n" +
                "					(SELECT connecterTypeID FROM component WHERE id=rq.componentID)= -2 THEN        \n" +
                "					IFNULL(ra.numOfPosition,1)        \n" +
                "					ELSE 1 END))) AS TotalExtendedPrice,          \n" +
                "						(SUM(rq.unitPrice * ra.qpa * (CASE WHEN         \n" +
                "					(SELECT connecterTypeID FROM component WHERE id=rq.componentID)= -2 THEN        \n" +
                "					IFNULL(ra.numOfPosition,1)        \n" +
                "					ELSE 1 END)) * IFNULL(rq.requestQty,0)) AS TotalAssemblyPrice,                                                  \n" +
                "						SUM((IFNULL(rq.quoteqty,0)-(rq.requestQty*IFNULL(ra.qpa,1) * (CASE WHEN         \n" +
                "					(SELECT connecterTypeID FROM component WHERE id=rq.componentID)= -2 THEN        \n" +
                "					IFNULL(ra.numOfPosition,1)        \n" +
                "					ELSE 1 END)))*IFNULL(rq.unitPrice,0)) AS TotalExcessPrice              \n" +
                "					           FROM rfq_consolidate_mfgpn_lineitem_quantity_history rq           \n" +
                "					           LEFT JOIN rfq_consolidated_mfgpn_lineitem_history ra ON rq.consolidateID=ra.consolidateID AND rq.refHistoryID=ra.refHistoryID          \n" +
                "					           LEFT JOIN rfq_consolidated_history rch on rch.id=rq.refHistoryID                                                                    \n" +
                "					        WHERE rq.qtyID=\",pqtyID,\" AND rq.refHistoryID in (SELECT id FROM tempHistory) AND ra.isdeleted=0 AND rq.isDeleted=0 and ra.isPurchase = 1 AND ra.rfqAssyid=\",prfqAssyID,\"  GROUP BY rq.refHistoryID\")  INTO @result;                        \n" +
                "      	SET result = @result;                        \n" +
                "	RETURN result;                        \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPricingHistoryRange` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPricingHistoryRange`(                                                                    \n" +
                "                IN ppageIndex INT(11),                                                                    \n" +
                "IN precordPerPage INT(11),                                                                    \n" +
                "IN pOrderBy VARCHAR(255),                                                                    \n" +
                "IN pWhereClause VARCHAR(16383),                                                                    \n" +
                "IN prfqAssyID INT(11),                \n" +
                "IN passyQtyID INT(11),                \n" +
                "IN pstartHistory INT (11),                \n" +
                "IN plastHistory INT(11)                                           \n" +
                ")  \n" +
                "BEGIN                                                                    \n" +
                "  \n" +
                "    DECLARE pOffset INT(11);                                                                    \n" +
                "            DECLARE rowNumWhere VARCHAR(255) ;                                                                    \n" +
                "            SET @SQLString = NULL;                                                                    \n" +
                "            SET SESSION group_concat_max_len = 150000;                                                                        \n" +
                "            IF (pOrderBy IS NOT NULL) THEN                                                                    \n" +
                "        SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                    \n" +
                "            ELSE                                                                    \n" +
                "            SET pOrderBy =\"ORDER BY lineiD asc\";                                                                     \n" +
                "            END IF;	                                                                    \n" +
                "  \n" +
                "  \n" +
                "            IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                                                    \n" +
                "        SET pWhereClause = '1=1' ;                                                                    \n" +
                "            END IF;	                                                                    \n" +
                "  \n" +
                "            IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                     \n" +
                "            SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                    \n" +
                "            SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                    \n" +
                "            ELSE	                                                                    \n" +
                "            SET rowNumWhere = '';                                                                    \n" +
                "            END IF;	                \n" +
                "            DROP TEMPORARY TABLE IF EXISTS tempHistory;                                                                     \n" +
                "            CREATE TEMPORARY TABLE IF NOT EXISTS tempHistory AS                 \n" +
                "            SELECT id FROM rfq_consolidated_history WHERE rfqAssyID=prfqAssyID AND id>=pstartHistory AND id<=plastHistory ORDER BY id;                \n" +
                "            SELECT                                                                    \n" +
                "            GROUP_CONCAT(DISTINCT                                                                    \n" +
                "       CONCAT(                                                                    \n" +
                "           'Max((IF(rq.refHistoryID = ''',                                                                    \n" +
                "               rch.id,                                                                    \n" +
                "           ''',CONCAT(FORMAT((rq.unitPrice * rl.qpa * (CASE WHEN           \n" +
                "           (SELECT connecterTypeID FROM component WHERE id=rq.componentid)= -2 THEN          \n" +
                "            IFNULL(rl.numOfPosition,1)          \n" +
                "            ELSE 1 END)),5),\"|\",rq.supplier,\"|\",rq.selectedPIDCode,\"|\",FORMAT(IFNULL(rq.unitEachPrice,0),5),\" EA\"), null))) AS ''',                                                                    \n" +
                "                (SELECT fun_ConvertUTCDatetimeToDataKeyTimeZone(rch.createdAt)),''''                                                                    \n" +
                "                )                                                                    \n" +
                "                ORDER BY rch.createdAt DESC)   INTO @SQLString                                                                   \n" +
                "    FROM rfq_consolidate_mfgpn_lineitem_quantity_history rq                    \n" +
                "      LEFT JOIN rfq_consolidated_mfgpn_lineitem_history rl ON rq.consolidateID=rl.consolidateID                           \n" +
                "      LEFT JOIN rfq_consolidated_history rch ON rch.id=rl.refHistoryID                                                                    \n" +
                "      WHERE rl.rfqAssyID=prfqAssyID AND rq.qtyid=passyQtyID AND rq.isDeleted=0 AND rch.id IN (SELECT id FROM tempHistory);                                                                  \n" +
                "  \n" +
                "  \n" +
                "            SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItemsWithPackagingHistory(prfqAssyID,@SQLString,passyQtyID));                  \n" +
                "  \n" +
                "            PREPARE stmt FROM @SQLStatement;                                                            \n" +
                "            EXECUTE stmt;	                    \n" +
                "  \n" +
                "            SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM consolidatetemp where \", pWhereClause );                                                                    \n" +
                "            PREPARE query1 FROM @SQLStatement1;                                                                    \n" +
                "            EXECUTE query1;                                                                    \n" +
                "            DEALLOCATE PREPARE query1;                                                                    \n" +
                "  \n" +
                "  \n" +
                "            SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                     \n" +
                "  \n" +
                "            PREPARE query2 FROM @SQLStatement2;                                                                    \n" +
                "            EXECUTE query2;                                                                    \n" +
                "            DEALLOCATE PREPARE query2;                  \n" +
                "  \n" +
                "            SET @SQLStatement3 = (SELECT fun_getTotalHistoryPrice(prfqAssyID,passyQtyID));                     \n" +
                "            PREPARE query3 FROM @SQLStatement3;                                                                    \n" +
                "            EXECUTE query3;                                                                    \n" +
                "            DEALLOCATE PREPARE query3;                  \n" +
                "  \n" +
                "  \n" +
                "            DROP TEMPORARY TABLE consolidatetemp;                                                                      \n" +
                "            END;  \n" +
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPricingHistoryCompareRange` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPricingHistoryCompareRange`(                                                                    \n" +
                "	IN ppageIndex INT(11),                                                                    \n" +
                "	IN precordPerPage INT(11),                                                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                    \n" +
                "	IN prfqAssyID INT(11),                \n" +
                "	IN passyQtyID INT(11),                \n" +
                "	IN pstartHistory INT (11),                \n" +
                "	IN plastHistory INT(11)                                           \n" +
                "    )  \n" +
                "BEGIN                                                                    \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                                                    \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                                                    \n" +
                "	    SET @SQLString = NULL;                                                                    \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                                                        \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                    \n" +
                "		ELSE                                                                    \n" +
                "			SET pOrderBy = \"ORDER BY lineiD asc\";                                                                     \n" +
                "		END IF;	                                                                    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                                                    \n" +
                "			SET pWhereClause = '1=1' ;                                                                    \n" +
                "		END IF;	                                                                    \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                    \n" +
                "		ELSE	                                                                    \n" +
                "			SET rowNumWhere = '';                                                                    \n" +
                "		END IF;	                \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempHistory;                                                                     \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempHistory AS                 \n" +
                "		SELECT id FROM rfq_consolidated_history WHERE rfqAssyID=prfqAssyID AND (id=pstartHistory OR id=plastHistory) ORDER BY id;                \n" +
                "		SELECT                                                                    \n" +
                "                     GROUP_CONCAT(DISTINCT                                                                    \n" +
                "				CONCAT(                                                                    \n" +
                "					'Max((IF(rq.refHistoryID = ''',                                                                    \n" +
                "						rch.id,                                                                    \n" +
                "					''',CONCAT(FORMAT((rq.unitPrice * rl.qpa * (CASE WHEN           \n" +
                "					(SELECT connecterTypeID FROM component WHERE id=rq.componentID)= -2 THEN          \n" +
                "					IFNULL(rl.numOfPosition,1)          \n" +
                "					ELSE 1 END)),5),\"|\",rq.supplier,\"|\",rq.selectedPIDCode,\"|\",FORMAT(IFNULL(rq.unitEachPrice,0),5),\" EA\"), null))) AS ''',                                                                    \n" +
                "						(SELECT fun_ConvertUTCDatetimeToDataKeyTimeZone(rch.createdAt)),''''                                                                    \n" +
                "					)                                                                    \n" +
                "					ORDER BY rch.createdAt DESC)   INTO @SQLString                                                                   \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity_history rq                    \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem_history rl ON rq.consolidateID=rl.consolidateID                           \n" +
                "		  LEFT JOIN rfq_consolidated_history rch ON rch.id=rl.refHistoryID                                                                    \n" +
                "		  WHERE rl.rfqAssyID=prfqAssyID AND rq.qtyid=passyQtyID AND rq.isDeleted=0 AND rch.id IN (SELECT id FROM tempHistory);                                                                  \n" +
                "  \n" +
                "  \n" +
                "		     SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItemsWithPackagingHistory(prfqAssyID,@SQLString,passyQtyID));                  \n" +
                "  \n" +
                "                         PREPARE stmt FROM @SQLStatement;                                                            \n" +
                "			EXECUTE stmt;	                    \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM consolidatetemp where \", pWhereClause );                                                                    \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                                                    \n" +
                "			EXECUTE query1;                                                                    \n" +
                "			DEALLOCATE PREPARE query1;                                                                    \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                     \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                                                    \n" +
                "			EXECUTE query2;                                                                    \n" +
                "			DEALLOCATE PREPARE query2;                  \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_getTotalHistoryPrice(prfqAssyID,passyQtyID));                     \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                                    \n" +
                "			EXECUTE query3;                                                                    \n" +
                "			DEALLOCATE PREPARE query3;                  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                                                      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPricingHistoryLastFive` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPricingHistoryLastFive`(                                                                    \n" +
                "	IN ppageIndex INT(11),                                                                    \n" +
                "	IN precordPerPage INT(11),                                                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                    \n" +
                "	IN prfqAssyID INT(11),                \n" +
                "	IN passyQtyID INT(11)                                           \n" +
                "    )  \n" +
                "BEGIN                                                                    \n" +
                "  \n" +
                "	    DECLARE pOffset INT(11);                                                                    \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;                                                                    \n" +
                "	    SET @SQLString = NULL;                                                                    \n" +
                "	    SET SESSION group_concat_max_len = 150000;                                                                        \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN                                                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                    \n" +
                "		ELSE                                                                    \n" +
                "			SET pOrderBy = \"ORDER BY lineiD asc\";                                                                     \n" +
                "		END IF;	                                                                    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                                                    \n" +
                "			SET pWhereClause = '1=1' ;                                                                    \n" +
                "		END IF;	                                                                    \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                    \n" +
                "		ELSE	                                                                    \n" +
                "			SET rowNumWhere = '';                                                                    \n" +
                "		END IF;	                \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempHistory;                                                                     \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempHistory AS                 \n" +
                "		SELECT id FROM rfq_consolidated_history WHERE rfqAssyID=prfqAssyID ORDER BY id DESC LIMIT 5;                \n" +
                "		SELECT                                                                    \n" +
                "                     GROUP_CONCAT(DISTINCT                                                                    \n" +
                "				CONCAT(                                                                    \n" +
                "					'Max((IF(rq.refHistoryID = ''',                                                                    \n" +
                "						rch.id,                                                                    \n" +
                "					''',CONCAT(FORMAT((rq.unitPrice * rl.qpa * (CASE WHEN           \n" +
                "					(SELECT connecterTypeID FROM component WHERE id=rq.componentid)= -2 THEN          \n" +
                "					IFNULL(rl.numOfPosition,1)          \n" +
                "					ELSE 1 END)),5),\"|\",rq.supplier,\"|\",rq.selectedPIDCode,\"|\",FORMAT(IFNULL(rq.unitEachPrice,0),5),\" EA\"), null))) AS ''',                                                                    \n" +
                "						(SELECT fun_ConvertUTCDatetimeToDataKeyTimeZone(rch.createdAt)),''''                                                                    \n" +
                "					)                                                                    \n" +
                "					ORDER BY rch.createdAt DESC)   INTO @SQLString                                                                   \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity_history rq                    \n" +
                "		  LEFT JOIN rfq_consolidated_mfgpn_lineitem_history rl ON rq.consolidateID=rl.consolidateID                        \n" +
                "		  LEFT JOIN rfq_consolidated_history rch ON rch.id=rl.refHistoryID                                                                \n" +
                "		  WHERE rl.rfqAssyID=prfqAssyID AND rq.qtyid=passyQtyID AND rq.isDeleted=0  AND rch.id IN (SELECT id FROM tempHistory);                                                                  \n" +
                "  \n" +
                "  \n" +
                "		     SET @SQLStatement =(SELECT fun_getCommonConsolidateLineItemsWithPackagingHistory(prfqAssyID,@SQLString,passyQtyID));                  \n" +
                "  \n" +
                "                         PREPARE stmt FROM @SQLStatement;                                                            \n" +
                "			EXECUTE stmt;	                    \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM consolidatetemp where \", pWhereClause );                                                                    \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                                                    \n" +
                "			EXECUTE query1;                                                                    \n" +
                "			DEALLOCATE PREPARE query1;                                                                    \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM  consolidatetemp where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                     \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                                                    \n" +
                "			EXECUTE query2;                                                                    \n" +
                "			DEALLOCATE PREPARE query2;                  \n" +
                "  \n" +
                "			SET @SQLStatement3 = (SELECT fun_getTotalHistoryPrice(prfqAssyID,passyQtyID));                     \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                                                    \n" +
                "			EXECUTE query3;                                                                    \n" +
                "			DEALLOCATE PREPARE query3;                  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE consolidatetemp;                                                                      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2760,'2.00','V1','Price history changes-champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2760:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getRohsParentListString`;  \n" +
                "CREATE FUNCTION `fun_getRohsParentListString`(  \n" +
                "pRoHSID int  \n" +
                ") RETURNS text  \n" +
                "BEGIN  \n" +
                "	Declare RohsParent text;  \n" +
                "		DROP temporary table if exists temp_ParentRoHS;    \n" +
                "		Create temporary table temp_ParentRoHS    \n" +
                "		WITH RECURSIVE cte AS    \n" +
                "		(    \n" +
                "			(    \n" +
                "				select id,`name`,refParentID from rfq_rohsmst where id = pRoHSID and isdeleted = 0 and refParentID is not null   \n" +
                "			)    \n" +
                "			union all    \n" +
                "			(    \n" +
                "				select ro.id, ro.`name`, ro.refParentID from rfq_rohsmst ro     \n" +
                "				join cte cte on cte.refParentID = ro.id    \n" +
                "				where ro.isdeleted = 0 and ro.refParentID is not null  \n" +
                "			)    \n" +
                "		)    \n" +
                "		SELECT cte.* FROM cte;    \n" +
                "		select group_concat(`name` separator '@@@') into RohsParent from temp_ParentRoHS;  \n" +
                "  \n" +
                "        DROP temporary table if exists temp_ParentRoHS;    \n" +
                "	RETURN RohsParent;               \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRohsList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRohsList`(                            \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "    IN psourceDetails VARCHAR(50)    \n" +
                "	)  \n" +
                "BEGIN                            \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);                            \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;     \n" +
                "        DECLARE vDateTimeDisplayFormat VARCHAR(100);             \n" +
                "		DECLARE vTimeZone VARCHAR(50);             \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;              \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;      \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempMoutingType;        \n" +
                "  \n" +
                "		SET @tempMountQuery=CONCAT(\"create temporary table if not exists  tempMoutingType as        \n" +
                "		select id,refTableName,refId,alias,isdeleted from component_fields_genericalias_mst where deletedAt is NULL\");         \n" +
                "  \n" +
                "		IF(psourceDetails IS NOT NULL OR psourceDetails!='')THEN        \n" +
                "			SET @tempMountQuery=CONCAT(@tempMountQuery,\" and id in (select refAliasID from  component_attributes_source_mapping where mfgcodeid in (\",psourceDetails,\"))\");        \n" +
                "  \n" +
                "		END IF;          \n" +
                "  \n" +
                "		        PREPARE queryMount FROM @tempMountQuery;                    \n" +
                "			EXECUTE queryMount;                    \n" +
                "			DEALLOCATE PREPARE queryMount;                      \n" +
                "  \n" +
                "		set @tempQuery = concat(\"SELECT ro.id,ro.name,ro.description,ro.isActive,ro.systemGenerated,ro.rohsIcon,ro.refMainCategoryID,    \n" +
                "        displayOrder,fun_getRoHSNameByID(ro.refParentID) parentRoHS,    \n" +
                "        (select group_concat(fun_getRoHSNameByID(rohsPeerID) separator '@@@') from rfq_rohsmst_peer    \n" +
                "		where rohsID = ro.id and isdeleted = 0) RoHSPeers,  \n" +
                "        fun_getRohsParentListString(ro.id) rohsParentList,  \n" +
                "        (case when ro.systemGenerated = 1 then 'Yes' else 'No' end) SyatemGeneratedValue,    \n" +
                "        fun_getUserNameByID(ro.updatedBy) updatedby,    \n" +
                "        fun_getUserNameByID(ro.createdBy) createdby,    \n" +
                "		fun_getRoleByID(ro.createByRoleId) createdbyRole,    \n" +
                "		fun_getRoleByID(ro.updateByRoleId) updatedbyRole,    \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(ro.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,    \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(ro.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,    \n" +
                "		(SELECT `name` FROM rfq_rohs_main_categorymst WHERE id=  ro.`refMainCategoryID`) AS category,    \n" +
                "		(CASE WHEN (ro.`isActive` = 0) THEN 'Disable'    \n" +
                "		WHEN (ro.`isActive` = 1) THEN 'Enable' ELSE '' END) AS `activeConvertedValue`,    \n" +
                "		(#SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist    \n" +
                "          SELECT GROUP_CONCAT(concat(alias,'@@@', ifnull((select GROUP_CONCAT(m.mfgCode SEPARATOR '#$#') AS mfgCodelist    \n" +
                "			  from component_attributes_source_mapping c1        \n" +
                "				join mfgcodemst m on m.id = c1.mfgCodeID        \n" +
                "				where c1.refAliasID = cfg.id        \n" +
                "				 GROUP BY refAliasID),''))  SEPARATOR '##') AS aliaslist        \n" +
                "						  FROM tempMoutingType cfg WHERE IFNULL(isdeleted,0) = 0         \n" +
                "						  AND  refTableName ='rfq_rohsmst'                   \n" +
                "          AND refId= ro.`id` GROUP BY refId ) AS aliaslist            \n" +
                "		FROM `rfq_rohsmst` ro           \n" +
                "		WHERE ro.`isDeleted` = 0 \");            \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                            \n" +
                "			SET pOrderBy = \"ORDER BY displayOrder IS NULL, displayOrder ASC ,name ASC\";      \n" +
                "		ELSE                            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                            \n" +
                "		END IF;	                            \n" +
                "  \n" +
                "  		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                            \n" +
                "			SET pWhereClause = '1=1' ;                            \n" +
                "		END IF;	                            \n" +
                "  \n" +
                "  		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                             \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                            \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                            \n" +
                "		ELSE	                            \n" +
                "			SET rowNumWhere = '';                            \n" +
                "		END IF;	                            \n" +
                "  \n" +
                "         IF(psourceDetails IS NOT NULL)THEN        \n" +
                "			SET pWhereClause=CONCAT(pWhereClause,\" and aliaslist is not null\");        \n" +
                "		END IF;        \n" +
                "  \n" +
                "		/* to get total count of rows */                 \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);                \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                \n" +
                "			EXECUTE query2;                \n" +
                "			DEALLOCATE PREPARE query2;              \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c                \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement2;                \n" +
                "			EXECUTE query1;                \n" +
                "			DEALLOCATE PREPARE query1;             \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2761,'2.00','V1','RoHS List related change - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2761:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-08-2020 *********************************** */
                "ALTER TABLE binmst MODIFY COLUMN `Name` VARCHAR(110);  \n" +
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2762,'2.00','V1','Change the bin table datatype  - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2762:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveBin` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveBin`(                \n" +
                "	IN ppageIndex INT(11),                \n" +
                "	IN precordPerPage INT(11),                \n" +
                "	IN pOrderBy VARCHAR(255),                \n" +
                "	IN pWhereClause VARCHAR(16383),                \n" +
                "	IN pWarehouseId INT(11),                \n" +
                "    IN pSearchOnlyEmptyBin TINYINT(1)                \n" +
                ")  \n" +
                "BEGIN                \n" +
                "	DECLARE pOffset INT(11);                \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveBin = CONCAT(\"                \n" +
                "		SELECT 		`binm`.`id`,		`binm`.`Name` AS `Name`,	`binm`.`Description`,                \n" +
                "				`binm`.`WarehouseID`,	`binm`.`isActive`,		`binm`.`isPermanentBin`,                \n" +
                "				`warem`.`warehouseType`,            \n" +
                "				fun_getWarehouseTypeByKey(`warem`.warehouseType)  AS warehouseTypeValue,            \n" +
                "				`warem`.`Name` AS wareHoueseName,                \n" +
                "				`binm`.`isRandom`,           \n" +
                "				(CASE WHEN (binm.isRandom = 1) THEN 'Random' ELSE 'Sequence' END) AS `binGenerateType`,          \n" +
                "				(                \n" +
                "					CASE 	WHEN (binm.isActive= 0) THEN                \n" +
                "							'Inactive'                \n" +
                "						WHEN (binm.isActive = 1) THEN                \n" +
                "							'Active'                \n" +
                "						ELSE                \n" +
                "							''                \n" +
                "					END                \n" +
                "				) AS `isActiveConvertedValue`,                \n" +
                "				(                          \n" +
                "					CASE 	WHEN (isPermanentBin = 0) THEN                           \n" +
                "							'Movable'                           \n" +
                "						WHEN (isPermanentBin = 1) THEN                           \n" +
                "							'Non-Movable'                           \n" +
                "						ELSE                           \n" +
                "							''                           \n" +
                "					END                          \n" +
                "				) AS `isPermanentBinConvertedValue`,                    \n" +
                "				`binm`.`systemGenerated` as `systemGenerated`,                    \n" +
                "				(                  \n" +
                "					CASE 	WHEN (`binm`.`systemGenerated` = 0) THEN                   \n" +
                "							'No'                   \n" +
                "						WHEN (`binm`.`systemGenerated` = 1) THEN                   \n" +
                "							'Yes'                   \n" +
                "						ELSE                   \n" +
                "							''                   \n" +
                "						END                  \n" +
                "				) AS `systemGeneratedConvertedValue`,                    \n" +
                "				`binm`.`nickname`, 		`binm`.`prefix`,`binm`.`suffix`,                          \n" +
                "				`warem`.`parentWHID`,	        fun_getWarehouseNameByID(`warem`.`parentWHID`) parentWHName,                        \n" +
                "				fun_getUserNameByID(binm.updatedBy) updatedby,                        \n" +
                "				fun_getUserNameByID(binm.createdBy) createdby,                        \n" +
                "				fun_getUserNameByID(binm.deletedBy) deletedby,                        \n" +
                "				fun_getRoleByID(binm.createByRoleId) createdbyRole,                        \n" +
                "				fun_getRoleByID(binm.updateByRoleId) updatedbyRole,                        \n" +
                "				fun_getRoleByID(binm.deleteByRoleId) deletedbyRole,                        \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(binm.createdAt) createdAt,                        \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(binm.UpdatedAt) updatedAt,                        \n" +
                "				fun_ConvertUTCDatetimeToDataKeyTimeZone(binm.deletedAt) deletedAt,                        \n" +
                "				(case       \n" +
                "					when \",pSearchOnlyEmptyBin,\" = true then                \n" +
                "						fun_getBinEmptyStatusByBinId(binm.id)                \n" +
                "					 else 0       \n" +
                "				end) binIsEmpty,                \n" +
                "				binm.isActive binIsActive,                \n" +
                "				binm.isPermanentBin binIsPermanentBin,                \n" +
                "				binm.systemGenerated binSystemGenerated,        \n" +
                "				/*(SELECT uid         \n" +
                "					 FROM component_sid_stock css        \n" +
                "					 WHERE binm.id = css.binID AND css.isDeleted = 0 AND warem.warehouseType = 'SMC'        \n" +
                "				 ) AS uid,*/  \n" +
                "				 (  \n" +
                "					CASE  \n" +
                "						WHEN warem.warehouseType = 'SMC' THEN  \n" +
                "							(SELECT MAX(uid)         \n" +
                "							 FROM component_sid_stock css        \n" +
                "							 WHERE binm.id = css.binID AND css.isDeleted = 0  \n" +
                "							 LIMIT	1)  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				 ) AS uid,       \n" +
                "				(  \n" +
                "					CASE    \n" +
                "						WHEN  warem.warehouseType = 'SMC' THEN     \n" +
                "							(SELECT max(fun_getUMIDTransitStatus(uid))         \n" +
                "							FROM 	component_sid_stock css        \n" +
                "							WHERE 	binm.id = css.binID AND css.isDeleted = 0   LIMIT 1)    \n" +
                "						ELSE    \n" +
                "							0   \n" +
                "					END    \n" +
                "				 ) AS isTransit,       \n" +
                "				fun_getDepartmentIDByBinID(binm.id) departmentID               \n" +
                "		FROM 		binmst binm                            \n" +
                "		LEFT JOIN 	warehousemst warem ON `binm`.`WarehouseID` = `warem`.`ID`                            \n" +
                "		WHERE 		binm.deletedAt IS NULL                            \n" +
                "	\");                                            \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY\",\"Name ASC\") ;                                              \n" +
                "	ELSE                                              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                              \n" +
                "	END IF;	                                              \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                \n" +
                "		SET pWhereClause = '1=1' ;                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF(pWarehouseId IS NOT NULL) THEN                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND WarehouseID = '\", pWarehouseId, \"'\");                \n" +
                "	END IF;                \n" +
                "    IF(pSearchOnlyEmptyBin = TRUE) THEN                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND binIsEmpty = 1\");                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                              \n" +
                "	ELSE	                                              \n" +
                "		SET rowNumWhere = '';                                              \n" +
                "	END IF;	                                              \n" +
                "  \n" +
                "	/* to get total count of rows */                                 \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveBin,\" ) c where 1=1 and \", pWhereClause);        \n" +
                "    PREPARE query2 FROM @SQLStatement2;                                \n" +
                "	 EXECUTE query2;                                \n" +
                "	DEALLOCATE PREPARE query2;                              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT c.*,                \n" +
                "										case when               \n" +
                "													binIsActive = 1 and                 \n" +
                "													binIsPermanentBin = 0 and                \n" +
                "													binSystemGenerated = 0 and                \n" +
                "													warehouseType != 'SMC'                \n" +
                "												then                \n" +
                "													1                \n" +
                "												else 0 end allowBinTransfer                \n" +
                "									FROM ( \", @temp_Sproc_RetrieveBin,\" ) c WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                \n" +
                "	 EXECUTE query1;                     \n" +
                " 	DEALLOCATE PREPARE query1;                               \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2763,'2.00','V1','Change the bin table datatype  - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2763:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS fun_getFirstPCSStatusNameByID;  \n" +
                "CREATE FUNCTION `fun_getFirstPCSStatusNameByID`(      \n" +
                "	pStatus VARCHAR(11)) RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN      \n" +
                "	DECLARE result VARCHAR(50);      \n" +
                "  \n" +
                "	SELECT (CASE WHEN (pStatus = 1) THEN 'Pass'               \n" +
                "      WHEN (pStatus = 2) THEN 'Needs Improvement'       \n" +
                "      WHEN (pStatus = 3) THEN 'WIP'          \n" +
                "	 ELSE '' END) INTO @result;      \n" +
                "      	SET result = @result;      \n" +
                "	RETURN result;      \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2764,'2.00','V1','fun_getFirstPCSStatusNameByID - Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2764:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS fun_getNameByID;  \n" +
                "CREATE FUNCTION `fun_getNameByID`(            \n" +
                "	pColName VARCHAR(255),      \n" +
                "    pId LONGTEXT   ,      \n" +
                "    pDataType VARCHAR(20)      \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN            \n" +
                "	DECLARE vName LONGTEXT;         \n" +
                "  \n" +
                "	IF pColName = 'WOSTATUS'  THEN        \n" +
                "		SET vName = fun_getStatusNameByColumnAndID (pColName, pId);      \n" +
                "    ELSEIF pColName = 'CUSTOMER' THEN      \n" +
                "		SET vName = fun_getMfgCodeAndNameByID(pId);      \n" +
                "    ELSEIF pColName = 'REFRENCEWOID' THEN      \n" +
                "		SET vName = fun_getWorkorderNumberByID(pId);      \n" +
                "    ELSEIF pColName = 'ROHSSTATUSID' THEN      \n" +
                "		SET vName = fun_getRoHSNameByID(pId);      \n" +
                "	ELSEIF pColName = 'PARTID' THEN      \n" +
                "		SET vName = fun_getComponentNameByID(pId);       \n" +
                "	ELSEIF pColName = 'CLASSIDS' OR pColName = 'ADDCLASSIDS' OR pColName = 'UPDATECLASSIDS' THEN      \n" +
                "		SET vName = fun_getCetificateNameById(pColName, pId);           \n" +
                "	ELSEIF pColName = 'STANDARDIDS' THEN      \n" +
                "		SET vName = fun_getCetificateNameById(pColName, pId);                   \n" +
                "	ELSEIF pColName = 'WORKORDERDATAFIELD' THEN      \n" +
                "		SET vName = fun_getDataElementNameById(pId, -7);         \n" +
                "	ELSEIF pColName = 'OPERATIONDATAFIELD' THEN      \n" +
                "		SET vName = fun_getDataElementNameById(pId, -1);        \n" +
                "	ELSEIF pColName = 'ADDEDEMPLOYEE' OR pColName = 'ADDEDREVIEWEMPLOYEE' THEN      \n" +
                "		SET vName = fun_getEmployeeInitialNameByEmpID(pId);         \n" +
                "	ELSEIF pColName = 'WORKORDERCOOWNER' THEN      \n" +
                "		SET vName = fun_getEmployeeInitialNameByEmpID(pId);        \n" +
                "	ELSEIF pColName = 'OPSTATUS' THEN      \n" +
                "		SET vName = fun_getOpStatusNameByID(pId);       \n" +
                "	ELSEIF pColName = 'PARENTOPID' THEN      \n" +
                "		SET vName = fun_getOperationNameById(pId);       \n" +
                "	ELSEIF pColName = 'OPERATIONTYPEID' THEN      \n" +
                "		SET vName = fun_getGenericCategoryNameByID(pId);          \n" +
                "	ELSEIF pColName = 'OPERATIONCLUSTERID' THEN      \n" +
                "		SET vName = fun_getClusterNameById(pId);          \n" +
                "	ELSEIF pColName = 'ADDEDEQUIPMENT' OR pColName = 'SELECTEDSAMPLEID' THEN      \n" +
                "		SET vName = fun_getEqpWSNameByID(pId);          \n" +
                "	ELSEIF pColName = 'SMTUOM' THEN      \n" +
                "		SET vName = fun_getUnitNameByID(pId);         \n" +
                "	ELSEIF pColName = 'ADDEDSMT' THEN      \n" +
                "		#SET vName = fun_getComponentPIDCodeByID(pId);                 \n" +
                "        SET vName = fun_getAssyPIDCodeByID(pId);        \n" +
                "	ELSEIF pColName = 'MOUNTINGTYPE' THEN		            \n" +
                "        SET vName = fun_getMountingTypeNameByID(pId);    \n" +
                "	ELSEIF pColName = 'FIRSTPCSSTATUS' THEN		            \n" +
                "        SET vName = fun_getFirstPCSStatusNameByID(pId);   \n" +
                "	ELSEIF pColName = 'PARENTWO' THEN		            \n" +
                "        SET vName = fun_getWorkorderNumberWithRevByID(pId);   \n" +
                "	ELSE      \n" +
                "		SET vName = pId;      \n" +
                " END IF;          \n" +
                "	IF pDataType = 'Boolean' THEN      \n" +
                "		IF pId = 1 THEN SET vName ='Yes' ;      \n" +
                "		ELSEIF pId = 0 THEN SET vName = 'No';      \n" +
                "		END IF ;      \n" +
                "	ELSEIF pDataType = 'Case' THEN   		      \n" +
                "		IF pId = 'NC' THEN SET vName= \"No-Clean\";      \n" +
                "		ELSEIF pId= 'NA' THEN SET vName= \"Not Applicable\";      \n" +
                "		ELSEIF pId= 'WS' THEN SET vName = \"Water-Soluble\";    		  \n" +
                "        END IF;    \n" +
                "        IF pColName = 'ISCOMPULSORY' THEN  \n" +
                "			IF pId= 1 THEN SET vName = 'Mandatory';  \n" +
                "            ELSEIF pId= 0 THEN SET vName = 'Optional';  \n" +
                "            END IF;  \n" +
                "        END IF;      \n" +
                "        IF pColName = 'ISFEEDERACTIVE' THEN  \n" +
                "			IF pId= 1 THEN SET vName = 'Active';  \n" +
                "            ELSEIF pId= 0 THEN SET vName = 'Inactive';  \n" +
                "            END IF;  \n" +
                "        END IF;      \n" +
                "	END IF ;      \n" +
                "  \n" +
                "	RETURN vName;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2765,'2.00','V1','fun_getNameByID - Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2765:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS fun_setWOHistoryColDisplayName;  \n" +
                "CREATE FUNCTION `fun_setWOHistoryColDisplayName`(      \n" +
                " pColName VARCHAR(255)         \n" +
                ") RETURNS varchar(500) CHARSET utf8mb4  \n" +
                "BEGIN      \n" +
                "	DECLARE vName VARCHAR(500);    \n" +
                "	SELECT     \n" +
                "		CASE WHEN pColName = 'ISOPERATIONSVERIFIED' THEN 'Validate Operations'     \n" +
                "			WHEN pColName = 'ISINCLUDESUBASSEMBLY' THEN 'Build Sub Assembly Within Operations'             \n" +
                "			 WHEN pColName = 'ADDEDEMPLOYEE' THEN  'Add Personnel'     \n" +
                "			 WHEN pColName = 'OPSTATUS' THEN 'Operation Status'                  \n" +
                "             WHEN pColName = 'OPVERSION' THEN 'Operation Version'       \n" +
                "             WHEN pColName = 'TABLIMITATTRAVELER' THEN  'Access Tab Limit'     \n" +
                "             WHEN pColName = 'MOUNTINGTYPE' THEN  'Mounting Type'     \n" +
                "             WHEN pColName = 'OPNUMBER' THEN  'Operation#'     \n" +
                "             WHEN pColName = 'ADDEDEQUIPMENT' THEN 'Add Equipment'                  \n" +
                "             WHEN pColName = 'ISWATERSOLUBLE' THEN 'Water Soluble'     \n" +
                "             WHEN pColName = 'WONUMBER' THEN 'WO#'     \n" +
                "			 WHEN pColName = 'PARTID' THEN 'Assy ID'     \n" +
                "			 WHEN pColName = 'EXCESSQTY' THEN 'Excess Qty'     \n" +
                "             WHEN pColName = 'BUILDQTY' THEN 'Build Qty'     \n" +
                "			 WHEN pColName = 'MASTERTEMPLATEID' THEN 'Master Template'     \n" +
                "			 WHEN pColName = 'REFRENCEWOID' THEN 'Ref. WO#'     \n" +
                "             WHEN pColName = 'WOVERSION' THEN 'WO Version'     \n" +
                "             WHEN pColName = 'ISCLUSTERAPPLIED' THEN 'Cluster Applied'    \n" +
                "			 WHEN pColName = 'ROHSSTATUSID' THEN 'RoHs Status'    \n" +
                "             WHEN pColName = 'ISNOCLEAN' THEN 'No-Clean'    \n" +
                "             WHEN pColName = 'ISWATERSOLUBLE' THEN 'Water-Soluble'    \n" +
                "             WHEN pColName = 'ISOPERATIONTRACKBYSERIALNO' THEN 'Track Serial Numbers'    \n" +
                "             WHEN pColName = 'WOSTATUS' THEN 'WO Status'    \n" +
                "             WHEN pColName = 'CUSTOMER' THEN 'MFR '    \n" +
                "             WHEN pColName = 'ECOREMARK' THEN 'ECO Remark '    \n" +
                "             WHEN pColName = 'FCOREMARK' THEN 'FCO Remark '    \n" +
                "             WHEN pColName = 'LOCATIONDETAILS' THEN 'Location'    \n" +
                "             WHEN pColName = 'ISSTOPWORKORDER' THEN 'Halt Workorder'    \n" +
                "             WHEN pColName = 'ISREVISEDWO' THEN 'Revised WO'    \n" +
                "             WHEN pColName = 'TERMINATEWOID' THEN 'Terminate WO#'    \n" +
                "             WHEN pColName = 'ISRACKTRACKINGREQUIRED' THEN 'Rack Tracking Required'    \n" +
                "             WHEN pColName = 'ISSTRICTLYFOLLOWRACKVALIDATION' THEN 'Strictly Follow  Rack Validation'    \n" +
                "             WHEN pColName = 'ADDCLASSIDS' THEN 'Add Standard'    \n" +
                "             WHEN pColName = 'UPDATECLASSIDS' THEN 'Update Standard'    \n" +
                "             WHEN pColName = 'STANDARDIDS' THEN 'Add Standard'    \n" +
                "             WHEN pColName = 'ISSTANDARDDELETED' THEN 'Remove Standard'    \n" +
                "             WHEN pColName = 'CLUSTERNAME' THEN 'Cluster Name'    \n" +
                "             WHEN pColName = 'CLUSTERDISPLAYORDER' THEN 'Cluster Display Order'    \n" +
                "             WHEN pColName = 'ISCLUSTERDELETED' THEN 'Delete Cluster'    \n" +
                "             WHEN pColName = 'ISPARELLELOPERATION' THEN 'Pareller Cluster'                 \n" +
                "             WHEN pColName = 'WORKORDERDATAFIELD' THEN 'WO Data Field'    \n" +
                "             WHEN pColName = 'WORKORDERDATAFIELDDELETED' THEN 'Remove Data Field'    \n" +
                "             WHEN pColName = 'OPERATIONCLUSTERID' THEN 'Add Oepration To Cluster '    \n" +
                "             WHEN pColName = 'DISPLAYORDER' THEN 'Opeation Display Order'    \n" +
                "             WHEN pColName = 'ISOPCLUSTERDELETED' THEN 'Remove Operation From Cluster'    \n" +
                "             WHEN pColName = 'OPERATIONDATAFIELD' THEN 'Add Opeation Data Field'    \n" +
                "             WHEN pColName = 'OPDATAFIELDDISPLAYORDER' THEN 'Operation Data Field Disply Order'    \n" +
                "             WHEN pColName = 'ISOPERATIONDATAFIELDDELETED' THEN 'Remove Operation Data Field'                 \n" +
                "             WHEN pColName = 'ISEMPLOYEEDELETED' THEN 'Remove Personnel'    \n" +
                "             WHEN pColName = 'ISEQUIPMENTDELETED' THEN 'Remove Equipment'    \n" +
                "             WHEN pColName = 'QTY' THEN 'Equipment Qty'    \n" +
                "             WHEN pColName = 'ISONLINE' THEN 'Equipment Online'    \n" +
                "             WHEN pColName = 'ISOPERATIONDELETED' THEN 'Remove Operation'    \n" +
                "             WHEN pColName = 'FEEDERLOCATION' THEN 'Feeder Location'    \n" +
                "             WHEN pColName = 'FEEDERQTY' THEN 'Feeder Qty'    \n" +
                "             WHEN pColName = '1STARTICLESERIALNO' THEN '1st Article Serial No'    \n" +
                "             WHEN pColName = '1STARTICLEDATECODE' THEN '1st Artile Date Code'    \n" +
                "             WHEN pColName = 'ADDEDSMT' THEN 'Add Supplies Materials & Tools'    \n" +
                "             WHEN pColName = 'ISSMTDELETED' THEN 'Remove Supplies Materials & Tools'    \n" +
                "             WHEN pColName = 'SMTQPA' THEN 'Supplies Materials & Tools QPA'    \n" +
                "             WHEN pColName = 'SMTACTUALQPA' THEN 'Supplies Materials & Tools Actual QPA'    \n" +
                "             WHEN pColName = 'SMTUOM' THEN 'Supplies Materials & Tools UOM'    \n" +
                "             WHEN pColName = 'TIMELINE' THEN 'Review Requested By (Date & Time) '    \n" +
                "             WHEN pColName = 'WORKORDERCOOWNER' THEN 'Review Co Owner'    \n" +
                "             WHEN pColName = 'ISCOMPULSORY' THEN 'Review Response'                 \n" +
                "             WHEN pColName = 'OPNAME' THEN 'Operation Name'    \n" +
                "             WHEN pColName = 'PROCESSTIME' THEN 'Total Process Time'    \n" +
                "             WHEN pColName = 'SETUPTIME' THEN 'Setup Time'    \n" +
                "             WHEN pColName = 'PERPIECETIME' THEN 'Per pcs Target Time'    \n" +
                "             WHEN pColName = 'QTYCONTROL' THEN 'Qty Tracking Required'    \n" +
                "             WHEN pColName = 'CLEANINGTYPE' THEN 'Cleaning Type'    \n" +
                "             WHEN pColName = 'OPDESCRIPTION' THEN 'Operation Description'    \n" +
                "             WHEN pColName = 'OPWORKINGCONDITION' THEN 'Job Specification'    \n" +
                "             WHEN pColName = 'OPMANAGEMENTINSTRUCTION' THEN 'Management Communication'    \n" +
                "             WHEN pColName = 'OPDEFERREDINSTRUCTION' THEN 'Deferred Instruction'    \n" +
                "             WHEN pColName = 'OPDOES' THEN 'Do'    \n" +
                "             WHEN pColName = 'OPDONTS' THEN 'Do Not'    \n" +
                "             WHEN pColName = 'OPORDER' THEN 'Operation Order'    \n" +
                "             WHEN pColName = 'OPERATIONTYPEID' THEN 'Operation Type'    \n" +
                "             WHEN pColName = 'PARENTOPID' THEN 'Parent Opeartion'    \n" +
                "             WHEN pColName = 'FIRSTPCSCONCLUSION' THEN '1st Article Conclusion'    \n" +
                "             WHEN pColName = 'FIRSTPCSMODEL' THEN '1st Article Model'    \n" +
                "             WHEN pColName = 'FIRSTPCSSTATUS' THEN '1st Article Status'    \n" +
                "             WHEN pColName = 'ISISSUEQTY' THEN 'Issue Qty Required'    \n" +
                "             WHEN pColName = 'ISPREPROGRAMMINGCOMPONENT' THEN 'Part Pre-Programming Required'    \n" +
                "             WHEN pColName = 'ISREWORK' THEN 'Rework Operation'    \n" +
                "             WHEN pColName = 'ISSTOPOPERATION' THEN 'Halt Operation'    \n" +
                "             WHEN pColName = 'ISTEAMOPERATION' THEN 'Team Operation'    \n" +
                "             WHEN pColName = 'ISTERMINATED' THEN 'Terminted Opearion'    \n" +
                "             WHEN pColName = 'COLORCODE' THEN 'Operation Color'    \n" +
                "             WHEN pColName = 'ISMOVETOSTOCK' THEN 'Move to Stock'    \n" +
                "             WHEN pColName = 'ISPLACEMENTTRACKING' THEN 'Requires REF DES To Use UMID'    \n" +
                "             WHEN pColName = 'ISTRACKBYSERIALNO' THEN 'Track Serial# In Operation'    \n" +
                "             WHEN pColName = 'ISLOOPOPERATION' THEN 'Loop Operation'    \n" +
                "             WHEN pColName = 'ISALLOWMISSINGPARTQTY' THEN 'Allow Operation with Missing Parts Placements'    \n" +
                "             WHEN pColName = 'ISALLOWBYPASSQTY' THEN 'Allow Operation With Bypassing Qty'    \n" +
                "             WHEN pColName = 'ISHOTJOB' THEN 'Rush Job'    \n" +
                "             WHEN pColName = 'SELECTEDSAMPLEID' THEN 'Selected Sample'    \n" +
                "             WHEN pColName = 'ISFEEDERACTIVE' THEN 'Feeder Status'   \n" +
                "             WHEN pColName = 'ISALLOWFINALSERAILMAPPING' THEN 'Serial# Mapping'    \n" +
                "             WHEN pColName = 'PARENTWO' THEN 'Parent WO#'    \n" +
                "             WHEN pColName = 'ADDEDREVIEWEMPLOYEE' THEN 'Invite User'    \n" +
                "             ELSE pColName    \n" +
                "		END    INTO vName;       \n" +
                "	RETURN vName;          \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2766,'2.00','V1','fun_setWOHistoryColDisplayName - Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2766:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS fun_setWOHistoryDescription ;  \n" +
                "CREATE FUNCTION `fun_setWOHistoryDescription`(      \n" +
                " pColName VARCHAR(255)         \n" +
                ") RETURNS varchar(500) CHARSET utf8mb4  \n" +
                "BEGIN      \n" +
                "	DECLARE vName VARCHAR(500);    \n" +
                "	SELECT     \n" +
                "		CASE WHEN pColName = 'ISOPERATIONSVERIFIED' THEN 'Operation validated or not.'     \n" +
                "			WHEN pColName = 'ISINCLUDESUBASSEMBLY' THEN 'Sub Assembly Within Operations included or not.'     \n" +
                "			 WHEN pColName = 'TABLIMITATTRAVELER' THEN  'Access tab limit changed.'     \n" +
                "             WHEN pColName = 'MOUNTINGTYPE' THEN  'Mounting Type Changed.'     \n" +
                "             WHEN pColName = 'OPNUMBER' THEN  'Operation# changed.'     \n" +
                "             WHEN pColName = 'ADDEDEMPLOYEE' THEN  'Personnel Added to work order.'     \n" +
                "			 WHEN pColName = 'OPSTATUS' THEN 'Status of Operation in work order changed.'              \n" +
                "             WHEN pColName = 'OPVERSION' THEN 'Operation Version changed.'        \n" +
                "             WHEN pColName = 'ADDEDEQUIPMENT' THEN 'Equipment added Operation/Work order.'                               \n" +
                "             WHEN pColName = 'WONUMBER' THEN 'WO# Changed.'     \n" +
                "			 WHEN pColName = 'PARTID' THEN 'Assy ID changed.'    \n" +
                "			 WHEN pColName = 'EXCESSQTY' THEN 'Excess qty changed.'     \n" +
                "             WHEN pColName = 'BUILDQTY' THEN 'Build qty changed.'      \n" +
                "			 WHEN pColName = 'MASTERTEMPLATEID' THEN 'Master Template'     \n" +
                "			 WHEN pColName = 'REFRENCEWOID' THEN 'Ref. WO# '     \n" +
                "             WHEN pColName = 'WOVERSION' THEN 'WO Version changed.'     \n" +
                "             WHEN pColName = 'ISCLUSTERAPPLIED' THEN 'Cluster Applied to work order.'    \n" +
                "			 WHEN pColName = 'ROHSSTATUSID' THEN 'RoHs Status changed.'    \n" +
                "             WHEN pColName = 'ISNOCLEAN' THEN 'No-Clean'    \n" +
                "             WHEN pColName = 'ISWATERSOLUBLE' THEN 'Water-Soluble'    \n" +
                "             WHEN pColName = 'ISOPERATIONTRACKBYSERIALNO' THEN 'Tracking By serial numbers.'    \n" +
                "             WHEN pColName = 'WOSTATUS' THEN 'WO status changed.'    \n" +
                "             WHEN pColName = 'CUSTOMER' THEN 'MFR '    \n" +
                "             WHEN pColName = 'ECOREMARK' THEN 'ECO Remark changed.'    \n" +
                "             WHEN pColName = 'FCOREMARK' THEN 'FCO Remark changed.'    \n" +
                "             WHEN pColName = 'LOCATIONDETAILS' THEN 'Location changed.'    \n" +
                "             WHEN pColName = 'ISSTOPWORKORDER' THEN 'Hold the Workorder.'    \n" +
                "             WHEN pColName = 'ISREVISEDWO' THEN 'Revised WO .'    \n" +
                "             WHEN pColName = 'TERMINATEWOID' THEN 'Terminate WO#'    \n" +
                "             WHEN pColName = 'ISRACKTRACKINGREQUIRED' THEN 'Rack Tracking required.'    \n" +
                "             WHEN pColName = 'ISSTRICTLYFOLLOWRACKVALIDATION' THEN 'Strictly follow rack validation.'    \n" +
                "             WHEN pColName = 'ADDCLASSIDS' THEN 'Added Standard to work order.'                 \n" +
                "             WHEN pColName = 'UPDATECLASSIDS' THEN 'Standard changed in work order.'    \n" +
                "             WHEN pColName = 'STANDARDIDS' THEN 'Add Standard to work order.'    \n" +
                "             WHEN pColName = 'ISSTANDARDDELETED' THEN 'Standard removed from work order.'    \n" +
                "             WHEN pColName = 'CLUSTERNAME' THEN 'Cluster name changed.'    \n" +
                "             WHEN pColName = 'CLUSTERDISPLAYORDER' THEN 'Cluster display order changed.'    \n" +
                "             WHEN pColName = 'ISCLUSTERDELETED' THEN 'Cluster deleted from work order.'     \n" +
                "             WHEN pColName = 'ISPARELLELOPERATION' THEN 'Pareller Cluster'                 \n" +
                "             WHEN pColName = 'WORKORDERDATAFIELD' THEN 'Added Work order data field.'    \n" +
                "             WHEN pColName = 'WORKORDERDATAFIELDDELETED' THEN 'Work order data field removed.'    \n" +
                "             WHEN pColName = 'OPERATIONCLUSTERID' THEN 'Oepration added to cluster.'    \n" +
                "             WHEN pColName = 'DISPLAYORDER' THEN 'Opeation Display Order'    \n" +
                "             WHEN pColName = 'ISOPCLUSTERDELETED' THEN 'Operation removed from cluster.'    \n" +
                "             WHEN pColName = 'OPERATIONDATAFIELD' THEN 'Added opeation data field.'    \n" +
                "             WHEN pColName = 'OPDATAFIELDDISPLAYORDER' THEN 'Operation data field disply order.'    \n" +
                "             WHEN pColName = 'ISOPERATIONDATAFIELDDELETED' THEN 'Removed Operation data field.'                 \n" +
                "             WHEN pColName = 'ISEMPLOYEEDELETED' THEN 'Personnel removed from work order/operation.'    \n" +
                "             WHEN pColName = 'ISEQUIPMENTDELETED' THEN 'Equipment removed from  operation.'    \n" +
                "             WHEN pColName = 'QTY' THEN 'Equipment Qty changed.'    \n" +
                "             WHEN pColName = 'ISONLINE' THEN 'Equipment Online/Offline.'    \n" +
                "             WHEN pColName = 'ISOPERATIONDELETED' THEN 'Removed Operation from work order'    \n" +
                "             WHEN pColName = 'FEEDERLOCATION' THEN 'Feeder Location in equipment changed.'    \n" +
                "             WHEN pColName = 'FEEDERQTY' THEN 'Feeder Qty changed.'    \n" +
                "             WHEN pColName = '1STARTICLESERIALNO' THEN '1st Article Serial No genereated.'    \n" +
                "             WHEN pColName = '1STARTICLEDATECODE' THEN '1st Artile Date Code.'    \n" +
                "             WHEN pColName = 'ADDEDSMT' THEN 'Added Supplies Materials & Tools to  Operation.'    \n" +
                "             WHEN pColName = 'ISSMTDELETED' THEN 'Removed Supplies Materials & Tools from Operation.'    \n" +
                "             WHEN pColName = 'SMTQPA' THEN 'Supplies Materials & Tools QPA changed.'    \n" +
                "             WHEN pColName = 'SMTACTUALQPA' THEN 'Supplies Materials & Tools Actual QPA changed.'    \n" +
                "             WHEN pColName = 'SMTUOM' THEN 'Supplies Materials & Tools UOM changed.'    \n" +
                "             WHEN pColName = 'TIMELINE' THEN 'Review Requested By (Date & Time).'    \n" +
                "             WHEN pColName = 'WORKORDERCOOWNER' THEN 'Added Co Owner for review. '    \n" +
                "             WHEN pColName = 'ISCOMPULSORY' THEN 'Review Response (Mandatory / Optional)'    \n" +
                "             WHEN pColName = 'OPNAME' THEN 'Operation name changed.'    \n" +
                "             WHEN pColName = 'PROCESSTIME' THEN 'Total Process Time changed.'    \n" +
                "             WHEN pColName = 'SETUPTIME' THEN 'Setup Time changed.'    \n" +
                "             WHEN pColName = 'PERPIECETIME' THEN 'Per pcs Target Time changed.'    \n" +
                "             WHEN pColName = 'QTYCONTROL' THEN 'Qty Tracking Required changed.'    \n" +
                "             WHEN pColName = 'CLEANINGTYPE' THEN 'Cleaning Type changed.'    \n" +
                "             WHEN pColName = 'OPDESCRIPTION' THEN 'Operation Description changed.'    \n" +
                "             WHEN pColName = 'OPWORKINGCONDITION' THEN 'Job Specification changed.'    \n" +
                "             WHEN pColName = 'OPMANAGEMENTINSTRUCTION' THEN 'Management Communication changed.'    \n" +
                "             WHEN pColName = 'OPDEFERREDINSTRUCTION' THEN 'Deferred Instruction changed.'    \n" +
                "             WHEN pColName = 'OPDOES' THEN 'Do changed.'    \n" +
                "             WHEN pColName = 'OPDONTS' THEN 'Do Not changed.'    \n" +
                "             WHEN pColName = 'OPORDER' THEN 'Operation Order changed.'    \n" +
                "             WHEN pColName = 'OPERATIONTYPEID' THEN 'Operation Type changed.'    \n" +
                "             WHEN pColName = 'PARENTOPID' THEN 'Parent Opeartion changed.'    \n" +
                "             WHEN pColName = 'FIRSTPCSCONCLUSION' THEN '1st Article Conclusion changed.'     \n" +
                "             WHEN pColName = 'FIRSTPCSMODEL' THEN '1st Article Model changed.'    \n" +
                "             WHEN pColName = 'FIRSTPCSSTATUS' THEN '1st Article Status changed.'    \n" +
                "             WHEN pColName = 'ISISSUEQTY' THEN 'Issue Qty Required changed.'    \n" +
                "             WHEN pColName = 'ISPREPROGRAMMINGCOMPONENT' THEN 'Part Pre-Programming Required changed.'    \n" +
                "             WHEN pColName = 'ISREWORK' THEN 'Rework Operation changed.'    \n" +
                "             WHEN pColName = 'ISSTOPOPERATION' THEN 'Operation halt.'    \n" +
                "             WHEN pColName = 'ISTEAMOPERATION' THEN 'Team Operation changed.'    \n" +
                "             WHEN pColName = 'ISTERMINATED' THEN 'Terminted Opearion changed.'    \n" +
                "             WHEN pColName = 'COLORCODE' THEN 'Operation Color changed.'    \n" +
                "             WHEN pColName = 'ISMOVETOSTOCK' THEN 'Move to Stock changed.'    \n" +
                "             WHEN pColName = 'ISPLACEMENTTRACKING' THEN 'Requires REF DES To Use UMID changed.'    \n" +
                "             WHEN pColName = 'ISTRACKBYSERIALNO' THEN 'Track Serial# In Operation changed.'    \n" +
                "             WHEN pColName = 'ISLOOPOPERATION' THEN 'Loop Operation changed.'    \n" +
                "             WHEN pColName = 'ISALLOWMISSINGPARTQTY' THEN 'Allow Operation with Missing Parts Placements changed.'    \n" +
                "             WHEN pColName = 'ISALLOWBYPASSQTY' THEN 'Allow Operation With Bypassing Qty changed.'         \n" +
                "             WHEN pColName = 'ISHOTJOB' THEN 'Rush Job changed.'    \n" +
                "             WHEN pColName = 'SELECTEDSAMPLEID' THEN 'Selected Sample changed.'   \n" +
                "             WHEN pColName = 'ISFEEDERACTIVE' THEN 'Feeder status changed'    \n" +
                "             WHEN pColName = 'ISALLOWFINALSERAILMAPPING' THEN 'Serial# Mapping changed.'    \n" +
                "             WHEN pColName = 'PARENTWO' THEN 'Added Parent Work order.'   \n" +
                "             WHEN pColName = 'ADDEDREVIEWEMPLOYEE' THEN 'User invited for review.'    \n" +
                "             ELSE pColName    \n" +
                "		END    INTO vName;       \n" +
                "	RETURN vName;          \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2767,'2.00','V1','fun_setWOHistoryDescription - Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2767:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-08-2020 *********************************** */
                "DROP  PROCEDURE IF EXISTS Sproc_WOChangeHistory;  \n" +
                "CREATE PROCEDURE `Sproc_WOChangeHistory`(              \n" +
                "	IN pWoID INT(11),              \n" +
                "	IN ppageIndex INT(11),              \n" +
                "	IN precordPerPage INT(11),              \n" +
                "	IN pOrderBy VARCHAR(255),              \n" +
                "	IN pWhereClause VARCHAR(16383),                  \n" +
                "    IN pwoOPID INT,              \n" +
                "    -- If woOPID is passed then it is from operation version else from woVersion              \n" +
                "    IN fromVersion VARCHAR(255),              \n" +
                "    -- If woOPID is passed then it is to operation version else to woVersion              \n" +
                "    IN toVersion VARCHAR(255)              \n" +
                "    )  \n" +
                "BEGIN              \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);              \n" +
                "	DECLARE rowNumWhere VARCHAR(255);              \n" +
                "  \n" +
                "    /* [S] Get ID for given WO or WOOP versiob */              \n" +
                "    DECLARE fromWOVersion VARCHAR(255);              \n" +
                "    DECLARE toWoVersion VARCHAR(255);              \n" +
                "    DECLARE fromOPVersion VARCHAR(255);              \n" +
                "    DECLARE toOPVersion VARCHAR(255);              \n" +
                "    DECLARE fromOPVersionID INT(11);    \n" +
                "    DECLARE toOPVersionID INT(11);    \n" +
                "  \n" +
                "    DECLARE woversioncheck VARCHAR(50);              \n" +
                "	IF (pwoOPID IS NULL) THEN   \n" +
                "		SET fromWOVersion = fromVersion ;  \n" +
                "        SET toWoVersion = toVersion ;  \n" +
                "     ELSEIF (pwoOPID IS NOT NULL AND fromVersion IS NOT NULL AND toVersion IS NOT NULL) THEN              \n" +
                "		SET fromOPVersion = fromVersion ;  \n" +
                "        SET toOPVersion = toVersion ;  \n" +
                "        SELECT a.ID INTO fromOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID AND a.Colname = 'OPVERSION'   AND a.opVersion = fromVersion ORDER BY a.ID DESC LIMIT 1;              \n" +
                "		SELECT a.ID INTO toOPVersionID FROM dataentrychange_auditlog a WHERE a.Tablename = 'WORKORDER_OPERATION' AND a.RefTransID = pwoOPID AND a.Colname = 'OPVERSION'   AND a.opVersion = toVersion ORDER BY a.ID DESC LIMIT 1;  \n" +
                "     END IF;  \n" +
                "	/* [E] Get ID for given WO or WOOP versiob */              \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;            \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS Results AS              \n" +
                "	   SELECT * FROM              \n" +
                "		   (              \n" +
                "			SELECT ID,Tablename,RefTransID,    \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,                         \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,    \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,    \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,      \n" +
                "			#(fun_getStatusNameByColumnAndID (`dca`.`Colname`, `dca`.`Oldval`)) Oldval,            \n" +
                "			#(fun_getStatusNameByColumnAndID (`dca`.`Colname`, `dca`.`Newval`)) Newval,             \n" +
                "        updatedAt,Updatedby,    \n" +
                "        fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,              \n" +
                "            NULL opName , woVersion, opVersion , valueDataType    \n" +
                "			FROM dataentrychange_auditlog dca  WHERE Tablename = 'WORKORDER' AND RefTransID = pWoID              \n" +
                "			UNION ALL               \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,    \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,     \n" +
                "			(fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,    \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,    \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,      \n" +
                "            updatedAt,Updatedby ,             \n" +
                "			fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,              \n" +
                "            (              \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo               \n" +
                "                WHERE wo.woOPID = (SELECT woe.woOPID FROM workorder_operation_employee woe WHERE woe.woOpEmployeeID = dca.RefTransID)              \n" +
                "            ) opName    , woVersion, opVersion , valueDataType          \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_EMPLOYEE'               \n" +
                "			AND RefTransID IN (SELECT woOpEmployeeID FROM workorder_operation_employee WHERE  woID =  pWoID )			              \n" +
                "			UNION ALL               \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,    \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,     \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,    \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,    \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,      \n" +
                "			updatedAt,Updatedby   ,           \n" +
                "			fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,              \n" +
                "            (              \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo               \n" +
                "                WHERE wo.woOPID = (SELECT woe.woOPID FROM workorder_operation_equipment woe WHERE woe.woOpEqpID = dca.RefTransID)              \n" +
                "            ) opName          , woVersion, opVersion , valueDataType    \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_EQUIPMENT'               \n" +
                "			AND RefTransID IN (SELECT woOpEqpID FROM workorder_operation_equipment WHERE  woID =  pWoID )              \n" +
                "  \n" +
                "			UNION ALL               \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,    \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,     \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,    \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,    \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,      \n" +
                "			updatedAt,Updatedby,              \n" +
                "			fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,              \n" +
                "		    (              \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo               \n" +
                "                WHERE wo.woOPID = (SELECT wop.woOPID FROM workorder_operation_part wop WHERE wop.woOPPartID = dca.RefTransID)              \n" +
                "            ) opName  , woVersion, opVersion , valueDataType            \n" +
                "			FROM dataentrychange_auditlog dca WHERE TableName = 'WORKORDER_OPERATION_PART'               \n" +
                "			AND RefTransID IN (SELECT woOPPartID FROM workorder_operation_part WHERE  woID =  pWoID )              \n" +
                "  \n" +
                "			UNION ALL               \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,    \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,     \n" +
                "            Oldval,Newval,    \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,      \n" +
                "            updatedAt,Updatedby              \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,   fun_getRoleByID(dca.updateByRoleId) updatedbyRole,     \n" +
                "            NULL opName  , woVersion, opVersion , valueDataType            \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_CLUSTER'               \n" +
                "			AND RefTransID IN (SELECT clusterID FROM workorder_cluster WHERE  woID =  pWoID )              \n" +
                "  \n" +
                "			UNION ALL               \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,    \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,     \n" +
                "			(fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,    \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,    \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,      \n" +
                "            updatedAt,Updatedby              \n" +
                "			,#(SELECT username FROM users WHERE id=dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,                                    \n" +
                "             fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,              \n" +
                "            (              \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo               \n" +
                "                WHERE wo.woOPID = (SELECT wopcl.woOPID FROM workorder_operation_cluster wopcl WHERE wopcl.woClusterID = dca.RefTransID)              \n" +
                "            ) opName  , woVersion, opVersion , valueDataType            \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_CLUSTER'               \n" +
                "			AND RefTransID IN (SELECT woClusterID FROM workorder_operation_cluster               \n" +
                "						WHERE  clusterID IN   (SELECT clusterID FROM workorder_cluster WHERE  woID =  pWoID )     \n" +
                "                        )    \n" +
                "  \n" +
                "			UNION ALL               \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,    \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,     \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,    \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,    \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,      \n" +
                "            updatedAt,Updatedby              \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,              \n" +
                "            (              \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo               \n" +
                "                WHERE wo.woOPID = (SELECT wopde.woOPID FROM workorder_operation_dataelement wopde WHERE wopde.woOPDataElementID = dca.RefTransID)              \n" +
                "            )  opName  , woVersion, opVersion , valueDataType            \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_DATAELEMENT'               \n" +
                "			AND RefTransID IN (SELECT woOpDataElementID FROM workorder_operation_dataelement WHERE  woID =  pWoID )              \n" +
                "  \n" +
                "			UNION ALL               \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,    \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,     \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,    \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,    \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,      \n" +
                "            updatedAt,Updatedby              \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,              \n" +
                "            (              \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ',wo.opName) FROM workorder_operation wo               \n" +
                "                WHERE wo.woOPID = RefTransID              \n" +
                "            ) opName  , woVersion, opVersion , valueDataType            \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION'               \n" +
                "			AND RefTransID IN (SELECT woOPID FROM workorder_operation WHERE  woID =  pWoID )              \n" +
                "  \n" +
                "			UNION ALL               \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,    \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,     \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,    \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,    \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,      \n" +
                "            updatedAt,Updatedby              \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,     \n" +
                "            NULL opName   , woVersion, opVersion , valueDataType           \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_CERTIFICATION'               \n" +
                "			AND RefTransID IN (SELECT woCertificationID FROM workorder_certification WHERE  woID =  pWoID )	              \n" +
                "  \n" +
                "			UNION ALL               \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,Colname,Oldval,Newval,    \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,      \n" +
                "            updatedAt,Updatedby              \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,     \n" +
                "            NULL opName     , woVersion, opVersion , valueDataType         \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'DATAELEMENT_TRANSACTIONVALUES'               \n" +
                "			AND RefTransID IN (SELECT dataElementTransID FROM dataelement_transactionvalues              \n" +
                "						WHERE  entityID = -7 AND RefTransID =  pWoID )     		    \n" +
                "  \n" +
                "  \n" +
                "			UNION ALL    \n" +
                "            SELECT ID,Tablename,RefTransID,    \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,     \n" +
                "           (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,    \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,     \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,      \n" +
                "            updatedAt,Updatedby              \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,     \n" +
                "            NULL opName  , woVersion, opVersion , valueDataType            \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_REQREVEMP'      \n" +
                "			AND RefTransID IN (SELECT woID FROM workorder_reqrevinvitedemp WHERE  woID =  pWoID )	    \n" +
                "            UNION ALL               \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,    \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,     \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,    \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,    \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,      \n" +
                "            updatedAt,Updatedby              \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,     \n" +
                "            NULL opName   , woVersion, opVersion , valueDataType           \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_DATAELEMENT'               \n" +
                "			AND RefTransID IN (SELECT woDataElementID FROM workorder_dataelement WHERE  woID =  pWoID )	      \n" +
                "  \n" +
                "			UNION ALL    \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,    \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,     \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,    \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,    \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,      \n" +
                "            updatedAt,Updatedby              \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,     \n" +
                "            (              \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo               \n" +
                "                WHERE wo.woOPID = (SELECT wopfp.woOPID FROM workorder_operation_firstpiece wopfp WHERE wopfp.wofirstpieceID = dca.RefTransID)              \n" +
                "            )  opName  , woVersion, opVersion , valueDataType            \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_FIRSTPIECE'               \n" +
                "			AND RefTransID IN (SELECT wofirstpieceID FROM workorder_operation_firstpiece WHERE  woID =  pWoID )              \n" +
                "  \n" +
                "			UNION ALL    \n" +
                "			SELECT ID,Tablename,RefTransID,    \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,     \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,    \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,    \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,      \n" +
                "            updatedAt,Updatedby              \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,     \n" +
                "            (              \n" +
                "				SELECT CONCAT('(', wo.opNumber,') ', wo.opName) FROM workorder_operation wo               \n" +
                "                WHERE wo.woOPID = (SELECT wopfdr.woOPID FROM workorder_operation_equipment_feeder_details wopfdr WHERE wopfdr.id = dca.RefTransID)              \n" +
                "            )  opName  , woVersion, opVersion , valueDataType            \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_OPERATION_FEEDER'               \n" +
                "			AND RefTransID IN (SELECT id FROM workorder_operation_equipment_feeder_details WHERE  woID =  pWoID )              \n" +
                "  \n" +
                "          	UNION ALL   \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,    \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,     \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,    \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,    \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,      \n" +
                "            updatedAt,Updatedby              \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,     \n" +
                "            null opName  , woVersion, opVersion , valueDataType            \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_COOWNER'               \n" +
                "			AND RefTransID IN (SELECT coOwnerID FROM workorder_coowner WHERE  woID =  pWoID )    \n" +
                "  \n" +
                "            UNION ALL  \n" +
                "  \n" +
                "			SELECT ID,Tablename,RefTransID,    \n" +
                "            fun_setWOHistoryColDisplayName(Colname) Colname,     \n" +
                "            (fun_getNameByID(dca.Colname,dca.Oldval,valueDataType)) Oldval,    \n" +
                "            (fun_getNameByID(dca.Colname,dca.Newval,valueDataType)) Newval,    \n" +
                "            fun_setWOHistoryDescription(Colname) ColDescription,      \n" +
                "            updatedAt,Updatedby              \n" +
                "			,fun_getUserNameByID(Updatedby)UpdatedByUser,fun_getRoleByID(dca.updateByRoleId) updatedbyRole,     \n" +
                "            null opName  , woVersion, opVersion , valueDataType            \n" +
                "			FROM dataentrychange_auditlog dca  WHERE TableName = 'WORKORDER_SUBASSEMBLY'               \n" +
                "			AND RefTransID IN (SELECT id FROM workorder_main_assembly_mapping_details WHERE  refWOID =  pWoID )              \n" +
                "  \n" +
                "		) AS a              \n" +
                "		WHERE CASE WHEN fromWOVersion IS NOT NULL THEN a.woVersion BETWEEN fromWOVersion AND toWoVersion ELSE TRUE END              \n" +
                "		AND CASE WHEN fromOPVersion IS NOT NULL THEN a.opVersion BETWEEN fromOPVersion AND toOPVersion ELSE TRUE END  \n" +
                "        AND CASE WHEN pwoOPID IS NOT NULL THEN a.id BETWEEN ifnull(fromOPVersionID,0) AND  ifnull(toOPVersionID,0) ELSE TRUE END;              \n" +
                "	IF (pOrderBy IS NOT NULL) THEN              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;              \n" +
                "	ELSE              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"ID DESC\") ;              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN              \n" +
                "		SET pWhereClause = '1=1' ;              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;              \n" +
                "	ELSE	              \n" +
                "		SET rowNumWhere = '';              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "	/* to get total count of rows */              \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*)  FROM Results where \", pWhereClause );              \n" +
                "	PREPARE query1 FROM @SQLStatement1;              \n" +
                "	EXECUTE query1;              \n" +
                "	DEALLOCATE PREPARE query1;              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  Results where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);              \n" +
                "	PREPARE query2 FROM @SQLStatement2;              \n" +
                "	EXECUTE query2;              \n" +
                "	DEALLOCATE PREPARE query2;              \n" +
                "  \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2768,'2.00','V1','Sproc_WOChangeHistory - Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2768:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetActiveOperationsList;  \n" +
                "CREATE PROCEDURE `Sproc_GetActiveOperationsList`(      \n" +
                "	IN ppageIndex INT(11),            \n" +
                "	IN precordPerPage INT(11),            \n" +
                "	IN pOrderBy VARCHAR(255),            \n" +
                "	IN pWhereClause VARCHAR(16383),            \n" +
                "	pEmployeeID INT(11),      \n" +
                "    pWoID INT(11),      \n" +
                "    pCount INT(11)      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE pOffset INT(11);            \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;            \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
                "	ELSE            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"checkInDateTime DESC\") ;            \n" +
                "	END IF;	            \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = \"''\") THEN            \n" +
                "		SET pWhereClause = '1=1' ;            \n" +
                "	END IF;	            \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
                "	ELSE	            \n" +
                "		SET rowNumWhere = '';            \n" +
                "	END IF;        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS `temp_Sproc_GetActiveOperationsList`;      \n" +
                "	CREATE TEMPORARY TABLE temp_Sproc_GetActiveOperationsList AS      \n" +
                "	SELECT             \n" +
                "	#(SELECT CONCAT(woNumber,'-',woVersion)  FROM workorder WHERE woid=woop.woid AND deletedAt IS NULL) woNumber,            \n" +
                "    CONCAT(wo.woNumber,'-',wo.woVersion) woNumber,  \n" +
                "    wo.partID,      \n" +
                "    co.mfgPN,  \n" +
                "    co.PIDCode,  \n" +
                "    ro.rohsIcon,  \n" +
                "    co.RoHSStatusID,  \n" +
                "    ro.`name` AS rohsName,  \n" +
                "	woop.opNumber,            \n" +
                "    woop.opName,    \n" +
                "	CONCAT(\"(\",woop.opNumber,\") \", woop.opName) opFullName,            \n" +
                "	woop.woID,            \n" +
                "	woop.woOPID,            \n" +
                "	woempinout.woTransID,            \n" +
                "    woempinout.employeeID,     \n" +
                "    wtrans.isSetup,    \n" +
                "    (CASE WHEN wtrans.isSetup = 1 THEN 'Setup Activity' ELSE 'Production Activity' END ) displayActivityType,     \n" +
                "    (select CONCAT('(',e.initialName,')',e.firstName,' ', e.lastName) from employees e where e.id =  woempinout.employeeID and IFNULL(e.isDeleted,0) = 0) employeeName,      \n" +
                "	(SELECT fun_ConvertUTCDatetimeToDataKeyTimeZone(`woempinout`.`checkinTime`)) checkinDateTime,      \n" +
                "    TIMESTAMPDIFF(SECOND,`woempinout`.`checkinTime` ,  fun_DatetimetoUTCDateTime()) currentTotalTime,      \n" +
                "    CAST((CASE WHEN woempinout.isPaused =1 THEN  'Paused' ELSE Null END) AS CHAR(30)) opStatus      \n" +
                "	FROM workorder_trans_empinout woempinout     \n" +
                "    JOIN workorder wo ON wo.woID = woempinout.woID AND IFNULL(wo.isDeleted,0) = 0   \n" +
                "	LEFT JOIN workorder_operation woop  ON woop.woopid = woempinout.woopid AND woop.deletedAt IS NULL            \n" +
                "    JOIN workorder_trans wtrans ON wtrans.woTransID = woempinout.woTransID and IFNULL(wtrans.isDeleted ,0) = 0     \n" +
                "    LEFT JOIN `component` co ON co.id = wo.partID and IFNULL(co.isDeleted,0) = 0   \n" +
                "    LEFT JOIN rfq_rohsmst ro  ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  AND `ro`.`deletedAt` IS NULL  \n" +
                "	WHERE woempinout.employeeID = IFNULL(pEmployeeID, woempinout.employeeID)      \n" +
                "    AND woempinout.woID = IFNULL(pWoID,woempinout.woID)          \n" +
                "	AND woempinout.deletedAt IS NULL       \n" +
                "    AND woempinout.checkoutTime IS NULL;          \n" +
                "  \n" +
                "    UPDATE temp_Sproc_GetActiveOperationsList tempList      \n" +
                "    SET opStatus = CASE WHEN  ( (SELECT count(1) from workorder_trans_operation_hold_unhold wohold      \n" +
                "				WHERE wohold.woID = tempList.woID         \n" +
                "                AND wohold.woOPID = tempList.woOPID      \n" +
                "				AND endDate is Null      \n" +
                "				AND IFNULL(isDeleted,0) = 0 ) > 0 ) THEN 'Hold' ELSE opStatus END  ,      \n" +
                "		currentTotalTime = (	SELECT (SUM(TimeDiff1) - IFNULL(SUM(pauseTime),0)) TotalConsumptionTime       		      \n" +
                "							FROM ( SELECT   TIMESTAMPDIFF(SECOND, b.checkinTime, IFNULL(b.checkoutTime,fun_DatetimetoUTCDateTime())               \n" +
                "								 ) TimeDiff1,          \n" +
                "								(SELECT SUM( TIMESTAMPDIFF(SECOND,c.pausedTime, IFNULL(c.resumeTime,fun_DatetimetoUTCDateTime())))           \n" +
                "								 FROM workorder_trans_emp_pausedet c WHERE c.woTransinoutID = b.woTransinoutID) pauseTime				      \n" +
                "							FROM 	workorder_trans a,workorder_trans_empinout b              \n" +
                "							WHERE 	a.woTransID = b.woTransID              \n" +
                "							AND 	a.woOPID = tempList.woOPID      \n" +
                "							AND 	a.checkinEmployeeID = tempList.employeeID      \n" +
                "                            AND 	b.checkoutTime IS NULL    \n" +
                "							AND 	a.deletedAt IS NULL         \n" +
                "							AND 	b.deletedAt IS NULL )  currtime          \n" +
                "					  )  ;      \n" +
                "  \n" +
                "		UPDATE temp_Sproc_GetActiveOperationsList tempList     \n" +
                "        SET opStatus = 'Work In Progress'     \n" +
                "        WHERE opStatus IS NULL;    \n" +
                "  \n" +
                "  \n" +
                "    SET  @SQL1 = CONCAT('    select woNumber,      \n" +
                "			opNumber,      \n" +
                "            opName,      \n" +
                "            opFullName,    \n" +
                "            woID,      \n" +
                "            woOPID,      \n" +
                "            woTransID,      \n" +
                "            employeeID,      \n" +
                "            employeeName,      \n" +
                "            checkinDateTime,      \n" +
                "            currentTotalTime,      \n" +
                "            opStatus  ,    \n" +
                "            displayActivityType  ,  \n" +
                "            partId,  \n" +
                "            mfgPN,  \n" +
                "			PIDCode,  \n" +
                "			rohsIcon,  \n" +
                "			RoHSStatusID,  \n" +
                "			rohsName  \n" +
                "		from temp_Sproc_GetActiveOperationsList ');      \n" +
                "  \n" +
                "  \n" +
                "     IF pCount = 1 THEN      \n" +
                "		SET @SQL2 = CONCAT(\"select count(1) opCount from ( \", @SQL1,\" ) c   \");        \n" +
                "	 ELSE      \n" +
                "		SET @SQL2 = CONCAT(\"select * from ( \", @SQL1,\" ) c                    \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "     END IF;      \n" +
                "     PREPARE stmt FROM @SQL2;                                                                                \n" +
                "	 EXECUTE stmt;       \n" +
                "  \n" +
                "     DROP TEMPORARY TABLE IF EXISTS `temp_Sproc_GetActiveOperationsList`;      \n" +
                "  \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2769,'2.00','V1','Sproc_GetActiveOperationsList - Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2769:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_Update_WO_Verification_WOOP_TrackBySerialNo;  \n" +
                "CREATE PROCEDURE `Sproc_Update_WO_Verification_WOOP_TrackBySerialNo`(        \n" +
                "	IN pWOID INT(11),      \n" +
                "	IN pWOOPID INT(11),        \n" +
                "	IN pIsOperationsVerified INT(11),        \n" +
                "	IN pIsTrackBySerialNo INT(11),        \n" +
                "	IN pUpdatedBy VARCHAR(255),     \n" +
                "    IN pUpdateRoleById INT(11)  \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	DECLARE current_opnumber DECIMAL(7,3) DEFAULT 0;        \n" +
                "	DECLARE var_trackBySerialFromWOOPID INT DEFAULT 0;        \n" +
                "  \n" +
                "	UPDATE workorder a         \n" +
                "	SET a.isOperationsVerified = pIsOperationsVerified,      \n" +
                "	a.updatedBy = pUpdatedBy ,  \n" +
                "    a.updateByRoleId = pUpdateRoleById  \n" +
                "	WHERE a.woid = pWOID        \n" +
                "	AND a.deletedAt IS NULL;      \n" +
                "  \n" +
                "   ## check if opID is same as ptrackBySerialFromWOOPID then anly allow to update details    \n" +
                "	   SELECT IFNULL(woOPID,0) INTO var_trackBySerialFromWOOPID FROM workorder_operation WHERE woID = pWOID AND deletedAt IS NULL AND isTrackBySerialFromWOOP=1;    \n" +
                "	   IF ((var_trackBySerialFromWOOPID = 0) AND (pIsTrackBySerialNo=1)) THEN    \n" +
                "		SELECT woop.opNumber INTO current_opnumber       \n" +
                "		FROM workorder_operation woop WHERE woop.woOPID=pWOOPID;      \n" +
                "  \n" +
                "		UPDATE workorder_operation b      \n" +
                "		SET b.isTrackBySerialNo=1,     \n" +
                "		     b.updatedBy = pUpdatedBy  ,  \n" +
                "             b.updateByRoleId = pUpdateRoleById  \n" +
                "			WHERE b.woID=pWOID       \n" +
                "			AND b.qtyControl=1      \n" +
                "			AND b.opNumber >= current_opnumber       \n" +
                "			AND b.deletedAt IS NULL;    \n" +
                "  \n" +
                "			UPDATE workorder_operation b      \n" +
                "			SET b.isTrackBySerialFromWOOP = 1    \n" +
                "			WHERE b.isTrackBySerialNo=1    \n" +
                "			AND b.deletedAt IS NULL AND woOPID=pWOOPID;    \n" +
                "  \n" +
                "	   ELSEIF((pIsTrackBySerialNo = 0) AND (pWOOPID = var_trackBySerialFromWOOPID)) THEN    \n" +
                "		UPDATE workorder_operation b      \n" +
                "		SET b.isTrackBySerialNo=0,    \n" +
                "		     b.isTrackBySerialFromWOOP = 0,    \n" +
                "		     b.updatedBy = pUpdatedBy ,  \n" +
                "             b.updateByRoleId = pUpdateRoleById  \n" +
                "			WHERE b.woID=pWOID       \n" +
                "			AND b.qtyControl=1      \n" +
                "			AND b.opNumber >= current_opnumber       \n" +
                "			AND b.deletedAt IS NULL;    \n" +
                "	   END IF;	    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2770,'2.00','V1','Sproc_Update_WO_Verification_WOOP_TrackBySerialNo - Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2770:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_WorkOrder;  \n" +
                "CREATE TRIGGER `Trg_AU_WorkOrder` AFTER UPDATE ON `workorder` FOR EACH ROW BEGIN                \n" +
                "	IF IFNULL(OLD.WONUMBER, 0) != IFNULL(NEW.WONUMBER, 0) THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, updateByRoleId , woVersion  ,valueDataType)                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'WONUMBER',                \n" +
                "			CAST(OLD.WONUMBER AS CHAR),CAST(NEW.WONUMBER AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,    \n" +
                "			NEW.woVersion, 'String');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.PARTID, 0) != IFNULL(NEW.PARTID, 0)  THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId , woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'PARTID',                \n" +
                "			CAST(OLD.PARTID AS CHAR),CAST(NEW.PARTID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,    \n" +
                "			NEW.woVersion , 'String');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.EXCESSQTY, 0) != IFNULL(NEW.EXCESSQTY , 0) THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby , updateByRoleId,  woVersion  ,valueDataType)                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'EXCESSQTY',                \n" +
                "			CAST(OLD.excessQty AS CHAR),CAST(NEW.excessQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,    \n" +
                "			NEW.woVersion , 'Number');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.BUILDQTY , 0)!= IFNULL(NEW.BUILDQTY , 0) THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId , woVersion  ,valueDataType)                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'BUILDQTY',                \n" +
                "			CAST(OLD.buildQty AS CHAR),CAST(NEW.buildQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy , NEW.updateByRoleId,    \n" +
                "			NEW.woVersion , 'Number');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.STARTTIME, 0) != IFNULL(NEW.STARTTIME, 0)  THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'STARTTIME',                \n" +
                "			CAST(OLD.startTime AS CHAR),CAST(NEW.startTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,    \n" +
                "			NEW.woVersion , 'DateTime');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.ENDTIME, 0) != IFNULL(NEW.ENDTIME , 0) THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'ENDTIME',                \n" +
                "			CAST(OLD.endTime AS CHAR),CAST(NEW.endTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,    \n" +
                "			NEW.woVersion,'DateTime');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.MASTERTEMPLATEID, 0) != IFNULL(NEW.MASTERTEMPLATEID, 0)  THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby , updateByRoleId,woVersion  ,valueDataType)                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'MASTERTEMPLATEID',                \n" +
                "			CAST(OLD.MASTERTEMPLATEID AS CHAR),CAST(NEW.MASTERTEMPLATEID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,    \n" +
                "			NEW.woVersion ,'Id');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.REFRENCEWOID, 0) != IFNULL(NEW.REFRENCEWOID , 0) THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'REFRENCEWOID',                \n" +
                "			CAST(OLD.REFRENCEWOID AS CHAR),CAST(NEW.REFRENCEWOID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,    \n" +
                "			NEW.woVersion , 'String');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.WOVERSION, 0) != IFNULL(NEW.WOVERSION , 0) THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'WOVERSION',                \n" +
                "			CAST(OLD.woVersion AS CHAR),CAST(NEW.woVersion AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,    \n" +
                "            NEW.woVersion,'String');                \n" +
                "	END IF;            	               \n" +
                "	IF IFNULL(OLD.ISCLUSTERAPPLIED, 0) != IFNULL(NEW.ISCLUSTERAPPLIED, 0)  THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'ISCLUSTERAPPLIED',                \n" +
                "			CAST(OLD.ISCLUSTERAPPLIED AS CHAR),CAST(NEW.ISCLUSTERAPPLIED AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,    \n" +
                "			NEW.woVersion , 'Boolean');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.ROHSSTATUSID, 0) != IFNULL(NEW.ROHSSTATUSID, 0)  THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'ROHSSTATUSID',                \n" +
                "			CAST(OLD.ROHSSTATUSID AS CHAR),CAST(NEW.ROHSSTATUSID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,    \n" +
                "			NEW.woVersion , 'String');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.ISNOCLEAN, 0) != IFNULL(NEW.ISNOCLEAN , 0) THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'ISNOCLEAN',                \n" +
                "			CAST(OLD.ISNOCLEAN AS CHAR),CAST(NEW.ISNOCLEAN AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,    \n" +
                "			NEW.woVersion, 'Boolean');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.ISWATERSOLUBLE, 0) != IFNULL(NEW.ISWATERSOLUBLE, 0)  THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'ISWATERSOLUBLE',                \n" +
                "			CAST(OLD.ISWATERSOLUBLE AS CHAR),CAST(NEW.ISWATERSOLUBLE AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,    \n" +
                "			NEW.woVersion,'Boolean');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.ISOPERATIONTRACKBYSERIALNO, 0) != IFNULL(NEW.ISOPERATIONTRACKBYSERIALNO , 0) THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'ISOPERATIONTRACKBYSERIALNO',                \n" +
                "			CAST(OLD.ISOPERATIONTRACKBYSERIALNO AS CHAR),CAST(NEW.ISOPERATIONTRACKBYSERIALNO AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,    \n" +
                "			NEW.woVersion,'Boolean');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.WOSUBSTATUS, 0) != IFNULL(NEW.WOSUBSTATUS , 0) THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'WOSTATUS',                \n" +
                "			CAST(OLD.WOSUBSTATUS AS CHAR),CAST(NEW.WOSUBSTATUS AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,    \n" +
                "            NEW.woVersion, 'String');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.CUSTOMERID, 0) != IFNULL(NEW.CUSTOMERID, 0)  THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'CUSTOMER',                \n" +
                "			CAST(OLD.customerID AS CHAR),CAST(NEW.customerID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,    \n" +
                "            NEW.woVersion , 'String');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.ECOREMARK, 0) != IFNULL(NEW.ECOREMARK , 0) THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'ECOREMARK',                \n" +
                "			CAST(OLD.ECORemark AS CHAR),CAST(NEW.ECORemark AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,    \n" +
                "            NEW.woVersion, 'String');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.FCOREMARK, 0) != IFNULL(NEW.FCOREMARK, 0)  THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'FCOREMARK',                \n" +
                "			CAST(OLD.FCORemark AS CHAR),CAST(NEW.FCORemark AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,    \n" +
                "            NEW.woVersion, 'String');                \n" +
                "	END IF;                \n" +
                "	#IF IFNULL(OLD.SAMPLEDETAILS , 0)!= IFNULL(NEW.SAMPLEDETAILS , 0) THEN                 \n" +
                "	#	INSERT INTO DataEntryChange_auditLog                 \n" +
                "	#		( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby , woVersion  ,valueDataType )                 \n" +
                "	#	VALUES (\"WORKORDER\",                \n" +
                "	#		CAST(NEW.woID AS CHAR),                \n" +
                "	#		'SAMPLEDETAILS',                \n" +
                "	#		CAST(OLD.sampleDetails AS CHAR),CAST(NEW.sampleDetails AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,    \n" +
                "    #        NEW.woVersion , 'String');                \n" +
                "	#END IF;                \n" +
                "	IF IFNULL(OLD.LOCATIONDETAILS , 0)!= IFNULL(NEW.LOCATIONDETAILS , 0) THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'LOCATIONDETAILS',                \n" +
                "			CAST(OLD.locationDetails AS CHAR),CAST(NEW.locationDetails AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,    \n" +
                "            NEW.woVersion ,'String');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.ISDELETED, 0) != IFNULL(NEW.ISDELETED , 0) THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'ISDELETED',                \n" +
                "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,    \n" +
                "            NEW.woVersion,'Boolean');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.ISSTOPWORKORDER, 0) != IFNULL(NEW.ISSTOPWORKORDER, 0)  THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'ISSTOPWORKORDER',                \n" +
                "			CAST(OLD.isStopWorkorder AS CHAR),CAST(NEW.isStopWorkorder AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,    \n" +
                "            NEW.woVersion , 'Boolean');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.ISREVISEDWO, 0) != IFNULL(NEW.ISREVISEDWO, 0)  THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType)                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'ISREVISEDWO',                \n" +
                "			CAST(OLD.isRevisedWO AS CHAR),CAST(NEW.isRevisedWO AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,    \n" +
                "            NEW.woVersion ,'Boolean');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.ISOPERATIONSVERIFIED, 0) != IFNULL(NEW.ISOPERATIONSVERIFIED, 0)  THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion  ,valueDataType)                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'ISOPERATIONSVERIFIED',                \n" +
                "			CAST(OLD.isOperationsVerified AS CHAR),CAST(NEW.isOperationsVerified AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,    \n" +
                "            NEW.woVersion,'Boolean');                \n" +
                "	END IF;                \n" +
                "	IF IFNULL(OLD.TERMINATEWOID, 0) != IFNULL(NEW.TERMINATEWOID, 0)  THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'TERMINATEWOID',                \n" +
                "			CAST(OLD.terminateWOID AS CHAR),CAST(NEW.terminateWOID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,    \n" +
                "            NEW.woVersion, 'Boolean');                \n" +
                "	END IF;                \n" +
                "  IF IFNULL(OLD.ISRACKTRACKINGREQUIRED, 0) != IFNULL(NEW.ISRACKTRACKINGREQUIRED, 0)  THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId, woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'ISRACKTRACKINGREQUIRED',                \n" +
                "			CAST(OLD.ISRACKTRACKINGREQUIRED AS CHAR),CAST(NEW.ISRACKTRACKINGREQUIRED AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,    \n" +
                "			NEW.woVersion, 'Boolean');                \n" +
                "	END IF;      \n" +
                "    IF IFNULL(OLD.ISSTRICTLYFOLLOWRACKVALIDATION, 0) != IFNULL(NEW.ISSTRICTLYFOLLOWRACKVALIDATION, 0)  THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'ISSTRICTLYFOLLOWRACKVALIDATION',                \n" +
                "			CAST(OLD.ISSTRICTLYFOLLOWRACKVALIDATION AS CHAR),CAST(NEW.ISSTRICTLYFOLLOWRACKVALIDATION AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,    \n" +
                "			NEW.woVersion, 'Boolean');                \n" +
                "	END IF;      \n" +
                "  \n" +
                "    IF IFNULL(OLD.ISHOTJOB, 0) != IFNULL(NEW.ISHOTJOB, 0)  THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'ISHOTJOB',                \n" +
                "			CAST(OLD.ISHOTJOB AS CHAR),CAST(NEW.ISHOTJOB AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,    \n" +
                "			NEW.woVersion, 'Boolean');                \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.isIncludeSubAssembly, 0) != IFNULL(NEW.isIncludeSubAssembly, 0)  THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'ISINCLUDESUBASSEMBLY',                \n" +
                "			CAST(OLD.isIncludeSubAssembly AS CHAR),CAST(NEW.isIncludeSubAssembly AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,    \n" +
                "			NEW.woVersion, 'Boolean');                \n" +
                "	END IF;      \n" +
                "  \n" +
                "    IF IFNULL(OLD.selectedSampleID, 0) != IFNULL(NEW.selectedSampleID, 0)  THEN                 \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion  ,valueDataType )                 \n" +
                "		VALUES (\"WORKORDER\",                \n" +
                "			CAST(NEW.woID AS CHAR),                \n" +
                "			'SELECTEDSAMPLEID',                \n" +
                "			CAST(OLD.selectedSampleID AS CHAR),CAST(NEW.selectedSampleID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,    \n" +
                "			NEW.woVersion, 'String');                \n" +
                "	END IF;   \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2771,'2.00','V1','Trg_AU_WorkOrder - Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2771:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_workorder_operation_equipment_feeder_details_Reason;  \n" +
                "CREATE  TRIGGER `Trg_AU_workorder_operation_equipment_feeder_details_Reason` AFTER UPDATE ON `workorder_operation_equipment_feeder_details` FOR EACH ROW BEGIN          \n" +
                "	DECLARE vWoVersion VARCHAR(200);    \n" +
                "    DECLARE vOpVersion VARCHAR(200);    \n" +
                "  \n" +
                "    SELECT woVersion INTO vWoVersion    \n" +
                "    FROM workorder w        \n" +
                "    WHERE w.woID = NEW.woID    \n" +
                "    AND ifnull(w.isDeleted,0) = 0;    \n" +
                "  \n" +
                "    SELECT opVersion INTO vOpVersion    \n" +
                "    FROM workorder_operation woop    \n" +
                "    WHERE woop.woOPID = NEW.woOPID     \n" +
                "    AND IFNULL(woop.isDeleted,0) = 0 ;    \n" +
                "  \n" +
                "  \n" +
                "	IF (OLD.lineItemSelectReason <> NEW.lineItemSelectReason) THEN        \n" +
                "         INSERT INTO taskconfirmation(confirmationType, reason,refTableName,refID,createdBy,updatedBy,isDeleted)         \n" +
                "         VALUES (\"ReasonChangeRequest\", OLD.lineItemSelectReason,\"workorder_operation_equipment_feeder_details\",NEW.id,OLD.updatedBy,OLD.updatedBy,0);        \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.feederLocation, 0) != IFNULL(NEW.feederLocation, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,woVersion ,opVersion , valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION_FEEDER\",CAST(NEW.id AS CHAR),'FEEDERLOCATION',      \n" +
                "			CAST(OLD.feederLocation AS CHAR),CAST(NEW.feederLocation AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,    \n" +
                "            vWoVersion , vOpVersion ,'Number');      \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.qty, 0) != IFNULL(NEW.qty, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId , woVersion ,opVersion , valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION_FEEDER\",CAST(NEW.id AS CHAR),'FEEDERQTY',      \n" +
                "			CAST(OLD.qty AS CHAR),CAST(NEW.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,    \n" +
                "            vWoVersion , vOpVersion ,'Number');      \n" +
                "	END IF;      \n" +
                "     IF IFNULL(OLD.isActive, 0) != IFNULL(NEW.isActive, 0)  THEN       \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId , woVersion ,opVersion , valueDataType)       \n" +
                "		VALUES (\"WORKORDER_OPERATION_FEEDER\",CAST(NEW.id AS CHAR),'ISFEEDERACTIVE',      \n" +
                "			CAST(OLD.isActive AS CHAR),CAST(NEW.isActive AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,    \n" +
                "            vWoVersion , vOpVersion ,'Case');      \n" +
                "	END IF;    \n" +
                "  \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2772,'2.00','V1','Trg_AU_workorder_operation_equipment_feeder_details_Reason - Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2772:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-08-2020 *********************************** */
                "DROP TRIGGER Trg_AU_WorkOrder_Operation;  \n" +
                "CREATE TRIGGER `Trg_AU_WorkOrder_Operation` AFTER UPDATE ON `workorder_operation` FOR EACH ROW BEGIN          \n" +
                "  \n" +
                "    DECLARE vWoVersion VARCHAR(200);      \n" +
                "	SELECT woVersion INTO vWoVersion      \n" +
                "    FROM workorder w      \n" +
                "    WHERE w.woID = NEW.woID      \n" +
                "    AND IFNULL(w.isDeleted,0) = 0;      \n" +
                "  \n" +
                "	IF IFNULL(OLD.opName, 0) != IFNULL(NEW.opName, 0)  THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby , updateByRoleId, woVersion , opVersion  ,  valueDataType )           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPNAME',          \n" +
                "			CAST(OLD.opName AS CHAR),CAST(NEW.opName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion ,'String');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.processTime, 0) != IFNULL(NEW.processTime, 0)  THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'PROCESSTIME',          \n" +
                "			CAST(OLD.processTime AS CHAR),CAST(NEW.processTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'Date');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.setupTime, 0) != IFNULL(NEW.setupTime, 0)  THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType  )           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'SETUPTIME',          \n" +
                "			CAST(OLD.setupTime AS CHAR),CAST(NEW.setupTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'Date');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.perPieceTime , 0)!= IFNULL(NEW.perPieceTime, 0)  THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby , updateByRoleId, woVersion , opVersion  ,  valueDataType )           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'PERPIECETIME',          \n" +
                "			CAST(OLD.perPieceTime AS CHAR),CAST(NEW.perPieceTime AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'Date');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.qtyControl, 0) != IFNULL(NEW.qtyControl, 0)  THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'QTYCONTROL',          \n" +
                "			CAST(OLD.qtyControl AS CHAR),CAST(NEW.qtyControl AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,       \n" +
                "            vWoVersion  , NEW.opVersion ,'Boolean');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.cleaningType, 0) != IFNULL(NEW.cleaningType, 0)  THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType  )           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'CLEANINGTYPE',          \n" +
                "			CAST(OLD.cleaningType AS CHAR),CAST(NEW.cleaningType AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,                  \n" +
                "            vWoVersion , NEW.opVersion,'Case');          \n" +
                "	END IF;          \n" +
                "	-- IF IFNULL(OLD.isWatersoluble, 0) != IFNULL(NEW.isWatersoluble , 0) THEN           \n" +
                "	-- 	INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby )           \n" +
                "	-- 	VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISWATERSOLUBLE',          \n" +
                "	-- 		CAST(OLD.isWatersoluble AS CHAR),CAST(NEW.isWatersoluble AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy);          \n" +
                "	-- END IF;          \n" +
                "	IF IFNULL(OLD.opDescription, 0) != IFNULL(NEW.opDescription , 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType  )           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPDESCRIPTION',          \n" +
                "			CAST(OLD.opDescription AS CHAR),CAST(NEW.opDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'TextAngular');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.opWorkingCondition, 0) != IFNULL(NEW.opWorkingCondition, 0)  THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType )           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPWORKINGCONDITION',          \n" +
                "			CAST(OLD.opWorkingCondition AS CHAR),CAST(NEW.opWorkingCondition AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy ,NEW.updateByRoleId,       \n" +
                "            vWoVersion, NEW.opVersion ,'TextAngular');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.opManagementInstruction, 0) != IFNULL(NEW.opManagementInstruction, 0)  THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPMANAGEMENTINSTRUCTION',          \n" +
                "			CAST(OLD.opManagementInstruction AS CHAR),CAST(NEW.opManagementInstruction AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'TextAngular');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.opDeferredInstruction, 0) != IFNULL(NEW.opDeferredInstruction, 0)  THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby ,updateByRoleId,  woVersion , opVersion  ,  valueDataType )           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPDEFERREDINSTRUCTION',          \n" +
                "			CAST(OLD.opDeferredInstruction AS CHAR),CAST(NEW.opDeferredInstruction AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'TextAngular');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.opDoes, 0) != IFNULL(NEW.opDoes, 0)  THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPDOES',          \n" +
                "			CAST(OLD.opDoes AS CHAR),CAST(NEW.opDoes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,       \n" +
                "            vWoVersion, NEW.opVersion, 'TextAngular');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.opDonts , 0)!= IFNULL(NEW.opDonts , 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby ,updateByRoleId,  woVersion , opVersion  ,  valueDataType )           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPDONTS',          \n" +
                "			CAST(OLD.opDonts AS CHAR),CAST(NEW.opDonts AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,       \n" +
                "            vWoVersion, NEW.opVersion,'TextAngular');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.opStatus, 0) != IFNULL(NEW.opStatus , 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType  )           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPSTATUS',          \n" +
                "			CAST(OLD.opStatus AS CHAR),CAST(NEW.opStatus AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'String');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.opOrder , 0)!= IFNULL(NEW.opOrder , 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType  )           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPORDER',          \n" +
                "			CAST(OLD.opOrder AS CHAR),CAST(NEW.opOrder AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,       \n" +
                "            vWoVesion , NEW.opVersion , 'Number');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.operationTypeID, 0) != IFNULL(NEW.operationTypeID, 0)  THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby ,updateByRoleId,  woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPERATIONTYPEID',          \n" +
                "			CAST(OLD.operationTypeID AS CHAR),CAST(NEW.operationTypeID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'String');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.parentOPID, 0) != IFNULL(NEW.parentOPID, 0)  THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'PARENTOPID',          \n" +
                "			CAST(OLD.parentOPID AS CHAR),CAST(NEW.parentOPID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'String');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.isDeleted , 0)!= IFNULL(NEW.isDeleted , 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISOPERATIONDELETED',          \n" +
                "			CAST(OLD.isDeleted AS CHAR),CAST(NEW.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,       \n" +
                "            vWoVersion,  NEW.opVersion , 'Boolean');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.firstPcsConclusion, 0) != IFNULL(NEW.firstPcsConclusion , 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'FIRSTPCSCONCLUSION',          \n" +
                "			CAST(OLD.firstPcsConclusion AS CHAR),CAST(NEW.firstPcsConclusion AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'String');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.firstPcsModel, 0) != IFNULL(NEW.firstPcsModel , 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'FIRSTPCSMODEL',          \n" +
                "			CAST(OLD.firstPcsModel AS CHAR),CAST(NEW.firstPcsModel AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion ,'String');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.firstPcsStatus, 0) != IFNULL(NEW.firstPcsStatus, 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'FIRSTPCSSTATUS',          \n" +
                "			CAST(OLD.firstPcsStatus AS CHAR),CAST(NEW.firstPcsStatus AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'String');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.isIssueQty, 0) != IFNULL(NEW.isIssueQty, 0)  THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISISSUEQTY',          \n" +
                "			CAST(OLD.isIssueQty AS CHAR),CAST(NEW.isIssueQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.isPreProgrammingComponent, 0) != IFNULL(NEW.isPreProgrammingComponent, 0)  THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISPREPROGRAMMINGCOMPONENT',          \n" +
                "			CAST(OLD.isPreProgrammingComponent AS CHAR),CAST(NEW.isPreProgrammingComponent AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,       \n" +
                "            vWoVersion, NEW.opVersion , 'Boolean');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.isRework, 0) != IFNULL(NEW.isRework, 0)  THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISREWORK',          \n" +
                "			CAST(OLD.isRework AS CHAR),CAST(NEW.isRework AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.isStopOperation, 0) != IFNULL(NEW.isStopOperation, 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISSTOPOPERATION',          \n" +
                "			CAST(OLD.isStopOperation AS CHAR),CAST(NEW.isStopOperation AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.isTeamOperation , 0) != IFNULL(NEW.isTeamOperation , 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISTEAMOPERATION',          \n" +
                "			CAST(OLD.isTeamOperation AS CHAR),CAST(NEW.isTeamOperation AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.isTerminated, 0) != IFNULL(NEW.isTerminated, 0)  THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISTERMINATED',          \n" +
                "			CAST(OLD.isTerminated AS CHAR),CAST(NEW.isTerminated AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.opVersion, 0) != IFNULL(NEW.opVersion , 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy,  updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType )           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPVERSION',          \n" +
                "			CAST(OLD.opVersion AS CHAR),CAST(NEW.opVersion AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'String');          \n" +
                "	END IF;          \n" +
                "	IF IFNULL(OLD.colorCode, 0) != IFNULL(NEW.colorCode , 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy,  updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'COLORCODE',          \n" +
                "			CAST(OLD.colorCode AS CHAR),CAST(NEW.colorCode AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion ,'Color');          \n" +
                "	END IF;       \n" +
                "    IF IFNULL(OLD.isMoveToStock , 0) != IFNULL(NEW.isMoveToStock , 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISMOVETOSTOCK',          \n" +
                "			CAST(OLD.isMoveToStock AS CHAR),CAST(NEW.isMoveToStock AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');          \n" +
                "	END IF;        \n" +
                "     IF IFNULL(OLD.isPlacementTracking , 0) != IFNULL(NEW.isPlacementTracking , 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISPLACEMENTTRACKING',          \n" +
                "			CAST(OLD.isPlacementTracking AS CHAR),CAST(NEW.isPlacementTracking AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');          \n" +
                "	END IF;        \n" +
                "     IF IFNULL(OLD.isTrackBySerialNo , 0) != IFNULL(NEW.isTrackBySerialNo , 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId, woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISTRACKBYSERIALNO',          \n" +
                "			CAST(OLD.isTrackBySerialNo AS CHAR),CAST(NEW.isTrackBySerialNo AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');          \n" +
                "	END IF;        \n" +
                "	IF IFNULL(OLD.isLoopOperation , 0) != IFNULL(NEW.isLoopOperation , 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,  updateByRoleId,woVersion, opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISLOOPOPERATION',          \n" +
                "			CAST(OLD.isLoopOperation AS CHAR),CAST(NEW.isLoopOperation AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');          \n" +
                "	END IF;       \n" +
                "    IF IFNULL(OLD.isAllowMissingPartQty , 0) != IFNULL(NEW.isAllowMissingPartQty , 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,updateByRoleId,  woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISALLOWMISSINGPARTQTY',          \n" +
                "			CAST(OLD.isAllowMissingPartQty AS CHAR),CAST(NEW.isAllowMissingPartQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');          \n" +
                "	END IF;       \n" +
                "    IF IFNULL(OLD.isAllowByPassQty , 0) != IFNULL(NEW.isAllowByPassQty , 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISALLOWBYPASSQTY',          \n" +
                "			CAST(OLD.isAllowByPassQty AS CHAR),CAST(NEW.isAllowByPassQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');          \n" +
                "	END IF;        \n" +
                "     IF IFNULL(OLD.tabLimitAtTraveler , 0) != IFNULL(NEW.tabLimitAtTraveler , 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'TABLIMITATTRAVELER',          \n" +
                "			CAST(OLD.tabLimitAtTraveler AS CHAR),CAST(NEW.tabLimitAtTraveler AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'String');          \n" +
                "	END IF;        \n" +
                "    IF IFNULL(OLD.mountingTypeID , 0) != IFNULL(NEW.mountingTypeID , 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'MOUNTINGTYPE',          \n" +
                "			CAST(OLD.mountingTypeID AS CHAR),CAST(NEW.mountingTypeID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'String');          \n" +
                "	END IF;       \n" +
                "	IF IFNULL(OLD.opNumber , 0) != IFNULL(NEW.opNumber , 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'OPNUMBER',          \n" +
                "			CAST(OLD.opNumber AS CHAR),CAST(NEW.opNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'String');          \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF IFNULL(OLD.isAllowFinalSerialMapping , 0) != IFNULL(NEW.isAllowFinalSerialMapping , 0) THEN           \n" +
                "		INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId,  woVersion , opVersion  ,  valueDataType)           \n" +
                "		VALUES (\"WORKORDER_OPERATION\", CAST(NEW.woOPID AS CHAR), 'ISALLOWFINALSERAILMAPPING',          \n" +
                "			CAST(OLD.isAllowFinalSerialMapping AS CHAR),CAST(NEW.isAllowFinalSerialMapping AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,       \n" +
                "            vWoVersion , NEW.opVersion , 'Boolean');          \n" +
                "	END IF;      \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2773,'2.00','V1','Trg_AU_WorkOrder_Operation - Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2773:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AI_workorder_main_assembly_mapping_details;  \n" +
                "CREATE  TRIGGER `Trg_AI_workorder_main_assembly_mapping_details` AFTER INSERT ON `workorder_main_assembly_mapping_details` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vWoVersion VARCHAR(200);    \n" +
                "	SELECT woVersion INTO vWoVersion    \n" +
                "    FROM workorder w    \n" +
                "    WHERE w.woID = NEW.refWOID    \n" +
                "    AND ifnull(w.isDeleted,0) = 0;    \n" +
                "  \n" +
                "	INSERT INTO DataEntryChange_auditLog ( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby, updateByRoleId , woVersion , valueDataType )       \n" +
                "	VALUES (\"WORKORDER_SUBASSEMBLY\",CAST(NEW.id AS CHAR),'PARENTWO',      \n" +
                "			null,CAST(NEW.parentWOID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy, null ,     \n" +
                "            vWoVersion, 'String');     \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2774,'2.00','V1','Trg_AI_workorder_main_assembly_mapping_details - Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2774:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-08-2020 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AI_workorder_reqrevinvitedemp;  \n" +
                "CREATE  TRIGGER `Trg_AI_workorder_reqrevinvitedemp` AFTER INSERT ON `workorder_reqrevinvitedemp` FOR EACH ROW BEGIN  \n" +
                "		DECLARE vWoVersion VARCHAR(200);    \n" +
                "		SELECT woVersion INTO vWoVersion    \n" +
                "		FROM workorder w    \n" +
                "		WHERE w.woID = NEW.woID    \n" +
                "		AND ifnull(w.isDeleted,0) = 0;    \n" +
                "  \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby ,updateByRoleId, woVersion  ,valueDataType)                 \n" +
                "		VALUES (\"WORKORDER_REQREVEMP\",  CAST(NEW.woID AS CHAR), 'ISCOMPULSORY',                \n" +
                "			null,CAST(NEW.isCompulsory AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,    \n" +
                "			vWoVersion, 'Case');                \n" +
                "  \n" +
                "		INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby ,updateByRoleId, woVersion  ,valueDataType)                 \n" +
                "		VALUES (\"WORKORDER_REQREVEMP\",  CAST(NEW.woID AS CHAR), 'TIMELINE',                \n" +
                "			null,CAST(NEW.timeline AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,    \n" +
                "			vWoVersion, 'Date');                \n" +
                "  \n" +
                "        INSERT INTO DataEntryChange_auditLog                 \n" +
                "			( Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby ,updateByRoleId, woVersion  ,valueDataType)                 \n" +
                "		VALUES (\"WORKORDER_REQREVEMP\",  CAST(NEW.woID AS CHAR), 'ADDEDREVIEWEMPLOYEE',                \n" +
                "			null,CAST(NEW.employeeID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updateByRoleId,    \n" +
                "			vWoVersion, 'String');     \n" +
                "  \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2775,'2.00','V1',' Trg_AI_workorder_reqrevinvitedemp- Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2775:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS fun_getNameByID;  \n" +
                "CREATE FUNCTION `fun_getNameByID`(              \n" +
                "	pColName VARCHAR(255),        \n" +
                "    pId LONGTEXT   ,        \n" +
                "    pDataType VARCHAR(20)        \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN              \n" +
                "	DECLARE vName LONGTEXT;           \n" +
                "	SET vName = '';  \n" +
                "	IF pColName = 'WOSTATUS'  THEN          \n" +
                "		SET vName = fun_getStatusNameByColumnAndID (pColName, pId);        \n" +
                "    ELSEIF pColName = 'CUSTOMER' THEN        \n" +
                "		SET vName = fun_getMfgCodeAndNameByID(pId);        \n" +
                "    ELSEIF pColName = 'REFRENCEWOID' THEN        \n" +
                "		SET vName = fun_getWorkorderNumberByID(pId);        \n" +
                "    ELSEIF pColName = 'ROHSSTATUSID' THEN        \n" +
                "		SET vName = fun_getRoHSNameByID(pId);        \n" +
                "	ELSEIF pColName = 'PARTID' THEN        \n" +
                "		SET vName = fun_getComponentNameByID(pId);         \n" +
                "	ELSEIF pColName = 'CLASSIDS' OR pColName = 'ADDCLASSIDS' OR pColName = 'UPDATECLASSIDS' THEN        \n" +
                "		SET vName = fun_getCetificateNameById(pColName, pId);             \n" +
                "	ELSEIF pColName = 'STANDARDIDS' THEN        \n" +
                "		SET vName = fun_getCetificateNameById(pColName, pId);                     \n" +
                "	ELSEIF pColName = 'WORKORDERDATAFIELD' THEN        \n" +
                "		SET vName = fun_getDataElementNameById(pId);           \n" +
                "	ELSEIF pColName = 'OPERATIONDATAFIELD' THEN        \n" +
                "		SET vName = fun_getDataElementNameById(pId);          \n" +
                "	ELSEIF pColName = 'ADDEDEMPLOYEE' OR pColName = 'ADDEDREVIEWEMPLOYEE' THEN        \n" +
                "		SET vName = fun_getEmployeeInitialNameByEmpID(pId);           \n" +
                "	ELSEIF pColName = 'WORKORDERCOOWNER' THEN        \n" +
                "		SET vName = fun_getEmployeeInitialNameByEmpID(pId);          \n" +
                "	ELSEIF pColName = 'OPSTATUS' THEN        \n" +
                "		SET vName = fun_getOpStatusNameByID(pId);         \n" +
                "	ELSEIF pColName = 'PARENTOPID' THEN        \n" +
                "		SET vName = fun_getOperationNameById(pId);         \n" +
                "	ELSEIF pColName = 'OPERATIONTYPEID' THEN        \n" +
                "		SET vName = fun_getGenericCategoryNameByID(pId);            \n" +
                "	ELSEIF pColName = 'OPERATIONCLUSTERID' THEN        \n" +
                "		SET vName = fun_getClusterNameById(pId);            \n" +
                "	ELSEIF pColName = 'ADDEDEQUIPMENT' OR pColName = 'SELECTEDSAMPLEID' THEN        \n" +
                "		SET vName = fun_getEqpWSNameByID(pId);            \n" +
                "	ELSEIF pColName = 'SMTUOM' THEN        \n" +
                "		SET vName = fun_getUnitNameByID(pId);           \n" +
                "	ELSEIF pColName = 'ADDEDSMT' THEN        \n" +
                "		#SET vName = fun_getComponentPIDCodeByID(pId);                   \n" +
                "        SET vName = fun_getAssyPIDCodeByID(pId);          \n" +
                "	ELSEIF pColName = 'MOUNTINGTYPE' THEN		              \n" +
                "        SET vName = fun_getMountingTypeNameByID(pId);      \n" +
                "	ELSEIF pColName = 'FIRSTPCSSTATUS' THEN		              \n" +
                "        SET vName = fun_getFirstPCSStatusNameByID(pId);     \n" +
                "	ELSEIF pColName = 'PARENTWO' THEN		              \n" +
                "        SET vName = fun_getWorkorderNumberWithRevByID(pId);     \n" +
                "	ELSE        \n" +
                "		SET vName = pId;        \n" +
                " END IF;            \n" +
                "	IF pDataType = 'Boolean' THEN        \n" +
                "		IF pId = 1 THEN SET vName ='Yes' ;        \n" +
                "		ELSEIF pId = 0 THEN SET vName = 'No';        \n" +
                "		END IF ;        \n" +
                "	ELSEIF pDataType = 'Case' THEN   		        \n" +
                "		IF pId = 'NC' THEN SET vName= \"No-Clean\";        \n" +
                "		ELSEIF pId= 'NA' THEN SET vName= \"Not Applicable\";        \n" +
                "		ELSEIF pId= 'WS' THEN SET vName = \"Water-Soluble\";    		    \n" +
                "        END IF;      \n" +
                "        IF pColName = 'ISCOMPULSORY' THEN    \n" +
                "			IF pId= 1 THEN SET vName = 'Mandatory';    \n" +
                "            ELSEIF pId= 0 THEN SET vName = 'Optional';    \n" +
                "            END IF;    \n" +
                "        END IF;        \n" +
                "        IF pColName = 'ISFEEDERACTIVE' THEN    \n" +
                "			IF pId= 1 THEN SET vName = 'Active';    \n" +
                "            ELSEIF pId= 0 THEN SET vName = 'Inactive';    \n" +
                "            END IF;    \n" +
                "        END IF;        \n" +
                "	END IF ;        \n" +
                "  \n" +
                "	RETURN vName;                \n" +
                "END ;  \n" +

                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2776,'2.00','V1','fun_getNameByID - Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2776:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS fun_getDataElementNameByID  ;  \n" +
                "CREATE FUNCTION `fun_getDataElementNameByID`(              \n" +
                "	pDataElementID INT) RETURNS varchar(500) CHARSET utf8mb4  \n" +
                "BEGIN              \n" +
                "	DECLARE vResult NVARCHAR(255);              \n" +
                "	SET vResult = '';    \n" +
                "	SELECT dataElementName INTO vResult FROM dataelement WHERE dataElementID = pDataElementID;     \n" +
                "    #SET result = @result;              \n" +
                "	RETURN vResult;              \n" +
                "END ;  \n" +

                /* **************************** Add Script Version -> 10-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2777,'2.00','V1','fun_getDataElementNameByID - Shweta  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2777:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 11-08-2020 *********************************** */
                "DROP function IF EXISTS `fun_checkForInspectionId`;  \n" +
                "CREATE FUNCTION `fun_checkForInspectionId`(    \n" +
                "	pinspectionId INT    \n" +
                ") RETURNS tinyint(1)  \n" +
                "BEGIN    \n" +
                "	DECLARE v_TemplateRequirementCount INT;    \n" +
                "    DECLARE v_PartRequirementCount INT;   \n" +
                "    DECLARE vIsRequirement BOOLEAN;    \n" +
                "  \n" +
                "		(SELECT COUNT(1) INTO v_TemplateRequirementCount FROM inspection_template_requirement_det     \n" +
                "        WHERE isDeleted=0 AND inspectionRequirementId IN(pinspectionId));  \n" +
                "  \n" +
                "		(SELECT COUNT(1) INTO v_PartRequirementCount FROM componenet_inspection_requirement_det     \n" +
                "        WHERE isDeleted=0 AND inspectionRequirementId IN(pinspectionId));  \n" +
                "  \n" +
                "      	IF(v_PartRequirementCount = 0) AND (v_TemplateRequirementCount = 0) THEN        \n" +
                "			SET	vIsRequirement = FALSE;      \n" +
                "        ELSE      \n" +
                "			SET	vIsRequirement = TRUE;      \n" +
                "		END IF;         \n" +
                "  \n" +
                "RETURN vIsRequirement;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2778,'2.00','V1','function for check Refrence of Requirement - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2778:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(                                                        \n" +
                "	IN pPageIndex INT(11),                                                                  \n" +
                "	IN pRecordPerPage INT(11),                                                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                                        \n" +
                "	IN pPackingSlipID INT(11)                                                     \n" +
                ")  \n" +
                "BEGIN                                                        \n" +
                "	DECLARE pOffset INT(11);                                                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                    \n" +
                "	DECLARE v_ParentPackingSlipId INT(11);  \n" +
                "	DECLARE v_InvoiceSlipId INT(11);    \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND deletedAt IS NULL;    \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND deletedAt IS NULL;    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;                             \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS                                                                  \n" +
                "	SELECT 		p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,                            \n" +
                "			CAST(p.packingSlipSerialNumber AS SIGNED) packingSlipSerialNumber,                                       \n" +
                "			p.nickname, 					p.partID, 						p.scanLabel, 	                                        \n" +
                "			p.orderedQty, 					p.receivedQty, 						p.packingSlipQty, 	                                        \n" +
                "			p.binID, 					p.warehouseID, 						p.parentWarehouseID, 	                                        \n" +
                "			p.invoicePrice, 				p.disputedPrice,					p.createdBy,                                         \n" +
                "			p.createdAt, 					p.updatedBy, 						p.updatedAt,                                        \n" +
                "			p.deletedBy, 					p.deletedAt, 						p.isDeleted,                                        \n" +
                "			p.purchasePrice, 				p.approveNote, 						p.otherCharges,                                         \n" +
                "			p.status, 					p.extendedPrice, 					p.refCreditDebitInvoiceNo,                                         \n" +
                "			p.difference, 					p.umidCreated, 						p.poReleaseNumber,                                        \n" +
                "			fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,                                                   \n" +
                "			c.mfgcodeID,					c.mfgPN,					        sc.mfgPN supplierPN,                                   \n" +
                "			c.unit,						c.uom,					  		fun_getUnitNameByID(c.uom) uomName,	  	                                            \n" +
                "			0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,                          		                          \n" +
                "			p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,	                          \n" +
                "			fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,	                                                    \n" +
                "			c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                        \n" +
                "			sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,                  \n" +
                "			sc.packagingID supplierPackagingId,		c.packageQty spq,                                       c.isCustom,         \n" +
                "			(    \n" +
                "				CASE    \n" +
                "					WHEN (v_ParentPackingSlipId IS NULL) THEN    \n" +
                "						p.receivedStatus    \n" +
                "					ELSE     \n" +
                "						(SELECT receivedStatus     \n" +
                "						FROM 	packing_slip_material_receive_det     \n" +
                "						WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId     \n" +
                "								AND packingSlipSerialNumber = p.packingSlipSerialNumber      \n" +
                "								AND isDeleted = 0)    \n" +
                "				END    \n" +
                "			)    \n" +
                "			receivedStatus,				    \n" +
                "			(    \n" +
                "				CASE     \n" +
                "					WHEN p.receivedStatus = 'P' THEN 'Pending'    \n" +
                "					WHEN p.receivedStatus = 'A' THEN 'Accept'    \n" +
                "					WHEN p.receivedStatus = 'R' THEN 'Reject'    \n" +
                "					ELSE NULL    \n" +
                "				END    \n" +
                "			) AS receivedStatusValue,    \n" +
                "			p.remark,      \n" +
                "			(    \n" +
                "				CASE    \n" +
                "					WHEN (v_ParentPackingSlipId IS NULL) THEN    \n" +
                "						(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND isDeleted = 0)    \n" +
                "					ELSE     \n" +
                "						(SELECT COUNT(1)     \n" +
                "						FROM 	packing_slip_material_receive_part_inspection_det     \n" +
                "						WHERE 	lineId = (    \n" +
                "								SELECT 	id     \n" +
                "								FROM 	packing_slip_material_receive_det     \n" +
                "								WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId     \n" +
                "										AND packingSlipSerialNumber = p.packingSlipSerialNumber     \n" +
                "										AND deletedAt IS NULL     \n" +
                "								LIMIT 	1    \n" +
                "							) AND isDeleted = 0)    \n" +
                "				END    \n" +
                "			) AS purchaseRequirementCount,    \n" +
                "			(    \n" +
                "				CASE    \n" +
                "					WHEN (v_ParentPackingSlipId IS NULL) THEN    \n" +
                "						(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0)    \n" +
                "					ELSE    \n" +
                "						(SELECT COUNT(1)     \n" +
                "						FROM 	packing_slip_material_receive_part_inspection_det     \n" +
                "						WHERE 	lineId = (    \n" +
                "								SELECT 	id     \n" +
                "								FROM 	packing_slip_material_receive_det     \n" +
                "								WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId     \n" +
                "										AND packingSlipSerialNumber = p.packingSlipSerialNumber     \n" +
                "										AND deletedAt IS NULL     \n" +
                "								LIMIT 	1    \n" +
                "							)     \n" +
                "							AND inspectionStatus = 'R'     \n" +
                "							AND isDeleted = 0)    \n" +
                "				END    \n" +
                "			) AS rejectedPurchaseRequirementCount,      \n" +
                "			(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,                                                        \n" +
                "			fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,                                                  \n" +
                "			(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.deletedAt IS NULL            \n" +
                "			 WHERE csspd.deletedAt IS NULL AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,	            \n" +
                "			(SELECT GROUP_CONCAT(packingSlipNumber) FROM packing_slip_material_receive ps WHERE ps.deletedAt IS NULL AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,              \n" +
                "			(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.deletedAt IS NULL AND ps.refPackingSlipDetId = p.id GROUP BY ps.refPackingSlipDetId) AS amount,              \n" +
                "			(SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.deletedAt IS NULL) refInvoiceLine,   \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "					ELSE   \n" +
                "						(SELECT `status`   \n" +
                "						FROM 	packing_slip_material_receive_det   \n" +
                "						WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId   \n" +
                "								AND packingSlipSerialNumber = p.packingSlipSerialNumber   \n" +
                "								AND isDeleted = 0)  \n" +
                "				END  \n" +
                "			) invoiceStatus,              \n" +
                "			fun_getUserNameByID(p.createdBy) createdByName,sc.isCustom AS isCustomSupplier                                                             \n" +
                "	FROM		packing_slip_material_receive_det p                                                \n" +
                "	LEFT JOIN 	component c ON p.partID = c.id AND c.deletedAt IS NULL                        \n" +
                "	LEFT JOIN	component sc ON p.refSupplierPartId = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL                            \n" +
                "	WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID                                                         \n" +
                "	AND 		p.deletedAt IS NULL;                                                            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;                          \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS                                                                  \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, psm.packagingID                                                          \n" +
                "	FROM		packing_slip_material_receive_det psm                                                        \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON psm.refPackingSlipMaterialRecID = ps.id  AND ps.supplierSONumber = (SELECT supplierSONumber FROM packing_slip_material_receive WHERE id = pPackingSlipID)                                                      \n" +
                "	WHERE		psm.partID IN (SELECT p.PartID FROM packingSlipResult p)                                                    \n" +
                "	AND			ps.receiptType = 'P'                                              \n" +
                "	AND			IFNULL(psm.isDeleted, 0) = 0                                                      \n" +
                "	GROUP BY 	ps.supplierSONumber, psm.partID, psm.packagingID;                                                      \n" +
                "  \n" +
                "	-- Set received qty detail                                                              \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q                                                                  \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty, r.pendingQty = (r.orderedQty - q.totalReceivedQty)                                                        \n" +
                "	WHERE 	r.partID = q.partID AND r.packagingID = q.packagingID;                                                          \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;                                                                  \n" +
                "	ELSE                                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                  \n" +
                "	END IF;	                                                                  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                  \n" +
                "		SET pWhereClause = '1=1' ;                                                                  \n" +
                "	END IF;	                                                          \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                                   \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                  \n" +
                "	ELSE	                                                                  \n" +
                "		SET rowNumWhere = '';                                                                  \n" +
                "	END IF;	                                                                  \n" +
                "  \n" +
                "	/* to get total count of rows */                                                                  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );                                                                  \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                  \n" +
                "	EXECUTE query1;                                                                  \n" +
                "	DEALLOCATE PREPARE query1;                                                                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                                                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                  \n" +
                "	EXECUTE query2;                                                                  \n" +
                "	DEALLOCATE PREPARE query2;                                                              \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2779,'2.00','V1','Sproc_RetrivePackingSlipMaterialDetList - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2779:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPackingSlipFormat` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingSlipFormat`(    \n" +
                ")  \n" +
                "BEGIN    \n" +
                " DECLARE pformat VARCHAR(50);    \n" +
                " SELECT `values` INTO pformat FROM systemconfigrations WHERE `key`='CustomerPackingSlipNumber' AND isdeleted=0;    \n" +
                " SELECT pformat AS pdateformat,`maxvalue` AS maxPackingID FROM identity WHERE `type`='CustomerPackingSlipID' AND isdeleted=0;    \n" +
                "  \n" +
                " UPDATE identity SET `maxvalue`=`maxvalue`+1 WHERE `type`='CustomerPackingSlipID' AND isdeleted=0;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2780,'2.00','V1',' Alter procedure Sproc_GetCustomerPackingSlipFormat-champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2780:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCurrentRackDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCurrentRackDetails`(                                              \n" +
                "	IN prackNumber VARCHAR(50)                                            \n" +
                "  \n" +
                ")  \n" +
                "BEGIN             \n" +
                "	DECLARE prackStatus VARCHAR(255);        \n" +
                "		DECLARE pRackID INT(11);          \n" +
                "		DECLARE pStatus INT(11);         \n" +
                "		DECLARE pcurWoOPID INT(11);        \n" +
                "		DECLARE pwoID INT(11);        \n" +
                "		DECLARE pwtrID INT(11);      \n" +
                "		DECLARE pwoName VARCHAR(50);      \n" +
                "		DECLARE pwoOperationName VARCHAR(100);      \n" +
                "		DECLARE  puserName VARCHAR(50);      \n" +
                "		DECLARE pidcode VARCHAR(100);        \n" +
                "		DECLARE partID INT;       \n" +
                "  \n" +
                "             SELECT rk.id,rk.opStatus,fun_getWorkorderNumberWithRevByID(wo.woID) woNumber,fun_getOperationNameByWOOPID(rk.woOPID),            \n" +
                "             (CASE WHEN (`rk`.`opStatus` = 1) THEN `fun_getUserNameByID`(`rk`.`updatedBy`) ELSE            \n" +
                "		(SELECT fun_getUserNameByID(wtr.createdBy) FROM workorder_trans_rack wtr WHERE wtr.deletedat IS NULL AND               \n" +
                "				wtr.rackID=rk.id ORDER BY wtr.id DESC LIMIT 1)END),              \n" +
                "				(SELECT wtr.id FROM workorder_trans_rack wtr WHERE wtr.deletedat IS NULL AND               \n" +
                "				wtr.rackID=rk.id AND wtr.woOPID=rk.woOPID ORDER BY wtr.id DESC LIMIT 1),          \n" +
                "				rk.woOPID ,          \n" +
                "				(SELECT GROUP_CONCAT(cs.fullName ,' ' , CASE WHEN wc.classIDs IS NULL THEN ''                                        \n" +
                "							ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,''))                         \n" +
                "							FROM standard_class WHERE classID = wc.classIDs) END                                        \n" +
                "							ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@')								                        \n" +
                "				   FROM `workorder_certification` wc                                          \n" +
                "					   JOIN certificate_standards cs ON  wc.certificateStandardID = cs.certificateStandardID                                          \n" +
                "				   WHERE wc.deletedAt IS NULL AND wc.woID = `wo`.`woID`) ,c.pidcode,fun_getRoHSIconByID(c.rohsstatusid),fun_getRoHSNameByID(c.rohsstatusid),          \n" +
                "				   (CASE WHEN (`rk`.`opStatus` = 1) THEN `fun_ConvertUTCDatetimeToDataKeyTimeZone`(`rk`.`updatedAt`) ELSE          \n" +
                "				   (SELECT `fun_ConvertUTCDatetimeToDataKeyTimeZone`(`wtr`.`createdAt`)           \n" +
                "					FROM `workorder_trans_rack` `wtr` WHERE wtr.deletedat IS NULL AND               \n" +
                "				wtr.rackID=rk.id AND wtr.woOPID=rk.woOPID ORDER BY wtr.id DESC LIMIT 1) END),c.id,rk.woID                   \n" +
                "				INTO pRackID,pStatus,pwoName,pwoOperationName,puserName,pwtrID,pcurWoOPID,@pwocerti,pidcode,@rohsicon,@prohsName,@scanTime,partID,pwoID              \n" +
                "				 FROM rackmst rk LEFT JOIN workorder wo ON wo.woid=rk.woid AND wo.deletedAt IS NULL          \n" +
                "				LEFT JOIN component c ON c.id=wo.partid AND c.deletedat IS NULL          \n" +
                "				  WHERE rk.`name`=pRackNumber AND rk.isdeleted=0 AND rk.isActive=1;             \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				 DROP TEMPORARY TABLE IF EXISTS temp_workorder_trans_rack_status_details;        \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS  temp_workorder_trans_rack_status_details AS        \n" +
                "				SELECT `status`,fun_getRackStatusbyID(`status`) statusName  FROM workorder_trans_rack_status_details WHERE woTransRackID=pwtrID;         \n" +
                "  \n" +
                "				SELECT GROUP_CONCAT(statusName) INTO prackStatus  FROM temp_workorder_trans_rack_status_details; 				        \n" +
                "  \n" +
                "				SELECT pRackID AS rackID,pStatus,pwoName,pwoOperationName,puserName,prackStatus,pcurWoOPID,@pwocerti pwocerti,          \n" +
                "				 pidcode,@rohsicon rohsicon,@prohsName prohsName,@scanTime scantime,partID,pwoID woID;            \n" +
                "  \n" +
                "				 -- get available operation detail only for rack completed          \n" +
                "  \n" +
                "	       IF(pStatus=3 AND (SELECT COUNT(1) FROM temp_workorder_trans_rack_status_details WHERE `status` NOT IN(4))>0)THEN          \n" +
                "  \n" +
                "			/*check current operation parameter have cluster */        		               \n" +
                "			SELECT a.isteamoperation,  a.isrework,  a.qtyControl,                     \n" +
                "				b.ClusterID,  b.isparellelOperation, a.isIssueQty,                      \n" +
                "				a.opNumber, a.isLoopOperation                   \n" +
                "				INTO                   \n" +
                "				@pisteamoperation ,@pisrework,@pqtyControl,                  \n" +
                "				@pclusterID,@pisparellelOperation,@pisIssueQty,                  \n" +
                "				@popNumber, @pisloopoperation                    \n" +
                "			FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                       \n" +
                "			a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID  AND   IFNULL(a.isdeleted,0) = 0                      \n" +
                "			WHERE  a.woid = pwoID   AND a.woOPID = pcurWoOPID  AND  IFNULL(a.isdeleted,0) = 0 ;                      \n" +
                "  \n" +
                "	/*check previous operation parameter have cluster */                      \n" +
                "			SELECT a.woOPID, a.opNumber, a.isteamoperation,                  \n" +
                "					a.isrework,a.qtyControl,b.ClusterID,                   \n" +
                "				b.isparellelOperation, a.isLoopOperation                       \n" +
                "			INTO                   \n" +
                "				@prevwoOPID, @prevopnumber,@previsteamoperation,                  \n" +
                "				@prevpisrework, @prevpqtyControl,@prevpclusterID,                  \n" +
                "				@prevpisparellelOperation, @prevpisloopoperation                      \n" +
                "				FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                       \n" +
                "				a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID                      \n" +
                "			WHERE  a.woid = pwoID AND  IFNULL(a.isdeleted,0) = 0                      \n" +
                "			AND  a.opNumber  = (SELECT MAX(opNumber)                      \n" +
                "			    FROM workorder_operation b                       \n" +
                "			    WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0                      \n" +
                "				 AND b.qtyControl = 1 AND b.opNumber < @popNumber);                       \n" +
                "  \n" +
                "	/*check next operation Pramtere have loop operation */                      \n" +
                "			SELECT a.woOPID, a.opNumber, a.isteamoperation,                  \n" +
                "			a.isrework,a.qtyControl,b.ClusterID,                   \n" +
                "			b.isparellelOperation, a.isLoopOperation                       \n" +
                "		INTO                   \n" +
                "			@nextwoOPID, @nextopnumber,@nextisteamoperation,                  \n" +
                "			@nextpisrework, @nextpqtyControl,@nextpclusterID,                  \n" +
                "			@nextpisparellelOperation, @nextpisloopoperation                      \n" +
                "			FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                       \n" +
                "			a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID                      \n" +
                "			WHERE  a.woid = pwoID  AND  IFNULL(a.isdeleted,0) = 0                      \n" +
                "			AND  a.opNumber  = (SELECT MIN(opNumber)                      \n" +
                "			    FROM workorder_operation b                       \n" +
                "			    WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0                      \n" +
                "				 AND b.qtyControl = 1 AND b.opNumber > @popNumber);          \n" +
                "				 IF(IFNULL(@pisrework,0)=0 AND IFNULL(@pisparellelOperation,0)=0)THEN          \n" +
                "					IF(IFNULL(@nextpisparellelOperation,0)=1)THEN          \n" +
                "						DROP TEMPORARY TABLE IF EXISTS tempRacktbl;              \n" +
                "						CREATE TEMPORARY TABLE IF NOT EXISTS tempRacktbl              \n" +
                "						SELECT MAX(wtr.id) wtrID FROM workorder_trans_rack wtr               \n" +
                "							WHERE wtr.woopid IN (SELECT woc.woopid FROM workorder_operation_cluster woc                 \n" +
                "							WHERE woc.clusterID=@nextpclusterID AND woc.deletedAt IS NULL) AND wtr.rackid=pRackID;          \n" +
                "						SELECT  GROUP_CONCAT(wtr.woOPID) INTO @currwoopIds FROM workorder_trans_rack wtr WHERE wtr.id IN (SELECT wtrID FROM tempRacktbl)          \n" +
                "						AND EXISTS(SELECT 1 FROM workorder_trans_rack_status_details wtrs WHERE wtrs.woTransRackID=wtr.id AND wtrs.status=0);   	          \n" +
                "						SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid IN (          \n" +
                "						SELECT woc.woOPID FROM workorder_operation_cluster woc WHERE woc.clusterID=@nextpclusterID AND woc.deletedAt IS NULL)AND          \n" +
                "						woOpid NOT IN (IFNULL(@currwoopIds,0));          \n" +
                "					END IF;          \n" +
                "  \n" +
                "					IF(IFNULL(@nextpisrework,0)=1)THEN          \n" +
                "						IF(SELECT COUNT(1) FROM temp_workorder_trans_rack_status_details WHERE `status`  IN(3,5))>0 THEN          \n" +
                "							SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid=@nextwoOPID;          \n" +
                "						ELSE          \n" +
                "							SELECT a.woOPID, a.opNumber,a.qtyControl,b.ClusterID,                    \n" +
                "							b.isparellelOperation, a.isLoopOperation                \n" +
                "							INTO @prlwoOPID, @prlopnumber,                    \n" +
                "							@prlpqtyControl,@prlpclusterID,                    \n" +
                "							@prlpisparellelOperation, @prlpisloopoperation                        \n" +
                "							FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                         \n" +
                "							a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID                        \n" +
                "							WHERE  a.woid = pwoID  AND  IFNULL(a.isdeleted,0) = 0                        \n" +
                "							AND  a.opNumber  = (SELECT MAX(opNumber)                        \n" +
                "							FROM workorder_operation b                         \n" +
                "							WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0                        \n" +
                "							AND b.qtyControl = 1 AND b.opNumber > @nextopnumber);           \n" +
                "  \n" +
                "								IF(IFNULL(@prlpisparellelOperation,0)=1)THEN          \n" +
                "  \n" +
                "									DROP TEMPORARY TABLE IF EXISTS tempRacktbl;              \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS tempRacktbl              \n" +
                "								SELECT MAX(wtr.id) wtrID FROM workorder_trans_rack wtr               \n" +
                "							WHERE wtr.woopid IN (SELECT woc.woopid FROM workorder_operation_cluster woc                 \n" +
                "							WHERE woc.clusterID=@prlpclusterID AND woc.deletedAt IS NULL) AND wtr.rackid=pRackID;          \n" +
                "  \n" +
                "							SELECT  GROUP_CONCAT(wtr.woOPID) INTO @currwoopIds FROM workorder_trans_rack wtr WHERE wtr.id IN (SELECT wtrID FROM tempRacktbl)  AND         \n" +
                "							EXISTS(SELECT 1 FROM workorder_trans_rack_status_details wtrs WHERE wtrs.woTransRackID=wtr.id AND wtrs.status=0);          \n" +
                "  \n" +
                "							SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid IN (          \n" +
                "							SELECT woc.woOPID FROM workorder_operation_cluster woc WHERE woc.clusterID=@prlpclusterID AND woc.deletedAt IS NULL)AND          \n" +
                "							woOpid NOT IN (IFNULL(@currwoopIds,0));          \n" +
                "								ELSE          \n" +
                "								SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid=@prlwoOPID;          \n" +
                "								END IF;          \n" +
                "  \n" +
                "						END IF;          \n" +
                "					END IF;          \n" +
                "					IF(IFNULL(@nextpisparellelOperation,0)=0 AND IFNULL(@nextpisrework,0)=0)THEN          \n" +
                "					SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid=@nextwoOPID;          \n" +
                "					END IF;          \n" +
                "				 END IF;          \n" +
                "				 IF(IFNULL(@pisrework,0)=1 AND IFNULL(@pisloopoperation,0)=1)THEN          \n" +
                "					SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid=@prevwoOPID;          \n" +
                "				 END IF;          \n" +
                "				 IF(IFNULL(@pisrework,0)=1 AND IFNULL(@pisloopoperation,0)=0)THEN          \n" +
                "					SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE woOpid=@nextwoOPID;          \n" +
                "				 END IF;          \n" +
                "				 IF(IFNULL(@pisparellelOperation,0)=1)THEN          \n" +
                "  \n" +
                "				 SELECT woc.woopid INTO @usedwoopid FROM workorder_trans_rack woc WHERE woc.rackid=pRackID ORDER BY woc.id DESC LIMIT 1;          \n" +
                "						SELECT MAX(wo.opNumber) INTO @parallelOPNumber FROM workorder_operation_cluster woc LEFT JOIN workorder_operation wo ON wo.woOPID=woc.woOPID AND wo.deletedAt IS NULL                  \n" +
                "					WHERE woc.clusterID = @pclusterID AND woc.deletedAt IS NULL;          \n" +
                "  \n" +
                "						SELECT a.woOPID, a.opNumber, a.isteamoperation,                  \n" +
                "						a.isrework,a.qtyControl,b.ClusterID,                   \n" +
                "						b.isparellelOperation, a.isLoopOperation                       \n" +
                "						INTO   	                \n" +
                "					@nextwoOPID, @nextopnumber,@nextisteamoperation,                  \n" +
                "					@nextpisrework, @nextpqtyControl,@nextpclusterID,                  \n" +
                "					@nextpisparellelOperation, @nextpisloopoperation                      \n" +
                "						FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                       \n" +
                "					a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID                      \n" +
                "					WHERE  a.woid = pwoID  AND  IFNULL(a.isdeleted,0) = 0                      \n" +
                "					AND  a.opNumber  = (SELECT MIN(opNumber)                      \n" +
                "					FROM workorder_operation b                       \n" +
                "					WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0                      \n" +
                "						AND b.qtyControl = 1 AND b.opNumber > @parallelOPNumber);          \n" +
                "  \n" +
                "						IF(IFNULL(@nextpisrework,0)=1)  THEN          \n" +
                "							IF(SELECT COUNT(1) FROM temp_workorder_trans_rack_status_details WHERE `status`  IN(3,5))>0 THEN          \n" +
                "							SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE           \n" +
                "							(woOpid=@nextwoOPID OR (woOPID IN (          \n" +
                "							SELECT woc.woOPID FROM workorder_operation_cluster woc WHERE woc.clusterID=@pclusterID AND woc.deletedAt IS NULL)AND          \n" +
                "							 woopid NOT IN (@usedwoopid)AND          \n" +
                "							woOpid NOT IN (IFNULL(pcurWoOPID,0))));          \n" +
                "						      ELSE          \n" +
                "							SELECT a.woOPID, a.opNumber,a.qtyControl,b.ClusterID,                    \n" +
                "							b.isparellelOperation, a.isLoopOperation                \n" +
                "							INTO @prlwoOPID, @prlopnumber,                    \n" +
                "							@prlpqtyControl,@prlpclusterID,                    \n" +
                "							@prlpisparellelOperation, @prlpisloopoperation                        \n" +
                "							FROM workorder_operation a  LEFT JOIN vu_workorder_operation_cluster b ON                         \n" +
                "							a.woOPID  = b.woOPID AND a.woID = b.woid AND a.opID = b.opID                        \n" +
                "							WHERE  a.woid = pwoID  AND  IFNULL(a.isdeleted,0) = 0                        \n" +
                "							AND  a.opNumber  = (SELECT MIN(opNumber)                        \n" +
                "							FROM workorder_operation b                         \n" +
                "							WHERE b.woid = pwoID AND  IFNULL(b.deletedAt,0)= 0                        \n" +
                "							AND b.qtyControl = 1 AND b.opNumber > @nextopnumber);           \n" +
                "  \n" +
                "							SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE           \n" +
                "							(woOpid=@prlwoOPID OR (woOPID IN (          \n" +
                "							SELECT woc.woOPID FROM workorder_operation_cluster woc WHERE woc.clusterID=@pclusterID AND woc.deletedAt IS NULL)          \n" +
                "							AND          \n" +
                "						     woopid NOT IN (@usedwoopid)AND          \n" +
                "							woOpid NOT IN (IFNULL(pcurWoOPID,0))));          \n" +
                "						    END IF;          \n" +
                "						END IF;	          \n" +
                "						IF(IFNULL(@nextpisrework,0)=0)THEN          \n" +
                "						SELECT fun_getOperationNameByWOOPID(woOPID) woopNumber,fun_getWorkorderNumberWithRevByID(woID) woNumber,woOPID  FROM workorder_operation WHERE           \n" +
                "							(woOpid=@nextwoOPID OR (woOPID IN (          \n" +
                "							SELECT woc.woOPID FROM workorder_operation_cluster woc WHERE woc.clusterID=@pclusterID AND woc.deletedAt IS NULL)AND          \n" +
                "							woOpid NOT IN (IFNULL(pcurWoOPID,0))          \n" +
                "							AND  woopid NOT IN (@usedwoopid)));          \n" +
                "						END IF;          \n" +
                "  \n" +
                "				 END IF;          \n" +
                "  \n" +
                "	       END IF;          \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesShippingDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(        \n" +
                "	IN salesorderID INT ,      \n" +
                "	IN packingSlipID INT       \n" +
                "    )  \n" +
                "BEGIN         \n" +
                " SELECT ss.shippingID,ss.sDetId,IFNULL(sd.custPOLineNumber,1) custPOLineNumber,IFNULL(ss.releaseNumber,1) releaseNumber,ss.qty,ss.shippingDate,      \n" +
                " ss.releaseNotes,sd.tentativeBuild,sd.qty AS poQty,sd.partID,sd.price,sd.lineID,        \n" +
                " c.mfgpn,c.mfgpndescription,c.pidcode,fun_getUnitNameByID(c.uom) unitMeaser,c.nickName,     \n" +
                " ss.shippingMethodID,ss.shippingAddressID,     \n" +
                " CONCAT(c.pidcode,',',IFNULL(sd.custPOLineNumber,1),',',IFNULL(ss.releaseNumber,1),',',ss.qty,',',DATE_FORMAT(ss.shippingDate, '%m-%d-%y')) shipping,        \n" +
                " (SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd WHERE refsalesorderdetid=ss.sDetId AND cpd.isdeleted=0) shippedQty        \n" +
                " FROM salesshippingmst ss LEFT JOIN salesorderdet sd ON ss.sDetID=sd.id        \n" +
                "LEFT JOIN component c ON c.id=sd.partid        \n" +
                "WHERE sd.refsalesOrderID=salesorderID AND ss.isdeleted=0 AND ss.sdetid NOT IN       \n" +
                "(SELECT cpd.refsalesorderdetid FROM customer_packingslip_det cpd WHERE cpd.remainingQty=0 AND cpd.refCustPackingSlipID!=packingSlipID  AND cpd.isdeleted=0);        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2781,'2.00','V1',' Alter procedure Sproc_GetCurrentRackDetails-champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2781:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateQuoteIsSubjetToFollowingDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateQuoteIsSubjetToFollowingDetails`(                    \n" +
                "	IN prfqAssyID INT(11),                                \n" +
                "    IN pUserID INT(11)                                \n" +
                "    )  \n" +
                "BEGIN             \n" +
                "  \n" +
                "DECLARE refSubmittedQuoteID INT(11);        \n" +
                "  \n" +
                "			SELECT MAX(id) INTO refSubmittedQuoteID FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID;                           \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS leveldata;                    \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS leveldata AS                    \n" +
                "			WITH RECURSIVE cte AS                      \n" +
                "			(                    \n" +
                "				(                    \n" +
                "					SELECT rlc.id, rlc.rfqLineItemsAlternatePartID, rlc.rfqLineItemsID,                  \n" +
                "					rlc.`comment`, rlc.requiredToShowOnQuoteSummary, rlc.errorCode, rlc.isCustomerApproved,                  \n" +
                "					comp.PIDCode,comp.mfgPN AS AssyPN, CASE WHEN rl.partID IS NULL THEN rla.mfgPNID ELSE rl.partId END AS partID, rl.refDesig, IFNULL(rla.mfgPNID, rl.partID) AS mfgPNID,IFNULL(rlc.mfgPN,rla.mfgPN) AS alternatepart,                  \n" +
                "					IFNULL(rlc.mfgCode,rla.mfgCode) AS alternatepartmfg, rla.id AS alternateID, 1 AS LEVEL,                   \n" +
                "					com.category, rl.lineID,rl.custPN,rl.customerRev, IFNULL(com.isCustom, comp.isCustom) AS isCustom                 \n" +
                "					FROM rfq_lineitems_alternatepart rla                  \n" +
                "					LEFT JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0                  \n" +
                "					JOIN rfq_lineitems_approval_comment rlc ON rlc.rfqLineItemsAlternatePartID = rla.id OR rlc.rfqLineItemsID = rl.id                  \n" +
                "					LEFT JOIN component com ON com.id = rla.mfgPNID                    \n" +
                "					LEFT JOIN component comp ON comp.id = rl.partID OR comp.id =  rla.partID                  \n" +
                "					WHERE rl.partId = ( SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID ) OR rla.partID = ( SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID )                  \n" +
                "					AND rla.isDeleted = 0                  \n" +
                "				)                    \n" +
                "				UNION ALL                      \n" +
                "				(                    \n" +
                "					SELECT rlc.id, rlc.rfqLineItemsAlternatePartID, rlc.rfqLineItemsID,                  \n" +
                "					rlc.`comment`, rlc.requiredToShowOnQuoteSummary, rlc.errorCode, rlc.isCustomerApproved,                 \n" +
                "					comp.PIDCode,comp.mfgPN AS AssyPN, CASE WHEN rl.partID IS NULL THEN rla.mfgPNID ELSE rl.partId END AS partID, rl.refDesig, IFNULL(rla.mfgPNID, rl.partID) AS mfgPNID, IFNULL(rlc.mfgPN,rla.mfgPN) AS alternatepart,                  \n" +
                "					IFNULL(rlc.mfgCode,rla.mfgCode) AS alternatepartmfg, rla.id AS alternateID, 1 AS LEVEL,                   \n" +
                "					com.category, rl.lineID,rl.custPN,rl.customerRev, IFNULL(com.isCustom, comp.isCustom) AS isCustom                  \n" +
                "					FROM rfq_lineitems_alternatepart rla                  \n" +
                "					LEFT JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0                  \n" +
                "					JOIN rfq_lineitems_approval_comment rlc ON rlc.rfqLineItemsAlternatePartID = rla.id OR rlc.rfqLineItemsID = rl.id                  \n" +
                "					LEFT JOIN component com ON com.id = rla.mfgPNID                    \n" +
                "					LEFT JOIN component comp ON comp.id = rl.partID OR comp.id =  rla.partID                  \n" +
                "					RIGHT JOIN cte cte ON cte.category = 3 AND rl.partID = cte.mfgPNID                   \n" +
                "					WHERE rla.isDeleted = 0                  \n" +
                "				)                    \n" +
                "			)                    \n" +
                "			SELECT cte.* FROM cte                    \n" +
                "            ORDER BY LEVEL;              \n" +
                "    # insert Excess material details        \n" +
                "  \n" +
                "		INSERT INTO `rfq_quote_issue_history`        \n" +
                "		(`refSubmittedQuoteID`,`rfqAssyID`,`issueType`,`lineID`,`refDesg`,`mfrCode`,`mfrPN`,`CPN`,`CPNRev`,`BOMIssue`,`createdAt`,`updatedAt`,`createdBy`,`updatedBy`)        \n" +
                "		SELECT refSubmittedQuoteID,a.rfqAssyID AS rfqAssyID, \"ExcessMaterial\" AS `issueType`, TRIM(a.lineID) + 0 AS lineID, fun_ConvertRefdesgString(a.refDesig) AS refDesg,        \n" +
                "		fun_getMfgCodeByPartID(a.componentID) AS mfrCode, fun_getMFGPNByID(a.componentID) AS mfrPN,a.custPN AS CPN, a.customerRev AS CPNRev,        \n" +
                "		CONCAT('UOM: ',a.unitName, ' : Requested QTY: ', requestQty, ' : QPA: ', TRIM(qpa)+0 ,        \n" +
                "		(CASE WHEN connecterTypeID = -2 THEN CONCAT(' : Requested Pin:',TRIM(reqQty*numOfPosition)+0) ELSE '' END),' : Quoted QTY: ', a.quoteQty,         \n" +
                "		' : Excess QTY: ', a.excessqty, ' @ $', TRIM(a.unitPrice)+0,' / ',(CASE WHEN connecterTypeID = -2 THEN 'Pin' ELSE a.unitName END),        \n" +
                "		' : Selected part contains excess material.') AS BOMIssue,        \n" +
                "        fun_DatetimetoUTCDateTime() AS `createdAt`,fun_DatetimetoUTCDateTime() AS `updatedAt`,pUserID `createdBy`, pUserID `updatedBy`        \n" +
                "		FROM                    \n" +
                "		(                    \n" +
                "			SELECT rcl.id, rclq.qtyID, rclq.unitPrice, rcl.lineID, rcl.rfqAssyID, rcl.uomID, rcl.refDesig, raq.requestQty, rcl.qpa,        \n" +
                "			TRIM(raq.requestQty * rcl.qpa)+0 reqQty, rclq.quoteQty, rclq.componentID,fun_getUnitNameByID(rcl.uomID) AS unitName,                       \n" +
                "			(CASE WHEN com.connecterTypeID = -2 THEN         \n" +
                "			TRIM(rclq.quoteQty - (raq.requestQty * rcl.qpa * rcl.numOfPosition))+0         \n" +
                "			ELSE TRIM(rclq.quoteQty - (raq.requestQty * rcl.qpa))+0 END) excessqty, rl.custPN,rl.customerRev, com.connecterTypeID, rcl.numOfPosition                \n" +
                "			FROM rfq_consolidated_mfgpn_lineitem rcl                    \n" +
                "			LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID                    \n" +
                "			LEFT JOIN rfq_assy_quantity raq ON rclq.qtyID = raq.id                    \n" +
                "			LEFT JOIN component com ON com.id = rclq.componentID                    \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID          \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.finalprice IS NOT NULL AND rcl.isPurchase = 1                    \n" +
                "			GROUP BY rcl.id , rclq.qtyID                    \n" +
                "			HAVING excessqty > 0                    \n" +
                "		) a                    \n" +
                "		ORDER BY requestQty, a.lineID ;         \n" +
                "  \n" +
                "# insert Customer Consigned Detail            \n" +
                "		INSERT INTO `rfq_quote_issue_history`        \n" +
                "        (`refSubmittedQuoteID`,`rfqAssyID`,`issueType`,`lineID`,`refDesg`,`CPN`,`CPNRev`,`mfrCode`,`mfrPN`,`BOMIssue`,`createdAt`,`updatedAt`,`createdBy`,`updatedBy`)        \n" +
                "		SELECT refSubmittedQuoteID,rcl.rfqAssyID AS rfqAssyID, \"CustomerConsigned\" AS `issueType`,TRIM(rcl.lineID) + 0 AS lineID , fun_ConvertRefdesgString(rcl.refDesig) AS refDesg, rl.custPN AS CPN, rl.customerRev AS CPNRev,        \n" +
                "		fun_getMfgCodeByPartID(rcla.mfgPNID) AS mfrCode, fun_getMFGPNByID(rcla.mfgPNID) AS mfrPN,        \n" +
                "		'Customer Consigned Items' AS BOMIssue,        \n" +
                "        fun_DatetimetoUTCDateTime() AS `createdAt`,fun_DatetimetoUTCDateTime() AS `updatedAt`,pUserID `createdBy`, pUserID `updatedBy`        \n" +
                "		FROM rfq_consolidated_mfgpn_lineitem rcl        \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON rcl.id = rcla.consolidateID        \n" +
                "		LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID         \n" +
                "		WHERE rcl.rfqAssyID = prfqAssyID AND rcl.isDeleted = 0 AND rcl.isPurchase = 0        \n" +
                "		GROUP BY rcl.id        \n" +
                "		ORDER BY rcl.lineID;        \n" +
                "  \n" +
                "    # get Unquoted Line item Details        \n" +
                "		INSERT INTO `rfq_quote_issue_history`        \n" +
                "        (`refSubmittedQuoteID`,`rfqAssyID`,`issueType`,`lineID`,`refDesg`,`CPN`,`CPNRev`,`BOMIssue`,`createdAt`,`updatedAt`,`createdBy`,`updatedBy`)        \n" +
                "		SELECT refSubmittedQuoteID,a.rfqAssyID AS rfqAssyID, \"UnquotedLineItem\" AS `issueType`, TRIM(a.lineID) + 0 AS lineID,fun_ConvertRefdesgString(a.refDesig) AS refDesg, a.custPN AS CPN, a.customerRev AS CPNRev,         \n" +
                "		CONCAT(GROUP_CONCAT(CONCAT(fun_getMfgCodeByPartID(rcla.mfgPNID),' : ', fun_getMFGPNByID(rcla.mfgPNID)) SEPARATOR ' | '), ' : Requested QTY: ', a.requestQty, '  : Unquoted quantity.') AS BOMIssue,        \n" +
                "        fun_DatetimetoUTCDateTime() AS `createdAt`,fun_DatetimetoUTCDateTime() AS `updatedAt`,pUserID `createdBy`, pUserID `updatedBy`        \n" +
                "		FROM                    \n" +
                "		(                    \n" +
                "			SELECT rcl.id, rcl.lineID, rcl.rfqAssyID, rcl.refDesig, GROUP_CONCAT(raq.requestQty) requestQty ,        \n" +
                "			rl.custPN,rl.customerRev                    \n" +
                "			FROM rfq_consolidated_mfgpn_lineitem rcl                    \n" +
                "			LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID                    \n" +
                "			LEFT JOIN rfq_assy_quantity raq ON rclq.qtyID = raq.id                    \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID                    \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.finalprice IS NULL AND rcl.isPurchase = 1                    \n" +
                "			GROUP BY rcl.id                    \n" +
                "		) a                     \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON a.id = rcla.consolidateID                    \n" +
                "		GROUP BY a.id                    \n" +
                "		ORDER BY a.lineID;        \n" +
                "  \n" +
                "	# get Unquoted Labor Detail        \n" +
                "		INSERT INTO `rfq_quote_issue_history`        \n" +
                "        (`refSubmittedQuoteID`,`rfqAssyID`,`issueType`,`PIDCode`,`BOMIssue`,`createdAt`,`updatedAt`,`createdBy`,`updatedBy`)        \n" +
                "		SELECT refSubmittedQuoteID,a.rfqAssyID AS rfqAssyID, \"UnquotedLabor\" AS `issueType`, assyName AS `PIDCode`,        \n" +
                "        CONCAT(' Mounting Type: ', mountingType,' QPA: ',TRIM(totalQPA)+0,' Quantity: ',  GROUP_CONCAT(TRIM(assyQPA*quantity)+0),' ', \"Labor does not considered.\") BOMIssue,        \n" +
                "        fun_DatetimetoUTCDateTime() AS `createdAt`,fun_DatetimetoUTCDateTime() AS `updatedAt`,pUserID `createdBy`, pUserID `updatedBy`                   \n" +
                "		FROM (                    \n" +
                "				SELECT ramd.rfqAssyID,fun_getAssyNameByID(ramd.partID) assyName, fun_getMountingTypeNameByID(ramd.mountingTypeID) mountingType,                     \n" +
                "				(SELECT SUM(perBuildQty) FROM rfq_labor_assy_qpa_detail WHERE subAssyID = ramd.partID AND rfqAssyID =  ramd.rfqAssyID AND isDeleted = 0) assyQPA,                     \n" +
                "				(SELECT requestQty FROM rfq_assy_quantity WHERE id = raql.rfqAssyQtyID) quantity, ramd.totalQPA, ramd.lineCount, raql.perAssyPrice,                    \n" +
                "				 raql.price, (SELECT MAX(`level`) FROM rfq_labor_assy_qpa_detail WHERE subAssyID = ramd.partID AND isDeleted = 0 AND rfqAssyID = ramd.rfqAssyID)assyLevel                     \n" +
                "				 FROM rfq_assy_qtywise_bom_laborcosting_detail raql                    \n" +
                "				JOIN rfq_assy_labor_bom_mountingtype_qpa_detail ramd ON ramd.id = raql.rfqAssyBOMMountingID AND ramd.isDeleted = 0                    \n" +
                "				WHERE raql.isDeleted  = 0 AND ramd.rfqAssyID = prfqAssyID AND ramd.mountingTypeID IS NOT NULL AND raql.price = 0                    \n" +
                "		)a                    \n" +
                "		GROUP BY a.assyName, a.mountingType                    \n" +
                "		ORDER BY assyLevel ASC;            \n" +
                "  \n" +
                "    # get Low Stock Alert details        \n" +
                "		INSERT INTO `rfq_quote_issue_history`        \n" +
                "       (`refSubmittedQuoteID`,`rfqAssyID`,`issueType`,`lineID`,`refDesg`,`CPN`,`CPNRev`,`mfrCode`,`mfrPN`,`BOMIssue`,`createdAt`,`updatedAt`,`createdBy`,`updatedBy`,`componentId`,`isCustom`)        \n" +
                "		SELECT refSubmittedQuoteID,a.rfqAssyID AS rfqAssyID, \"LowStockAlert\" AS `issueType`, TRIM(a.lineID) + 0 AS lineID ,        \n" +
                "        a.refDesig AS refDesg, a.custPN AS CPN, a.customerRev AS CPNRev,fun_getMfgCodeByPartID(a.componentID) AS mfrCode,         \n" +
                "        fun_getMFGPNByID(a.componentID) AS mfrPN,        \n" +
                "        CONCAT('Requested QTY: ', reqQty, ' : Supplier Stock: ', TRIM(a.grossStock)+0, '  : Supplier does not having sufficient stock for selected part.') AS BOMIssue,        \n" +
                "        fun_DatetimetoUTCDateTime() AS `createdAt`,fun_DatetimetoUTCDateTime() AS `updatedAt`,pUserID `createdBy`, pUserID `updatedBy`, a.componentID, a.isCustom       \n" +
                "		FROM        \n" +
                "		(        \n" +
                "			SELECT rcl.id, rclq.qtyID, rcl.lineID, rcl.refDesig, rcl.rfqAssyID, raq.requestQty, rcl.qpa, rclq.quoteQty,        \n" +
                "			TRIM(raq.requestQty * rcl.qpa)+0 reqQty, ifnull(rclq.grossStock,0) grossStock, rclq.currentStock,rl.custPN,rl.customerRev,rclq.componentID, c.isCustom    \n" +
                "			FROM rfq_consolidated_mfgpn_lineitem rcl        \n" +
                "			LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID        \n" +
                "			LEFT JOIN rfq_assy_quantity raq ON rclq.qtyID = raq.id        \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID    \n" +
                "			LEFT JOIN component c ON c.id = rclq.componentID           \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.finalprice IS NOT NULL AND rcl.isPurchase = 1        \n" +
                "			GROUP BY rcl.id , rclq.qtyID        \n" +
                "			HAVING reqQty > grossStock        \n" +
                "		) a        \n" +
                "		ORDER BY a.lineID;        \n" +
                "  \n" +
                "	# Get Long Lead Time Parts Detail        \n" +
                "		INSERT INTO `rfq_quote_issue_history`        \n" +
                "       (`refSubmittedQuoteID`,`rfqAssyID`,`issueType`,`lineID`,`refDesg`,`CPN`,`CPNRev`,`mfrCode`,`mfrPN`,`BOMIssue`,`createdAt`,`updatedAt`,`createdBy`,`updatedBy`,`componentId`,`isCustom`)        \n" +
                "		SELECT refSubmittedQuoteID, a.rfqAssyID AS rfqAssyID, \"LongLeadTime\" AS `issueType`, TRIM(a.lineID) + 0 AS lineID, a.refDesig AS refDesg,        \n" +
                "        a.custPN AS CPN, a.customerRev AS CPNRev,fun_getMfgCodeByPartID(a.componentID) AS mfrCode, fun_getMFGPNByID(a.componentID) AS mfrPN,        \n" +
                "		CONCAT('Requested QTY: ', reqQty, ' : Supplier Stock: ', TRIM(a.grossStock)+0, ' : Lead time: ', a.leadTime, ' week          \n" +
                "		: Lead time is high for selected part.') AS BOMIssue,        \n" +
                "        fun_DatetimetoUTCDateTime() AS `createdAt`,fun_DatetimetoUTCDateTime() AS `updatedAt`,pUserID `createdBy`, pUserID `updatedBy`, a.componentID, a.isCustom           \n" +
                "		FROM                    \n" +
                "		(                    \n" +
                "			SELECT rcl.id, rclq.qtyID, rcl.lineID, rcl.refDesig, rcl.rfqAssyID, raq.requestQty, rcl.qpa, rclq.quoteQty,rclq.componentID,  c.isCustom,       \n" +
                "			TRIM(raq.requestQty * rcl.qpa)+0 reqQty, ifnull(grossStock,0) grossStock, IFNULL(rclq.leadTime,0)leadTime,rl.custPN,rl.customerRev        \n" +
                "			FROM rfq_consolidated_mfgpn_lineitem rcl        \n" +
                "			LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID        \n" +
                "			LEFT JOIN rfq_assy_quantity raq ON rclq.qtyID = raq.id        \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID      \n" +
                "			LEFT JOIN component c ON c.id = rclq.componentID       \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.finalprice IS NOT NULL AND rcl.isPurchase = 1        \n" +
                "			GROUP BY rcl.id , rclq.qtyID        \n" +
                "			HAVING grossStock < reqQty        \n" +
                "		) a        \n" +
                "		ORDER BY a.lineID;        \n" +
                "  \n" +
                "	# get Obsolete Part Detail        \n" +
                "		INSERT INTO `rfq_quote_issue_history`        \n" +
                "        (`refSubmittedQuoteID`,`rfqAssyID`,`issueType`,`lineID`,`refDesg`,`CPN`,`CPNRev`,`mfrCode`,`mfrPN`,`BOMIssue`,`createdAt`,`updatedAt`,`createdBy`,`updatedBy`)        \n" +
                "		SELECT refSubmittedQuoteID, rcl.rfqAssyID AS rfqAssyID, \"ObsoletePart\" AS `issueType`, TRIM(rcl.lineID) + 0 AS lineID , rcl.refDesig AS refDesg,        \n" +
                "        rl.custPN AS CPN, rl.customerRev AS CPNRev,fun_getMfgCodeByPartID(rcla.mfgPNID) AS mfrCode, fun_getMFGPNByID(rcla.mfgPNID) AS mfrPN,        \n" +
                "        CONCAT('Part is Obsoleted.') AS BOMIssue,        \n" +
                "        fun_DatetimetoUTCDateTime() AS `createdAt`,fun_DatetimetoUTCDateTime() AS `updatedAt`,pUserID `createdBy`,pUserID `updatedBy`        \n" +
                "		FROM rfq_consolidated_mfgpn_lineitem rcl        \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON rcl.id = rcla.consolidateID        \n" +
                "		JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID AND rclq.componentID = rcla.mfgPNID        \n" +
                "		JOIN component com ON com.id = rcla.mfgPNID AND partstatus = (SELECT id FROM component_partstatusmst WHERE `name` = 'Obsolete')        \n" +
                "		LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID        \n" +
                "		WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0        \n" +
                "		GROUP BY rcl.id        \n" +
                "		ORDER BY rcl.lineID;        \n" +
                "    # Get Part LOA Details        \n" +
                "		INSERT INTO `rfq_quote_issue_history`        \n" +
                "        (`refSubmittedQuoteID`,`rfqAssyID`,`issueType`,`lineID`,`refDesg`,`CPN`,`CPNRev`,`mfrCode`,`mfrPN`,`BOMIssue`,`createdAt`,`updatedAt`,`createdBy`,`updatedBy`)        \n" +
                "		SELECT refSubmittedQuoteID, rcl.rfqAssyID AS rfqAssyID, \"PartLOA\" AS `issueType`, TRIM(rcl.lineID) + 0 AS lineID ,rcl.refDesig AS refDesg,        \n" +
                "        rl.custPN AS CPN, rl.customerRev AS CPNRev, fun_getMfgCodeByPartID(rclq.componentID) AS mfrCode, fun_getMFGPNByID(rclq.componentID) AS mfrPN,        \n" +
                "        CONCAT(CONCAT('LOA Price: $',CAST(rclq.LOAprice AS DECIMAL(10,5))),' : LOA Price given for part.') AS BOMIssue,        \n" +
                "        fun_DatetimetoUTCDateTime() AS `createdAt`,fun_DatetimetoUTCDateTime() AS `updatedAt`,pUserID `createdBy`, pUserID `updatedBy`        \n" +
                "		FROM rfq_consolidated_mfgpn_lineitem rcl                    \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON rcl.id = rcla.consolidateID                    \n" +
                "		JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID                    \n" +
                "		LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID                    \n" +
                "		WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.LOAprice IS NOT NULL                    \n" +
                "		GROUP BY rcl.id,rclq.componentID                    \n" +
                "		ORDER BY rcl.lineID;         \n" +
                "  \n" +
                "	# Get BOM Issue detail        \n" +
                "		INSERT INTO `rfq_quote_issue_history`        \n" +
                "        (`refSubmittedQuoteID`,`rfqAssyID`,`issueType`,`PIDCode`,`lineID`,`refDesg`,`CPN`,`CPNRev`,`mfrCode`,`mfrPN`,`BOMIssue`,`createdAt`,`updatedAt`,`createdBy`,`updatedBy`, `isCustomerApproved`)        \n" +
                "		SELECT refSubmittedQuoteID, prfqAssyID AS rfqAssyID, \"BOMIssue\" AS `issueType`,AssyPN AS PIDCode,TRIM(lineID)+0 AS lineID, refDesig AS refDesg,        \n" +
                "        custPN AS CPN, customerRev AS CPNRev, alternatepartmfg AS mfrCode, alternatepart AS mfrPN,        \n" +
                "        CONCAT(`comment`) AS BOMIssue,        \n" +
                "        fun_DatetimetoUTCDateTime() AS `createdAt`,fun_DatetimetoUTCDateTime() AS `updatedAt`,pUserID `createdBy`, pUserID `updatedBy`, isCustomerApproved AS isCustomerApproved      \n" +
                "		FROM leveldata ld         \n" +
                "		WHERE requiredToShowOnQuoteSummary = 1        \n" +
                "		ORDER BY LEVEL , lineID;        \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItems`(          \n" +
                "	IN ppageIndex INT(11),          \n" +
                "	IN precordPerPage INT(11),          \n" +
                "	IN pOrderBy VARCHAR(255),          \n" +
                "	IN pWhereClause VARCHAR(16383),          \n" +
                "	IN pPartID INT,          \n" +
                "	IN pPackaging TINYINT(1)          \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	DECLARE pOffset INT(11);          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;          \n" +
                "  SET SESSION group_concat_max_len = 500000;          \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS Temp_Sproc_GetRFQLineItems;          \n" +
                "            CREATE TEMPORARY TABLE IF NOT EXISTS Temp_Sproc_GetRFQLineItems AS          \n" +
                "            SELECT CONCAT(GROUP_CONCAT(IFNULL(REPLACE(ra.description,'        \n" +
                "','<br/>'),'') SEPARATOR '<br/>'),(CASE WHEN GROUP_CONCAT(IFNULL(ra.description,'') SEPARATOR '<br/>') = ''  THEN '' ELSE '<br/>'END), IFNULL(REPLACE(rl.description,'','<br/>'),'')) AS internalComment,          \n" +
                "			rl.id,rl.qpa,rl.attritionRate,rl.isInstall, rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,rl.dnpQty,          \n" +
                "            CASE WHEN rl.isBuyDNPQty = 'Y' THEN 'YES' WHEN rl.isBuyDNPQty = 'C' THEN 'Customer Consigned' ELSE 'NO' END AS isBuyDNPQty,          \n" +
                "            rl.dnpDesig, IFNULL(rl.restrictCPNUseInBOMStep,0)restrictCPNUseInBOMStep,IFNULL(rl.restrictCPNUsePermanentlyStep,1)restrictCPNUsePermanentlyStep,IFNULL(rl.restrictCPNUseWithPermissionStep,1)restrictCPNUseWithPermissionStep,          \n" +
                "            (          \n" +
                "				CASE WHEN          \n" +
                "					(          \n" +
                "						SELECT COUNT( DISTINCT(rm.name))          \n" +
                "						FROM  rfq_mountingtypemst rm          \n" +
                "						LEFT JOIN component cm ON cm.mountingTypeID=rm.id          \n" +
                "						LEFT JOIN rfq_lineitems_alternatepart rlam ON rlam.mfgpnid=cm.id          \n" +
                "						WHERE rlam.rfqlineitemsid=rl.id AND rlam.isDeleted = 0          \n" +
                "					) > 1 THEN        \n" +
                "						CASE WHEN        \n" +
                "						(SELECT COUNT(1)          \n" +
                "						FROM  rfq_lineitems_alternatepart rlam         \n" +
                "						WHERE rlam.rfqlineitemsid=rl.id AND rlam.approvedMountingType = 1 AND rlam.isDeleted = 0) > 0 THEN        \n" +
                "						(        \n" +
                "						SELECT rm.name          \n" +
                "						FROM  rfq_mountingtypemst rm          \n" +
                "						LEFT JOIN component cm ON cm.mountingTypeID=rm.id          \n" +
                "						LEFT JOIN rfq_lineitems_alternatepart rlam ON rlam.mfgpnid=cm.id          \n" +
                "						WHERE rlam.rfqlineitemsid=rl.id AND rlam.approvedMountingType = 1 AND rlam.isDeleted = 0 LIMIT 1          \n" +
                "						)        \n" +
                "						ELSE 	        \n" +
                "					 ('Mismatched') END         \n" +
                "                ELSE          \n" +
                "					(          \n" +
                "						SELECT rm.name          \n" +
                "						FROM  rfq_mountingtypemst rm          \n" +
                "						LEFT JOIN component cm ON cm.mountingTypeID=rm.id          \n" +
                "						LEFT JOIN rfq_lineitems_alternatepart rlam ON rlam.mfgpnid=cm.id          \n" +
                "						WHERE rlam.rfqlineitemsid=rl.id AND rlam.isDeleted = 0 LIMIT 1          \n" +
                "					) END          \n" +
                "			)AS `name`,          \n" +
                "			rl.lineID,rl.level,rl.numOfPosition,rl.valueAddedCost,rl.custPN,rl.refDesig,fun_getCPNPIDByID(rl.custPNID) CPNPID, fun_getUnitNameByID(rl.uomID) unitName,rl.uomID, com.PIDCode, com.category, rl.partID,ra.mfgPNID,rl.cust_lineID,          \n" +
                "			(          \n" +
                "				CASE WHEN pPackaging = 1 THEN          \n" +
                "				(          \n" +
                "					SELECT GROUP_CONCAT(DISTINCT(IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\")),'@@@',a.RoHSStatusID,'@@@',IFNULL(a.name,''),'@@@',          \n" +
                "					IFNULL(a.rohsIcon,''),'@@@',IFNULL(a.isCustom,0),'@@@',REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),'@@@',IFNULL(a.partStatus,\"\"),'@@@',          \n" +
                "					REPLACE(IFNULL(a.partStatusColor,\"\"),',','***'),'@@@',REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),'@@@',          \n" +
                "                    IFNULL(a.restrictUseInBOMStep,0) ,'@@@',          \n" +
                "                    IFNULL(a.restrictUseInBOMWithPermissionStep,0),'@@@',          \n" +
                "                    IFNULL(a.restrictUsePermanentlyStep,1) ,'@@@',           \n" +
                "                    IFNULL(a.restrictUseWithPermissionStep,1),'@@@',          \n" +
                "                    IFNULL(a.restrictUseInBOMExcludingAliasStep,0),'@@@',          \n" +
                "                    IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),'@@@',          \n" +
                "                    IFNULL(a.restrictUseExcludingAliasStep,1),'@@@',          \n" +
                "                    IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),'@@@',           \n" +
                "			IFNULL(REPLACE(REPLACE(a.description,',','***'),'','<br/>'),''),'@@@','','@@@','','@@@',      \n" +
                "			IFNULL(a.approvedMountingType,0),'@@@',      \n" +
                "			IFNULL(a.mismatchMountingTypeStep,1)      \n" +
                "			 ORDER BY a.mfgPN) AS mfgPn          \n" +
                "					FROM          \n" +
                "					(          \n" +
                "						SELECT DISTINCT(c.PIDCode) PIDCode,c.RoHSStatusID,ro.name,ro.rohsIcon,c.feature,fun_getPartStatusNameByID(c.partStatus) partStatus,c.mfgPN,rla.description,          \n" +
                "                        fun_getPartStatusColorByID(c.partStatus) partStatusColor, fun_getPartTBDDetails(c.id) partTBD,          \n" +
                "						IFNULL(rla.restrictUseInBOMStep,0) restrictUseInBOMStep,          \n" +
                "                        IFNULL(rla.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,          \n" +
                "                        IFNULL(rla.restrictUsePermanentlyStep,1) restrictUsePermanentlyStep,          \n" +
                "                        IFNULL(rla.restrictUseWithPermissionStep,1) restrictUseWithPermissionStep,          \n" +
                "						IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) restrictUseInBOMExcludingAliasStep,          \n" +
                "						IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) restrictUseInBOMExcludingAliasWithPermissionStep,          \n" +
                "						IFNULL(rla.restrictUseExcludingAliasStep,1) restrictUseExcludingAliasStep,          \n" +
                "						IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) restrictUseExcludingAliasWithPermissionStep,       \n" +
                "						IFNULL(rla.approvedMountingType,0) approvedMountingType,       \n" +
                "						IFNULL(rla.mismatchMountingTypeStep,1) mismatchMountingTypeStep,         \n" +
                "						IFNULL(c.isCustom,0) isCustom          \n" +
                "                        FROM rfq_lineitems_alternatepart rla          \n" +
                "						LEFT JOIN component c ON rla.mfgpnID=c.id          \n" +
                "						LEFT JOIN rfq_rohsmst ro ON ro.id= c.RoHSStatusID AND ro.isDeleted = 0          \n" +
                "						WHERE rla.rfqLineItemsID = rl.id AND rla.isdeleted=0          \n" +
                "						UNION          \n" +
                "						SELECT DISTINCT(c.PIDCode) PIDCode,c.RoHSStatusID,ro.name,ro.rohsIcon,c.feature,fun_getPartStatusNameByID(c.partStatus) partStatus,c.mfgPN,NULL AS description,fun_getPartStatusColorByID(c.partStatus) partStatusColor,fun_getPartTBDDetails(c.id) partTBD,          \n" +
                "						(CASE WHEN IFNULL((          \n" +
                "									SELECT IFNULL(rla.restrictUseInBOMStep,0) FROM rfq_lineitems_alternatepart rla          \n" +
                "									LEFT JOIN component com ON com.id = rla.mfgPNID          \n" +
                "									WHERE rla.mfgPNID = c.id AND rla.partID = rl.partID AND com.packaginggroupID = c.packaginggroupID AND rla.isDeleted = 0           \n" +
                "									AND IFNULL(rla.restrictUseInBOMStep,0) = 1 LIMIT 1          \n" +
                "								),0) = 1 THEN 1 ELSE 0 END) AS restrictUseInBOMStep,          \n" +
                "						(CASE WHEN IFNULL((          \n" +
                "									SELECT IFNULL(rla.restrictUseInBOMWithPermissionStep,0) FROM rfq_lineitems_alternatepart rla          \n" +
                "									LEFT JOIN component com ON com.id = rla.mfgPNID          \n" +
                "									WHERE rla.mfgPNID = c.id AND rla.partID = rl.partID AND com.packaginggroupID = c.packaginggroupID AND rla.isDeleted = 0           \n" +
                "									AND IFNULL(rla.restrictUseInBOMWithPermissionStep,0) = 1 LIMIT 1          \n" +
                "								),0) = 1 THEN 1 ELSE 0 END          \n" +
                "                        ) AS restrictUseInBOMWithPermissionStep,            \n" +
                "                        (CASE WHEN IFNULL(c.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END) AS restrictUsePermanentlyStep,          \n" +
                "                        (CASE WHEN IFNULL(c.restrictUSEwithpermission,0) = 1 THEN 0 ELSE 1 END) AS restrictUseWithPermissionStep,          \n" +
                "						(CASE WHEN IFNULL((          \n" +
                "									SELECT IFNULL(rla.restrictUseInBOMExcludingAliasStep,0)           \n" +
                "                                    FROM rfq_lineitems_alternatepart rla          \n" +
                "									WHERE rla.mfgPNID = c.id AND rla.partID = rl.partID AND rla.isDeleted = 0           \n" +
                "									AND IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) = 1 LIMIT 1          \n" +
                "								),0) = 1 THEN 1 ELSE 0 END          \n" +
                "						) AS restrictUseInBOMExcludingAliasStep,                                  \n" +
                "                        (CASE WHEN IFNULL((          \n" +
                "									SELECT IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0)           \n" +
                "                                    FROM rfq_lineitems_alternatepart rla          \n" +
                "									WHERE rla.mfgPNID = c.id AND rla.partID = rl.partID  AND rla.isDeleted = 0           \n" +
                "									AND IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) = 1 LIMIT 1          \n" +
                "								),0) = 1 THEN 1 ELSE 0 END          \n" +
                "						) AS restrictUseInBOMExcludingAliasWithPermissionStep,          \n" +
                "                        (CASE WHEN IFNULL(c.restrictPackagingUsePermanently,0) = 1 THEN 0 ELSE 1 END) AS restrictUseExcludingAliasStep,          \n" +
                "						(CASE WHEN IFNULL(c.restrictPackagingUseWithpermission,0) = 1 THEN 0 ELSE 1 END) AS restrictUseExcludingAliasWithPermissionStep,     \n" +
                "						 (CASE WHEN IFNULL((          \n" +
                "									SELECT IFNULL(rla.approvedMountingType,0) FROM rfq_lineitems_alternatepart rla          \n" +
                "									LEFT JOIN component com ON com.id = rla.mfgPNID          \n" +
                "									WHERE rla.mfgPNID = c.id AND rla.partID = rl.partID AND com.packaginggroupID = c.packaginggroupID AND rla.isDeleted = 0           \n" +
                "									AND IFNULL(rla.approvedMountingType,0) = 1 LIMIT 1          \n" +
                "								),0) = 1 THEN 1 ELSE 0 END) AS approvedMountingType,          \n" +
                "						(CASE WHEN IFNULL((          \n" +
                "									SELECT IFNULL(rla.mismatchMountingTypeStep,0) FROM rfq_lineitems_alternatepart rla          \n" +
                "									LEFT JOIN component com ON com.id = rla.mfgPNID          \n" +
                "									WHERE rla.mfgPNID = c.id AND rla.partID = rl.partID AND com.packaginggroupID = c.packaginggroupID AND rla.isDeleted = 0           \n" +
                "									AND IFNULL(rla.mismatchMountingTypeStep,1) = 0 LIMIT 1          \n" +
                "								),0) = 1 THEN 0 ELSE 1 END          \n" +
                "                        ) AS mismatchMountingTypeStep,         \n" +
                "						c.isCustom        \n" +
                "                        FROM component c          \n" +
                "						LEFT JOIN rfq_rohsmst ro ON ro.id= c.RoHSStatusID AND ro.isDeleted = 0          \n" +
                "						WHERE c.packaginggroupID IN          \n" +
                "						(          \n" +
                "							SELECT packaginggroupID          \n" +
                "							FROM component WHERE id IN          \n" +
                "							(          \n" +
                "								SELECT mfgPNID FROM rfq_lineitems_alternatepart rla          \n" +
                "								WHERE rla.rfqLineItemsID = rl.id AND rla.isDeleted=0          \n" +
                "							)          \n" +
                "						) AND c.isdeleted=0 AND c.id NOT IN          \n" +
                "						(          \n" +
                "							SELECT mfgPNID FROM rfq_lineitems_alternatepart rla          \n" +
                "							WHERE rla.rfqLineItemsID = rl.id AND rla.isDeleted=0          \n" +
                "						)          \n" +
                "					)a          \n" +
                "				)          \n" +
                "				ELSE          \n" +
                "				(          \n" +
                "					SELECT GROUP_CONCAT(DISTINCT(IFNULL(REPLACE(REPLACE(c.PIDCode,\",\",\"***\"),',',\"..\"),\"N/A\")),'@@@',c.RoHSStatusID,'@@@', ro.name,'@@@', IFNULL(ro.rohsIcon,''),'@@@',IFNULL(c.isCustom,0),'@@@',REPLACE(IFNULL(c.feature,\"\"),\",\",\"\"),'@@@',          \n" +
                "					IFNULL(fun_getPartStatusNameByID(c.partStatus),\"\"),'@@@',REPLACE(IFNULL(fun_getPartStatusColorByID(c.partStatus),\"\"),',','***'),'@@@',REPLACE(IFNULL(fun_getPartTBDDetails(c.id),\"\"),\",\",\"***\"),'@@@',          \n" +
                "					IFNULL(rla.restrictUseInBOMStep,0) ,'@@@',          \n" +
                "                    IFNULL(rla.restrictUseInBOMWithPermissionStep,0),'@@@',          \n" +
                "                    IFNULL(rla.restrictUsePermanentlyStep,1) ,'@@@',           \n" +
                "                    IFNULL(rla.restrictUseWithPermissionStep,1),'@@@',          \n" +
                "                    IFNULL(rla.restrictUseInBOMExcludingAliasStep,0),'@@@',          \n" +
                "                    IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),'@@@',          \n" +
                "                    IFNULL(rla.restrictUseExcludingAliasStep,1),'@@@',          \n" +
                "                    IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),'@@@',        \n" +
                "                    IFNULL(REPLACE(REPLACE(rla.description,',','***'),'','<br/>'),''),'@@@','','@@@','','@@@',         \n" +
                "                    IFNULL(rla.approvedMountingType,0),'@@@',          \n" +
                "                    IFNULL(rla.mismatchMountingTypeStep,1) ORDER BY c.mfgPN)AS mfgPn          \n" +
                "					FROM rfq_lineitems_alternatepart rla          \n" +
                "					LEFT JOIN component c ON rla.mfgPNID=c.id          \n" +
                "					LEFT JOIN rfq_rohsmst ro ON ro.id= c.RoHSStatusID AND ro.isDeleted = 0          \n" +
                "					WHERE rla.rfqLineItemsID=rl.id AND rla.isdeleted=0          \n" +
                "				) END          \n" +
                "			) AS mfgPN,          \n" +
                "			(          \n" +
                "				CASE WHEN pPackaging = 1 THEN          \n" +
                "				(          \n" +
                "					SELECT GROUP_CONCAT(a.PIDCode) AS mfgPn          \n" +
                "					FROM          \n" +
                "					(          \n" +
                "						SELECT DISTINCT fun_getAssyPIDCodeByID(rla.mfgPNID) PIDCode          \n" +
                "						FROM rfq_lineitems_alternatepart rla          \n" +
                "						WHERE rla.rfqLineItemsID = rl.id AND rla.isdeleted=0          \n" +
                "						UNION          \n" +
                "						SELECT DISTINCT PIDCode          \n" +
                "						FROM component c          \n" +
                "						WHERE c.packaginggroupID IN          \n" +
                "						(          \n" +
                "							SELECT packaginggroupID          \n" +
                "							FROM component WHERE id IN          \n" +
                "							(          \n" +
                "								SELECT mfgPNID FROM rfq_lineitems_alternatepart rla          \n" +
                "								WHERE rla.rfqLineItemsID = rl.id AND rla.isDeleted=0          \n" +
                "							)          \n" +
                "						) AND c.isdeleted=0 AND c.id NOT IN           \n" +
                "						(          \n" +
                "							SELECT mfgPNID FROM rfq_lineitems_alternatepart rla          \n" +
                "							WHERE rla.rfqLineItemsID = rl.id AND rla.isDeleted=0          \n" +
                "						)          \n" +
                "					)a          \n" +
                "				)          \n" +
                "				ELSE          \n" +
                "				(          \n" +
                "					SELECT GROUP_CONCAT(fun_getAssyPIDCodeByID(rla.mfgPNID)) AS mfgPn          \n" +
                "					FROM rfq_lineitems_alternatepart rla          \n" +
                "					WHERE rla.rfqLineItemsID= rl.id AND rla.isdeleted=0          \n" +
                "				) END          \n" +
                "			) AS PIDList,          \n" +
                "			(          \n" +
                "				CASE WHEN ccl.isDocumentUpload = 1 THEN          \n" +
                "				(          \n" +
                "					(          \n" +
                "						CASE WHEN pPackaging = 1 THEN          \n" +
                "						(          \n" +
                "							SELECT GROUP_CONCAT(DISTINCT(REPLACE(a.mfgPN,\",\",\"***\")),'###',a.mfgCode,'###', IFNULL(a.RoHSStatusID,-1),'###', a.id,'###',ccl.isDocumentUpload ORDER BY a.mfgPN)          \n" +
                "							FROM          \n" +
                "							(          \n" +
                "								SELECT c.id,c.mfgPN,fun_getMfgCodeByID(c.mfgcodeID) mfgCode, c.RoHSStatusID          \n" +
                "								FROM rfq_lineitems_alternatepart rla          \n" +
                "								LEFT JOIN component c ON rla.mfgpnID=c.id          \n" +
                "								WHERE rla.rfqLineItemsID = rl.id AND rla.isdeleted=0          \n" +
                "								UNION          \n" +
                "								SELECT c.id,c.mfgPN, fun_getMfgCodeByID(c.mfgcodeID) mfgCode, c.RoHSStatusID          \n" +
                "								FROM component c          \n" +
                "								WHERE c.packaginggroupID IN          \n" +
                "								(          \n" +
                "									SELECT packaginggroupID           \n" +
                "									FROM component WHERE id IN          \n" +
                "									(          \n" +
                "										SELECT mfgPNID FROM rfq_lineitems_alternatepart rla          \n" +
                "										WHERE rla.rfqLineItemsID = rl.id AND rla.isDeleted=0  AND rla.restrictUseInBOMStep=0          \n" +
                "									)          \n" +
                "								) AND c.isdeleted=0 AND c.id NOT IN          \n" +
                "								(          \n" +
                "									SELECT mfgPNID FROM rfq_lineitems_alternatepart rla          \n" +
                "									WHERE rla.rfqLineItemsID = rl.id AND rla.isDeleted=0          \n" +
                "								)          \n" +
                "							) AS a          \n" +
                "						)          \n" +
                "						ELSE          \n" +
                "						(          \n" +
                "							SELECT GROUP_CONCAT(DISTINCT(REPLACE(c.mfgPN,\",\",\"***\")),'###',fun_getMfgCodeByID(c.mfgcodeID),'###',IFNULL(c.RoHSStatusID,-1),'###',c.id,'###',ccl.isDocumentUpload ORDER BY c.mfgPN) AS mfgPn          \n" +
                "							FROM rfq_lineitems_alternatepart rla          \n" +
                "							LEFT JOIN component c ON rla.mfgPNID=c.id          \n" +
                "							WHERE rla.rfqLineItemsID=rl.id AND rla.isdeleted=0          \n" +
                "						) END          \n" +
                "					)          \n" +
                "				)          \n" +
                "				ELSE          \n" +
                "				(          \n" +
                "					(          \n" +
                "						CASE WHEN pPackaging = 1 THEN          \n" +
                "						(          \n" +
                "							SELECT GROUP_CONCAT(DISTINCT(REPLACE(a.mfgPN,\",\",\"***\")),'###',a.mfgCode,'###',IFNULL(a.RoHSStatusID,-1),'###',a.id,'###',0 ORDER BY a.mfgPN)          \n" +
                "							FROM          \n" +
                "							(          \n" +
                "								SELECT c.id,c.mfgPN,fun_getMfgCodeByID(c.mfgcodeID) mfgCode, c.RoHSStatusID          \n" +
                "								FROM rfq_lineitems_alternatepart rla          \n" +
                "								LEFT JOIN component c ON rla.mfgpnID=c.id          \n" +
                "								WHERE rla.rfqLineItemsID = rl.id AND rla.isdeleted=0          \n" +
                "								UNION          \n" +
                "								SELECT c.id,c.mfgPN,fun_getMfgCodeByID(c.mfgcodeID) mfgCode, c.RoHSStatusID          \n" +
                "								FROM component c          \n" +
                "								WHERE c.packaginggroupID IN          \n" +
                "								(          \n" +
                "									SELECT packaginggroupID          \n" +
                "									FROM component WHERE id IN          \n" +
                "									(          \n" +
                "										SELECT mfgPNID FROM rfq_lineitems_alternatepart rla          \n" +
                "										WHERE rla.rfqLineItemsID = rl.id AND rla.isDeleted=0  AND rla.restrictUseInBOMStep=0          \n" +
                "									)          \n" +
                "								) AND c.isdeleted=0 AND c.id NOT IN          \n" +
                "								(          \n" +
                "									SELECT mfgPNID FROM rfq_lineitems_alternatepart rla          \n" +
                "									WHERE rla.rfqLineItemsID = rl.id AND rla.isDeleted=0          \n" +
                "								)          \n" +
                "							) AS a          \n" +
                "						)          \n" +
                "						ELSE          \n" +
                "						(          \n" +
                "							SELECT GROUP_CONCAT(DISTINCT(REPLACE(c.mfgPN,\",\",\"***\")),'###',fun_getMfgCodeByID(c.mfgcodeID),'###',IFNULL(c.RoHSStatusID,-1),'###',c.id,'###',0 ORDER BY c.mfgPN) AS mfgPn          \n" +
                "							FROM rfq_lineitems_alternatepart rla          \n" +
                "							LEFT JOIN component c ON rla.mfgPNID=c.id          \n" +
                "							WHERE rla.rfqLineItemsID=rl.id AND rla.isdeleted=0          \n" +
                "						) END          \n" +
                "					)          \n" +
                "				) END          \n" +
                "			) AS component          \n" +
                "			FROM rfq_lineitems_alternatepart ra          \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id =ra.rfqLineItemsID AND rl.isDeleted = 0          \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND com.isDeleted = 0          \n" +
                "			LEFT JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID AND ro.isDeleted = 0          \n" +
                "			LEFT JOIN component_customer_loa ccl ON ccl.componentID = com.id AND ccl.isDeleted = 0          \n" +
                "			WHERE ra.isDeleted = 0 AND rl.partID = pPartID          \n" +
                "			GROUP BY rl.id          \n" +
                "			ORDER BY rl.lineID;          \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                      \n" +
                "	ELSE                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                                      \n" +
                "	END IF;                                      \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                      \n" +
                "		SET pWhereClause = '1=1' ;                                      \n" +
                "	END IF;                                      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                      \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;                                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                      \n" +
                "	ELSE                                      \n" +
                "		SET rowNumWhere = '';                                      \n" +
                "	END IF;                                      \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM Temp_Sproc_GetRFQLineItems where \", pWhereClause );                                      \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                      \n" +
                "	EXECUTE query1;                                      \n" +
                "	DEALLOCATE PREPARE query1;                                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Temp_Sproc_GetRFQLineItems where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                      \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                      \n" +
                "	EXECUTE query2;                                      \n" +
                "	DEALLOCATE PREPARE query2;                                      \n" +
                "  \n" +
                "	SET @SQLStatement3= (SELECT fun_getRestrictedPartsinPlannBOM(IFNULL(pPartID,0)));                                      \n" +
                "			PREPARE query3 FROM @SQLStatement3;                                      \n" +
                "			EXECUTE query3;                                      \n" +
                "			DEALLOCATE PREPARE query3;                                      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE Temp_Sproc_GetRFQLineItems;                                      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyBOMHeaderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyBOMHeaderList`(                                                        \n" +
                "	IN prfqAssyID INT(11),                                      \n" +
                "	IN pcustomerID INT(11)                                  \n" +
                ")  \n" +
                "BEGIN                                                \n" +
                "	   SELECT   ra.rfqrefID AS quoteGroupNumber,ra.quoteinDate,ra.quoteDueDate,ra.partID,ra.quoteFinalStatus, ra.isSummaryComplete, c.mfgpn AS assyNumber,c.rev AS revision,            \n" +
                "	   jt.name AS jobType,                \n" +
                "CASE WHEN c.bomLock=0 THEN '' ELSE 'BOM is locked' END bomlockStatus,                                      \n" +
                "	   c.PIDCode AS assyID,c.mfgPNDescription,c.specialNote,ra.assemblyTypeID,rat.name AS assyType,           \n" +
                "       fun_getSamplePicturesUploadCount(ra.partID) sampleImageCnt,          \n" +
                "       (SELECT mfgType FROM mfgCodeMst mfg WHERE mfg.id  = c.mfgcodeID ) mfgType,          \n" +
                "	   (SELECT (MAX(LEVEL)+1) FROM part_sub_assy_relationship psar WHERE psar.partID =ra.partID AND psar.isdeleted=0) AS assyLevel,                                      \n" +
                "	   (SELECT COUNT(1) FROM rfq_assemblies rfqs WHERE rfqs.rfqrefID =ra.rfqrefID AND rfqs.isdeleted=0) AS assyCount,                                       \n" +
                "	   c.liveVersion AS liveInternalVersion,rh.id,rh.name AS rohs,rh.rohsIcon,c.rev,c.nickname,c.businessRisk,                                      \n" +
                "	   (SELECT COUNT(1) FROM rfq_assemblies_quotation_submitted raqs WHERE raqs.rfqAssyID=ra.id AND quoteNumber IS NOT NULL AND isDeleted = 0) AS totalQuoteCount,                                      \n" +
                "	   (SELECT rasp.quoteNumber FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id AND quoteNumber IS NOT NULL ORDER BY rasp.id DESC LIMIT 1) AS quoteNumber,                                      \n" +
                "	   (SELECT rasp.bomLastVersion FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id AND quoteNumber IS NOT NULL ORDER BY rasp.id DESC LIMIT 1) AS bomLastVersion,                                      \n" +
                "	   (SELECT rasp.quoteSubmitDate FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id AND quoteNumber IS NOT NULL ORDER BY rasp.id DESC LIMIT 1) AS quoteSubmitDate,                                      \n" +
                "	   (SELECT rasp.bomInternalVersion FROM rfq_assemblies_quotation_submitted rasp WHERE rasp.rfqassyID=ra.id AND quoteNumber IS NOT NULL ORDER BY rasp.id DESC LIMIT 1) AS bomInternalVersion,                                      \n" +
                "	   (SELECT CONCAT('(',mm.mfgCode,') ',mm.mfgName) FROM mfgcodemst mm WHERE mm.id=pcustomerID) AS customerName,                                   \n" +
                "	   (CASE WHEN ra.status = 1 THEN 'In Progress'                                           \n" +
                "			  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'                                         \n" +
                "			  WHEN ra.status = 3 THEN 'Won'                                          \n" +
                "			  WHEN ra.status = 4 THEN 'Lost'                                         \n" +
                "		 WHEN ra.status = 5 THEN 'Canceled' END) `status` ,                                        \n" +
                "	   (CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending'                                    \n" +
                "		 WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote'                                     \n" +
                "	 	 WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'                                      \n" +
                "		 WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,                      \n" +
                "         (                      \n" +
                "			CASE  WHEN IFNULL(ra.isSummaryComplete,0)=0 THEN                       \n" +
                "			(                      \n" +
                "                SELECT GROUP_CONCAT(CONCAT(IFNULL(cs.fullName,''),' ',IFNULL(css.className,''), '######', IFNULL(css.colorCode,'')) ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@')                      \n" +
                "                FROM component_standard_details csd                         \n" +
                "                LEFT JOIN certificate_standards cs ON csd.certificatestandardID=cs.certificatestandardid                         \n" +
                "                LEFT JOIN standard_class css ON csd.classID=css.classID WHERE csd.componentid= ra.partID AND csd.isDeleted = 0                        \n" +
                "			)                      \n" +
                "            ELSE                                  \n" +
                "            (                      \n" +
                "				SELECT GROUP_CONCAT(CONCAT(IFNULL(cs.fullName,''),' ',IFNULL(css.className,''), '######', IFNULL(css.colorCode,'')) ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@')                          \n" +
                "                FROM rfq_assy_standard_class_detail csd                         \n" +
                "                LEFT JOIN certificate_standards cs ON csd.standardID=cs.certificatestandardid                         \n" +
                "                LEFT JOIN standard_class css ON csd.standardClassIds=css.classID                         \n" +
                "                WHERE csd.refSubmittedQuoteID=(SELECT id FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1)                        \n" +
                "			)                                  \n" +
                "			END                      \n" +
                "		)AS standards, ra.isActivityStart, ra.activityStartBy    \n" +
                "	   FROM rfq_assemblies ra  LEFT JOIN component c                                      \n" +
                "	   ON c.id=ra.partID LEFT JOIN rfq_assy_typemst rat                                       \n" +
                "          ON rat.id=ra.assemblyTypeID LEFT JOIN rfq_rohsmst rh                                      \n" +
                "          ON rh.id=c.RoHSStatusID LEFT JOIN jobtype jt                                      \n" +
                "          ON jt.id = ra.jobTypeID            \n" +
                "  \n" +
                "           WHERE ra.id= prfqAssyID AND ra.isdeleted=0;                                                           \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_costingStartStopActivity`;  \n" +
                "CREATE PROCEDURE `Sproc_costingStartStopActivity`(                \n" +
                "	IN prfqAssyID int,                \n" +
                "	IN pUserId INT,                \n" +
                "	IN pIsActivityStart TINYINT            \n" +
                "    )  \n" +
                "BEGIN                \n" +
                "	DECLARE updatedUserID INT;         \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION              \n" +
                "	BEGIN                \n" +
                "		ROLLBACK;            \n" +
                "		RESIGNAL;            \n" +
                "	END;            \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                          \n" +
                "	BEGIN                          \n" +
                "		ROLLBACK;                          \n" +
                "		RESIGNAL;                          \n" +
                "	END;	            \n" +
                "	START TRANSACTION;            \n" +
                "  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() INTO @pCurrentTime;       \n" +
                "	IF( SELECT COUNT(1) FROM rfq_assemblies WHERE id = prfqAssyID AND isActivityStart = 1 > 0) THEN      \n" +
                "		SELECT activityStartBy INTO updatedUserID FROM rfq_assemblies WHERE id = prfqAssyID AND isActivityStart = 1;     \n" +
                "	END IF;     \n" +
                "    	IF updatedUserID IS NULL THEN       \n" +
                "			SET updatedUserID = pUserId;     \n" +
                "		END IF;      \n" +
                "	IF pIsActivityStart THEN       \n" +
                "		UPDATE rfq_assemblies SET      \n" +
                "			isActivityStart = pIsActivityStart,      \n" +
                "			activityStartBy = pUserId,      \n" +
                "			activityStartAt = @pCurrentTime      \n" +
                "		WHERE id = prfqAssyID;      \n" +
                "  \n" +
                "	# insert record in history for start activity    \n" +
                "		INSERT INTO rfq_assembly_trans_history     \n" +
                "        (`rfqAssyID`, `checkinTime`, `userID`, `createdBy`)     \n" +
                "        VALUES(prfqAssyID, @pCurrentTime, pUserId, pUserId);      \n" +
                "	ELSE       \n" +
                "		UPDATE rfq_assemblies SET      \n" +
                "			isActivityStart = pIsActivityStart,      \n" +
                "			activityStartBy = pUserId,      \n" +
                "			activityStopAt = @pCurrentTime,  \n" +
                "            activityStartAt = null  \n" +
                "		WHERE id = prfqAssyID;      \n" +
                "  \n" +
                "        SELECT a.id, a.checkinTime INTO @pid, @pcheckinTime FROM rfq_assembly_trans_history a WHERE a.rfqAssyID = prfqAssyID AND a.isDeleted = FALSE ORDER BY id DESC LIMIT 1;      \n" +
                "	# update transaction time on stop activity    \n" +
                "        UPDATE rfq_assembly_trans_history SET       \n" +
                "			checkoutTime = @pCurrentTime,      \n" +
                "			totalTime = TIMESTAMPDIFF(SECOND, @pcheckinTime,@pCurrentTime),            \n" +
                "			updatedBy = pUserId,      \n" +
                "			updatedAt = @pCurrentTime      \n" +
                "			 WHERE id = @pid;      \n" +
                "    END IF;      \n" +
                "	COMMIT;            \n" +
                "	SELECT updatedUserID;      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getQuoteSubjectToFollowingDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_getQuoteSubjectToFollowingDetails`(	                                                                                  \n" +
                "	IN prfqAssyID INT(11),          \n" +
                "    IN pAssyQuoteSubmittedID INT(11)             \n" +
                "    )  \n" +
                "BEGIN             \n" +
                "DECLARE pisSummaryCompleted TINYINT(1);          \n" +
                "SELECT isSummaryComplete INTO pisSummaryCompleted FROM rfq_assemblies WHERE id = prfqAssyID;          \n" +
                "	IF pisSummaryCompleted = 1 THEN          \n" +
                "  \n" +
                "		# Get Excess Material Details          \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID, fun_ConvertRefdesgString(a.refDesg) AS refDesg, a.mfrCode AS mfrCode, a.mfrPN AS mfrPN,          \n" +
                "			a.CPN AS CPN, a.CPNRev AS CPNRev,BOMIssue          \n" +
                "			FROM rfq_quote_issue_history a          \n" +
                "            WHERE issueType = \"ExcessMaterial\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID          \n" +
                "			ORDER BY a.lineID ;           \n" +
                "  \n" +
                "		# Get Custome Consigned Detail              \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID, fun_ConvertRefdesgString(a.refDesg) AS refDesg, a.mfrCode AS mfrCode, a.mfrPN AS mfrPN,          \n" +
                "            a.CPN AS CPN, a.CPNRev AS CPNRev,BOMIssue          \n" +
                "            FROM rfq_quote_issue_history a          \n" +
                "            WHERE issueType = \"CustomerConsigned\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID          \n" +
                "			ORDER BY a.lineID;          \n" +
                "  \n" +
                "		# get Unquoted Line item Details          \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID, fun_ConvertRefdesgString(a.refDesg) AS refDesg,           \n" +
                "            a.CPN AS CPN, a.CPNRev AS CPNRev,BOMIssue          \n" +
                "			FROM rfq_quote_issue_history a          \n" +
                "            WHERE issueType = \"UnquotedLineItem\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID          \n" +
                "			ORDER BY a.lineID;          \n" +
                "  \n" +
                "		# get Unquoted Labor Detail          \n" +
                "  \n" +
                "			SELECT PIDCode, BOMIssue                      \n" +
                "			FROM rfq_quote_issue_history a          \n" +
                "            WHERE issueType = \"UnquotedLabor\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID;                  \n" +
                "  \n" +
                "		# get Low Stock Alert details          \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID , fun_ConvertRefdesgString(a.refDesg) AS refDesg, a.mfrCode AS mfrCode, a.mfrPN AS mfrPN,          \n" +
                "            a.CPN AS CPN, a.CPNRev AS CPNRev, BOMIssue, a.isCustom, CASE WHEN a.componentID IS NULL THEN 0 ELSE fun_getComponentStock(a.componentID) END AS actualStock                    \n" +
                "			FROM rfq_quote_issue_history a          \n" +
                "            WHERE issueType = \"LowStockAlert\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID AND isCustom = 0         \n" +
                "			ORDER BY a.lineID;          \n" +
                "  \n" +
                "		# Get Long Lead Time Parts Detail          \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID, fun_ConvertRefdesgString(a.refDesg) AS refDesg, a.mfrCode AS mfrCode, a.mfrPN AS mfrPN,          \n" +
                "            a.CPN AS CPN, a.CPNRev AS CPNRev, BOMIssue, a.isCustom, CASE WHEN a.componentID IS NULL THEN 0 ELSE fun_getComponentStock(a.componentID) END AS actualStock            \n" +
                "			FROM rfq_quote_issue_history a          \n" +
                "            WHERE issueType = \"LongLeadTime\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID          \n" +
                "            ORDER BY a.lineID;          \n" +
                "  \n" +
                "		# get Obsolete Part Detail          \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID , fun_ConvertRefdesgString(a.refDesg)  AS refDesg,          \n" +
                "            a.mfrCode AS mfrCode, a.mfrPN AS mfrPN,a.CPN AS CPN, a.CPNRev AS CPNRev,BOMIssue           \n" +
                "            FROM rfq_quote_issue_history a          \n" +
                "            WHERE issueType = \"ObsoletePart\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID          \n" +
                "			ORDER BY a.lineID;          \n" +
                "  \n" +
                "		# Get Part LOA Details          \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID ,fun_ConvertRefdesgString(a.refDesg)  AS refDesg,a.mfrCode AS mfrCode, a.mfrPN AS mfrPN,          \n" +
                "            a.CPN AS CPN, a.CPNRev AS CPNRev,BOMIssue          \n" +
                "			FROM rfq_quote_issue_history a          \n" +
                "            WHERE issueType = \"PartLOA\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID                   \n" +
                "			ORDER BY a.lineID;           \n" +
                "  \n" +
                "		# Get BOM Issue detail          \n" +
                "			SELECT PIDCode,TRIM(lineID)+0 AS lineID,fun_ConvertRefdesgString(a.refDesg) AS refDesg,a.mfrCode AS mfrCode,a.mfrPN AS mfrPN,          \n" +
                "            a.CPN AS CPN, a.CPNRev AS CPNRev, BOMIssue, (CASE WHEN a.isCustomerApproved = TRUE THEN 'Customer' ELSE 'Engineer' END) AS approvedBy, a.isCustomerApproved      \n" +
                "			FROM rfq_quote_issue_history a          \n" +
                "            WHERE issueType = \"BOMIssue\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID                             \n" +
                "			ORDER BY lineID;           \n" +
                "  \n" +
                "	ELSE           \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS leveldata;                      \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS leveldata AS                      \n" +
                "			WITH RECURSIVE cte AS                        \n" +
                "			(                      \n" +
                "				(                      \n" +
                "					SELECT rlc.id, rlc.rfqLineItemsAlternatePartID, rlc.rfqLineItemsID,                    \n" +
                "					(CASE WHEN rlc.isCustomerApproved = TRUE THEN 'Customer' ELSE 'Engineer' END) AS approvedBy,        \n" +
                "					rlc.`comment`, rlc.requiredToShowOnQuoteSummary, rlc.errorCode, rlc.isCustomerApproved,               \n" +
                "					comp.PIDCode, comp.mfgPN AS AssyPN, CASE WHEN rl.partID IS NULL THEN rla.mfgPNID ELSE rl.partId END AS partID, rl.refDesig, IFNULL(rla.mfgPNID, rl.partID) AS mfgPNID, IFNULL(com.isCustom, comp.isCustom) AS isCustom,IFNULL(rlc.mfgPN,rla.mfgPN) AS alternatepart,                    \n" +
                "					IFNULL(rlc.mfgCode,rla.mfgCode) AS alternatepartmfg, rla.id AS alternateID, 1 AS LEVEL,                     \n" +
                "					com.category, rl.lineID,rl.custPN,rl.customerRev                    \n" +
                "					FROM rfq_lineitems_alternatepart rla                    \n" +
                "					LEFT JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0                    \n" +
                "					JOIN rfq_lineitems_approval_comment rlc ON rlc.rfqLineItemsAlternatePartID = rla.id OR rlc.rfqLineItemsID = rl.id                    \n" +
                "					LEFT JOIN component com ON com.id = rla.mfgPNID                      \n" +
                "					LEFT JOIN component comp ON comp.id = rl.partID OR comp.id =  rla.partID                    \n" +
                "					WHERE rl.partId = ( SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID ) OR rla.partID = ( SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID )                    \n" +
                "					AND rla.isDeleted = 0          \n" +
                "				)                      \n" +
                "				UNION ALL                        \n" +
                "				(                      \n" +
                "					SELECT rlc.id, rlc.rfqLineItemsAlternatePartID, rlc.rfqLineItemsID,             \n" +
                "					(CASE WHEN rlc.isCustomerApproved = TRUE THEN 'Customer' ELSE 'Engineer' END) AS approvedBy,               \n" +
                "					rlc.`comment`, rlc.requiredToShowOnQuoteSummary, rlc.errorCode, rlc.isCustomerApproved,                   \n" +
                "					comp.PIDCode, comp.mfgPN AS AssyPN, CASE WHEN rl.partID IS NULL THEN rla.mfgPNID ELSE rl.partId END AS partID, rl.refDesig, IFNULL(rla.mfgPNID, rl.partID) AS mfgPNID, IFNULL(com.isCustom, comp.isCustom) AS isCustom,IFNULL(rlc.mfgPN,rla.mfgPN) AS alternatepart,                    \n" +
                "					IFNULL(rlc.mfgCode,rla.mfgCode) AS alternatepartmfg, rla.id AS alternateID, 1 AS LEVEL,                     \n" +
                "					com.category, rl.lineID,rl.custPN,rl.customerRev                    \n" +
                "					FROM rfq_lineitems_alternatepart rla                    \n" +
                "					LEFT JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0                    \n" +
                "					JOIN rfq_lineitems_approval_comment rlc ON rlc.rfqLineItemsAlternatePartID = rla.id OR rlc.rfqLineItemsID = rl.id                    \n" +
                "					LEFT JOIN component com ON com.id = rla.mfgPNID                      \n" +
                "					LEFT JOIN component comp ON comp.id = rl.partID OR comp.id =  rla.partID                    \n" +
                "					RIGHT JOIN cte cte ON cte.category = 3 AND rl.partID = cte.mfgPNID                     \n" +
                "					WHERE rla.isDeleted = 0                    \n" +
                "				)                      \n" +
                "			)                      \n" +
                "			SELECT cte.* FROM cte                      \n" +
                "            ORDER BY LEVEL;                     \n" +
                "  \n" +
                "		# Get Excess Material Details          \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID, fun_ConvertRefdesgString(a.refDesig) AS refDesg,          \n" +
                "            fun_getMfgCodeByPartID(a.componentID) AS mfrCode, fun_getMFGPNByID(a.componentID) AS mfrPN,a.custPN AS CPN, a.customerRev AS CPNRev,          \n" +
                "            CONCAT('UOM: ',a.unitName, ' : Requested QTY: ', requestQty, ' : QPA: ', TRIM(qpa)+0 ,          \n" +
                "            (CASE WHEN connecterTypeID = -2 THEN CONCAT(' : Requested Pin:',TRIM(reqQty*numOfPosition)+0) ELSE '' END),' : Quoted QTY: ', a.quoteQty,           \n" +
                "            ' : Excess QTY: ', a.excessqty, ' @ $', TRIM(a.unitPrice)+0,' / ',(CASE WHEN connecterTypeID = -2 THEN 'Pin' ELSE a.unitName END),          \n" +
                "            ' : Selected part contains excess material.') AS BOMIssue          \n" +
                "			FROM                      \n" +
                "			(                      \n" +
                "				SELECT rcl.id, rclq.qtyID, rclq.unitPrice, rcl.lineID, rcl.rfqAssyID, rcl.uomID, rcl.refDesig, raq.requestQty, rcl.qpa,          \n" +
                "                TRIM(raq.requestQty * rcl.qpa)+0 reqQty, rclq.quoteQty, rclq.componentID,fun_getUnitNameByID(rcl.uomID) AS unitName,                         \n" +
                "				(CASE WHEN com.connecterTypeID = -2 THEN           \n" +
                "                TRIM(rclq.quoteQty - (raq.requestQty * rcl.qpa * rcl.numOfPosition))+0           \n" +
                "                ELSE TRIM(rclq.quoteQty - (raq.requestQty * rcl.qpa))+0 END) excessqty, rl.custPN,rl.customerRev, com.connecterTypeID, rcl.numOfPosition                  \n" +
                "				FROM rfq_consolidated_mfgpn_lineitem rcl                      \n" +
                "				LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID                      \n" +
                "				LEFT JOIN rfq_assy_quantity raq ON rclq.qtyID = raq.id                      \n" +
                "				LEFT JOIN component com ON com.id = rclq.componentID                      \n" +
                "				LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID            \n" +
                "				WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.finalprice IS NOT NULL AND rcl.isPurchase = 1                      \n" +
                "				GROUP BY rcl.id , rclq.qtyID                      \n" +
                "				HAVING excessqty > 0                      \n" +
                "			) a                      \n" +
                "			ORDER BY requestQty, a.lineID ;           \n" +
                "  \n" +
                "		# Get Custome Consigned Detail              \n" +
                "			SELECT TRIM(rcl.lineID) + 0 AS lineID , fun_ConvertRefdesgString(rcl.refDesig) AS refDesg, rl.custPN AS CPN, rl.customerRev AS CPNRev,          \n" +
                "            fun_getMfgCodeByPartID(rcla.mfgPNID) AS mfrCode, fun_getMFGPNByID(rcla.mfgPNID) AS mfrPN,          \n" +
                "            'Customer Consigned Items' AS BOMIssue          \n" +
                "			FROM rfq_consolidated_mfgpn_lineitem rcl          \n" +
                "			JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON rcl.id = rcla.consolidateID          \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID           \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID AND rcl.isDeleted = 0 AND rcl.isPurchase = 0          \n" +
                "			GROUP BY rcl.id          \n" +
                "			ORDER BY rcl.lineID;          \n" +
                "  \n" +
                "		# get Unquoted Line item Details          \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID,fun_ConvertRefdesgString(a.refDesig) AS refDesg, a.custPN AS CPN, a.customerRev AS CPNRev,           \n" +
                "            CONCAT(GROUP_CONCAT(CONCAT(fun_getMfgCodeByPartID(rcla.mfgPNID),' : ', fun_getMFGPNByID(rcla.mfgPNID)) SEPARATOR ' | '), ' : Requested QTY: ', a.requestQty, '  : Unquoted quantity.') AS BOMIssue          \n" +
                "			FROM                      \n" +
                "			(                      \n" +
                "				SELECT rcl.id, rcl.lineID, rcl.rfqAssyID, rcl.refDesig, GROUP_CONCAT(raq.requestQty) requestQty ,          \n" +
                "                rl.custPN,rl.customerRev                      \n" +
                "				FROM rfq_consolidated_mfgpn_lineitem rcl                      \n" +
                "				LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID                      \n" +
                "				LEFT JOIN rfq_assy_quantity raq ON rclq.qtyID = raq.id                      \n" +
                "				LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID                      \n" +
                "				WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.finalprice IS NULL AND rcl.isPurchase = 1                      \n" +
                "				GROUP BY rcl.id                      \n" +
                "			) a                       \n" +
                "			LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON a.id = rcla.consolidateID                      \n" +
                "			GROUP BY a.id                      \n" +
                "			ORDER BY a.lineID;          \n" +
                "  \n" +
                "		# get Unquoted Labor Detail          \n" +
                "			SELECT assyName AS PIDCode,CONCAT(' Mounting Type: ', mountingType,' QPA: ',TRIM(totalQPA)+0,' Quantity: ',  GROUP_CONCAT(TRIM(assyQPA*quantity)+0),' ', \"Labor does not considered.\") BOMIssue          \n" +
                "            FROM (                      \n" +
                "					SELECT fun_getAssyNameByID(ramd.partID) assyName, fun_getMountingTypeNameByID(ramd.mountingTypeID) mountingType,                       \n" +
                "					(SELECT SUM(perBuildQty) FROM rfq_labor_assy_qpa_detail WHERE subAssyID = ramd.partID AND rfqAssyID =  ramd.rfqAssyID AND isDeleted = 0) assyQPA,                       \n" +
                "					(SELECT requestQty FROM rfq_assy_quantity WHERE id = raql.rfqAssyQtyID) quantity, ramd.totalQPA, ramd.lineCount, raql.perAssyPrice,                      \n" +
                "					 raql.price, (SELECT MAX(`level`) FROM rfq_labor_assy_qpa_detail WHERE subAssyID = ramd.partID AND isDeleted = 0 AND rfqAssyID = ramd.rfqAssyID)assyLevel                       \n" +
                "					 FROM rfq_assy_qtywise_bom_laborcosting_detail raql                      \n" +
                "					JOIN rfq_assy_labor_bom_mountingtype_qpa_detail ramd ON ramd.id = raql.rfqAssyBOMMountingID AND ramd.isDeleted = 0                      \n" +
                "					WHERE raql.isDeleted  = 0 AND ramd.rfqAssyID = prfqAssyID AND ramd.mountingTypeID IS NOT NULL AND raql.price = 0                      \n" +
                "			)a                      \n" +
                "			GROUP BY a.assyName, a.mountingType                      \n" +
                "			ORDER BY assyLevel ASC;              \n" +
                "  \n" +
                "		# get Low Stock Alert details          \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID ,fun_ConvertRefdesgString(a.refDesig) AS refDesg, a.custPN AS CPN, a.customerRev AS CPNRev,          \n" +
                "            fun_getMfgCodeByPartID(a.componentID) AS mfrCode, fun_getMFGPNByID(a.componentID) AS mfrPN, a.isCustom AS isCustom,  fun_getComponentStock(a.componentID) AS actualStock,        \n" +
                "            CONCAT('Requested QTY: ', reqQty, ' : Supplier Stock: ', TRIM(a.grossStock)+0, '  : Supplier does not having sufficient stock for selected part.') AS BOMIssue          \n" +
                "			FROM          \n" +
                "			(          \n" +
                "				SELECT rcl.id, rclq.qtyID, rcl.lineID, rcl.refDesig, rcl.rfqAssyID, raq.requestQty, rcl.qpa, rclq.quoteQty, c.isCustom,          \n" +
                "				TRIM(raq.requestQty * rcl.qpa)+0 reqQty, ifnull(rclq.grossStock,0) grossStock, rclq.currentStock,rl.custPN,rl.customerRev,rclq.componentID          \n" +
                "				FROM rfq_consolidated_mfgpn_lineitem rcl          \n" +
                "				LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID          \n" +
                "				LEFT JOIN rfq_assy_quantity raq ON rclq.qtyID = raq.id          \n" +
                "				LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID        \n" +
                "				LEFT JOIN component c ON c.id = rclq.componentID           \n" +
                "				WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.finalprice IS NOT NULL AND rcl.isPurchase = 1          \n" +
                "				GROUP BY rcl.id , rclq.qtyID          \n" +
                "				HAVING reqQty > grossStock          \n" +
                "			) a         \n" +
                "			WHERE a.isCustom = 0       \n" +
                "			ORDER BY a.lineID;          \n" +
                "  \n" +
                "		# Get Long Lead Time Parts Detail          \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID, fun_ConvertRefdesgString(a.refDesig) AS refDesg, a.custPN AS CPN, a.customerRev AS CPNRev,          \n" +
                "            fun_getMfgCodeByPartID(a.componentID) AS mfrCode, fun_getMFGPNByID(a.componentID) AS mfrPN,          \n" +
                "            CONCAT('Requested QTY: ', reqQty, ' : Supplier Stock: ', TRIM(a.grossStock)+0, ' : Lead time: ', a.leadTime, ' week            \n" +
                "			: Lead time is high for selected part.') AS BOMIssue, isCustom , fun_getComponentStock(a.componentID) AS actualStock          \n" +
                "			FROM                      \n" +
                "			(                      \n" +
                "				SELECT rcl.id, rclq.qtyID, rcl.lineID, rcl.refDesig, rcl.rfqAssyID, raq.requestQty, rcl.qpa, rclq.quoteQty,rclq.componentID,c.isCustom,          \n" +
                "                TRIM(raq.requestQty * rcl.qpa)+0 reqQty, ifnull(grossStock,0) grossStock, IFNULL(rclq.leadTime,0)leadTime,rl.custPN,rl.customerRev          \n" +
                "                FROM rfq_consolidated_mfgpn_lineitem rcl          \n" +
                "                LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID          \n" +
                "                LEFT JOIN rfq_assy_quantity raq ON rclq.qtyID = raq.id          \n" +
                "                LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID         \n" +
                "                LEFT JOIN component c ON c.id = rclq.componentID        \n" +
                "                WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.finalprice IS NOT NULL AND rcl.isPurchase = 1          \n" +
                "                GROUP BY rcl.id , rclq.qtyID          \n" +
                "                HAVING grossStock < reqQty          \n" +
                "			) a          \n" +
                "            ORDER BY a.lineID;          \n" +
                "  \n" +
                "		# get Obsolete Part Detail          \n" +
                "			SELECT TRIM(rcl.lineID) + 0 AS lineID , fun_ConvertRefdesgString(rcl.refDesig) AS refDesg, rl.custPN AS CPN, rl.customerRev AS CPNRev,          \n" +
                "            fun_getMfgCodeByPartID(rcla.mfgPNID) AS mfrCode, fun_getMFGPNByID(rcla.mfgPNID) AS mfrPN,          \n" +
                "            CONCAT('Part is Obsoleted.') AS BOMIssue          \n" +
                "            FROM rfq_consolidated_mfgpn_lineitem rcl          \n" +
                "			JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON rcl.id = rcla.consolidateID          \n" +
                "			JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID AND rclq.componentID = rcla.mfgPNID          \n" +
                "			JOIN component com ON com.id = rcla.mfgPNID AND partstatus = (SELECT id FROM component_partstatusmst WHERE `name` = 'Obsolete')          \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID          \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0          \n" +
                "			GROUP BY rcl.id          \n" +
                "			ORDER BY rcl.lineID;          \n" +
                "  \n" +
                "		# Get Part LOA Details          \n" +
                "			SELECT TRIM(rcl.lineID) + 0 AS lineID ,fun_ConvertRefdesgString(rcl.refDesig) AS refDesg,rl.custPN AS CPN, rl.customerRev AS CPNRev,          \n" +
                "            fun_getMfgCodeByPartID(rclq.componentID) AS mfrCode, fun_getMFGPNByID(rclq.componentID) AS mfrPN, rclq.LOAprice,          \n" +
                "            CONCAT(CONCAT('LOA Price: $',CAST(rclq.LOAprice AS DECIMAL(10,5))),' : LOA Price given for part.') AS BOMIssue          \n" +
                "			FROM rfq_consolidated_mfgpn_lineitem rcl                      \n" +
                "			JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON rcl.id = rcla.consolidateID                      \n" +
                "			JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID                      \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID                      \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.LOAprice IS NOT NULL                      \n" +
                "			GROUP BY rcl.id,rclq.componentID                      \n" +
                "			ORDER BY rcl.lineID;           \n" +
                "  \n" +
                "		# Get BOM Issue detail          \n" +
                "			SELECT AssyPN AS PIDCode,TRIM(lineID)+0 AS lineID,fun_ConvertRefdesgString(refDesig) AS refDesg,LEVEL,custPN AS CPN, customerRev AS CPNRev,          \n" +
                "            alternatepartmfg AS mfrCode, alternatepart AS mfrPN, approvedBy,          \n" +
                "            `comment` AS BOMIssue       \n" +
                "			FROM leveldata                      \n" +
                "			WHERE requiredToShowOnQuoteSummary = 1                          \n" +
                "			ORDER BY LEVEL , lineID;           \n" +
                "  \n" +
                "  \n" +
                "	END IF;          \n" +
                "		# get Issues Require Customer Engineering Resolution detail          \n" +
                "            SELECT TRIM(lineID)+0 AS lineID,PIDCode,BOMIssue,issueType,refSubmittedQuoteID          \n" +
                "            FROM rfq_quote_issue_history a          \n" +
                "            WHERE issueType = \"CustomerEngineeringResolution\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID AND isDeleted = 0          \n" +
                "			ORDER BY a.lineID;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2782,'2.00','V1','Costing activity start stop related change - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2782:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-08-2020  *********************************** */
                "UPDATE `page_detail` SET `iconClass` = 'icons-calibration' WHERE pageRoute = 'app.managecalibrationdetails';  \n" +
                "UPDATE `page_detail` SET `iconClass` = 'icons-calibration' WHERE pageRoute = 'app.calibrationdetails';  \n" +
                /* **************************** Add Script Version -> 12-08-2020  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2783,'2.00','V1','calibration menu Icon change - Ashish '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2783:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "select chartRawDataCatID into @chartRawDataCatID from chart_rawdata_category   \n" +
                "where dbViewName='vu_kit_plan_release_status_report';  \n" +

                "UPDATE `chart_rawdata_category_fields` SET `field` = 'kitReturnByName'   \n" +
                "WHERE (`chartRawdataCatID` = (select @chartRawdataCatID) and displayName='Kit Returned By');  \n" +

                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "DROP VIEW IF EXISTS `vu_kit_plan_release_status_report`;  \n" +
                "CREATE VIEW `vu_kit_plan_release_status_report` AS  \n" +
                "    SELECT   \n" +
                "        `a`.`id` AS `id`,  \n" +
                "        `a`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "        `a`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "        `s`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "        `s`.`poNumber` AS `poNumber`,  \n" +
                "        `a`.`refAssyId` AS `refAssyId`,  \n" +
                "        `c`.`PIDCode` AS `assyPIDCode`,  \n" +
                "        `c`.`nickName` AS `assyNickName`,  \n" +
                "        `c`.`mfgPN` AS `assyMFRPN`,  \n" +
                "        `a`.`subAssyID` AS `subAssyID`,  \n" +
                "        `sc`.`PIDCode` AS `subAssyPIDCode`,  \n" +
                "        `sc`.`nickName` AS `subAssyNickName`,  \n" +
                "        `sc`.`mfgPN` AS `subAssyMFRPN`,  \n" +
                "        `sd`.`qty` AS `poQty`,  \n" +
                "        `sd`.`mrpQty` AS `mrpQty`,  \n" +
                "        `sd`.`kitQty` AS `kitQty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`subAssyID` IS NOT NULL) THEN CONCAT(`sd`.`kitNumber`, '+', `sc`.`PIDCode`)  \n" +
                "            ELSE `sd`.`kitNumber`  \n" +
                "        END) AS `kitNumber`,  \n" +
                "        `a`.`planPOQty` AS `planPOQty`,  \n" +
                "        `a`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "        `a`.`poDueDate` AS `poDueDate`,  \n" +
                "        `a`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "        `a`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "        `a`.`materialDockDate` AS `materialDockDate`,  \n" +
                "        `a`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "        `a`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
                "        `a`.`releasedBy` AS `releasedBy`,  \n" +
                "        `a`.`kitReturnBy` AS `kitReturnBy`,  \n" +
                "        FUN_GETUSERNAMEBYID(`a`.`kitReturnBy`) AS `kitReturnByName`,  \n" +
                "        FUN_GETUSERNAMEBYID(`a`.`releasedBy`) AS `releasedByName`,  \n" +
                "        `a`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "        `a`.`woID` AS `woID`,  \n" +
                "        FUN_GETWORKORDERNUMBERBYID(`a`.`woID`) AS `workorderNumber`,  \n" +
                "        `a`.`releasedNote` AS `releasedNote`,  \n" +
                "        (CASE       \n" +
                "            WHEN (`a`.`kitStatus` = 'R') THEN 'Released'  \n" +
                "            WHEN (`a`.`kitStatus` = 'P') THEN 'In Progress'  \n" +
                "            ELSE '-'  \n" +
                "        END) AS `kitStatus`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`kitReturnStatus` IS NOT NULL) THEN 'Returned'  \n" +
                "            WHEN (`a`.`kitStatus` = 'R') THEN 'Not Returned'  \n" +
                "            ELSE 'N/A'  \n" +
                "        END) AS `kitReturnStatus`,  \n" +
                "        `a`.`kitReturnDate` AS `kitReturnDate`,  \n" +
                "        `a`.`refPlanId` AS `refPlanId`  \n" +
                "    FROM  \n" +
                "        (((((SELECT   \n" +
                "            `s`.`id` AS `id`,  \n" +
                "                `s`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                `s`.`subAssyID` AS `subAssyID`,  \n" +
                "                `s`.`poQty` AS `planPOQty`,  \n" +
                "                `s`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "                `s`.`poDueDate` AS `poDueDate`,  \n" +
                "                `s`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "                `s`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "                `s`.`materialDockDate` AS `materialDockDate`,  \n" +
                "                `s`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "                `s`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
                "                `s`.`releasedBy` AS `releasedBy`,  \n" +
                "                `s`.`kitReturnBy` AS `kitReturnBy`,  \n" +
                "                `s`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "                `s`.`woID` AS `woID`,  \n" +
                "                `s`.`releasedNote` AS `releasedNote`,  \n" +
                "                `s`.`kitStatus` AS `kitStatus`,  \n" +
                "                `s`.`kitReturnStatus` AS `kitReturnStatus`,  \n" +
                "                `s`.`kitReturnDate` AS `kitReturnDate`,  \n" +
                "                `s`.`refPlanId` AS `refPlanId`  \n" +
                "        FROM  \n" +
                "            `salesorder_plan_detailsmst` `s`  \n" +
                "        WHERE  \n" +
                "            (`s`.`isDeleted` = 0) UNION ALL SELECT   \n" +
                "            `s`.`id` AS `id`,  \n" +
                "                `s`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                `kassy`.`partId` AS `subAssyID`,  \n" +
                "                (`kassy`.`perAssyBuildQty` * `s`.`poQty`) AS `planPOQty`,  \n" +
                "                (`kassy`.`perAssyBuildQty` * `s`.`kitReleaseQty`) AS `kitReleaseQty`,  \n" +
                "                `s`.`poDueDate` AS `poDueDate`,  \n" +
                "                `s`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "                `s`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "                `s`.`materialDockDate` AS `materialDockDate`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseKitNumber`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releaseKitNumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`actualKitReleaseDate`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `actualKitReleaseDate`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedBy`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releasedBy`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnBy`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `kitReturnBy`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseTimeFeasibility`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releaseTimeFeasibility`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`woID`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `woID`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedNote`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releasedNote`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitStatus`  \n" +
                "                    ELSE 'P'  \n" +
                "                END) AS `kitStatus`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnStatus`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `kitReturnStatus`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnDate`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `kitReturnDate`,  \n" +
                "                `s`.`refPlanId` AS `refPlanId`  \n" +
                "        FROM  \n" +
                "            (`kit_allocation_assy_detail` `kassy`  \n" +
                "        LEFT JOIN `salesorder_plan_detailsmst` `s` ON (((`s`.`salesOrderDetID` = `kassy`.`refSalesOrderDetID`)  \n" +
                "            AND ISNULL(`s`.`subAssyID`))))  \n" +
                "        WHERE  \n" +
                "            ((`kassy`.`isDeleted` = 0)  \n" +
                "                AND (`kassy`.`bomAssyLevel` = 1)  \n" +
                "                AND (EXISTS( SELECT   \n" +
                "                    'Y'  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sp`  \n" +
                "                WHERE  \n" +
                "                    ((`sp`.`isDeleted` = 0)  \n" +
                "                        AND (`sp`.`refPlanId` = `s`.`id`)  \n" +
                "                        AND (`kassy`.`partId` = `sp`.`subAssyID`)))  \n" +
                "                IS FALSE))) `a`  \n" +
                "        JOIN `salesorderdet` `sd` ON ((`a`.`salesOrderDetID` = `sd`.`id`)))  \n" +
                "        JOIN `salesordermst` `s` ON ((`sd`.`refSalesOrderID` = `s`.`id`)))  \n" +
                "        JOIN `component` `c` ON ((`a`.`refAssyId` = `c`.`id`)))  \n" +
                "        LEFT JOIN `component` `sc` ON ((`a`.`subAssyID` = `sc`.`id`)))  \n" +
                "    WHERE  \n" +
                "        ((`a`.`salesOrderDetID` IS NOT NULL)  \n" +
                "            AND (`a`.`refAssyId` IS NOT NULL))  \n" +
                "    ORDER BY `a`.`salesOrderDetID` , `a`.`refAssyId` , `a`.`subAssyID`;  \n" +
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2784,'2.00','V1','MIS Report -kit plan release - CHARMI'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 2784:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_supplier_quote` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_supplier_quote`(      \n" +
                "	IN tableName VARCHAR(255),      \n" +
                "	IN IDs LONGTEXT,      \n" +
                "	IN deletedBy INT,      \n" +
                "	IN entityID VARCHAR(255),      \n" +
                "	IN refrenceIDs LONGTEXT,      \n" +
                "	IN countList INT,      \n" +
                "    IN pRoleID INT      \n" +
                "    )  \n" +
                "BEGIN              \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION              \n" +
                "BEGIN              \n" +
                "	ROLLBACK;              \n" +
                "	RESIGNAL;              \n" +
                "END;              \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING              \n" +
                "BEGIN              \n" +
                "	ROLLBACK;              \n" +
                "	RESIGNAL;              \n" +
                "END;                   \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempsupplierquote;        \n" +
                "	-- delete supplier quote mst if reference ID is not null          \n" +
                "	-- refernece ID is equal to salesOrderDetID      \n" +
                "    IF(IDs <> '') THEN      \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSupplier_quote_mst as                                                                                                                                    \n" +
                "			 (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_part_attribute\" else \"\" end as msg FROM  supplier_quote_part_attribute     \n" +
                "			 WHERE deletedAt IS NULL AND  supplierQuotePartDetID IN(',IDs,') LIMIT 1)           \n" +
                "										  UNION ALL            \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_part_price\" else \"\" end as msg FROM supplier_quote_part_price where supplierQuotePartDetID IN(',IDs,') AND deletedAt IS NULL LIMIT 1)                                                                        \n" +
                "		');            \n" +
                "		PREPARE stmt FROM @SQL;                    \n" +
                "		EXECUTE stmt;                \n" +
                "  \n" +
                "	IF(countList=FALSE) THEN                                                                   \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempSupplier_quote_mst t)=0 THEN                       \n" +
                "			START TRANSACTION;    \n" +
                "            SET @SQl3 =CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS tempsupplierquote AS SELECT sq.id,    \n" +
                "				(SELECT COUNT(1) FROM supplier_quote_parts_det sqd WHERE sqd.supplierQuoteMstID=sq.id AND sqd.deletedAt IS NULL) cnt              \n" +
                "					FROM supplier_quote_mst sq WHERE deletedAt IS NULL AND            \n" +
                "					id IN (SELECT supplierQuoteMstID FROM supplier_quote_parts_det WHERE id IN (',IDs,'))');		                                                                          \n" +
                "			 PREPARE stmt3 FROM @SQL3;                                                                          \n" +
                "			 EXECUTE stmt3;    \n" +
                "  \n" +
                "            SET @SQl2 = CONCAT('update supplier_quote_parts_det set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');		                                                                          \n" +
                "				PREPARE stmt2 FROM @SQL2;                                                                          \n" +
                "				EXECUTE stmt2;       \n" +
                "			    SELECT * FROM tempSupplier_quote_mst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";      \n" +
                "  \n" +
                "  \n" +
                "			SET @SQl4 = CONCAT('update supplier_quote_mst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"   \n" +
                "            where id IN(select id from tempsupplierquote where cnt=0) and deletedAt is NULL');		                                                                          \n" +
                "			PREPARE stmt4 FROM @SQL4;                                                                          \n" +
                "			EXECUTE stmt4;             \n" +
                "            SELECT * FROM tempSupplier_quote_mst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";           \n" +
                "            COMMIT;       \n" +
                "        ELSE                                                                    \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempSupplier_quote_mst t;              \n" +
                "	    END IF;            \n" +
                "	 ELSE          \n" +
                "                  SELECT t1.cnt,t2.display_page_name AS msg          \n" +
                "                                   FROM tempSupplier_quote_mst t1          \n" +
                "                                    INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name          \n" +
                "                                    WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"          \n" +
                "                                    ORDER BY t2.display_page_name;                        \n" +
                "     END IF;                    \n" +
                "	 DROP TABLE tempSupplier_quote_mst;       \n" +
                "ELSE    \n" +
                "		SET @SQl5 = CONCAT('update supplier_quote_mst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in (', refrenceIDs ,') and deletedAt is NULL');		                                                                          \n" +
                "		PREPARE stmt5 FROM @SQl5;                                                                          \n" +
                "		EXECUTE stmt5;           \n" +
                "		SELECT \"\" TotalCount ,\"\" AS Message FROM supplier_quote_mst WHERE id IN(refrenceIDs) AND deletedAt IS NULL LIMIT 1;       \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveSupplierQuote` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuote`(                                                      \n" +
                "	IN ppageIndex INT(11),                                                      \n" +
                "	IN precordPerPage INT(11),                                                      \n" +
                "	IN pOrderBy VARCHAR(255),                                                      \n" +
                "	IN pWhereClause VARCHAR(16383),                   \n" +
                "    IN pPartId INT(11),      \n" +
                "    IN pMfgType VARCHAR(255)      \n" +
                ")  \n" +
                "BEGIN                                                      \n" +
                "  \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                                                      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                      \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                   \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;          \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;     \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"              			              \n" +
                "            SELECT * FROM   \n" +
                "            (SELECT 						        \n" +
                "				s.id,        \n" +
                "                sqpd.id AS supplierQuotePartDetID,          \n" +
                "				fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		        \n" +
                "                fun_getMfgCodeByID(c.mfgcodeID) mfgCode,        \n" +
                "				s.supplierID,        \n" +
                "                sqpd.partID,        \n" +
                "				c.mfgPN AS mfgPN,        \n" +
                "                c.mfgcodeID,        \n" +
                "				sc.mfgPN AS supplierPN,        \n" +
                "				sqpd.supplierPartID,            \n" +
                "                m.mfgName AS supplier,        \n" +
                "                s.quoteNumber,        \n" +
                "                s.quoteDate,        \n" +
                "                s.reference,        \n" +
                "                s.quoteStatus,        \n" +
                "                (                                    \n" +
                "				 CASE  WHEN (s.quoteStatus = 'D') THEN                                     \n" +
                "				   'Draft'                                                                         \n" +
                "				  WHEN (s.quoteStatus = 'P') THEN                                     \n" +
                "				   'Published'                                                                        \n" +
                "				  ELSE                                     \n" +
                "				   ''                                     \n" +
                "				 END                                    \n" +
                "				) AS `statusConvertedValue`,           \n" +
                "                (                \n" +
                "				CASE                                               \n" +
                "					WHEN (`sqpd`.`isActive` = 0) THEN 'Inactive'                                                       \n" +
                "					WHEN (`sqpd`.`isActive` = 1) THEN 'Active'                                               \n" +
                "					ELSE ''                                               \n" +
                "					END                \n" +
                "				) AS `isActiveConvertedValueDetail`,        \n" +
                "                sqpd.isActive,        \n" +
                "                c.isCustom,        \n" +
                "				sc.isCustom AS isCustomSupplier,        \n" +
                "				fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,        \n" +
                "				fun_getRoHSNameByID(c.RoHSStatusID) rohsName,                                                            \n" +
                "				fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	        \n" +
                "				fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,         \n" +
                "				fun_getPartAttibutesBySupplierQuoteDetailID(sqpd.id) AS attributesList,        \n" +
                "				fun_getPartPricingCountBySupplierQuoteDetailID(sqpd.id) AS pricingCount,    				    \n" +
                "				fun_getUserNameByID(sqpd.createdBy) createdby,                      \n" +
                "				fun_getUserNameByID(sqpd.updatedBy) updatedby,      \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(sqpd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,	    \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(sqpd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,      \n" +
                "				fun_getRoleByID(sqpd.updateByRoleId) updatedbyRole    \n" +
                "  \n" +
                "			FROM        \n" +
                "				supplier_quote_parts_det sqpd	        \n" +
                "			LEFT JOIN supplier_quote_mst s ON sqpd.supplierQuoteMstID = s.id          \n" +
                "            LEFT JOIN 	component c ON sqpd.partID = c.id AND c.deletedAt IS NULL                            \n" +
                "			LEFT JOIN	component sc ON sqpd.supplierPartID = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL                 \n" +
                "            LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.deletedAt IS NULL            \n" +
                "            WHERE        \n" +
                "				sqpd.deletedAt is NULL AND         \n" +
                "                s.deletedAt IS NULL                      \n" +
                "            UNION ALL            			  \n" +
                "                SELECT s.id,        \n" +
                "                NULL supplierQuotePartDetID,          \n" +
                "				NULL mfgName,		        \n" +
                "                NULL  mfgCode,        \n" +
                "				s.supplierID,        \n" +
                "                NULL partID,        \n" +
                "				NULL mfgPN,        \n" +
                "                NULL mfgcodeID,        \n" +
                "				NULL supplierPN,        \n" +
                "				NULL supplierPartID,            \n" +
                "                m.mfgName AS supplier,        \n" +
                "                s.quoteNumber,        \n" +
                "                s.quoteDate,        \n" +
                "                s.reference,        \n" +
                "                s.quoteStatus,        \n" +
                "                (                                    \n" +
                "				 CASE  WHEN (s.quoteStatus = 'D') THEN                                     \n" +
                "				   'Draft'                                                                         \n" +
                "				  WHEN (s.quoteStatus = 'P') THEN                                     \n" +
                "				   'Published'                                                                        \n" +
                "				  ELSE                                     \n" +
                "				   ''                                     \n" +
                "				 END                                    \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "                NULL isActiveConvertedValueDetail,  \n" +
                "                NULL isActive,        \n" +
                "                NULL isCustom,        \n" +
                "				NULL isCustomSupplier,        \n" +
                "				NULL rohsIcon,        \n" +
                "				NULL rohsName,                                                            \n" +
                "				NULL supplierRohsIcon, 	        \n" +
                "				NULL supplierRohsName,         \n" +
                "				NULL attributesList,        \n" +
                "				NULL pricingCount,    				    \n" +
                "				NULL createdby,                      \n" +
                "				NULL updatedby,      \n" +
                "				NULL createdAt,	    \n" +
                "				NULL updatedAt,      \n" +
                "				NULL updatedbyRole    \n" +
                "              FROM        \n" +
                "				supplier_quote_mst s	        \n" +
                "            LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.deletedAt IS NULL                        \n" +
                "			WHERE s.id not in(select supplierQuoteMstID from supplier_quote_parts_det sq where sq.deletedAt IS NULL) and   \n" +
                "                s.deletedAt is null	) a  WHERE 1=1                \n" +
                "                \");                          \n" +
                "  \n" +
                "	IF (pMfgType != '' AND pMfgType IS NOT NULL AND pPartId IS NOT NULL) THEN      \n" +
                "		IF(pMfgType = 'MFG' ) THEN      \n" +
                "			SET @temp_Sproc_RetrieveSupplierQuote  = CONCAT(@temp_Sproc_RetrieveSupplierQuote, ' AND partID = ', pPartId, ' ');      \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrieveSupplierQuote  = CONCAT(@temp_Sproc_RetrieveSupplierQuote, ' AND supplierPartID = ', pPartId, ' ');      \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;                                                      \n" +
                "	ELSE                                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                      \n" +
                "	END IF;	                                                      \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                      \n" +
                "		SET pWhereClause = '1=1' ;                                                      \n" +
                "	END IF;	                                                      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                      \n" +
                "	ELSE	                                                      \n" +
                "		SET rowNumWhere = '';                                                      \n" +
                "	END IF;	                                                       \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */                                   \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuote,\" ) c where 1=1 and \", pWhereClause);                                                     \n" +
                "    PREPARE query1 FROM @SQLStatement1;                                  \n" +
                "	EXECUTE query1;                                  \n" +
                "	DEALLOCATE PREPARE query1;                                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuote,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                	                             \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "	EXECUTE query2;                                  \n" +
                "	DEALLOCATE PREPARE query2;                               \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SupplierQuoteCopy` ;  \n" +
                "CREATE PROCEDURE `Sproc_SupplierQuoteCopy`(                                                  \n" +
                "	IN pSupplierQuoteID INT(11),                                                  \n" +
                "	IN pSupplierQuotePartDetID INT(11),    \n" +
                "    IN pNewQuoteNumber VARCHAR(50),    \n" +
                "	IN pNewQuoteDate DATE,    \n" +
                "    IN pNewReferences VARCHAR(255),    \n" +
                "    IN pUserId INT(11)    \n" +
                ")  \n" +
                "BEGIN                    \n" +
                "	DECLARE V_EXIST INT;	        \n" +
                "    DECLARE V_INSERTEDSQID INT;    \n" +
                "    DECLARE EXIT HANDLER FOR SQLEXCEPTION        \n" +
                "BEGIN        \n" +
                "	ROLLBACK;        \n" +
                "	RESIGNAL;        \n" +
                "END;        \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING        \n" +
                "  BEGIN        \n" +
                "	ROLLBACK;        \n" +
                "	RESIGNAL;        \n" +
                "END;        \n" +
                "    START TRANSACTION;      \n" +
                "    IF(pSupplierQuotePartDetID IS NOT NULL) THEN    \n" +
                "  \n" +
                "		INSERT INTO supplier_quote_parts_det (supplierQuoteMstID,partID,supplierPartID,isActive,createdBy, updatedBy,createdAt,updatedAt)    \n" +
                "		SELECT pSupplierQuoteID,sqpd.partID,sqpd.supplierPartID,sqpd.isActive,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()     \n" +
                "		FROM supplier_quote_parts_det sqpd    \n" +
                "		WHERE sqpd.id = pSupplierQuotePartDetID AND sqpd.deletedAt IS NULL;    \n" +
                "  \n" +
                "		SET V_INSERTEDSQID = LAST_INSERT_ID();     \n" +
                "  \n" +
                "		INSERT INTO supplier_quote_part_attribute(supplierQuotePartDetID,attributeID,createdBy, updatedBy,createdAt,updatedAt)    \n" +
                "		SELECT V_INSERTEDSQID,sqpa.attributeID,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()     \n" +
                "		FROM supplier_quote_part_attribute sqpa    \n" +
                "		WHERE sqpa.supplierQuotePartDetID = pSupplierQuotePartDetID AND sqpa.deletedAt IS NULL;    \n" +
                "  \n" +
                "		INSERT INTO supplier_quote_part_price(supplierQuotePartDetID,itemNumber,qty,leadTime,UnitOfTime,UnitPrice,`min`,mult,stock,packageID,reeling,NCNR,createdBy, updatedBy,createdAt,updatedAt)    \n" +
                "		SELECT V_INSERTEDSQID,sqpp.itemNumber,sqpp.qty,sqpp.leadTime,sqpp.UnitOfTime,sqpp.UnitPrice,sqpp.`min`,sqpp.mult,sqpp.stock,sqpp.packageID,sqpp.reeling,sqpp.NCNR,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()     \n" +
                "		FROM supplier_quote_part_price sqpp    \n" +
                "		WHERE sqpp.supplierQuotePartDetID = pSupplierQuotePartDetID AND sqpp.deletedAt IS NULL;    \n" +
                "  \n" +
                "		INSERT INTO supplier_quote_part_price_attribute(supplierQuotePartPriceID,attributeID,Price,createdBy, updatedBy,createdAt,updatedAt)    \n" +
                "		SELECT newRec.id,sqppa.attributeID,sqppa.Price,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()     \n" +
                "		FROM supplier_quote_part_price_attribute sqppa			     \n" +
                "		JOIN     \n" +
                "		(SELECT sqp.id,sqpd.supplierQuoteMstID,sqpd.partID,sqp.supplierQuotePartDetID,sqp.itemNumber    \n" +
                "		FROM supplier_quote_part_price sqp     \n" +
                "		LEFT JOIN supplier_quote_parts_det sqpd ON sqp.supplierQuotePartDetID = sqpd.id AND sqpd.deletedAt IS NULL     \n" +
                "		WHERE sqpd.id=pSupplierQuotePartDetID AND sqp.deletedAt IS NULL    \n" +
                "		) AS oldRec ON oldRec.id = sqppa.supplierQuotePartPriceID    \n" +
                "		LEFT JOIN (SELECT sqp.id,sqpd.supplierQuoteMstID,sqpd.partID,sqp.supplierQuotePartDetID,sqp.itemNumber FROM supplier_quote_part_price sqp     \n" +
                "		LEFT JOIN supplier_quote_parts_det sqpd ON sqp.supplierQuotePartDetID = sqpd.id AND sqpd.deletedAt IS NULL     \n" +
                "		WHERE sqpd.id=V_INSERTEDSQID AND sqp.deletedAt IS NULL) AS newRec ON newRec.partID = oldRec.partID AND newRec.itemNumber = oldRec.itemNumber    \n" +
                "		WHERE sqppa.deletedAt IS NULL;										    \n" +
                "   ELSE        		    \n" +
                "		 INSERT INTO supplier_quote_mst(supplierID,quoteNumber,quoteDate,quoteStatus,`reference`,shippingAddressID,billingAddressID,createdBy, updatedBy,createdAt,updatedAt)    \n" +
                "		 SELECT supplierID,pNewQuoteNumber,pNewQuoteDate,\"D\",pNewReferences,shippingAddressID,billingAddressID,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime() FROM supplier_quote_mst WHERE id=pSupplierQuoteID AND deletedAt IS NULL;    \n" +
                "  \n" +
                "		 SELECT supplierID,pNewQuoteNumber,pNewQuoteDate,\"D\",pNewReferences,shippingAddressID,billingAddressID,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime() FROM supplier_quote_mst WHERE id=pSupplierQuoteID AND deletedAt IS NULL;    \n" +
                "		 SET V_INSERTEDSQID = LAST_INSERT_ID();     \n" +
                "		 INSERT INTO supplier_quote_parts_det (supplierQuoteMstID,partID,supplierPartID,isActive,createdBy, updatedBy,createdAt,updatedAt)    \n" +
                "		 SELECT V_INSERTEDSQID,sqpd.partID,sqpd.supplierPartID,sqpd.isActive,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime() FROM supplier_quote_parts_det sqpd WHERE sqpd.supplierQuoteMstID=pSupplierQuoteID AND sqpd.deletedAt IS NULL;    \n" +
                "  \n" +
                "		 SELECT V_INSERTEDSQID,sqpd.partID,sqpd.supplierPartID,sqpd.isActive,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime() FROM supplier_quote_parts_det sqpd WHERE sqpd.supplierQuoteMstID=pSupplierQuoteID AND sqpd.deletedAt IS NULL;    \n" +
                "		 INSERT INTO supplier_quote_part_attribute(supplierQuotePartDetID,attributeID,createdBy, updatedBy,createdAt,updatedAt)                \n" +
                "		 SELECT sqpdNew.id,sqpa.attributeID,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()      \n" +
                "		 FROM supplier_quote_part_attribute sqpa     \n" +
                "		 JOIN supplier_quote_parts_det sqpdOld ON sqpa.supplierQuotePartDetID = sqpdOld.id  AND sqpdOld.deletedAt IS NULL    \n" +
                "		 JOIN supplier_quote_parts_det sqpdNew ON sqpdOld.partID = sqpdNew.partID AND sqpdNew.supplierQuoteMstID=V_INSERTEDSQID AND sqpdNew.deletedAt IS NULL    \n" +
                "		 WHERE sqpdOld.supplierQuoteMstID = pSupplierQuoteID AND sqpa.deletedAt IS NULL;    \n" +
                "  \n" +
                "		 SELECT sqpdNew.id,sqpa.attributeID,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()      \n" +
                "		 FROM supplier_quote_part_attribute sqpa     \n" +
                "		 JOIN supplier_quote_parts_det sqpdOld ON sqpa.supplierQuotePartDetID = sqpdOld.id  AND sqpdOld.deletedAt IS NULL    \n" +
                "		 JOIN supplier_quote_parts_det sqpdNew ON sqpdOld.partID = sqpdNew.partID AND sqpdNew.supplierQuoteMstID=V_INSERTEDSQID AND sqpdNew.deletedAt IS NULL    \n" +
                "		 WHERE sqpdOld.supplierQuoteMstID = pSupplierQuoteID AND sqpa.deletedAt IS NULL;    \n" +
                "		INSERT INTO supplier_quote_part_price(supplierQuotePartDetID,itemNumber,qty,leadTime,UnitOfTime,UnitPrice,`min`,mult,stock,packageID,reeling,NCNR,createdBy, updatedBy,createdAt,updatedAt)    \n" +
                "		SELECT sqpdNew.id,sqpp.itemNumber,sqpp.qty,sqpp.leadTime,sqpp.UnitOfTime,sqpp.UnitPrice,sqpp.`min`,sqpp.mult,sqpp.stock,sqpp.packageID,sqpp.reeling,sqpp.NCNR,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()     \n" +
                "		FROM supplier_quote_part_price sqpp			     \n" +
                "		JOIN supplier_quote_parts_det sqpdOld ON sqpp.supplierQuotePartDetID = sqpdOld.id  AND sqpdOld.deletedAt IS NULL    \n" +
                "		JOIN supplier_quote_parts_det sqpdNew ON sqpdOld.partID = sqpdNew.partID AND sqpdNew.supplierQuoteMstID=V_INSERTEDSQID AND sqpdNew.deletedAt IS NULL			    \n" +
                "		WHERE sqpdOld.supplierQuoteMstID = pSupplierQuoteID AND sqpp.deletedAt IS NULL;    \n" +
                "		INSERT INTO supplier_quote_part_price_attribute(supplierQuotePartPriceID,attributeID,Price,createdBy, updatedBy,createdAt,updatedAt)    \n" +
                "		SELECT newRec.id,sqppa.attributeID,sqppa.Price,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()     \n" +
                "		FROM supplier_quote_part_price_attribute sqppa			     \n" +
                "		JOIN     \n" +
                "		(SELECT sqp.id,sqpd.supplierQuoteMstID,sqpd.partID,sqp.supplierQuotePartDetID,sqp.itemNumber    \n" +
                "		FROM supplier_quote_part_price sqp     \n" +
                "		LEFT JOIN supplier_quote_parts_det sqpd ON sqp.supplierQuotePartDetID = sqpd.id AND sqpd.deletedAt IS NULL     \n" +
                "		WHERE sqpd.supplierQuoteMstID=pSupplierQuoteID AND sqp.deletedAt IS NULL    \n" +
                "		) AS oldRec ON oldRec.id = sqppa.supplierQuotePartPriceID    \n" +
                "		LEFT JOIN (SELECT sqp.id,sqpd.supplierQuoteMstID,sqpd.partID,sqp.supplierQuotePartDetID,sqp.itemNumber FROM supplier_quote_part_price sqp     \n" +
                "		LEFT JOIN supplier_quote_parts_det sqpd ON sqp.supplierQuotePartDetID = sqpd.id AND sqpd.deletedAt IS NULL     \n" +
                "		WHERE sqpd.supplierQuoteMstID=V_INSERTEDSQID AND sqp.deletedAt IS NULL) AS newRec ON newRec.partID = oldRec.partID AND newRec.itemNumber = oldRec.itemNumber    \n" +
                "		WHERE sqppa.deletedAt IS NULL;							    \n" +
                "  \n" +
                "	END IF;	                 \n" +
                "    COMMIT;    \n" +
                "    SELECT 1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2785,'2.00','V1',' Supplier Quote - Dharmesh P'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2785:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-07-2020 *********************************** */
                "DROP PROCEDURE IF  EXISTS Sproc_checkDelete_workorder_cluster;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_workorder_cluster`(                                                                \n" +
                "	IN tableName VARCHAR(255),                                                                \n" +
                "	IN IDs LONGTEXT,                                                                \n" +
                "	IN deletedBy INT,                                                                \n" +
                "	IN entityID VARCHAR(255),                                                                \n" +
                "	IN refrenceIDs LONGTEXT,    \n" +
                "    IN pRoleID INT    \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                      \n" +
                "BEGIN                      \n" +
                "	ROLLBACK;                      \n" +
                "	RESIGNAL;                      \n" +
                "END;                      \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                      \n" +
                "BEGIN                      \n" +
                "	ROLLBACK;                      \n" +
                "	RESIGNAL;                      \n" +
                "END;                     \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempWorkorderCluster as                                                                \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message                                                                \n" +
                "			FROM                                                                 \n" +
                "			(                                                                \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_cluster\" else \"\" end as msg FROM workorder_operation_cluster WHERE deletedAt IS NULL AND clusterID IN(',IDs,') LIMIT 1)                                                                \n" +
                "			) q');                                                                \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                                                                \n" +
                "		EXECUTE stmt;                                                                \n" +
                "		IF (SELECT TotalCount FROM tempWorkorderCluster)=0 THEN                                                                \n" +
                "			START TRANSACTION;        \n" +
                "  \n" +
                "			/* [S] - Add Time line log for delete cluster */                                                                \n" +
                "			SELECT clusterName,woID INTO @lvClusterName,@lvWoID FROM workorder_cluster                                                                \n" +
                "			WHERE clusterID = IDs AND deletedAt IS NULL;                                                                \n" +
                "			SELECT woNumber INTO @lvWoNumber FROM workorder                                                                \n" +
                "			WHERE woID = @lvWoID AND deletedAt IS NULL ;                                                                \n" +
                "  \n" +
                "  \n" +
                "			SET @lvEventTitle = CONCAT(\"Cluster deleted from work order\");                                                                \n" +
                "			SET @lvEventDescription = CONCAT(\"Cluster \\\"\",@lvClusterName,\"\\\" deleted from work order \",@lvWoNumber,\" by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");	                                                                \n" +
                "			CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,IDs,4.04,NULL,deletedBy,3);  /* DE = DELETE */		                                                                \n" +
                "			/* [E] - Add Time line log for delete cluster */                                                                \n" +
                "  \n" +
                "			SET @SQl1 = 	CONCAT('update workorder_cluster set updatedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', updatedAt=\"',fun_DatetimetoUTCDateTime(),'\", isDeleted=',1,',deletedBy=',deletedBy,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where clusterID IN(',IDs,') and deletedAt is NULL');		                                                                \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                                \n" +
                "			EXECUTE stmt1;                                                                \n" +
                "  \n" +
                "			SELECT * FROM tempWorkorderCluster;   \n" +
                "  \n" +
                "            SET @SQL3 = 	CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS tempWOClusterCnt  \n" +
                "            AS SELECT ',@lvWoID,' woID,count(1) cnt  \n" +
                "            FROM workorder_cluster   \n" +
                "            WHERE clusterID IN (',IDs,') AND deletedAt IS NULL');                                                                \n" +
                "  \n" +
                "			PREPARE stmt3 FROM @SQL3;                                                                \n" +
                "			EXECUTE stmt3;    \n" +
                "  \n" +
                "            SET @SQl2 = 	CONCAT('update workorder set updatedBy=',deletedBy,', updateByRoleId = ',pRoleID,', updatedAt=\"',fun_DatetimetoUTCDateTime(),  \n" +
                "            '\", isClusterApplied = 0  where woID in (select woID from tempWOClusterCnt where woID = ',@lvWoID , ' and  cnt = 0 )');		                                                                \n" +
                "					PREPARE stmt2 FROM @SQL2;                                                                \n" +
                "					EXECUTE stmt2 ;                                                               \n" +
                "  \n" +
                "  \n" +
                "            DROP TABLE  IF EXISTS tempWOClusterCnt;  \n" +
                "  \n" +
                "			COMMIT;        \n" +
                "		ELSE                                                                \n" +
                "			SELECT * FROM tempWorkorderCluster;                                                                \n" +
                "		END IF;                                                                \n" +
                "		DROP TABLE tempWorkorderCluster;             \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 15-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2786,'2.00','V1','Sproc_checkDelete_workorder_cluster - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2786:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-07-2020 *********************************** */
                "UPDATE page_detail  \n" +
                "SET displayMenuName = 'Activity Entry Manually'  \n" +
                "WHERE pageName ='Manage Work Order Manual Entry';  \n" +
                /* **************************** Add Script Version -> 15-07-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2787,'2.00','V1','Sproc_checkDelete_workorder_cluster - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2787:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAvilableStockWithPackagingAliasInPins` ;  \n" +
                "CREATE FUNCTION `fun_getAvilableStockWithPackagingAliasInPins`(                                                             \n" +
                "		pLineItemId VARCHAR(10000),                                    \n" +
                "		pAssyId INT(11),                                    \n" +
                "		pSaleOrderDetailId INT(11),      \n" +
                "		pBomPin DECIMAL(18,8)                                   \n" +
                "	) RETURNS DECIMAL(18,8)  \n" +
                "BEGIN                                        \n" +
                "	DECLARE result DECIMAL(18,8);                                       \n" +
                "	DECLARE v_TotalStockInSystemRecord DECIMAL(18,8);                   \n" +
                "	DECLARE v_AllocatedToKitStock DECIMAL(18,8);               \n" +
                "	DECLARE v_NonUMIDStock DECIMAL(18,8);                               \n" +
                "  \n" +
                "	SET SESSION group_concat_max_len = 500000;             \n" +
                "  \n" +
                "	/*First get all Stock of UMID of BOM line including Packing Alias,and Line alternate parts */        \n" +
                "	SELECT 	SUM((FLOOR(IFNULL(noOfPosition, 0)/IFNULL(pBomPin, 0)) * IFNULL(pBomPin, 0)) * IFNULL(pkgUnit, 0))      \n" +
                "	INTO v_TotalStockInSystemRecord       \n" +
                "	FROM 	(      \n" +
                "		SELECT 		css.pkgUnit, c.noOfPosition                                             \n" +
                "		FROM 		component_sid_stock css        \n" +
                "		INNER JOIN 	component c ON c.id = css.refcompid AND c.isDeleted = 0                                              \n" +
                "		WHERE 		refcompid IN (                          \n" +
                "					SELECT 	mfgPNID                           \n" +
                "					FROM 	kit_allocation_lineitems_alternatepart a        \n" +
                "					WHERE 	refSalesOrderDetID = pSaleOrderDetailId                 \n" +
                "							AND (CASE WHEN pAssyId IS NULL THEN partID = partID ELSE partID = pAssyId END)                 \n" +
                "							AND FIND_IN_SET(refRfqLineitem, pLineItemId)                              \n" +
                "							AND deletedAt IS NULL           \n" +
                "					UNION        \n" +
                "					SELECT  custPNID AS mfgPNID                \n" +
                "					FROM 	kit_allocation_lineitems                 \n" +
                "					WHERE 	refSalesOrderDetID = pSaleOrderDetailId                 \n" +
                "							AND (CASE WHEN pAssyId IS NULL THEN partID = partID ELSE partID = pAssyId END)                 \n" +
                "							AND FIND_IN_SET(refRfqLineitem, pLineItemId)      \n" +
                "							AND custPNID IS NOT NULL        \n" +
                "							AND deletedAt IS NULL              \n" +
                "					UNION        \n" +
                "					SELECT 	a.componentID         \n" +
                "					FROM 	component_packagingalias a         \n" +
                "					WHERE  	a.AliasGroupId IN (      \n" +
                "							SELECT 	b.AliasGroupid       \n" +
                "							FROM 	component_packagingalias b         \n" +
                "							WHERE 	EXISTS (      \n" +
                "								SELECT 	1       \n" +
                "								FROM 	kit_allocation_lineitems_alternatepart c        \n" +
                "								WHERE 	c.mfgPNID = b.componentid       \n" +
                "										AND (CASE WHEN pAssyId IS NULL THEN c.partID = c.partID ELSE partID = pAssyId END)       \n" +
                "										AND FIND_IN_SET(refRfqLineitem, pLineItemId)                   \n" +
                "										AND c.deletedAt IS NULL       \n" +
                "								)      \n" +
                "							)                         \n" +
                "					)                                               \n" +
                "					AND IFNULL(css.isDeleted,0) = 0        \n" +
                "				) a;                                      \n" +
                "  \n" +
                "	-- v_AllocatedToKitStock                               \n" +
                "	SELECT 	SUM((FLOOR(IFNULL(noOfPosition, 0)/IFNULL(pBomPin, 0)) * IFNULL(pBomPin, 0)) * IFNULL(allocatedUnit, 0))      \n" +
                "	INTO	v_AllocatedToKitStock      \n" +
                "	FROM 	(                \n" +
                "			SELECT 		ka.allocatedUnit, c.noOfPosition        \n" +
                "			FROM 		kit_allocation ka      \n" +
                "			INNER JOIN 	component c ON c.id = ka.partId AND c.isDeleted = 0                                                 \n" +
                "			WHERE 		ka.partid IN (                          \n" +
                "						SELECT 	mfgPNID                           \n" +
                "						FROM 	kit_allocation_lineitems_alternatepart a        \n" +
                "						WHERE 	refSalesOrderDetID = pSaleOrderDetailId                 \n" +
                "								AND (CASE WHEN pAssyId IS NULL THEN partID = partID ELSE partID = pAssyId END)       \n" +
                "								AND FIND_IN_SET(refRfqLineitem, pLineItemId)                              \n" +
                "								AND deletedAt IS NULL           \n" +
                "						UNION        \n" +
                "						SELECT 	custPNID AS mfgPNID                \n" +
                "						FROM 	kit_allocation_lineitems                 \n" +
                "						WHERE 	refSalesOrderDetID = pSaleOrderDetailId                 \n" +
                "								AND (CASE WHEN pAssyId IS NULL THEN partID = partID ELSE partID = pAssyId END)                 \n" +
                "								AND FIND_IN_SET(refRfqLineitem, pLineItemId)            \n" +
                "								AND custPNID IS NOT NULL        \n" +
                "								AND deletedAt IS NULL              \n" +
                "						UNION        \n" +
                "						SELECT 	a.componentID         \n" +
                "						FROM 	component_packagingalias a         \n" +
                "						WHERE  	a.AliasGroupId IN (      \n" +
                "								SELECT 	b.AliasGroupid       \n" +
                "								FROM 	component_packagingalias b         \n" +
                "								WHERE 	EXISTS (      \n" +
                "										SELECT 	1       \n" +
                "										FROM 	kit_allocation_lineitems_alternatepart c        \n" +
                "										WHERE 	c.mfgPNID = b.componentid       \n" +
                "												AND c.refSalesOrderDetID = pSaleOrderDetailId        \n" +
                "												AND (CASE WHEN pAssyId IS NULL THEN c.partID = c.partID ELSE partID = pAssyId END)       \n" +
                "												AND FIND_IN_SET(c.refRfqLineitem, pLineItemId)                   \n" +
                "												AND c.deletedAt IS NULL       \n" +
                "									)      \n" +
                "								)         \n" +
                "					)                                               \n" +
                "					AND ka.STATUS = 'A'      \n" +
                "			) a;                         \n" +
                "  \n" +
                "	-- v_NonUMIDStock                      \n" +
                "	SELECT 	SUM((FLOOR(IFNULL(noOfPosition, 0)/IFNULL(pBomPin, 0)) * IFNULL(pBomPin, 0)) * IFNULL(nonUMIDStock, 0))      \n" +
                "	INTO v_NonUMIDStock                      \n" +
                "	FROM 	(                \n" +
                "			SELECT 		SUM((IFNULL(vu.BalanceQty, 1) * IFNULL(c.unit, 1))) AS nonUMIDStock, c.noOfPosition                 \n" +
                "			FROM 		vu_umid_creation_pending vu                      \n" +
                "			INNER JOIN 	component c ON c.id = vu.PartId                      \n" +
                "			WHERE 		vu.PartId IN (                      \n" +
                "						SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pSaleOrderDetailId AND FIND_IN_SET(refRfqLineitem, pLineItemId) AND deletedAt IS NULL                                \n" +
                "						UNION                                \n" +
                "						SELECT componentID AS mfgPNID FROM component_packagingalias WHERE aliasgroupID IN (                                          \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID IN (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart WHERE refSalesOrderDetID = pSaleOrderDetailId AND FIND_IN_SET(refRfqLineitem, pLineItemId) AND deletedAt IS NULL) AND deletedAt IS NULL                                           \n" +
                "						) AND deletedAt IS NULL              \n" +
                "						UNION              \n" +
                "						SELECT 	 custPNID AS mfgPNID                \n" +
                "						FROM 	kit_allocation_lineitems                 \n" +
                "						WHERE 	refSalesOrderDetID = pSaleOrderDetailId                 \n" +
                "								AND (CASE WHEN pAssyId IS NULL THEN partID = partID ELSE partID = pAssyId END)                 \n" +
                "								AND FIND_IN_SET(refRfqLineitem, pLineItemId)                \n" +
                "								AND deletedAt IS NULL                             \n" +
                "					) AND BalanceQty > 0                \n" +
                "		) a;                                        \n" +
                "  \n" +
                "	SET result = (IFNULL(v_TotalStockInSystemRecord,0) - IFNULL(v_AllocatedToKitStock,0)) + IFNULL(v_NonUMIDStock, 0);                                        \n" +
                "  \n" +
                "	RETURN result;                                        \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_update_UMID_initial_count` ;  \n" +
                "CREATE PROCEDURE `Sproc_update_UMID_initial_count`(                  \n" +
                "	IN pId INT(11),                  \n" +
                "	IN pOrgQty DECIMAL(18,8),                 \n" +
                "	IN pOrgPkgUnit DECIMAL(18,8),                  \n" +
                "	IN pUpdatedBy VARCHAR(255),    \n" +
                "    IN pInitialQtyChangeRemark VARCHAR(1000)        \n" +
                ")  \n" +
                "BEGIN                  \n" +
                "	DECLARE vOrgInitialQty DECIMAL(18, 8);          \n" +
                "	DECLARE vQtyDifference DECIMAL(18,8);          \n" +
                "	DECLARE vBalanceQty DECIMAL(18,8);          \n" +
                "	DECLARE vIsQtyUpdate TINYINT(1);          \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION                  \n" +
                "	BEGIN                  \n" +
                "		ROLLBACK;                  \n" +
                "		RESIGNAL;                  \n" +
                "	END;                  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                  \n" +
                "	BEGIN                  \n" +
                "		ROLLBACK;                  \n" +
                "		RESIGNAL;                  \n" +
                "	END;                  \n" +
                "	START TRANSACTION;                  \n" +
                "  \n" +
                "        # get UMID detail before update qty and units to manage history          \n" +
                "        DROP TEMPORARY TABLE IF EXISTS tempUMIDDetail;           \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS tempUMIDDetail AS                \n" +
                "	SELECT 	css.id, css.uid, css.refcompid, css.orgQty, css.orgPkgUnit, css.pkgQty, css.pkgUnit, css.fromBin, css.packaging    \n" +
                "	FROM 	component_sid_stock css                \n" +
                "	WHERE 	css.id = pId   \n" +
                "			AND deletedAt IS NULL;    \n" +
                "  \n" +
                "        SELECT orgQty INTO vOrgInitialQty FROM tempUMIDDetail;          \n" +
                "  \n" +
                "	#Update packing slip detail if new orginial qty is less than previous original qty          \n" +
                "        IF(pOrgQty < vOrgInitialQty) THEN     \n" +
                "		# if new original qty is less than previous qty then make UMID created flag to false    \n" +
                "		UPDATE 	packing_slip_material_receive_det          \n" +
                "		SET 	umidCreated = FALSE          \n" +
                "		WHERE   id IN (	  \n" +
                "			SELECT 	refPackingSlipDetailID           \n" +
                "			FROM  	component_sid_stock_packing_detail          \n" +
                "			WHERE 	refComponentSidStockID = pId  \n" +
                "					AND deletedAt IS NULL  \n" +
                "				);          \n" +
                "  \n" +
                "		SET vIsQtyUpdate = 1;             \n" +
                "  \n" +
                "	#Update packing slip detail if new orginial qty is more than previous original qty          \n" +
                "	ELSEIF(pOrgQty > vOrgInitialQty) THEN          \n" +
                "		SET vQtyDifference = (pOrgQty - vOrgInitialQty);          \n" +
                "		SELECT 	vu.BalanceQty INTO vBalanceQty           \n" +
                "		FROM 	vu_umid_creation_pending vu          \n" +
                "		WHERE 	EXISTS (SELECT 1 FROM tempUMIDDetail t WHERE t.fromBin = vu.BinID AND t.refcompid = vu.PartId AND t.packaging = vu.packagingID);          \n" +
                "  \n" +
                "		#If pending balance qty is more than new additional original qty then make UMID created flag to false    \n" +
                "		IF(vBalanceQty > vQtyDifference) THEN          \n" +
                "			UPDATE 	packing_slip_material_receive_det          \n" +
                "			SET 	umidCreated = FALSE          \n" +
                "			WHERE   id IN (	  \n" +
                "				SELECT 	refPackingSlipDetailID           \n" +
                "				FROM  	component_sid_stock_packing_detail          \n" +
                "				WHERE 	refComponentSidStockID = pId  \n" +
                "						AND deletedAt IS NULL  \n" +
                "					);          \n" +
                "  \n" +
                "			SET vIsQtyUpdate = 1;            \n" +
                "		#If pending balance qty and new additional original qty are equal then make UMID created flag to true    \n" +
                "		ELSEIF(vBalanceQty = vQtyDifference) THEN        		  \n" +
                "			UPDATE 	packing_slip_material_receive_det          \n" +
                "			SET 	umidCreated = TRUE          \n" +
                "			WHERE   id IN (	  \n" +
                "				SELECT 	refPackingSlipDetailID           \n" +
                "				FROM  	component_sid_stock_packing_detail          \n" +
                "				WHERE 	refComponentSidStockID = pId  \n" +
                "						AND deletedAt IS NULL  \n" +
                "					);          \n" +
                "  \n" +
                "				SET vIsQtyUpdate = 1;        \n" +
                "		#Else inform user that stock is not available to increase original qty    \n" +
                "		ELSE          \n" +
                "			SELECT 		b.name AS binName,          \n" +
                "					vBalanceQty AS BalanceQty,           \n" +
                "					c.PIDCode,          \n" +
                "					pOrgQty newOrgQty          \n" +
                "			FROM 		tempUMIDDetail t          \n" +
                "			INNER JOIN 	component c ON t.refcompid = c.id          \n" +
                "			INNER JOIN 	binmst b ON t.fromBin = b.id;          \n" +
                "  \n" +
                "			SET vIsQtyUpdate = 0;                          \n" +
                "		END IF;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "        IF(vIsQtyUpdate = 1) THEN          \n" +
                "		#update qty and count based on data                \n" +
                "		UPDATE 	component_sid_stock css, tempUMIDDetail t                          \n" +
                "		SET 	css.pkgQty = (IFNULL(pOrgQty, 0) - IFNULL(t.orgQty, 0) + IFNULL(t.pkgQty, 0)),		                \n" +
                "			css.pkgUnit = (IFNULL(pOrgPkgUnit, 0) - IFNULL(t.orgPkgUnit, 0) + IFNULL(t.pkgUnit, 0)),                \n" +
                "			css.orgQty = IFNULL(pOrgQty, 0), 		css.orgPkgUnit = IFNULL(pOrgPkgUnit, 0),                \n" +
                "			css.initialQtyChangeRemark = pInitialQtyChangeRemark,                \n" +
                "			css.updatedBy = pUpdatedBy,	css.updatedAt = fun_DatetimetoUTCDateTime()                           \n" +
                "		WHERE 	css.id = t.id;              \n" +
                "  \n" +
                "		-- Insert log in UMID history page                                      \n" +
                "		INSERT INTO component_sid_stock_history     \n" +
                "		(    \n" +
                "			transType, 				actionPerformed, 		refUIDId, 	uid, 			refcompid,     \n" +
                "			binID, 					warehouseID, 			deptWHID, 	orgQty, 		orgUnit,     \n" +
                "			currentQty, 				currentUnit, 			uom, 		reason, 	    \n" +
                "			isDeleted, 				createdBy, 			createdAt, 		    \n" +
                "			updatedBy, 				updatedAt    \n" +
                "		)    \n" +
                "		SELECT  'Change Initial Qty.', 	  \n" +
                "			'Change Initial Qty',	  \n" +
                "			css.id,			  \n" +
                "			uid,		  \n" +
                "			refcompid,    \n" +
                "			css.binID,				  \n" +
                "			b.warehouseID,			  \n" +
                "			w.parentWHID,	  \n" +
                "			orgQty,		  \n" +
                "			orgPkgUnit,    \n" +
                "			pkgQty,					  \n" +
                "			pkgUnit,				  \n" +
                "			uom,			  \n" +
                "			pInitialQtyChangeRemark,		    \n" +
                "			0,						  \n" +
                "			pUpdatedBy,				  \n" +
                "			fun_DatetimetoUTCDateTime(),    \n" +
                "			pUpdatedBy,				  \n" +
                "			fun_DatetimetoUTCDateTime()    \n" +
                "		FROM 	component_sid_stock  css    \n" +
                "		JOIN 	binmst b ON css.binID = b.id    \n" +
                "		JOIN 	warehousemst w ON b.warehouseID = w.id    \n" +
                "		WHERE 	css.id = pId;    \n" +
                "  \n" +
                "		# Update allocated qty with return status                \n" +
                "		UPDATE 	kit_allocation k                 \n" +
                "		SET	k.status = 'D',                \n" +
                "			k.updatedBy = pUpdatedBy,	            \n" +
                "			k.updatedAt = fun_DatetimetoUTCDateTime()               \n" +
                "		WHERE 	k.refUIDId = pId                \n" +
                "				AND k.status = 'A';              \n" +
                "	END IF;          \n" +
                "	COMMIT;                  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2788,'2.00','V1','fun_getAvilableStockWithPackagingAliasInPins, Sproc_update_UMID_initial_count - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2788:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCommonTypes`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCommonTypes`(                    \n" +
                "	IN ppageIndex INT(11),                    \n" +
                "	IN precordPerPage INT(11),                    \n" +
                "	IN pOrderBy VARCHAR(255),                    \n" +
                "	IN pWhereClause VARCHAR(16383),                    \n" +
                "	IN ptablename VARCHAR(100)                    \n" +
                "    )  \n" +
                "BEGIN                    \n" +
                "  \n" +
                "	DECLARE pOffset INT(11);                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;           \n" +
                "  SET SESSION group_concat_max_len = 1000000;                       \n" +
                "  \n" +
                "  IF(ptablename=\"rfq_parttypemst\")THEN                        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTableCommon AS                                  \n" +
                "	SELECT rp.id,rp.partTypeName AS `name`,                        \n" +
                "  \n" +
                "		(#SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist      \n" +
                "		SELECT GROUP_CONCAT(concat(alias,'@@@', ifnull((select GROUP_CONCAT(m.mfgCode SEPARATOR '#$#') AS mfgCodelist      \n" +
                "		from component_attributes_source_mapping c1      \n" +
                "		join mfgcodemst m on m.id = c1.mfgCodeID      \n" +
                "		where c1.refAliasID = cfg.id	      \n" +
                "		GROUP BY refAliasID),'')) SEPARATOR '##') AS aliaslist      \n" +
                "		FROM component_fields_genericalias_mst cfg       \n" +
                "				WHERE IFNULL(isdeleted,0) = 0 AND refId =rp.id        \n" +
                "					AND refTableName='rfq_parttypemst' GROUP BY refId) AS aliaslist      \n" +
                "        ,rp.isActive,rp.systemGenerated,rp.isTemperatureSensitive                                  \n" +
                "	FROM rfq_parttypemst rp	                              \n" +
                "	WHERE IFNULL(rp.isdeleted,0) = 0                              \n" +
                "	AND  rp.deletedAt IS NULL;                        \n" +
                "	END IF;                              \n" +
                "  \n" +
                "  IF(ptablename=\"rfq_mountingtypemst\")THEN                        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTableCommon AS                                  \n" +
                "	SELECT rm.id,rm.name,                        \n" +
                "		(#SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist       \n" +
                "          SELECT GROUP_CONCAT(concat(alias,'@@@', ifnull((select GROUP_CONCAT(m.mfgCode SEPARATOR '#$#') AS mfgCodelist       \n" +
                "			  from component_attributes_source_mapping c1      \n" +
                "				join mfgcodemst m on m.id = c1.mfgCodeID      \n" +
                "				where c1.refAliasID = cfg.id      \n" +
                "				 GROUP BY refAliasID),''))  SEPARATOR '##') AS aliaslist      \n" +
                "                 FROM component_fields_genericalias_mst cfg       \n" +
                "			WHERE IFNULL(isdeleted,0) = 0 AND refId =rm.id        \n" +
                "				AND refTableName='rfq_mountingtypemst' GROUP BY refId) AS aliaslist,                    \n" +
                "        colorCode,rm.description,rm.isCountTypeEach,rm.isActive,rm.systemGenerated                    \n" +
                "	FROM rfq_mountingtypemst rm	                              \n" +
                "	WHERE IFNULL(rm.isdeleted,0) = 0                              \n" +
                "	AND  rm.deletedAt IS NULL;                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "    IF(ptablename=\"rfq_packagecasetypemst\")THEN                        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTableCommon AS                                  \n" +
                "	SELECT rm.id,rm.name,                        \n" +
                "		(#SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist       \n" +
                "          SELECT GROUP_CONCAT(concat(alias,'@@@', ifnull((select GROUP_CONCAT(m.mfgCode SEPARATOR '#$#') AS mfgCodelist       \n" +
                "			  from component_attributes_source_mapping c1      \n" +
                "				join mfgcodemst m on m.id = c1.mfgCodeID      \n" +
                "				where c1.refAliasID = cfg.id      \n" +
                "				 GROUP BY refAliasID),''))  SEPARATOR '##') AS aliaslist	      \n" +
                "                 FROM component_fields_genericalias_mst cfg       \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND refId =rm.id       \n" +
                "			AND refTableName='rfq_packagecasetypemst' GROUP BY refId) AS aliaslist,                    \n" +
                "        rm.description,rm.isXrayRequired,rm.isActive,rm.systemGenerated                    \n" +
                "	FROM rfq_packagecasetypemst rm	                              \n" +
                "	WHERE IFNULL(rm.isdeleted,0) = 0                              \n" +
                "	AND  rm.deletedAt IS NULL;          \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	IF(ptablename=\"rfq_connectertypemst\")THEN                        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTableCommon AS                                  \n" +
                "	SELECT rc.id,rc.name,                        \n" +
                "		(#SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist       \n" +
                "          SELECT GROUP_CONCAT(concat(alias,'@@@', ifnull((select GROUP_CONCAT(m.mfgCode SEPARATOR '#$#') AS mfgCodelist       \n" +
                "			  from component_attributes_source_mapping c1      \n" +
                "				join mfgcodemst m on m.id = c1.mfgCodeID      \n" +
                "				where c1.refAliasID = cfg.id      \n" +
                "				 GROUP BY refAliasID),''))  SEPARATOR '##') AS aliaslist	      \n" +
                "                 FROM component_fields_genericalias_mst cfg       \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND refId =rc.id        \n" +
                "        AND refTableName='rfq_connectertypemst' GROUP BY refId) AS aliaslist,rc.description,            \n" +
                "		rc.isActive,rc.systemGenerated                                  \n" +
                "	FROM rfq_connectertypemst rc	                              \n" +
                "	WHERE IFNULL(rc.isdeleted,0) = 0                              \n" +
                "	AND  rc.deletedAt IS NULL;                        \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF(ptablename=\"component_packagingmst\")THEN                        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTableCommon AS                                  \n" +
                "	SELECT rc.id,rc.name,                        \n" +
                "		(#SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist       \n" +
                "          SELECT GROUP_CONCAT(concat(alias,'@@@', ifnull((select GROUP_CONCAT(m.mfgCode SEPARATOR '#$#') AS mfgCodelist       \n" +
                "			  from component_attributes_source_mapping c1      \n" +
                "				join mfgcodemst m on m.id = c1.mfgCodeID      \n" +
                "				where c1.refAliasID = cfg.id      \n" +
                "				 GROUP BY refAliasID),''))  SEPARATOR '##') AS aliaslist      \n" +
                "                 FROM component_fields_genericalias_mst cfg       \n" +
                "				WHERE IFNULL(isdeleted,0) = 0 AND refId =rc.id        \n" +
                "				AND refTableName='component_packagingmst' GROUP BY refId) AS aliaslist ,            \n" +
                "		rc.isActive,rc.systemGenerated                                \n" +
                "	FROM component_packagingmst rc	                              \n" +
                "	WHERE IFNULL(rc.isdeleted,0) = 0                              \n" +
                "	AND  rc.deletedAt IS NULL;                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	IF(ptablename=\"rfq_rohsmst\")THEN                        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTableCommon AS                                  \n" +
                "	SELECT rr.id,rr.name,rr.refMainCategoryID, rc.name AS category,    \n" +
                "    fun_getRoHSNameByID(rr.refParentID) parentRoHS,    \n" +
                "	(select group_concat(fun_getRoHSNameByID(rohsPeerID) separator '@@@') from rfq_rohsmst_peer    \n" +
                "	where rohsID = rr.id and isdeleted = 0) RoHSPeers,    \n" +
                "    fun_getRohsParentListString(rr.id) rohsParentList,  \n" +
                "		(#SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist       \n" +
                "          SELECT GROUP_CONCAT(concat(alias,'@@@', ifnull((select GROUP_CONCAT(m.mfgCode SEPARATOR '#$#') AS mfgCodelist       \n" +
                "			  from component_attributes_source_mapping c1      \n" +
                "				join mfgcodemst m on m.id = c1.mfgCodeID      \n" +
                "				where c1.refAliasID = cfg.id      \n" +
                "				 GROUP BY refAliasID),''))  SEPARATOR '##') AS aliaslist      \n" +
                "                 FROM component_fields_genericalias_mst cfg       \n" +
                "				WHERE IFNULL(isdeleted,0) = 0 AND refId =rr.id       \n" +
                "				AND refTableName='rfq_rohsmst' GROUP BY refId) AS aliaslist,            \n" +
                "		rr.description,rr.isActive,rr.systemGenerated,rohsIcon                                  \n" +
                "	FROM rfq_rohsmst rr	              \n" +
                "	LEFT OUTER JOIN rfq_rohs_main_categorymst rc ON rc.id = rr.refMainCategoryID                              \n" +
                "	WHERE IFNULL(rr.isdeleted,0) = 0                              \n" +
                "	AND  rr.deletedAt IS NULL;                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	IF(ptablename=\"uoms\")THEN                      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTableCommon AS                                \n" +
                "	SELECT u.id,u.unitName AS `name`,u.abbreviation,                      \n" +
                "		(SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist FROM component_fields_genericalias_mst                                 \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND refId =u.id  AND refTableName='uoms' GROUP BY refId) AS aliaslist                                \n" +
                "	FROM uoms u	                            \n" +
                "	WHERE IFNULL(u.isdeleted,0) = 0                            \n" +
                "	AND  u.deletedAt IS NULL;                      \n" +
                "	END IF;             \n" +
                "  \n" +
                "	IF(ptablename=\"component_partstatusmst\")THEN                        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTableCommon AS                                  \n" +
                "	SELECT cp.id,cp.`name`,                        \n" +
                "		(#SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist       \n" +
                "          SELECT GROUP_CONCAT(concat(alias,'@@@', ifnull((select GROUP_CONCAT(m.mfgCode SEPARATOR '#$#') AS mfgCodelist       \n" +
                "			  from component_attributes_source_mapping c1      \n" +
                "				join mfgcodemst m on m.id = c1.mfgCodeID      \n" +
                "				where c1.refAliasID = cfg.id      \n" +
                "				 GROUP BY refAliasID),''))  SEPARATOR '##') AS aliaslist      \n" +
                "                 FROM component_fields_genericalias_mst cfg       \n" +
                "				WHERE IFNULL(isdeleted,0) = 0 AND refId =cp.id        \n" +
                "				AND refTableName='component_partstatusmst' GROUP BY refId) AS aliaslist,cp.colorCode ,            \n" +
                "		cp.isActive,cp.systemGenerated                                 \n" +
                "	FROM component_partstatusmst cp	                              \n" +
                "	WHERE cp.isdeleted = 0                              \n" +
                "	AND  cp.deletedAt IS NULL;                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "  \n" +
                "      IF(ptablename=\"countrymst\")THEN                      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempTableCommon AS                    \n" +
                "         SELECT cm.countryID,cm.countryName AS `name`,                      \n" +
                "		(SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist FROM component_fields_genericalias_mst                                 \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND refId =cm.countryID  AND refTableName='countrymst' GROUP BY refId) AS aliaslist                                \n" +
                "	FROM countrymst cm	                            \n" +
                "	WHERE IFNULL(cm.isdeleted,0) = 0                            \n" +
                "	AND  cm.deletedAt IS NULL;                      \n" +
                "       END IF;       \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                  \n" +
                "	ELSE                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"name ASC\") ;                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                               \n" +
                "		SET pWhereClause = '1=1' ;                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                  \n" +
                "	ELSE	                                  \n" +
                "		SET rowNumWhere = '';                                  \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "	/* to get total count of rows */                                  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM tempTableCommon where \", pWhereClause );                             \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                  \n" +
                "	EXECUTE query1;                                  \n" +
                "	DEALLOCATE PREPARE query1;                                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM tempTableCommon where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "	EXECUTE query2;                                  \n" +
                "	DEALLOCATE PREPARE query2;                                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE tempTableCommon;                                \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_validatePeerRohs`;  \n" +
                "CREATE PROCEDURE `Sproc_validatePeerRohs`(    \n" +
                "	IN pRoHSID INT(11),    \n" +
                "	IN pPeerRoHSIDs text    \n" +
                "	)  \n" +
                "BEGIN    \n" +
                "		DROP temporary table if exists temp_PeerRoHS;    \n" +
                "		set @tempPeerValidationQuery = concat(\"Create temporary table temp_PeerRoHS    \n" +
                "		WITH RECURSIVE cte AS    \n" +
                "        (    \n" +
                "			(    \n" +
                "				select id,refParentID from rfq_rohsmst where id in (\",pPeerRoHSIDs,\") and refParentID is not null and isdeleted = 0    \n" +
                "			)    \n" +
                "			union all    \n" +
                "			(    \n" +
                "				select ro.id, ro.refParentID from rfq_rohsmst ro     \n" +
                "				join cte cte on cte.refParentID = ro.id    \n" +
                "				where ro.isdeleted = 0  and ro.refParentID is not null  \n" +
                "			)    \n" +
                "		)    \n" +
                "		SELECT cte.* FROM cte\");    \n" +
                "  \n" +
                "			PREPARE query1 FROM @tempPeerValidationQuery;                \n" +
                "			EXECUTE query1;                \n" +
                "			DEALLOCATE PREPARE query1;     \n" +
                "        set @tempPeerCount = concat(\"select max(itemCount) itemCount from(     \n" +
                "		select Count(1) as itemCount from temp_PeerRoHS where (refParentID in  (\",pPeerRoHSIDs,\") or id in  (\",pPeerRoHSIDs,\"))    \n" +
                "        union all    \n" +
                "        select count(1) as itemCount from rfq_rohsmst_peer where rohsID in (\",pPeerRoHSIDs,\") and rohsPeerID = \",pRoHSID,\" and isdeleted = 0    \n" +
                "        union all   \n" +
                "        select count(1) as itemCount from rfq_rohsmst where id = \",pRoHSID,\" and refParentID in (\",pPeerRoHSIDs,\")   \n" +
                "        )a\");    \n" +
                " # select @tempPeerCount;  \n" +
                "			PREPARE query2 FROM @tempPeerCount;                \n" +
                "			EXECUTE query2;                \n" +
                "			DEALLOCATE PREPARE query2;    \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getRohsParentListString`;  \n" +
                "CREATE FUNCTION `fun_getRohsParentListString`(  \n" +
                "pRoHSID int  \n" +
                ") RETURNS text  \n" +
                "BEGIN  \n" +
                "	Declare RohsParent text;  \n" +
                "		DROP temporary table if exists temp_ParentRoHS;    \n" +
                "		Create temporary table temp_ParentRoHS    \n" +
                "		WITH RECURSIVE cte AS    \n" +
                "		(    \n" +
                "			(    \n" +
                "				select id,`name`,refParentID,fun_getRoHSNameByID(refParentID) parentRohs from rfq_rohsmst where id = pRoHSID and isdeleted = 0 and refParentID is not null   \n" +
                "			)    \n" +
                "			union all    \n" +
                "			(    \n" +
                "				select ro.id, ro.`name`,ro.refParentID, fun_getRoHSNameByID(ro.refParentID) parentRohs from rfq_rohsmst ro     \n" +
                "				join cte cte on cte.refParentID = ro.id    \n" +
                "				where ro.isdeleted = 0 and ro.refParentID is not null  \n" +
                "			)    \n" +
                "		)    \n" +
                "		SELECT cte.* FROM cte;    \n" +
                "		select group_concat(`parentRohs` separator '@@@') into RohsParent from temp_ParentRoHS;  \n" +
                "  \n" +
                "        DROP temporary table if exists temp_ParentRoHS;    \n" +
                "	RETURN RohsParent;               \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRohsList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRohsList`(                            \n" +
                "	IN ppageIndex INT(11),    \n" +
                "	IN precordPerPage INT(11),    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "    IN psourceDetails VARCHAR(50)    \n" +
                "	)  \n" +
                "BEGIN                            \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);                            \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;     \n" +
                "        DECLARE vDateTimeDisplayFormat VARCHAR(100);             \n" +
                "		DECLARE vTimeZone VARCHAR(50);             \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;              \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;      \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempMoutingType;        \n" +
                "  \n" +
                "		SET @tempMountQuery=CONCAT(\"create temporary table if not exists  tempMoutingType as        \n" +
                "		select id,refTableName,refId,alias,isdeleted from component_fields_genericalias_mst where deletedAt is NULL\");         \n" +
                "  \n" +
                "		IF(psourceDetails IS NOT NULL OR psourceDetails!='')THEN        \n" +
                "			SET @tempMountQuery=CONCAT(@tempMountQuery,\" and id in (select refAliasID from  component_attributes_source_mapping where mfgcodeid in (\",psourceDetails,\"))\");        \n" +
                "  \n" +
                "		END IF;          \n" +
                "  \n" +
                "		        PREPARE queryMount FROM @tempMountQuery;                    \n" +
                "			EXECUTE queryMount;                    \n" +
                "			DEALLOCATE PREPARE queryMount;                      \n" +
                "  \n" +
                "		set @tempQuery = concat(\"SELECT ro.id,ro.name,ro.description,ro.isActive,ro.systemGenerated,ro.rohsIcon,ro.refMainCategoryID,    \n" +
                "        displayOrder,fun_getRoHSNameByID(ro.refParentID) parentRoHS,    \n" +
                "        (select group_concat(fun_getRoHSNameByID(rohsPeerID) separator '@@@') from rfq_rohsmst_peer    \n" +
                "		where rohsID = ro.id and isdeleted = 0) RoHSPeers,  \n" +
                "        fun_getRohsParentListString(ro.id) rohsParentList,  \n" +
                "        (case when ro.systemGenerated = 1 then 'Yes' else 'No' end) SyatemGeneratedValue,    \n" +
                "        fun_getUserNameByID(ro.updatedBy) updatedby,    \n" +
                "        fun_getUserNameByID(ro.createdBy) createdby,    \n" +
                "		fun_getRoleByID(ro.createByRoleId) createdbyRole,    \n" +
                "		fun_getRoleByID(ro.updateByRoleId) updatedbyRole,    \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(ro.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,    \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(ro.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,    \n" +
                "		(SELECT `name` FROM rfq_rohs_main_categorymst WHERE id=  ro.`refMainCategoryID`) AS category,    \n" +
                "		(CASE WHEN (ro.`isActive` = 0) THEN 'Disable'    \n" +
                "		WHEN (ro.`isActive` = 1) THEN 'Enable' ELSE '' END) AS `activeConvertedValue`,    \n" +
                "		(#SELECT GROUP_CONCAT(alias SEPARATOR '##') AS aliaslist    \n" +
                "          SELECT GROUP_CONCAT(concat(alias,'@@@', ifnull((select GROUP_CONCAT(m.mfgCode SEPARATOR '#$#') AS mfgCodelist    \n" +
                "			  from component_attributes_source_mapping c1        \n" +
                "				join mfgcodemst m on m.id = c1.mfgCodeID        \n" +
                "				where c1.refAliasID = cfg.id        \n" +
                "				 GROUP BY refAliasID),''))  SEPARATOR '##') AS aliaslist        \n" +
                "						  FROM tempMoutingType cfg WHERE IFNULL(isdeleted,0) = 0         \n" +
                "						  AND  refTableName ='rfq_rohsmst'                   \n" +
                "          AND refId= ro.`id` GROUP BY refId ) AS aliaslist            \n" +
                "		FROM `rfq_rohsmst` ro           \n" +
                "		WHERE ro.`isDeleted` = 0 \");            \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                            \n" +
                "			SET pOrderBy = \"ORDER BY displayOrder IS NULL, displayOrder ASC ,name ASC\";      \n" +
                "		ELSE                            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                            \n" +
                "		END IF;	                            \n" +
                "  \n" +
                "  		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                            \n" +
                "			SET pWhereClause = '1=1' ;                            \n" +
                "		END IF;	                            \n" +
                "  \n" +
                "  		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                             \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                            \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                            \n" +
                "		ELSE	                            \n" +
                "			SET rowNumWhere = '';                            \n" +
                "		END IF;	                            \n" +
                "  \n" +
                "         IF(psourceDetails IS NOT NULL)THEN        \n" +
                "			SET pWhereClause=CONCAT(pWhereClause,\" and aliaslist is not null\");        \n" +
                "		END IF;        \n" +
                "  \n" +
                "		/* to get total count of rows */                 \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);                \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                \n" +
                "			EXECUTE query2;                \n" +
                "			DEALLOCATE PREPARE query2;              \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c                \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement2;                \n" +
                "			EXECUTE query1;                \n" +
                "			DEALLOCATE PREPARE query1;             \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2789,'2.00','V1','RoHS Peer functionality related change - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2789:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-08-2020 *********************************** */
                "UPDATE page_detail  \n" +
                "SET iconClass = \"icons-required-program\"  \n" +
                "WHERE iconClass = \"icons-required-program-1\" ;  \n" +
                "  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET iconClass = \"icons-backarrow\"  \n" +
                "WHERE iconClass = \"icons-backarrow-1\" ;  \n" +
                "  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET iconClass = \"icons-rd-2\"  \n" +
                "WHERE iconClass = \"icons-rd-2-1\" ;  \n" +
                "  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET iconClass = \"icons-barcodes\"  \n" +
                "WHERE iconClass = \"icons-barcodes-1\" ;  \n" +
                "  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET iconClass = \"icons-report\"  \n" +
                "WHERE iconClass = \"icons-report-1\" ;  \n" +
                "  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET iconClass = \"icons-workorder-narrative-history\"  \n" +
                "WHERE iconClass = \"icons-workorder-narrative-history-1\" ;  \n" +
                "  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET iconClass = \"icons-manufacturer-new\"  \n" +
                "WHERE iconClass = \"icons-manufacturer-new-1\" ;  \n" +
                "  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET iconClass = \"icons-warehouse-new\"  \n" +
                "WHERE iconClass = \"icons-warehouse-new-1\" ;  \n" +
                "  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET iconClass = \"icons-umid1\"  \n" +
                "WHERE iconClass = \"icons-umid1-1\" ;  \n" +
                "  \n" +
                "  \n" +
                "UPDATE page_detail  \n" +
                "SET iconClass = \"icons-transfer-material-2\"  \n" +
                "WHERE iconClass = \"icons-transfer-material-3\" ;  \n" +
                /* **************************** Add Script Version -> 12-08-2020*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2790,'2.00','V1',' Icon updated - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2790:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-08-2020*********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetNotQuotedListForPricing` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetNotQuotedListForPricing`(            \n" +
                "	IN prfqAssyID INT(11),        \n" +
                "	IN pisPurchaseApi TINYINT(1)                                     \n" +
                "    )  \n" +
                "BEGIN                                                              \n" +
                "  \n" +
                "  \n" +
                "  IF(pisPurchaseApi=0)THEN        \n" +
                "			SET @SQLStatement1 = CONCAT(\"SELECT rlq.id,rlq.qtyID,rlq.consolidateID,IFNULL(cqty.consolidatedQty ,rq.requestQty) requestQty,rla.uomID,rla.qpa ,  \n" +
                "			(select max(c.iscustom) iscustom from component c where c.id in (select rcm.mfgpnid from rfq_consolidated_mfgpn_lineitem_alternate rcm where rcm.consolidateID=rla.id and rcm.isdeleted=0)) iscustom         \n" +
                "FROM rfq_consolidate_mfgpn_lineitem_quantity rlq LEFT JOIN rfq_assy_quantity rq ON rlq.qtyID=rq.id  \n" +
                "LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity cqty ON cqty.refConsolidateLineitemQtyId = rlq.id      \n" +
                "LEFT JOIN rfq_consolidated_mfgpn_lineitem rla ON rla.id=rlq.consolidateID          \n" +
                "WHERE rq.rfqAssyID=\",prfqAssyID,\" AND rq.isDeleted=0 AND rlq.isDeleted=0 AND rlq.finalPrice IS NULL\");         \n" +
                "ELSE        \n" +
                "      SET @SQLStatement1 = CONCAT(\"SELECT ka.id,ka.qpa,ka.uomID         \n" +
                "FROM kit_allocation_lineitems ka         \n" +
                "WHERE ka.refSalesOrderDetID=\",prfqAssyID,\" AND ka.deletedAt is NULL AND ka.refMongoTrnsID IS NULL\");         \n" +
                "END IF;                                                       \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                                              \n" +
                "			EXECUTE query1;                                                              \n" +
                "			DEALLOCATE PREPARE query1;                                                              \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT rss.id,rss.qtyID,rss.stock,rss.price,rss.isCheckRequiredQty,rss.isLeadTime,rss.stockPercentage,rss.packagingID,rss.rfqPriceGroupID,rss.settingType,rss.leadTime,rq.requestQty,cp.name           \n" +
                "FROM rfq_assy_quantity_price_selection_setting rss LEFT JOIN rfq_assy_quantity rq ON rss.qtyID=rq.id          \n" +
                "LEFT JOIN component_packagingmst cp ON cp.id=rss.packagingID          \n" +
                "WHERE rq.rfqAssyID=\",prfqAssyID,\" AND rq.isDeleted=0 AND rss.isDeleted=0\");                                                              \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                                              \n" +
                "			EXECUTE query2;                                                              \n" +
                "			DEALLOCATE PREPARE query2;                                                              \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 13-08-2020 *********************************** */
                "UPDATE page_detail SET displayMenuName='Customer Packing Slip' WHERE pageName IN ('Manage Customer Packing Slip Documents','Manage Customer Packing Slip MISC');  \n" +
                /* **************************** Add Script Version -> 13-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2791,'2.00','V1',' Alter procedure Sproc_GetNotQuotedListForPricing-Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2791:
            allDbChangesArray.push(
                /* **************************** new script -> 14-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getActualComponentStock` ;  \n" +
                "CREATE FUNCTION `fun_getActualComponentStock`(                \n" +
                "		pComponentID INT(11)     \n" +
                "	) RETURNS INT  \n" +
                "BEGIN               \n" +
                "	SELECT fun_getComponentStock(pComponentID) INTO @actualStock;  \n" +
                "	SELECT IFNULL(SUM(balanceQty),0) INTO @pendingUMIDStock   \n" +
                "	FROM vu_umid_creation_pending WHERE partId = pComponentID AND balanceQty > 0;  \n" +
                "  \n" +
                "	RETURN (@actualStock + @pendingUMIDStock);                \n" +
                "    END;  \n" +
                /* **************************** new script -> 14-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getQuoteSubjectToFollowingDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_getQuoteSubjectToFollowingDetails`(	                                                                                    \n" +
                "	IN prfqAssyID INT(11),            \n" +
                "    IN pAssyQuoteSubmittedID INT(11)               \n" +
                "    )  \n" +
                "BEGIN               \n" +
                "DECLARE pisSummaryCompleted TINYINT(1);            \n" +
                "SELECT isSummaryComplete INTO pisSummaryCompleted FROM rfq_assemblies WHERE id = prfqAssyID;            \n" +
                "	IF pisSummaryCompleted = 1 THEN            \n" +
                "  \n" +
                "		# Get Excess Material Details            \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID, fun_ConvertRefdesgString(a.refDesg) AS refDesg, a.mfrCode AS mfrCode, a.mfrPN AS mfrPN,            \n" +
                "			a.CPN AS CPN, a.CPNRev AS CPNRev,BOMIssue            \n" +
                "			FROM rfq_quote_issue_history a            \n" +
                "            WHERE issueType = \"ExcessMaterial\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID            \n" +
                "			ORDER BY a.lineID ;             \n" +
                "  \n" +
                "		# Get Custome Consigned Detail                \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID, fun_ConvertRefdesgString(a.refDesg) AS refDesg, a.mfrCode AS mfrCode, a.mfrPN AS mfrPN,            \n" +
                "            a.CPN AS CPN, a.CPNRev AS CPNRev,BOMIssue            \n" +
                "            FROM rfq_quote_issue_history a            \n" +
                "            WHERE issueType = \"CustomerConsigned\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID            \n" +
                "			ORDER BY a.lineID;            \n" +
                "  \n" +
                "		# get Unquoted Line item Details            \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID, fun_ConvertRefdesgString(a.refDesg) AS refDesg,             \n" +
                "            a.CPN AS CPN, a.CPNRev AS CPNRev,BOMIssue            \n" +
                "			FROM rfq_quote_issue_history a            \n" +
                "            WHERE issueType = \"UnquotedLineItem\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID            \n" +
                "			ORDER BY a.lineID;            \n" +
                "  \n" +
                "		# get Unquoted Labor Detail            \n" +
                "  \n" +
                "			SELECT PIDCode, BOMIssue                        \n" +
                "			FROM rfq_quote_issue_history a            \n" +
                "            WHERE issueType = \"UnquotedLabor\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID;                    \n" +
                "  \n" +
                "		# get Low Stock Alert details            \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID , fun_ConvertRefdesgString(a.refDesg) AS refDesg, a.mfrCode AS mfrCode, a.mfrPN AS mfrPN,            \n" +
                "            a.CPN AS CPN, a.CPNRev AS CPNRev, BOMIssue, a.isCustom, CASE WHEN a.componentID IS NULL THEN 0 ELSE fun_getActualComponentStock(a.componentID) END AS actualStock                      \n" +
                "			FROM rfq_quote_issue_history a            \n" +
                "            WHERE issueType = \"LowStockAlert\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID AND isCustom = 0           \n" +
                "			ORDER BY a.lineID;            \n" +
                "  \n" +
                "		# Get Long Lead Time Parts Detail            \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID, fun_ConvertRefdesgString(a.refDesg) AS refDesg, a.mfrCode AS mfrCode, a.mfrPN AS mfrPN,            \n" +
                "            a.CPN AS CPN, a.CPNRev AS CPNRev, BOMIssue, a.isCustom, CASE WHEN a.componentID IS NULL THEN 0 ELSE fun_getActualComponentStock(a.componentID) END AS actualStock              \n" +
                "			FROM rfq_quote_issue_history a            \n" +
                "            WHERE issueType = \"LongLeadTime\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID            \n" +
                "            ORDER BY a.lineID;            \n" +
                "  \n" +
                "		# get Obsolete Part Detail            \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID , fun_ConvertRefdesgString(a.refDesg)  AS refDesg,            \n" +
                "            a.mfrCode AS mfrCode, a.mfrPN AS mfrPN,a.CPN AS CPN, a.CPNRev AS CPNRev,BOMIssue             \n" +
                "            FROM rfq_quote_issue_history a            \n" +
                "            WHERE issueType = \"ObsoletePart\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID            \n" +
                "			ORDER BY a.lineID;            \n" +
                "  \n" +
                "		# Get Part LOA Details            \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID ,fun_ConvertRefdesgString(a.refDesg)  AS refDesg,a.mfrCode AS mfrCode, a.mfrPN AS mfrPN,            \n" +
                "            a.CPN AS CPN, a.CPNRev AS CPNRev,BOMIssue            \n" +
                "			FROM rfq_quote_issue_history a            \n" +
                "            WHERE issueType = \"PartLOA\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID                     \n" +
                "			ORDER BY a.lineID;             \n" +
                "  \n" +
                "		# Get BOM Issue detail            \n" +
                "			SELECT PIDCode,TRIM(lineID)+0 AS lineID,fun_ConvertRefdesgString(a.refDesg) AS refDesg,a.mfrCode AS mfrCode,a.mfrPN AS mfrPN,            \n" +
                "            a.CPN AS CPN, a.CPNRev AS CPNRev, BOMIssue, (CASE WHEN a.isCustomerApproved = TRUE THEN 'Customer' ELSE 'Engineer' END) AS approvedBy, a.isCustomerApproved        \n" +
                "			FROM rfq_quote_issue_history a            \n" +
                "            WHERE issueType = \"BOMIssue\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID                               \n" +
                "			ORDER BY lineID;             \n" +
                "  \n" +
                "	ELSE             \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS leveldata;                        \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS leveldata AS                        \n" +
                "			WITH RECURSIVE cte AS                          \n" +
                "			(                        \n" +
                "				(                        \n" +
                "					SELECT rlc.id, rlc.rfqLineItemsAlternatePartID, rlc.rfqLineItemsID,                      \n" +
                "					(CASE WHEN rlc.isCustomerApproved = TRUE THEN 'Customer' ELSE 'Engineer' END) AS approvedBy,          \n" +
                "					rlc.`comment`, rlc.requiredToShowOnQuoteSummary, rlc.errorCode, rlc.isCustomerApproved,                 \n" +
                "					comp.PIDCode, comp.mfgPN AS AssyPN, CASE WHEN rl.partID IS NULL THEN rla.mfgPNID ELSE rl.partId END AS partID, rl.refDesig, IFNULL(rla.mfgPNID, rl.partID) AS mfgPNID, IFNULL(com.isCustom, comp.isCustom) AS isCustom,IFNULL(rlc.mfgPN,rla.mfgPN) AS alternatepart,                      \n" +
                "					IFNULL(rlc.mfgCode,rla.mfgCode) AS alternatepartmfg, rla.id AS alternateID, 1 AS LEVEL,                       \n" +
                "					com.category, rl.lineID,rl.custPN,rl.customerRev                      \n" +
                "					FROM rfq_lineitems_alternatepart rla                      \n" +
                "					LEFT JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0                      \n" +
                "					JOIN rfq_lineitems_approval_comment rlc ON rlc.rfqLineItemsAlternatePartID = rla.id OR rlc.rfqLineItemsID = rl.id                      \n" +
                "					LEFT JOIN component com ON com.id = rla.mfgPNID                        \n" +
                "					LEFT JOIN component comp ON comp.id = rl.partID OR comp.id =  rla.partID                      \n" +
                "					WHERE rl.partId = ( SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID ) OR rla.partID = ( SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID )                      \n" +
                "					AND rla.isDeleted = 0            \n" +
                "				)                        \n" +
                "				UNION ALL                          \n" +
                "				(                        \n" +
                "					SELECT rlc.id, rlc.rfqLineItemsAlternatePartID, rlc.rfqLineItemsID,               \n" +
                "					(CASE WHEN rlc.isCustomerApproved = TRUE THEN 'Customer' ELSE 'Engineer' END) AS approvedBy,                 \n" +
                "					rlc.`comment`, rlc.requiredToShowOnQuoteSummary, rlc.errorCode, rlc.isCustomerApproved,                     \n" +
                "					comp.PIDCode, comp.mfgPN AS AssyPN, CASE WHEN rl.partID IS NULL THEN rla.mfgPNID ELSE rl.partId END AS partID, rl.refDesig, IFNULL(rla.mfgPNID, rl.partID) AS mfgPNID, IFNULL(com.isCustom, comp.isCustom) AS isCustom,IFNULL(rlc.mfgPN,rla.mfgPN) AS alternatepart,                      \n" +
                "					IFNULL(rlc.mfgCode,rla.mfgCode) AS alternatepartmfg, rla.id AS alternateID, 1 AS LEVEL,                       \n" +
                "					com.category, rl.lineID,rl.custPN,rl.customerRev                      \n" +
                "					FROM rfq_lineitems_alternatepart rla                      \n" +
                "					LEFT JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0                      \n" +
                "					JOIN rfq_lineitems_approval_comment rlc ON rlc.rfqLineItemsAlternatePartID = rla.id OR rlc.rfqLineItemsID = rl.id                      \n" +
                "					LEFT JOIN component com ON com.id = rla.mfgPNID                        \n" +
                "					LEFT JOIN component comp ON comp.id = rl.partID OR comp.id =  rla.partID                      \n" +
                "					RIGHT JOIN cte cte ON cte.category = 3 AND rl.partID = cte.mfgPNID                       \n" +
                "					WHERE rla.isDeleted = 0                      \n" +
                "				)                        \n" +
                "			)                        \n" +
                "			SELECT cte.* FROM cte                        \n" +
                "            ORDER BY LEVEL;                       \n" +
                "  \n" +
                "		# Get Excess Material Details            \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID, fun_ConvertRefdesgString(a.refDesig) AS refDesg,            \n" +
                "            fun_getMfgCodeByPartID(a.componentID) AS mfrCode, fun_getMFGPNByID(a.componentID) AS mfrPN,a.custPN AS CPN, a.customerRev AS CPNRev,            \n" +
                "            CONCAT('UOM: ',a.unitName, ' : Requested QTY: ', requestQty, ' : QPA: ', TRIM(qpa)+0 ,            \n" +
                "            (CASE WHEN connecterTypeID = -2 THEN CONCAT(' : Requested Pin:',TRIM(reqQty*numOfPosition)+0) ELSE '' END),' : Quoted QTY: ', a.quoteQty,             \n" +
                "            ' : Excess QTY: ', a.excessqty, ' @ $', TRIM(a.unitPrice)+0,' / ',(CASE WHEN connecterTypeID = -2 THEN 'Pin' ELSE a.unitName END),            \n" +
                "            ' : Selected part contains excess material.') AS BOMIssue            \n" +
                "			FROM                        \n" +
                "			(                        \n" +
                "				SELECT rcl.id, rclq.qtyID, rclq.unitPrice, rcl.lineID, rcl.rfqAssyID, rcl.uomID, rcl.refDesig, raq.requestQty, rcl.qpa,            \n" +
                "                TRIM(raq.requestQty * rcl.qpa)+0 reqQty, rclq.quoteQty, rclq.componentID,fun_getUnitNameByID(rcl.uomID) AS unitName,                           \n" +
                "				(CASE WHEN com.connecterTypeID = -2 THEN             \n" +
                "                TRIM(rclq.quoteQty - (raq.requestQty * rcl.qpa * rcl.numOfPosition))+0             \n" +
                "                ELSE TRIM(rclq.quoteQty - (raq.requestQty * rcl.qpa))+0 END) excessqty, rl.custPN,rl.customerRev, com.connecterTypeID, rcl.numOfPosition                    \n" +
                "				FROM rfq_consolidated_mfgpn_lineitem rcl                        \n" +
                "				LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID                        \n" +
                "				LEFT JOIN rfq_assy_quantity raq ON rclq.qtyID = raq.id                        \n" +
                "				LEFT JOIN component com ON com.id = rclq.componentID                        \n" +
                "				LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID              \n" +
                "				WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.finalprice IS NOT NULL AND rcl.isPurchase = 1                        \n" +
                "				GROUP BY rcl.id , rclq.qtyID                        \n" +
                "				HAVING excessqty > 0                        \n" +
                "			) a                        \n" +
                "			ORDER BY requestQty, a.lineID ;             \n" +
                "  \n" +
                "		# Get Custome Consigned Detail                \n" +
                "			SELECT TRIM(rcl.lineID) + 0 AS lineID , fun_ConvertRefdesgString(rcl.refDesig) AS refDesg, rl.custPN AS CPN, rl.customerRev AS CPNRev,            \n" +
                "            fun_getMfgCodeByPartID(rcla.mfgPNID) AS mfrCode, fun_getMFGPNByID(rcla.mfgPNID) AS mfrPN,            \n" +
                "            'Customer Consigned Items' AS BOMIssue            \n" +
                "			FROM rfq_consolidated_mfgpn_lineitem rcl            \n" +
                "			JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON rcl.id = rcla.consolidateID            \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID             \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID AND rcl.isDeleted = 0 AND rcl.isPurchase = 0            \n" +
                "			GROUP BY rcl.id            \n" +
                "			ORDER BY rcl.lineID;            \n" +
                "  \n" +
                "		# get Unquoted Line item Details            \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID,fun_ConvertRefdesgString(a.refDesig) AS refDesg, a.custPN AS CPN, a.customerRev AS CPNRev,             \n" +
                "            CONCAT(GROUP_CONCAT(CONCAT(fun_getMfgCodeByPartID(rcla.mfgPNID),' : ', fun_getMFGPNByID(rcla.mfgPNID)) SEPARATOR ' | '), ' : Requested QTY: ', a.requestQty, '  : Unquoted quantity.') AS BOMIssue            \n" +
                "			FROM                        \n" +
                "			(                        \n" +
                "				SELECT rcl.id, rcl.lineID, rcl.rfqAssyID, rcl.refDesig, GROUP_CONCAT(raq.requestQty) requestQty ,            \n" +
                "                rl.custPN,rl.customerRev                        \n" +
                "				FROM rfq_consolidated_mfgpn_lineitem rcl                        \n" +
                "				LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID                        \n" +
                "				LEFT JOIN rfq_assy_quantity raq ON rclq.qtyID = raq.id                        \n" +
                "				LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID                        \n" +
                "				WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.finalprice IS NULL AND rcl.isPurchase = 1                        \n" +
                "				GROUP BY rcl.id                        \n" +
                "			) a                         \n" +
                "			LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON a.id = rcla.consolidateID                        \n" +
                "			GROUP BY a.id                        \n" +
                "			ORDER BY a.lineID;            \n" +
                "  \n" +
                "		# get Unquoted Labor Detail            \n" +
                "			SELECT assyName AS PIDCode,CONCAT(' Mounting Type: ', mountingType,' QPA: ',TRIM(totalQPA)+0,' Quantity: ',  GROUP_CONCAT(TRIM(assyQPA*quantity)+0),' ', \"Labor does not considered.\") BOMIssue            \n" +
                "            FROM (                        \n" +
                "					SELECT fun_getAssyNameByID(ramd.partID) assyName, fun_getMountingTypeNameByID(ramd.mountingTypeID) mountingType,                         \n" +
                "					(SELECT SUM(perBuildQty) FROM rfq_labor_assy_qpa_detail WHERE subAssyID = ramd.partID AND rfqAssyID =  ramd.rfqAssyID AND isDeleted = 0) assyQPA,                         \n" +
                "					(SELECT requestQty FROM rfq_assy_quantity WHERE id = raql.rfqAssyQtyID) quantity, ramd.totalQPA, ramd.lineCount, raql.perAssyPrice,                        \n" +
                "					 raql.price, (SELECT MAX(`level`) FROM rfq_labor_assy_qpa_detail WHERE subAssyID = ramd.partID AND isDeleted = 0 AND rfqAssyID = ramd.rfqAssyID)assyLevel                         \n" +
                "					 FROM rfq_assy_qtywise_bom_laborcosting_detail raql                        \n" +
                "					JOIN rfq_assy_labor_bom_mountingtype_qpa_detail ramd ON ramd.id = raql.rfqAssyBOMMountingID AND ramd.isDeleted = 0                        \n" +
                "					WHERE raql.isDeleted  = 0 AND ramd.rfqAssyID = prfqAssyID AND ramd.mountingTypeID IS NOT NULL AND raql.price = 0                        \n" +
                "			)a                        \n" +
                "			GROUP BY a.assyName, a.mountingType                        \n" +
                "			ORDER BY assyLevel ASC;                \n" +
                "  \n" +
                "		# get Low Stock Alert details            \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID ,fun_ConvertRefdesgString(a.refDesig) AS refDesg, a.custPN AS CPN, a.customerRev AS CPNRev,            \n" +
                "            fun_getMfgCodeByPartID(a.componentID) AS mfrCode, fun_getMFGPNByID(a.componentID) AS mfrPN, a.isCustom AS isCustom,  fun_getActualComponentStock(a.componentID) AS actualStock,          \n" +
                "            CONCAT('Requested QTY: ', reqQty, ' : Supplier Stock: ', TRIM(a.grossStock)+0, '  : Supplier does not having sufficient stock for selected part.') AS BOMIssue            \n" +
                "			FROM            \n" +
                "			(            \n" +
                "				SELECT rcl.id, rclq.qtyID, rcl.lineID, rcl.refDesig, rcl.rfqAssyID, raq.requestQty, rcl.qpa, rclq.quoteQty, c.isCustom,            \n" +
                "				TRIM(raq.requestQty * rcl.qpa)+0 reqQty, IFNULL(rclq.grossStock,0) grossStock, rclq.currentStock,rl.custPN,rl.customerRev,rclq.componentID            \n" +
                "				FROM rfq_consolidated_mfgpn_lineitem rcl            \n" +
                "				LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID            \n" +
                "				LEFT JOIN rfq_assy_quantity raq ON rclq.qtyID = raq.id            \n" +
                "				LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID          \n" +
                "				LEFT JOIN component c ON c.id = rclq.componentID             \n" +
                "				WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.finalprice IS NOT NULL AND rcl.isPurchase = 1            \n" +
                "				GROUP BY rcl.id , rclq.qtyID            \n" +
                "				HAVING reqQty > grossStock            \n" +
                "			) a           \n" +
                "			WHERE a.isCustom = 0         \n" +
                "			ORDER BY a.lineID;            \n" +
                "  \n" +
                "		# Get Long Lead Time Parts Detail            \n" +
                "			SELECT TRIM(a.lineID) + 0 AS lineID, fun_ConvertRefdesgString(a.refDesig) AS refDesg, a.custPN AS CPN, a.customerRev AS CPNRev,            \n" +
                "            fun_getMfgCodeByPartID(a.componentID) AS mfrCode, fun_getMFGPNByID(a.componentID) AS mfrPN,            \n" +
                "            CONCAT('Requested QTY: ', reqQty, ' : Supplier Stock: ', TRIM(a.grossStock)+0, ' : Lead time: ', a.leadTime, ' week              \n" +
                "			: Lead time is high for selected part.') AS BOMIssue, isCustom , fun_getActualComponentStock(a.componentID) AS actualStock            \n" +
                "			FROM                        \n" +
                "			(                        \n" +
                "				SELECT rcl.id, rclq.qtyID, rcl.lineID, rcl.refDesig, rcl.rfqAssyID, raq.requestQty, rcl.qpa, rclq.quoteQty,rclq.componentID,c.isCustom,            \n" +
                "                TRIM(raq.requestQty * rcl.qpa)+0 reqQty, IFNULL(grossStock,0) grossStock, IFNULL(rclq.leadTime,0)leadTime,rl.custPN,rl.customerRev            \n" +
                "                FROM rfq_consolidated_mfgpn_lineitem rcl            \n" +
                "                LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID            \n" +
                "                LEFT JOIN rfq_assy_quantity raq ON rclq.qtyID = raq.id            \n" +
                "                LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID           \n" +
                "                LEFT JOIN component c ON c.id = rclq.componentID          \n" +
                "                WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.finalprice IS NOT NULL AND rcl.isPurchase = 1            \n" +
                "                GROUP BY rcl.id , rclq.qtyID            \n" +
                "                HAVING grossStock < reqQty            \n" +
                "			) a            \n" +
                "            ORDER BY a.lineID;            \n" +
                "  \n" +
                "		# get Obsolete Part Detail            \n" +
                "			SELECT TRIM(rcl.lineID) + 0 AS lineID , fun_ConvertRefdesgString(rcl.refDesig) AS refDesg, rl.custPN AS CPN, rl.customerRev AS CPNRev,            \n" +
                "            fun_getMfgCodeByPartID(rcla.mfgPNID) AS mfrCode, fun_getMFGPNByID(rcla.mfgPNID) AS mfrPN,            \n" +
                "            CONCAT('Part is Obsoleted.') AS BOMIssue            \n" +
                "            FROM rfq_consolidated_mfgpn_lineitem rcl            \n" +
                "			JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON rcl.id = rcla.consolidateID            \n" +
                "			JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID AND rclq.componentID = rcla.mfgPNID            \n" +
                "			JOIN component com ON com.id = rcla.mfgPNID AND partstatus = (SELECT id FROM component_partstatusmst WHERE `name` = 'Obsolete')            \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID            \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0            \n" +
                "			GROUP BY rcl.id            \n" +
                "			ORDER BY rcl.lineID;            \n" +
                "  \n" +
                "		# Get Part LOA Details            \n" +
                "			SELECT TRIM(rcl.lineID) + 0 AS lineID ,fun_ConvertRefdesgString(rcl.refDesig) AS refDesg,rl.custPN AS CPN, rl.customerRev AS CPNRev,            \n" +
                "            fun_getMfgCodeByPartID(rclq.componentID) AS mfrCode, fun_getMFGPNByID(rclq.componentID) AS mfrPN, rclq.LOAprice,            \n" +
                "            CONCAT(CONCAT('LOA Price: $',CAST(rclq.LOAprice AS DECIMAL(10,5))),' : LOA Price given for part.') AS BOMIssue            \n" +
                "			FROM rfq_consolidated_mfgpn_lineitem rcl                        \n" +
                "			JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON rcl.id = rcla.consolidateID                        \n" +
                "			JOIN rfq_consolidate_mfgpn_lineitem_quantity rclq ON rcl.id = rclq.consolidateID                        \n" +
                "			LEFT JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID                        \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isDeleted = 0 AND rclq.LOAprice IS NOT NULL                        \n" +
                "			GROUP BY rcl.id,rclq.componentID                        \n" +
                "			ORDER BY rcl.lineID;             \n" +
                "  \n" +
                "		# Get BOM Issue detail            \n" +
                "			SELECT AssyPN AS PIDCode,TRIM(lineID)+0 AS lineID,fun_ConvertRefdesgString(refDesig) AS refDesg,LEVEL,custPN AS CPN, customerRev AS CPNRev,            \n" +
                "            alternatepartmfg AS mfrCode, alternatepart AS mfrPN, approvedBy,            \n" +
                "            `comment` AS BOMIssue         \n" +
                "			FROM leveldata                        \n" +
                "			WHERE requiredToShowOnQuoteSummary = 1                            \n" +
                "			ORDER BY LEVEL , lineID;             \n" +
                "  \n" +
                "  \n" +
                "	END IF;            \n" +
                "		# get Issues Require Customer Engineering Resolution detail            \n" +
                "            SELECT TRIM(lineID)+0 AS lineID,PIDCode,BOMIssue,issueType,refSubmittedQuoteID            \n" +
                "            FROM rfq_quote_issue_history a            \n" +
                "            WHERE issueType = \"CustomerEngineeringResolution\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = pAssyQuoteSubmittedID AND isDeleted = 0            \n" +
                "			ORDER BY a.lineID;            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** add script version -> 14-08-2020 *********************************** */
                "insert into dbversion(`buildnumber`,`schemaversion`,`releasename`,`description`,`createdby`,`executedfromipaddress`) " +
                "values (2792,'2.00','v1',' Task 23770: FCA Stock logic change on Quote screen and Report both place - Jignesh K '," + userid + " , '" + requiredDet.ipaddress + "');"
            );
            break;
        case 2792:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-08-2020 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_update_UMID_initial_count` ;  \n" +
                "CREATE PROCEDURE `Sproc_update_UMID_initial_count`(                    \n" +
                "	IN pId INT(11),                    \n" +
                "	IN pOrgQty DECIMAL(18,8),                   \n" +
                "	IN pOrgPkgUnit DECIMAL(18,8),                    \n" +
                "	IN pUpdatedBy VARCHAR(255),      \n" +
                "	IN pInitialQtyChangeRemark VARCHAR(1000)          \n" +
                ")  \n" +
                "BEGIN                    \n" +
                "	DECLARE vOrgInitialQty DECIMAL(18, 8);            \n" +
                "	DECLARE vFromBin INT(11);  \n" +
                "	DECLARE vQtyDifference DECIMAL(18,8);            \n" +
                "	DECLARE vBalanceQty DECIMAL(18,8);            \n" +
                "	DECLARE vIsQtyUpdate TINYINT(1);            \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION                    \n" +
                "	BEGIN                    \n" +
                "		ROLLBACK;                    \n" +
                "		RESIGNAL;                    \n" +
                "	END;                    \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING                    \n" +
                "	BEGIN                    \n" +
                "		ROLLBACK;                    \n" +
                "		RESIGNAL;                    \n" +
                "	END;                    \n" +
                "	START TRANSACTION;                    \n" +
                "  \n" +
                "        # get UMID detail before update qty and units to manage history            \n" +
                "        DROP TEMPORARY TABLE IF EXISTS tempUMIDDetail;             \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS tempUMIDDetail AS                  \n" +
                "	SELECT 	css.id, css.uid, css.refcompid, css.orgQty, css.orgPkgUnit, css.pkgQty, css.pkgUnit, css.fromBin, css.packaging      \n" +
                "	FROM 	component_sid_stock css                  \n" +
                "	WHERE 	css.id = pId     \n" +
                "			AND deletedAt IS NULL;      \n" +
                "  \n" +
                "        SELECT orgQty, fromBin INTO vOrgInitialQty, vFromBin FROM tempUMIDDetail;            \n" +
                "  \n" +
                "	#Check if UMID is for new stock Else for existing stock  \n" +
                "	IF (vFromBin > 0) THEN  \n" +
                "		#Update packing slip detail if new orginial qty is less than previous original qty            \n" +
                "		IF(pOrgQty < vOrgInitialQty) THEN       \n" +
                "			# if new original qty is less than previous qty then make UMID created flag to false      \n" +
                "			UPDATE 	packing_slip_material_receive_det            \n" +
                "			SET 	umidCreated = FALSE            \n" +
                "			WHERE   id IN (	    \n" +
                "				SELECT 	refPackingSlipDetailID             \n" +
                "				FROM  	component_sid_stock_packing_detail            \n" +
                "				WHERE 	refComponentSidStockID = pId    \n" +
                "						AND deletedAt IS NULL    \n" +
                "					);            \n" +
                "  \n" +
                "			SET vIsQtyUpdate = 1;               \n" +
                "  \n" +
                "		#Update packing slip detail if new orginial qty is more than previous original qty            \n" +
                "		ELSEIF(pOrgQty > vOrgInitialQty) THEN            \n" +
                "			SET vQtyDifference = (pOrgQty - vOrgInitialQty);            \n" +
                "			SELECT 	vu.BalanceQty INTO vBalanceQty             \n" +
                "			FROM 	vu_umid_creation_pending vu            \n" +
                "			WHERE 	EXISTS (SELECT 1 FROM tempUMIDDetail t WHERE t.fromBin = vu.BinID AND t.refcompid = vu.PartId AND t.packaging = vu.packagingID);            \n" +
                "  \n" +
                "			#If pending balance qty is more than new additional original qty then make UMID created flag to false      \n" +
                "			IF(vBalanceQty > vQtyDifference) THEN            \n" +
                "				UPDATE 	packing_slip_material_receive_det            \n" +
                "				SET 	umidCreated = FALSE            \n" +
                "				WHERE   id IN (	    \n" +
                "					SELECT 	refPackingSlipDetailID             \n" +
                "					FROM  	component_sid_stock_packing_detail            \n" +
                "					WHERE 	refComponentSidStockID = pId    \n" +
                "							AND deletedAt IS NULL    \n" +
                "						);            \n" +
                "  \n" +
                "				SET vIsQtyUpdate = 1;              \n" +
                "			#If pending balance qty and new additional original qty are equal then make UMID created flag to true      \n" +
                "			ELSEIF(vBalanceQty = vQtyDifference) THEN        		    \n" +
                "				UPDATE 	packing_slip_material_receive_det            \n" +
                "				SET 	umidCreated = TRUE            \n" +
                "				WHERE   id IN (	    \n" +
                "					SELECT 	refPackingSlipDetailID             \n" +
                "					FROM  	component_sid_stock_packing_detail            \n" +
                "					WHERE 	refComponentSidStockID = pId    \n" +
                "							AND deletedAt IS NULL    \n" +
                "						);            \n" +
                "  \n" +
                "					SET vIsQtyUpdate = 1;          \n" +
                "			#Else inform user that stock is not available to increase original qty      \n" +
                "			ELSE            \n" +
                "				SELECT 		b.name AS binName,            \n" +
                "						vBalanceQty AS BalanceQty,             \n" +
                "						c.PIDCode,            \n" +
                "						pOrgQty newOrgQty            \n" +
                "				FROM 		tempUMIDDetail t            \n" +
                "				INNER JOIN 	component c ON t.refcompid = c.id            \n" +
                "				INNER JOIN 	binmst b ON t.fromBin = b.id;            \n" +
                "  \n" +
                "				SET vIsQtyUpdate = 0;                            \n" +
                "			END IF;            \n" +
                "		END IF;            \n" +
                "	ELSE  \n" +
                "		SET vIsQtyUpdate = 1;               \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(vIsQtyUpdate = 1) THEN            \n" +
                "		#update qty and count based on data                  \n" +
                "		UPDATE 	component_sid_stock css, tempUMIDDetail t                            \n" +
                "		SET 	css.pkgQty = (IFNULL(pOrgQty, 0) - IFNULL(t.orgQty, 0) + IFNULL(t.pkgQty, 0)),		                  \n" +
                "			css.pkgUnit = (IFNULL(pOrgPkgUnit, 0) - IFNULL(t.orgPkgUnit, 0) + IFNULL(t.pkgUnit, 0)),                  \n" +
                "			css.orgQty = IFNULL(pOrgQty, 0), 		css.orgPkgUnit = IFNULL(pOrgPkgUnit, 0),                  \n" +
                "			css.initialQtyChangeRemark = pInitialQtyChangeRemark,                  \n" +
                "			css.updatedBy = pUpdatedBy,	  \n" +
                "			css.updatedAt = fun_DatetimetoUTCDateTime()                             \n" +
                "		WHERE 	css.id = t.id;                \n" +
                "  \n" +
                "		-- Insert log in UMID history page                                        \n" +
                "		INSERT INTO component_sid_stock_history       \n" +
                "		(      \n" +
                "			transType, 				actionPerformed, 		refUIDId, 	uid, 			refcompid,       \n" +
                "			binID, 					warehouseID, 			deptWHID, 	orgQty, 		orgUnit,       \n" +
                "			currentQty, 				currentUnit, 			uom, 		reason, 	      \n" +
                "			isDeleted, 				createdBy, 			createdAt, 		      \n" +
                "			updatedBy, 				updatedAt      \n" +
                "		)      \n" +
                "		SELECT  'Change Initial Qty.', 	    \n" +
                "			'Change Initial Qty',	    \n" +
                "			css.id,			    \n" +
                "			uid,		    \n" +
                "			refcompid,      \n" +
                "			css.binID,				    \n" +
                "			b.warehouseID,			    \n" +
                "			w.parentWHID,	    \n" +
                "			orgQty,		    \n" +
                "			orgPkgUnit,      \n" +
                "			pkgQty,					    \n" +
                "			pkgUnit,				    \n" +
                "			uom,			    \n" +
                "			pInitialQtyChangeRemark,		      \n" +
                "			0,						    \n" +
                "			pUpdatedBy,				    \n" +
                "			fun_DatetimetoUTCDateTime(),      \n" +
                "			pUpdatedBy,				    \n" +
                "			fun_DatetimetoUTCDateTime()      \n" +
                "		FROM 	component_sid_stock  css      \n" +
                "		JOIN 	binmst b ON css.binID = b.id      \n" +
                "		JOIN 	warehousemst w ON b.warehouseID = w.id      \n" +
                "		WHERE 	css.id = pId;      \n" +
                "  \n" +
                "		# Update allocated qty with return status                  \n" +
                "		UPDATE 	kit_allocation k                   \n" +
                "		SET	k.status = 'D',                  \n" +
                "			k.updatedBy = pUpdatedBy,	              \n" +
                "			k.updatedAt = fun_DatetimetoUTCDateTime()                 \n" +
                "		WHERE 	k.refUIDId = pId                  \n" +
                "				AND k.status = 'A';                \n" +
                "	END IF;            \n" +
                "	COMMIT;                    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2793,'2.00','V1','Sproc_update_UMID_initial_count - FENIL'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2793:
            allDbChangesArray.push(
            /* **************************** New Script -> 14-08-2020 *********************************** */
            "insert into help_blog(pageID, title, description, version, isPublished, isDeleted, createdBy, updatedBy)  \n" +
            "select p.pageID, p.pageName as title, '<p>Coming Soon</p>' description,0 version, 1 isPublished, 0 isDeleted, 1 createdBy, 1 updatedBy  \n" +
            "from page_detail p  \n" +
            "where isDeleted = 0  \n" +
            "  and pageRoute is not null  \n" +
            "  and pageRoute != ''  \n" +
            "  and not exists (select 1 from help_blog h where h.pageID = p.pageID);  \n" +
            /* **************************** Add Script Version -> 14-08-2020 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (2794,'2.00','V1','created help blog for existing menu entries - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 2794:
            allDbChangesArray.push(
            /* **************************** New Script -> 14-08-2020 *********************************** */
            "DROP TRIGGER IF EXISTS `TRG_AI_page_detail_helpblog`;  \n" +
            "CREATE TRIGGER `TRG_AI_page_detail_helpblog` AFTER INSERT ON `page_detail` FOR EACH ROW  \n" +
            "BEGIN  \n" +
            "	IF NEW.pageID is not null and New.pageName is not null and NEW.pageRoute is not null and NEW.pageRoute != '' THEN  \n" +
            "		insert into help_blog(pageID, title, description, version, isPublished, isDeleted, createdBy, updatedBy)  \n" +
            "        values(NEW.pageID, New.pageName, '<p>Coming Soon</p>', 0, 1, 0, NEW.createdBy, NEW.updatedBy);  \n" +
            "    END IF;    \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 14-08-2020 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (2795,'2.00','V1','created trigger for help blog - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 2795:
                allDbChangesArray.push(
                /* **************************** New Script -> 14-08-2020 *********************************** */
                "DROP FUNCTION IF EXISTS fun_checkAndVerifyUMID ;  \n" +
                "CREATE FUNCTION `fun_checkAndVerifyUMID`(                      \n" +
                "	prefsidID INT,                      \n" +
                "	pmfgPNID INT,         \n" +
                "	pwoOpID INT,     \n" +
                "	pemployeeId INT) RETURNS varchar(500) CHARSET utf8mb4  \n" +
                "BEGIN                                \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;                                  \n" +
                "	SET result =1;		         \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE temp_umid_transIDs AS                       \n" +
                "	SELECT wtud.id FROM workorder_trans_umid_details wtud                                                   \n" +
                "		WHERE wtud.transactionType='U'                                 \n" +
                "		AND wtud.refsidid = prefsidID                                                    \n" +
                "		AND wtud.mfgPNID=pmfgPNID                                            \n" +
                "		AND wtud.reelStatus=\"C\" AND wtud.deletedAt IS NULL                     \n" +
                "		AND wtud.woOPID = pwoOpID ;  \n" +
                "		#AND isVerified=0;      \n" +
                "  \n" +
                "	IF((SELECT COUNT(1) FROM temp_umid_transIDs) > 0) THEN                                          \n" +
                "		UPDATE workorder_trans_umid_details                                          \n" +
                "		SET isVerified=1,                                          \n" +
                "		verifiedBy=pemployeeId,                                          \n" +
                "		verifiedOn=fun_DatetimetoUTCDateTime()                                          \n" +
                "		WHERE id IN (SELECT id FROM temp_umid_transIDs);    \n" +
                "		#AND isVerified=0;                                          \n" +
                "  \n" +
                "		-- VERIFIED                                    \n" +
                "		-- SET temp_last_inserted_umid_id = temp_feeder_transID;                  \n" +
                "		SET result = 1;                                            \n" +
                "	ELSE                                        \n" +
                "		-- FAILED                                    \n" +
                "		SET result = fun_checkAndInsertError('UMID001', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                              \n" +
                "	END IF;    \n" +
                "  \n" +
                "	RETURN result;                         \n" +
                "END ;  \n" +
                /* **************************** Add Script Version -> 14-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2796,'2.00','V1','fun_checkAndVerifyUMID - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;
            case 2796:
                allDbChangesArray.push(
                /* **************************** New Script -> 14-08-2020 *********************************** */
                "DROP FUNCTION  IF EXISTS fun_checkUMIDScan ;  \n" +
                "CREATE  FUNCTION `fun_checkUMIDScan`(                                              \n" +
                "	pUMID VARCHAR(100),                                              \n" +
                "	ppartID INT,                                              \n" +
                "	pwoTransID INT,                                             \n" +
                "	pwoOPID INT,                                             \n" +
                "	pemployeeId INT,                                            \n" +
                "	pcheckKitAllocation VARCHAR(5000),                                           \n" +
                "	ptransactionType VARCHAR(1),                                             \n" +
                "	pFromFeeder INT,                                          \n" +
                "	pisVerify INT,                                          \n" +
                "	pwoOpEqpID INT,                                          \n" +
                "	pfeederLocation VARCHAR(1000),                             \n" +
                "	pwoID INT(11),                            \n" +
                "	pCreatedBy VARCHAR(500),                            \n" +
                "	pisConfirmed INT(11)) RETURNS varchar(500) CHARSET utf8mb4  \n" +
                "BEGIN                                                        \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;                                                   \n" +
                "	DECLARE temp_umid_comp_id INT(11);                                                       \n" +
                "	DECLARE temp_umid_binID INT(11);                                                   \n" +
                "    DECLARE temp_umid_sid INT(11);    \n" +
                "	DECLARE temp_umid_package_id INT(11);                                           \n" +
                "	DECLARE temp_comp_alertExpiryDays INT(11);                                                    \n" +
                "	DECLARE flag_isKitValid INT (11);                                                          \n" +
                "	DECLARE flag_isTeamOperation INT (11) DEFAULT 0;                                                             \n" +
                "	DECLARE temp_expiryDate DATETIME;                                                           \n" +
                "	DECLARE temp_expiryDaysLeftValidation INT(11);                                                             \n" +
                "	DECLARE temp_expiryDaysLeftCount INT(11);                                                                \n" +
                "	DECLARE temp_config_dateFormat VARCHAR(1000);                                                              \n" +
                "	DECLARE temp_umid_valid INT (11) DEFAULT 1;                                                               \n" +
                "	DECLARE temp_isIncludeSubassembly INT (11) DEFAULT 0;                                                         \n" +
                "	DECLARE temp_recordFoundInAssembly VARCHAR (500);                                               \n" +
                "  \n" +
                "	DECLARE temp_comp_isGoodPart INT(11) DEFAULT 0;                         \n" +
                "	DECLARE temp_comp_partLevelRestrictUsePermanently INT(11) DEFAULT 0;                                                                      \n" +
                "	DECLARE temp_comp_partLevelRestrictPackagingUsePermanently INT(11) DEFAULT 0;                                     \n" +
                "	DECLARE temp_umid_restrictFromUMID INT(11) DEFAULT 0;                                     \n" +
                "	DECLARE temp_comp_is_cpn INT(11) DEFAULT 0;                                            \n" +
                "  \n" +
                "	SET temp_expiryDate = NULL;                                                          \n" +
                "	SET temp_expiryDaysLeftValidation = NULL;                                                        \n" +
                "	SET temp_expiryDaysLeftCount = NULL;                                          \n" +
                "	#########################################################################################                                              \n" +
                "	################### NOTE: Temporaray table for error comes from sp ######################                                              \n" +
                "	#########################################################################################                                             \n" +
                "	IF(pUMID IS NOT NULL) THEN	                                            \n" +
                "		# step 1 - get umid details from umid                                                  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_umid_details;                                                  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details AS                                                \n" +
                "		SELECT c.id, c.PIDCode, c.mfgPN,                                             \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgCodeID) mfgCode,                                          \n" +
                "			c.restrictUSEwithpermission AS partLevelRestrictUSEwithpermission,                                            \n" +
                "			c.restrictUsePermanently AS partLevelRestrictUsePermanently,                                            \n" +
                "			c.restrictPackagingUseWithpermission AS partLevelRestrictPackagingUseWithpermission,                                            \n" +
                "			c.restrictPackagingUsePermanently AS partLevelRestrictPackagingUsePermanently,                                            \n" +
                "			c.packagingGroupId,                                                \n" +
                "			c.rev AS rev,                                           \n" +
                "			c.imageURL AS imageURL,                                           \n" +
                "			c.documentPath,              \n" +
                "			c.mfgPNDescription AS mfgPNDescription,                                            \n" +
                "			c.roHSStatusID,                                           \n" +
                "			c.alertExpiryDays,                                          \n" +
                "			c.umidVerificationRequire,                                          \n" +
                "			c.uom,                               \n" +
                "			c.isGoodPart isGoodPart,                                          \n" +
                "			rr.name rohsStatus,                                           \n" +
                "			rr.rohsIcon rohsIcon,                                             \n" +
                "			css.id AS refsidid,                                            \n" +
                "			css.binID AS binID,                                                \n" +
                "			css.pkgQty AS pkgQty,                                                    \n" +
                "			-- css.pkgCount AS pkgCount,                                                       \n" +
                "			css.pkgUnit AS pkgUnit,                                                        \n" +
                "			css.uom AS pkgUOM,                                          \n" +
                "			css.uid,                                      \n" +
                "			fun_getUnitNameByID(c.uom) unitName,                                          \n" +
                "			css.isUMIDRestrict AS RestrictFromUMID,                                              \n" +
                "			css.expiryDate,                                            \n" +
                "			1 isActualComponent,                                                 \n" +
                "			0 isPackagingAlias,                      \n" +
                "			c.isCPN AS isCPN,             \n" +
                "			c.isCustom AS isCustom ,                 \n" +
                "			CAST(NULL AS CHAR(3000)) AS refDesig,                \n" +
                "			(SELECT feederLocation FROM workorder_operation_equipment_feeder_details	                \n" +
                "				WHERE id IN (SELECT eqpFeederID FROM workorder_trans_umid_details                 \n" +
                "					WHERE refsidid IN (SELECT id FROM component_sid_stock                   \n" +
                "					WHERE uid=pUMID AND isDeleted=0) AND isDeleted=0 AND reelStatus=\"P\")                \n" +
                "					AND woOPID=pwoOPID) feederLocation                                                      \n" +
                "		FROM component c                                                \n" +
                "		LEFT JOIN component_sid_stock css                                                \n" +
                "		ON css.refcompid = c.id AND css.deletedAt IS NULL                                              \n" +
                "		LEFT JOIN rfq_rohsmst rr ON (rr.id = c.roHSStatusID AND IFNULL(rr.isDeleted,0) =0)                                          \n" +
                "		WHERE css.uid = pUMID                                                \n" +
                "		AND c.deletedAt IS NULL;                                             \n" +
                "  \n" +
                "		SELECT isTeamOperation INTO flag_isTeamOperation FROM workorder_operation WHERE woopid = pwoOpID;                          \n" +
                "  \n" +
                "		#check UMID already scanned in operation                                            \n" +
                "		IF ((pFromFeeder <> 1 AND pisVerify <> 1)) THEN                              \n" +
                "			-- IF(IFNULL(flag_isTeamOperation,0) = 1) THEN                          \n" +
                "			-- 	IF ((SELECT COUNT(1) FROM workorder_trans_umid_details wtud                                             \n" +
                "			-- 		WHERE wtud.deletedAt IS NULL AND wtud.refsidid IN (SELECT refsidid FROM temp_umid_details)                                            \n" +
                "			-- 		AND wtud.woOPID = pwoOPID AND wtud.woTransID = pwoTransID                                      \n" +
                "			-- 		AND IFNULL(transactionType,ptransactionType)=ptransactionType) > 0) THEN                          \n" +
                "			-- 		-- ALREADY_IN_USE                                          \n" +
                "			-- 		SET temp_umid_valid = 0;                          \n" +
                "			-- 		SET result = fun_checkAndInsertError('UMID003', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                \n" +
                "			-- 	END IF;                          \n" +
                "			-- ELSE                          \n" +
                "				IF (pisConfirmed = 0 AND (SELECT COUNT(1) FROM workorder_trans_umid_details wtud                                             \n" +
                "			 		WHERE wtud.deletedAt IS NULL AND wtud.refsidid IN (SELECT refsidid FROM temp_umid_details)                                            \n" +
                "			 		AND wtud.woOPID = pwoOPID                                 \n" +
                "			 		AND IFNULL(transactionType,ptransactionType)=ptransactionType                \n" +
                "			 		AND woTransID = pwoTransID) > 0) THEN                          \n" +
                "			 		-- ALREADY_IN_USE                           \n" +
                "			 		SET temp_umid_valid = 0;                                         \n" +
                "			 		SET result = fun_checkAndInsertError('UMID037', 0, 0, 1, 0, 0, \"DUP\", NULL, NULL);                                \n" +
                "			 	END IF;                          \n" +
                "			-- END IF;                           \n" +
                "		END IF;                              \n" +
                "		IF(temp_umid_valid = 1) THEN                          \n" +
                "			# check umid available in list                                      \n" +
                "			# yes -  check for pid in bom                                                \n" +
                "			# no - invalid umid                                                \n" +
                "			## restrict to use forever - restrictUsePermanently                                         \n" +
                "			IF((SELECT COUNT(1) FROM temp_umid_details) > 0) THEN                                      \n" +
                "				SELECT id,packagingGroupId,                                  \n" +
                "					alertExpiryDays,expiryDate,                                   \n" +
                "					IFNULL(partLevelRestrictUsePermanently,0),IFNULL(partLevelRestrictPackagingUsePermanently,0),                                   \n" +
                "					IFNULL(RestrictFromUMID,0), isGoodPart, isCPN, binID , refsidid                          \n" +
                "					-- , refSalesOrderDetID                                            \n" +
                "				INTO temp_umid_comp_id,temp_umid_package_id,                                   \n" +
                "					temp_comp_alertExpiryDays, temp_expiryDate,                                  \n" +
                "					temp_comp_partLevelRestrictUsePermanently,temp_comp_partLevelRestrictPackagingUsePermanently,                                      \n" +
                "					temp_umid_restrictFromUMID, temp_comp_isGoodPart, temp_comp_is_cpn, temp_umid_binID ,temp_umid_sid                     \n" +
                "					-- , temp_umid_refSalesOrderDetID                                  \n" +
                "				FROM temp_umid_details WHERE uid=pUMID;                                   \n" +
                "  \n" +
                "				#check for part expired or not                                            \n" +
                "				#alertExpiryDays                                          \n" +
                "				#umidVerificationRequire                      \n" +
                "				SELECT `values` INTO temp_config_dateFormat FROM systemconfigrations WHERE `key`=\"DatePickerDateFormat\";                              \n" +
                "				IF((IFNULL(temp_expiryDate,0) > 0) AND (fun_DatetimetoUTCDateTime() > (temp_expiryDate))) THEN                                       \n" +
                "					-- EXPIRED_ON                                          \n" +
                "					SET result = fun_checkAndInsertError('UMID011', 0, 1, 0, 0, 0, temp_expiryDate, temp_config_dateFormat, NULL);                                          \n" +
                "				ELSEIF(temp_comp_partLevelRestrictUsePermanently = 1) THEN                                  \n" +
                "					-- RESTRICTED_FROM_PART                                        \n" +
                "					SET result = fun_checkAndInsertError('UMID013', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                  \n" +
                "				ELSEIF(temp_comp_partLevelRestrictPackagingUsePermanently = 1) THEN                                  \n" +
                "					-- RESTRICTED_FROM_PART_PACKAGING                                          \n" +
                "					SET result = fun_checkAndInsertError('UMID022', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                   \n" +
                "				ELSEIF(temp_umid_restrictFromUMID = 1) THEN                                  \n" +
                "					-- RESTRICTED_FROM_UMID                                          \n" +
                "					SET result = fun_checkAndInsertError('UMID012', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                   \n" +
                "				ELSEIF(temp_comp_isGoodPart <> 1) THEN                                  \n" +
                "					-- RESTRICTED_INCORRECT_PART                                          \n" +
                "					SET result = fun_checkAndInsertError('UMID028', 0, 1, 0, 0, 0, NULL, NULL, NULL);                       \n" +
                "				ELSEIF((SELECT COUNT(1) FROM binmst b                       \n" +
                "						WHERE deletedAt IS NULL                       \n" +
                "						AND warehouseID IN                       \n" +
                "							(SELECT id FROM warehousemst WHERE deletedAt IS NULL AND parentWHID=-2)                       \n" +
                "						AND id=temp_umid_binID) = 0)  THEN                      \n" +
                "					-- UMID_MUST_BE_FROM_PRODUCTION_WAREHOUSE                                          \n" +
                "					SET result = fun_checkAndInsertError('UMID031', 0, 1, 0, 0, 0, NULL, NULL, NULL);    	                      \n" +
                "				ELSEIF((SELECT COUNT(1) FROM workorder_trans_umid_details ud                       \n" +
                "						WHERE deletedAt IS NULL                       \n" +
                "						AND reelstatus = 'P'    \n" +
                "                        AND transactionType  = 'F'    \n" +
                "                        AND refsidid = temp_umid_sid) > 0 and pisVerify=0)  THEN                      \n" +
                "					-- UMID SHOULD NOT BE ALREADY  IN FEEDER                                         \n" +
                "					SET result = fun_checkAndInsertError('UMID041', 0, 1, 0, 0, 0, pUMID, NULL, NULL);                     								    \n" +
                "				ELSE                                                       \n" +
                "					#check current umid is assigned in bom or not                                                \n" +
                "					#check with part available in BOM or not                         \n" +
                "					-- check for subassembly flag in work order and then check kit allocation case in subaasembly too.                        \n" +
                "					SELECT IFNULL(isIncludeSubAssembly,0) INTO temp_isIncludeSubassembly FROM workorder WHERE woID=pwoID;                              \n" +
                "					IF (pFromFeeder = 1) THEN                                    \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;                                                   \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list                                                  \n" +
                "						SELECT mfgpn AS mfgPN,                                \n" +
                "							AssemblyID AS AssemblyID,                                             \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,                                               \n" +
                "							restrictPart AS restrictPart,                                              \n" +
                "							custPN AS custPN,                                                \n" +
                "							custPNID AS custPNID,                                                \n" +
                "							PIDCode,                                                \n" +
                "							LineID,                                                \n" +
                "							id AS rfqLineItemsID,                                                \n" +
                "							refDesig AS refDesig,                                                \n" +
                "							isBOMPart AS isActualComponent,                                                \n" +
                "							isPackagingAlias,                                                \n" +
                "							isCPN,                                  \n" +
                "							isInstall,                                  \n" +
                "							isPurchase,                                  \n" +
                "							isBuyDNPQty,                                  \n" +
                "							customerApprovalCPN,                                  \n" +
                "							partLevelRestrictUSEwithpermission,                                  \n" +
                "							partLevelRestrictUsePermanently,                                  \n" +
                "							partLevelRestrictPackagingUseWithpermission,                                  \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,                                  \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,                                  \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,                                  \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,                                  \n" +
                "							lineLevelRestrictUseWithPermissionStep,                                  \n" +
                "							lineLevelReStrictUsePermanentlyStep,                                  \n" +
                "							lineLevelRestrictUseInBOMStep,                                  \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,                        \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,                      \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,                                \n" +
                "							lineLevelCustomerApproval,                      \n" +
                "							RoHSStatusID                                                \n" +
                "						FROM vu_bom_details_with_alias WHERE AssyID = ppartID;           \n" +
                "                    ELSEIF pcheckKitAllocation = 'MISSINGPART' THEN   -- ADDED FOR MISSING PART AS  NO NEED TO CHECK KIT ALLOCATION         \n" +
                "                    #SELECT 'CREATE TEMP temp_assy_part_list TABLE ';        \n" +
                "                    DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;                                                   \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list                                                  \n" +
                "						SELECT mfgpn AS mfgPN,                                \n" +
                "							AssemblyID AS AssemblyID,                                             \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,                                                                        \n" +
                "							restrictPart AS restrictPart,                                              \n" +
                "							custPN AS custPN,                                                \n" +
                "							custPNID AS custPNID,                                                \n" +
                "							PIDCode,                                                \n" +
                "							LineID,                                                \n" +
                "							id AS rfqLineItemsID,                                                \n" +
                "							refDesig AS refDesig,                                                \n" +
                "							isBOMPart AS isActualComponent,                                                \n" +
                "							isPackagingAlias,                                                \n" +
                "							isCPN,                                  \n" +
                "							isInstall,                                  \n" +
                "							isPurchase,                                  \n" +
                "							isBuyDNPQty,                                  \n" +
                "							customerApprovalCPN,                                  \n" +
                "							partLevelRestrictUSEwithpermission,                                  \n" +
                "							partLevelRestrictUsePermanently,                                  \n" +
                "							partLevelRestrictPackagingUseWithpermission,                                  \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,                                  \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,                                  \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,                                  \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,                                  \n" +
                "							lineLevelRestrictUseWithPermissionStep,                                  \n" +
                "							lineLevelReStrictUsePermanentlyStep,                                  \n" +
                "							lineLevelRestrictUseInBOMStep,                                  \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,                           \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,                      \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,                                     \n" +
                "							lineLevelCustomerApproval,                      \n" +
                "							RoHSStatusID                                                \n" +
                "						FROM vu_bom_details_with_alias WHERE                         \n" +
                "						(AssyID IN (SELECT prPerPartID FROM part_sub_assy_relationship                             \n" +
                "									WHERE partID=ppartID AND deletedAt IS NULL)                        \n" +
                "						OR (AssyID IN (SELECT assyID FROM kit_allocation                         \n" +
                "							WHERE refSalesOrderDetID                             \n" +
                "							IN (SELECT salesOrderDetailID FROM workorder_salesorder_details                             \n" +
                "							WHERE deletedAt IS NULL AND woID=pwoID) AND `status` = \"A\" AND assyID=ppartID)));              \n" +
                "					ELSEIF (temp_isIncludeSubassembly = 1 AND pFromFeeder <> 1) THEN                        \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;                                                   \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list                                                  \n" +
                "						SELECT mfgpn AS mfgPN,                                \n" +
                "							AssemblyID AS AssemblyID,                                             \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,                                                                        \n" +
                "							restrictPart AS restrictPart,                                              \n" +
                "							custPN AS custPN,                                                \n" +
                "							custPNID AS custPNID,                                                \n" +
                "							PIDCode,                                                \n" +
                "							LineID,                                                \n" +
                "							id AS rfqLineItemsID,                                                \n" +
                "							refDesig AS refDesig,                                                \n" +
                "							isBOMPart AS isActualComponent,                                                \n" +
                "							isPackagingAlias,                                                \n" +
                "							isCPN,                                  \n" +
                "							isInstall,                                  \n" +
                "							isPurchase,                                  \n" +
                "							isBuyDNPQty,                                  \n" +
                "							customerApprovalCPN,                                  \n" +
                "							partLevelRestrictUSEwithpermission,                                  \n" +
                "							partLevelRestrictUsePermanently,                                  \n" +
                "							partLevelRestrictPackagingUseWithpermission,                                  \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,                                  \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,                                  \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,                                  \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,                                  \n" +
                "							lineLevelRestrictUseWithPermissionStep,                                  \n" +
                "							lineLevelReStrictUsePermanentlyStep,                                  \n" +
                "							lineLevelRestrictUseInBOMStep,                                  \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,                           \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,                      \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,                                     \n" +
                "							lineLevelCustomerApproval,                      \n" +
                "							RoHSStatusID                                                \n" +
                "						FROM vu_bom_details_with_alias WHERE                         \n" +
                "						(AssyID IN (SELECT prPerPartID FROM part_sub_assy_relationship                             \n" +
                "									WHERE partID=ppartID AND deletedAt IS NULL)                        \n" +
                "						OR (AssyID IN (SELECT assyID FROM kit_allocation                         \n" +
                "							WHERE refSalesOrderDetID                             \n" +
                "							IN (SELECT salesOrderDetailID FROM workorder_salesorder_details                             \n" +
                "							WHERE deletedAt IS NULL AND woID=pwoID) AND `status` = \"A\" AND assyID=ppartID)));                                   \n" +
                "					ELSE                                 \n" +
                "						DROP TEMPORARY TABLE IF EXISTS temp_assy_part_list;                                                   \n" +
                "						CREATE TEMPORARY TABLE temp_assy_part_list                                                  \n" +
                "						SELECT mfgpn AS mfgPN,                                   \n" +
                "							AssemblyID AS AssemblyID,                                            \n" +
                "							CASE WHEN temp_comp_is_cpn = 0 THEN mfgPnIDWithPackagingAliasID ELSE custPNID END AS mfgPNID,                                               \n" +
                "							restrictPart AS restrictPart,                                              \n" +
                "							custPN AS custPN,                                                \n" +
                "							custPNID AS custPNID,                                                \n" +
                "							PIDCode,                                                \n" +
                "							LineID,                                                \n" +
                "							id AS rfqLineItemsID,                                                \n" +
                "							refDesig AS refDesig,                                                \n" +
                "							isBOMPart AS isActualComponent,                                                \n" +
                "							isPackagingAlias,                                                \n" +
                "							isCPN,                                  \n" +
                "							isInstall,                                  \n" +
                "							isPurchase,                                  \n" +
                "							isBuyDNPQty,                                  \n" +
                "							customerApprovalCPN,                                  \n" +
                "							partLevelRestrictUSEwithpermission,                                  \n" +
                "							partLevelRestrictUsePermanently,                                  \n" +
                "							partLevelRestrictPackagingUseWithpermission,                                  \n" +
                "							partLevelRestrictPackagingUsePermaneNTly,                                  \n" +
                "							rfqLevelRestrictCPNUseInBOMStep,                                  \n" +
                "							rfqLevelRestrictCPNUseWithPermissionStep,                                  \n" +
                "							rfqLevelRestrictCPNUsePermanentlyStep,                                  \n" +
                "							lineLevelRestrictUseWithPermissionStep,                                  \n" +
                "							lineLevelReStrictUsePermanentlyStep,                                  \n" +
                "							lineLevelRestrictUseInBOMStep,                                  \n" +
                "							lineLevelRestrictUseInBOMWIThPermissionStep,                         \n" +
                "							lineLevelrestrictUseInBOMExcludingAliasStep,                      \n" +
                "							lineLevelRestrictUseInBOMExcludingAliasWithPermissionStep,                                       \n" +
                "							lineLevelCustomerApproval,                      \n" +
                "							RoHSStatusID                                                \n" +
                "						FROM vu_bom_details_with_alias                             \n" +
                "							WHERE AssyID                             \n" +
                "							IN (SELECT assyID FROM kit_allocation                             \n" +
                "								WHERE refSalesOrderDetID                             \n" +
                "								IN (SELECT salesOrderDetailID FROM workorder_salesorder_details                             \n" +
                "									WHERE deletedAt IS NULL AND woID=pwoID) AND `status` = \"A\" AND assyID=ppartID);                            \n" +
                "							-- IN (SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID=ppartID AND deletedAt IS NULL);                                \n" +
                "  \n" +
                "					END IF;                                    \n" +
                "					# if umid assigned in bom than check for feeder details available for pid		                                                \n" +
                "					#yes - check with umid allocated in kit or not                                                \n" +
                "					#no - umid not assigned in bom          \n" +
                "  \n" +
                "					IF((SELECT COUNT(1) FROM temp_assy_part_list                                                 \n" +
                "						WHERE mfgPNID IN (SELECT id FROM temp_umid_details)                       \n" +
                "						) = 0) THEN                                                  \n" +
                "						IF (pFromFeeder = 1) THEN                      \n" +
                "							-- UMID_NOT_ASSIGNED                                      \n" +
                "							SET result = fun_checkAndInsertError('UMID008', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                               \n" +
                "						ELSE                                        \n" +
                "							## Check for Supply materials and tools                                             \n" +
                "							IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND                                             \n" +
                "								wop.partID = temp_umid_comp_id AND                                             \n" +
                "								wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN                                            \n" +
                "								SET result = 1;                      \n" +
                "							## Check for packaging part for umid.                                           \n" +
                "							ELSEIF((SELECT COUNT(1) FROM component_packagingalias cp WHERE cp.aliasgroupID = temp_umid_package_id                                          \n" +
                "								AND cp.componentID = temp_umid_comp_id AND cp.deletedAt IS NULL AND cp.aliasgroupID IN (SELECT c.packagingGroupId FROM component c                          \n" +
                "											WHERE c.id IN (SELECT woop.partID FROM workorder_operation_part woop WHERE woop.woID=pwoID AND woop.woOPID=pwoOPID AND woop.deletedAt IS NULL)                           \n" +
                "											AND c.deletedAt IS NULL))  > 0) THEN                                       \n" +
                "								SET result = 1;                      \n" +
                "							ELSE                                            \n" +
                "								-- UMID_NOT_IN_WORKORDER_OR_KIT                                     \n" +
                "								SET result = fun_checkAndInsertError('UMID007', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                     \n" +
                "							END IF;                                            \n" +
                "  \n" +
                "						END IF;                     \n" +
                "					ELSE                    \n" +
                "						SET result = 1;                                 \n" +
                "					END IF;                                   \n" +
                "				END IF;                                  \n" +
                "			ELSE                                              \n" +
                "				-- INVALID                                        \n" +
                "				SET result = fun_checkAndInsertError('UMID004', 0, 1, 0, 0, 0, NULL, NULL, NULL);  	                                      \n" +
                "			END IF;                                             \n" +
                "		END IF;                                               \n" +
                "	ELSE                                                 \n" +
                "		-- REQUIRED                                          \n" +
                "		SET result = fun_checkAndInsertError('UMID005', 0, 1, 0, 0, 0, NULL, NULL, NULL);                                                  \n" +
                "	END IF;                                                \n" +
                "	RETURN result;                                                 \n" +
                "END ;  \n" +          
                /* **************************** Add Script Version -> 14-08-2020 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (2797,'2.00','V1','fun_checkUMIDScan - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;
    }
    return allDbChangesArray;

});

// sample
//break;
//case 2562:
//  allDbChangesArray.push(
//  /* **************************** New Script -> 15-07-2020 *********************************** */
//  put your formatted script here
//  /* **************************** Add Script Version -> 15-07-2020 *********************************** */
//  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
//  "VALUES (2563,'2.00','V1',' Sample entry - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
//  );
//break;

/* ******** **********************/
// Please Note : Don't forgot to set schemaVersion as '2.00' instead of '1.00' as branch is Dev Branch
/* ******** **********************/