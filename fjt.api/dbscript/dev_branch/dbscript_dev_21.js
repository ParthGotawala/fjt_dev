(function (maxBuildNumber, userid, requiredDet) {
    let allDbChangesArray = [];
    switch (maxBuildNumber) {
        case 4450:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 06-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4451,'2.00','V1',' Sample entry - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4451:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-04-2021 *********************************** */
                "UPDATE `identity` SET `numberLength` = 10 WHERE `type`='BoxSerialNoId';  \n" +
                "UPDATE `identity` SET `prefix`='PS', `numberLength` = 0 WHERE `type`='CustomerPackingSlipID';  \n" +
                "UPDATE `identity` SET `prefix`='PO', `numberLength` = 9 WHERE `type`='PONumberSysID';  \n" +
                "UPDATE `identity` SET `prefix`='CPS', `numberLength` = 9 WHERE `type`='CustomerPackingSlipSystemID';  \n" +
                "UPDATE `identity` SET `prefix`='CINV', `numberLength` = 9 WHERE `type`='CustomerInvoiceSystemID';  \n" +
                "UPDATE `identity` SET `prefix`='MFR', `numberLength` = 11 WHERE `type`='MFRSystemID';  \n" +
                "UPDATE `identity` SET `prefix`='SUP', `numberLength` = 11 WHERE `type`='SupplierSystemID';  \n" +
                "UPDATE `identity` SET `prefix`='FCA', `numberLength` = 5 WHERE `type`='CustSystemID';  \n" +
                "UPDATE `identity` SET `prefix`='SO', `numberLength` = 9 WHERE `type`='salesOrderSystemID';  \n" +
                "UPDATE `identity` SET `prefix`='SPS', `numberLength` = 9 WHERE `type`='SupplierPackingSlipSystemID';  \n" +
                "UPDATE `identity` SET `prefix`='SRPS', `numberLength` = 8 WHERE `type`='SupplierRMASystemID';  \n" +
                "UPDATE `identity` SET `prefix`='SINV', `numberLength` = 9 WHERE `type`='SupplierInvoiceSystemID';  \n" +
                "UPDATE `identity` SET `prefix`='SCM', `numberLength` = 9 WHERE `type`='SupplierCreditMemoSystemID';  \n" +
                "UPDATE `identity` SET `prefix`='SDM', `numberLength` = 9 WHERE `type`='SupplierDebitMemoSystemID';  \n" +
                "UPDATE `identity` SET `prefix`='SPMT', `numberLength` = 9 WHERE `type`='PaymentForSupplierSystemID';  \n" +
                "UPDATE `identity` SET `prefix`='CCM', `numberLength` = 9 WHERE `type`='customerCreditMemoSystemID';  \n" +
                "UPDATE `identity` SET `prefix`='CPMT', `numberLength` = 9 WHERE `type`='CustomerPaymentSystemID';  \n" +
                "UPDATE `identity` SET `prefix`='ACF', `numberLength` = 9 WHERE `type`='AccountClassificationSystemID';  \n" +
                "UPDATE `identity` SET `prefix`='ACCT', `numberLength` = 9 WHERE `type`='ChartOfAccountsSystemID';  \n" +
                "UPDATE `identity` SET `prefix`='FCA', `numberLength` = 4 WHERE `type`='AutoGeneratedPaymentNumber';  \n" +
                /* **************************** Add Script Version ->06-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4452,'2.00','V1',' User Story 31638: Create common store procedure for generating SystemID - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4452:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-04-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAllAssemblyBySearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllAssemblyBySearch`(            \n" +
                "	IN pSearch VARCHAR(100),            \n" +
                "	IN pId INT(11),          \n" +
                "	IN pIsActiveAssembliy TINYINT(1)          \n" +
                ")  \n" +
                "BEGIN            \n" +
                "	 SELECT *       \n" +
                "     FROM (            \n" +
                "				SELECT 	com.id,  	com.mfgPN, 		com.PIDCode,	com.mfgPNDescription, m.id as mfgCodeID,    \n" +
                "						CONCAT('(', m.mfgCode, ') ', com.mfgPN) mfgPNWithMfgCode ,    \n" +
                "                        CONCAT('(', m.mfgCode, ') ', m.mfgName) As mfgCodewithName ,   \n" +
                "						com.nickName , m.mfgCode , r.rohsIcon , r.name  \n" +
                "				FROM 	COMPONENT com          \n" +
                "				INNER JOIN mfgCodemst m ON com.mfgcodeID = m.id  AND m.isDeleted = 0 AND m.mfgType = 'MFG'      \n" +
                "                JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID   \n" +
                "				WHERE 	com.id = IFNULL(pId, com.id)           \n" +
                "				AND 	com.category = 3            \n" +
                "				AND 	com.isDeleted = 0      \n" +
                "				AND  	(CASE WHEN pIsActiveAssembliy = TRUE THEN          \n" +
                "								com.partStatus = 1  /*Active*/        \n" +
                "							WHEN pIsActiveAssembliy = FALSE THEN          \n" +
                "								com.partStatus != 1 /*Inactive (other than active consider as inactive)*/        \n" +
                "							ELSE 1 = 1 END)        \n" +
                "	) AS a            \n" +
                "	WHERE (CASE WHEN pSearch IS NULL THEN 1 = 1            \n" +
                "			ELSE (mfgPNWithMfgCode LIKE CONCAT('%', pSearch , '%') OR PIDCode LIKE CONCAT('%', pSearch , '%'))            \n" +
                "			END)        \n" +
                "	ORDER BY mfgPNWithMfgCode;             \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4453,'2.00','V1',' Sproc_GetAllAssemblyBySearch - Heena '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4453:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-04-2021 *********************************** */
                "UPDATE entity   \n" +
                "SET entityName = \"Equipment, Workstation & Sample\"  \n" +
                "WHERE entityID = -3 and entityName = \"Equipment & Workstation\";  \n" +
                /* **************************** Add Script Version -> 06-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4454,'2.00','V1',' Update entity - Heena '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4454:
            allDbChangesArray.push(
                "UPDATE `identity`  \n" +
                "SET numberLength = 4   \n" +
                "WHERE `type` = 'CustomerPaymentNumberForZeroValuePayment' ;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateCustomerPayment`(          \n" +
                "	IN pCustInvoicePaymentDetList JSON,          \n" +
                "	IN pMfgcodeID INT,          \n" +
                "	IN pPaymentNumber VARCHAR(50),          \n" +
                "	IN pPaymentDate DATE,          \n" +
                "	IN pPaymentAmount DECIMAL(18,8),          \n" +
                "	IN pPaymentType INT,          \n" +
                "	IN pAccountReference VARCHAR(50),          \n" +
                "	IN pBankAccountMasID INT,          \n" +
                "	IN pBankAccountNo VARCHAR(50),          \n" +
                "	IN pBankName VARCHAR(255),          \n" +
                "	IN pRemark VARCHAR(1000),          \n" +
                "	IN pRefPaymentMode VARCHAR(1),          \n" +
                "	IN pTotSelectedInvOfCust INT,         \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,       \n" +
                "	IN pSystemID VARCHAR(20),      \n" +
                "	IN pisZeroPayment INT,    \n" +
                "	IN pUserID INT,          \n" +
                "	IN pUserRoleID INT          \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "  \n" +
                "	DECLARE insertedInvPaymentMstID INT;      \n" +
                "	DECLARE vCountExistsCheckNo INT;    \n" +
                "	DECLARE vLockStatusToBe VARCHAR(5);      \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;      \n" +
                "  \n" +
                "	IF (pisConfmTakenForDuplicateCheckNo = 0) THEN      \n" +
                "		/* check duplicate check number if confirmation not taken */        \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo                \n" +
                "		FROM packingslip_invoice_payment                \n" +
                "		WHERE refPaymentMode = pRefPaymentMode       \n" +
                "		AND paymentNumber = pPaymentNumber                \n" +
                "		AND mfgcodeID = pMfgcodeID      \n" +
                "		AND isPaymentVoided = 0      \n" +
                "		AND isdeleted = 0    ;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "  \n" +
                "	IF(vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0       \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN          \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */            \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;                                            \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS                                                      \n" +
                "		SELECT 	*                                                       \n" +
                "		FROM 	JSON_TABLE(               \n" +
                "			pCustInvoicePaymentDetList,                                                      \n" +
                "				\"$[*]\" COLUMNS(              \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",                                               \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",                                                      \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,          \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,          \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\"          \n" +
                "				)            \n" +
                "			) AS CustInvoicePaymentDetList_JT ;           \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */	            \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;                                            \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS 	          \n" +
                "			SELECT cps.id AS invoiceMstID,           \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,          \n" +
                "				cps.status,          \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det          \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id       \n" +
                "					AND isPaymentVoided = 0          \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet          \n" +
                "			FROM customer_packingslip cps          \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)          \n" +
                "			AND cps.isDeleted = 0          \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */          \n" +
                "		;          \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)           \n" +
                "			> if selected invoice not found from db          \n" +
                "			> original Payment Amount Of Invoice  mismatch          \n" +
                "			> invoice Total Paid Amount mismatch          \n" +
                "			*/	            \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;                                            \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS           \n" +
                "			SELECT tucipl.*          \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl          \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID          \n" +
                "			WHERE (          \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))            \n" +
                "				OR          \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))	          \n" +
                "				OR          \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))          \n" +
                "				)          \n" +
                "			;          \n" +
                "  \n" +
                "	END IF;          \n" +
                "  \n" +
                "	/* set up default temp table if not created */            \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS            \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;          \n" +
                "  \n" +
                "	IF (vCountExistsCheckNo = 0 AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN          \n" +
                "		-- select 'create';     \n" +
                "  \n" +
                "		/* Lock Status >> Ready To Lock - \"RL\" , Locked - \"LC\" , N/A - \"NA\" */    \n" +
                "		SET vLockStatusToBe = 'NA' ;    \n" +
                "		IF(pTotSelectedInvOfCust > 0) THEN     \n" +
                "			IF((pPaymentAmount - (SELECT IFNULL(SUM(paymentAmountForSelectedInvoice),0)     \n" +
                "							FROM temp_UI_CustInvoicePaymentDetList)) = 0) THEN    \n" +
                "				SET vLockStatusToBe = 'RL' ;    \n" +
                "			END IF;	    \n" +
                "		END IF;	    \n" +
                "  \n" +
                "  \n" +
                "		INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,          \n" +
                "			`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,          \n" +
                "			`bankName`,`remark`,`refPaymentMode`,`systemId` ,     \n" +
                "			`lockStatus`, `isZeroPayment` ,       \n" +
                "			`createdBy`, `createByRoleId`,`updatedBy`,`updateByRoleId`)          \n" +
                "		VALUES(pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,          \n" +
                "			pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,          \n" +
                "			pBankName, pRemark, pRefPaymentMode, pSystemID,          \n" +
                "			vLockStatusToBe,pisZeroPayment,    \n" +
                "			pUserID, pUserRoleID, pUserID, pUserRoleID) ;      \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		SET insertedInvPaymentMstID = LAST_INSERT_ID();             \n" +
                "  \n" +
                "  \n" +
                "		IF(pTotSelectedInvOfCust > 0) THEN          \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,          \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)          \n" +
                "			SELECT insertedInvPaymentMstID, paymentAmountForSelectedInvoice, invoiceMstID,          \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID          \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList ;          \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */	          \n" +
                "			UPDATE customer_packingslip cps          \n" +
                "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID          \n" +
                "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv,          \n" +
                "				cps.updatedBy = pUserID,             \n" +
                "				cps.updateByRoleId = pUserRoleID ,            \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()          \n" +
                "			WHERE cps.id = tucipdl.invoiceMstID          \n" +
                "			-- and tucipdl.newApplyPaymentStatusOfInv is not null           \n" +
                "			-- and tucipdl.newApplyPaymentStatusOfInv != ''          \n" +
                "			AND cps.isDeleted = 0	;          \n" +
                "  \n" +
                "		END IF;          \n" +
                "  \n" +
                "  \n" +
                "	END IF;          \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */            \n" +
                "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0) OR (vCountExistsCheckNo > 0)) THEN            \n" +
                "		SELECT 0 AS 'spStatus' ;            \n" +
                "	ELSE            \n" +
                "		SELECT 1 AS 'spStatus' ;            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	/* Resp[1] - get all mis match amount records or deleted invoices */            \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;           \n" +
                "  \n" +
                "	/* Resp[2] - newly inserted payment master id  */           \n" +
                "	SELECT insertedInvPaymentMstID AS insertedInvPaymentMstID;       \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */        \n" +
                "	IF (vCountExistsCheckNo > 0) THEN      \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;            \n" +
                "	ELSE            \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;            \n" +
                "	END IF;            \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;             \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;           \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;          \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->06-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4455,'2.00','V1',' Sproc_CreateCustomerPayment - Ketan '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4455:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-04-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_ValiationAndSaveStockAllocation`;  \n" +
                "CREATE PROCEDURE `Sproc_ValiationAndSaveStockAllocation`(                                                                                     \n" +
                "            	IN pStockDetail JSON,                                 \n" +
                "            	IN pRefSalesOrderDetID INT,                                 \n" +
                "            	IN pAssyID INT,                                 \n" +
                "            	IN pPartIds VARCHAR(1000),                         \n" +
                "            	IN pUMIDs VARCHAR(5000),                               \n" +
                "            	IN pUserId VARCHAR(50),                               \n" +
                "            	IN pCheckForSameUmid BOOLEAN                                \n" +
                "            )  \n" +
                "BEGIN                                   \n" +
                "            	-- select pStockDetail, JSON_VALID(pStockDetail);                                 \n" +
                "            	DECLARE v_CountSameUMIDFind INT;                               \n" +
                "            	DECLARE v_ConcateUMID VARCHAR(10000);                            \n" +
                "            	DECLARE v_KitName LONGTEXT;                         \n" +
                "            	DECLARE v_UMIDForKitName VARCHAR(10000);  \n" +
                "				DECLARE v_KitIds VARCHAR(1000);                   \n" +
                "            	SET v_ConcateUMID = NULL;                                 \n" +
                "  \n" +
                "				/* create temp table for kit allocation details */  \n" +
                "            	DROP TEMPORARY TABLE IF EXISTS tempKitAllocationDetail;                       \n" +
                "            	CREATE TEMPORARY TABLE IF NOT EXISTS tempKitAllocationDetail AS                                 \n" +
                "            	SELECT 	*                                  \n" +
                "            	FROM 	JSON_TABLE(                                 \n" +
                "            		pStockDetail,                                 \n" +
                "            		\"$[*]\" COLUMNS(                                 \n" +
                "            			refSalesOrderDetID INT PATH \"$.refSalesOrderDetID\",                                 \n" +
                "            			assyID INT PATH \"$.assyID\",                                 \n" +
                "            			uid VARCHAR(50) PATH \"$.uid\",                                 \n" +
                "            			refBOMLineID INT PATH \"$.refBOMLineID\",                                 \n" +
                "            			STATUS VARCHAR(50) PATH \"$.status\",                                 \n" +
                "            			refUIDId INT PATH \"$.refUIDId\",                                 \n" +
                "            			partId INT PATH \"$.partId\",                                 \n" +
                "            			allocatedQty DECIMAL(18,8) PATH \"$.allocatedQty\",                                 \n" +
                "            			allocatedUnit DECIMAL(18,8) PATH \"$.allocatedUnit\",                                 \n" +
                "            			allocatedUOM INT PATH \"$.allocatedUOM\",                                 \n" +
                "            			umidUnits INT PATH \"$.umidUnits\",                               \n" +
                "            			kitAllocationId INT PATH \"$.kitAllocationId\",                            \n" +
                "            			PIDCode VARCHAR(100) PATH \"$.PIDCode\",                   \n" +
                "            			restricType VARCHAR(500) PATH \"$.restricType\",                   \n" +
                "            			transactionType VARCHAR(1000) PATH \"$.transactionType\",                   \n" +
                "            			refTableName VARCHAR(255) PATH \"$.refTableName\",                   \n" +
                "            			approveFromPage VARCHAR(255) PATH \"$.approveFromPage\",                   \n" +
                "            			approvedBy VARCHAR(255) PATH \"$.approvedBy\",                   \n" +
                "            			approvalReason TEXT PATH \"$.approvalReason\",       \n" +
                "						confirmationType INT PATH \"$.confirmationType\",         \n" +
                "						roHSApprovalReason VARCHAR(1000) PATH \"$.roHSApprovalReason\",         \n" +
                "						allocationRemark VARCHAR(1000) PATH \"$.allocationRemark\"                                  \n" +
                "            		)                                 \n" +
                "            	) AS jt;    \n" +
                "  \n" +
                "                /* create temp table for response */  \n" +
                "            	DROP TEMPORARY TABLE IF EXISTS  temp_Validation_Error;                                                                                        \n" +
                "            	CREATE TEMPORARY TABLE temp_Validation_Error                                 \n" +
                "            	(                                                                                       \n" +
                "            		IsSuccess BOOLEAN,                                                                             \n" +
                "            		UMID VARCHAR(5000),                               \n" +
                "            		KitName LONGTEXT,    \n" +
                "            		ErrorCode INT,              \n" +
                "					KitIds VARCHAR(1000)                                                                          \n" +
                "            	);                                  \n" +
                "  \n" +
                "            	IF (pCheckForSameUmid = TRUE) THEN                               \n" +
                "            		SELECT 	COUNT(1), GROUP_CONCAT(uid) INTO v_CountSameUMIDFind, v_ConcateUMID                                \n" +
                "            		FROM 	kit_allocation                                \n" +
                "            		WHERE 	refSalesOrderDetID = pRefSalesOrderDetID AND STATUS = 'A' AND assyID = pAssyID  AND partId IN (pPartIds) AND refUIDId IN (pUMIDs);                               \n" +
                "            	ELSE                               \n" +
                "            		SET v_CountSameUMIDFind = 0;                               \n" +
                "            	END IF;       \n" +
                "  \n" +
                "            	IF (v_CountSameUMIDFind = 0) THEN                               \n" +
                "            		block1: BEGIN                                 \n" +
                "            			DECLARE exit_loop BOOLEAN DEFAULT FALSE;                                   \n" +
                "            			DECLARE v_RefSalesOrderDetID INT;                                 \n" +
                "            			DECLARE v_AssyID INT;                                 \n" +
                "            			DECLARE v_Umid VARCHAR(50);                                 \n" +
                "            			DECLARE v_RefBOMLineID INT;                                 \n" +
                "            			DECLARE v_Status VARCHAR(50);                                 \n" +
                "            			DECLARE v_RefUIDId INT;                                 \n" +
                "            			DECLARE v_PartId INT;                                  \n" +
                "            			DECLARE v_AllocatedQty DECIMAL(18,8);                                  \n" +
                "            			DECLARE v_AllocatedUnit DECIMAL(18,8);                                  \n" +
                "            			DECLARE v_AllocatedUOM INT;                                 \n" +
                "            			DECLARE v_UMIDUnits DECIMAL(18,8);                                 \n" +
                "            			DECLARE v_countKitExist INT;                                 \n" +
                "            			DECLARE v_CountSameUMID INT;                                 \n" +
                "            			DECLARE	v_SameUMID VARCHAR(50);                                 \n" +
                "            			DECLARE v_oldUMIDAllocatedUnit DECIMAL(18,8);                                 \n" +
                "            			DECLARE v_oldUMID VARCHAR(50);                                 \n" +
                "            			DECLARE v_CountSameAllocatedUnit INT;                                \n" +
                "            			DECLARE v_KitAllocationId INT;                                \n" +
                "            			DECLARE v_StringSameUMID VARCHAR(10000);                               \n" +
                "            			DECLARE v_CountUMIDForSame INT;                          \n" +
                "            			DECLARE v_StringUMIDForKit VARCHAR(10000);                      \n" +
                "            			DECLARE v_CountSameSalesOrder INT;                        \n" +
                "            			DECLARE v_PIDCode VARCHAR(100);                   \n" +
                "            			DECLARE v_RestricType VARCHAR(500);                      \n" +
                "            			DECLARE v_TransactionType VARCHAR(1000);                   \n" +
                "            			DECLARE v_RefTableName VARCHAR(255);                      \n" +
                "            			DECLARE v_ApproveFromPage VARCHAR(255);                      \n" +
                "            			DECLARE v_ApprovedBy VARCHAR(255);                      \n" +
                "            			DECLARE v_ConfirmationType INT;                      \n" +
                "            			DECLARE v_ApprovalReason TEXT;                      \n" +
                "            			DECLARE v_RefID INT;           \n" +
                "						DECLARE v_RoHSApprovalReason VARCHAR(1000);        \n" +
                "						DECLARE v_AllocationRemark VARCHAR(1000);        \n" +
                "  \n" +
                "            			DECLARE KitAllocationDetail_Cursor CURSOR FOR                                 \n" +
                "            			SELECT 	refSalesOrderDetID, assyID, uid, refBOMLineID, STATUS, refUIDId, partId, allocatedQty, allocatedUnit, allocatedUOM, umidUnits, kitAllocationId,                   \n" +
                "            					PIDCode, restricType, transactionType, refTableName, approveFromPage, approvedBy, approvalReason, confirmationType, roHSApprovalReason, allocationRemark                   \n" +
                "            			FROM 	tempKitAllocationDetail;                                 \n" +
                "  \n" +
                "            			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                                    \n" +
                "            			OPEN KitAllocationDetail_Cursor;                                   \n" +
                "  \n" +
                "            			KitAllocationDetail_Loop:LOOP                                 \n" +
                "							FETCH 	KitAllocationDetail_Cursor INTO v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_Status, v_RefUIDId, v_PartId, v_AllocatedQty, v_AllocatedUnit, v_AllocatedUOM, v_UMIDUnits, v_KitAllocationId,                   \n" +
                "            									v_PIDCode, v_RestricType, v_TransactionType, v_RefTableName, v_ApproveFromPage, v_ApprovedBy, v_ApprovalReason, v_ConfirmationType, v_RoHSApprovalReason, v_AllocationRemark;                                 \n" +
                "						IF exit_loop THEN                                                                                  \n" +
                "							LEAVE KitAllocationDetail_Loop;                                                                            \n" +
                "						END IF;            \n" +
                "  \n" +
                "  \n" +
                "				IF (CAST(IFNULL(v_KitAllocationId, '0') AS SIGNED) != 0) THEN          \n" +
                "					UPDATE 	kit_allocation                                \n" +
                "							SET 	allocatedQty = IFNULL(allocatedQty,0) + IFNULL(v_AllocatedQty,0),                               \n" +
                "								allocatedUnit = IFNULL(allocatedUnit,0) + IFNULL(v_AllocatedUnit,0)                               \n" +
                "							WHERE	id = v_KitAllocationId;       \n" +
                "				ELSE         \n" +
                "					INSERT INTO kit_allocation (refSalesOrderDetID, assyID, uid, refBOMLineID, allocatedQty, transactionDate, STATUS, createdBy, refUIDId, partId, allocatedUnit, allocatedUOM, roHSApprovalReason, roHSApprovedBy, roHSApprovedOn, allocationRemark)                                 \n" +
                "							VALUES(v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_AllocatedQty, fun_DatetimetoUTCDateTime(),v_Status, pUserId, v_RefUIDId, v_PartId, v_AllocatedUnit, v_AllocatedUOM,							                                        \n" +
                "							(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE v_RoHSApprovalReason END),        \n" +
                "							(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE pUserId END),        \n" +
                "							(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE fun_DatetimetoUTCDateTime() END),    \n" +
                "							(CASE WHEN (v_AllocationRemark IS NULL OR v_AllocationRemark = '') THEN NULL ELSE v_AllocationRemark END));                \n" +
                "							SET v_RefID = LAST_INSERT_ID();   \n" +
                "					IF(IFNULL(v_RefID, \"\") != \"\") THEN            \n" +
                "						SET v_KitIds = (          \n" +
                "								SELECT 	CASE           \n" +
                "										WHEN ((SELECT IFNULL(v_KitIds, \"\")) = \"\") THEN           \n" +
                "											v_RefID            \n" +
                "										ELSE           \n" +
                "											(SELECT CONCAT(v_KitIds, \",\", v_RefID))            \n" +
                "									END          \n" +
                "								);            \n" +
                "					END IF;            \n" +
                "					IF (v_RestricType IS NOT NULL) THEN                   \n" +
                "						INSERT INTO generic_authenticationmst (transactionType, approveFromPage, refID, approvedBy, approvalReason,confirmationType, refTableName, createdBy, updatedBy)                   \n" +
                "						VALUES(v_TransactionType, v_ApproveFromPage, v_RefID, v_ApprovedBy, v_ApprovalReason,v_ConfirmationType,v_RefTableName, pUserId, pUserId);                   \n" +
                "					END IF;          \n" +
                "  \n" +
                "				END IF;          \n" +
                "					END LOOP KitAllocationDetail_Loop;                                   \n" +
                "					CLOSE KitAllocationDetail_Cursor;   \n" +
                "					END block1;    \n" +
                "  \n" +
                "					INSERT INTO temp_Validation_Error (IsSuccess, UMID, KitName, ErrorCode, KitIds) VALUES(1, NULL, NULL, 0, v_KitIds);                              \n" +
                "					SELECT IsSuccess, UMID, KitName, ErrorCode, KitIds FROM temp_Validation_Error;   \n" +
                "            	ELSE                               \n" +
                "            		SELECT 	GROUP_CONCAT('(', `Po Number`, ', ', `Sales Order`, ', ', `Assy ID`, ', ', `PO Qty`, ')') INTO v_KitName                        \n" +
                "            		FROM 	vu_salesorder_shipped_report                        \n" +
                "            		WHERE 	SalesOrderDetailId IN (                       \n" +
                "            				SELECT 	refSalesOrderDetID                        \n" +
                "            				FROM 	kit_allocation                        \n" +
                "            				WHERE 	FIND_IN_SET(uid, v_UMIDForKitName)                       \n" +
                "            			);                       \n" +
                "            		INSERT INTO temp_Validation_Error (IsSuccess, UMID, KitName, ErrorCode, KitIds) VALUES(0, v_ConcateUMID, v_KitName, 1, v_KitIds);                                 \n" +
                "            		SELECT IsSuccess, UMID, KitName, ErrorCode, KitIds FROM temp_Validation_Error;                               \n" +
                "            	END IF;                             \n" +
                "            END;  \n" +
                /* **************************** New Script -> 06-04-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_ValiationStockAllocation`;  \n" +
                "CREATE PROCEDURE `Sproc_ValiationStockAllocation`(                                                                        \n" +
                "	IN pRefSalesOrderDetID INT,                    \n" +
                "	IN pAssyID INT,                    \n" +
                "	IN pPartId INT,    \n" +
                "	IN pBomLineId INT            \n" +
                ")  \n" +
                "BEGIN   \n" +
                "	/* create temp table for response */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_Validation_Error;                                                                           \n" +
                "	CREATE TEMPORARY TABLE temp_Validation_Error    \n" +
                "	(                                                                          \n" +
                "		IsSuccess BOOLEAN,                  \n" +
                "		KitName LONGTEXT                                                            \n" +
                "	);                                      \n" +
                "  \n" +
                "	INSERT INTO temp_Validation_Error (IsSuccess, KitName) VALUES(1, NULL);      \n" +
                "  \n" +
                "	SELECT IsSuccess, KitName FROM temp_Validation_Error;        \n" +
                "END;  \n" +
                /* **************************** New Script -> 06-04-2021    *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4456,'2.00','V1','User Story 32088: Improvement: Remove Validation of restrict to allocate shared UMID in kit - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4456:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-04-2021 *********************************** */
                "UPDATE entity   \n" +
                "set entityID = -21  \n" +
                "WHERE entityName = 'Manufacturer';  \n" +
                /* **************************** New Script -> 06-04-2021  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BU_entity`;  \n" +
                "CREATE TRIGGER `Trg_BU_entity` BEFORE UPDATE ON `entity` FOR EACH ROW BEGIN          \n" +
                "	IF ((NEW.isDeleted = 0 AND NEW.deletedAt IS NULL) AND (SELECT COUNT(1) FROM entity          \n" +
                "			    WHERE entityName=NEW.entityName          \n" +
                "			    AND isdeleted = 0 AND deletedAt IS NULL          \n" +
                "			    AND entityID !=NEW.entityID)) > 0 THEN          \n" +
                "  \n" +
                "	SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='Duplicate entry';             \n" +
                "	END IF;           \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->07-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4457,'2.00','V1',' Merge changes for story 31639 - Heena '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4457:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-04-2021 *********************************** */
                "ALTER TABLE `packing_slip_material_receive`   \n" +
                "ADD INDEX `IDX_packing_slip_material_receive_debitmemo_number` (`debitMemoNumber` ASC) COMMENT 'this index created to implement row level lock while generating debit memo number' VISIBLE;  \n" +
                /* **************************** Add Script Version ->07-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4458,'2.00','V1','User Story 32083: Implement system id Generate Code common function - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4458:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-04-2021 *********************************** */
                "drop function if exists `fun_generateDabitMemoNumber`;  \n" +
                "CREATE FUNCTION `fun_generateDabitMemoNumber`(  \n" +
                "  \n" +
                ") RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE v_DebitMemoNumber VARCHAR(50);  \n" +
                "	DECLARE v_CompanyCode VARCHAR(50);  \n" +
                "	DECLARE v_TimeZone VARCHAR(100);  \n" +
                "	DECLARE v_CurrentTimeZoneDate VARCHAR(100);  \n" +
                "	DECLARE v_PrefixString VARCHAR(50);  \n" +
                "	DECLARE v_PackinfSlipNumber VARCHAR(50);  \n" +
                "	DECLARE	v_StrIncrementNumber VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT mfgCode INTO v_CompanyCode FROM mfgcodemst WHERE deletedAt IS NULL AND isCompany = 1 LIMIT 1;  \n" +
                "	SELECT `values` INTO v_TimeZone FROM systemconfigrations WHERE `key` = 'TimeZone';  \n" +
                "	SELECT DATE_FORMAT(CONVERT_TZ(UTC_TIMESTAMP,'UTC',v_TimeZone), '%y%m%d') INTO v_CurrentTimeZoneDate;  \n" +
                "	SELECT CONCAT(v_CompanyCode, 'DM', v_CurrentTimeZoneDate) INTO v_PrefixString;  \n" +
                "	SELECT 	debitMemoNumber INTO v_PackinfSlipNumber FROM (  \n" +
                "						SELECT 		id,  \n" +
                "								debitMemoNumber,  \n" +
                "								deletedAt  \n" +
                "						FROM 		packing_slip_material_receive  \n" +
                "						ORDER BY 	id  \n" +
                "						DESC  \n" +
                "					) t  \n" +
                "	WHERE 	t.debitMemoNumber LIKE CONCAT(v_PrefixString, '%')  \n" +
                "	AND 	t.deletedAt IS NULL  \n" +
                "	LIMIT 	1 for update;  \n" +
                "  \n" +
                "	IF (v_PackinfSlipNumber IS NULL) THEN  \n" +
                "		SELECT  CONCAT(v_PrefixString, '01') INTO v_DebitMemoNumber;  \n" +
                "	ELSE  \n" +
                "		SELECT RIGHT(v_PackinfSlipNumber, 2) INTO v_StrIncrementNumber;  \n" +
                "		SELECT CONCAT(v_PrefixString, LPAD(CAST(v_StrIncrementNumber AS UNSIGNED) + 1, 2, '0' )) INTO v_DebitMemoNumber;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	RETURN v_DebitMemoNumber;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->07-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4459,'2.00','V1','User Story 32083: Implement system id Generate Code common function - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4459:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-04-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_genericcategory`;  \n" +
                "CREATE TRIGGER `Trg_BI_genericcategory` BEFORE INSERT ON `genericcategory` FOR EACH ROW BEGIN       \n" +
                "    IF (SELECT COUNT(1) FROM genericcategory                           \n" +
                "       WHERE `categoryType` IN ('Printers','Label Templates','Document Type')       \n" +
                "        AND `categoryType` = NEW.categoryType                      \n" +
                "        AND `gencCategoryName`= NEW.gencCategoryName               \n" +
                "        AND isdeleted = 0 AND deletedAt IS NULL) > 0 THEN               \n" +
                "        SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';         \n" +
                "    ELSEIF (SELECT COUNT(1) FROM genericcategory                \n" +
                "            WHERE `categoryType` IN ('Equipment & Workstation Groups', 'Equipment & Workstation Types',         \n" +
                "                    'Equipment & Workstation Ownerships', 'Standard Types', 'Titles',               \n" +
                "                    'Operation Types', 'Locations', 'Responsibilities', 'Shipping Methods',       \n" +
                "                    'Payment Terms', 'Part Status', 'Barcode Separators', 'Payment Type Category')      \n" +
                "            AND (`gencCategoryName`= NEW.gencCategoryName               \n" +
                "            OR `gencCategoryCode` = NEW.gencCategoryCode)               \n" +
                "            AND `categoryType` = NEW.categoryType                      \n" +
                "            AND isdeleted = 0 AND deletedAt IS NULL) > 0 THEN          \n" +
                "        SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';        \n" +
                "    END IF;                \n" +
                "END;  \n" +
                "DROP TRIGGER IF EXISTS `Trg_BU_genericcategory`;  \n" +
                "CREATE TRIGGER `Trg_BU_genericcategory` BEFORE UPDATE ON `genericcategory` FOR EACH ROW BEGIN             \n" +
                "        IF ((NEW.isDeleted = 0 AND NEW.deletedAt IS NULL) AND (SELECT COUNT(1) FROM genericcategory            \n" +
                "                    WHERE `categoryType` IN ('Printers','Label Templates','Document Type')                       \n" +
                "                    AND `gencCategoryName` = NEW.gencCategoryName                                \n" +
                "                    AND `categoryType` = NEW.categoryType                                       \n" +
                "                    AND isdeleted = 0 AND deletedAt IS NULL                              \n" +
                "                    AND gencCategoryID != NEW.gencCategoryID)) > 0 THEN                     \n" +
                "                SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';               \n" +
                "        ELSEIF ((NEW.isDeleted = 0 AND NEW.deletedAt IS NULL) AND (SELECT COUNT(1) FROM genericcategory                \n" +
                "                WHERE `categoryType` IN ('Equipment & Workstation Groups', 'Equipment & Workstation Types',            \n" +
                "                        'Equipment & Workstation Ownerships', 'Standard Types', 'Titles',                           \n" +
                "                        'Operation Types', 'Locations', 'Responsibilities', 'Shipping Methods',                     \n" +
                "                        'Payment Terms', 'Part Status', 'Barcode Separators', 'Payment Type Category')                                       \n" +
                "                AND (`gencCategoryName`= NEW.gencCategoryName                                                        \n" +
                "                OR `gencCategoryCode` = NEW.gencCategoryCode)                                                       \n" +
                "                AND `categoryType` = NEW.categoryType                                                               \n" +
                "                AND isdeleted = 0 AND deletedAt IS NULL                                                             \n" +
                "                AND gencCategoryID != NEW.gencCategoryID)) > 0 THEN                                                  \n" +
                "            SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';                                             \n" +
                "        END IF;                                                                                                      \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->07-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4460,'2.00','V1',' User Story 31233: Create New Page Payment type - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4460:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-04-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAccountTypeList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAccountTypeList`(                \n" +
                "		IN ppageIndex INT(11),                                        \n" +
                "		IN precordPerPage INT(11),                                        \n" +
                "		IN pOrderBy VARCHAR(255),                                        \n" +
                "		IN pWhereClause VARCHAR(16383)                \n" +
                "	)  \n" +
                "BEGIN                \n" +
                "		DECLARE pOffset INT(11);                                         \n" +
                "		DECLARE rowNumWhere VARCHAR(255);            \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);                           \n" +
                "		DECLARE v_TimeZone VARCHAR(50);                        \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;                  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;               \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT ac.`class_id`, ac.`systemid`, ac.`class_code`, ac.`class_name`, ac.`system_defined`,      \n" +
                "				ac.`parent_class_id`, ac.`description`, ac.`disp_order`,  ac.`isSubType`,    \n" +
                "                (CASE WHEN (ac.`isSubType` = 0) THEN 'No'                         \n" +
                "						WHEN (ac.`isSubType` = 1) THEN 'Yes' ELSE '' END) AS `isSubTypeConvertedValue`,        \n" +
                "				(CASE WHEN (ac.system_defined = 0) THEN 'No'                                           \n" +
                "						WHEN (ac.system_defined = 1) THEN 'Yes' ELSE '' END) AS `system_generated`,              \n" +
                "				concat('(',acm.`class_code`,') ',acm.`class_name`) AS parent_account_type,    \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(ac.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                     \n" +
                "				fun_getUserNameByID(ac.createdBy) createdBy,         							                \n" +
                "				fun_getUserNameByID(ac.updatedBy) updatedBy,                    \n" +
                "				fun_getRoleByID(ac.createByRoleId) createByRoleId,                          \n" +
                "				fun_getRoleByID(ac.updateByRoleId) updateByRoleId,                          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(ac.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt                \n" +
                "				FROM `acct_classmst` AS ac    \n" +
                "                LEFT JOIN `acct_classmst` AS acm                     \n" +
                "						ON ac.`parent_class_id` = acm.`class_id`                      \n" +
                "						AND acm.`isDeleted`=0       \n" +
                "				WHERE ac.isDeleted = 0  \");                      \n" +
                "  \n" +
                "			IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                        \n" +
                "				SET pWhereClause = '1=1' ;                                        \n" +
                "			END IF;	                                        \n" +
                "  \n" +
                "			IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                        \n" +
                "				SET pOrderBy = CONCAT(\"ORDER BY disp_order ASC, `systemid`\") ;                                        \n" +
                "			ELSE                                        \n" +
                "				SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                        \n" +
                "			END IF;	                      \n" +
                "  \n" +
                "			IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                         \n" +
                "				SET pOffset = (ppageIndex -1) * precordPerPage; 		                                        \n" +
                "				SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                        \n" +
                "			ELSE	                                        \n" +
                "				SET rowNumWhere = '';                                        \n" +
                "			END IF;	                                        \n" +
                "  \n" +
                "				SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);                                  \n" +
                "				PREPARE query2 FROM @SQLStatement2;                                \n" +
                "				EXECUTE query2;                                \n" +
                "				DEALLOCATE PREPARE query2;                              \n" +
                "  \n" +
                "				SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c                                \n" +
                "					where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                \n" +
                "				PREPARE query1 FROM @SQLStatement1;                                 \n" +
                "				EXECUTE query1;                                \n" +
                "				DEALLOCATE PREPARE query1;                       \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version ->07-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4461,'2.00','V1',' User Story 30983: Create Account Classification Master ( Account Type) - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4461:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-04-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_ValiationStockAllocation`;  \n" +
                /* **************************** New Script -> 07-04-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4462,'2.00','V1','User Story 32088: Improvement: Remove Validation of restrict to allocate shared UMID in kit - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4462:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_SaveCustomerInvoiceDetail;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustomerInvoiceDetail`(                                  \n" +
                "	IN pTransType VARCHAR(5),                          \n" +
                "	IN pInvoiceType VARCHAR(1),                              \n" +
                "	IN pInvoiceID INT,              	                              \n" +
                "    IN pInvData JSON,                              \n" +
                "    IN pPackingSlipID INT,                              \n" +
                "	IN puserID INT,                                        \n" +
                "	IN puserRoleID INT ,                                    \n" +
                "	IN pCustomerInvoiceSystemIDTypeConst VARCHAR(50),  \n" +
                "    IN pSystemId VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN                                               \n" +
                "	DECLARE v_maxCurrSystemIDForInv VARCHAR(20) ;            \n" +
                "	DECLARE v_prefix VARCHAR(20);                                    \n" +
                "	DECLARE vTermsDays INT ;                              \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_customerInvoice;                                                                \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customerInvoice AS                                                                          \n" +
                "	SELECT 	*                                                                           \n" +
                "	FROM 	JSON_TABLE(                                   \n" +
                "			pInvData,                                                                          \n" +
                "			\"$[*]\" COLUMNS(    			                             \n" +
                "				`transType` VARCHAR(5) PATH \"$.transType\",                              \n" +
                "				`invoiceID` INT PATH \"$.invoiceID\",                              \n" +
                "				`packingSlipID` INT PATH \"$.packingSlipID\",                               \n" +
                "                `packingSlipType` INT PATH \"$.packingSlipType\",                              \n" +
                "				`customerID` INT PATH \"$.customerID\" ,                                                                          \n" +
                "				`status` INT PATH \"$.status\",                              \n" +
                "				`subStatus` INT PATH \"$.subStatus\",                              \n" +
                "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",                                                                          \n" +
                "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",                                                                          \n" +
                "				`poDate` DATE PATH \"$.poDate\",                               \n" +
                "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",                                                                          \n" +
                "				`soDate` DATE PATH \"$.soDate\",                                  \n" +
                "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,                                \n" +
                "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,                                \n" +
                "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,                                \n" +
                "				`invoiceNumber` VARCHAR(50) PATH \"$.invoiceNumber\" ,                                \n" +
                "				`invoiceDate` DATE PATH \"$.invoiceDate\" ,                                \n" +
                "				`shippingMethodID` INT PATH \"$.shippingMethodID\",                              \n" +
                "				`headerComment` TEXT PATH \"$.headerComment\" ,                              \n" +
                "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,                              \n" +
                "				`billingAddress` TEXT PATH \"$.billingAddress\" ,                              \n" +
                "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,                              \n" +
                "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,                              \n" +
                "                `billToId` INT PATH \"$.billToId\" ,                              \n" +
                "				`shipToId` INT PATH \"$.shipToId\" ,                              \n" +
                "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,                              \n" +
                "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,                              \n" +
                "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,                              \n" +
                "				`termsId` INT PATH \"$.termsId\" ,                              \n" +
                "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,                          \n" +
                "                `creditMemoNumber` VARCHAR(50) PATH \"$.creditMemoNumber\" ,                                \n" +
                "				`creditMemoDate` DATE PATH \"$.creditMemoDate\" ,                           \n" +
                "                `refDebitMemoNumber` VARCHAR(50) PATH \"$.refDebitMemoNumber\" ,                                \n" +
                "				`refDebitMemoDate` DATE PATH \"$.refDebitMemoDate\",                           \n" +
                "                `rmaNumber`  VARCHAR(50) PATH \"$.rmaNumber\" ,          \n" +
                "                `contactPersonId` INT PATH \"$.contactPersonId\"          \n" +
                "			)                                \n" +
                "		) AS CustInv_JT;                               \n" +
                "  \n" +
                "	  IF(pInvoiceID IS NULL)THEN                                        \n" +
                "			SELECT  termsDays INTO 	vTermsDays                              \n" +
                "			FROM genericCategory gc                               \n" +
                "			WHERE gc.gencCategoryID IN (SELECT temp.termsId FROM temp_customerInvoice temp)                              \n" +
                "			AND categoryType = 'Payment Terms';                              \n" +
                "  \n" +
                "			/* get max identity value of 'CustomerInvoiceSystemID' for systemID */                                    \n" +
                "			/* SELECT `maxValue`,prefix INTO v_maxCurrSystemIDForInv,v_prefix                                    \n" +
                "			FROM `identity`                                    \n" +
                "			WHERE `type` = pCustomerInvoiceSystemIDTypeConst ; */                                   \n" +
                "  \n" +
                "  \n" +
                "			INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,                                    \n" +
                "				poNumber,poDate,soNumber,soDate,packingSlipNumber,                                    \n" +
                "				packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                                    \n" +
                "				packingSlipComment,headerComment,sorevision,                                    \n" +
                "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,                                    \n" +
                "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,                                  \n" +
                "				billingAddress,shippingAddress,intermediateAddress ,subStatus, paymentStatus ,                               \n" +
                "				totalAmount,termsDays, freeOnBoardName, creditMemoNumber,creditMemoDate ,                  \n" +
                "                refDebitMemoNumber,refDebitMemoDate, rmaNumber , billToId,shipToId ,intermediateShipmentId,contactPersonId )                                         \n" +
                "			SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,                                    \n" +
                "					poNumber,poDate,soNumber,soDate,packingSlipNumber,                                    \n" +
                "					packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                               \n" +
                "					packingSlipComment,headerComment,sorevision,                                    \n" +
                "					freeOnBoardId,puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,                                   \n" +
                "					puserRoleID,'W' , pSystemId, termsID ,salesCommissionTo,                                  \n" +
                "					billingAddress, shippingAddress, intermediateAddress,subStatus , 'PE' ,                              \n" +
                "					ifnull(totalAmount,0),vTermsDays ,   fun_getFOBById(freeOnBoardId) ,creditMemoNumber,creditMemoDate ,                  \n" +
                "                    refDebitMemoNumber,refDebitMemoDate , rmaNumber  , billToId,shipToId ,intermediateShipmentId ,contactPersonId                \n" +
                "			FROM temp_customerInvoice ;			                              \n" +
                "  \n" +
                "		 SET pInvoiceID=LAST_INSERT_ID();                                      \n" +
                "  \n" +
                "		 UPDATE customer_packingslip                                     \n" +
                "		 SET refCustInvoiceID=LAST_INSERT_ID(),packingSlipStatus='A'                                     \n" +
                "		 WHERE id= pPackingSlipID;                                        \n" +
                "  \n" +
                "         IF pPackingSlipID IS NOT NULL THEN                              \n" +
                "			 INSERT INTO customer_packingslip_det(refCustPackingSlipID,refSalesorderDetid,partId,custPOLineID,                                    \n" +
                "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  extendedPrice,                                  \n" +
                "					shippingNotes,whID,binID,createdBy,updatedBy,createdAt, updatedAt,                                    \n" +
                "					createByRoleId,updateByRoleId,shippingId,reflineID,otherCharges,                                    \n" +
                "					assyDescription,lineID, internalComment, quoteNumber,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,refRFQGroupID,refRFQQtyTurnTimeID)                                        \n" +
                "			  SELECT LAST_INSERT_ID(),refSalesorderDetid,partId,custPOLineID,                                    \n" +
                "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  (shipQty * unitPrice),                                 \n" +
                "					shippingNotes,whID,binID,puserID,puserID,  fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),                                  \n" +
                "					puserRoleID,puserRoleID,shippingId,reflineID,otherCharges,                                    \n" +
                "					assyDescription, lineID, internalComment ,quoteNumber,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,refRFQGroupID,refRFQQtyTurnTimeID                                   \n" +
                "			FROM customer_packingslip_det                                     \n" +
                "			WHERE refCustPackingSlipID= pPackingSlipID                                     \n" +
                "			AND isDeleted = 0;         \n" +
                "			INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,	unitPrice, refQuoteAttributeId,    \n" +
                "						commissionPercentage, commissionValue, org_commissionPercentage,    \n" +
                "						org_commissionValue, category, partId, refComponentSalesPriceBreakID,    \n" +
                "						org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)    \n" +
                "			select cpd.id refCustPackingSlipDetID,	sca.unitPrice, sca.refQuoteAttributeId,    \n" +
                "						sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,    \n" +
                "						sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,    \n" +
                "						sca.org_unitPrice, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID     \n" +
                "				From salesorderdet_commission_attribute sca    \n" +
                "				join customer_packingslip_det cpd on cpd.refSalesorderDetid=sca.refSalesorderDetid and cpd.isDeleted = 0      \n" +
                "				and cpd.refCustPackingSlipID =  pInvoiceID;      \n" +
                "		END IF;                              \n" +
                "		/*update maxvalue + 1 as 'CustomerInvoiceSystemID' for invoice systemID */                                     \n" +
                "		UPDATE `identity`                                    \n" +
                "		SET `maxValue` =  CAST(substring_index(pSystemId,IF(pTransType='I','CINV','CCM'),-1) as UNSIGNED) + 1                                    \n" +
                "		WHERE `type` = pCustomerInvoiceSystemIDTypeConst ;    \n" +
                "  \n" +
                "	  ELSE                                    \n" +
                "  \n" +
                "		IF pInvoiceType = 'I' AND pTransType = 'I' THEN                              \n" +
                "			UPDATE customer_packingslip cp                              \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                              \n" +
                "            SET cp.invoiceDate= tci.invoiceDate,                              \n" +
                "				cp.`status`= tci.status,  			                                    \n" +
                "				cp.subStatus = tci.subStatus,                              \n" +
                "                cp.headerComment= tci.headerComment,                              \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                              \n" +
                "				cp.totalAmount = ifnull(tci.totalAmount,0) ,                    \n" +
                "                cp.updatedAt = fun_DatetimetoUTCDateTime(),                    \n" +
                "                cp.updatedBy = puserID,                    \n" +
                "                cp.updateByRoleId = puserRoleID  ,          \n" +
                "                cp.billingAddress= tci.billingAddress,                              \n" +
                "				cp.shippingAddress= tci.shippingAddress,                              \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,          \n" +
                "                cp.contactPersonId = tci.contactPersonId,          \n" +
                "                cp.billToId = tci.billToId,                \n" +
                "                cp.shipToId  = tci.shipToId,                \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId           \n" +
                "			WHERE id=pInvoiceID;                                 \n" +
                "        ELSE                                \n" +
                "        # in case of tariff invoice & credit memo update all other field                              \n" +
                "			UPDATE customer_packingslip  cp                                \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                              \n" +
                "			SET	cp.status= tci.status,                              \n" +
                "				cp.subStatus= tci.subStatus,                              \n" +
                "				cp.poNumber= tci.poNumber,                              \n" +
                "				cp.poDate= tci.poDate,                              \n" +
                "				cp.soNumber= tci.soNumber,                              \n" +
                "				cp.soDate= tci.soDate,                              \n" +
                "				cp.packingSlipNumber= tci.packingSlipNumber,                              \n" +
                "				cp.packingSlipDate= tci.packingSlipDate,                              \n" +
                "				cp.invoiceDate= tci.invoiceDate,                              \n" +
                "				cp.shippingMethodID= tci.shippingMethodID,                              \n" +
                "				cp.headerComment= tci.headerComment,                              \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                              \n" +
                "				cp.billingAddress= tci.billingAddress,                              \n" +
                "				cp.shippingAddress= tci.shippingAddress,                              \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,                              \n" +
                "				cp.totalAmount= ifnull(tci.totalAmount,0),                              \n" +
                "				cp.freeOnBoardId= tci.freeOnBoardId,                              \n" +
                "				cp.termsId= tci.termsId,                              \n" +
                "				cp.salesCommissionTo= tci.salesCommissionTo ,                          \n" +
                "                cp.refDebitMemoNumber = tci.refDebitMemoNumber,                          \n" +
                "                cp.refDebitMemoDate = tci.refDebitMemoDate,                    \n" +
                "                cp.updatedAt = fun_DatetimetoUTCDateTime(),                    \n" +
                "                cp.updatedBy = puserID,                    \n" +
                "                cp.updateByRoleId = puserRoleID,                  \n" +
                "                cp.rmaNumber= tci.rmaNumber,                \n" +
                "                cp.billToId = tci.billToId,                \n" +
                "                cp.shipToId  = tci.shipToId,                \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId ,              \n" +
                "                cp.invoiceNumber = tci.invoiceNumber ,          \n" +
                "                cp.contactPersonId = tci.contactPersonId          \n" +
                "			 WHERE cp.id = pInvoiceID;                                 \n" +
                "  \n" +
                "            END IF;                              \n" +
                "  \n" +
                "  \n" +
                "	  END IF;                                       \n" +
                "  \n" +
                "	  SELECT pInvoiceID invoiceID;                                        \n" +
                "       -- detail Id                                \n" +
                "      SELECT id  detId ,refSalesorderDetId , reflineID                                \n" +
                "      FROM customer_packingslip_det                                 \n" +
                "      WHERE  refCustPackingSlipID = pInvoiceID                                 \n" +
                "      AND isDeleted = 0;                                \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4463,'2.00','V1','Sproc_SaveCustomerInvoiceDetail- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 4463:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-04-2021 *********************************** */
                "drop procedure if exists Sproc_GetCustomerInvoiceFormat;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceFormat`(              \n" +
                "IN pInvDate DATE  ,           \n" +
                "IN ppackingSlipNumberPrefix VARCHAR(10),            \n" +
                "IN pInvoiceNumberPrefix VARCHAR(10)          \n" +
                ")  \n" +
                "BEGIN                \n" +
                " DECLARE pformat VARCHAR(50);             \n" +
                " -- DECLARE vPackingMaxNum INT;               \n" +
                " -- DECLARE vInvMaxNum INT;       \n" +
                " DECLARE vMaxNum VARCHAR(255);       \n" +
                " SELECT `values` INTO pformat FROM systemconfigrations WHERE `key`='CustomerPackingSlipNumber' AND isdeleted=0;                \n" +
                "  \n" +
                " SELECT ifnull(MAX(REPLACE(packingSlipNumber,ppackingSlipNumberPrefix,'')),0) INTO vMaxNum           \n" +
                " FROM customer_packingslip           \n" +
                " WHERE packingslipdate=pInvDate           \n" +
                " AND isDeleted=0 For Update;          \n" +
                "  /* Old logic as in case of MISC Inv we allowed  manual  packing slip number  \n" +
                " SELECT CAST(MAX(REPLACE(invoiceNumber,pInvoiceNumberPrefix,''))AS UNSIGNED) INTO vInvMaxNum           \n" +
                " FROM customer_packingslip           \n" +
                " WHERE invoiceDate=pInvDate           \n" +
                " AND isdeleted=0 AND transType='I'For Update;          \n" +
                "  \n" +
                " IF ifnull(vPackingMaxNum,0) > ifnull(vInvMaxNum,0) THEN      \n" +
                "	SET vMaxNum = vPackingMaxNum;      \n" +
                " ELSE       \n" +
                "	SET vMaxNum = vInvMaxNum;      \n" +
                "END IF;       \n" +
                "*/          \n" +
                " SELECT pformat AS pdateformat, CAST(SUBSTR(vMaxNum,LENGTH(pformat)+1) AS UNSIGNED) maxPackingID For Update;            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4464,'2.00','V1',' Sample entry - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 4464:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-04-2021 *********************************** */
                "drop procedure if exists Sproc_GetCustomerPackingSlipFormat;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingSlipFormat`(            \n" +
                "IN ppackingSlipDate DATE  ,         \n" +
                "IN ppackingSlipNumberPrefix VARCHAR(10)          \n" +
                ")  \n" +
                "BEGIN              \n" +
                " DECLARE pformat VARCHAR(50);           \n" +
                " DECLARE pmaxnumber VARCHAR(255);             \n" +
                " SELECT `values` INTO pformat FROM systemconfigrations WHERE `key`='CustomerPackingSlipNumber' AND isdeleted=0;              \n" +
                "  \n" +
                " SELECT IFNULL(MAX(REPLACE(packingSlipNumber,ppackingSlipNumberPrefix,'')),0) INTO pmaxnumber         \n" +
                " FROM customer_packingslip         \n" +
                " WHERE packingslipdate=ppackingSlipDate         \n" +
                " AND isdeleted=0 For Update;          \n" +
                "  \n" +
                " SET pmaxnumber=SUBSTR(pmaxnumber,LENGTH(pformat)+1);          \n" +
                "  \n" +
                " SELECT pformat AS pdateformat, CAST(pmaxnumber AS UNSIGNED) maxPackingID For Update;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4465,'2.00','V1','Sproc_GetCustomerPackingSlipFormat - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 4465:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-04-21  *********************************** */
                "DROP TRIGGER IF EXISTS Trg_BI_customer_packingslip;  \n" +
                "CREATE TRIGGER `Trg_BI_customer_packingslip` BEFORE INSERT ON `customer_packingslip` FOR EACH ROW BEGIN  \n" +
                "	IF NEW.transType = 'C'  AND  (select count(1)  from customer_packingslip    \n" +
                "				where transType ='C' and creditMemoNumber = NEW.creditMemoNumber  \n" +
                "                and isDeleted = 0 ) > 0 THEN		  \n" +
                "                SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='Duplicate entry';               \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-04-21 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4466,'2.00','V1','Trg_BI_customer_packingslip - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4466:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_InvoicePaymentVoidAndReIssue` ;  \n" +
                "CREATE PROCEDURE `Sproc_InvoicePaymentVoidAndReIssue`(               \n" +
                "	IN pSystemId VARCHAR(20),            \n" +
                "	IN pRefVoidPaymentId INT,                      \n" +
                "	IN pAccountReference VARCHAR(50),                      \n" +
                "	IN pPaymentType INT,                      \n" +
                "	IN pPaymentNumber VARCHAR(50),                      \n" +
                "	IN pBankAccountMasID INT,                      \n" +
                "	IN pBankAccountNo VARCHAR(50),                      \n" +
                "	IN pBankName VARCHAR(255),                      \n" +
                "	IN pPaymentDate DATE,                      \n" +
                "	IN pRemark VARCHAR(255),                      \n" +
                "	IN pPayToName VARCHAR(255),                      \n" +
                "	IN pPayToAddress VARCHAR(255),                      \n" +
                "	IN pVoidPaymentReason VARCHAR(255),          \n" +
                "	IN pRefPaymentModeOfInvPayment VARCHAR(2),                   \n" +
                "	IN pMfgcodeID INT,          \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,         \n" +
                "	IN pisCustomerZeroPayment TINYINT,                    \n" +
                "	IN pUserID INT,                      \n" +
                "	IN pRoleID INT                      \n" +
                ")  \n" +
                "BEGIN                        \n" +
                "	DECLARE vCount INT;                        \n" +
                "	DECLARE vCountExistsCheckNo INT;                        \n" +
                "	DECLARE vNewPaymentID INT;                        \n" +
                "	DECLARE vOldPaymentOrCheckNo VARCHAR(50);                        \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                          \n" +
                "BEGIN                          \n" +
                "	ROLLBACK;                          \n" +
                "	RESIGNAL;                          \n" +
                "END;                          \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                          \n" +
                "  BEGIN                          \n" +
                "	ROLLBACK;                          \n" +
                "	RESIGNAL;                          \n" +
                "END;                          \n" +
                "  \n" +
                "	/* pRefPaymentModeOfInvPayment >> P-Payable   R-Receivable */          \n" +
                "	SELECT 	COUNT(1)   INTO 	vCount                        \n" +
                "	FROM 	packingslip_invoice_payment                        \n" +
                "	WHERE 	id = pRefVoidPaymentId                        \n" +
                "	AND isPaymentVoided = 0                  \n" +
                "	AND refPaymentMode = pRefPaymentModeOfInvPayment ;                        \n" +
                "  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;	          \n" +
                "  \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'P') THEN          \n" +
                "		/*check duplicate check number validation*/              \n" +
                "		SELECT 	COUNT(1)  INTO 	vCountExistsCheckNo                      \n" +
                "		FROM 	packingslip_invoice_payment                      \n" +
                "		WHERE 	isdeleted = 0                      \n" +
                "		AND paymentNumber = pPaymentNumber                      \n" +
                "		AND bankAccountMasID = pBankAccountMasID          \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;                      \n" +
                "	 ELSEIF (pRefPaymentModeOfInvPayment = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN          \n" +
                "		/* check duplicate check number if confirmation not taken */            \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo                    \n" +
                "		FROM packingslip_invoice_payment                    \n" +
                "		WHERE refPaymentMode = pRefPaymentModeOfInvPayment           \n" +
                "		AND paymentNumber = pPaymentNumber                    \n" +
                "		AND mfgcodeID = pMfgcodeID           \n" +
                "		AND isdeleted = 0    ;          \n" +
                "	 END IF;             \n" +
                "  \n" +
                "  \n" +
                "	IF vCount = 1 AND vCountExistsCheckNo = 0 THEN                        \n" +
                "  \n" +
                "		UPDATE 	packingslip_invoice_payment                        \n" +
                "		SET 	voidPaymentReason = pVoidPaymentReason,                        \n" +
                "			isPaymentVoided = 1,                        \n" +
                "			updatedBy = pUserID,                        \n" +
                "			updateByRoleId = pRoleID,                      \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()                      \n" +
                "		WHERE 	id = pRefVoidPaymentId                        \n" +
                "		AND isDeleted = 0                  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;         \n" +
                "  \n" +
                "  \n" +
                "		/*insert same records for new reissue payment transaction*/              \n" +
                "		INSERT INTO packingslip_invoice_payment                        \n" +
                "				(systemId, mfgcodeID, paymentNumber, paymentDate, paymentAmount, paymentType, accountReference, bankAccountMasID,                        \n" +
                "				bankAccountNo, bankName, payToName, payToAddress, remark, createdBy, createByRoleId,                        \n" +
                "				updatedBy, updateByRoleId, refVoidedPaymentNumber, refVoidedPaymentId, refPaymentMode,                \n" +
                "				billToName, billToAddress, isZeroPayment,         \n" +
                "				lockStatus)                        \n" +
                "		SELECT 	pSystemId, mfgcodeID, pPaymentNumber, pPaymentDate, paymentAmount, pPaymentType, pAccountReference, pBankAccountMasID,                        \n" +
                "				pBankAccountNo, pBankName, pPayToName, pPayToAddress, pRemark, pUserID, pRoleID,                        \n" +
                "				pUserID, pRoleID, paymentNumber, id, refPaymentMode,                \n" +
                "				billToName, billToAddress, isZeroPayment,         \n" +
                "				(CASE WHEN pRefPaymentModeOfInvPayment = 'R' THEN         \n" +
                "							(CASE WHEN lockStatus = 'LC' THEN 'RL' ELSE lockStatus END)        \n" +
                "					ELSE NULL END)               \n" +
                "		FROM 	packingslip_invoice_payment                        \n" +
                "		WHERE 	id = pRefVoidPaymentId                        \n" +
                "		AND isDeleted = 0                  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;                        \n" +
                "  \n" +
                "		SET vNewPaymentID = LAST_INSERT_ID();                        \n" +
                "  \n" +
                "		/*update payment void flag in detail table*/              \n" +
                "		UPDATE 	packingslip_invoice_payment_det              \n" +
                "		SET 	isPaymentVoided = 1,              \n" +
                "			updatedBy = pUserID,              \n" +
                "			updateByRoleId = pRoleID,              \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()              \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId              \n" +
                "		AND isDeleted = 0;              \n" +
                "  \n" +
                "		/*insert same records for new reissue payment detail transaction*/              \n" +
                "		INSERT INTO packingslip_invoice_payment_det                        \n" +
                "				(refPayementid, refPackingslipInvoiceID, createdBy, createByRoleId, updatedBy, updateByRoleId, paymentAmount,           \n" +
                "				isPaymentVoided, refCustPackingslipInvoiceID)                        \n" +
                "		SELECT 	vNewPaymentID, refPackingslipInvoiceID, pUserID, pRoleID,                         \n" +
                "			pUserID, pRoleID, paymentAmount,           \n" +
                "			FALSE, refCustPackingslipInvoiceID	            \n" +
                "		FROM 	packingslip_invoice_payment_det                        \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId                        \n" +
                "		AND isDeleted = 0;              \n" +
                "  \n" +
                "		SELECT vNewPaymentID refPayementid;                        \n" +
                "	ELSE                        \n" +
                "		IF vCountExistsCheckNo != 0 THEN                      \n" +
                "			SELECT 'DUPLICATE_CHECKNO' AS message;                      \n" +
                "		ELSEIF vCount = 0 THEN          \n" +
                "			IF (pRefPaymentModeOfInvPayment = 'R' AND (SELECT COUNT(1) FROM packingslip_invoice_payment WHERE id = pRefVoidPaymentId            \n" +
                "									AND isPaymentVoided = 1  AND refPaymentMode = pRefPaymentModeOfInvPayment) > 0) THEN          \n" +
                "				SELECT 'ALREADY_VOIDED' AS message;          \n" +
                "			ELSE          \n" +
                "				SELECT 'NOT_FOUND' AS message;            \n" +
                "			END IF;	             \n" +
                "		ELSE                      \n" +
                "			SELECT 'NOT_FOUND' AS message;                      \n" +
                "		END IF;                      \n" +
                "	END IF;                        \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->06-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4467,'2.00','V1',' Sproc_InvoicePaymentVoidAndReIssue - Ketan '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4467:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-04-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkAccountTypeRef`;  \n" +
                "CREATE PROCEDURE `Sproc_checkAccountTypeRef`(IN pParentClassId INT)  \n" +
                "BEGIN    \n" +
                "	WITH RECURSIVE cte AS                    \n" +
                "	(                    \n" +
                "	  SELECT class_id, class_name, parent_class_id, 0 AS level    \n" +
                "			FROM acct_classmst    \n" +
                "			WHERE class_id = pParentClassId    \n" +
                "		  UNION ALL    \n" +
                "		  SELECT cm.class_id, cm.class_name, cm.parent_class_id, (level+1) AS level    \n" +
                "			FROM cte JOIN acct_classmst AS cm    \n" +
                "			  ON cte.parent_class_id = cm.class_id   \n" +
                "	)                     \n" +
                "	SELECT parent_class_id AS id, class_name FROM cte;  \n" +
                "END;  \n" +
                "DROP procedure IF EXISTS `Sproc_checkChartOfAccountRef`;  \n" +
                "CREATE DEFINER=`root`@`localhost` PROCEDURE `Sproc_checkChartOfAccountRef`(IN pParentAcctId INT)  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	 WITH RECURSIVE cte AS                    \n" +
                "	(                    \n" +
                "	  SELECT acct_id, acct_name, parent_acct_id, 0 AS level    \n" +
                "			FROM acct_acctmst    \n" +
                "			WHERE acct_id = pParentAcctId    \n" +
                "		  UNION ALL    \n" +
                "		  SELECT aam.acct_id, aam.acct_name, aam.parent_acct_id, (level+1) AS level    \n" +
                "			FROM cte JOIN acct_acctmst AS aam    \n" +
                "			  ON cte.parent_acct_id = aam.acct_id   \n" +
                "	)                     \n" +
                "	SELECT parent_acct_id AS id, acct_name FROM cte;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->08-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4468,'2.00','V1',' User Story 30983: Create Account Classification Master ( Account Type) - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4468:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-04-2021 *********************************** */
                "select pageID into @pageID from page_detail  \n" +
                "where pageRoute = 'app.paymentmethods';  \n" +
                "  \n" +
                "update page_detail  \n" +
                "  set pageName = 'Payment Methods',  \n" +
                "	pageURL = '/paymentmethods/:tabName/:categoryTypeID',  \n" +
                "    menuName = 'Payment Methods',  \n" +
                "    displayMenuName = 'Payment Methods'  \n" +
                "where pageRoute = 'app.paymentmethods';  \n" +
                "  \n" +
                "update page_detail  \n" +
                "  set pageRoute = 'app.paymentmethods.payable.managegenericcategorypayable',  \n" +
                "		menuName = 'Add Payable Payment Method',  \n" +
                "        iconClass = 'icons-add-payable-payment-methods',  \n" +
                "		parentPageID = @pageID  \n" +
                "where pageRoute = 'app.paymentmethods.managegenericcategory';  \n" +
                "update page_detail  \n" +
                "  set pageRoute = 'app.paymentmethods.receivable.managegenericcategoryreceivable',  \n" +
                "		parentPageID = @pageID  \n" +
                "where pageRoute = 'app.receivablepaymentmethods.managegenericcategory';  \n" +
                "  \n" +
                "INSERT INTO `page_detail` (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`, `tabLevel`, `iconClass`, `isActive`, `createdAt`, `updatedAt`, `createdBy`, `updatedBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `isHideFromMenuList`)  \n" +
                "VALUES ('Payable Payment Methods', '0', '0', 'app.paymentmethods.payable', '/:tabName', 'Payable Payment Methods', @pageID, '0', '3', 'icons-payable-payment-methods', '1', utc_timestamp(), utc_timestamp(), '1', '1', '0', '0', 'Payable Payment Methods', '1', '0', '1');  \n" +
                "update page_detail  \n" +
                "  set pageName = 'Receivable Payment Methods',  \n" +
                "		pageRoute = 'app.paymentmethods.receivable',  \n" +
                "		menuRoute = null,  \n" +
                "        pageURL = '/:tabName',  \n" +
                "        menuName = 'Receivable Payment Methods',  \n" +
                "        parentPageID = @pageID,  \n" +
                "        tabLevel = 3,  \n" +
                "        iconClass = 'icons-add-receivable-payment-methods',  \n" +
                "        isDisplay = false,  \n" +
                "        displayMenuName = 'Receivable Payment Methods',  \n" +
                "        isHideFromMenuList = true  \n" +
                "where pageRoute = 'app.receivablepaymentmethods' ; \n" +
                "call Sproc_giveRightToChildPage('Payable Payment Methods');  \n" +
                "call Sproc_giveRightToChildPage('Receivable Payment Methods');  \n" +
                /* **************************** Add Script Version ->09-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4469,'2.00','V1','User Story 32178: create tab for payable and receivable Payment Method - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4469:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 09-04-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getBomProgressBar`;  \n" +
                "CREATE FUNCTION `fun_getBomProgressBar`(      \n" +
                " pPartID INT      \n" +
                "	) RETURNS int  \n" +
                "BEGIN      \n" +
                "	DECLARE pValidCount INT;      \n" +
                "	DECLARE pTotalCount INT;      \n" +
                "	DECLARE pProgress INT;      \n" +
                "	SET pProgress = 0;      \n" +
                "	-- pTotal count      \n" +
                "	SELECT COUNT(1) INTO pTotalCount FROM rfq_lineitems l      \n" +
                "	WHERE l.partID = pPartID AND      \n" +
                "	l.isDeleted = 0;      \n" +
                "  \n" +
                "	 -- p valid count      \n" +
                "	SELECT COUNT(1) INTO pValidCount FROM (      \n" +
                "			SELECT  l.id AS lineID,      \n" +
                "				max(CASE      \n" +
                "					WHEN      \n" +
                "						IFNULL(l.qpaDesignatorStep,0) = 1 AND      \n" +
                "						IFNULL(l.customerApprovalForQPAREFDESStep,1) = 1 AND      \n" +
                "						IFNULL(l.customerApprovalForBuyStep,1) = 1 AND      \n" +
                "						IFNULL(l.dnpQPARefDesStep,1) = 1 AND      \n" +
                "						IFNULL(l.dnpInvalidREFDESStep,1) = 1 AND      \n" +
                "						IFNULL(l.customerApprovalForDNPBuyStep,1) = 1 AND      \n" +
                "						IFNULL(l.customerApprovalForPopulateStep,1) = 1 AND      \n" +
                "						IFNULL(l.customerApprovalForDNPQPAREFDESStep,1) = 1 AND      \n" +
                "						IFNULL(l.duplicateCPNStep,0) = 1 AND      \n" +
                "						IFNULL(l.restrictCPNUseInBOMStep,0) = 0 AND      \n" +
                "						IFNULL(l.restrictCPNUseWithPermissionStep,0) = 1 AND      \n" +
                "						IFNULL(l.restrictCPNUsePermanentlyStep,0) = 1 AND      \n" +
                "						IFNULL(l.requireFunctionalTypeStep,0) = 1 AND      \n" +
                "						IFNULL(l.requireMountingTypeStep,0) = 1 AND      \n" +
                "						IFNULL(p.mfgVerificationStep,0) = 1 AND      \n" +
                "						IFNULL(p.mfgDistMappingStep,0) = 1 AND      \n" +
                "						IFNULL(p.mfgCodeStep,0) = 1 AND      \n" +
                "						IFNULL(p.distVerificationStep,0) = 1 AND      \n" +
                "						IFNULL(p.distCodeStep,0) = 1 AND      \n" +
                "						IFNULL(p.mfgGoodPartMappingStep,0) = 1 AND      \n" +
                "						IFNULL(p.mfgPNStep,0) = 1 AND      \n" +
                "						IFNULL(p.distPNStep,0) = 1 AND      \n" +
                "						IFNULL(p.distGoodPartMappingStep,0) = 1 AND      \n" +
                "						IFNULL(p.nonRohsStep,0) = 1 AND      \n" +
                "						IFNULL(p.epoxyStep,0) = 1  AND      \n" +
                "						IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND      \n" +
                "						IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND      \n" +
                "						(IFNULL(p.obsoletePartStep,0) = 1 OR(IFNULL(p.obsoletePartStep,0) = 0 AND l.isinstall = 0 AND l.isPurchase = 0 AND (l.isBuyDNPQty = 'C' OR l.isBuyDNPQty = 'N'))) AND     \n" +
                "						#(IFNULL(p.obsoletePartStep,0) = 1 OR (IFNULL(p.obsoletePartStep,0) = 0 AND p.customerApproval = 'A')) AND      \n" +
                "		#				IFNULL(p.mismatchMountingTypeStep,0) = 1   AND     \n" +
                "                       (case when IFNULL(p.mismatchMountingTypeStep,0) = 1 or (IFNULL(p.mismatchMountingTypeStep,0) = 0 and ifnull(approvedMountingType,0) = 1)  \n" +
                "then 1 else 0 end)  \n" +
                " AND     \n" +
                "						(case when IFNULL(p.mismatchFunctionalCategoryStep,0) = 1 or (IFNULL(p.mismatchFunctionalCategoryStep,0) = 0 and ifnull(approvedMountingType,0) = 1)  \n" +
                "then 1 else 0 end)  \n" +
                " AND     \n" +
                "						IFNULL(p.invalidConnectorTypeStep,0) = 1   AND      \n" +
                "						IFNULL(p.mismatchNumberOfRowsStep,0) = 1   AND      \n" +
                "						IFNULL(p.partPinIsLessthenBOMPinStep,0) = 1   AND      \n" +
                "						IFNULL(p.tbdPartStep,0) = 1   AND      \n" +
                "						IFNULL(p.mismatchColorStep,0) = 1   AND      \n" +
                "						IFNULL(p.restrictUsePermanentlyStep,0) = 1   AND      \n" +
                "						IFNULL(p.restrictUseWithPermissionStep,0) = 1  AND      \n" +
                "						p.restrictUseExcludingAliasStep = 1   AND      \n" +
                "						p.restrictUseExcludingAliasWithPermissionStep = 1  AND      \n" +
                "						IFNULL(p.pickupPadRequiredStep,0) = 1   AND      \n" +
                "						IFNULL(p.matingPartRquiredStep,0) = 1    AND      \n" +
                "						IFNULL(p.driverToolsRequiredStep,0) = 1   AND      \n" +
                "						IFNULL(p.functionalTestingRequiredStep,0) = 1    AND      \n" +
                "						IFNULL(p.uomMismatchedStep,0) = 1   AND      \n" +
                "						IFNULL(p.programingRequiredStep,0) = 1     AND      \n" +
                "						IFNULL(p.defaultInvalidMFRStep,0) = 1     AND      \n" +
                "						p.restrictUseInBOMStep = 0   AND      \n" +
                "						p.restrictUseInBOMWithPermissionStep = 0   AND      \n" +
                "						p.restrictUseInBOMExcludingAliasStep = 0   AND      \n" +
                "						p.restrictUseInBOMExcludingAliasWithPermissionStep = 0   AND      \n" +
                "						IFNULL(p.exportControlledStep,0) = 1   AND      \n" +
                "						IFNULL(p.unknownPartStep,0) = 1   AND      \n" +
                "						(IFNULL(p.customerApproval, 'A')  != 'P' AND IFNULL(suggestedGoodPartStep,1) != 0 AND (IFNULL(p.obsoletePartStep,0) = 1 OR (IFNULL(p.obsoletePartStep,0) = 0 AND (l.isinstall = 0 AND l.isPurchase = 0 AND (l.isBuyDNPQty = 'C' OR l.isBuyDNPQty = 'N' )))))AND      \n" +
                "						p.mismatchRequiredProgrammingStep = 1   AND      \n" +
                "						 CASE WHEN (l.qpa IS NULL AND l.dnpQty IS NULL )OR ((l.qpa IS NULL OR l.qpa = 0)AND l.isPurchase)OR (l.uomID = -1 AND ((l.qpa IS NULL AND l.dnpQty IS NULL )OR (l.refDesig IS NULL AND l.dnpDesig IS NULL))) THEN FALSE ELSE TRUE END      \n" +
                "						-- CASE WHEN l.qpa IS NULL OR (l.uomID = -1 AND (l.qpa IS NULL  OR l.refDesig IS NULL)) THEN FALSE ELSE TRUE END      \n" +
                "					THEN 1      \n" +
                "					ELSE 0      \n" +
                "				END) AS ProgressCount      \n" +
                "				FROM rfq_lineitems l      \n" +
                "				LEFT JOIN rfq_lineitems_alternatepart p ON p.rfqLineItemsID = l.id AND p.partID = pPartID      \n" +
                "				WHERE l.partID = pPartID AND p.mfgPNID IS NOT NULL      \n" +
                "                AND IFNULL(suggestedGoodPartStep,1) = 1      \n" +
                "				AND l.isDeleted = 0 AND p.isDeleted = 0      \n" +
                "				GROUP BY l.lineID        \n" +
                "		) AS b      \n" +
                "		WHERE b.ProgressCount=1;      \n" +
                "  \n" +
                "	IF (pTotalCount IS NULL OR pTotalCount = 0) THEN      \n" +
                "		SET pProgress = 0;      \n" +
                "	ELSE      \n" +
                "		SET pProgress = ((pValidCount * 100) / pTotalCount);      \n" +
                "	END IF;      \n" +
                "	RETURN pProgress;      \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 09-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_Update_BOM_MountingType_FunctionalType`;  \n" +
                "CREATE PROCEDURE `Sproc_Update_BOM_MountingType_FunctionalType`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN puserID INT  \n" +
                ")  \n" +
                "BEGIN                            \n" +
                "	DECLARE totalCount INT DEFAULT 0;  \n" +
                "	DECLARE totalPartCount INT DEFAULT 0;                                    \n" +
                "	DECLARE currIndex INT DEFAULT 0;           \n" +
                "	DECLARE currPartIndex INT DEFAULT 0;                     \n" +
                "	DECLARE currLineItemsID INT;                                    \n" +
                "	DECLARE currAlternateID INT;                                \n" +
                "	DECLARE currPartID INT;                   \n" +
                "	DECLARE totalMountingType INT DEFAULT 0;                     \n" +
                "	DECLARE totalFunctionalType INT DEFAULT 0;                                    \n" +
                "	DECLARE totalMountingTypeError INT DEFAULT 0;                     \n" +
                "	DECLARE totalFunctionalTypeError INT DEFAULT 0;                                    \n" +
                "  \n" +
                "  	DROP TEMPORARY TABLE IF EXISTS  componentResult;                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS componentResult AS                   \n" +
                "	SELECT  rla.partID                 \n" +
                "	FROM rfq_lineitems_alternatepart AS rla                   \n" +
                "	WHERE rla.deletedAt IS NULL AND rla.mfgPNID = pPartID AND rla.isDeleted = FALSE                  \n" +
                "	GROUP BY  partID;                 \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO totalCount FROM componentResult;                  \n" +
                "	IF totalCount > 0 THEN                   \n" +
                "		WHILE currIndex < totalCount DO                                    \n" +
                "			SELECT  a.partID INTO currPartID FROM componentResult a LIMIT currIndex, 1;                               \n" +
                "			IF currPartID IS NOT NULL THEN           \n" +
                "				DROP TEMPORARY TABLE IF EXISTS rfq_lineitems_alternatepart_Result;                  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS rfq_lineitems_alternatepart_Result AS                   \n" +
                "					SELECT  rla.id, rla.rfqLineItemsID                 \n" +
                "					FROM rfq_lineitems_alternatepart AS rla                   \n" +
                "					WHERE rla.deletedAt IS NULL AND rla.mfgPNID = pPartID AND rla.partID = currPartID          \n" +
                "					AND rla.isDeleted = FALSE;            \n" +
                "				SET totalPartCount = 0;          \n" +
                "				SET currPartIndex = 0;          \n" +
                "				SELECT COUNT(1) INTO totalPartCount FROM rfq_lineitems_alternatepart_Result;                  \n" +
                "				IF totalPartCount > 0 THEN                   \n" +
                "					WHILE currPartIndex < totalPartCount DO                                    \n" +
                "						SELECT  a.id, a.rfqLineItemsID INTO currAlternateID, currLineItemsID FROM rfq_lineitems_alternatepart_Result a LIMIT currPartIndex, 1;                               \n" +
                "						IF currLineItemsID IS NOT NULL THEN           \n" +
                "							SET totalMountingType = 0;          \n" +
                "							SET totalFunctionalType = 0;          \n" +
                "							SET totalMountingTypeError = 0;          \n" +
                "							SET totalFunctionalTypeError = 0;          \n" +
                "  \n" +
                "							SELECT COUNT(1) INTO totalMountingType FROM (SELECT c.mountingTypeID FROM component c          \n" +
                "							WHERE c.id IN (SELECT  rla.mfgPNID FROM rfq_lineitems_alternatepart AS rla                   \n" +
                "								WHERE rla.deletedAt IS NULL AND rla.rfqLineItemsID = currLineItemsID          \n" +
                "								AND rla.isDeleted = FALSE)          \n" +
                "							GROUP BY mountingTypeID) AS A;          \n" +
                "  \n" +
                "							SELECT COUNT(1) INTO totalFunctionalType FROM (SELECT c.functionalCategoryID FROM component c          \n" +
                "							WHERE c.id IN (SELECT  rla.mfgPNID FROM rfq_lineitems_alternatepart AS rla                   \n" +
                "								WHERE rla.deletedAt IS NULL AND rla.rfqLineItemsID = currLineItemsID          \n" +
                "								AND rla.isDeleted = FALSE)          \n" +
                "							GROUP BY functionalCategoryID) AS B;          \n" +
                "  \n" +
                "							SELECT COUNT(1) INTO totalMountingTypeError FROM rfq_lineitems_alternatepart WHERE rfqLineItemsID = currLineItemsID AND mismatchMountingTypeStep = 0;          \n" +
                "							SELECT COUNT(1) INTO totalFunctionalTypeError FROM rfq_lineitems_alternatepart WHERE rfqLineItemsID = currLineItemsID AND mismatchFunctionalCategoryStep = 0;          \n" +
                "							IF (totalMountingType > 1 AND totalMountingTypeError = 0 )           \n" +
                "							OR (totalFunctionalType > 1 AND totalFunctionalTypeError = 0)           \n" +
                "							OR (totalMountingType = 1 AND totalMountingTypeError > 0 )           \n" +
                "							OR (totalFunctionalType = 1 AND totalFunctionalTypeError > 0) THEN          \n" +
                "  \n" +
                "								CALL Sproc_UpdatePartInternalVersion (currPartID);	          \n" +
                "  \n" +
                "								IF totalMountingType > 1 AND totalMountingTypeError = 0 THEN          \n" +
                "									UPDATE rfq_lineitems_alternatepart SET mismatchMountingTypeStep = 0, customerApproval = 'P',updatedBy=puserID WHERE rfqLineItemsID = currLineItemsID AND partID = currPartID AND isDeleted = FALSE;                   \n" +
                "								END IF;          \n" +
                "  \n" +
                "								IF totalFunctionalType > 1 AND totalFunctionalTypeError = 0 THEN          \n" +
                "									UPDATE rfq_lineitems_alternatepart SET mismatchFunctionalCategoryStep = 0,updatedBy=puserID WHERE rfqLineItemsID = currLineItemsID AND partID = currPartID AND isDeleted = FALSE;                   \n" +
                "								END IF;          \n" +
                "  \n" +
                "								IF totalMountingType = 1 AND totalMountingTypeError > 0  THEN          \n" +
                "									UPDATE rfq_lineitems_alternatepart SET mismatchMountingTypeStep = 1, approvedMountingType = 0,updatedBy=puserID WHERE rfqLineItemsID = currLineItemsID AND partID = currPartID AND isDeleted = FALSE;                   \n" +
                "								END IF;          \n" +
                "  \n" +
                "								IF totalFunctionalType = 1 AND totalFunctionalTypeError > 0 THEN          \n" +
                "									UPDATE rfq_lineitems_alternatepart SET mismatchFunctionalCategoryStep = 1,updatedBy=puserID WHERE rfqLineItemsID = currLineItemsID AND partID = currPartID AND isDeleted = FALSE;                   \n" +
                "								END IF;          \n" +
                "							END IF;          \n" +
                "						END IF;          \n" +
                "						SET currPartIndex = currPartIndex + 1;          \n" +
                "					END WHILE;                        \n" +
                "				END IF;             \n" +
                "			END IF;          \n" +
                "			DROP TEMPORARY TABLE rfq_lineitems_alternatepart_Result;          \n" +
                "			SET currIndex = currIndex + 1;           \n" +
                "		END WHILE;                        \n" +
                "	END IF;                  \n" +
                "# Update All Approved Mounting type if mounting type approve from all BOM when any change in Mounting type or functiona type from part   \n" +
                "		update rfq_lineitems_alternatepart  \n" +
                "		set approvedMountingType = 0,  \n" +
                "        customerApproval = 'p',  \n" +
                "        updatedBy = puserID  \n" +
                "		where mfgPNID = pPartID and approvedMountingType = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE componentResult;                  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 09-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMIconList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMIconList`(                                 \n" +
                "IN pPartID INT      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE totalCount INT DEFAULT 0;      \n" +
                "	DECLARE vDriveToolTotalCount INT DEFAULT 0;      \n" +
                "	DECLARE vPickUpPadTotalCount INT DEFAULT 0;      \n" +
                "	DECLARE vMattingTotalCount INT DEFAULT 0;      \n" +
                "	DECLARE vObsoleteTotalCount INT DEFAULT 0;      \n" +
                "	DECLARE vCustomPartTotalCount INT DEFAULT 0;      \n" +
                "	DECLARE vProgrammingPartTotalCount INT DEFAULT 0;      \n" +
                "	DECLARE vBadPartTotalCount INT DEFAULT 0;      \n" +
                "	DECLARE vBadSupplierPartTotalCount INT DEFAULT 0;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_IconList;      \n" +
                "	CREATE TEMPORARY TABLE temp_IconList(iconType VARCHAR(200), icon VARCHAR(500), tooltip VARCHAR(500));      \n" +
                "  \n" +
                "	INSERT INTO temp_IconList (iconType, icon, tooltip)      \n" +
                "	select 'RoHS', IFNULL(ro.rohsIcon, 'noimage.png'), ro.`name`      \n" +
                "	from rfq_lineitems_alternatepart rla      \n" +
                "	Inner join component com on com.id = rla.mfgPNID and com.isdeleted = 0      \n" +
                "	Inner Join rfq_rohsmst ro on ro.id = com.RoHsStatusID and ro.isdeleted = 0      \n" +
                "	where rla.partID = pPartID and rla.mfgPNID is not null and rla.isDeleted = 0      \n" +
                "	group by ro.rohsIcon,ro.`name`;      \n" +
                "  \n" +
                "	select COUNT(cs.isExportControlled) INTO totalCount from rfq_lineitems_alternatepart rla      \n" +
                "    Inner join component c on c.id = rla.mfgPNID and c.isdeleted = 0      \n" +
                "    Inner Join component_standard_details csd ON csd.componentID = c.id AND csd.isDeleted = 0      \n" +
                "    Inner JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1      \n" +
                "    WHERE rla.partID = pPartID AND rla.mfgPNID IS NOT NULL AND rla.isDeleted = 0;      \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('ExportControl', NULL, 'Export Conrolled');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SET totalCount = 0;      \n" +
                "  \n" +
                "			select sum(com.driverToolRequired), sum(com.pickupPadRequired), sum(com.matingPartRquired),      \n" +
                "					sum(com.programingRequired),sum((case when com.isCustom = 1 or ifnull(disCom.isCustom,0) = 1 then 1 else 0 end)),      \n" +
                "					sum((case when (com.eolDate IS NOT NULL AND com.eolDate < fun_DatetimetoUTCDateTime()) OR cps.name <> 'Active' then 1 else 0 end)),      \n" +
                "					sum((case when com.isGoodPart = 2  then 1 else 0 end)),      \n" +
                "                    sum((case when disCom.isGoodPart = 2 then 1 else 0 end))      \n" +
                "					INTO vDriveToolTotalCount, vPickUpPadTotalCount, vMattingTotalCount, vProgrammingPartTotalCount,      \n" +
                "						vCustomPartTotalCount, vObsoleteTotalCount, vBadPartTotalCount ,vBadSupplierPartTotalCount      \n" +
                "            from rfq_lineitems_alternatepart rla      \n" +
                "			join component com on com.id = rla.mfgPNID and com.isdeleted = 0      \n" +
                "			join component_partstatusmst cps on cps.id = com.partStatus      \n" +
                "			left join component disCom on disCom.id = rla.distMfgPNID and disCom.isdeleted = 0      \n" +
                "			where rla.partID = pPartID and rla.isdeleted = 0;      \n" +
                "  \n" +
                "	IF(vBadPartTotalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('BadPart', NULL, 'Incorrect Part');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    IF(vBadSupplierPartTotalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('BadSupplierPart', NULL, 'Incorrect Supplier Part');      \n" +
                "    END IF;      \n" +
                "  \n" +
                "	IF(vDriveToolTotalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('DriverTool', NULL, 'Require Drive Tools');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(vMattingTotalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('matingPart', NULL, 'Require Mating Part');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(vPickUpPadTotalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('pickupPad', NULL, 'Require Pickup Pad');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(vProgrammingPartTotalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('programing', NULL, 'Require Programing');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SET totalCount = 0;      \n" +
                "	SELECT COUNT(1) INTO totalCount FROM component WHERE id IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0 AND (mismatchMountingTypeStep = 0)) ;      \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('MismatchMountingType', NULL, 'Mismatched Mounting Type');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SET totalCount = 0;      \n" +
                "	SELECT COUNT(1) INTO totalCount FROM component WHERE id IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0 AND  approvedMountingType = 1) ;      \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('ApproveMountingType', NULL, 'Approved Mounting Typ');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	/* SET totalCount = 0;      \n" +
                "	SELECT MAX(CASE WHEN (co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR      \n" +
                "		EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE co.partStatus = cp.id AND cp.name <> 'Active' AND cp.isDeleted = 0)      \n" +
                "		THEN 1 ELSE 0 END) INTO totalCount      \n" +
                "	FROM component co WHERE co.id IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0);      \n" +
                "  */      \n" +
                "	IF(vObsoleteTotalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('obsolete', NULL, 'Obsolete');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SET totalCount = 0;      \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO totalCount FROM component WHERE id IN (      \n" +
                "		SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0      \n" +
                "	) AND id NOT IN (      \n" +
                "		SELECT c.refComponentID FROM component_temperature_sensitive_data c WHERE c.deletedAt IS NULL AND c.refComponentID IN (      \n" +
                "			SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0      \n" +
                "			)      \n" +
                "		) AND functionalCategoryID IN (SELECT id FROM rfq_parttypemst WHERE isTemperatureSensitive = 1);      \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('TmaxWarn', NULL, 'Tmax is not Defined');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SET totalCount = 0;      \n" +
                "	SELECT COUNT(1) INTO totalCount FROM component_temperature_sensitive_data WHERE deletedAt IS NULL AND refComponentID IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0);      \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('TmaxRed', NULL, 'Tmax');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(vCustomPartTotalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('CustomPart', NULL, 'Custom Part');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SET totalCount = 0;      \n" +
                "  \n" +
                "	INSERT INTO temp_IconList (iconType, icon, tooltip)      \n" +
                "	SELECT 'OperationalAttribute', IFNULL(icon, 'noimage.png'), `description` FROM component_dynamic_attribute WHERE id IN (      \n" +
                "		SELECT attributeID FROM component_dynamic_attribute_mapping_part WHERE mfgPNID IN (      \n" +
                "			SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0      \n" +
                "			)  AND deletedAt IS NULL	) ;      \n" +
                "  \n" +
                "	SELECT * FROM temp_IconList;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 09-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4470,'2.00','V1','User Story 30241: BOM: Improve Logic Of Approved Mounting Type Mismatched related changes - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4470:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 12-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMIconList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMIconList`(                                 \n" +
                "IN pPartID INT      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE totalCount INT DEFAULT 0;      \n" +
                "	DECLARE vDriveToolTotalCount INT DEFAULT 0;      \n" +
                "	DECLARE vPickUpPadTotalCount INT DEFAULT 0;      \n" +
                "	DECLARE vMattingTotalCount INT DEFAULT 0;      \n" +
                "	DECLARE vObsoleteTotalCount INT DEFAULT 0;      \n" +
                "	DECLARE vCustomPartTotalCount INT DEFAULT 0;      \n" +
                "	DECLARE vProgrammingPartTotalCount INT DEFAULT 0;      \n" +
                "	DECLARE vBadPartTotalCount INT DEFAULT 0;      \n" +
                "	DECLARE vBadSupplierPartTotalCount INT DEFAULT 0;      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_IconList;      \n" +
                "	CREATE TEMPORARY TABLE temp_IconList(iconType VARCHAR(200), icon VARCHAR(500), tooltip VARCHAR(500));      \n" +
                "  \n" +
                "	INSERT INTO temp_IconList (iconType, icon, tooltip)      \n" +
                "	select 'RoHS', IFNULL(ro.rohsIcon, 'noimage.png'), ro.`name`      \n" +
                "	from rfq_lineitems_alternatepart rla      \n" +
                "	Inner join component com on com.id = rla.mfgPNID and com.isdeleted = 0      \n" +
                "	Inner Join rfq_rohsmst ro on ro.id = com.RoHsStatusID and ro.isdeleted = 0      \n" +
                "	where rla.partID = pPartID and rla.mfgPNID is not null and rla.isDeleted = 0      \n" +
                "	group by ro.rohsIcon,ro.`name`;      \n" +
                "  \n" +
                "	select COUNT(cs.isExportControlled) INTO totalCount from rfq_lineitems_alternatepart rla      \n" +
                "    Inner join component c on c.id = rla.mfgPNID and c.isdeleted = 0      \n" +
                "    Inner Join component_standard_details csd ON csd.componentID = c.id AND csd.isDeleted = 0      \n" +
                "    Inner JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1      \n" +
                "    WHERE rla.partID = pPartID AND rla.mfgPNID IS NOT NULL AND rla.isDeleted = 0;      \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('ExportControl', NULL, 'Export Conrolled');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SET totalCount = 0;      \n" +
                "  \n" +
                "			select sum(com.driverToolRequired), sum(com.pickupPadRequired), sum(com.matingPartRquired),      \n" +
                "					sum(com.programingRequired),sum((case when com.isCustom = 1 or ifnull(disCom.isCustom,0) = 1 then 1 else 0 end)),      \n" +
                "					sum((case when (com.eolDate IS NOT NULL AND com.eolDate < fun_DatetimetoUTCDateTime()) OR cps.name <> 'Active' then 1 else 0 end)),      \n" +
                "					sum((case when com.isGoodPart = 2  then 1 else 0 end)),      \n" +
                "                    sum((case when disCom.isGoodPart = 2 then 1 else 0 end))      \n" +
                "					INTO vDriveToolTotalCount, vPickUpPadTotalCount, vMattingTotalCount, vProgrammingPartTotalCount,      \n" +
                "						vCustomPartTotalCount, vObsoleteTotalCount, vBadPartTotalCount ,vBadSupplierPartTotalCount      \n" +
                "            from rfq_lineitems_alternatepart rla      \n" +
                "			join component com on com.id = rla.mfgPNID and com.isdeleted = 0      \n" +
                "			join component_partstatusmst cps on cps.id = com.partStatus      \n" +
                "			left join component disCom on disCom.id = rla.distMfgPNID and disCom.isdeleted = 0      \n" +
                "			where rla.partID = pPartID and rla.isdeleted = 0;      \n" +
                "  \n" +
                "	IF(vBadPartTotalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('BadPart', NULL, 'Incorrect Part');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "    IF(vBadSupplierPartTotalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('BadSupplierPart', NULL, 'Incorrect Supplier Part');      \n" +
                "    END IF;      \n" +
                "  \n" +
                "	IF(vDriveToolTotalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('DriverTool', NULL, 'Require Drive Tools');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(vMattingTotalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('matingPart', NULL, 'Require Mating Part');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(vPickUpPadTotalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('pickupPad', NULL, 'Require Pickup Pad');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(vProgrammingPartTotalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('programing', NULL, 'Require Programing');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SET totalCount = 0;      \n" +
                "	SELECT COUNT(1) INTO totalCount FROM component WHERE id IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0 AND (mismatchMountingTypeStep = 0)) ;      \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('MismatchMountingType', NULL, 'Mismatched Mounting Type');      \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET totalCount = 0;      \n" +
                "	SELECT COUNT(1) INTO totalCount FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mismatchFunctionalCategoryStep = 0 AND mfgPNID IS NOT NULL AND isDeleted = 0;  \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('MismatchFunctionalType', NULL, 'Mismatched Functional Type');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET totalCount = 0;      \n" +
                "	SELECT COUNT(1) INTO totalCount FROM component WHERE id IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0 AND  approvedMountingType = 1) ;      \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('ApproveMountingType', NULL, 'Approved Mounting Type');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	/* SET totalCount = 0;      \n" +
                "	SELECT MAX(CASE WHEN (co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR      \n" +
                "		EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE co.partStatus = cp.id AND cp.name <> 'Active' AND cp.isDeleted = 0)      \n" +
                "		THEN 1 ELSE 0 END) INTO totalCount      \n" +
                "	FROM component co WHERE co.id IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0);      \n" +
                "  */      \n" +
                "	IF(vObsoleteTotalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('obsolete', NULL, 'Obsolete');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SET totalCount = 0;      \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO totalCount FROM component WHERE id IN (      \n" +
                "		SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0      \n" +
                "	) AND id NOT IN (      \n" +
                "		SELECT c.refComponentID FROM component_temperature_sensitive_data c WHERE c.deletedAt IS NULL AND c.refComponentID IN (      \n" +
                "			SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0      \n" +
                "			)      \n" +
                "		) AND functionalCategoryID IN (SELECT id FROM rfq_parttypemst WHERE isTemperatureSensitive = 1);      \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('TmaxWarn', NULL, 'Tmax is not Defined');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SET totalCount = 0;      \n" +
                "	SELECT COUNT(1) INTO totalCount FROM component_temperature_sensitive_data WHERE deletedAt IS NULL AND refComponentID IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0);      \n" +
                "  \n" +
                "	IF(totalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('TmaxRed', NULL, 'Tmax');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF(vCustomPartTotalCount > 0) THEN      \n" +
                "		INSERT INTO temp_IconList (iconType, icon, tooltip) VALUES ('CustomPart', NULL, 'Custom Part');      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	SET totalCount = 0;      \n" +
                "  \n" +
                "	INSERT INTO temp_IconList (iconType, icon, tooltip)      \n" +
                "	SELECT 'OperationalAttribute', IFNULL(icon, 'noimage.png'), `description` FROM component_dynamic_attribute WHERE id IN (      \n" +
                "		SELECT attributeID FROM component_dynamic_attribute_mapping_part WHERE mfgPNID IN (      \n" +
                "			SELECT mfgPNID FROM rfq_lineitems_alternatepart WHERE partID = pPartID AND mfgPNID IS NOT NULL AND isDeleted = 0      \n" +
                "			)  AND deletedAt IS NULL	) ;      \n" +
                "  \n" +
                "	SELECT * FROM temp_IconList;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4471,'2.00','V1','Task 32536: Add new icon for Functional type mismatch and set tool tip related changes - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4471:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetComponentProgressiveFilters ;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentProgressiveFilters`(  \n" +
                "IN pMfgType varchar(10),   \n" +
                "IN pIsCodeFirst TINYINT(1),  \n" +
                "IN pExcludeSupplier varchar(10)  \n" +
                ")  \n" +
                "BEGIN   \n" +
                "  \n" +
                "    -- Manufacure List  \n" +
                "	select case when pIsCodeFirst = true then    \n" +
                "					concat('(',m.mfgCode,') ',m.mfgName)    \n" +
                "				else    \n" +
                "					concat('(',m.mfgName,') ',m.mfgCode)    \n" +
                "				end mfgCodeName  \n" +
                "				,m.mfgCode, m.id, m.mfgType, m.mfgName, m.isCustOrDisty, m.isCompany, m.displayOrder    \n" +
                "		 FROM mfgCodemst AS m    \n" +
                "		 WHERE m.mfgType = 'MFG'  \n" +
                "		 and m.isdeleted = 0    \n" +
                "		 ORDER BY m.displayOrder IS NULL, m.displayOrder ASC, mfgCodeName ASC;  \n" +
                "  \n" +
                "	-- Supplier List  \n" +
                "	IF(pExcludeSupplier = 0)  \n" +
                "    THEN  \n" +
                "		select case when pIsCodeFirst = true then    \n" +
                "					concat('(',m.mfgCode,') ',m.mfgName)    \n" +
                "				else    \n" +
                "					concat('(',m.mfgName,') ',m.mfgCode)    \n" +
                "				end mfgCodeName  \n" +
                "				,m.mfgCode, m.id, m.mfgType, m.mfgName, m.isCustOrDisty, m.isCompany, m.displayOrder    \n" +
                "		 FROM mfgCodemst AS m    \n" +
                "		 WHERE m.mfgType = 'DIST'  \n" +
                "		 and m.isdeleted = 0    \n" +
                "		 ORDER BY m.displayOrder IS NULL, m.displayOrder ASC, mfgCodeName ASC;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    -- Part Status List  \n" +
                "    SELECT id, name, isActive, colorCode  \n" +
                "		FROM component_partstatusmst cp  \n" +
                "		WHERE  cp.isdeleted = 0    \n" +
                "	ORDER BY cp.displayOrder ASC, cp.name ASC;   \n" +
                "  \n" +
                "    -- Packaging List  \n" +
                "   SELECT id, name as `value`, name, isActive   \n" +
                "		FROM component_packagingmst AS cpm  \n" +
                "	WHERE cpm.isDeleted = 0  \n" +
                "    ORDER BY cpm.displayOrder ASC, cpm.name ASC;  \n" +
                "	-- Functional Type List  \n" +
                "	select id, partTypeName, isActive, isTemperatureSensitive    \n" +
                "    from rfq_parttypemst      \n" +
                "    where isDeleted = 0      \n" +
                "	order by displayOrder is null , displayOrder, partTypeName;   \n" +
                "  \n" +
                "    -- External Function Type   \n" +
                "    select alias functionalCategoryText    \n" +
                "		 from component_fields_genericalias_mst    \n" +
                "		where refTableName = 'rfq_parttypemst'    \n" +
                "		  and isDeleted = 0    \n" +
                "		order by alias;    \n" +
                "  \n" +
                "	-- External Mounting Type   \n" +
                "	select alias mountingTypeText    \n" +
                "		 from component_fields_genericalias_mst    \n" +
                "		where refTableName = 'rfq_mountingtypemst'    \n" +
                "		  and isDeleted = 0    \n" +
                "		order by alias;    \n" +
                "  \n" +
                "	-- External ROHS Type   \n" +
                "	select alias rohsText    \n" +
                "		 from component_fields_genericalias_mst    \n" +
                "		where refTableName = 'rfq_rohsmst'    \n" +
                "		  and isDeleted = 0    \n" +
                "		order by alias;        \n" +
                "  \n" +
                "	-- Package/Case(Shape) Type List  \n" +
                "	SELECT id, name as `value`, name, isActive, isXrayRequired   \n" +
                "		FROM rfq_packagecasetypemst AS rpc   \n" +
                "    WHERE isDeleted = 0    \n" +
                "    ORDER BY name ASC;  \n" +
                "  \n" +
                "	-- Mounting Type List  \n" +
                "	SELECT id, name, isActive, colorCode, isCountTypeEach   \n" +
                "    FROM rfq_mountingtypemst  \n" +
                "    WHERE isDeleted = 0    \n" +
                "    ORDER BY ISNULL(displayOrder), displayOrder ASC, name ASC;  \n" +
                "  \n" +
                "    -- ROHS Type List  \n" +
                "    SELECT id, name as `value`, name, description, isActive, systemGenerated  \n" +
                "    ,rohsIcon, refMainCategoryID, displayOrder, refParentID  \n" +
                "    FROM rfq_rohsmst   \n" +
                "    WHERE isDeleted = 0  \n" +
                "    ORDER BY ISNULL(displayOrder), displayOrder ASC, name ASC;  \n" +
                "  \n" +
                "    -- Part Type List  \n" +
                "	SELECT id, categoryName as `Value`, categoryName, colorCode, partCategory, epicorType  \n" +
                "    FROM rfq_partcategory   \n" +
                "    WHERE isDeleted = 0;  \n" +
                "  \n" +
                "END; \n" +

                "DROP PROCEDURE IF EXISTS Sproc_GetComponentNoneProgressiveFilters ;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentNoneProgressiveFilters`(  \n" +
                "IN pMfgType varchar(10),   \n" +
                "IN pIsCodeFirst TINYINT(1),  \n" +
                "IN pDisApprovedMFG varchar(10)  \n" +
                ")  \n" +
                "BEGIN   \n" +
                "  \n" +
                "    -- Assembly Type List  \n" +
                "	SELECT id, name, isActive, noOfSide   \n" +
                "		FROM rfq_assy_typemst AS RFQAssyTypeMst   \n" +
                "	WHERE isdeleted = 0    \n" +
                "    ORDER BY ISNULL(displayOrder), displayOrder ASC, name ASC;  \n" +
                "  \n" +
                "    -- Acceptable Shipping Country  \n" +
                "    SELECT countryID, countryName, isActive   \n" +
                "		FROM countryMst  \n" +
                "	WHERE isDeleted = 0      \n" +
                "    ORDER BY ISNULL(displayOrder), displayOrder ASC, countryName ASC;  \n" +
                "  \n" +
                "    -- Operational Attribute  \n" +
                "    SELECT id, attributeName, fieldType, defaultValue, icon, description, isActive  \n" +
                "    FROM component_dynamic_attribute   \n" +
                "    WHERE isDeleted = 0      \n" +
                "    ORDER BY ISNULL(displayOrder), displayOrder ASC, attributeName ASC;  \n" +
                "	-- Standards  \n" +
                "	select * from   \n" +
                "		(  \n" +
                "			select certificateStandardID, fullName, displayOrder   \n" +
                "			from certificate_standards where isDeleted = 0  \n" +
                "			UNION  \n" +
                "			select concat(cs.certificateStandardID,':',sc.classID) as certificateStandardID,   \n" +
                "			concat(cs.fullName,':',sc.className ) as fullName, cs.displayOrder   \n" +
                "			from standard_class sc join certificate_standards cs on sc.certificateStandardID = cs.certificateStandardID and cs.isDeleted = 0  \n" +
                "			where sc.isDeleted = 0  \n" +
                "		) as a order by (a.displayOrder IS NULL), a.displayOrder,a.fullName;  \n" +
                "  \n" +
                "	-- DisApproved Supplier/MFG Type List      \n" +
                "    select case when pIsCodeFirst = true then    \n" +
                "					concat('(',m.mfgCode,') ',m.mfgName)    \n" +
                "				else     \n" +
                "					concat('(',m.mfgName,') ',m.mfgCode)    \n" +
                "				end mfgCodeName  \n" +
                "				,m.mfgCode, m.id, m.mfgType, m.mfgName, m.isCustOrDisty, m.isCompany, m.displayOrder    \n" +
                "	FROM mfgCodemst AS m    \n" +
                "	WHERE m.mfgType = pDisApprovedMFG  \n" +
                "	and m.isdeleted = 0    \n" +
                "	ORDER BY m.displayOrder IS NULL, m.displayOrder ASC, mfgCodeName ASC;  \n" +
                "  \n" +
                "END;  \n" +

                /* **************************** Add Script Version -> 12-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4472,'2.00','V1','User Story 32164: Improvement list page of Part (Performance) - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4472:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-04-2021 *********************************** */
                "drop function if exists `fun_generateDabitMemoNumber`;  \n" +
                "drop procedure if exists `Sproc_generateDebitMemoNumber`;  \n" +
                "CREATE PROCEDURE `Sproc_generateDebitMemoNumber`(    \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_Id int;  \n" +
                "	DECLARE v_CompanyCode VARCHAR(50);  \n" +
                "	DECLARE v_TimeZone VARCHAR(100);  \n" +
                "	DECLARE v_CurrentTimeZoneDate VARCHAR(100);  \n" +
                "	DECLARE v_PrefixString VARCHAR(50);  \n" +
                "	DECLARE v_PackinfSlipNumber VARCHAR(50);  \n" +
                "	DECLARE	v_StrIncrementNumber VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT mfgCode INTO v_CompanyCode FROM mfgcodemst WHERE deletedAt IS NULL AND isCompany = 1 LIMIT 1;  \n" +
                "	SELECT `values` INTO v_TimeZone FROM systemconfigrations WHERE `key` = 'TimeZone';  \n" +
                "	SELECT DATE_FORMAT(CONVERT_TZ(UTC_TIMESTAMP,'UTC',v_TimeZone), '%y%m%d') INTO v_CurrentTimeZoneDate;  \n" +
                "	SELECT CONCAT(v_CompanyCode, 'DM', v_CurrentTimeZoneDate) INTO v_PrefixString;  \n" +
                "  \n" +
                "         SELECT max(t.id) INTO v_Id  \n" +
                "           FROM packing_slip_material_receive t  \n" +
                "          WHERE t.debitMemoNumber LIKE CONCAT(v_PrefixString, '%')  \n" +
                "		    AND t.isDeleted = 0 for update;  \n" +
                "  \n" +
                "	IF (v_Id IS NULL) THEN  \n" +
                "		SELECT  CONCAT(v_PrefixString, '01') debitMemoNumber;  \n" +
                "	ELSE   \n" +
                "         SELECT t.debitMemoNumber  \n" +
                "		   INTO v_PackinfSlipNumber  \n" +
                "           FROM packing_slip_material_receive t  \n" +
                "          WHERE t.id = v_Id for update;  \n" +
                "  \n" +
                "		SELECT RIGHT(v_PackinfSlipNumber, 2) INTO v_StrIncrementNumber;  \n" +
                "		SELECT CONCAT(v_PrefixString, LPAD(CAST(v_StrIncrementNumber AS UNSIGNED) + 1, 2, '0' )) debitMemoNumber;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->12-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4473,'2.00','V1','User Story 32083: Implement system id Generate Code common function - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4473:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoicePayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoicePayment`(                                                                                                \n" +
                "	IN ppageIndex INT,                                                                                                \n" +
                "	IN precordPerPage INT,                                                                                                \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                                \n" +
                "	IN pWhereClause VARCHAR(16383),                                    \n" +
                "	IN pCustomerIDs VARCHAR(16383),                                    \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),                                    \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),                                    \n" +
                "	IN pExactPaymentNumberSearch TINYINT,    \n" +
                "	IN pPaymentNumber VARCHAR(10),                                     \n" +
                "	IN pInvoiceNumber VARCHAR(50),                                     \n" +
                "	IN pAmount VARCHAR(50),       \n" +
                "	IN pExactPaymentAmountSearch TINYINT,                                      \n" +
                "	IN pFromDate DATE,                                                  \n" +
                "	IN pToDate DATE,      \n" +
                "	IN pIsDisplayZeroPaymentDataOnly TINYINT,                \n" +
                "	IN pRefPaymentMode VARCHAR(1)                                       \n" +
                ")  \n" +
                "BEGIN                                                                                                \n" +
                "	DECLARE pOffset INT;                                                                                                \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                                                \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                                             \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                                              \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(5000);                                              \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                                                    \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                                               \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';                                    \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                          \n" +
                "  		SET pWhereClause = '1=1' ;                                          \n" +
                "	END IF;                                             \n" +
                "  \n" +
                "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN                                                                                                                                                                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');                                                                           \n" +
                "	END IF;	                                     \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN                                                                                                                                                                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');                                                                           \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN                                                                                                                                                                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');                                                                           \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN                                                                                                                                                                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');                                                                                   \n" +
                "	END IF;	                                     \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN                                                                                                                                                                      \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND                          \n" +
                "             EXISTS(                     \n" +
                "			SELECT  1                   \n" +
                "			FROM packingslip_invoice_payment_det                          \n" +
                "			WHERE refPayementid = psip.id         \n" +
                "			AND isDeleted=0                \n" +
                "			AND refCustPackingslipInvoiceID IN (SELECT id                   \n" +
                "								FROM customer_packingslip                          \n" +
                "								WHERE transType = \"I\"               \n" +
                "								AND invoiceNumber = \"',pInvoiceNumber,'\"                  \n" +
                "								AND isDeleted=0)                  \n" +
                "			 )');                                                                                 \n" +
                "	END IF;	                                     \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN                                                                                                                                                                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');                                                                                     \n" +
                "	END IF;	                                         \n" +
                "  \n" +
                "	IF(pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');                                                \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');                                          \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');                                          \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF(pIsDisplayZeroPaymentDataOnly = 1) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');        \n" +
                "	END IF;                                     \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"              			                                                        \n" +
                "            SELECT 						                                                  \n" +
                "		psip.id,                                                              \n" +
                "                psip.mfgcodeID,                                          \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,                             \n" +
                "                psip.isPaymentVoided,                        \n" +
                "                (CASE WHEN psip.isPaymentVoided = 0 THEN    \n" +
                "				(CASE WHEN (invPayDetTemp.invoiceNumberList IS NOT NULL AND     \n" +
                "					(IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0) THEN 'Received & Applied'      \n" +
                "				ELSE 'Received' END)                    \n" +
                "                    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue,                        \n" +
                "		psip.voidPaymentReason,          \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,           \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,                            \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')          \n" +
                "										ELSE NULL END) AS voidedAt,	                      \n" +
                "                psip.refVoidedPaymentNumber,            \n" +
                "                psip.refVoidedPaymentId,                        \n" +
                "                psip.paymentNumber,                                          \n" +
                "                psip.bankName,                                          \n" +
                "                psip.bankAccountNo,                                          \n" +
                "                psip.paymentType,                                          \n" +
                "                psip.bankAccountMasID,         \n" +
                "                psip.systemId ,                                         \n" +
                "                gc.gencCategoryName paymentMethod,                                    \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,                                    \n" +
                "		psip.paymentDate,                                    \n" +
                "                psip.paymentAmount,                                    \n" +
                "		psip.payToAddress payToAddress,                                                   \n" +
                "                psip.accountReference,                                    \n" +
                "                psip.remark,               \n" +
                "                psip.lockStatus,    \n" +
                "		(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'     \n" +
                "			 WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,	    \n" +
                "                fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,                            \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,                                                               \n" +
                "                invPayDetTemp.invoiceNumberList,                   \n" +
                "                IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS selectedInvoiceTotPaymentAmount,                \n" +
                "                IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmt,         \n" +
                "                (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_packingslip_invoice_payment'        \n" +
                "				AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0) AS totalDocuments ,        \n" +
                "		psip.isZeroPayment ,    \n" +
                "		fun_getUserNameByID(psip.createdBy) createdby,                                                                \n" +
                "		fun_getUserNameByID(psip.updatedBy) updatedby,                                                \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,	                                              \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,                                                \n" +
                "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,                                           \n" +
                "		fun_getRoleByID(psip.createByRoleId) createdbyRole                                           \n" +
                "	   FROM packingslip_invoice_payment psip                                     \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0                  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber, '#####',cps.id SEPARATOR '@@@@@') invoiceNumberList ,                \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount                \n" +
                "				    FROM packingslip_invoice_payment_det psipd                  \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id                   \n" +
                "											AND cps.isDeleted = 0                  \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL                   \n" +
                "				     AND psipd.isDeleted = 0                  \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp                   \n" +
                "				ON psip.id = invPayDetTemp.refPayementid                       \n" +
                "            WHERE refPaymentMode = '\",pRefPaymentMode,\"'                   \n" +
                "            AND psip.isDeleted = 0                   \n" +
                "             \" ,v_InvoiceNumberWhereClause);                                            \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                                                \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";                                                                                                \n" +
                "	ELSE                                                                                                \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;                                                                                                \n" +
                "	END IF;	                                                            		                                    \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                                                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                \n" +
                "	ELSE	                                                                                                \n" +
                "		SET rowNumWhere = '';                                                                                                \n" +
                "	END IF;	                                                                                                 \n" +
                "  \n" +
                "	/* to get total count of rows */                                                                             \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);                                                               			                							                    \n" +
                "  \n" +
                "        PREPARE query1 FROM @SQLStatement1;                                                                            \n" +
                "	EXECUTE query1;                                                                            \n" +
                "	DEALLOCATE PREPARE query1;                                                                          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                	                                                                       \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                            \n" +
                "	EXECUTE query2;                                                                            \n" +
                "	DEALLOCATE PREPARE query2;                                                                         \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->12-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4474,'2.00','V1',' Sproc_RetrieveCustomerInvoicePayment - Ketan '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4474:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-04-2021 *********************************** */
                "update page_detail  \n" +
                "  set iconClass = 'icons-add-supplier-invoice',  \n" +
                "	displayMenuName = 'Supplier Invoice'  \n" +
                "where pageRoute = 'app.transaction.invoicetariff.manage';  \n" +
                "  \n" +
                "update page_detail  \n" +
                "set menuName = 'Add Supplier RMA Packing Slip',  \n" +
                "	iconClass = 'icons-add-supplier-rma'  \n" +
                "where pageRoute = 'app.transaction.supplierrma.manage';  \n" +
                "  \n" +
                "update page_detail  \n" +
                "set menuName = 'Add Supplier Credit Memo',  \n" +
                "	iconClass = 'icons-add-supplier-credit-memo',  \n" +
                "	displayMenuName = 'Supplier Credit Memo',  \n" +
                "	isDisplay = 1,  \n" +
                "    isAllowAsHomePage = 1  \n" +
                "where pageRoute = 'app.transaction.invoicecreditmemo.manage';  \n" +
                "  \n" +
                "update page_detail  \n" +
                " set menuName = 'Add Supplier Debit Memo',  \n" +
                "	iconClass = 'icons-add-supplier-debit-memo',  \n" +
                "	displayMenuName = 'Supplier Debit Memo',  \n" +
                "	isDisplay = 1,  \n" +
                "	isAllowAsHomePage = 1  \n" +
                "where pageRoute = 'app.transaction.invoicedebitmemo.manage';  \n" +
                "  \n" +
                "DELETE FROM `userpagedetail` WHERE pageID IN (SELECT pageID FROM page_detail WHERE pagename IN (\"Supplier Accounting\", \"Customer Accounting\"));  \n" +
                "  \n" +
                "update page_detail  \n" +
                "  set isDisplay = 1  \n" +
                "where pageName in ('Supplier Invoice Packing Slip',  \n" +
                "'Supplier Invoice Tariff',  \n" +
                "'Inovaxe UnAuthorize Request Response history',  \n" +
                "'Invoice Supplier RMA');  \n" +
                /* **************************** Add Script Version -> 13-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4475,'2.00','V1','Bug 32488, 32210 - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4475:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-04-2021  *********************************** */
                "DROP  PROCEDURE IF EXISTS Sproc_GetSalesCommissionDetailsForMultiplePart;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesCommissionDetailsForMultiplePart`(      	        \n" +
                "	IN pInvoiceID INT	    \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	DECLARE i INT DEFAULT 0;           \n" +
                "	DECLARE vAssyID INT;          \n" +
                "    DECLARE vRefQuoteID INT;          \n" +
                "	DECLARE vMaterialUnitPrice DECIMAL(16,6);          \n" +
                "	DECLARE vlaborUnitPrce DECIMAL(16,6);          \n" +
                "	DECLARE vOverheadUnitPrice DECIMAL(16,6);          \n" +
                "	DECLARE vParamCnt INT;    \n" +
                "  \n" +
                "    -- table data variables    \n" +
                "    DECLARE vRefCustPackingSlipDetId INT;    \n" +
                "    DECLARE vPartId INT;          \n" +
                "    DECLARE vQuoteFrom INT;    \n" +
                "    DECLARE vQuoteGroupId INT;    \n" +
                "    DECLARE vQuoteNumber varchar(50);          \n" +
                "    DECLARE vPOQty INT;    \n" +
                "    DECLARE vTurnTimeId INT;          \n" +
                "    DECLARE vPrice decimal(18,5);    \n" +
                "  \n" +
                "    /*DROP  TABLE IF EXISTS temp_part_data;    \n" +
                "    CREATE TABLE temp_part_data AS    \n" +
                "    Select *     \n" +
                "    From JSON_TABLE(pPartData , \"$[*]\" COLUMNS    \n" +
                "		(    \n" +
                "			`partId` INT PATH \"$.partId\",    \n" +
                "            `quoteFrom` INT PATH \"$.quoteFrom\",    \n" +
                "            `quoteGroupId` INT PATH \"$.quoteGroupId\",    \n" +
                "            `quoteNumber` INT PATH \"$.quoteNumber\",    \n" +
                "            `turnTimeId` INT PATH \"$.turnTimeId\",    \n" +
                "            `poQty` INT PATH \"$.poQty\",    \n" +
                "            `price` DECIMAL(18,5) PATH \"$.price\"    \n" +
                "		)    \n" +
                "    ) AS JS_PartData;    \n" +
                "    */    \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_part_data ;    \n" +
                "	CREATE TEMPORARY TABLE temp_part_data AS    \n" +
                "	Select id refCustPackingSlipDetId, partId , quoteFrom ,refRFQGroupID quoteGroupId, quoteNumber, poQty,     \n" +
                "		(case when quoteFrom = 1 then refRFQQtyTurnTimeID   \n" +
                "			when quoteFrom = 2 then refAssyQtyTurnTimeID    \n" +
                "            else  null end) turnTimeId ,  unitPrice price    \n" +
                "	From customer_packingslip_det   cpd  \n" +
                "	Where cpd.refCustPackingSlipID =  pInvoiceID and cpd.isDeleted = 0 and cpd.quoteFrom <> 3;     \n" +
                "  \n" +
                "    SELECT COUNT(1) INTO vParamCnt FROM temp_part_data;    \n" +
                "    drop temporary table if exists temp_salesCommission;          \n" +
                "	create temporary table temp_salesCommission(     \n" +
                "							refCustPackingSlipDetId INT,    \n" +
                "                            partId INT,    \n" +
                "							unitPrice DECIMAL(16,6),          \n" +
                "							refQuoteAttributeId int,          \n" +
                "							commissionPercentage DECIMAL(16,6),          \n" +
                "							commissionValue DECIMAL(16,6),          \n" +
                "                            extendedCommissionValue INT,    \n" +
                "							category varchar(100),    \n" +
                "							poQty int,    \n" +
                "							fieldName varchar(30),    \n" +
                "                            org_commissionPercentage DECIMAL(16,6),    \n" +
                "                            org_commissionValue DECIMAL(16,6),    \n" +
                "							extendedOrgCommissionValue INT,							    \n" +
                "                            refComponentSalesPriceBreakID INT);     \n" +
                "    temp_salesCommissionList: WHILE i < vParamCnt DO     \n" +
                "		SET vRefCustPackingSlipDetId = null;    \n" +
                "		SET vPartId = null;          \n" +
                "		SET vQuoteFrom = null;    \n" +
                "		SET vQuoteGroupId = null;    \n" +
                "		SET vQuoteNumber= null;          \n" +
                "		SET vPOQty = null;    \n" +
                "		SET vTurnTimeId = null;          \n" +
                "		SET vPrice= null;    \n" +
                "  \n" +
                "        SELECT partId,quoteFrom,quoteGroupId,quoteNumber,turnTimeId,poQty,price ,  refCustPackingSlipDetId     \n" +
                "        INTO  vPartId, vQuoteFrom, vQuoteGroupId, vQuoteNumber,vTurnTimeId, vPOQty, vPrice, vRefCustPackingSlipDetId    \n" +
                "        FROM temp_part_data LIMIT i,1;    \n" +
                "  \n" +
                "		SET vAssyID = null;          \n" +
                "		SET vRefQuoteID = null;          \n" +
                "		SET vMaterialUnitPrice = null;          \n" +
                "		SET vlaborUnitPrce = null;          \n" +
                "		SET vOverheadUnitPrice = null;       \n" +
                "  \n" +
                "		if vQuoteFrom = 1 then /*From RFQ*/          \n" +
                "			  SELECT ra.id INTO vAssyID          \n" +
                "				FROM rfq_assemblies ra          \n" +
                "			   WHERE ra.partID = vPartId          \n" +
                "				 AND ra.rfqrefID = vQuoteGroupId          \n" +
                "				 AND ra.isDeleted = 0;    \n" +
                "  \n" +
                "				SELECT 	id, unitprice, laborunitPrice, overheadUnitPrice    \n" +
                "				INTO vRefQuoteID , vMaterialUnitPrice , vlaborUnitPrce , vOverheadUnitPrice     \n" +
                "                FROM rfq_assy_quotations    \n" +
                "				WHERE 	rfqAssyID = vAssyID    \n" +
                "				AND rfqAssyQtyTurnTimeID = vTurnTimeId    \n" +
                "				AND isDeleted = 0    \n" +
                "				ORDER BY id DESC    \n" +
                "				LIMIT 1;          \n" +
                "  \n" +
                "  \n" +
                "		/*get sales commission calculations from RFQ quotation*/          \n" +
                "			 IF(vRefQuoteID IS NOT NULL) THEN    				          \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                 \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND rad.refCustomPartQuoteID IS NULL AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN                 \n" +
                "						IF(vMaterialUnitPrice IS NOT NULL AND vMaterialUnitPrice>0) THEN      \n" +
                "							insert into temp_salesCommission(refCustPackingSlipDetId, partId, unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)          \n" +
                "							SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 1), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType           \n" +
                "							FROM rfq_assy_quotations_additionalcost rad                 \n" +
                "							INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid           \n" +
                "							WHERE rad.rfqAssyquoteid=vRefQuoteID AND  rad.refCustomPartQuoteID IS NULL  AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0;                \n" +
                "  \n" +
                "						END IF;                \n" +
                "					END IF;                \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                 \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id=rad.refCustomPartQuoteID                \n" +
                "						WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1                 \n" +
                "						AND qdf.quoteAttributeType='R' AND qdf.costingType='Material' AND rad.isdeleted=0)>0 THEN                \n" +
                "  \n" +
                "						insert into temp_salesCommission(refCustPackingSlipDetId, partId,unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)          \n" +
                "						SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 2), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, fun_getAssyPIDCodeByID(rac.mfgPNID)          \n" +
                "						  FROM rfq_assy_quotations_additionalcost rad           \n" +
                "						 INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid INNER JOIN rfq_assy_quotations_customparts rac ON rac.id = rad.refCustomPartQuoteID          \n" +
                "						 WHERE rad.rfqAssyquoteid = vRefQuoteID AND qdf.iscommission = 1          \n" +
                "						   AND qdf.quoteAttributeType = 'R' AND qdf.costingType = 'Material' AND rad.isdeleted = 0;          \n" +
                "  \n" +
                "					END IF;                \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                 \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' AND rad.isdeleted=0)>0 THEN                \n" +
                "  \n" +
                "						IF(vOverheadUnitPrice IS NOT NULL AND vOverheadUnitPrice > 0) THEN          \n" +
                "  \n" +
                "							insert into temp_salesCommission(refCustPackingSlipDetId, partId,unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)          \n" +
                "							SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 4), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType           \n" +
                "							FROM rfq_assy_quotations_additionalcost rad             \n" +
                "							INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid           \n" +
                "							WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Overhead' AND rad.isdeleted=0;                \n" +
                "  \n" +
                "						END IF;                \n" +
                "					 END IF;                \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                 \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0)>0 THEN                \n" +
                "  \n" +
                "						IF(vlaborUnitPrce IS NOT NULL AND vlaborUnitPrce>0)THEN        \n" +
                "							insert into temp_salesCommission(refCustPackingSlipDetId, partId,unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)          \n" +
                "							SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 3), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType           \n" +
                "							FROM rfq_assy_quotations_additionalcost rad                 \n" +
                "							INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid           \n" +
                "							WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='Labor' AND rad.isdeleted=0;                \n" +
                "  \n" +
                "						END IF;                \n" +
                "					END IF;                \n" +
                "					IF(SELECT COUNT(rad.quotechargedynamicfieldid) FROM rfq_assy_quotations_additionalcost rad INNER JOIN quotecharges_dynamic_fields_mst qdf                 \n" +
                "						ON qdf.id=rad.quotechargedynamicfieldid WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='All' AND rad.isdeleted=0)>0 THEN                \n" +
                "  \n" +
                "						insert into temp_salesCommission(refCustPackingSlipDetId, partId,unitPrice, refQuoteAttributeId, commissionPercentage, commissionValue, category)          \n" +
                "						SELECT vRefCustPackingSlipDetId , vPartId ,fun_getTotalSalesCommission(rad.quotechargedynamicfieldid, vRefQuoteID, rad.refCustomPartQuoteID, 5), rad.quotechargedynamicfieldid, rad.percentage, rad.amount, qdf.costingType          \n" +
                "						  FROM rfq_assy_quotations_additionalcost rad                 \n" +
                "						 INNER JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id=rad.quotechargedynamicfieldid           \n" +
                "						 WHERE rad.rfqAssyquoteid=vRefQuoteID AND qdf.iscommission=1 AND qdf.quoteAttributeType='R' AND qdf.costingType='All' AND rad.isdeleted=0;          \n" +
                "					END IF;	    \n" +
                "  \n" +
                "  \n" +
                "					update 	temp_salesCommission sc    \n" +
                "					LEFT JOIN quotecharges_dynamic_fields_mst qd ON qd.id = sc.refQuoteAttributeId and qd.isDeleted = 0    \n" +
                "						set sc.poQty = vPOQty, sc.fieldName = qd.fieldName,    \n" +
                "							sc.extendedOrgCommissionValue = (sc.commissionValue*vPOQty),    \n" +
                "							sc.extendedCommissionValue = (sc.commissionValue*vPOQty),    \n" +
                "                            sc.org_commissionPercentage = sc.commissionPercentage,    \n" +
                "                            sc.org_commissionValue= sc.commissionValue;          \n" +
                "  \n" +
                "			END IF;          \n" +
                "		else   -- quote from Part Master    \n" +
                "			/*get sales commission calculations from assembly sales price matrix*/          \n" +
                "			insert into  temp_salesCommission(refCustPackingSlipDetId, partId, unitPrice, refComponentSalesPriceBreakID,     \n" +
                "                commissionPercentage, commissionValue, extendedCommissionValue,    \n" +
                "                org_commissionPercentage, extendedOrgCommissionValue ,org_commissionValue ,    \n" +
                "				category, poQty, fieldName )    \n" +
                "			 select vRefCustPackingSlipDetId , vPartId , a.unitPrice,  a.id refComponentSalesPriceBreakID,          \n" +
                "					a.commissionPercentage, a.commissionValue, (a.commissionValue*vPOQty) extendedCommissionValue,          \n" +
                "					a.commissionPercentage org_commissionPercentage, (a.commissionValue*vPOQty) extendedOrgCommissionValue,          \n" +
                "					a.commissionValue org_commissionValue,          \n" +
                "					category, vPOQty poQty, 'Sales Price Matrix' fieldName          \n" +
                "			  from (select vPrice/*price*/ unitPrice, cp.id, cp.salesCommissionPercentage commissionPercentage,          \n" +
                "							round((vPrice/*price*/ * cp.salesCommissionPercentage)/100,5) commissionValue, cp.mfgPNID,          \n" +
                "							ifnull(cp.salesCommissionNotes,'All') category         \n" +
                "					  from component_price_break_details cp          \n" +
                "					 where cp.`type` = 2          \n" +
                "						and cp.isHistory = 0      \n" +
                "					   and cp.mfgPNID = vPartId          \n" +
                "					   and cp.id = vTurnTimeId          \n" +
                "					   and cp.isDeleted = 0) a;          \n" +
                "		end if;     \n" +
                "     SET i = i + 1;                                      \n" +
                "	END WHILE temp_salesCommissionList;    	    \n" +
                "   -- drop temporary table if exists temp_salesCommission;          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-04-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4476,'2.00','V1','Sproc_GetSalesCommissionDetailsForMultiplePart - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4476:
            allDbChangesArray.push(
                /* **************************** New Script ->15-04-2021  *********************************** */
                "drop procedure if exists Sproc_SaveCustomerInvoiceDetail;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustomerInvoiceDetail`(                                      \n" +
                "	IN pTransType VARCHAR(5),                              \n" +
                "	IN pInvoiceType VARCHAR(1),                                  \n" +
                "	IN pInvoiceID INT,              	                                  \n" +
                "    IN pInvData JSON,                                  \n" +
                "    IN pPackingSlipID INT,                                  \n" +
                "	IN puserID INT,                                            \n" +
                "	IN puserRoleID INT ,                                        \n" +
                "	IN pCustomerInvoiceSystemIDTypeConst VARCHAR(50),      \n" +
                "    IN pSystemId VARCHAR(20)  ,    \n" +
                "    IN pPackingSlipType INT    \n" +
                ")  \n" +
                "BEGIN                                                   \n" +
                "	DECLARE v_maxCurrSystemIDForInv VARCHAR(20) ;                \n" +
                "	DECLARE v_prefix VARCHAR(20);                                        \n" +
                "	DECLARE vTermsDays INT ;                                  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_customerInvoice;                                                                    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customerInvoice AS                                                                              \n" +
                "	SELECT 	*                                                                               \n" +
                "	FROM 	JSON_TABLE(                                       \n" +
                "			pInvData,                                                                              \n" +
                "			\"$[*]\" COLUMNS(    			                                 \n" +
                "				`transType` VARCHAR(5) PATH \"$.transType\",                                  \n" +
                "				`invoiceID` INT PATH \"$.invoiceID\",                                  \n" +
                "				`packingSlipID` INT PATH \"$.packingSlipID\",                                   \n" +
                "                `packingSlipType` INT PATH \"$.packingSlipType\",                                  \n" +
                "				`customerID` INT PATH \"$.customerID\" ,                                                                              \n" +
                "				`status` INT PATH \"$.status\",                                  \n" +
                "				`subStatus` INT PATH \"$.subStatus\",                                  \n" +
                "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",                                                                              \n" +
                "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",                                                                              \n" +
                "				`poDate` DATE PATH \"$.poDate\",                                   \n" +
                "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",                                                                              \n" +
                "				`soDate` DATE PATH \"$.soDate\",                                      \n" +
                "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,                                    \n" +
                "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,                                    \n" +
                "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,                                    \n" +
                "				`invoiceNumber` VARCHAR(50) PATH \"$.invoiceNumber\" ,                                    \n" +
                "				`invoiceDate` DATE PATH \"$.invoiceDate\" ,                                    \n" +
                "				`shippingMethodID` INT PATH \"$.shippingMethodID\",                                  \n" +
                "				`headerComment` TEXT PATH \"$.headerComment\" ,                                  \n" +
                "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,                                  \n" +
                "				`billingAddress` TEXT PATH \"$.billingAddress\" ,                                  \n" +
                "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,                                  \n" +
                "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,                                  \n" +
                "                `billToId` INT PATH \"$.billToId\" ,                                  \n" +
                "				`shipToId` INT PATH \"$.shipToId\" ,                                  \n" +
                "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,                                  \n" +
                "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,                                  \n" +
                "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,                                  \n" +
                "				`termsId` INT PATH \"$.termsId\" ,                                  \n" +
                "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,                              \n" +
                "                `creditMemoNumber` VARCHAR(50) PATH \"$.creditMemoNumber\" ,                                    \n" +
                "				`creditMemoDate` DATE PATH \"$.creditMemoDate\" ,                               \n" +
                "                `refDebitMemoNumber` VARCHAR(50) PATH \"$.refDebitMemoNumber\" ,                                    \n" +
                "				`refDebitMemoDate` DATE PATH \"$.refDebitMemoDate\",                               \n" +
                "                `rmaNumber`  VARCHAR(50) PATH \"$.rmaNumber\" ,              \n" +
                "                `contactPersonId` INT PATH \"$.contactPersonId\"  \n" +
                "			)                                    \n" +
                "		) AS CustInv_JT;                                   \n" +
                "  \n" +
                "	  IF(pInvoiceID IS NULL)THEN                                            \n" +
                "			SELECT  termsDays INTO 	vTermsDays                                  \n" +
                "			FROM genericCategory gc                                   \n" +
                "			WHERE gc.gencCategoryID IN (SELECT temp.termsId FROM temp_customerInvoice temp)                                  \n" +
                "			AND categoryType = 'Payment Terms';                                  \n" +
                "  \n" +
                "			/* get max identity value of 'CustomerInvoiceSystemID' for systemID */                                        \n" +
                "			/* SELECT `maxValue`,prefix INTO v_maxCurrSystemIDForInv,v_prefix                                        \n" +
                "			FROM `identity`                                        \n" +
                "			WHERE `type` = pCustomerInvoiceSystemIDTypeConst ; */                                       \n" +
                "  \n" +
                "  \n" +
                "			INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,                                        \n" +
                "				poNumber,poDate,soNumber,soDate,packingSlipNumber,                                        \n" +
                "				packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                                        \n" +
                "				packingSlipComment,headerComment,sorevision,                                        \n" +
                "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,                                        \n" +
                "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,                                      \n" +
                "				billingAddress,shippingAddress,intermediateAddress ,subStatus, paymentStatus ,                                   \n" +
                "				totalAmount,termsDays, freeOnBoardName, creditMemoNumber,creditMemoDate ,                      \n" +
                "                refDebitMemoNumber,refDebitMemoDate, rmaNumber , billToId,shipToId ,intermediateShipmentId,contactPersonId )                                             \n" +
                "			SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,                                        \n" +
                "					poNumber,poDate,soNumber,soDate,packingSlipNumber,                                        \n" +
                "					packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                                   \n" +
                "					packingSlipComment,headerComment,sorevision,                                        \n" +
                "					freeOnBoardId,puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,                                       \n" +
                "					puserRoleID,'W' , pSystemId, termsID ,salesCommissionTo,                                      \n" +
                "					billingAddress, shippingAddress, intermediateAddress,subStatus , 'PE' ,                                  \n" +
                "					ifnull(totalAmount,0),vTermsDays ,   fun_getFOBById(freeOnBoardId) ,creditMemoNumber,creditMemoDate ,                      \n" +
                "                    refDebitMemoNumber,refDebitMemoDate , rmaNumber  , billToId,shipToId ,intermediateShipmentId ,contactPersonId                    \n" +
                "			FROM temp_customerInvoice ;			                                  \n" +
                "  \n" +
                "		 SET pInvoiceID=LAST_INSERT_ID();                                          \n" +
                "  \n" +
                "		 UPDATE customer_packingslip                                         \n" +
                "		 SET refCustInvoiceID=LAST_INSERT_ID(),packingSlipStatus='A'                                         \n" +
                "		 WHERE id= pPackingSlipID;                                            \n" +
                "  \n" +
                "         IF pPackingSlipID IS NOT NULL THEN                                  \n" +
                "			 INSERT INTO customer_packingslip_det(refCustPackingSlipID,refSalesorderDetid,partId,custPOLineID,                                        \n" +
                "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  extendedPrice,                                      \n" +
                "					shippingNotes,whID,binID,createdBy,updatedBy,createdAt, updatedAt,                                        \n" +
                "					createByRoleId,updateByRoleId,shippingId,reflineID,otherCharges,                                        \n" +
                "					assyDescription,lineID, internalComment, quoteNumber,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,  \n" +
                "                    refRFQGroupID,refRFQQtyTurnTimeID)                                            \n" +
                "			  SELECT LAST_INSERT_ID(),refSalesorderDetid,partId,custPOLineID,                                        \n" +
                "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  (shipQty * unitPrice),                                     \n" +
                "					shippingNotes,whID,binID,puserID,puserID,  fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),                                      \n" +
                "					puserRoleID,puserRoleID,shippingId,reflineID,otherCharges,                                        \n" +
                "					assyDescription, lineID, internalComment ,quoteNumber,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,  \n" +
                "                    refRFQGroupID,refRFQQtyTurnTimeID                                       \n" +
                "			FROM customer_packingslip_det                                         \n" +
                "			WHERE refCustPackingSlipID= pPackingSlipID                                         \n" +
                "			AND isDeleted = 0;          \n" +
                "  \n" +
                "            /*IF pPackingSlipType = 2 THEn -- PO/SO INV    \n" +
                "				INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,	unitPrice, refQuoteAttributeId,        \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,        \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,        \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)        \n" +
                "				select cpd.id refCustPackingSlipDetID,	sca.unitPrice, sca.refQuoteAttributeId,        \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,        \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,        \n" +
                "							sca.org_unitPrice, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID         \n" +
                "					From salesorderdet_commission_attribute sca        \n" +
                "					join customer_packingslip_det cpd on cpd.refSalesorderDetid=sca.refSalesorderDetid and cpd.isDeleted = 0          \n" +
                "					and cpd.refCustPackingSlipID =  pInvoiceID;          \n" +
                "             ELSE*/  \n" +
                "             IF pPackingSlipType = 1  OR  pPackingSlipType = 2 THEN -- MISC packing slip INV  & PO/SO INV  \n" +
                "					-- SP to generate line wise sales commission.    \n" +
                "                    CALL Sproc_GetSalesCommissionDetailsForMultiplePart(pInvoiceID);    \n" +
                "  \n" +
                "                    INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,	unitPrice, refQuoteAttributeId,        \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,        \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,        \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)        \n" +
                "					select sca.refCustPackingSlipDetID,	sca.unitPrice, sca.refQuoteAttributeId,        \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,        \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,        \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID         \n" +
                "					From temp_salesCommission sca     \n" +
                "					join customer_packingslip_det cpd on cpd.id = sca.refCustPackingSlipDetID and cpd.isDeleted = 0          \n" +
                "					and cpd.refCustPackingSlipID =  pInvoiceID;    \n" +
                "             END IF;           \n" +
                "		END IF;                                  \n" +
                "		/*update maxvalue + 1 as 'CustomerInvoiceSystemID' for invoice systemID */                                         \n" +
                "		UPDATE `identity`                                        \n" +
                "		SET `maxValue` =  CAST(substring_index(pSystemId,IF(pTransType='I','CINV','CCM'),-1) as UNSIGNED) + 1                                        \n" +
                "		WHERE `type` = pCustomerInvoiceSystemIDTypeConst ;        \n" +
                "  \n" +
                "	  ELSE                                        \n" +
                "  \n" +
                "		IF pInvoiceType = 'I' AND pTransType = 'I' THEN                                  \n" +
                "			UPDATE customer_packingslip cp                                  \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                                  \n" +
                "            SET cp.invoiceDate= tci.invoiceDate,                                  \n" +
                "				cp.`status`= tci.status,  			                                        \n" +
                "				cp.subStatus = tci.subStatus,                                  \n" +
                "                cp.headerComment= tci.headerComment,                                  \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                                  \n" +
                "				cp.totalAmount = ifnull(tci.totalAmount,0) ,                        \n" +
                "                cp.updatedAt = fun_DatetimetoUTCDateTime(),                        \n" +
                "                cp.updatedBy = puserID,                        \n" +
                "                cp.updateByRoleId = puserRoleID  ,              \n" +
                "                cp.billingAddress= tci.billingAddress,                                  \n" +
                "				cp.shippingAddress= tci.shippingAddress,                                  \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,              \n" +
                "                cp.contactPersonId = tci.contactPersonId,              \n" +
                "                cp.billToId = tci.billToId,                    \n" +
                "                cp.shipToId  = tci.shipToId,                    \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId  \n" +
                "			WHERE id=pInvoiceID;                                     \n" +
                "        ELSE                                    \n" +
                "        # in case of tariff invoice & credit memo update all other field                                  \n" +
                "			UPDATE customer_packingslip  cp                                    \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                                  \n" +
                "			SET	cp.status= tci.status,                                  \n" +
                "				cp.subStatus= tci.subStatus,                                  \n" +
                "				cp.poNumber= tci.poNumber,                                  \n" +
                "				cp.poDate= tci.poDate,                                  \n" +
                "				cp.soNumber= tci.soNumber,                                  \n" +
                "				cp.soDate= tci.soDate,                                  \n" +
                "				cp.packingSlipNumber= tci.packingSlipNumber,                                  \n" +
                "				cp.packingSlipDate= tci.packingSlipDate,                                  \n" +
                "				cp.invoiceDate= tci.invoiceDate,                                  \n" +
                "				cp.shippingMethodID= tci.shippingMethodID,                                  \n" +
                "				cp.headerComment= tci.headerComment,                                  \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                                  \n" +
                "				cp.billingAddress= tci.billingAddress,                                  \n" +
                "				cp.shippingAddress= tci.shippingAddress,                                  \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,                                  \n" +
                "				cp.totalAmount= ifnull(tci.totalAmount,0),                                  \n" +
                "				cp.freeOnBoardId= tci.freeOnBoardId,                                  \n" +
                "				cp.termsId= tci.termsId,                                  \n" +
                "				cp.salesCommissionTo= tci.salesCommissionTo ,                              \n" +
                "                cp.refDebitMemoNumber = tci.refDebitMemoNumber,                              \n" +
                "                cp.refDebitMemoDate = tci.refDebitMemoDate,                        \n" +
                "                cp.updatedAt = fun_DatetimetoUTCDateTime(),                        \n" +
                "                cp.updatedBy = puserID,                        \n" +
                "                cp.updateByRoleId = puserRoleID,                      \n" +
                "                cp.rmaNumber= tci.rmaNumber,                    \n" +
                "                cp.billToId = tci.billToId,                    \n" +
                "                cp.shipToId  = tci.shipToId,                    \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId ,                  \n" +
                "                cp.invoiceNumber = tci.invoiceNumber ,              \n" +
                "                cp.contactPersonId = tci.contactPersonId  \n" +
                "			 WHERE cp.id = pInvoiceID;                                     \n" +
                "  \n" +
                "            END IF;                                  \n" +
                "  \n" +
                "  \n" +
                "	  END IF;                                           \n" +
                "  \n" +
                "	  SELECT pInvoiceID invoiceID;                                            \n" +
                "       -- detail Id                                    \n" +
                "      SELECT id  detId ,refSalesorderDetId , reflineID                                    \n" +
                "      FROM customer_packingslip_det                                     \n" +
                "      WHERE  refCustPackingSlipID = pInvoiceID                                     \n" +
                "      AND isDeleted = 0;                                    \n" +
                "	  DROP TEMPORARY TABLE IF EXISTS temp_part_data ;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  15-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4477,'2.00','V1','Sproc_SaveCustomerInvoiceDetail - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4477:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-04-2021 *********************************** */
                "update page_detail  \n" +
                "  set displayMenuName = 'Supplier RMA Packing Slip'  \n" +
                "where pageName = 'Manage Supplier RMA';  \n" +
                /* **************************** Add Script Version ->15-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4478,'2.00','V1','User Story 31842: Other charges change in Credit and Debit memo - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4478:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-04-2021 *********************************** */
                "drop procedure if exists `Sproc_SaveInvoiceAndInvoiceLineDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_SaveInvoiceAndInvoiceLineDetail`(  \n" +
                "	IN pInvoiceDetail JSON,  \n" +
                "	IN pPackingSlipId INT,  \n" +
                "	IN pSystemId VARCHAR(20),  \n" +
                "	IN pUserId VARCHAR(50),  \n" +
                "	IN pUserRoleId VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountOfInvoiceDetail INT;  \n" +
                "	DECLARE v_CountOfInvoiceLineDetail INT;  \n" +
                "	DECLARE v_IdOfInvoice INT;  \n" +
                "	/*DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "  \n" +
                "	START TRANSACTION;  */  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Detail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Invoice_Detail AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pInvoiceDetail,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				poNumber VARCHAR(50) PATH \"$.poNumber\",  \n" +
                "				poDate DATE PATH \"$.poDate\",  \n" +
                "				mfgCodeID INT PATH \"$.mfgCodeID\",  \n" +
                "				supplierSONumber VARCHAR(50) PATH \"$.supplierSONumber\",  \n" +
                "				packingSlipNumber VARCHAR(50) PATH \"$.packingSlipNumber\",  \n" +
                "				packingSlipDate DATE PATH \"$.packingSlipDate\",  \n" +
                "				invoiceNumber VARCHAR(50) PATH \"$.invoiceNumber\",  \n" +
                "				invoiceDate DATE PATH \"$.invoiceDate\",  \n" +
                "				creditMemoNumber VARCHAR(50) PATH \"$.creditMemoNumber\",  \n" +
                "				creditMemoDate DATE PATH \"$.creditMemoDate\",  \n" +
                "				debitMemoNumber VARCHAR(50) PATH \"$.debitMemoNumber\",  \n" +
                "				debitMemoDate DATE PATH \"$.debitMemoDate\",  \n" +
                "				receiptDate DATE PATH \"$.receiptDate\",  \n" +
                "				receiptType VARCHAR(1) PATH \"$.receiptType\",  \n" +
                "				`status` VARCHAR(5) PATH \"$.status\",  \n" +
                "				applyDate DATE PATH \"$.applyDate\",  \n" +
                "				invoiceTotalDue DECIMAL(18,8) PATH \"$.invoiceTotalDue\",  \n" +
                "				isTariffInvoice TINYINT PATH \"$.isTariffInvoice\",  \n" +
                "				refPackingSlipId INT PATH \"$.refPackingSlipId\",  \n" +
                "				paymentTermsID INT PATH \"$.paymentTermsID\",  \n" +
                "				termsDays INT PATH \"$.termsDays\",  \n" +
                "				creditMemoType VARCHAR(5) PATH \"$.creditMemoType\",  \n" +
                "                invoiceRequireManagementApproval INT PATH \"$.invoiceRequireManagementApproval\",  \n" +
                "                internalRemark  VARCHAR(1000) PATH \"$.internalRemark\"  \n" +
                "			)  \n" +
                "		) AS Invoice_Detail_JT;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Line_Detail;  \n" +
                "		CREATE TEMPORARY TABLE temp_Invoice_Line_Detail  \n" +
                "		(  \n" +
                "			packingSlipSerialNumber VARCHAR(50),  \n" +
                "			nickname VARCHAR(50),  \n" +
                "			partID INT,  \n" +
                "			refSupplierPartId INT,  \n" +
                "			scanLabel VARCHAR(1000),  \n" +
                "			receivedQty DECIMAL(18,8),  \n" +
                "			packingSlipQty DECIMAL(18,8),  \n" +
                "			binID INT,  \n" +
                "			warehouseID INT,  \n" +
                "			parentWarehouseID INT,  \n" +
                "			invoicePrice DECIMAL(18,8),  \n" +
                "			purchasePrice DECIMAL(18,8),  \n" +
                "			disputedPrice DECIMAL(18,8),  \n" +
                "			approveNote VARCHAR(1000),  \n" +
                "			otherCharges INT,  \n" +
                "			`status` VARCHAR(1),  \n" +
                "			extendedPrice DECIMAL(18,8),  \n" +
                "			refCreditDebitInvoiceNo INT,  \n" +
                "			difference DECIMAL(18,8),  \n" +
                "			umidCreated TINYINT,  \n" +
                "			poReleaseNumber VARCHAR(1000),  \n" +
                "			packagingID INT,  \n" +
                "			receivedStatus VARCHAR(2),  \n" +
                "			remark LONGTEXT  \n" +
                "		);  \n" +
                "  \n" +
                "		INSERT INTO temp_Invoice_Line_Detail (  \n" +
                "			packingSlipSerialNumber,  \n" +
                "			nickname,  \n" +
                "			partID,  \n" +
                "			refSupplierPartId,  \n" +
                "			scanLabel,  \n" +
                "			receivedQty,  \n" +
                "			packingSlipQty,  \n" +
                "			binID,  \n" +
                "			warehouseID,  \n" +
                "			parentWarehouseID,  \n" +
                "			invoicePrice,  \n" +
                "			disputedPrice,  \n" +
                "			approveNote,  \n" +
                "			otherCharges,  \n" +
                "			`status`,  \n" +
                "			extendedPrice,  \n" +
                "			refCreditDebitInvoiceNo,  \n" +
                "			difference,  \n" +
                "			umidCreated,  \n" +
                "			poReleaseNumber,  \n" +
                "			packagingID,  \n" +
                "			receivedStatus,  \n" +
                "			remark  \n" +
                "		)  \n" +
                "		SELECT  packingSlipSerialNumber,  \n" +
                "			nickname,  \n" +
                "			partID,  \n" +
                "			refSupplierPartId,  \n" +
                "			scanLabel,  \n" +
                "			receivedQty,  \n" +
                "			packingSlipQty,  \n" +
                "			binID,  \n" +
                "			warehouseID,  \n" +
                "			parentWarehouseID,  \n" +
                "			invoicePrice,  \n" +
                "			disputedPrice,  \n" +
                "			approveNote,  \n" +
                "			otherCharges,  \n" +
                "			`status`,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN (packingSlipQty IS NOT NULL AND invoicePrice IS NOT NULL) THEN  \n" +
                "						(packingSlipQty * invoicePrice)  \n" +
                "					ELSE  \n" +
                "						NULL  \n" +
                "				END  \n" +
                "			),  \n" +
                "			refCreditDebitInvoiceNo,  \n" +
                "			difference,  \n" +
                "			umidCreated,  \n" +
                "			poReleaseNumber,  \n" +
                "			packagingID,  \n" +
                "			receivedStatus,  \n" +
                "			remark  \n" +
                "		FROM 	packing_slip_material_receive_det  \n" +
                "		WHERE 	isDeleted = 0  \n" +
                "				AND refPackingSlipMaterialRecID = pPackingSlipId;  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_CountOfInvoiceDetail FROM temp_Invoice_Detail;  \n" +
                "  \n" +
                "		IF (v_CountOfInvoiceDetail > 0) THEN  \n" +
                "			INSERT INTO packing_slip_material_receive (systemId, poNumber, poDate, mfgCodeID, supplierSONumber, packingSlipNumber, packingSlipDate, invoiceNumber, invoiceDate,  \n" +
                "						creditMemoNumber, creditMemoDate, debitMemoNumber, debitMemoDate, receiptDate, receiptType, `status`, applyDate, invoiceTotalDue, isTariffInvoice,  \n" +
                "                        creditMemoType, createdBy, updatedBy, createByRoleId, updateByRoleId, paymentTermsID,termsDays, invoiceRequireManagementApproval, internalRemark, invoiceApprovalStatus)  \n" +
                "			SELECT 	pSystemId,  \n" +
                "				(CASE WHEN (poNumber IS NULL OR poNumber = \"\") THEN NULL ELSE poNumber END),                 \n" +
                "				(CASE WHEN (poDate IS NULL OR poDate = \"0000-00-00\") THEN NULL ELSE poDate END),                \n" +
                "				mfgCodeID,                 \n" +
                "				(CASE WHEN (supplierSONumber IS NULL OR supplierSONumber = \"\") THEN NULL ELSE supplierSONumber END),                 \n" +
                "				packingSlipNumber, packingSlipDate,                 \n" +
                "				(CASE WHEN (invoiceNumber IS NULL OR invoiceNumber = \"\") THEN NULL ELSE invoiceNumber END),                 \n" +
                "				(CASE WHEN (invoiceDate IS NULL OR invoiceDate = \"0000-00-00\") THEN NULL ELSE invoiceDate END),                \n" +
                "				(CASE WHEN (creditMemoNumber IS NULL OR creditMemoNumber = \"\") THEN NULL ELSE creditMemoNumber END),                 \n" +
                "				(CASE WHEN (creditMemoDate IS NULL OR creditMemoDate = \"0000-00-00\") THEN NULL ELSE creditMemoDate END),            \n" +
                "				(CASE WHEN (debitMemoNumber IS NULL OR debitMemoNumber = \"\") THEN NULL ELSE debitMemoNumber END),                 \n" +
                "				(CASE WHEN (debitMemoDate IS NULL OR debitMemoDate = \"0000-00-00\") THEN NULL ELSE debitMemoDate END),                 \n" +
                "				receiptDate, receiptType,           \n" +
                "				`status`, -- (case when invoiceRequireManagementApproval = 0 then `status` else 'I' end), /*status*/          \n" +
                "				applyDate, invoiceTotalDue, isTariffInvoice,                 \n" +
                "				(CASE WHEN creditMemoType IS NULL OR creditMemoType = \"\" THEN NULL ELSE creditMemoType END),                \n" +
                "				pUserId, pUserId, pUserRoleId, pUserRoleId, paymentTermsID, termsDays, invoiceRequireManagementApproval, internalRemark,          \n" +
                "				(CASE WHEN invoiceRequireManagementApproval = 0 THEN 3 ELSE 2 END) /*invoiceApprovalStatus*/          \n" +
                "			FROM 	temp_Invoice_Detail;	                                    \n" +
                "  \n" +
                "			SELECT LAST_INSERT_ID() INTO v_IdOfInvoice;                                    \n" +
                "  \n" +
                "			UPDATE 	packing_slip_material_receive                                    \n" +
                "			SET 	refPackingSlipNumberForInvoice = v_IdOfInvoice,                     \n" +
                "				`status` = (CASE WHEN receiptType = 'P' THEN 'IR' WHEN receiptType = 'R' THEN 'CR' ELSE NULL END)                     \n" +
                "			WHERE	id = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1)                                    \n" +
                "					AND isDeleted = 0;                                    \n" +
                "		END IF;                                    \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_CountOfInvoiceLineDetail FROM temp_Invoice_Line_Detail;                                    \n" +
                "		IF (v_CountOfInvoiceLineDetail > 0) THEN                                    \n" +
                "			INSERT INTO packing_slip_material_receive_det (refPackingSlipMaterialRecID, packingSlipSerialNumber, nickname, partID, refSupplierPartId, scanLabel, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, purchasePrice, disputedPrice, otherCharges, `status`, extendedPrice, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, createdBy, updatedBy, createByRoleId, updateByRoleId)                                    \n" +
                "			SELECT 	v_IdOfInvoice, packingSlipSerialNumber,                              \n" +
                "				nickname,                              \n" +
                "				(CASE WHEN ( partID > 0) THEN  partID ELSE NULL END),                                \n" +
                "				(CASE WHEN ( refSupplierPartId > 0) THEN  refSupplierPartId ELSE NULL END),                                \n" +
                "				scanLabel,                                              \n" +
                "				receivedQty,                              \n" +
                "				packingSlipQty,                              \n" +
                "				(CASE WHEN ( binID > 0) THEN  binID ELSE NULL END),                                \n" +
                "				(CASE WHEN ( warehouseID > 0) THEN  warehouseID ELSE NULL END),                                \n" +
                "				(CASE WHEN ( parentWarehouseID < 0) THEN  parentWarehouseID ELSE NULL END),                                \n" +
                "				invoicePrice,                              \n" +
                "				purchasePrice,                              \n" +
                "				disputedPrice,                              \n" +
                "				otherCharges,                             \n" +
                "				`status`,                              \n" +
                "				extendedPrice,                              \n" +
                "				(CASE WHEN ( refCreditDebitInvoiceNo > 0) THEN  refCreditDebitInvoiceNo ELSE NULL END),                                \n" +
                "				difference,                              \n" +
                "				umidCreated,                              \n" +
                "				poReleaseNumber,                              \n" +
                "				(CASE WHEN ( packagingID > 0) THEN  packagingID ELSE NULL END),                                \n" +
                "				receivedStatus,                           \n" +
                "				remark,                          \n" +
                "				pUserId,                              \n" +
                "				pUserId,                        \n" +
                "				pUserRoleId,                        \n" +
                "				pUserRoleId                                    \n" +
                "			FROM 	temp_Invoice_Line_Detail;	                                    \n" +
                "		END IF;                                    \n" +
                "  \n" +
                "	-- COMMIT;                                    \n" +
                "	SELECT v_IdOfInvoice AS PackingSlipId;                                    \n" +
                "END;  \n" +
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN                   \n" +
                "	DECLARE v_PackingSlipReceiptType VARCHAR(5);               \n" +
                "	DECLARE v_CreditMemoType VARCHAR(5);               \n" +
                "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);               \n" +
                "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);               \n" +
                "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);               \n" +
                "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);          \n" +
                "	DECLARE PORLINE_OTY INT;              \n" +
                "	DECLARE vTotalQty INT;                \n" +
                "	SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;                \n" +
                "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;     \n" +
                "	IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN                  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID AND poLineWorkingStatus!='C';                \n" +
                "	ELSE                   \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;             \n" +
                "	END IF;          \n" +
                "  \n" +
                "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),                \n" +
                "		(               \n" +
                "			CASE               \n" +
                "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'               \n" +
                "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'               \n" +
                "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'               \n" +
                "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'               \n" +
                "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'               \n" +
                "				ELSE NULL               \n" +
                "			END               \n" +
                "		),               \n" +
                "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),                \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN                \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN               \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),               \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);               \n" +
                "		END IF;               \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR PN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN                 \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN               \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),               \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);               \n" +
                "		END IF;               \n" +
                "  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier PN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN                     \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN               \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),                \n" +
                "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),               \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                  \n" +
                "		END IF;                      \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),                \n" +
                "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN                   \n" +
                "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN               \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(FORMAT(OLD.invoicePrice, 5) AS CHAR), CAST(FORMAT(new.invoicePrice, 5) AS CHAR),               \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "		END IF;               \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN                 \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN               \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(FORMAT(OLD.purchasePrice, 5) AS CHAR), CAST(FORMAT(new.purchasePrice, 5) AS CHAR),               \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "		END IF;               \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',               \n" +
                "		CAST(               \n" +
                "			(               \n" +
                "				CASE                \n" +
                "					WHEN old.`status` = 'P' THEN 'Pending'               \n" +
                "					WHEN old.`status` = 'A' THEN 'Approved'               \n" +
                "					WHEN old.`status` = 'D' THEN 'Disapproved'                \n" +
                "				END               \n" +
                "			)               \n" +
                "		AS CHAR),               \n" +
                "		CAST(               \n" +
                "			(               \n" +
                "				CASE                \n" +
                "					WHEN new.`status` = 'P' THEN 'Pending'               \n" +
                "					WHEN new.`status` = 'A' THEN 'Approved'               \n" +
                "					WHEN new.`status` = 'D' THEN 'Disapproved'                \n" +
                "				END               \n" +
                "			)               \n" +
                "		AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN                    \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN               \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),                \n" +
                "			(CASE WHEN OLD.extendedPrice > 0 THEN CAST(FORMAT(OLD.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST((FORMAT(OLD.extendedPrice, 2) * -1) AS CHAR), ')') END),           \n" +
                "			(CASE WHEN new.extendedPrice > 0 THEN CAST(FORMAT(new.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST((FORMAT(new.extendedPrice, 2) * -1) AS CHAR), ')') END),           \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "		END IF;               \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',            \n" +
                "		(CASE WHEN OLD.extendedReceivedPrice > 0 THEN CAST(FORMAT(OLD.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST((FORMAT(OLD.extendedReceivedPrice, 2) * -1) AS CHAR), ')') END),           \n" +
                "		(CASE WHEN new.extendedReceivedPrice > 0 THEN CAST(FORMAT(new.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST((FORMAT(new.extendedReceivedPrice, 2) * -1)AS CHAR), ')') END),           \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(FORMAT(OLD.difference, 5) AS CHAR), CAST(FORMAT(new.difference, 5) AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(CAST(OLD.differenceQty AS SIGNED) AS CHAR), CAST(CAST(new.differenceQty AS SIGNED) AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',               \n" +
                "		CAST(               \n" +
                "			(               \n" +
                "				CASE                \n" +
                "					WHEN old.receivedStatus = 'P' THEN 'Pending'               \n" +
                "					WHEN old.receivedStatus = 'A' THEN 'Accepted'               \n" +
                "					WHEN old.receivedStatus = 'R' THEN 'Rejected'                \n" +
                "				END               \n" +
                "			)               \n" +
                "		AS CHAR),               \n" +
                "		CAST(               \n" +
                "			(               \n" +
                "				CASE                \n" +
                "					WHEN new.receivedStatus = 'P' THEN 'Pending'               \n" +
                "					WHEN new.receivedStatus = 'A' THEN 'Accepted'               \n" +
                "					WHEN new.receivedStatus = 'R' THEN 'Rejected'                \n" +
                "				END               \n" +
                "			)               \n" +
                "		AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF v_PackingSlipReceiptType = 'R' THEN               \n" +
                "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN               \n" +
                "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;               \n" +
                "		ELSE               \n" +
                "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;               \n" +
                "		END IF;               \n" +
                "  \n" +
                "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN               \n" +
                "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;               \n" +
                "		ELSE               \n" +
                "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;               \n" +
                "		END IF;               \n" +
                "  \n" +
                "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN               \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;               \n" +
                "		ELSE               \n" +
                "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;               \n" +
                "		END IF;               \n" +
                "  \n" +
                "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN               \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;               \n" +
                "		ELSE               \n" +
                "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;               \n" +
                "		END IF;               \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN                         \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),               \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "		END IF;               \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN                         \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),               \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "		END IF;               \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,                \n" +
                "		CONCAT(               \n" +
                "			(               \n" +
                "				CASE               \n" +
                "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '               \n" +
                "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '               \n" +
                "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '               \n" +
                "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '               \n" +
                "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '               \n" +
                "					ELSE 'Line# '               \n" +
                "				END               \n" +
                "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'               \n" +
                "		),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.updatedBy,0) != IFNULL(NEW.updatedBy,0) THEN                       \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                         \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Modified By', CAST(fun_getUserNameByID(OLD.updatedBy) AS CHAR), CAST(fun_getUserNameByID(new.updatedBy) AS CHAR),             \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                       \n" +
                "	END IF;           \n" +
                "  \n" +
                "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN                       \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                         \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),             \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                       \n" +
                "	END IF;           \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->15-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4479,'2.00','V1','User Story 31842: Other charges change in Credit and Debit memo - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4479:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-04-2021 *********************************** */
                "drop procedure if exists `Sproc_CheckAndReGetPackingSlipLineDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_CheckAndReGetPackingSlipLineDetail`(  \n" +
                "	IN pInvoiceId INT,  \n" +
                "	IN pPackingSlipId INT,                                            \n" +
                "	IN pAction VARCHAR(50),                        \n" +
                "	IN pUserId VARCHAR(50),            \n" +
                "	IN pUserRoleId VARCHAR(50)                          \n" +
                ")  \n" +
                "BEGIN                           \n" +
                "	DECLARE v_InsertCount INT;                      \n" +
                "	DECLARE v_DeleteCount INT;             \n" +
                "	DECLARE v_UpdateCount INT;                 \n" +
                "	DECLARE v_TotalDetailCount INT;                \n" +
                "	DECLARE v_PendingCount INT;                \n" +
                "	DECLARE v_DisapproveCount INT;                  \n" +
                "	DECLARE v_ApproveCount INT;                  \n" +
                "	DECLARE v_DetailLineStatus VARCHAR(5);                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_ReGet_Validation_Error;  \n" +
                "	CREATE TEMPORARY TABLE temp_ReGet_Validation_Error  \n" +
                "	(  \n" +
                "		IsSuccess BOOLEAN,                                      \n" +
                "		NoOfLineInsert INT,                      \n" +
                "		NoOfLineDelete INT,          \n" +
                "		NoOfLineUpdate INT                      \n" +
                "	);                         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Insert_Packing_Slip_Record;                                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Insert_Packing_Slip_Record AS                        \n" +
                "	SELECT 	*                       \n" +
                "	FROM 	packing_slip_material_receive_det                       \n" +
                "	WHERE 	refPackingSlipMaterialRecID = pPackingSlipId                       \n" +
                "			AND deletedAt IS NULL                      \n" +
                "			AND packingSlipSerialNumber < 1000  \n" +
                "			AND packingSlipSerialNumber NOT IN (                      \n" +
                "				SELECT 	packingSlipSerialNumber                       \n" +
                "				FROM 	packing_slip_material_receive_det                       \n" +
                "				WHERE 	refPackingSlipMaterialRecID = pInvoiceId                      \n" +
                "						AND packingSlipSerialNumber < 1000                      \n" +
                "						AND deletedAt IS NULL                      \n" +
                "			);                      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Delete_Packing_Slip_Record;                                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Delete_Packing_Slip_Record AS                      \n" +
                "	SELECT 	*                       \n" +
                "	FROM 	packing_slip_material_receive_det                       \n" +
                "	WHERE 	refPackingSlipMaterialRecID = pInvoiceId                       \n" +
                "			AND deletedAt IS NULL                      \n" +
                "			AND packingSlipSerialNumber < 1000  \n" +
                "			AND packingSlipSerialNumber NOT IN (                      \n" +
                "				SELECT 	packingSlipSerialNumber                       \n" +
                "				FROM 	packing_slip_material_receive_det                       \n" +
                "				WHERE 	refPackingSlipMaterialRecID = pPackingSlipId                      \n" +
                "						AND packingSlipSerialNumber < 1000                      \n" +
                "						AND deletedAt IS NULL                      \n" +
                "			);           \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Update_Packing_Slip_Record;                                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Update_Packing_Slip_Record AS          \n" +
                "	SELECT 		ps.id packingSlipId,           \n" +
                "			si.id invoiceId,           \n" +
                "			ps.packingSlipSerialNumber,           \n" +
                "			si.packingSlipSerialNumber invoicePackingSlipSerialNumber,           \n" +
                "			si.orderedQty,           \n" +
                "			si.orderedQty invoiceOrderedQty,           \n" +
                "			ps.receivedQty,          \n" +
                "			si.receivedQty invoiceReceivedQty,           \n" +
                "			ps.packingSlipQty,          \n" +
                "			si.packingSlipQty invoicePackingSlipQty,          \n" +
                "			si.invoicePrice,       \n" +
                "			ps.packagingID,            \n" +
                "			si.packagingID invoicePackagingID,          \n" +
                "			ps.nickname,           \n" +
                "			si.nickname invoiceNickname,           \n" +
                "			ps.receivedStatus,           \n" +
                "			si.receivedStatus invoiceReceivedStatus,           \n" +
                "			ps.remark,          \n" +
                "			si.remark invoiceRemark,           \n" +
                "			(CASE WHEN ps.packingSlipSerialNumber != si.packingSlipSerialNumber THEN 1 ELSE 0 END) isSerialNumberUpdate,          \n" +
                "			(CASE WHEN ps.orderedQty != si.orderedQty THEN 1 ELSE 0 END) isOrderedQtyUpdate,          \n" +
                "			(CASE WHEN ps.receivedQty != si.receivedQty THEN 1 ELSE 0 END) isReceivedQtyUpdate,          \n" +
                "			(CASE WHEN ps.packingSlipQty != si.packingSlipQty THEN 1 ELSE 0 END) isPackingSlipQtyUpdate,          \n" +
                "			(CASE WHEN ps.packagingID != si.packagingID THEN 1 ELSE 0 END) isPackagingIDUpdate,          \n" +
                "			(CASE WHEN ps.nickname != si.nickname THEN 1 ELSE 0 END) isNicknameUpdate,          \n" +
                "			(CASE WHEN ps.receivedStatus != si.receivedStatus THEN 1 ELSE 0 END) isReceivedStatusUpdate,          \n" +
                "			(CASE WHEN ps.remark != si.remark THEN 1 ELSE 0 END) isRemarkUpdate          \n" +
                "	FROM 		packing_slip_material_receive_det ps           \n" +
                "	INNER JOIN 	packing_slip_material_receive_det si ON si.packingSlipSerialNumber = ps.packingSlipSerialNumber AND si.deletedAt IS NULL AND si.packingSlipSerialNumber < 1000          \n" +
                "	WHERE 		ps.refPackingSlipMaterialRecID = pPackingSlipId AND si.refPackingSlipMaterialRecID = pInvoiceId           \n" +
                "				AND ps.deletedAt IS NULL;		          \n" +
                "  \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO v_InsertCount FROM temp_Insert_Packing_Slip_Record;                      \n" +
                "	SELECT 	COUNT(1) INTO v_DeleteCount FROM temp_Delete_Packing_Slip_Record;             \n" +
                "  \n" +
                "	IF ((SELECT receiptType FROM packing_slip_material_receive WHERE id = pPackingSlipId AND isDeleted = 0) = 'R') THEN    \n" +
                "		SET v_UpdateCount = 0;    \n" +
                "	ELSE    \n" +
                "		SELECT 	COUNT(1) INTO v_UpdateCount           \n" +
                "		FROM 	temp_Update_Packing_Slip_Record           \n" +
                "		WHERE 	(          \n" +
                "				isSerialNumberUpdate = 1 OR           \n" +
                "				isOrderedQtyUpdate = 1 OR           \n" +
                "				isReceivedQtyUpdate = 1 OR           \n" +
                "				isPackingSlipQtyUpdate = 1 OR           \n" +
                "				isPackagingIDUpdate = 1 OR          \n" +
                "				isNicknameUpdate = 1 OR          \n" +
                "				isReceivedStatusUpdate = 1 OR          \n" +
                "				isRemarkUpdate = 1           \n" +
                "			);                   \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (IFNULL(v_InsertCount, 0) = 0 AND IFNULL(v_DeleteCount, 0) = 0 AND IFNULL(v_UpdateCount, 0) = 0) THEN                      \n" +
                "		INSERT INTO temp_ReGet_Validation_Error (IsSuccess, NoOfLineInsert, NoOfLineDelete, NoOfLineUpdate) VALUES(TRUE, 0, 0, 0);                      \n" +
                "	ELSE                      \n" +
                "		IF (pAction = 'GetNotification') THEN                      \n" +
                "			INSERT INTO temp_ReGet_Validation_Error (IsSuccess, NoOfLineInsert, NoOfLineDelete, NoOfLineUpdate) VALUES(FALSE, v_InsertCount, v_DeleteCount, v_UpdateCount);                      \n" +
                "		END IF;                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF (IFNULL(v_InsertCount, 0) > 0) THEN                      \n" +
                "		IF (pAction = 'ReGet') THEN                      \n" +
                "			INSERT INTO packing_slip_material_receive_det (refPackingSlipMaterialRecID, packingSlipSerialNumber, nickname, partID, refSupplierPartId, scanLabel, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, disputedPrice, otherCharges, extendedPrice, `status`, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, createdBy, updatedBy, createByRoleId, updateByRoleId)                        \n" +
                "			SELECT 	pInvoiceId, packingSlipSerialNumber, nickname, partID, refSupplierPartId, scanLabel, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, disputedPrice, otherCharges,     \n" +
                "				(    \n" +
                "					CASE     \n" +
                "						WHEN invoicePrice IS NOT NULL AND packingSlipQty IS NOT NULL THEN     \n" +
                "							invoicePrice * packingSlipQty    \n" +
                "						ELSE NULL    \n" +
                "					END    \n" +
                "				),    \n" +
                "				`status`, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, pUserId, pUserId, pUserRoleId, pUserRoleId                        \n" +
                "			FROM 	temp_Insert_Packing_Slip_Record;                  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_TotalDetailCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId;		                \n" +
                "			SELECT COUNT(1) INTO v_PendingCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'P';                \n" +
                "			SELECT COUNT(1) INTO v_DisapproveCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'D';		                \n" +
                "			SELECT COUNT(1) INTO v_ApproveCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'A';		                \n" +
                "  \n" +
                "			IF (v_DisapproveCount > 0) THEN                \n" +
                "				SET v_DetailLineStatus = 'I';                \n" +
                "			ELSEIF (v_PendingCount > 0) THEN                \n" +
                "				SET v_DetailLineStatus = 'W';                \n" +
                "			ELSEIF (v_ApproveCount > 0 AND v_ApproveCount = v_TotalDetailCount) THEN                \n" +
                "				SET v_DetailLineStatus = 'A';                \n" +
                "			ELSE                \n" +
                "				SET v_DetailLineStatus = 'W';                \n" +
                "			END IF;                \n" +
                "  \n" +
                "			UPDATE 	packing_slip_material_receive                 \n" +
                "			SET 	`status` = v_DetailLineStatus                 \n" +
                "			WHERE 	receiptType = 'I'                 \n" +
                "					AND deletedAt IS NULL                 \n" +
                "					AND id = pInvoiceId;        \n" +
                "  \n" +
                "			/*UPDATE 	packing_slip_material_receive                 \n" +
                "			SET 	`status` = 'W'                 \n" +
                "			WHERE 	receiptType = 'I'                 \n" +
                "					AND deletedAt IS NULL                 \n" +
                "					AND id = pInvoiceId; */                   \n" +
                "		END IF;                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF (IFNULL(v_DeleteCount, 0) > 0) THEN                      \n" +
                "		IF (pAction = 'ReGet') THEN                      \n" +
                "			UPDATE 	packing_slip_material_receive_det                      \n" +
                "			SET 	updatedBy = pUserID, deletedBy = pUserID, deletedAt = fun_DatetimetoUTCDateTime(), isDeleted = 1                      \n" +
                "			WHERE 	refPackingSlipMaterialRecID = pInvoiceId                       \n" +
                "					AND deletedAt IS NULL                      \n" +
                "					AND packingSlipSerialNumber IN (                      \n" +
                "						SELECT packingSlipSerialNumber FROM temp_Delete_Packing_Slip_Record	                      \n" +
                "					);                   \n" +
                "			SELECT COUNT(1) INTO v_TotalDetailCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId;		                \n" +
                "			SELECT COUNT(1) INTO v_PendingCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'P';                \n" +
                "			SELECT COUNT(1) INTO v_DisapproveCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'D';		                \n" +
                "			SELECT COUNT(1) INTO v_ApproveCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'A';		                \n" +
                "  \n" +
                "			IF (v_DisapproveCount > 0) THEN                \n" +
                "				SET v_DetailLineStatus = 'I';                \n" +
                "			ELSEIF (v_PendingCount > 0) THEN                \n" +
                "				SET v_DetailLineStatus = 'W';                \n" +
                "			ELSEIF (v_ApproveCount > 0 AND v_ApproveCount = v_TotalDetailCount) THEN                \n" +
                "				SET v_DetailLineStatus = 'A';                \n" +
                "			ELSE                \n" +
                "				SET v_DetailLineStatus = 'W';                \n" +
                "			END IF;                \n" +
                "  \n" +
                "			UPDATE 	packing_slip_material_receive                 \n" +
                "			SET 	`status` = v_DetailLineStatus                 \n" +
                "			WHERE 	receiptType = 'I'                 \n" +
                "					AND deletedAt IS NULL                 \n" +
                "					AND id = pInvoiceId;                  \n" +
                "  \n" +
                "		END IF;                      \n" +
                "	END IF;           \n" +
                "  \n" +
                "	IF (IFNULL(v_UpdateCount, 0) > 0) THEN          \n" +
                "		IF (pAction = 'ReGet') THEN            \n" +
                "			UPDATE 	packing_slip_material_receive_det ps, packing_slip_material_receive_det si          \n" +
                "			SET 	si.packingSlipSerialNumber = ps.packingSlipSerialNumber,  \n" +
                "				si.nickname = ps.nickname,                \n" +
                "				si.partID = ps.partID,                \n" +
                "				si.refSupplierPartId = ps.refSupplierPartId,                \n" +
                "				si.scanLabel = ps.scanLabel,                \n" +
                "				si.orderedQty = ps.orderedQty,                \n" +
                "				si.receivedQty = ps.receivedQty,                \n" +
                "				si.packingSlipQty = ps.packingSlipQty,                \n" +
                "				si.binID = ps.binID,                \n" +
                "				si.warehouseID = ps.warehouseID,                \n" +
                "				si.parentWarehouseID = ps.parentWarehouseID,          \n" +
                "				si.invoicePrice = ps.invoicePrice,             \n" +
                "				si.umidCreated = ps.umidCreated,                \n" +
                "				si.poReleaseNumber = ps.poReleaseNumber,                \n" +
                "				si.packagingID = ps.packagingID,              \n" +
                "				si.receivedStatus = ps.receivedStatus,              \n" +
                "				si.remark = ps.remark          \n" +
                "			WHERE 	ps.refPackingSlipMaterialRecID = pPackingSlipId           \n" +
                "					AND si.refPackingSlipMaterialRecID = pInvoiceId           \n" +
                "					AND si.packingSlipSerialNumber = ps.packingSlipSerialNumber          \n" +
                "					AND ps.deletedAt IS NULL          \n" +
                "					AND si.deletedAt IS NULL;          \n" +
                "		END IF;          \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF (pAction = 'GetNotification') THEN                      \n" +
                "		SELECT IsSuccess, NoOfLineInsert, NoOfLineDelete, NoOfLineUpdate FROM temp_ReGet_Validation_Error;                      \n" +
                "	ELSEIF (pAction = 'ReGet') THEN                      \n" +
                "		INSERT INTO temp_ReGet_Validation_Error (IsSuccess, NoOfLineInsert, NoOfLineDelete, NoOfLineUpdate) VALUES(TRUE, 0, 0, 0);                      \n" +
                "		SELECT IsSuccess, NoOfLineInsert, NoOfLineDelete FROM temp_ReGet_Validation_Error;                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_GetPackingSlipDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipDetailForElastic`(  \n" +
                "	IN pId INT,              \n" +
                "	IN pReceiptType VARCHAR(1)              \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT 		psmr.id                \n" +
                "			, psmr.systemId      \n" +
                "			, psmr.receiptType AS receiptType                \n" +
                "			, psmr.mfgCodeID                \n" +
                "			, (CASE WHEN psmr.creditMemoType = 'RC' THEN NULL ELSE psmr.poNumber END) poNumber        \n" +
                "			, (CASE WHEN psmr.creditMemoType = 'RC' THEN psmr.poNumber ELSE NULL END) rmaNumber             \n" +
                "			, psmr.poDate        \n" +
                "			, psmr.supplierSONumber           \n" +
                "			, psmr.packingSlipNumber                \n" +
                "			, psmr.packingSlipDate                \n" +
                "			, psmr.invoiceNumber                \n" +
                "			, psmr.invoiceDate        \n" +
                "			, psmr.creditMemoNumber                \n" +
                "			, psmr.creditMemoDate        \n" +
                "			, psmr.debitMemoNumber                \n" +
                "			, psmr.debitMemoDate    \n" +
                "			, (CASE WHEN psmr.creditMemoType = 'RC' THEN NULL ELSE psmr.receiptDate END) receiptDate                \n" +
                "			, (CASE WHEN psmr.creditMemoType = 'RC' THEN psmr.receiptDate ELSE NULL END) shippedToDate                \n" +
                "			, psmr.chequeNumber                 \n" +
                "			, psmr.chequeAmount                \n" +
                "			, psmr.chequeDate        \n" +
                "			, psmr.creditMemoType        \n" +
                "			, (        \n" +
                "				CASE         \n" +
                "					WHEN 	psmr.creditMemoType = 'IC' THEN 'Invoice Credit Memo'         \n" +
                "					WHEN  	psmr.creditMemoType = 'RC' THEN 'RMA Credit Memo'        \n" +
                "					WHEN  	psmr.creditMemoType = 'MC' THEN 'Manual Credit Memo'        \n" +
                "					ELSE 	NULL        \n" +
                "				END        \n" +
                "			) creditMemoTypeValue        \n" +
                "			, (        \n" +
                "				CASE         \n" +
                "					WHEN 	psmr.creditMemoType = 'ID' THEN 'Invoice Debit Memo'         \n" +
                "					WHEN  	psmr.creditMemoType = 'MD' THEN 'Manual Debit Memo'        \n" +
                "					ELSE 	NULL        \n" +
                "				END        \n" +
                "			) debitMemoTypeValue        \n" +
                "			, psmrd.id AS receivingDetId            \n" +
                "			, (CASE WHEN psmr.receiptType = 'P' THEN psmrd.packingSlipSerialNumber ELSE NULL END) packingSlipSerialNumber          \n" +
                "			, (CASE WHEN psmr.receiptType = 'I' THEN psmrd.packingSlipSerialNumber ELSE NULL END) invoiceSerialNumber          \n" +
                "			, (CASE WHEN psmr.receiptType = 'C' THEN psmrd.packingSlipSerialNumber ELSE NULL END) creditMemoSerialNumber          \n" +
                "			, (CASE WHEN psmr.receiptType = 'D' THEN psmrd.packingSlipSerialNumber ELSE NULL END) debitMemoSerialNumber          \n" +
                "			, psmrd.orderedQty        \n" +
                "			, psmrd.packingSlipQty        \n" +
                "			, psmrd.invoicePrice        \n" +
                "			, psmrd.receivedQty         \n" +
                "			, psmrd.purchasePrice        \n" +
                "			, psmrd.extendedPrice               \n" +
                "			, psmrd.extendedReceivedPrice               \n" +
                "			, psmrd.nickname  \n" +
                "			, comp.id AS compId                \n" +
                "			, comp.mfgPN AS mfgPN                \n" +
                "			, mfgMstdetail.id AS mfrPnMfrId                \n" +
                "			, mfgMstdetail.mfgName AS mfrPnMfrName                 \n" +
                "			, mfgMstdetail.mfgCode AS mfrPnMfrCode    \n" +
                "			, mfgMst.id AS mfgMstId                \n" +
                "			, mfgMst.mfgName AS mfgName                 \n" +
                "			, mfgMst.mfgCode AS mfgCode                \n" +
                "			, mfgMst.mfgType AS mfgType                 \n" +
                "			, mfgMst.isCustOrDisty AS isCustOrDisty                \n" +
                "			, (SELECT id FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id) AS refPackingSlipId        \n" +
                "			, (SELECT packingSlipNumber FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id) AS refPackingSlipNumber                \n" +
                "			, (SELECT poNumber FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id AND receiptType = 'R') AS refRMANumber        \n" +
                "			, (SELECT invoiceNumber FROM packing_slip_material_receive WHERE id = psmr.refParentCreditDebitInvoiceno) AS refInvoiceNumber                \n" +
                "			, psmr.refParentCreditDebitInvoiceno AS parentInvoiceId        \n" +
                "			, (        \n" +
                "				CASE         \n" +
                "					WHEN (psmr.refParentCreditDebitInvoiceno IS NOT NULL) THEN         \n" +
                "						(SELECT id FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = (SELECT id FROM packing_slip_material_receive WHERE id = psmr.refParentCreditDebitInvoiceno LIMIT 1))         \n" +
                "					ELSE NULL         \n" +
                "				END        \n" +
                "			) refPackingSlipIdForMemo        \n" +
                "			, psmrd.packagingID          \n" +
                "			, fun_getPackagingNameByID(psmrd.packagingID) AS packagingName          \n" +
                "			, psmrd.receivedStatus              \n" +
                "			, (          \n" +
                "				CASE          \n" +
                "					WHEN psmrd.receivedStatus = 'P' THEN 'Pending'          \n" +
                "					WHEN psmrd.receivedStatus = 'A' THEN 'Accept'          \n" +
                "					WHEN psmrd.receivedStatus = 'R' THEN 'Reject'          \n" +
                "					ELSE NULL          \n" +
                "				END          \n" +
                "			) AS receivedStatusValue                 \n" +
                "			, psmrd.remark          \n" +
                "	FROM 		packing_slip_material_receive AS psmr                \n" +
                "	INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID           \n" +
                "				AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0           \n" +
                "				AND psmr.Id = IFNULL(pId,psmr.Id)                \n" +
                "	LEFT OUTER JOIN component AS comp ON psmrd.partID = comp.id           \n" +
                "				AND comp.deletedAt IS NULL                 \n" +
                "	LEFT OUTER JOIN mfgCodemst AS mfgMst ON psmr.mfgCodeID = mfgMst.id                \n" +
                "				AND (mfgMst.deletedAt IS NULL           \n" +
                "				AND mfgMst.isDeleted = FALSE)    \n" +
                "	LEFT OUTER JOIN mfgCodemst AS mfgMstdetail ON comp.mfgcodeID = mfgMstdetail.id                \n" +
                "				AND (mfgMstdetail.deletedAt IS NULL           \n" +
                "				AND mfgMstdetail.isDeleted = FALSE)           \n" +
                "	WHERE      	(psmr.deletedAt IS NULL AND psmr.isDeleted = FALSE)           \n" +
                "				AND psmr.receiptType = IFNULL(pReceiptType,psmr.receiptType);                \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_getDebitMemoReportDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_getDebitMemoReportDetail`(  \n" +
                "	IN pReceiptID INT,  \n" +
                "    IN pEmployeeID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "    # Debit Memo report details which shows in 2nd section as table format  \n" +
                "         SELECT c.mfgPN partNumber,  \n" +
                "         c.mfgPNDescription description,  \n" +
                "		 psd.packingSlipQty quantity, psd.invoicePrice,psd.extendedPrice, psd.approveNote,  \n" +
                "         ps.debitMemoDate,ps.debitMemoNumber  \n" +
                "			FROM  \n" +
                "				packing_slip_material_receive_det psd  \n" +
                "			INNER JOIN  packing_slip_material_receive ps ON ps.id = psd.refPackingSlipMaterialRecID          \n" +
                "			LEFT JOIN  component c ON psd.partID = c.id AND c.isDeleted = 0        \n" +
                "			WHERE psd.isDeleted = 0 AND        \n" +
                "				  psd.refPackingSlipMaterialRecID  = pReceiptID AND        \n" +
                "				  ps.isDeleted =0;        \n" +
                "  \n" +
                "	# Debit Memo report main section details which shows in 1st section      \n" +
                "       SELECT ps.id, ps.poNumber, ps.debitMemoNumber,        \n" +
                "		DATE_FORMAT(ps.debitMemoDate, '%m/%d/%Y') debitMemoDate,        \n" +
                "        DATE_FORMAT(psr.invoiceDate, '%m/%d/%Y') refInvoiceDate,        \n" +
                "		psr.invoiceNumber refInvoiceNumber,          \n" +
                "        fun_getMfgNameByID(ps.mfgCodeID) supplier,          \n" +
                "        CONCAT('ATTN: ', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''), (CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/> ',  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ',IFNULL(ca.postcode,''),'<br/>',IFNULL(co.countryName,''))  billingAddress             \n" +
                "		FROM packing_slip_material_receive ps        \n" +
                "			left JOIN packing_slip_material_receive psr ON psr.id = ps.refParentCreditDebitInvoiceno  and psr.isDeleted = 0  \n" +
                "			LEFT JOIN customer_addresses ca ON ca.customerID = ps.mfgCodeID AND ca.isDeleted = 0 AND ca.addressType = 'B' AND ca.isDefault = 1                   \n" +
                "            LEFT JOIN countrymst co ON co.countryID = ca.countryID  AND co.isDeleted = 0           \n" +
                "        WHERE        \n" +
                "			ps.id = pReceiptID AND        \n" +
                "            ps.receiptType = 'D' AND        \n" +
                "            ps.isDeleted = 0;    \n" +
                "  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(  \n" +
                "	IN pPageIndex INT,        \n" +
                "	IN pRecordPerPage INT,        \n" +
                "	IN pOrderBy VARCHAR(255),        \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "	IN pPackingSlipID INT,        \n" +
                "    IN pInvoiceLineId INT        \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	DECLARE pOffset INT;        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;        \n" +
                "	DECLARE v_ParentPackingSlipId INT;        \n" +
                "	DECLARE v_InvoiceSlipId INT;        \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);        \n" +
                "	DECLARE v_TimeZone VARCHAR(50);        \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;        \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;        \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;        \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS        \n" +
                "	SELECT 	*,        \n" +
                "		(        \n" +
                "			CASE        \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'        \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'        \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'        \n" +
                "				ELSE NULL        \n" +
                "			END        \n" +
                "		) AS receivedStatusValue        \n" +
                "	FROM 	(        \n" +
                "		SELECT 		p.id,						p.refPackingSlipMaterialRecID,  \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,        \n" +
                "				p.nickname, 					p.partID, 						p.scanLabel,        \n" +
                "				p.orderedQty, 					p.receivedQty, 						p.packingSlipQty,        \n" +
                "				p.binID, 					p.warehouseID, 						p.parentWarehouseID,        \n" +
                "				p.invoicePrice, 				p.disputedPrice,        \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,        \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,        \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,        \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,        \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,        \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,        \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,        \n" +
                "				p.status, 					p.extendedPrice, 					p.extendedReceivedPrice,        \n" +
                "				p.discount,        \n" +
                "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,        \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,        \n" +
                "				p.refCreditDebitInvoiceNo,        \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated,        \n" +
                "				p.poReleaseNumber,                              p.isMemoForPrice,					p.isMemoForQty,        \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,        \n" +
                "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					        sc.mfgPN supplierPN,        \n" +
                "				c.unit,						c.uom,					  		fun_getUnitNameByID(c.uom) uomName,        \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,        \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,        \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,        \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,        \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,        \n" +
                "				sc.packagingID supplierPackagingId,		c.packageQty spq,                                       c.isCustom,        \n" +
                "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,        \n" +
                "				pod.internalLineComment,			p.refPOLineID,						p.rohsstatus,    \n" +
                "				p.isReceivedWrongPart,        \n" +
                "				fun_getRoHSNameByID(p.rohsstatus) prohsName,            \n" +
                "				(        \n" +
                "					CASE        \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN        \n" +
                "							p.receivedStatus        \n" +
                "						ELSE        \n" +
                "							(SELECT receivedStatus        \n" +
                "							FROM 	packing_slip_material_receive_det        \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId        \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber        \n" +
                "									AND isDeleted = 0 LIMIT 1)        \n" +
                "					END        \n" +
                "				) receivedStatus,        \n" +
                "				p.remark,        \n" +
                "				p.internalRemark,        \n" +
                "				p.comment,        \n" +
                "				p.internalRef,        \n" +
                "				p.purchaseInspectionComment,        \n" +
                "				(        \n" +
                "					CASE        \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN        \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')        \n" +
                "						ELSE        \n" +
                "							(SELECT COUNT(1)        \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp        \n" +
                "							WHERE EXISTS (        \n" +
                "									SELECT 	1        \n" +
                "									FROM 	packing_slip_material_receive_det pslip        \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId        \n" +
                "											AND 	pslip.id = psmp.lineId        \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber        \n" +
                "											AND	pslip.isDeleted = 0)        \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')        \n" +
                "					END        \n" +
                "				) AS purchaseRequirementCount,        \n" +
                "				(        \n" +
                "					CASE        \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN        \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')        \n" +
                "						ELSE        \n" +
                "							(SELECT COUNT(1)        \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm        \n" +
                "							WHERE 	EXISTS (        \n" +
                "									SELECT 	1        \n" +
                "									FROM 	packing_slip_material_receive_det psmr        \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId        \n" +
                "										AND	psmr.id = psm.lineId        \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber        \n" +
                "										AND 	psmr.isDeleted = 0        \n" +
                "									)        \n" +
                "								AND psm.inspectionStatus = 'R'        \n" +
                "								AND psm.isDeleted = 0        \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')        \n" +
                "					END        \n" +
                "				) AS rejectedPurchaseRequirementCount,        \n" +
                "				(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,        \n" +
                "				(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,        \n" +
                "				(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0        \n" +
                "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,        \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,        \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,        \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,        \n" +
                "				ps.refInvoiceIdForMemo,        \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,        \n" +
                "				ps.refInvoiceNumberForMemo,        \n" +
                "				(        \n" +
                "					CASE        \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL        \n" +
                "						ELSE        \n" +
                "							(SELECT `status`        \n" +
                "							FROM 	packing_slip_material_receive_det        \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId        \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber        \n" +
                "									AND isDeleted = 0)        \n" +
                "					END        \n" +
                "				) invoiceStatus,        \n" +
                "				(        \n" +
                "					CASE        \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL        \n" +
                "						ELSE        \n" +
                "							(SELECT refCreditDebitInvoiceNo        \n" +
                "							FROM 	packing_slip_material_receive_det        \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId        \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber        \n" +
                "									AND isDeleted = 0)        \n" +
                "					END        \n" +
                "				) invoiceLineHasMemo,        \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,        \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd        \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'        \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id        \n" +
                "					AND pd.partId = p.partID) commentCount,        \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,        \n" +
                "				p.refPackingSlipIdForRma,        \n" +
                "				p.refPackingSlipDetIdForRMA,        \n" +
                "				p.refInvoiceIdForRma,        \n" +
                "				p.refPackingSlipForRma,        \n" +
                "				p.refInvoiceForRma,        \n" +
                "				rm.packingSlipQty parentDetailLinePackingSlipQty,        \n" +
                "				rm.invoicePrice parentDetailLineInvoicePrice,        \n" +
                "				rm.extendedPrice parentDetailLineExtendedPrice,        \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipNumberById(p.refPackingSlipIdForRma) ELSE refPackingSlipForRma END) refPackingSlipNumber,        \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE refInvoiceForRma END) refInvoiceNumber,        \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma) ELSE NULL END) refPackingSlipSupplierId        \n" +
                "		FROM		packing_slip_material_receive_det p        \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0        \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL        \n" +
                "		LEFT JOIN	(        \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo        \n" +
                "					FROM 	packing_slip_material_receive_det ps        \n" +
                "					WHERE 	ps.isDeleted = 0        \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId        \n" +
                "		LEFT JOIN 	(        \n" +
                "					SELECT 	packingSlipSerialNumber, packingSlipQty, invoicePrice, extendedPrice        \n" +
                "					FROM 	packing_slip_material_receive_det        \n" +
                "					WHERE 	isDeleted = 0 AND refPackingSlipMaterialRecID = v_ParentPackingSlipId        \n" +
                "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber        \n" +
                "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0        \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID        \n" +
                "		AND 		p.isDeleted = 0        \n" +
                "	) a;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS        \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID        \n" +
                "	FROM		packing_slip_material_receive_det psm        \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID        \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.supplierSONumber = ps.supplierSONumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)        \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)        \n" +
                "	AND			ps.receiptType = 'P'        \n" +
                "	AND			psm.isDeleted = 0        \n" +
                "	GROUP BY 	ps.supplierSONumber, psm.partID, psm.packagingID;        \n" +
                "  \n" +
                "	-- Set received qty detail        \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q        \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,        \n" +
                "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))        \n" +
                "	WHERE 	r.partID = q.partID AND r.packagingID = q.packagingID;        \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN        \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;        \n" +
                "	ELSE        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
                "		SET pWhereClause = '1=1' ;        \n" +
                "	END IF;        \n" +
                "  \n" +
                "    IF pInvoiceLineId IS NOT NULL THEN        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;        \n" +
                "    END IF;        \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN        \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "	ELSE        \n" +
                "		SET rowNumWhere = '';        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	/* to get total count of rows */        \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );        \n" +
                "	PREPARE query1 FROM @SQLStatement1;        \n" +
                "	EXECUTE query1;        \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "	PREPARE query2 FROM @SQLStatement2;        \n" +
                "	EXECUTE query2;        \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,        \n" +
                "											invoiceTotalDue As invoiceTotalDue,        \n" +
                "									   ifnull((select round(sum(b.paymentAmount),2)        \n" +
                "										  from packingslip_invoice_payment a        \n" +
                "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid        \n" +
                "										 where b.refPackingslipInvoiceID = c.id        \n" +
                "                                           and a.refPaymentMode = 'P'        \n" +
                "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal        \n" +
                "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");        \n" +
                "	PREPARE query3 FROM @SQLStatement3;        \n" +
                "	EXECUTE query3;        \n" +
                "	DEALLOCATE PREPARE query3;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->15-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4480,'2.00','V1','User Story 31842: Other charges change in Credit and Debit memo - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4480:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-04-2021 *********************************** */
                "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(      \n" +
                "	IN pPageIndex INT,      \n" +
                "	IN pRecordPerPage INT,      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "	IN pReceiptType VARCHAR(10),      \n" +
                "	IN pMfgCodeIds LONGTEXT,      \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,      \n" +
                "	IN pDueDate DATE,      \n" +
                "	IN pAdditionalDays INT,      \n" +
                "	IN pTermsAndAboveDays INT,      \n" +
                "	IN pInvoiceNumber VARCHAR(50),      \n" +
                "	IN pIsExactSearch TINYINT,      \n" +
                "	IN pMfrPnId INT,      \n" +
                "    IN pInvoiceIds LONGTEXT,      \n" +
                "    IN pExactPaymentNumberSearch TINYINT,      \n" +
                "    IN pPaymentNumber VARCHAR(50),      \n" +
                "    IN pPaymentTermsIds LONGTEXT,      \n" +
                "    IN pInvoiceFromDate DATE,      \n" +
                "    IN pInvoiceToDate DATE      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE pOffset INT;                      \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                      \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                      \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                      \n" +
                "    DECLARE vCurrentDate DATE;                      \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;                      \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;                      \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;                      \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"                          \n" +
                "			SELECT 		p.id,                        \n" +
                "					p.systemId,                    \n" +
                "					p.poNumber,                          \n" +
                "                    po.id poId,    \n" +
                "					p.mfgCodeID,                          \n" +
                "					p.supplierSONumber,                          \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,                          \n" +
                "					p.packingSlipDate,                          \n" +
                "					p.invoiceNumber,                          \n" +
                "					p.invoiceDate,              \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,              \n" +
                "					p.creditMemoNumber,                          \n" +
                "					p.creditMemoDate,                          \n" +
                "					p.debitMemoNumber,                          \n" +
                "					p.debitMemoDate,                          \n" +
                "					p.receiptDate,                          \n" +
                "					p.description,                          \n" +
                "					p.billToAddress,                          \n" +
                "					p.shipToAddress,                          \n" +
                "					p.poVersion,                          \n" +
                "					p.isDeleted,                          \n" +
                "					p.receiptType,                          \n" +
                "					p.`status`,                          \n" +
                "					p.applyDate,                          \n" +
                "					p.refParentCreditDebitInvoiceno,                          \n" +
                "					p.refPackingSlipNumberForInvoice,                          \n" +
                "					p.invoiceTotalDue,                          \n" +
                "					p.isTariffInvoice,                                            \n" +
                "					p.creditMemoType,      \n" +
                "                    (      \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN      \n" +
                "								'Invoice Credit Memo'      \n" +
                "							WHEN p.creditMemoType = 'MC' THEN      \n" +
                "								'Manual Credit Memo'      \n" +
                "							WHEN p.creditMemoType = 'RC' THEN      \n" +
                "								'RMA Credit Memo'      \n" +
                "							WHEN p.creditMemoType = 'ID' THEN      \n" +
                "								'Invoice Debit Memo'      \n" +
                "							WHEN p.creditMemoType = 'MD' THEN      \n" +
                "								'Manual Debit Memo'      \n" +
                "						END      \n" +
                "					) creditMemoTypeValue,      \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,                                       \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,                            \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,                            \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,                            \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                            \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                                     \n" +
                "                    fun_getMfgNameByID(p.mfgCodeID) supplierName,      \n" +
                "					fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCode,        \n" +
                "					fun_getMfgCodeByID(p.mfgCodeID) supplierCodeName,                          \n" +
                "					(                                \n" +
                "						SELECT 	IFNULL(g.cnt,0)                              \n" +
                "						FROM 	vu_genericfilescount g                                 \n" +
                "						WHERE 	g.refTransID = p.id                                 \n" +
                "								AND                               \n" +
                "								(                              \n" +
                "									CASE                               \n" +
                "										WHEN p.receiptType = 'C' THEN g.entityID = -15                              \n" +
                "										WHEN p.receiptType = 'D' THEN g.entityID = -16                                \n" +
                "										ELSE g.entityID = -13                              \n" +
                "									END                              \n" +
                "								)                       \n" +
                "					) invoiceDocCount,                                \n" +
                "					(                                \n" +
                "						SELECT 	IFNULL(g.cnt,0)                                 \n" +
                "						FROM 	vu_genericfilescount g                                 \n" +
                "						WHERE 	g.refTransID = psm.id                     \n" +
                "								AND g.entityID = -14                       \n" +
                "								AND g.gencFileOwnerType = 'packing_slip'                           \n" +
                "					) packingSlipDocCount,                                                 \n" +
                "					pd.itemReceived,                                                      \n" +
                "					pd.otherChargesItemReceived,                                                            \n" +
                "					pd.itemDisapproved,                          \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,                          \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,                          \n" +
                "					ps.status parentInvoiceStatus,                          \n" +
                "					ps.invoiceNumber refInvoiceNumber,                          \n" +
                "					ps.creditMemoType parentCreditMemoType,                          \n" +
                "					pd.totalExtendedAmount,            \n" +
                "                    pd.totalDiscount,            \n" +
                "					pe.totalCreditAmount,                          \n" +
                "					pe.totalDebitAmount,                          \n" +
                "					(                          \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)                          \n" +
                "					) amountToPay,                          \n" +
                "					pd.packingDetailNote,                          \n" +
                "					pd.approveLineCount,                          \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN                                  \n" +
                "											p.debitMemoDate                                  \n" +
                "										WHEN p.receiptType = 'C' THEN                                  \n" +
                "											p.creditMemoDate                                  \n" +
                "										ELSE p.invoiceDate                                          \n" +
                "									end), p.termsDays, p.paymentTermsID) paymentDueDate,                          \n" +
                "					fun_getGenericCategoryNameByID(p.paymentTermsID) paymentTermName,                          \n" +
                " 					p.paymentTermsID,                          \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,                                                  \n" +
                "					psm.packingSlipModeStatus,                                          \n" +
                "					get_totalSupplierInvoicePaidAmountById(p.id) paidAmount,                                          \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,                                      \n" +
                "					p.invoiceRequireManagementApproval,                                      \n" +
                "					(                                      \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN                                      \n" +
                "								'Yes'                                      \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN                                      \n" +
                "								'No'                                      \n" +
                "						END                                      \n" +
                "					) invoiceRequireManagementApprovalValue,                                       \n" +
                "					p.invoiceApprovalStatus,                                      \n" +
                "					(                                      \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN                                      \n" +
                "								'Approved'                                      \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN                                      \n" +
                "								'Pending'                                      \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN                                      \n" +
                "								'N/A'                                      \n" +
                "						END                                      \n" +
                "					) invoiceApprovalStatusValue,                                      \n" +
                "					p.invoiceApprovedBy,                                      \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,                                      \n" +
                "					p.invoiceApprovalDate,                                      \n" +
                "					p.invoiceApprovalComment,                                      \n" +
                "					p.internalRemark                                      \n" +
                "			FROM packing_slip_material_receive p                          \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0                          \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0                          \n" +
                "            LEFT JOIN 	purchase_order_mst po ON po.poNumber = p.poNumber AND po.isDeleted = 0      \n" +
                "			left join (                          \n" +
                "							select 	a.refPackingSlipMaterialRecID,                          \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,                          \n" +
                "								sum(a.itemReceived) itemReceived,                                                    \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,                          \n" +
                "								sum(a.itemDisapproved) itemDisapproved,                          \n" +
                "								sum(a.approveLineCount) approveLineCount,                          \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,            \n" +
                "                                sum(discount) totalDiscount            \n" +
                "							from 	(                                                    \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,                                                     \n" +
                "										psm.packingSlipSerialNumber,                                                     \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,                                        \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,  \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/  \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,  \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,  \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,                          \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,                          \n" +
                "										extendedPrice,            \n" +
                "                                        discount            \n" +
                "									FROM 	packing_slip_material_receive_det psm                          \n" +
                "									WHERE 	psm.isDeleted = 0                          \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)                          \n" +
                "								) a                                                              \n" +
                "							group by a.refPackingSlipMaterialRecID                                                    \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id                                                              \n" +
                "				left join (                                                    \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,                                                               \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,                                          \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,                                          \n" +
                "    									sum(get_totalSupplierInvoicePaidAmountById(ps.id)) totalPaidDebitCreditAmount                                          \n" +
                "							from 		packing_slip_material_receive ps                                                              \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID                                                              \n" +
                "								  where ps.receiptType in ('C','D')                          \n" +
                "									and ps.isDeleted = 0                          \n" +
                "									and pd.isDeleted = 0                          \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno                          \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id                          \n" +
                "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",                          \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),                              \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')\") ELSE \"\" END)                                               \n" +
                "	);                                                          \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN                      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.paymentTermsID in (', pPaymentTermsIds, ' )');                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN                      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN                      \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"                      \n" +
                "				and exists (select 1                      \n" +
                "							  from packingslip_invoice_payment pm                      \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id                      \n" +
                "							 where pm.isDeleted = 0                      \n" +
                "							   and pm.isPaymentVoided = 0                      \n" +
                "							   and pm.refPaymentMode = 'P'                      \n" +
                "							   and pd.refPackingslipInvoiceID = p.id                      \n" +
                "							   and pm.paymentNumber \",                      \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END                      \n" +
                "                               ,\") \");                      \n" +
                "    END IF;                      \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;                      \n" +
                "	ELSE                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                      \n" +
                "		SET pWhereClause = '1=1' ;                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                      \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                      \n" +
                "	END IF;              \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'               \n" +
                "												   or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");              \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'              \n" +
                "												   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");              \n" +
                "    END IF;              \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN                      \n" +
                "		IF pIsExactSearch = 1 THEN                      \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"                      \n" +
                "									AND (                      \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'                      \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'                      \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'                      \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'                      \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'                      \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'                      \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"                      \n" +
                "									  \" ) \"                      \n" +
                "						);                      \n" +
                "		ELSE                      \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"                      \n" +
                "									AND (                      \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'                      \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'                      \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'                      \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'                      \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'                      \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'                      \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"                      \n" +
                "									  \" ) \"                      \n" +
                "						);                      \n" +
                "		END IF;                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN                      \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (                      \n" +
                "				SELECT 1                      \n" +
                "				  FROM packing_slip_material_receive_det x                      \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0                      \n" +
                "			)                      \n" +
                "		\");                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                      \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                      \n" +
                "	ELSE                      \n" +
                "		SET rowNumWhere = '';                      \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	/* to get total count of rows */                      \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );                      \n" +
                "    PREPARE query1 FROM @SQLStatement1;                      \n" +
                "    EXECUTE query1;                      \n" +
                "	DEALLOCATE PREPARE query1;                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"                      \n" +
                "			SELECT 	c.*,                      \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,                      \n" +
                "				round(c.paidAmount,2) totalPaidAmount,                      \n" +
                "				round((c.totalExtendedAmount - c.paidAmount),2) paymentAmount,                      \n" +
                "				round((c.totalExtendedAmount - c.paidAmount),2) balanceToPayAmount,                                 \n" +
                "				round((c.totalPaidDebitCreditAmount+c.paidAmount),2) totalPaidAmountToDisableDelete                      \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c                      \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);                      \n" +
                "	PREPARE query2 FROM @SQLStatement2;                      \n" +
                "	EXECUTE query2;                      \n" +
                "	DEALLOCATE PREPARE query2;                      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->15-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4481,'2.00','V1','User Story 31842: Other charges change in Credit and Debit memo - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4481:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-04-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentList`(                                          \n" +
                "	IN ppageIndex INT,                                          \n" +
                "	IN precordPerPage INT,                                          \n" +
                "	IN pOrderBy VARCHAR(255),                                          \n" +
                "	IN pWhereClause VARCHAR(16383),                                          \n" +
                "	IN pIsMFG TINYINT,                                          \n" +
                "    IN pMfgCodeIDs LONGTEXT,                                          \n" +
                "    IN pMfgCodeIdsForSupplierParts LONGTEXT,                                          \n" +
                "    IN pPackagingIDs LONGTEXT,                                      \n" +
                "    IN pPackageIDs LONGTEXT,            \n" +
                "    IN pPartStatusIDs LONGTEXT,                                          \n" +
                "    IN pMountingTypeIDs LONGTEXT,                                          \n" +
                "    IN pExternalMountingTypeValues LONGTEXT,                                          \n" +
                "    IN pFunctionalTypeIDs LONGTEXT,                                          \n" +
                "    IN pExternalFunctionalTypeValues LONGTEXT,                                           \n" +
                "    IN pAttributesSearchHeader LONGTEXT,                                          \n" +
                "    IN pAttributesSearch LONGTEXT,                                          \n" +
                "    IN pPackagingAlias TEXT,                                          \n" +
                "    IN pAlternatePart TEXT,                                          \n" +
                "    IN pRoHSAlternatePart TEXT,                                          \n" +
                "    IN pPartUsedInAssembly TEXT,                                          \n" +
                "    IN pMultiplePartNumbers LONGTEXT,                                          \n" +
                "    IN pStockQuantity TEXT,                                          \n" +
                "    IN pPartTypeIDs LONGTEXT,                                          \n" +
                "    IN pCertificateStandardsIds LONGTEXT,                                          \n" +
                "    IN pStandardsClassIds LONGTEXT,                                          \n" +
                "    IN pAssemblyIds LONGTEXT,                                          \n" +
                "    IN pAssemblyTypeIds LONGTEXT,                                          \n" +
                "    IN pRohsIds LONGTEXT,                                          \n" +
                "    IN pExternalRoHSStatusListValues LONGTEXT,                                          \n" +
                "    IN pOperationalAttributeIds LONGTEXT,                                          \n" +
                "    IN pAcceptableShippingCountryIds LONGTEXT,                                          \n" +
                "    IN pComponentOrdering TEXT,                                          \n" +
                "    IN pComponentUsageCriteria TEXT,                                          \n" +
                "    IN pIsRefreshMasterFilters TINYINT,                                          \n" +
                "    IN pFromDate DATE,                                          \n" +
                "    IN pToDate DATE,                                          \n" +
                "    IN pIsReversal TINYINT,                                          \n" +
                "    IN pIsBOMActivityStarted TINYINT,                                          \n" +
                "    IN pIsEcoDfmColumnVisible TINYINT,                                          \n" +
                "    IN pIsSearchFromHeader TINYINT,                                          \n" +
                "    IN pIsExportControl TINYINT,                                          \n" +
                "    IN pObsoleteDate DATE,                                \n" +
                "    IN pIsOperatingTemperatureBlank TINYINT,                        \n" +
                "    IN pFromCreatedOnDate DATE,                        \n" +
                "    IN pToCreatedOnDate DATE,                        \n" +
                "    IN pIsIdenticalMfrPN TINYINT,                        \n" +
                "    IN pIsProductionPNEmpty TINYINT,                      \n" +
                "    IN pDisapprovedSupplierIds LONGTEXT,            \n" +
                "	IN pIsExcludeIncorrectPart TINYINT,            \n" +
                "    IN pMultiplePartFilterFieldName VARCHAR(50),            \n" +
                "    IN pMultiplePartByUploadFileDetail LONGTEXT            \n" +
                "    )  \n" +
                "BEGIN                                          \n" +
                "	DECLARE pOffset INT;                                          \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                                      \n" +
                "    DECLARE attributeSearchString LONGTEXT;                                                      \n" +
                "    DECLARE attributeSearchLength INT DEFAULT 0;                                                      \n" +
                "    DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;                                                      \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;                                                      \n" +
                "    DECLARE vPartUsedInAssemblyExists VARCHAR(20);                                                      \n" +
                "    DECLARE vPartUsedInAssemblyAndOR VARCHAR(20);                                                      \n" +
                "  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);                                         \n" +
                "    DECLARE vTimeZone VARCHAR(50);                                         \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                                \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;                                \n" +
                "  \n" +
                "  SET @SQLStatement1=\"                                                              \n" +
                "	SELECT co.*, concat('(',mf.mfgCode,') ',mf.mfgName) as mfgCode, mf.mfgName as manufacturerName, mf.displayOrder mfgDisplayOrder,                                           \n" +
                "		(case when isGoodPart!=2 and mf.mfgType = 'MFG' then 1 else 0 end) as isCopyPart,                                                              \n" +
                "		gc.name AS partStatusValue,                                          \n" +
                "        gc.displayOrder parStatusDisplayOrder,                                          \n" +
                "		mf.mfgType \";                                              \n" +
                "	IF pIsMFG = TRUE THEN                                          \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                                              \n" +
                "			null AliasMFGPN,                                              \n" +
                "			null AliasMFGCode,                                          \n" +
                "			null AliasMFGCodeID,                                          \n" +
                "			null AliascompID,                                          \n" +
                "			null AliasMFGName,                                          \n" +
                "            null AliasMFGDisplayOrder\");                                           \n" +
                "    ELSE                                          \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                                              \n" +
                "		(case when (mf.mfgType = 'DIST' and co.refSupplierMfgpnComponentID is not null) then (select MFGPN from component vu_co where vu_co.id = co.refSupplierMfgpnComponentID limit 1) else null end) AliasMFGPN,                                              \n" +
                "          concat('(',mfc.mfgCode,') ',mfc.mfgName) AliasMFGCode,                                          \n" +
                "        mfc.id AliasMFGCodeID,                                          \n" +
                "	    co.refSupplierMfgpnComponentID AliascompID,                                          \n" +
                "        mfc.mfgName as AliasMFGName,                                          \n" +
                "        mfc.displayOrder AliasMFGDisplayOrder \");                                           \n" +
                "	END IF;                                              \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,                                              \n" +
                "		ro.name AS `rohsComplientConvertedValue`,                                            \n" +
                "        ro.displayOrder rohsDisplayOrder,                                          \n" +
                "		ro.rohsIcon AS `rohsIcon`,                                              \n" +
                "		(CASE WHEN (`co`.`isGoodPart` = 1) THEN 'Correct Part'                                              \n" +
                "					WHEN (`co`.`isGoodPart` = 2) THEN 'Incorrect Part'                                              \n" +
                "					WHEN (`co`.`isGoodPart` = 3) THEN 'TBD Part'                                              \n" +
                "					ELSE '' END) AS `isGoodPartValue`,                                              \n" +
                "		case when co.isCustom = 1 then                                          \n" +
                "				'Yes'                                          \n" +
                "			else 'No' end as isCustomValue,                                               \n" +
                "		case when co.isCPN = 1 then                                          \n" +
                "				'Yes'                                          \n" +
                "			else 'No' end as isCPNValue,                                          \n" +
                "		pt.partTypeName functionalCategoryName,                                              \n" +
                "        pt.displayOrder functionalCategoryDisplayOrder,                                          \n" +
                "		mt.name mountingTypeName,                                              \n" +
                "        mt.displayOrder mountingTypeDisplayOrder,                                          \n" +
                "		pc.categoryName,                                              \n" +
                "		rct.name connecterTypeName,                                              \n" +
                "		u.unitName,                                              \n" +
                "		CONCAT(cmsl.levelRating,' (', cmsl.time,')') mslName,                                              \n" +
                "		pck.name packagingName,                                              \n" +
                "        pck.displayOrder packagingDisplayOrder,                                          \n" +
                "			(CASE WHEN (`co`.`isReversal` = 1) THEN 'Yes'                                              \n" +
                "					ELSE 'No' END) AS `reversalPart`,                                              \n" +
                "		fun_getExportControlDetailFromPartID(co.id) as isExportControl,                                              \n" +
                "		fun_getUserNameByID(co.updatedBy) updatedbyValue,                                              \n" +
                "		fun_getUserNameByID(co.createdBy) createdbyValue,                                              \n" +
                "		fun_getRoleByID(co.createByRoleId) createdbyRoleValue,                                              \n" +
                "		fun_getRoleByID(co.updateByRoleId) updatedbyRoleValue,                                              \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(co.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,                                        \n" +
                " 		fun_ApplyCommonDateTimeFormatByParaValue(co.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue,                                        \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(co.updatedAtApi,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtApiValue,                                        \n" +
                "		/*fun_ConvertUTCDatetimeToDataKeyTimeZone(co.createdAt) createdAtValue,                                              \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(co.UpdatedAt) updatedAtValue,                                              \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(co.updatedAtApi) updatedAtApiValue,*/                                        \n" +
                "		(CASE WHEN (co.systemGenerated = 0) THEN 'No'                                              \n" +
                "		WHEN (co.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SystemGeneratedValue`,                                              \n" +
                "        pct.name packageCaseTypeValue,                                              \n" +
                "        concat(pt.partTypeName,' - ',mt.name) groupName,                                              \n" +
                "		case when co.category = 3 then                                              \n" +
                "			fun_getSamplePicturesUploadCount(co.id)                                              \n" +
                "		end uploadedSamplePicturesCount,                                              \n" +
                "		case when co.category = 3 then                                              \n" +
                "			fun_getRFQAssemblyListByPartID(co.id)                                              \n" +
                "		end assemblyCount,                                              \n" +
                "		case when co.category = 3 then                                              \n" +
                "			fun_getBOMLineCountByPartID(co.id)                                              \n" +
                "		end bomLineCount,                                              \n" +
                "		case when co.category = 3 then                                              \n" +
                "			fun_getRFQStatusByPartID(co.id)                                              \n" +
                "		end quoteProgress,                                        \n" +
                "		CASE when co.category = 3 then                                              \n" +
                "		 	fun_getRFQIDByPartID(co.id)                                             \n" +
                "		END rfqAssyID,                                               \n" +
                "		/*case when co.category = 3 then                                              \n" +
                "			(select id from rfq_assemblies WHERE partId = co.id AND isDeleted = 0 LIMIT 1)                                              \n" +
                "		end rfqAssyID,*/                                        \n" +
                "		concat(usr.firstName, ' ', usr.lastName) activityStartedByUserName,                                              \n" +
                "		case when co.isActivityStart=true then                                              \n" +
                "				TIMESTAMPDIFF(SECOND, co.activityStartAt,fun_DatetimetoUTCDateTime())                                              \n" +
                "			else null end activityStartTime,                                              \n" +
                "		rat.name assemblyTypeName,                    \n" +
                "		CASE when co.frequency = 1 then                                              \n" +
                "		 	'Every' when    co.frequency = 2 then                       \n" +
                "		 	'First' when  co.frequency = 3 then                     \n" +
                "		 	'Last' else ''                                             \n" +
                "		END frequencyName,                          \n" +
                "        CASE WHEN co.isWaterSoluble = 0 THEN 'NO' ELSE 'YES' END isWaterSolubleConvertedValue ,                  \n" +
                "        CASE WHEN co.isNoClean = 0 THEN 'NO' ELSE 'YES' END isNoCleanConvertedValue,      \n" +
                "        case when co.isHazmatMaterial = 1 then                                          \n" +
                "				'Yes'                                          \n" +
                "		else 'No' end as isHazmatMaterialValue,    \n" +
                "        CONCAT('(',am.`acct_code`,') ',am.`acct_name`) AS SalesCOA,    \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS PurchaseCOA \");                                              \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') OR pComponentOrdering = 'STOCK' THEN                                              \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentStock(co.id) partStock \");                                              \n" +
                "	ELSE                        \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partStock \");                                              \n" +
                "	END IF;                                              \n" +
                "    IF pComponentOrdering = 'USAGE' THEN                                              \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentUsage(co.id,'\",pFromDate,\"','\",pToDate,\"','\",pComponentUsageCriteria,\"') partUsage \");                        \n" +
                "	ELSE                        \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partUsage \");                        \n" +
                "	END IF;                                              \n" +
                "  \n" +
                "    IF pIsEcoDfmColumnVisible = TRUE THEN                                              \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , (select count(1)                                              \n" +
                "													  from eco_request ec                                              \n" +
                "													 where ec.isdeleted = 0                                              \n" +
                "													   and ec.finalstatus = 'P'                                              \n" +
                "													   and ec.fromPartID = co.id) activeEcoDfmCount \");                        \n" +
                "	ELSE                        \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null activeEcoDfmCount \");                        \n" +
                "	END IF;                                         \n" +
                "	IF (pFromCreatedOnDate IS NOT NULL OR pToCreatedOnDate IS NOT NULL) THEN                                              \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , CAST(fun_CovnertDateTimeByTimezoneValue(co.createdAt,'\",vTimeZone,\"') AS DATE) createdAtFilter \");                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN                        \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , count(1) over(partition by co.mfgPN,mf.mfgType) identicalPNCount \");                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "SET @SQLStatement1=CONCAT(@SQLStatement1,\"                                              \n" +
                "	FROM component co                                              \n" +
                "		JOIN rfq_partcategory pc ON pc.id = co.partType                                              \n" +
                " 		JOIN mfgcodemst mf ON co.mfgcodeID = mf.id                                                  \n" +
                " 		JOIN component_partstatusmst gc ON gc.id = co.partStatus                                                  \n" +
                " 		JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id                                                  \n" +
                " 		JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID                                                  \n" +
                " 		JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID                                                  \n" +
                " 		LEFT JOIN rfq_connectertypemst rct ON rct.id = co.connecterTypeID                          \n" +
                " 		JOIN uoms u ON u.id = co.uom                                              \n" +
                " 		LEFT JOIN component_mslmst cmsl ON cmsl.id = co.mslID                                              \n" +
                "		left join rfq_packagecasetypemst pct ON pct.id = co.partPackageID                                              \n" +
                "        LEFT JOIN users usr ON usr.id = co.activityStartBy                                              \n" +
                "        left join rfq_assy_typemst rat ON rat.id = co.assemblyType                                              \n" +
                " 		LEFT JOIN component_packagingmst pck ON pck.id = co.packagingID     \n" +
                "        LEFT JOIN acct_acctmst am ON am.acct_id = co.salesacctId    \n" +
                "        LEFT JOIN acct_acctmst aam ON aam.acct_id = co.purchaseacctId\");                                          \n" +
                "    IF pIsMFG = FALSE THEN                                        \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1,\"                                        \n" +
                "			JOIN mfgcodemst mfc ON mfc.id = co.refMfgPNMfgCodeId \");                                        \n" +
                "	END IF;                                        \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@SQLStatement1,\"                                        \n" +
                "    WHERE co.isdeleted = 0 \");                                        \n" +
                "  \n" +
                "	IF pIsMFG = TRUE THEN                                        \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''MFG'' ');                                        \n" +
                "    ELSE                                        \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''DIST'' ');                                        \n" +
                "    END IF;                                        \n" +
                "  \n" +
                "	IF (pMultiplePartFilterFieldName is not null && pMultiplePartByUploadFileDetail IS NOT NULL AND pMultiplePartByUploadFileDetail != '')            \n" +
                "    THEN            \n" +
                "		if(pMultiplePartFilterFieldName = 'SystemID')            \n" +
                "        THEN              \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.serialNumber IN(',pMultiplePartByUploadFileDetail,')  ');            \n" +
                "		ELSEif(pMultiplePartFilterFieldName = 'PID Code')            \n" +
                "        THEN            \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.PIDCode IN(',pMultiplePartByUploadFileDetail,')  ');            \n" +
                "		ELSE                    \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgPN IN(',pMultiplePartByUploadFileDetail,')  ');            \n" +
                "        END IF;            \n" +
                "    END IF;                \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                        \n" +
                "		IF pComponentOrdering = 'MFG' THEN                                        \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN                                        \n" +
                "				SET pOrderBy = CONCAT(\"MFGCode asc, \" , pOrderBy);                                        \n" +
                "            END IF;                                        \n" +
                "		ELSEIF pComponentOrdering = 'MFGPN' THEN                                        \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN                                        \n" +
                "				SET pOrderBy = CONCAT(\"mfgPN asc, \" , pOrderBy);                                        \n" +
                "			END IF;                                        \n" +
                "		ELSEIF pComponentOrdering = 'USAGE' THEN                                        \n" +
                "			SET pOrderBy = CONCAT(\"partUsage desc, \" , pOrderBy);                                        \n" +
                "		ELSEIF pComponentOrdering = 'STOCK' THEN                                        \n" +
                "			SET pOrderBy = CONCAT(\"partStock desc, \" , pOrderBy);                                        \n" +
                "		END IF;                                        \n" +
                "        SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);                                        \n" +
                "	ELSE                                        \n" +
                "		SET pOrderBy = \"ORDER BY mfgPN DESC\" ;                                        \n" +
                "	END IF;                                        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                              \n" +
                "		SET pWhereClause = '1=1' ;                                                              \n" +
                "	END IF;                                                              \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                          \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;                                          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                          \n" +
                "	ELSE                                          \n" +
                "		SET rowNumWhere = '';                                          \n" +
                "	END IF;                                          \n" +
                "  \n" +
                "    IF (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN                                          \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mfgcodeID in (', pMfgCodeIDs, ' )');                                          \n" +
                "    END IF;                                          \n" +
                "    IF (pMfgCodeIdsForSupplierParts IS NOT NULL AND pMfgCodeIdsForSupplierParts != '') THEN                                          \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND refMfgPNMfgCodeId in (', pMfgCodeIdsForSupplierParts, ' )');                                          \n" +
                "    END IF;                                          \n" +
                "    IF (pPackagingIDs IS NOT NULL AND pPackagingIDs != '') THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND packagingID in (', pPackagingIDs, ' )');                                                              \n" +
                "    END IF;              \n" +
                "    IF (pPackageIDs IS NOT NULL AND pPackageIDs != '') THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND partPackageID in (', pPackageIDs, ' )');                                                              \n" +
                "    END IF;                \n" +
                "    IF (pPartStatusIDs IS NOT NULL AND pPartStatusIDs != '') THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND partStatus in (', pPartStatusIDs, ' )');                                                              \n" +
                "    END IF;                                                              \n" +
                "    IF (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND mountingTypeID in (', pMountingTypeIDs, ' )');                                                              \n" +
                "    END IF;                                                              \n" +
                "    IF (pExternalMountingTypeValues IS NOT NULL AND pExternalMountingTypeValues != '') THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND mountingTypeText in (', pExternalMountingTypeValues, ' )');                                                              \n" +
                "    END IF;                                                              \n" +
                "    IF (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND functionalCategoryID in (', pFunctionalTypeIDs, ' )');                                                              \n" +
                "    END IF;                                                              \n" +
                "    IF (pExternalFunctionalTypeValues IS NOT NULL AND pExternalFunctionalTypeValues != '') THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND functionalCategoryText in (', pExternalFunctionalTypeValues, ' )');                                                              \n" +
                "    END IF;                                                              \n" +
                "    IF (pMultiplePartNumbers IS NOT NULL AND pMultiplePartNumbers != '') THEN                                                              \n" +
                "		IF pIsMFG = TRUE THEN                                                              \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (mfgPN in (', pMultiplePartNumbers, ' )                                                            \n" +
                "																OR exists (select 1 from component_otherpn cp                                                            \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))                                                            \n" +
                "																)');                                                              \n" +
                "		ELSE                                                              \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (mfgPN in (', pMultiplePartNumbers, ' )                                                              \n" +
                "																OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID                                            \n" +
                "																and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null                                            \n" +
                "                                                                and cc.mfgpn in (', pMultiplePartNumbers, '))                                                            \n" +
                "                                                                OR exists (select 1 from component_otherpn cp                                                            \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))                                                            \n" +
                "                                                                )');                                                              \n" +
                "        END IF;                                                              \n" +
                "    END IF;                                                              \n" +
                "    IF (pPartTypeIDs IS NOT NULL AND pPartTypeIDs != '') THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND partType in (', pPartTypeIDs, ' )');                                                              \n" +
                "    END IF;                                                              \n" +
                "    IF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '' AND                                                              \n" +
                "		pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' ) and csd.ClassID in (', pStandardsClassIds, ' )) ');                                                              \n" +
                "	ELSEIF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '') THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' )) ');                                                              \n" +
                "	ELSEIF (pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.ClassID in (', pStandardsClassIds, ' )) ');                                                              \n" +
                "    END IF;                                                              \n" +
                "  \n" +
                "    IF (pAssemblyIds IS NOT NULL AND pAssemblyIds != '') THEN                                                  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))                                                  \n" +
                "															or exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))                                                  \n" +
                "															or exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and rl.partID in (', pAssemblyIds, '))) ');                                                  \n" +
                "    END IF;                                                  \n" +
                "  \n" +
                "    IF (pAssemblyTypeIds IS NOT NULL AND pAssemblyTypeIds != '') THEN                                                  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.assemblyType in (', pAssemblyTypeIds, ' )');                                                  \n" +
                "    END IF;                                                  \n" +
                "  \n" +
                "    IF (pRohsIds IS NOT NULL AND pRohsIds != '') THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.RoHSStatusID in (', pRohsIds, ' )');                                                              \n" +
                "    END IF;                                \n" +
                "  \n" +
                "    IF (pExternalRoHSStatusListValues IS NOT NULL AND pExternalRoHSStatusListValues != '') THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsText in (', pExternalRoHSStatusListValues, ' )');                                                              \n" +
                "    END IF;                                \n" +
                "  \n" +
                "    IF pIsReversal = TRUE THEN                                                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isReversal = true');                                                    \n" +
                "    END IF;                                \n" +
                "    IF pIsBOMActivityStarted = TRUE THEN                                                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isActivityStart = true');                                                    \n" +
                "    END IF;                                \n" +
                "    IF pIsOperatingTemperatureBlank = TRUE THEN                                \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.operatingTemp is not null and co.operatingTemp != \"\" and (co.minOperatingTemp is null or co.maxOperatingTemp is null) ');                                \n" +
                "    END IF;                                \n" +
                "  \n" +
                "    IF pObsoleteDate IS NOT NULL THEN                                                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, \" AND co.obsoleteDate >= '\",pObsoleteDate,\"'\");                                                      \n" +
                "    END IF;                          \n" +
                "  \n" +
                "    IF pIsProductionPNEmpty = TRUE THEN                                                    \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.productionPN is null ');                                                    \n" +
                "    END IF;                        \n" +
                "  \n" +
                "    IF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NOT NULL) THEN                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');                                \n" +
                "    ELSEIF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NULL) THEN                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" ');                          \n" +
                "    ELSEIF(pToCreatedOnDate IS NOT NULL AND pFromCreatedOnDate IS NULL) THEN                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');                          \n" +
                "    END IF;                          \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND identicalPNCount > 1 ');                        \n" +
                "    END IF;                        \n" +
                "  \n" +
                "    IF (pOperationalAttributeIds IS NOT NULL AND pOperationalAttributeIds != '') THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_dynamic_attribute_mapping_part cd                                                             \n" +
                "													   where cd.mfgPNID=co.id and cd.isdeleted=false                                                             \n" +
                "														 and cd.deletedat is null                                                             \n" +
                "                                                         and cd.attributeID in (',pOperationalAttributeIds,'))');                                                            \n" +
                "    END IF;                      \n" +
                "  \n" +
                "    IF (pDisapprovedSupplierIds IS NOT NULL AND pDisapprovedSupplierIds != '') THEN                      \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_approved_supplier_mst cd                      \n" +
                "													   where cd.partID = co.id and cd.isdeleted=false                      \n" +
                "														 and cd.deletedat is null                      \n" +
                "                                                         and cd.supplierID in (',pDisapprovedSupplierIds,'))');                      \n" +
                "    END IF;                      \n" +
                "  \n" +
                "    IF (pAcceptableShippingCountryIds IS NOT NULL AND pAcceptableShippingCountryIds != '') THEN                                                              \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_acceptable_shipping_countries ca                                                            \n" +
                "														  where ca.isdeleted = false                                                            \n" +
                "															and ca.deletedat is null                                                            \n" +
                "															and ca.refComponentID = co.id                                                            \n" +
                "															and ca.countryID in (',pAcceptableShippingCountryIds,'))');                                                            \n" +
                "    END IF;                                                              \n" +
                "  \n" +
                "	IF (pAttributesSearchHeader IS NOT NULL AND pAttributesSearchHeader != '') THEN                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (functionalCategoryText like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName like ''%', pAttributesSearchHeader, '%'' ');                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id                                                        \n" +
                "																		AND isdeleted = 0                                                       \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mountingTypeText like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name like ''%', pAttributesSearchHeader, '%'' ');                                                          \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id                                                        \n" +
                "																		AND isdeleted = 0                                                      \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR operatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR minOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR maxOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficient like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficientValue like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficientUnit like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR connectorTypeText like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR noOfPosition like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR noOfRows like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitch like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitchMating like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR sizeDimension like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR length like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR width like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR heightText like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR height like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR tolerance like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR voltage like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR value like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR partPackage like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR powerRating like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR weight like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR feature like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR color like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR PIDCode like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPNDescription like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR detailDescription like ''%', pAttributesSearchHeader, '%'' ');                                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR specialNote like ''%', pAttributesSearchHeader, '%'' ');                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR serialNumber like ''%', pAttributesSearchHeader, '%'' ');                                                                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode like ''%', pAttributesSearchHeader, '%'' ');                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName like ''%', pAttributesSearchHeader, '%'' ');                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name like ''%', pAttributesSearchHeader, '%'' ');                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name like ''%', pAttributesSearchHeader, '%'' ');                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName like ''%', pAttributesSearchHeader, '%'' ');                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName like ''%', pAttributesSearchHeader, '%'' ');                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name like ''%', pAttributesSearchHeader, '%'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp                                                            \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name like (''%', pAttributesSearchHeader, '%'' )) ');                                                            \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPN like ''%', pAttributesSearchHeader, '%'' ');                                                      \n" +
                "          IF pIsMFG = FALSE THEN                                                    \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc                                                             \n" +
                "																			where cc.id = co.refSupplierMfgpnComponentID                                             \n" +
                "                                                                            and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null                                             \n" +
                "                                                                            and cc.mfgPN like ''%', pAttributesSearchHeader, '%'' )                                                            \n" +
                "														      OR exists (select 1 from component_otherpn cp where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.refSupplierMfgpnComponentID and cp.name like (''%', pAttributesSearchHeader, '%'' ))                                                            \n" +
                "																		');                                                              \n" +
                "          END IF;                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' )');           \n" +
                "    END IF;                                                      \n" +
                "  \n" +
                "    IF (pAttributesSearch IS NOT NULL AND pAttributesSearch != '') THEN                                                      \n" +
                "		SET attributeSearchString = pAttributesSearch;                                                      \n" +
                "       do_this:                                                      \n" +
                "	  LOOP                                                      \n" +
                "		SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);                \n" +
                "		SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, ',', 1);                \n" +
                "		SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);                \n" +
                "		SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+2), attributeSearchLength);                \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (functionalCategoryText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id                                                        \n" +
                "																		AND isdeleted = 0                \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');                \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mountingTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id                                                       \n" +
                "																		AND  isdeleted = 0                \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR operatingTemp REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(minOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(maxOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficient REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(temperatureCoefficientValue)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR temperatureCoefficientUnit REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR connectorTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(noOfPosition)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(noOfRows)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitch REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pitchMating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR sizeDimension REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(length)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(width)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR heightText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(height)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR tolerance REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR voltage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                                      \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR value REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR partPackage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR powerRating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR weight REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR feature REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR color REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                              \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR PIDCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPNDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR detailDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR specialNote REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                                              \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR serialNumber REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');                \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp                \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ) ');                \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mfgPN REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' )');                \n" +
                "          /*IF pIsMFG = FALSE THEN                \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID and cc.mfgPN like ''%', attributeSearchChip, '%'' )');                \n" +
                "          END IF;  */                \n" +
                "		IF attributeSearchString = NULL OR attributeSearchString = \"\" THEN                \n" +
                "		  LEAVE do_this;                \n" +
                "		END IF;                \n" +
                "	  END LOOP do_this;                \n" +
                "    END IF;                \n" +
                "  \n" +
                "    IF (pPackagingAlias IS NOT NULL AND pPackagingAlias != '') THEN                \n" +
                "		IF (pPackagingAlias = '1') THEN                \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is not null ');                \n" +
                "		ELSE                \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is null ');                \n" +
                "		END IF;                \n" +
                "	END IF;                \n" +
                "		IF (pAlternatePart IS NOT NULL AND pAlternatePart != '') THEN                \n" +
                "			IF (pAlternatePart = '1') THEN                \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');                \n" +
                "			ELSE                                                              \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');                \n" +
                "			END IF;                \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 1 and ca.isDeleted = 0) ');                \n" +
                "		END IF;                \n" +
                "		IF (pRoHSAlternatePart IS NOT NULL AND pRoHSAlternatePart != '') THEN                \n" +
                "			IF (pRoHSAlternatePart = '1') THEN                \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsgroupID is not null ');                \n" +
                "			ELSE                \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsgroupID is null ');                \n" +
                "			END IF;                \n" +
                "		END IF;                \n" +
                "  \n" +
                "        IF (pPartUsedInAssembly IS NOT NULL AND pPartUsedInAssembly != '') THEN                \n" +
                "			SET vPartUsedInAssemblyExists = \" \";                \n" +
                "            SET vPartUsedInAssemblyAndOR = \" \";                \n" +
                "			IF (pPartUsedInAssembly = '1') THEN                \n" +
                "				SET vPartUsedInAssemblyExists = \" \";                \n" +
                "				SET vPartUsedInAssemblyAndOR = \" OR \";                \n" +
                "			ELSEIF (pPartUsedInAssembly = '2') THEN                \n" +
                "				SET vPartUsedInAssemblyExists = \" NOT \";                \n" +
                "				SET vPartUsedInAssemblyAndOR = \" AND \";                \n" +
                "            END IF;                \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, 'AND co.category = 2                \n" +
                "															AND ( ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))                \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))                \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and exists (select 1 from component c where c.id = rl.partid and c.partStatus = 1))) ');                \n" +
                "  \n" +
                "		END IF;                        \n" +
                "  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') THEN                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.partStock >= \", pStockQuantity);                        \n" +
                "	END IF;                        \n" +
                "   IF pIsExportControl = 1 THEN                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,' ',' and c.isExportControl = \"Yes\" ');                        \n" +
                "   END IF;                        \n" +
                "	IF pIsExcludeIncorrectPart = TRUE THEN            \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isGoodPart in (1,3) ');            \n" +
                "	END IF;            \n" +
                "  /* to get total count of rows */                        \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) from ( \",@SQLStatement1,\" ) c where \", pWhereClause);                \n" +
                "	PREPARE query2 FROM @SQLStatement2;                      \n" +
                "	EXECUTE query2;                        \n" +
                "	DEALLOCATE PREPARE query2;   \n" +
                "  SET @SQLStatement2 = CONCAT(\"select c.*,                        \n" +
                "								( select GROUP_CONCAT(cs.fullName ,' ' , CASE WHEN csd.classID IS NULL THEN ''                        \n" +
                "													ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,''))                        \n" +
                "														FROM standard_class WHERE classID = csd.classID) END                        \n" +
                "														ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@') certificatelist                        \n" +
                "										  from component_standard_details csd                        \n" +
                "										  join certificate_standards cs on cs.certificateStandardID = csd.certificateStandardID and cs.isdeleted=0                        \n" +
                "										 where csd.componentID = c.id                        \n" +
                "										 and csd.isdeleted = 0) certificatelist                        \n" +
                "									from ( \", @SQLStatement1,\" ) c                        \n" +
                "		where \", pWhereClause , \" \", pOrderBy , rowNumWhere);                        \n" +
                "    /*main query create temp table*/                        \n" +
                "	PREPARE query1 FROM @SQLStatement2;                        \n" +
                "	EXECUTE query1;                        \n" +
                "	DEALLOCATE PREPARE query1;     \n" +
                "  \n" +
                "  \n" +
                "	IF pIsRefreshMasterFilters = TRUE THEN                        \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT mfgCodeID as mfgcodeID, mfgCode, manufacturerName as mfgName, mfgDisplayOrder,                        \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,                        \n" +
                "											packagingID,packagingName, packagingDisplayOrder,                        \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,                        \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,                        \n" +
                "											partType,categoryName,                        \n" +
                "											functionalCategoryText,                        \n" +
                "											mountingTypeText,                        \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,                        \n" +
                "											  rohsText,                        \n" +
                "                                            AliasMFGCodeID,                        \n" +
                "                                            AliasMFGCode,                        \n" +
                "                                            AliasMFGName,                        \n" +
                "                                            AliasMFGDisplayOrder,                                                        \n" +
                "                                            packageCaseTypeValue,            \n" +
                "                                            partPackageID            \n" +
                "										from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\"                        \n" +
                "                                        group by mfgCodeID, mfgCode, manufacturerName , mfgDisplayOrder,                        \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,                        \n" +
                "											packagingID,packagingName, packagingDisplayOrder,                        \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,                        \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,                        \n" +
                "											partType,categoryName,                        \n" +
                "											functionalCategoryText,                        \n" +
                "											mountingTypeText,                        \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,                        \n" +
                "											  rohsText,                                          \n" +
                "                                            AliasMFGCodeID,                                          \n" +
                "                                            AliasMFGCode,                                          \n" +
                "                                            AliasMFGName,                                          \n" +
                "                                            AliasMFGDisplayOrder,            \n" +
                "                                            packageCaseTypeValue,            \n" +
                "                                            partPackageID\");                                              \n" +
                "		PREPARE query3 FROM @SQLStatement2;                                              \n" +
                "		EXECUTE query3;                                              \n" +
                "		DEALLOCATE PREPARE query3;                                              \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" with cte as ( SELECT id from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\" )                                              \n" +
                "									select * from                                              \n" +
                "										(select case when stdc.classID is not null then                                              \n" +
                "													concat(cs.certificateStandardID,':',stdc.classID)                                              \n" +
                "													else cs.certificateStandardID end certificateStandardID,                                              \n" +
                "												case when stdc.classID is not null then                                              \n" +
                "													concat(cs.fullName,' ',stdc.classname)                                              \n" +
                "													else cs.fullName end fullName,                                              \n" +
                "												cs.displayOrder                                              \n" +
                "										  from certificate_standards cs                                              \n" +
                "										  join component_standard_details csd on csd.certificateStandardID = cs.certificateStandardID                                              \n" +
                "										  left join standard_class stdc on csd.ClassID = stdc.classID                                              \n" +
                "										where csd.isDeleted = 0 and csd.deletedAt is null and csd.componentID in (select id from cte)                                              \n" +
                "										) a group by certificateStandardID, fullName, displayOrder                                              \n" +
                "										order by displayOrder,fullName\");                                              \n" +
                "		PREPARE query3 FROM @SQLStatement2;                                              \n" +
                "		EXECUTE query3;                                              \n" +
                "		DEALLOCATE PREPARE query3;  */                                            \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" select distinct cm.countryID, cm.countryName                                              \n" +
                "					  from component_acceptable_shipping_countries casc                                              \n" +
                "					  join countrymst cm ON cm.countryid = casc.countryid                                              \n" +
                "					 where casc.isdeleted = false                                              \n" +
                "					   and casc.deletedat is null                                              \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c                                              \n" +
                "									where c.id = casc.refComponentID and \", pWhereClause,\" )                                              \n" +
                "                                    order by cm.countryName\");                                              \n" +
                "		PREPARE query3 FROM @SQLStatement2;                                              \n" +
                "		EXECUTE query3;                                              \n" +
                "		DEALLOCATE PREPARE query3;  */                                            \n" +
                "  \n" +
                "         /*SET @SQLStatement2 = CONCAT(\" select distinct cda.id, cda.attributeName                                              \n" +
                "					  from component_dynamic_attribute_mapping_part cdam                                              \n" +
                "					  join component_dynamic_attribute cda ON cda.id = cdam.attributeID                                              \n" +
                "					 where cdam.isdeleted = false                                              \n" +
                "					   and cdam.deletedat is null                                              \n" +
                "					   and cda.isdeleted = false                                              \n" +
                "					   and cda.deletedat is null                                              \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c                                              \n" +
                "                                     where c.id = cdam.mfgPNID and \", pWhereClause,\" )                                              \n" +
                "                                     order by cda.attributeName\");                                              \n" +
                "		PREPARE query3 FROM @SQLStatement2;                                              \n" +
                "		EXECUTE query3;                                              \n" +
                "		DEALLOCATE PREPARE query3;  */                                            \n" +
                "    END IF;                                              \n" +
                "  \n" +
                "		IF (pIsSearchFromHeader = TRUE) THEN                                              \n" +
                "			/*Fetch Functional Type and Mounting Type wise grouping*/                                              \n" +
                "			SET @SQLStatement2 = CONCAT(\" select concat(functionalCategoryName,' - ',mountingTypeName) groupName,                                              \n" +
                "											null groupNameText,                                              \n" +
                "											functionalCategoryID, mountingTypeID,                                              \n" +
                "											count(1) recCount                                              \n" +
                "											from ( \",@SQLStatement1,\" ) c where \", pWhereClause,                                              \n" +
                "										' group by functionalCategoryName,mountingTypeName,                          \n" +
                "													functionalCategoryID, mountingTypeID                                              \n" +
                "											order by groupName, groupNameText, recCount desc');                                              \n" +
                "  \n" +
                "            PREPARE query3 FROM @SQLStatement2;                                              \n" +
                "			EXECUTE query3;                                              \n" +
                "			DEALLOCATE PREPARE query3;                                              \n" +
                "        END IF;                   \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4482,'2.00','V1',' User Story 32570: Supplier Pricing for the component (Off-the-Shelf) Allow to insert supplier price for the off-the-shelf part - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4482:
            allDbChangesArray.push(
                /* **************************** New Script ->15-04-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPackingSlipPartQtyBySalesOrder`;  \n" +
                /* **************************** New Script ->15-04-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPackingSlipPartQtyByPO`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipPartQtyByPO`(  \n" +
                "	IN pPONumber VARCHAR(50),                        \n" +
                "	IN pPartID INT(11),      \n" +
                "	IN pPackagingID INT(11)               \n" +
                ")  \n" +
                "BEGIN        \n" +
                "   SELECT 	ps.supplierSONumber,psm.partid, SUM(psm.receivedQty) totalReceived, MAX(psm.orderedQty) orderedQty               \n" +
                "	FROM 	packing_slip_material_receive ps    \n" +
                "    JOIN 	packing_slip_material_receive_det psm  ON  ps.id = psm.refPackingSlipMaterialRecID              \n" +
                "				AND 	ps.poNumber = pPONumber             \n" +
                "				AND 	psm.partid = pPartID       \n" +
                "				AND 	psm.packagingID = pPackagingID              \n" +
                "                AND 	ps.receiptType = 'P'      \n" +
                "                AND 	ps.isdeleted = 0    \n" +
                "                AND 	psm.isdeleted = 0     \n" +
                "	GROUP BY 	ps.supplierSONumber,psm.partid;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  15-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4483,'2.00','V1',' Code refactor of packing slip - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4483:
            allDbChangesArray.push(
                /* **************************** New Script ->15-04-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(        \n" +
                "	IN pPageIndex INT,        \n" +
                "	IN pRecordPerPage INT,        \n" +
                "	IN pOrderBy VARCHAR(255),        \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "	IN pPackingSlipID INT,        \n" +
                "    IN pInvoiceLineId INT        \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	DECLARE pOffset INT;        \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;        \n" +
                "	DECLARE v_ParentPackingSlipId INT;        \n" +
                "	DECLARE v_InvoiceSlipId INT;        \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);        \n" +
                "	DECLARE v_TimeZone VARCHAR(50);        \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;        \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;        \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;        \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS        \n" +
                "	SELECT 	*,        \n" +
                "		(        \n" +
                "			CASE        \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'        \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'        \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'        \n" +
                "				ELSE NULL        \n" +
                "			END        \n" +
                "		) AS receivedStatusValue        \n" +
                "	FROM 	(        \n" +
                "		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,        \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,        \n" +
                "				p.nickname, 					p.partID, 								p.scanLabel,        \n" +
                "				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,        \n" +
                "				p.binID, 						p.warehouseID, 							p.parentWarehouseID,        \n" +
                "				p.invoicePrice, 				p.disputedPrice,        \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,        \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,        \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,        \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,        \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,        \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,        \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,        \n" +
                "				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,        \n" +
                "				p.discount,        \n" +
                "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,        \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,        \n" +
                "				p.refCreditDebitInvoiceNo,        \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated,        \n" +
                "				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,        \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,        \n" +
                "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,        \n" +
                "				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,        \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,        \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,        \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,        \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,        \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,        \n" +
                "				sc.packagingID supplierPackagingId,		c.packageQty spq,                                       c.isCustom,        \n" +
                "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,        \n" +
                "				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,    \n" +
                "				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,                  \n" +
                "				fun_getRoHSNameByID(p.rohsstatus) prohsName,            \n" +
                "				(        \n" +
                "					CASE        \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN        \n" +
                "							p.receivedStatus        \n" +
                "						ELSE        \n" +
                "							(SELECT receivedStatus        \n" +
                "							FROM 	packing_slip_material_receive_det        \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId        \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber        \n" +
                "									AND isDeleted = 0 LIMIT 1)        \n" +
                "					END        \n" +
                "				) receivedStatus,        \n" +
                "				p.remark,        \n" +
                "				p.internalRemark,        \n" +
                "				p.comment,        \n" +
                "				p.internalRef,        \n" +
                "				p.purchaseInspectionComment,        \n" +
                "				(        \n" +
                "					CASE        \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN        \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')        \n" +
                "						ELSE        \n" +
                "							(SELECT COUNT(1)        \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp        \n" +
                "							WHERE EXISTS (        \n" +
                "									SELECT 	1        \n" +
                "									FROM 	packing_slip_material_receive_det pslip        \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId        \n" +
                "											AND 	pslip.id = psmp.lineId        \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber        \n" +
                "											AND	pslip.isDeleted = 0)        \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')        \n" +
                "					END        \n" +
                "				) AS purchaseRequirementCount,        \n" +
                "				(        \n" +
                "					CASE        \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN        \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')        \n" +
                "						ELSE        \n" +
                "							(SELECT COUNT(1)        \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm        \n" +
                "							WHERE 	EXISTS (        \n" +
                "									SELECT 	1        \n" +
                "									FROM 	packing_slip_material_receive_det psmr        \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId        \n" +
                "										AND	psmr.id = psm.lineId        \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber        \n" +
                "										AND 	psmr.isDeleted = 0        \n" +
                "									)        \n" +
                "								AND psm.inspectionStatus = 'R'        \n" +
                "								AND psm.isDeleted = 0        \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')        \n" +
                "					END        \n" +
                "				) AS rejectedPurchaseRequirementCount,        \n" +
                "				(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,        \n" +
                "				(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,        \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,        \n" +
                "				(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0        \n" +
                "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,        \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,        \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,        \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,        \n" +
                "				ps.refInvoiceIdForMemo,        \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,        \n" +
                "				ps.refInvoiceNumberForMemo,        \n" +
                "				(        \n" +
                "					CASE        \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL        \n" +
                "						ELSE        \n" +
                "							(SELECT `status`        \n" +
                "							FROM 	packing_slip_material_receive_det        \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId        \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber        \n" +
                "									AND isDeleted = 0)        \n" +
                "					END        \n" +
                "				) invoiceStatus,        \n" +
                "				(        \n" +
                "					CASE        \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL        \n" +
                "						ELSE        \n" +
                "							(SELECT refCreditDebitInvoiceNo        \n" +
                "							FROM 	packing_slip_material_receive_det        \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId        \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber        \n" +
                "									AND isDeleted = 0)        \n" +
                "					END        \n" +
                "				) invoiceLineHasMemo,        \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,        \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd        \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'        \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id        \n" +
                "					AND pd.partId = p.partID) commentCount,        \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,        \n" +
                "				p.refPackingSlipIdForRma,        \n" +
                "				p.refPackingSlipDetIdForRMA,        \n" +
                "				p.refInvoiceIdForRma,        \n" +
                "				p.refPackingSlipForRma,        \n" +
                "				p.refInvoiceForRma,        \n" +
                "				rm.packingSlipQty parentDetailLinePackingSlipQty,        \n" +
                "				rm.invoicePrice parentDetailLineInvoicePrice,        \n" +
                "				rm.extendedPrice parentDetailLineExtendedPrice,        \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipNumberById(p.refPackingSlipIdForRma) ELSE refPackingSlipForRma END) refPackingSlipNumber,        \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE refInvoiceForRma END) refInvoiceNumber,        \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma) ELSE NULL END) refPackingSlipSupplierId        \n" +
                "		FROM		packing_slip_material_receive_det p        \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0        \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL        \n" +
                "		LEFT JOIN	(        \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo        \n" +
                "					FROM 	packing_slip_material_receive_det ps        \n" +
                "					WHERE 	ps.isDeleted = 0        \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId        \n" +
                "		LEFT JOIN 	(        \n" +
                "					SELECT 	packingSlipSerialNumber, packingSlipQty, invoicePrice, extendedPrice        \n" +
                "					FROM 	packing_slip_material_receive_det        \n" +
                "					WHERE 	isDeleted = 0 AND refPackingSlipMaterialRecID = v_ParentPackingSlipId        \n" +
                "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber        \n" +
                "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0        \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID        \n" +
                "		AND 		p.isDeleted = 0        \n" +
                "	) a;        \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS        \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID        \n" +
                "	FROM		packing_slip_material_receive_det psm        \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID        \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)        \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)        \n" +
                "	AND			ps.receiptType = 'P'        \n" +
                "	AND			psm.isDeleted = 0        \n" +
                "	GROUP BY 	ps.poNumber, psm.partID, psm.packagingID;        \n" +
                "  \n" +
                "	-- Set received qty detail        \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q        \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,        \n" +
                "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))        \n" +
                "	WHERE 	r.partID = q.partID AND r.packagingID = q.packagingID;        \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN        \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;        \n" +
                "	ELSE        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
                "		SET pWhereClause = '1=1' ;        \n" +
                "	END IF;        \n" +
                "  \n" +
                "    IF pInvoiceLineId IS NOT NULL THEN        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;        \n" +
                "    END IF;        \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN        \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "	ELSE        \n" +
                "		SET rowNumWhere = '';        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	/* to get total count of rows */        \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );        \n" +
                "	PREPARE query1 FROM @SQLStatement1;        \n" +
                "	EXECUTE query1;        \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "	PREPARE query2 FROM @SQLStatement2;        \n" +
                "	EXECUTE query2;        \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,        \n" +
                "											invoiceTotalDue As invoiceTotalDue,        \n" +
                "									   ifnull((select round(sum(b.paymentAmount),2)        \n" +
                "										  from packingslip_invoice_payment a        \n" +
                "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid        \n" +
                "										 where b.refPackingslipInvoiceID = c.id        \n" +
                "                                           and a.refPaymentMode = 'P'        \n" +
                "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal        \n" +
                "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");        \n" +
                "	PREPARE query3 FROM @SQLStatement3;        \n" +
                "	EXECUTE query3;        \n" +
                "	DEALLOCATE PREPARE query3;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  15-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4484,'2.00','V1',' Code refactor of packing slip - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4484:
            allDbChangesArray.push(
                /* **************************** New Script ->15-04-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveAllReleaseLineInPO`;  \n" +
                /* **************************** New Script ->15-04-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePurchaseOrderReleaseLineDetFromPOid`;  \n" +
                /* **************************** New Script ->15-04-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveReleaseLineFromPO`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveReleaseLineFromPO`(    \n" +
                "	IN pRefPOId INT,   \n" +
                "	IN pPartID INT,  \n" +
                "	IN pMFGPN VARCHAR(50)   \n" +
                ")  \n" +
                "BEGIN   \n" +
                "SELECT 	polrd.id,					polrd.qty poReleaseLineQty,			polrd.releaseNumber,  \n" +
                "		polrd.shippingDate,			polrd.promisedShipDate,   \n" +
                "		polrd.poLineWorkingStatus,	pod.id refPurchaseOrderDetID,		pod.lineID,  \n" +
                "		pod.qty poLineQty,			pod.packagingID,					pod.internalRef,  \n" +
                "		cpm.name packagingName,		c.mfgcodeID,						c.mfgPN,  \n" +
                "		c.RoHSStatusID,				fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "		fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,      				fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "		c.id partId,				polrd.receivedQty,    				roh.id rohsId,  \n" +
                "		pod.partDescription,		pod.lineComment,  \n" +
                "		pod.internalLineComment,	pod.rohsStatusID poRohsStatusID,	cs.mfgpn supplierPN,  \n" +
                "		cs.id supplierPNId,			mfgcod.mfgCode mfgCode,				c.packageQty spq,  \n" +
                "		c.unit,						c.uom,								c.uomText,  \n" +
                "		c.partType,					pod.rohsStatusID poLineRoHSID,	  \n" +
                "        fun_getRoHSNameByID(pod.rohsStatusID) poLineRoHSName,  \n" +
                "        c.isCustom,					cs.isCustom AS isCustomSupplier  \n" +
                "    FROM purchase_order_det AS pod  \n" +
                "	INNER JOIN component AS c ON  c.id = pod.mfgPartID AND c.id = IFNULL(pPartID, c.id) AND c.mfgpn = IFNULL(pMFGPN, c.mfgPN) AND c.isDeleted = 0      \n" +
                "	INNER JOIN mfgcodemst mfgcod ON mfgcod.id = c.mfgcodeID OR mfgcod.id = c.mfgcodeID AND mfgcod.isDeleted = 0  \n" +
                "	LEFT JOIN purchase_order_line_release_det AS polrd ON  pod.id = polrd.refPurchaseOrderDetID AND polrd.isDeleted = 0  \n" +
                "	LEFT JOIN component_packagingmst AS cpm ON pod.packagingID = cpm.id AND cpm.isDeleted = 0  \n" +
                "	LEFT JOIN component cs ON cs.id = pod.supplierPartID AND cs.isDeleted = 0  \n" +
                "	LEFT JOIN rfq_rohsmst roh ON roh.id = pod.rohsStatusID AND roh.isDeleted = 0  \n" +
                "    WHERE pod.refPurchaseOrderID = pRefPOid  \n" +
                "    AND pod.isDeleted = 0;   \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  15-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4485,'2.00','V1',' Code refactor of packing slip - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4485:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 16-04-2021 *********************************** */
                "INSERT INTO `rfq_lineitems_errorcode`  \n" +
                "(`logicID`,`errorCode`,`errorColor`,`description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,  \n" +
                "`isDeleted`,`displayName`,`org_description`,`notes`,`narrative`,`isExternalIssue`,`displayOrder`,`isResearchStatus`,  \n" +
                "`isAssemblyLevelError`,`createByRoleId`,`updateByRoleId`,`isAllowToEngrApproved`)  \n" +
                "VALUES  \n" +
                "(83, 'QPADESCHANGE', '#f5b4b4', 'You have made some changes in QPA REF DES. Please click and verify it by QPA VS REF DES step.', null,  \n" +
                " 1, utc_timestamp(),1, utc_timestamp(), 0, 'QPA REF DES Change', 'You have made some changes in QPA REF DES. Please click and verify it by QPA VS REF DES step.', null,null,  \n" +
                " 0, 83.00, 0, 0,1,1,2);  \n" +
                "  \n" +
                " INSERT INTO `rfq_lineitems_errorcode`  \n" +
                "(`logicID`,`errorCode`,`errorColor`,`description`,`systemVariable`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,  \n" +
                "`isDeleted`,`displayName`,`org_description`,`notes`,`narrative`,`isExternalIssue`,`displayOrder`,`isResearchStatus`,  \n" +
                "`isAssemblyLevelError`,`createByRoleId`,`updateByRoleId`,`isAllowToEngrApproved`)  \n" +
                "VALUES  \n" +
                "(84, 'DNPQPADESCHANGE', '#cc9bf8', 'You have made some changes in DNP QPA REF DES. Please click and verify it by QPA VS REF DES step.', null,  \n" +
                " 1, utc_timestamp(),1, utc_timestamp(), 0, 'DNP QPA REF DES Change', 'You have made some changes in DNP QPA REF DES. Please click and verify it by QPA VS REF DES step.', null,null,  \n" +
                " 0, 84.00, 0, 0,1,1,2);  \n" +
                "  \n" +
                "UPDATE `rfq_lineitems_errorcode`   \n" +
                "SET `description` = 'Customer Approval Pending for QPA REF DES changes.' ,  \n" +
                "`org_description` = 'Customer Approval Pending for QPA REF DES changes.'   \n" +
                "WHERE (`errorCode` = 'CUSTOMERAPPROVALQPAREFDES');  \n" +
                "  \n" +
                "UPDATE `rfq_lineitems_errorcode`   \n" +
                "SET `description` = 'Customer Approval Pending for DNP Qty REF DES Changes.' ,  \n" +
                "`org_description` = 'Customer Approval Pending for DNP Qty REF DES Changes.'   \n" +
                "WHERE (`errorCode` = 'CUSTAPPDNPQPAREFDES');  \n" +
                "  \n" +
                "UPDATE `rfq_lineitems_errorcode`  SET `errorCode` = 'MISMATCHQPADESCOUNT' WHERE (`logicID` = '1');  \n" +
                "UPDATE `rfq_lineitems_errorcode`  SET `errorCode` = 'MISMATCHDNPQPADESCOUNT' WHERE (`logicID` = '68');  \n" +
                /* **************************** Add Script Version -> 16-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4486,'2.00','V1','User Story 32093: BOM Tab improvement Points & QPA VS REF DES Validation improvement related changes - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4486:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 16-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPackagingParts`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackagingParts`(  \n" +
                "    IN pComponentID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	    SELECT 	c.packaginggroupID, c.ID, c.mfgcodeID, c.PIDCode, mfg.mfgCode mfgCode, mfg.mfgName mfgName,  c.mfgPN,  \n" +
                "			c.RoHSStatusID, ro.rohsIcon, ro.name as rohsName, c.mfgPNDescription, c.isCustom,c.isCPN ,c.partType,c.category,  \n" +
                "            c.partPackageID,c.packagingID, cp.name as packagingName, c.packageQty,c.custAssyPN  \n" +
                "	    FROM component c  \n" +
                "        Inner Join mfgcodemst mfg on mfg.id = c.mfgcodeID  \n" +
                "        Inner Join rfq_rohsmst ro on ro.id = c.RoHSStatusID  \n" +
                "        left join component_packagingmst cp on cp.id = c.packagingID  \n" +
                "        where c.id <> pComponentID and c.packaginggroupID = (SELECT packaginggroupID FROM component WHERE id = pComponentID)  \n" +
                "        and c.isDeleted = 0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPIDList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPIDList`(  \n" +
                "	IN pCustomerID VARCHAR(500),  \n" +
                "	IN passyIds VARCHAR (16000),  \n" +
                "	IN pisFromSalesOrder TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE mfgCodeID INT;  \n" +
                "	DECLARE whereClause VARCHAR(500);  \n" +
                "	DECLARE partstatusID INT;  \n" +
                "	SELECT cp.id INTO partstatusID FROM component_partstatusmst cp WHERE cp.name = 'Obsolete';  \n" +
                "	SET whereClause = \"WHERE c.category = 3 AND c.isDeleted = 0\";  \n" +
                "    IF(pisFromSalesOrder = 1)THEN  \n" +
                "		SET whereClause = \"WHERE (c.category = 3 or c.iscustom = 1) AND c.isDeleted = 0\";  \n" +
                "	END IF;  \n" +
                "	IF (SELECT COUNT(1) FROM mfgcodemst WHERE id = pCustomerID AND isCompany = 1)>0 THEN -- fca then default get all assy  \n" +
                "		SET pCustomerID = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pCustomerID IS NOT NULL THEN  \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID);  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND (c.mfgcodeID in (  \n" +
                "														select buyTo from acquireCustomers  \n" +
                "                                                        union  \n" +
                "														select smm.refMfgCodeMstID from supplier_mapping_mst smm  \n" +
                "                                                        where smm.isDeleted = 0 and smm.supplierID = \", pCustomerID, \")) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF passyIds IS NOT NULL THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" or (c.id in (\",passyIds,\") AND c.isDeleted = 0) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(  \n" +
                "			\"SELECT c.id,			c.mfgPN, 		c.PIDCode, 		c.RoHSStatusID, 	c.rohsDeviation,  \n" +
                "					c.rev, 			c.nickName, 	c.assyCode, 	c.id AS partID, 	c.mfgPN,  \n" +
                "                    c.mfgPNDescription AS description,				ro.rohsIcon,        ro.name AS rohsName,  \n" +
                "                    c.mfgCodeID,	c.isCustom,		c.assemblyType, mfg.mfgCode,		c.parttype,  \n" +
                "                    c.category,		mfg.mfgName,	c.specialNote, 	c.liveVersion, 		c.isGoodPart,  \n" +
                "                    c.partStatus, 	c.businessRisk,	u.unitName,		u.id unitID, c.custAssyPN,  \n" +
                "					(SELECT COUNT(rl.id) FROM rfq_lineitems rl WHERE rl.partID = c.id AND rl.isDeleted = 0 ) AS lineItemCount,  \n" +
                "					(SELECT ra.id FROM rfq_assemblies ra WHERE ra.partID = c.id AND ra.isDeleted = 0 LIMIT 1) AS QuoteGroup,  \n" +
                "					CASE c.partStatus WHEN \", partstatusID, \" THEN FALSE ELSE TRUE END AS isActive  \n" +
                "			FROM component c  \n" +
                "			INNER JOIN uoms u ON c.uom = u.id AND u.isDeleted = 0  \n" +
                "			INNER JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "			INNER JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id AND mfg.isDeleted = 0 \", whereClause,' order by c.PIDCode');  \n" +
                "	#select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "    EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRFQLineitemsErrorCode`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRFQLineitemsErrorCode`(    \n" +
                "	IN ppageIndex INT,      \n" +
                "	IN precordPerPage INT,      \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN pCategoryIDs LONGTEXT        \n" +
                ")  \n" +
                "BEGIN    \n" +
                "		DECLARE pOffset INT;      \n" +
                "		DECLARE rowNumWhere VARCHAR(255);      \n" +
                "		DECLARE vTextAngularKeyCode VARCHAR(500);      \n" +
                "        DECLARE vDateTimeDisplayFormat VARCHAR(100);      \n" +
                "		DECLARE vTimeZone VARCHAR(50);      \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;      \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;      \n" +
                "		SELECT fun_DatetimetoUTCDateTime() INTO @utcDatetime;      \n" +
                "		SET vTextAngularKeyCode = fun_getTextAngularKeyCode();                    \n" +
                "        SET @tempQuery = CONCAT(\"SELECT id,(CASE WHEN(rfq_lineitems_errorcode.logicID=1) THEN 'QPA/Designator'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 2) THEN 'MFR Invalid'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 3) THEN 'MFR Verification'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 4) THEN 'Supplier Verification'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 5) THEN 'Invalid MFR-Supplier Mapping'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 6) THEN 'Get MFRPN'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 7) THEN 'MFR Bad Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 8) THEN 'Check Obsolete Parts'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 9) THEN 'MFR PN Invalid'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 10) THEN 'Supplier Invalid'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 11) THEN 'Supplier PN Invalid'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 12) THEN 'Customer Approval'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 13) THEN 'Supplier Bad Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 14) THEN 'Line Merge'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 15) THEN 'RoHS Status'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 16) THEN 'Epoxy'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 17) THEN 'Duplicate REF DES'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 18) THEN 'Invalid REF DES'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 20) THEN 'Pin Mismatch'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 21) THEN 'Duplicate MFR PN'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 22) THEN 'Require Mating Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 23) THEN 'Require Drive Tools Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 24) THEN 'Require Pickup Pad'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 25) THEN 'Restrict Use With Permission'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 26) THEN 'Restrict Use Permanently'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 27) THEN 'Mismatch Mounting Type'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 28) THEN 'Mismatch Functional Category'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 29) THEN 'Mismatch Pitch'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 30) THEN 'Mismatch Tolerance'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 31) THEN 'Mismatch Voltage'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 32) THEN 'Mismatch Package'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 33) THEN 'Mismatch Value'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 34) THEN 'Duplicate CPN with Rev'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 35) THEN 'Require Functional Testing Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 36) THEN 'Require Mounting Type'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 37) THEN 'Require Functional Type'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 39) THEN 'UOM Mismatched'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 40) THEN 'Programming Is Not Included'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 41) THEN 'Mismatch Color'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 42) THEN 'Mismatch Temperature'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 43) THEN 'Mismatch Power'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 50) THEN 'Restrict Use in BOM'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 51) THEN 'Customer Approval For QPA or REF DES'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 52) THEN 'Customer Approval For Buy'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 53) THEN 'Customer Approval For Populate'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 54) THEN 'Mismatch Number Of Rows'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 55) THEN 'Part pin is less then BOM pin'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 56) THEN 'TBD Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 57) THEN 'Restrict CPN Use With Permission'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 58) THEN 'Restrict CPN Use Permanently'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 59) THEN 'Restrict CPN Use in BOM'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 60) THEN 'Export Controlled'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 61) THEN 'Restrict Use in BOM With Permission'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 62) THEN 'TBD Type Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 63) THEN 'Default Invalid MFR'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 64) THEN 'Restrict Use In BOM Excluding Packaging Alias (With Permission)'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 65) THEN 'Restrict Use In BOM Excluding Packaging Alias (Permanently)'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 66) THEN 'Restrict Use Excluding Packaging Alias (Permanently)'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 67) THEN 'Restrict Use Excluding Packaging Alias (With Permission)'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 68) THEN 'DNP Qty vs REF DES'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 69) THEN 'Customer Approval For DNP QPA or REF DES'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 70) THEN 'Customer Approval For Buy Qty'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 71) THEN 'Invalid DNP REF DES'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 72) THEN 'Suggested Good Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 73) THEN 'Suggested Good Supplier Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 74) THEN 'Mismatch Required Programming'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 75) THEN 'Mismatch Custom Part'      \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 76) THEN 'Map Part Program REF DES'          \n" +
                "        WHEN(rfq_lineitems_errorcode.logicID = 77) THEN 'Suggested MFR Mapping'       \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 78) THEN 'Suggested Alternate Part'       \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 79) THEN 'Suggested Packaging Part'       \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 80) THEN 'Suggested Process Material Part'       \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 81) THEN 'Suggested RoHS Replacement Part'    \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 82) THEN 'Mismatch Line and Part Programming'    \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 83) THEN 'QPA REF DES Change'    \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 84) THEN 'DNP QPA REF DES Change'    \n" +
                "		ELSE '' END) AS `logicName`,errorCode, errorColor,  \n" +
                "        fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(createdBy) createdby,  \n" +
                "		fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,              \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,              \n" +
                "		description, systemVariable,logicID, displayName, org_description,                   \n" +
                "        fun_getTextAngularData(narrative,'\",vTextAngularKeyCode,\"') narrative,                  \n" +
                "        isExternalIssue, displayOrder,isResearchStatus,isAssemblyLevelError,isAllowToEngrApproved,     \n" +
                "		(CASE WHEN (`isExternalIssue` = 0) THEN 'No'    \n" +
                "		WHEN (`isExternalIssue` = 1) THEN 'Yes'    \n" +
                "		ELSE ''    \n" +
                "		END) AS `isExternalIssueValue`,                           \n" +
                "		(CASE WHEN (`isResearchStatus` = 0) THEN 'No'    \n" +
                "		WHEN (`isResearchStatus` = 1) THEN 'Yes'    \n" +
                "		ELSE ''    \n" +
                "		END) AS `isResearchStatusValue`,                           \n" +
                "		(CASE WHEN (`isAssemblyLevelError` = 0) THEN 'Line Level'    \n" +
                "		WHEN (`isAssemblyLevelError` = 1) THEN 'Assembly Level'    \n" +
                "		ELSE ''    \n" +
                "		END) AS `isAssemblyLevelErrorValue`,                       \n" +
                "		(CASE WHEN (`isAllowToEngrApproved` = 0) THEN 'No'    \n" +
                "		WHEN (`isAllowToEngrApproved` = 1) THEN 'Yes'                 \n" +
                "		WHEN (`isAllowToEngrApproved` = 2) THEN 'N/A (Not Applicable)'    \n" +
                "		ELSE ''    \n" +
                "		END) AS `isAllowToEngrApprovedValue`,    \n" +
                "		(SELECT COUNT(1) FROM rfq_error_code_category_mapping     \n" +
                "			WHERE errorCodeId = rfq_lineitems_errorcode.id AND isDeleted = 0 )AS RestrictCount    \n" +
                "		FROM `rfq_lineitems_errorcode`    \n" +
                "		WHERE `deletedAt` IS NULL AND IFNULL(isDeleted,0) = 0\");    \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY displayOrder IS NULL ASC, displayOrder, errorCode\") ;          \n" +
                "		ELSE          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "		END IF;	          \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN          \n" +
                "			SET pWhereClause = '1=1' ;          \n" +
                "		END IF;	          \n" +
                "  \n" +
                "		IF (pCategoryIDs IS NOT NULL AND pCategoryIDs != '') THEN     \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND id IN (SELECT m.errorCodeID FROM rfq_error_code_category_mapping m WHERE m.categoryID IN (', pCategoryIDs,') AND m.isDeleted = 0)');        \n" +
                "		END IF;      \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN           \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		          \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
                "		ELSE	          \n" +
                "			SET rowNumWhere = '';          \n" +
                "		END IF;	          \n" +
                "  \n" +
                "			/* to get total count of rows */         \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);        \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;        \n" +
                "			EXECUTE query2;        \n" +
                "			DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c        \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);        \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement2;        \n" +
                "			EXECUTE query1;        \n" +
                "			DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 16-04-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getBomProgressBar`;  \n" +
                "CREATE FUNCTION `fun_getBomProgressBar`(        \n" +
                " pPartID INT        \n" +
                "	) RETURNS int  \n" +
                "BEGIN        \n" +
                "	DECLARE pValidCount INT;        \n" +
                "	DECLARE pTotalCount INT;        \n" +
                "	DECLARE pProgress INT;        \n" +
                "	SET pProgress = 0;        \n" +
                "	-- pTotal count        \n" +
                "	SELECT COUNT(1) INTO pTotalCount FROM rfq_lineitems l        \n" +
                "	WHERE l.partID = pPartID AND        \n" +
                "	l.isDeleted = 0;        \n" +
                "  \n" +
                "	 -- p valid count        \n" +
                "	SELECT COUNT(1) INTO pValidCount FROM (        \n" +
                "			SELECT  l.id AS lineID,        \n" +
                "				max(CASE        \n" +
                "					WHEN        \n" +
                "						IFNULL(l.qpaDesignatorStep,2) = 2 AND        \n" +
                "						IFNULL(l.customerApprovalForQPAREFDESStep,1) = 1 AND        \n" +
                "						IFNULL(l.customerApprovalForBuyStep,1) = 1 AND        \n" +
                "						IFNULL(l.dnpQPARefDesStep,2) = 2 AND            \n" +
                "						IFNULL(l.customerApprovalForDNPBuyStep,1) = 1 AND        \n" +
                "						IFNULL(l.customerApprovalForPopulateStep,1) = 1 AND        \n" +
                "						IFNULL(l.customerApprovalForDNPQPAREFDESStep,1) = 1 AND        \n" +
                "						IFNULL(l.duplicateCPNStep,0) = 1 AND        \n" +
                "						IFNULL(l.restrictCPNUseInBOMStep,0) = 0 AND        \n" +
                "						IFNULL(l.restrictCPNUseWithPermissionStep,0) = 1 AND        \n" +
                "						IFNULL(l.restrictCPNUsePermanentlyStep,0) = 1 AND        \n" +
                "						IFNULL(l.requireFunctionalTypeStep,0) = 1 AND        \n" +
                "						IFNULL(l.requireMountingTypeStep,0) = 1 AND        \n" +
                "						IFNULL(p.mfgVerificationStep,0) = 1 AND        \n" +
                "						IFNULL(p.mfgDistMappingStep,0) = 1 AND        \n" +
                "						IFNULL(p.mfgCodeStep,0) = 1 AND        \n" +
                "						IFNULL(p.distVerificationStep,0) = 1 AND        \n" +
                "						IFNULL(p.distCodeStep,0) = 1 AND        \n" +
                "						IFNULL(p.mfgGoodPartMappingStep,0) = 1 AND        \n" +
                "						IFNULL(p.mfgPNStep,0) = 1 AND        \n" +
                "						IFNULL(p.distPNStep,0) = 1 AND        \n" +
                "						IFNULL(p.distGoodPartMappingStep,0) = 1 AND        \n" +
                "						IFNULL(p.nonRohsStep,0) = 1 AND        \n" +
                "						IFNULL(p.epoxyStep,0) = 1  AND        \n" +
                "						IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND        \n" +
                "						IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND        \n" +
                "						(IFNULL(p.obsoletePartStep,0) = 1 OR(IFNULL(p.obsoletePartStep,0) = 0 AND l.isinstall = 0 AND l.isPurchase = 0 AND (l.isBuyDNPQty = 'C' OR l.isBuyDNPQty = 'N'))) AND       \n" +
                "						#(IFNULL(p.obsoletePartStep,0) = 1 OR (IFNULL(p.obsoletePartStep,0) = 0 AND p.customerApproval = 'A')) AND        \n" +
                "		#				IFNULL(p.mismatchMountingTypeStep,0) = 1   AND       \n" +
                "                       (case when IFNULL(p.mismatchMountingTypeStep,0) = 1 or (IFNULL(p.mismatchMountingTypeStep,0) = 0 and ifnull(approvedMountingType,0) = 1) then 1 else 0 end) AND       \n" +
                "						(case when IFNULL(p.mismatchFunctionalCategoryStep,0) = 1 or (IFNULL(p.mismatchFunctionalCategoryStep,0) = 0 and ifnull(approvedMountingType,0) = 1) then 1 else 0 end) AND       \n" +
                "						IFNULL(p.invalidConnectorTypeStep,0) = 1   AND        \n" +
                "						IFNULL(p.mismatchNumberOfRowsStep,0) = 1   AND        \n" +
                "						IFNULL(p.partPinIsLessthenBOMPinStep,0) = 1   AND        \n" +
                "						IFNULL(p.tbdPartStep,0) = 1   AND        \n" +
                "						IFNULL(p.mismatchColorStep,0) = 1   AND        \n" +
                "						IFNULL(p.restrictUsePermanentlyStep,0) = 1   AND        \n" +
                "						IFNULL(p.restrictUseWithPermissionStep,0) = 1  AND        \n" +
                "						p.restrictUseExcludingAliasStep = 1   AND        \n" +
                "						p.restrictUseExcludingAliasWithPermissionStep = 1  AND        \n" +
                "						IFNULL(p.pickupPadRequiredStep,0) = 1   AND        \n" +
                "						IFNULL(p.matingPartRquiredStep,0) = 1    AND        \n" +
                "						IFNULL(p.driverToolsRequiredStep,0) = 1   AND        \n" +
                "						IFNULL(p.functionalTestingRequiredStep,0) = 1    AND        \n" +
                "						IFNULL(p.uomMismatchedStep,0) = 1   AND        \n" +
                "						IFNULL(p.programingRequiredStep,0) = 1     AND        \n" +
                "						IFNULL(p.defaultInvalidMFRStep,0) = 1     AND        \n" +
                "						p.restrictUseInBOMStep = 0   AND        \n" +
                "						p.restrictUseInBOMWithPermissionStep = 0   AND        \n" +
                "						p.restrictUseInBOMExcludingAliasStep = 0   AND        \n" +
                "						p.restrictUseInBOMExcludingAliasWithPermissionStep = 0   AND        \n" +
                "						IFNULL(p.exportControlledStep,0) = 1   AND        \n" +
                "						IFNULL(p.unknownPartStep,0) = 1   AND        \n" +
                "						(IFNULL(p.customerApproval, 'A')  != 'P' AND IFNULL(suggestedGoodPartStep,1) != 0 AND (IFNULL(p.obsoletePartStep,0) = 1 OR (IFNULL(p.obsoletePartStep,0) = 0 AND (l.isinstall = 0 AND l.isPurchase = 0 AND (l.isBuyDNPQty = 'C' OR l.isBuyDNPQty = 'N' )))))AND        \n" +
                "						p.mismatchRequiredProgrammingStep = 1   AND        \n" +
                "						 CASE WHEN (l.qpa IS NULL AND l.dnpQty IS NULL )OR ((l.qpa IS NULL OR l.qpa = 0)AND l.isPurchase)OR (l.uomID = -1 AND ((l.qpa IS NULL AND l.dnpQty IS NULL )OR (l.refDesig IS NULL AND l.dnpDesig IS NULL))) THEN FALSE ELSE TRUE END        \n" +
                "						-- CASE WHEN l.qpa IS NULL OR (l.uomID = -1 AND (l.qpa IS NULL  OR l.refDesig IS NULL)) THEN FALSE ELSE TRUE END        \n" +
                "					THEN 1        \n" +
                "					ELSE 0        \n" +
                "				END) AS ProgressCount        \n" +
                "				FROM rfq_lineitems l        \n" +
                "				LEFT JOIN rfq_lineitems_alternatepart p ON p.rfqLineItemsID = l.id AND p.partID = pPartID        \n" +
                "				WHERE l.partID = pPartID AND p.mfgPNID IS NOT NULL        \n" +
                "                AND IFNULL(suggestedGoodPartStep,1) = 1        \n" +
                "				AND l.isDeleted = 0 AND p.isDeleted = 0        \n" +
                "				GROUP BY l.lineID          \n" +
                "		) AS b        \n" +
                "		WHERE b.ProgressCount=1;        \n" +
                "  \n" +
                "	IF (pTotalCount IS NULL OR pTotalCount = 0) THEN        \n" +
                "		SET pProgress = 0;        \n" +
                "	ELSE        \n" +
                "		SET pProgress = ((pValidCount * 100) / pTotalCount);        \n" +
                "	END IF;        \n" +
                "	RETURN pProgress;        \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 16-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4487,'2.00','V1','User Story 32093: BOM Tab improvement Points & QPA VS REF DES Validation improvement related changes - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4487:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-04-2021 *********************************** */
                "drop procedure if exists `Sproc_Utility_UpdateOtherChargesForSupplierTransaction`;  \n" +
                "create procedure `Sproc_Utility_UpdateOtherChargesForSupplierTransaction`(  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_finished INTEGER DEFAULT 0;   \n" +
                "    DECLARE v_OtherChargeName varchar(100) default null;  \n" +
                "    DECLARE v_OtherPartName varchar(100) default null;  \n" +
                "    DECLARE v_OtherChargeId INT;  \n" +
                "    DECLARE v_OtherPartId INT;  \n" +
                "  \n" +
                "	DECLARE cur_charge CURSOR FOR   \n" +
                "	select 'Assembly NRE' otherChargeName, 'ASSY NRE' otherPartName union all  \n" +
                "	select 'FAI Report Charge' otherChargeName, 'FAIR' otherPartName union all  \n" +
                "	select 'Freight & Shipping Charge' otherChargeName, 'FREIGHT (SHIPPING) CHARGE' otherPartName union all  \n" +
                "	select 'Misc Charge - Comment Required' otherChargeName, 'MISC CHARGE' otherPartName union all  \n" +
                "	select 'Misc Charge - Labels' otherChargeName, 'MISC CHARGE' otherPartName union all  \n" +
                "	select 'MISC ORDERED ITEM' otherChargeName, 'MISC CHARGE' otherPartName union all  \n" +
                "	select 'PCB NRE Charge' otherChargeName, 'PCB NRE' otherPartName union all  \n" +
                "	select 'Stencil Charge' otherChargeName, 'STENCIL' otherPartName union all  \n" +
                "	select 'Tooling Charge' otherChargeName, 'TOOLING' otherPartName;  \n" +
                "  \n" +
                "    DECLARE CONTINUE HANDLER     \n" +
                "        FOR NOT FOUND SET v_finished = 1;   \n" +
                "  \n" +
                "    OPEN cur_charge;  \n" +
                "    get_part: LOOP  \n" +
                "  \n" +
                "    FETCH cur_charge INTO v_OtherChargeName, v_OtherPartName;  \n" +
                "		IF v_finished = 1 THEN    \n" +
                "			LEAVE get_part;    \n" +
                "		END IF;    \n" +
                "  \n" +
                "	set v_OtherChargeId = null;  \n" +
                "	set v_OtherPartId = null;  \n" +
                "  \n" +
                "	select gencCategoryID into v_OtherChargeId  \n" +
                "	  from genericcategory a  \n" +
                "	 where categoryType = 'Charges Type'  \n" +
                "	   and gencCategoryName = v_OtherChargeName  \n" +
                "	   and isDeleted = 0;  \n" +
                "  \n" +
                "    select id into v_OtherPartId  \n" +
                "	  from component b  \n" +
                "	 where mfgPN = v_OtherPartName  \n" +
                "       and partType = 4/*Other Part Type*/  \n" +
                "       and isDeleted = 0;  \n" +
                "  \n" +
                "	IF v_OtherChargeId is not null and v_OtherPartId is not null THEN  \n" +
                "		update packing_slip_material_receive_det  \n" +
                "           set partID = v_OtherPartId  \n" +
                "         where refChargesTypeId = v_OtherChargeId;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    END LOOP get_part;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4488,'2.00','V1','Task 32710: created Old Data Update script as per production data mapping - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4488:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 16-04-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_RFQ_LineItem_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_BOM_History` AFTER UPDATE ON `rfq_lineitems`   \n" +
                "    FOR EACH ROW BEGIN                                                \n" +
                "	DECLARE pIsUpdateRequired BOOL;                                      \n" +
                "	DECLARE pLiveInternalVersion INT;                                           \n" +
                "	DECLARE oldPartTypeName VARCHAR(50);                                                \n" +
                "	DECLARE oldMountingTypeName VARCHAR(50);                                                \n" +
                "	DECLARE newPartTypeName VARCHAR(50);                                                \n" +
                "	DECLARE newMountingTypeName VARCHAR(50);                                                \n" +
                "	DECLARE oldUOM VARCHAR(50);                                                \n" +
                "	DECLARE newUOM VARCHAR(50);                        \n" +
                "	DECLARE oldSubstitutesAllow VARCHAR(100);                                                \n" +
                "	DECLARE newSubstitutesAllow VARCHAR(100);                        \n" +
                "	DECLARE oldProgramingStatus VARCHAR(50);                                                \n" +
                "	DECLARE newProgramingStatus VARCHAR(50);                                \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);                                \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);                                                   \n" +
                "	DECLARE pCompanyName VARCHAR(100);                                \n" +
                "	DECLARE pErrorNarrative TEXT;            \n" +
                "	DECLARE pErrorDisplayName TEXT;            \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;                \n" +
                "	DECLARE pErrorCode VARCHAR(100);                                           \n" +
                "	DECLARE pRfqAssID INT;                                             \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;                                      \n" +
                "	SET pRfqAssID = NEW.rfqAssyID;                                  \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = New.partID;                           \n" +
                "  \n" +
                "	-- SET pLiveInternalVersion = pLiveInternalVersion + 1;                                      \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';                                    \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN                                \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';                                 \n" +
                "	ELSE                                 \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';                                 \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN                                \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;                                \n" +
                "		ELSE                                 \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;                                \n" +
                "		END IF;                                \n" +
                "	END IF;	                                \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';                                              \n" +
                "  \n" +
                "	IF IFNULL(OLD.lineID, 0) != IFNULL(NEW.lineID, 0) THEN                                      \n" +
                "		SET pIsUpdateRequired = TRUE;                                      \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Item\",                                                \n" +
                "			TRIM(OLD.lineID)+0, TRIM(NEW.lineID)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;	              \n" +
                "  \n" +
                "	IF IFNULL(OLD.cust_lineID, 0) != IFNULL(NEW.cust_lineID, 0) THEN                                      \n" +
                "		SET pIsUpdateRequired = TRUE;                                      \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Customer BOM Line Number\",                                                \n" +
                "			OLD.cust_lineID, NEW.cust_lineID, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;	                                                \n" +
                "  \n" +
                "	IF IFNULL(OLD.qpa, 0) != IFNULL(NEW.qpa, 0) THEN                                            \n" +
                "  \n" +
                "		SET pIsUpdateRequired = TRUE;                                      \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"QPA\",                                                \n" +
                "			TRIM(OLD.qpa)+0, TRIM(NEW.qpa)+0, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "	IF IFNULL(OLD.refDesig, 0) != IFNULL(NEW.refDesig, 0) THEN                                           \n" +
                "		SET pIsUpdateRequired = TRUE;                                      \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"REF DES\",                                                \n" +
                "			CAST(OLD.refDesig AS CHAR), CAST(NEW.refDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "	IF IFNULL(OLD.custPN, 0) != IFNULL(NEW.custPN, 0) THEN                                            \n" +
                "		SET pIsUpdateRequired = TRUE;                                           \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"CPN\",                                                \n" +
                "			CAST(OLD.custPN AS CHAR), CAST(NEW.custPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "	IF IFNULL(OLD.level, 0) != IFNULL(NEW.level, 0) THEN                                         \n" +
                "		SET pIsUpdateRequired = TRUE;                                              \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Level\",                                                \n" +
                "			CAST(OLD.level AS CHAR), CAST(NEW.level AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "	IF IFNULL(OLD.isInstall, 0) != IFNULL(NEW.isInstall, 0) THEN                                          \n" +
                "		SET pIsUpdateRequired = TRUE;                                             \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Populate\",                                                \n" +
                "			CASE WHEN OLD.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CASE WHEN NEW.isInstall = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPurchase, 0) != IFNULL(NEW.isPurchase, 0) THEN                                              \n" +
                "		SET pIsUpdateRequired = TRUE;                                         \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Buy\",                                                \n" +
                "			CASE WHEN OLD.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CASE WHEN NEW.isPurchase = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "	IF IFNULL(OLD.isActive, 0) != IFNULL(NEW.isActive, 0) THEN                                           \n" +
                "		SET pIsUpdateRequired = TRUE;                                      \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Is Active\",                                                \n" +
                "			CASE WHEN OLD.isActive = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CASE WHEN NEW.isActive = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;         \n" +
                "  \n" +
                "	IF IFNULL(OLD.isNotRequiredKitAllocation, 0) != IFNULL(NEW.isNotRequiredKitAllocation, 0) THEN                                              \n" +
                "		SET pIsUpdateRequired = TRUE;                                         \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Kit Allocation not Required\",                                                \n" +
                "			CASE WHEN OLD.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CASE WHEN NEW.isNotRequiredKitAllocation = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF IFNULL(OLD.isSupplierToBuy, 0) != IFNULL(NEW.isSupplierToBuy, 0) THEN                                              \n" +
                "		SET pIsUpdateRequired = TRUE;                                         \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Supplier To Buy\",                                                \n" +
                "			CASE WHEN OLD.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CASE WHEN NEW.isSupplierToBuy = 1 THEN \"Checked\" ELSE \"Unchecked\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                                               \n" +
                "  \n" +
                "	IF IFNULL(OLD.leadQty, 0) != IFNULL(NEW.leadQty, 0) THEN                                            \n" +
                "		SET pIsUpdateRequired = TRUE;                                           \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Lead Qty\",                                                \n" +
                "			CAST(OLD.leadQty AS CHAR), CAST(NEW.leadQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "	IF IFNULL(OLD.attritionRate, 0) != IFNULL(NEW.attritionRate, 0) THEN                                            \n" +
                "		SET pIsUpdateRequired = TRUE;                                      \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Overage %\",                                                \n" +
                "			CAST(OLD.attritionRate AS CHAR), CAST(NEW.attritionRate AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerRev, 0) != IFNULL(NEW.customerRev, 0) THEN                                                 \n" +
                "		SET pIsUpdateRequired = TRUE;                                      \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Rev\",                                                \n" +
                "			CAST(OLD.customerRev AS CHAR), CAST(NEW.customerRev AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "	IF IFNULL(OLD.partclassID, 0) != IFNULL(NEW.partclassID, 0) THEN                                                 \n" +
                "		IF OLD.partclassID != 0                                                \n" +
                "			THEN                                                 \n" +
                "				SELECT partTypeName INTO oldPartTypeName FROM rfq_parttypemst WHERE id = OLD.partTypeID;                                                \n" +
                "				SELECT 'name' INTO oldMountingTypeName FROM rfq_mountingtypemst WHERE id = OLD.partclassID;                                                \n" +
                "			ELSE                                                 \n" +
                "				SET oldPartTypeName = '';                                                \n" +
                "				SET oldMountingTypeName = '';                                                \n" +
                "		END IF;                                                \n" +
                "		IF NEW.partclassID != 0                                                \n" +
                "			THEN                                                 \n" +
                "				SELECT partTypeName INTO newPartTypeName FROM rfq_parttypemst WHERE id = NEW.partTypeID;                                                \n" +
                "				SELECT 'NAME' INTO newMountingTypeName FROM rfq_mountingtypemst WHERE id = NEW.partclassID;                                                \n" +
                "			ELSE                                                 \n" +
                "				SET newPartTypeName = '';                                                \n" +
                "				SET newMountingTypeName = '';                                                \n" +
                "		END IF;                                                \n" +
                "  \n" +
                "		SET pIsUpdateRequired = TRUE;                                      \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Mounting Type\",                                                \n" +
                "			CONCAT(oldPartTypeName,' | ', oldMountingTypeName),                                                \n" +
                "			CONCAT(newPartTypeName,' | ', newMountingTypeName),                                                \n" +
                "			CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerDescription, 0) != IFNULL(NEW.customerDescription, 0) THEN                                                 \n" +
                "		SET pIsUpdateRequired = TRUE;                                      \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Customer Comment\",                                                \n" +
                "			CAST(OLD.customerDescription AS CHAR), CAST(NEW.customerDescription AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "	IF IFNULL(OLD.numOfPosition, 0) != IFNULL(NEW.numOfPosition, 0) THEN                                                 \n" +
                "		SET pIsUpdateRequired = TRUE;                                      \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Pin Per REF DES on PCB\",                                                \n" +
                "			CAST(OLD.numOfPosition AS CHAR), CAST(NEW.numOfPosition AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpQty, 0) != IFNULL(NEW.dnpQty, 0) THEN                                                 \n" +
                "		SET pIsUpdateRequired = TRUE;		                                      \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DPN QTY\",                                                \n" +
                "			CAST(OLD.dnpQty AS CHAR), CAST(NEW.dnpQty AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "	IF IFNULL(OLD.dnpDesig, 0) != IFNULL(NEW.dnpDesig, 0) THEN                                                 \n" +
                "		SET pIsUpdateRequired = TRUE;                                      \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DPN DES\",                                                \n" +
                "			CAST(OLD.dnpDesig AS CHAR), CAST(NEW.dnpDesig AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "	IF IFNULL(OLD.uomID, 0) != IFNULL(NEW.uomID, 0) THEN                                                 \n" +
                "		IF OLD.uomID IS NOT NULL                                                \n" +
                "			THEN                                                 \n" +
                "				SELECT unitName INTO oldUOM FROM uoms WHERE id = OLD.uomID;                                                \n" +
                "			ELSE                                                 \n" +
                "				SET oldUOM = '';                                                \n" +
                "		END IF;                                                \n" +
                "		IF NEW.uomID IS NOT NULL                                                \n" +
                "			THEN                                                 \n" +
                "				SELECT unitName INTO newUOM FROM uoms WHERE id = NEW.uomID;                                                \n" +
                "			ELSE                                                 \n" +
                "				SET newUOM = '';                                                \n" +
                "		END IF;                                                \n" +
                "		SET pIsUpdateRequired = TRUE;                                      \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"UOM\",                                                \n" +
                "			oldUOM,newUOM, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                         \n" +
                "  \n" +
                "	IF IFNULL(OLD.substitutesAllow, 0) != IFNULL(NEW.substitutesAllow, 0) THEN                                                 \n" +
                "		IF OLD.substitutesAllow IS NOT NULL THEN                                           \n" +
                "			IF OLD.substitutesAllow = 3 THEN                       \n" +
                "				SET oldSubstitutesAllow = 'Yes with Customer Approval';                      \n" +
                "			ELSEIF OLD.substitutesAllow = 2 THEN                       \n" +
                "				SET oldSubstitutesAllow = 'No';                      \n" +
                "			ELSE                      \n" +
                "				SET oldSubstitutesAllow = '';                      \n" +
                "			END IF;                                                \n" +
                "		END IF;                                                \n" +
                "		IF NEW.substitutesAllow IS NOT NULL THEN                                               \n" +
                "			IF NEWsubstitutesAllow = 3 THEN                       \n" +
                "				SET newSubstitutesAllow = 'Yes with Customer Approval';                      \n" +
                "			ELSEIF NEW.substitutesAllow = 2 THEN                       \n" +
                "				SET newSubstitutesAllow = 'No';                      \n" +
                "			ELSE                      \n" +
                "				SET newSubstitutesAllow = '';                      \n" +
                "			END IF;                                                \n" +
                "		END IF;                                                \n" +
                "		SET pIsUpdateRequired = TRUE;                                      \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Subs Allowed\",                                                \n" +
                "			oldSubstitutesAllow,newSubstitutesAllow, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                                \n" +
                "  \n" +
                "	IF IFNULL(OLD.programingStatus, 0) != IFNULL(NEW.programingStatus, 0) THEN                                                 \n" +
                "		IF OLD.programingStatus IS NOT NULL THEN                                               \n" +
                "			IF OLD.programingStatus = 1 THEN                       \n" +
                "				SET oldProgramingStatus = 'Pre';                      \n" +
                "			ELSEIF NEW.substitutesAllow = 2 THEN                       \n" +
                "				SET oldProgramingStatus = 'Post';                      \n" +
                "			ELSE                      \n" +
                "				SET oldProgramingStatus = 'N/A';                      \n" +
                "			END IF;                                              \n" +
                "		END IF;                                                \n" +
                "		IF NEW.programingStatus IS NOT NULL THEN                                               \n" +
                "			IF NEW.programingStatus = 1 THEN                       \n" +
                "				SET newProgramingStatus = 'Pre';                      \n" +
                "			ELSEIF NEW.substitutesAllow = 2 THEN                       \n" +
                "				SET newProgramingStatus = 'Post';                      \n" +
                "			ELSE                      \n" +
                "				SET newProgramingStatus = 'N/A';                      \n" +
                "			END IF;                                              \n" +
                "		END IF;                                                \n" +
                "		SET pIsUpdateRequired = TRUE;                                      \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Programing\",                                                \n" +
                "			oldProgramingStatus,newProgramingStatus, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                                              \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refRFQLineItemID, 0) != IFNULL(NEW.refRFQLineItemID, 0) THEN                                                 \n" +
                "		SET pIsUpdateRequired = TRUE;                                      \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Parent Line\",                                                \n" +
                "			CAST(OLD.refRFQLineItemID AS CHAR), CAST(NEW.refRFQLineItemID AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerPartDesc, 0) != IFNULL(NEW.customerPartDesc, 0) THEN                                                 \n" +
                "		SET pIsUpdateRequired = TRUE;                                      \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Customer Part Desc\",                                                \n" +
                "			CAST(OLD.customerPartDesc AS CHAR), CAST(NEW.customerPartDesc AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "	IF IFNULL(OLD.isBuyDNPQty, 0) != IFNULL(NEW.isBuyDNPQty, 0) THEN                                                 \n" +
                "		SET pIsUpdateRequired = TRUE;                                      \n" +
                "		INSERT INTO rfq_assembly_history                                                 \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "			oldValue,newValue,changeVersion,                                                \n" +
                "			createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "		VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"DNP Qty Buy\",                                                \n" +
                "			CASE WHEN OLD.isBuyDNPQty = \"Y\" THEN \"Yes\" WHEN OLD.isBuyDNPQty = \"N\" THEN \"No\" ELSE \"Customer Consigned\" END,       \n" +
                "			CASE WHEN NEW.isBuyDNPQty = \"Y\" THEN \"Yes\" WHEN NEW.isBuyDNPQty = \"N\" THEN \"No\" ELSE \"Customer Consigned\" END, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "	END IF;                                \n" +
                "  \n" +
                "	IF NEW.qpaDesignatorStep IS NOT NULL AND (IFNULL(OLD.qpaDesignatorStep, -1) != IFNULL(NEW.qpaDesignatorStep, -1)) THEN                 	                                \n" +
                "		SET pIsUpdateRequired = TRUE;                                   \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode   \n" +
                "        FROM rfq_lineitems_errorcode   \n" +
                "        WHERE (case when NEW.qpaDesignatorStep = 2 then `logicID` = 83  \n" +
                "        when NEW.qpaDesignatorStep = 3 then `logicID` = 1  \n" +
                "        when NEW.qpaDesignatorStep = 4 then `logicID` = 17  \n" +
                "        when NEW.qpaDesignatorStep = 5 then `logicID` = 18 else `logicID` = 83 end);  \n" +
                "		IF IFNULL(NEW.qpaDesignatorStep, 1) = 1  AND pLiveInternalVersion > 1 THEN                \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');                                             \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		ELSEIF IFNULL(NEW.qpaDesignatorStep, 1) != 1 THEN             \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                                  \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		END IF;                                \n" +
                "	END IF;                                \n" +
                "  \n" +
                "	IF New.duplicateCPNStep IS NOT NULL AND (IFNULL(OLD.duplicateCPNStep, -1) != IFNULL(NEW.duplicateCPNStep, -1)) THEN                 	                                \n" +
                "		SET pIsUpdateRequired = TRUE;                                   \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 34;                                       \n" +
                "		IF OLD.duplicateCPNStep IS NOT NULL AND IFNULL(NEW.duplicateCPNStep, 0) = 1  AND pLiveInternalVersion > 1 THEN                                                 \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');                  \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		ELSEIF IFNULL(NEW.duplicateCPNStep, 0) = 0 THEN              \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                               \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		END IF;                                \n" +
                "	END IF;                                    \n" +
                "  \n" +
                "	IF New.requireMountingTypeStep IS NOT NULL AND (IFNULL(OLD.requireMountingTypeStep, -1) != IFNULL(NEW.requireMountingTypeStep, -1)) THEN                 	                                \n" +
                "		SET pIsUpdateRequired = TRUE;                                   \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 36;                                       \n" +
                "		IF OLD.requireMountingTypeStep IS NOT NULL AND IFNULL(NEW.requireMountingTypeStep, 0) = 1  AND pLiveInternalVersion > 1 THEN                                                 \n" +
                "			CALL Sproc_getErrorMessage(OLD.requireMountingTypeError, pErrorCode, 'Issue Resolved');                  \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		ELSEIF IFNULL(NEW.requireMountingTypeStep, 0) = 0 THEN                          \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireMountingTypeError, pErrorCode, 'Issue Generated');                        \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		END IF;                                \n" +
                "	END IF;                                   \n" +
                "  \n" +
                "	IF New.requireFunctionalTypeStep IS NOT NULL AND (IFNULL(OLD.requireFunctionalTypeStep, -1) != IFNULL(NEW.requireFunctionalTypeStep, -1)) THEN                 	                                \n" +
                "		SET pIsUpdateRequired = TRUE;                                   \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 37;                                       \n" +
                "		IF OLD.requireFunctionalTypeStep IS NOT NULL AND IFNULL(NEW.requireFunctionalTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN                                                 \n" +
                "			CALL Sproc_getErrorMessage(OLD.requireFunctionalTypeError, pErrorCode, 'Issue Resolved');                  \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		ELSEIF IFNULL(NEW.requireFunctionalTypeStep, 0) = 0 THEN                                \n" +
                "			CALL Sproc_getErrorMessage(NEW.requireFunctionalTypeError, pErrorCode, 'Issue Generated');      	            \n" +
                " 			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"component\", NEW.partID, NULL, NULL, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		END IF;                                \n" +
                "	END IF;                       \n" +
                "  \n" +
                "	IF New.restrictCPNUseInBOMStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUseInBOMStep, -1) != IFNULL(NEW.restrictCPNUseInBOMStep, -1)) THEN                 	                                \n" +
                "		SET pIsUpdateRequired = TRUE;                                   \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 59;                                       \n" +
                "		IF OLD.restrictCPNUseInBOMStep IS NOT NULL AND IFNULL(NEW.restrictCPNUseInBOMStep, 0) = 1  AND pLiveInternalVersion > 1 THEN                                                 \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');               \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUseInBOMStep, 0) = 0 THEN                                 \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');               \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		END IF;                                \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF New.restrictCPNUseWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUseWithPermissionStep, -1) != IFNULL(NEW.restrictCPNUseWithPermissionStep, -1)) THEN                 	                                \n" +
                "		SET pIsUpdateRequired = TRUE;                                   \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 57;                                       \n" +
                "		IF OLD.restrictCPNUseWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictCPNUseWithPermissionStep, 0) = 1  AND pLiveInternalVersion > 1 THEN                                                 \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');               \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUseWithPermissionStep, 0) = 0 THEN                                 \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');               \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		END IF;                                \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF New.restrictCPNUsePermanentlyStep IS NOT NULL AND (IFNULL(OLD.restrictCPNUsePermanentlyStep, -1) != IFNULL(NEW.restrictCPNUsePermanentlyStep, -1)) THEN                 	                                \n" +
                "		SET pIsUpdateRequired = TRUE;                                   \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 58;                                       \n" +
                "		IF OLD.restrictCPNUsePermanentlyStep IS NOT NULL AND IFNULL(NEW.restrictCPNUsePermanentlyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN                                                 \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');            \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		ELSEIF IFNULL(NEW.restrictCPNUsePermanentlyStep, 0) = 0 THEN                                 \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');            \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		END IF;                                \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF New.customerApprovalForQPAREFDESStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForQPAREFDESStep, -1) != IFNULL(NEW.customerApprovalForQPAREFDESStep, -1)) THEN                 	                                \n" +
                "		IF OLD.customerApprovalForQPAREFDESStep IS NOT NULL AND IFNULL(NEW.customerApprovalForQPAREFDESStep, 0) = 1  AND pLiveInternalVersion > 1 THEN                                                 \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"QPA or REF DES\",                                                \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				'Approved comments of QPA or REF DES Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForQPAREFDESStep, 0) = 0 THEN                                 \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"QPA or REF DES\",                                                \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				'Customer approval pending for QPA or REF DES Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "		END IF;                                \n" +
                "	END IF;                    \n" +
                "  \n" +
                "	IF New.customerApprovalForBuyStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForBuyStep, -1) != IFNULL(NEW.customerApprovalForBuyStep, -1)) THEN                 	                                \n" +
                "		IF OLD.customerApprovalForBuyStep IS NOT NULL AND IFNULL(NEW.customerApprovalForBuyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN                                                 \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Buy\",                                                \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				'Approved comments of Buy Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForBuyStep, 0) = 0 THEN                                 \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Buy\",                                                \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				'Customer approval pending for Buy Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "		END IF;                                \n" +
                "	END IF;                                        \n" +
                "  \n" +
                "	IF New.customerApprovalForPopulateStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForPopulateStep, -1) != IFNULL(NEW.customerApprovalForPopulateStep, -1)) THEN                 	                                \n" +
                "		IF OLD.customerApprovalForPopulateStep IS NOT NULL AND IFNULL(NEW.customerApprovalForPopulateStep, 0) = 1  AND pLiveInternalVersion > 1 THEN                                                 \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Populate\",                                                \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				'Approved comments of Populate Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForPopulateStep, 0) = 0 THEN                                 \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, \"Populate\",                                                \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				'Customer approval pending for Populate Changes',fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);                                                \n" +
                "		END IF;                                \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF New.dnpQPARefDesStep IS NOT NULL AND (IFNULL(OLD.dnpQPARefDesStep, -1) != IFNULL(NEW.dnpQPARefDesStep, -1)) THEN                 	                                \n" +
                "		SET pIsUpdateRequired = TRUE;                                   \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode   \n" +
                "        FROM rfq_lineitems_errorcode   \n" +
                "        WHERE (case when NEW.dnpQPARefDesStep = 2 then `logicID` = 84  \n" +
                "        when NEW.dnpQPARefDesStep = 3 then `logicID` = 68  \n" +
                "        when NEW.dnpQPARefDesStep = 4 then `logicID` = 17  \n" +
                "        when NEW.dnpQPARefDesStep = 5 then `logicID` = 71 else `logicID` = 84 end);  \n" +
                "		IF OLD.dnpQPARefDesStep IS NOT NULL AND IFNULL(NEW.dnpQPARefDesStep, 1) = 1  AND pLiveInternalVersion > 1 THEN                                                 \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');                  \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		ELSEIF IFNULL(NEW.dnpQPARefDesStep, 1) != 1 THEN              \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                               \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		END IF;                                \n" +
                "	END IF;           \n" +
                "  \n" +
                "	IF New.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForDNPQPAREFDESStep, -1) != IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, -1)) THEN                 	                                \n" +
                "		SET pIsUpdateRequired = TRUE;                                   \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 69;                                       \n" +
                "		IF OLD.customerApprovalForDNPQPAREFDESStep IS NOT NULL AND IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, 0) = 1  AND pLiveInternalVersion > 1 THEN                                                 \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');                  \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForDNPQPAREFDESStep, 0) = 0 THEN              \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                               \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		END IF;                                \n" +
                "	END IF;           \n" +
                "  \n" +
                "	IF New.customerApprovalForDNPBuyStep IS NOT NULL AND (IFNULL(OLD.customerApprovalForDNPBuyStep, -1) != IFNULL(NEW.customerApprovalForDNPBuyStep, -1)) THEN                 	                                \n" +
                "		SET pIsUpdateRequired = TRUE;                                   \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 70;                                       \n" +
                "		IF OLD.customerApprovalForDNPBuyStep IS NOT NULL AND IFNULL(NEW.customerApprovalForDNPBuyStep, 0) = 1  AND pLiveInternalVersion > 1 THEN                                                 \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');                  \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		ELSEIF IFNULL(NEW.customerApprovalForDNPBuyStep, 0) = 0 THEN              \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                               \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		END IF;                                \n" +
                "	END IF;           \n" +
                "  \n" +
                "	IF New.dnpQPARefDesStep IS NOT NULL AND (IFNULL(OLD.dnpQPARefDesStep, -1) = 5) THEN     -- 5 = Invalid desg step            	                                \n" +
                "		SET pIsUpdateRequired = TRUE;                                   \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 71;                                       \n" +
                "		IF OLD.dnpQPARefDesStep IS NOT NULL AND IFNULL(NEW.dnpQPARefDesStep, 1) = 1  AND pLiveInternalVersion > 1 THEN                                                 \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');                  \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		ELSEIF IFNULL(NEW.dnpQPARefDesStep, 1) = 5 THEN              \n" +
                "		CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');                               \n" +
                "			INSERT INTO rfq_assembly_history                                                 \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,                                                \n" +
                "				oldValue,newValue,changeVersion,                                                \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,narrative, isResearchStatus)                                                 \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.id, pRfqAssID, NEW.partID, pErrorDisplayName,                                                \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),                                                \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,pErrorNarrative, pErrorIsResearchStatus);                                                \n" +
                "		END IF;                                \n" +
                "	END IF;                     \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN                                      \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'ref_lineitems', NEW.updatedBy);                                      \n" +
                "	END IF;                                      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItems`(            \n" +
                "	IN ppageIndex INT,            \n" +
                "	IN precordPerPage INT,            \n" +
                "	IN pOrderBy VARCHAR(255),            \n" +
                "	IN pWhereClause VARCHAR(16383),            \n" +
                "	IN pPartID INT,            \n" +
                "	IN pPackaging TINYINT          \n" +
                ")  \n" +
                "BEGIN            \n" +
                "	DECLARE pOffset INT;          \n" +
                "	DECLARE rowNumWhere VARCHAR(255);       \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);       \n" +
                "  \n" +
                "  SET SESSION group_concat_max_len = 5000000000;          \n" +
                "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;        \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS Temp_Sproc_GetRFQLineItems;            \n" +
                "           set @RFQLineItemDetail = concat(\"CREATE TEMPORARY TABLE IF NOT EXISTS Temp_Sproc_GetRFQLineItems AS            \n" +
                "			select  rl.id,  IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep, IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep,          \n" +
                "			IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,          \n" +
                "			rl.lineID,  fun_getAssyPIDCodeByID(rl.custPNID) CPNPID, rl.qpa, rl.refDesig,rl.isPurchase, rl.isInstall, rl.dnpQty, rl.dnpDesig,          \n" +
                "			(CASE WHEN rl.isBuyDNPQty = 'Y' THEN 'YES'           \n" +
                "            WHEN rl.isBuyDNPQty = 'C' THEN 'Customer Consigned'           \n" +
                "            WHEN rl.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'          \n" +
                "            ELSE 'NO' END) AS isBuyDNPQty,          \n" +
                "			fun_getUnitNameByID(rl.uomID) unitName, fun_GetBOMLineMountingType(rl.id) as `name`,          \n" +
                "			CONCAT(GROUP_CONCAT(IFNULL(REPLACE(ra.description,'          \n" +
                "			','<br/>'),'') SEPARATOR '<br/>'),(CASE WHEN GROUP_CONCAT(IFNULL(ra.description,'') SEPARATOR '<br/>') = ''  THEN '' ELSE '<br/>'END), IFNULL(REPLACE(rl.description,'','<br/>'),'')) AS internalComment,            \n" +
                "			rl.numOfPosition, rl.valueAddedCost, com.PIDCode, com.category, rl.cust_lineID, rl.level, rl.uomID,   rl.partID, ra.mfgPNID,          \n" +
                "			b.mfgPN, b.PIDList       \n" +
                "			from rfq_lineitems rl          \n" +
                "			LEFT JOIN rfq_lineitems_alternatepart ra ON rl.id =ra.rfqLineItemsID AND rl.isDeleted = 0            \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND com.isDeleted = 0            \n" +
                "			inner join           \n" +
                "				(select a.id, a.partid,      \n" +
                "                GROUP_CONCAT(DISTINCT(IFNULL(REPLACE(REPLACE(a.PIDCode,',','***'),',','..'),'N/A')),'@@@',      \n" +
                "                a.RoHSStatusID,'@@@',IFNULL(a.name,''),'@@@', IFNULL(a.rohsIcon,''),'@@@',IFNULL(a.isCustom,0),      \n" +
                "                '@@@',REPLACE(IFNULL(a.feature,''),',',''),'@@@',IFNULL(a.partStatusname,''),'@@@',          \n" +
                "				REPLACE(IFNULL(a.partStatusColor,''),',','***'),'@@@',REPLACE(IFNULL(a.partTBD,''),',','***'),'@@@',          \n" +
                "				IFNULL(a.restrictUseInBOMStep,0) ,'@@@',          \n" +
                "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),'@@@',          \n" +
                "				IFNULL(a.restrictUsePermanentlyStep,1) ,'@@@',          \n" +
                "				IFNULL(a.restrictUseWithPermissionStep,1),'@@@',          \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),'@@@',          \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),'@@@',          \n" +
                "				IFNULL(a.restrictUseExcludingAliasStep,1),'@@@',          \n" +
                "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),'@@@',          \n" +
                "				IFNULL(REPLACE(REPLACE(a.description,',','***'),'','<br/>'),''),'@@@','','@@@','','@@@',          \n" +
                "				IFNULL(a.approvedMountingType,0),'@@@',          \n" +
                "				IFNULL(a.mismatchMountingTypeStep,1),'@@@' ,                \n" +
                "				REPLACE(a.mfgPN,',','***'),'@@@',                \n" +
                "				a.mfgCode,'@@@',                \n" +
                "				a.mfgPNID,'@@@',         \n" +
                "                IFNULL(a.isDocumentUpload,0), '@@@',  \n" +
                "                ifnull(a.custAssyPN,'')  \n" +
                "				ORDER BY a.mfgPN asc separator '\",v_GroupConcatSeparator,\"') AS mfgPn ,          \n" +
                "				GROUP_CONCAT(a.PIDCode) PIDList          \n" +
                "				from (          \n" +
                "					SELECT  `z`.`id` AS `id`, `z`.`partid` AS `partid`, `z`.`isBomLine` AS `isBomLine`, `z`.`mfgPNID` AS `mfgPNID`, `z`.`PIDCode` AS `PIDCode`,          \n" +
                "					`z`.`RoHSStatusID` AS `RoHSStatusID`, FUN_GETROHSNAMEBYID(`z`.`RoHSStatusID`) AS `name`, FUN_GETROHSICONBYID(`z`.`RoHSStatusID`) AS `rohsIcon`,          \n" +
                "					FUN_GETPARTSTATUSNAMEBYID(`z`.`partStatus`) AS `partStatusName`, `z`.`approvedMountingType` AS `approvedMountingType`, `z`.`mismatchMountingTypeStep` AS `mismatchMountingTypeStep`,          \n" +
                "					FUN_GETPARTSTATUSCOLORBYID(`z`.`partStatus`) AS `partStatusColor`, FUN_GETPARTTBDDETAILS(`z`.`mfgPNID`) AS `partTBD`, FUN_GETMFGCODEBYID(`z`.`mfgCodeID`) AS `mfgCode`,          \n" +
                "					`z`.`isCustom` AS `iscustom`, `z`.`custAssyPN` as custAssyPN, `z`.`feature` AS `feature`, `z`.`mfgPN` AS `mfgpn`, `z`.`isDocumentUpload` AS `isDocumentUpload`, `z`.`description` AS `description`,          \n" +
                "					MAX(`z`.`restrictUseInBOMStep`) AS `restrictUseInBOMStep`,          \n" +
                "					MAX(`z`.`restrictUseInBOMWithPermissionStep`) AS `restrictUseInBOMWithPermissionStep`,          \n" +
                "					MIN(`z`.`restrictUsePermanentlyStep`) AS `restrictUsePermanentlyStep`,          \n" +
                "					MIN(`z`.`restrictUseWithPermissionStep`) AS `restrictUseWithPermissionStep`,          \n" +
                "					MAX(`z`.`restrictUseInBOMExcludingAliasStep`) AS `restrictUseInBOMExcludingAliasStep`,          \n" +
                "					MAX(`z`.`restrictUseInBOMExcludingAliasWithPermissionStep`) AS `restrictUseInBOMExcludingAliasWithPermissionStep`,          \n" +
                "					MIN(`z`.`restrictUseExcludingAliasStep`) AS `restrictUseExcludingAliasStep`,          \n" +
                "					MIN(`z`.`restrictUseExcludingAliasWithPermissionStep`) AS `restrictUseExcludingAliasWithPermissionStep`          \n" +
                "					FROM          \n" +
                "					(SELECT  `l`.`id` AS `id`, `l`.`partID` AS `partid`, IFNULL(`d`.`id`, `c`.`id`) AS `mfgPNID`,          \n" +
                "							IF((`c`.`id` = IFNULL(`d`.`id`, `c`.`id`)), TRUE, FALSE) AS `isBomLine`,          \n" +
                "							IFNULL(`d`.`mfgcodeID`, `c`.`mfgcodeID`) AS `mfgCodeID`,          \n" +
                "							IFNULL(`d`.`mfgPN`, `c`.`mfgPN`) AS `mfgPN`,          \n" +
                "							IFNULL(`d`.`PIDCode`, `c`.`PIDCode`) AS `PIDCode`,          \n" +
                "							IFNULL(`d`.`RoHSStatusID`, `c`.`RoHSStatusID`) AS `RoHSStatusID`,          \n" +
                "							IFNULL(`d`.`feature`, `c`.`feature`) AS `feature`,          \n" +
                "							IFNULL(`d`.`isCustom`, `c`.`isCustom`) AS `isCustom`,    \n" +
                "                            IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,    \n" +
                "							IFNULL(`d`.`partStatus`, `c`.`partStatus`) AS `partStatus`,          \n" +
                "							IFNULL(`al`.`restrictUseInBOMStep`, 0) AS `restrictUseInBOMStep`,          \n" +
                "							IFNULL(`al`.`restrictUseInBOMWithPermissionStep`, 0) AS `restrictUseInBOMWithPermissionStep`,          \n" +
                "							IF((`c`.`id` = IFNULL(`d`.`id`, `c`.`id`)), `al`.`description`, '') AS `description`,          \n" +
                "							(CASE          \n" +
                "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUsePermanentlyStep`, 1)          \n" +
                "								ELSE (CASE          \n" +
                "									WHEN (IFNULL(`d`.`restrictUsePermanently`, 0) = 1) THEN 0          \n" +
                "									ELSE 1          \n" +
                "								END)          \n" +
                "							END) AS `restrictUsePermanentlyStep`,          \n" +
                "							IFNULL(`al`.`restrictUseWithPermissionStep`, 1) AS `restrictUseWithPermissionStep`,          \n" +
                "							(CASE          \n" +
                "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUseInBOMExcludingAliasStep`, 0)          \n" +
                "								ELSE (CASE          \n" +
                "									WHEN ((((IFNULL(`d`.`restrictUsePermanently`, 0) + IFNULL(`d`.`restrictUSEwithpermission`, 0)) + IFNULL(`d`.`restrictPackagingUsePermanently`, 0)) + IFNULL(`d`.`restrictPackagingUseWithpermission`, 0)) > 0) THEN 1          \n" +
                "									ELSE 0          \n" +
                "								END)          \n" +
                "							END) AS `restrictUseInBOMExcludingAliasStep`,          \n" +
                "							(CASE          \n" +
                "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUseInBOMExcludingAliasWithPermissionStep`, 0)          \n" +
                "								ELSE (CASE          \n" +
                "									WHEN ((((IFNULL(`d`.`restrictUsePermanently`, 0) + IFNULL(`d`.`restrictUSEwithpermission`, 0)) + IFNULL(`d`.`restrictPackagingUsePermanently`, 0)) + IFNULL(`d`.`restrictPackagingUseWithpermission`, 0)) > 0) THEN 1          \n" +
                "									ELSE 0          \n" +
                "								END)          \n" +
                "							END) AS `restrictUseInBOMExcludingAliasWithPermissionStep`,          \n" +
                "							(CASE          \n" +
                "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUseExcludingAliasStep`, 1)          \n" +
                "								ELSE (CASE          \n" +
                "									WHEN ((((IFNULL(`d`.`restrictUsePermanently`, 0) + IFNULL(`d`.`restrictUSEwithpermission`, 0)) + IFNULL(`d`.`restrictPackagingUsePermanently`, 0)) + IFNULL(`d`.`restrictPackagingUseWithpermission`, 0)) > 0) THEN 0          \n" +
                "									ELSE 1          \n" +
                "								END)          \n" +
                "							END) AS `restrictUseExcludingAliasStep`,          \n" +
                "							(CASE          \n" +
                "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUseExcludingAliasWithPermissionStep`, 1)          \n" +
                "								ELSE (CASE          \n" +
                "									WHEN ((((IFNULL(`d`.`restrictUsePermanently`, 0) + IFNULL(`d`.`restrictUSEwithpermission`, 0)) + IFNULL(`d`.`restrictPackagingUsePermanently`, 0)) + IFNULL(`d`.`restrictPackagingUseWithpermission`, 0)) > 0) THEN 0          \n" +
                "									ELSE 1          \n" +
                "								END)          \n" +
                "							END) AS `restrictUseExcludingAliasWithPermissionStep`,          \n" +
                "							IFNULL(`al`.`approvedMountingType`, 0) AS `approvedMountingType`,          \n" +
                "							IFNULL(`al`.`mismatchMountingTypeStep`, 1) AS `mismatchMountingTypeStep`,          \n" +
                "							IFNULL(`ccl`.`isDocumentUpload`, IFNULL(`ccld`.`isDocumentUpload`, 0)) AS `isDocumentUpload`          \n" +
                "					FROM `rfq_lineitems` `l`          \n" +
                "					JOIN `rfq_lineitems_alternatepart` `al` ON `l`.`id` = `al`.`rfqLineItemsID` AND `l`.`isDeleted` = 0 AND `al`.`isDeleted` = 0          \n" +
                "						AND `al`.`mfgPNID` IS NOT NULL          \n" +
                "					JOIN `component` `c` ON `al`.`mfgPNID` = `c`.`id`          \n" +
                "					LEFT JOIN `component` `d` ON `c`.`packaginggroupID` = `d`.`packaginggroupID`          \n" +
                "						AND NOT EXISTS (SELECT  1 FROM `rfq_lineitems_alternatepart` `x`          \n" +
                "						WHERE `x`.`rfqLineItemsID` = `al`.`rfqLineItemsID` AND `x`.`mfgPNID` = `d`.`id` AND `d`.`id` <> `c`.`id` and `x`.`isDeleted` = 0)                      \n" +
                "					LEFT JOIN `component_customer_loa` `ccl` ON `ccl`.`componentID` = `c`.`id`          \n" +
                "						AND `ccl`.`customerID` = (SELECT `component`.`mfgcodeID` FROM `component` WHERE `component`.`id` = `l`.`partID`)          \n" +
                "						AND `ccl`.`isDeleted` = 0          \n" +
                "					LEFT JOIN `component_customer_loa` `ccld` ON `ccld`.`componentID` = `d`.`id`          \n" +
                "						AND `ccld`.`customerID` = (SELECT  `component`.`mfgcodeID` FROM `component` WHERE `component`.`id` = `l`.`partID`)           \n" +
                "						AND `ccld`.`isDeleted` = 0          \n" +
                "						where l.partID = \", pPartID ,\"          \n" +
                "				) `z`          \n" +
                "				GROUP BY `z`.`id` , `z`.`partid` , `z`.`isBomLine` , `z`.`mfgPNID` , `z`.`mfgCodeID` , `z`.`PIDCode` , `z`.`RoHSStatusID` , `z`.`description` , `z`.`partStatus` , `z`.`approvedMountingType` , `z`.`mismatchMountingTypeStep` , `z`.`isCustom` , `z`.`feature` , `z`.`mfgPN` , `z`.`isDocumentUpload`                          \n" +
                "				) a          \n" +
                "			where partID = \", pPartID,\" and (case when \",pPackaging,\" = 1 then 1=1 else a.isBomLine = 1 end)          \n" +
                "				Group by id, partid           \n" +
                "			) b on rl.id = b.id          \n" +
                "			WHERE  rl.partID = \", pPartID ,\" and ra.mfgPNID is not null and ra.isDeleted = 0               \n" +
                "			GROUP BY rl.id            \n" +
                "			ORDER BY rl.lineID \");           \n" +
                "  \n" +
                "            PREPARE RFQLineItemDetail FROM @RFQLineItemDetail;            \n" +
                "			EXECUTE RFQLineItemDetail;            \n" +
                "			DEALLOCATE PREPARE RFQLineItemDetail;      \n" +
                "  \n" +
                "			IF (pOrderBy IS NOT NULL) THEN            \n" +
                "				SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
                "			ELSE            \n" +
                "				SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;            \n" +
                "			END IF;            \n" +
                "  \n" +
                "  \n" +
                "			IF(pWhereClause IS NULL OR pWhereClause = '') THEN            \n" +
                "				SET pWhereClause = '1=1' ;            \n" +
                "			END IF;            \n" +
                "  \n" +
                "  \n" +
                "			IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN            \n" +
                "				SET pOffset = (ppageIndex -1) * precordPerPage;            \n" +
                "				SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
                "			ELSE            \n" +
                "				SET rowNumWhere = '';            \n" +
                "			END IF;            \n" +
                "  \n" +
                "  \n" +
                "			/* to get total count of rows */            \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM Temp_Sproc_GetRFQLineItems where \", pWhereClause );            \n" +
                "			PREPARE query1 FROM @SQLStatement1;            \n" +
                "			EXECUTE query1;            \n" +
                "			DEALLOCATE PREPARE query1;            \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM Temp_Sproc_GetRFQLineItems where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
                "			PREPARE query2 FROM @SQLStatement2;      \n" +
                "			EXECUTE query2;      \n" +
                "			DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "			SET @SQLStatement3= (SELECT fun_getRestrictedPartsinPlannBOM(IFNULL(pPartID,0)));            \n" +
                "			PREPARE query3 FROM @SQLStatement3;            \n" +
                "			EXECUTE query3;            \n" +
                "			DEALLOCATE PREPARE query3;            \n" +
                "			DROP TEMPORARY TABLE Temp_Sproc_GetRFQLineItems;            \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 16-04-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineMFGPN_New`;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineMFGPN_New`(          \n" +
                "  pIsPackaging TINYINT,               \n" +
                "  pRfqAssyID INT,                \n" +
                "  pCustomerID INT                \n" +
                "	) RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN          \n" +
                "	DECLARE result TEXT;      \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);       \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;        \n" +
                "		SELECT  CONCAT('(SELECT                 \n" +
                "			GROUP_CONCAT(                \n" +
                "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',                \n" +
                "				a.RoHSStatusID,''@@@'',                \n" +
                "				IFNULL(a.name,\"\"),''@@@'',                        \n" +
                "				IFNULL(a.rohsIcon,\"\"),''@@@'',                \n" +
                "				IFNULL(a.isCustom,\"\"),''@@@'',                \n" +
                "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',                \n" +
                "				IFNULL(a.partStatusName,\"\"),''@@@'',             \n" +
                "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',                \n" +
                "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',                        \n" +
                "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',                        \n" +
                "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',                        \n" +
                "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',                         \n" +
                "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',                        \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',                        \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',                        \n" +
                "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',                        \n" +
                "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'','''',''@@@'','''',''@@@'',                    \n" +
                "				IFNULL(a.approvedMountingType,0),''@@@'',                        \n" +
                "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,                \n" +
                "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',                \n" +
                "				a.mfgCode,''@@@'',                \n" +
                "				a.mfgPNID,''@@@'',                \n" +
                "				IFNULL(a.isDocumentUpload,0), ''@@@'',  \n" +
                "                ifnull(a.custAssyPN,'''') SEPARATOR \"', v_GroupConcatSeparator ,'\")                    \n" +
                "			FROM                        \n" +
                "			( select z.mfgPNID ,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,            \n" +
                "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,approvedMountingType,mismatchMountingTypeStep,fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,            \n" +
                "						fun_getPartTBDDetails(z.mfgPNID) partTBD,             \n" +
                "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  z.feature, z.mfgpn,z.isDocumentUpload,            \n" +
                "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,            \n" +
                "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,            \n" +
                "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,            \n" +
                "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,            \n" +
                "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,            \n" +
                "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,            \n" +
                "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,            \n" +
                "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep            \n" +
                "						  from             \n" +
                "							(SELECT IFNULL(d.id,c.id) AS mfgPNID ,            \n" +
                "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,            \n" +
                "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,                 \n" +
                "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,                \n" +
                "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,   \n" +
                "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,    \n" +
                "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/	                \n" +
                "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,                \n" +
                "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */            \n" +
                "										IFNULL(al.restrictUsePermanentlyStep,1)               \n" +
                "									ELSE    /*Packaging Alias*/             \n" +
                "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/                   \n" +
                "									END AS restrictUsePermanentlyStep,             \n" +
                "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */                   \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/            \n" +
                "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/            \n" +
                "									ELSE                 \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */            \n" +
                "									END AS restrictUseInBOMExcludingAliasStep,                \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/            \n" +
                "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)             \n" +
                "									ELSE     /*Packaging Alias*/            \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */            \n" +
                "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,                \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/                 \n" +
                "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/             \n" +
                "									ELSE                 \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */            \n" +
                "									END AS restrictUseExcludingAliasStep,                 \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/                \n" +
                "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/             \n" +
                "									ELSE                 \n" +
                "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */            \n" +
                "									END AS restrictUseExcludingAliasWithPermissionStep,                 \n" +
                "									IFNULL(al.approvedMountingType,0) approvedMountingType,                \n" +
                "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,                \n" +
                "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload                \n" +
                "									FROM rfq_consolidated_mfgpn_lineitem_alternate  al                \n" +
                "									JOIN rfq_consolidated_mfgpn_lineitem l ON  l.id = al.consolidateID                \n" +
                "									JOIN component c ON al.mfgPNID = c.id                \n" +
                "									LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid                 \n" +
                "									and  not exists ( select 1  from  rfq_consolidated_mfgpn_lineitem_alternate x              \n" +
                "													where  x.consolidateID  =  al.consolidateID              \n" +
                "															 and x.mfgpnid = d.id            \n" +
                "															 and d.id != c.id and `x`.`isdeleted` = 0)            \n" +
                "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID = ',pCustomerID,' AND ccl.isDeleted = 0            \n" +
                "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID = ',pCustomerID,' AND ccld.isDeleted = 0               \n" +
                "									WHERE l.rfqAssyid = ', pRfqAssyID,'                \n" +
                "									AND l.id = rl.id AND al.isDeleted = 0 ',            \n" +
                "									CASE WHEN (pIsPackaging = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'               \n" +
                "							) z group by  z.mfgPNID ,z.mfgCodeID,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload            \n" +
                "					) a                        \n" +
                "  		) AS mfgPN')  INTO @result;          \n" +
                "	SET result = @result;          \n" +
                "	RETURN result;          \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 16-04-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getBomProgressBar`;  \n" +
                "CREATE FUNCTION `fun_getBomProgressBar`(        \n" +
                " pPartID INT        \n" +
                "	) RETURNS int  \n" +
                "BEGIN        \n" +
                "	DECLARE pValidCount INT;        \n" +
                "	DECLARE pTotalCount INT;        \n" +
                "	DECLARE pProgress INT;        \n" +
                "	SET pProgress = 0;        \n" +
                "	-- pTotal count        \n" +
                "	SELECT COUNT(1) INTO pTotalCount FROM rfq_lineitems l        \n" +
                "	WHERE l.partID = pPartID AND        \n" +
                "	l.isDeleted = 0;        \n" +
                "  \n" +
                "	 -- p valid count        \n" +
                "	SELECT COUNT(1) INTO pValidCount FROM (        \n" +
                "			SELECT  l.id AS lineID,        \n" +
                "				max(CASE        \n" +
                "					WHEN        \n" +
                "						IFNULL(l.qpaDesignatorStep,1) = 1 AND        \n" +
                "						IFNULL(l.customerApprovalForQPAREFDESStep,1) = 1 AND        \n" +
                "						IFNULL(l.customerApprovalForBuyStep,1) = 1 AND        \n" +
                "						IFNULL(l.dnpQPARefDesStep,1) = 1 AND            \n" +
                "						IFNULL(l.customerApprovalForDNPBuyStep,1) = 1 AND        \n" +
                "						IFNULL(l.customerApprovalForPopulateStep,1) = 1 AND        \n" +
                "						IFNULL(l.customerApprovalForDNPQPAREFDESStep,1) = 1 AND        \n" +
                "						IFNULL(l.duplicateCPNStep,0) = 1 AND        \n" +
                "						IFNULL(l.restrictCPNUseInBOMStep,0) = 0 AND        \n" +
                "						IFNULL(l.restrictCPNUseWithPermissionStep,0) = 1 AND        \n" +
                "						IFNULL(l.restrictCPNUsePermanentlyStep,0) = 1 AND        \n" +
                "						IFNULL(l.requireFunctionalTypeStep,0) = 1 AND        \n" +
                "						IFNULL(l.requireMountingTypeStep,0) = 1 AND        \n" +
                "						IFNULL(p.mfgVerificationStep,0) = 1 AND        \n" +
                "						IFNULL(p.mfgDistMappingStep,0) = 1 AND        \n" +
                "						IFNULL(p.mfgCodeStep,0) = 1 AND        \n" +
                "						IFNULL(p.distVerificationStep,0) = 1 AND        \n" +
                "						IFNULL(p.distCodeStep,0) = 1 AND        \n" +
                "						IFNULL(p.mfgGoodPartMappingStep,0) = 1 AND        \n" +
                "						IFNULL(p.mfgPNStep,0) = 1 AND        \n" +
                "						IFNULL(p.distPNStep,0) = 1 AND        \n" +
                "						IFNULL(p.distGoodPartMappingStep,0) = 1 AND        \n" +
                "						IFNULL(p.nonRohsStep,0) = 1 AND        \n" +
                "						IFNULL(p.epoxyStep,0) = 1  AND        \n" +
                "						IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND        \n" +
                "						IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND        \n" +
                "						(IFNULL(p.obsoletePartStep,0) = 1 OR(IFNULL(p.obsoletePartStep,0) = 0 AND l.isinstall = 0 AND l.isPurchase = 0 AND (l.isBuyDNPQty = 'C' OR l.isBuyDNPQty = 'N'))) AND       \n" +
                "						#(IFNULL(p.obsoletePartStep,0) = 1 OR (IFNULL(p.obsoletePartStep,0) = 0 AND p.customerApproval = 'A')) AND        \n" +
                "		#				IFNULL(p.mismatchMountingTypeStep,0) = 1   AND       \n" +
                "                       (case when IFNULL(p.mismatchMountingTypeStep,0) = 1 or (IFNULL(p.mismatchMountingTypeStep,0) = 0 and ifnull(approvedMountingType,0) = 1)    \n" +
                "then 1 else 0 end)    \n" +
                " AND       \n" +
                "						(case when IFNULL(p.mismatchFunctionalCategoryStep,0) = 1 or (IFNULL(p.mismatchFunctionalCategoryStep,0) = 0 and ifnull(approvedMountingType,0) = 1)    \n" +
                "then 1 else 0 end)    \n" +
                " AND       \n" +
                "						IFNULL(p.invalidConnectorTypeStep,0) = 1   AND        \n" +
                "						IFNULL(p.mismatchNumberOfRowsStep,0) = 1   AND        \n" +
                "						IFNULL(p.partPinIsLessthenBOMPinStep,0) = 1   AND        \n" +
                "						IFNULL(p.tbdPartStep,0) = 1   AND        \n" +
                "						IFNULL(p.mismatchColorStep,0) = 1   AND        \n" +
                "						IFNULL(p.restrictUsePermanentlyStep,0) = 1   AND        \n" +
                "						IFNULL(p.restrictUseWithPermissionStep,0) = 1  AND        \n" +
                "						p.restrictUseExcludingAliasStep = 1   AND        \n" +
                "						p.restrictUseExcludingAliasWithPermissionStep = 1  AND        \n" +
                "						IFNULL(p.pickupPadRequiredStep,0) = 1   AND        \n" +
                "						IFNULL(p.matingPartRquiredStep,0) = 1    AND        \n" +
                "						IFNULL(p.driverToolsRequiredStep,0) = 1   AND        \n" +
                "						IFNULL(p.functionalTestingRequiredStep,0) = 1    AND        \n" +
                "						IFNULL(p.uomMismatchedStep,0) = 1   AND        \n" +
                "						IFNULL(p.programingRequiredStep,0) = 1     AND        \n" +
                "						IFNULL(p.defaultInvalidMFRStep,0) = 1     AND        \n" +
                "						p.restrictUseInBOMStep = 0   AND        \n" +
                "						p.restrictUseInBOMWithPermissionStep = 0   AND        \n" +
                "						p.restrictUseInBOMExcludingAliasStep = 0   AND        \n" +
                "						p.restrictUseInBOMExcludingAliasWithPermissionStep = 0   AND        \n" +
                "						IFNULL(p.exportControlledStep,0) = 1   AND        \n" +
                "						IFNULL(p.unknownPartStep,0) = 1   AND        \n" +
                "						(IFNULL(p.customerApproval, 'A')  != 'P' AND IFNULL(suggestedGoodPartStep,1) != 0 AND (IFNULL(p.obsoletePartStep,0) = 1 OR (IFNULL(p.obsoletePartStep,0) = 0 AND (l.isinstall = 0 AND l.isPurchase = 0 AND (l.isBuyDNPQty = 'C' OR l.isBuyDNPQty = 'N' )))))AND        \n" +
                "						p.mismatchRequiredProgrammingStep = 1   AND        \n" +
                "						 CASE WHEN (l.qpa IS NULL AND l.dnpQty IS NULL )OR ((l.qpa IS NULL OR l.qpa = 0)AND l.isPurchase)OR (l.uomID = -1 AND ((l.qpa IS NULL AND l.dnpQty IS NULL )OR (l.refDesig IS NULL AND l.dnpDesig IS NULL))) THEN FALSE ELSE TRUE END        \n" +
                "						-- CASE WHEN l.qpa IS NULL OR (l.uomID = -1 AND (l.qpa IS NULL  OR l.refDesig IS NULL)) THEN FALSE ELSE TRUE END        \n" +
                "					THEN 1        \n" +
                "					ELSE 0        \n" +
                "				END) AS ProgressCount        \n" +
                "				FROM rfq_lineitems l        \n" +
                "				LEFT JOIN rfq_lineitems_alternatepart p ON p.rfqLineItemsID = l.id AND p.partID = pPartID        \n" +
                "				WHERE l.partID = pPartID AND p.mfgPNID IS NOT NULL        \n" +
                "                AND IFNULL(suggestedGoodPartStep,1) = 1        \n" +
                "				AND l.isDeleted = 0 AND p.isDeleted = 0        \n" +
                "				GROUP BY l.lineID          \n" +
                "		) AS b        \n" +
                "		WHERE b.ProgressCount=1;        \n" +
                "  \n" +
                "	IF (pTotalCount IS NULL OR pTotalCount = 0) THEN        \n" +
                "		SET pProgress = 0;        \n" +
                "	ELSE        \n" +
                "		SET pProgress = ((pValidCount * 100) / pTotalCount);        \n" +
                "	END IF;        \n" +
                "	RETURN pProgress;        \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 16-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyBOMHeaderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyBOMHeaderList`(      \n" +
                "	IN prfqAssyID INT      \n" +
                ")  \n" +
                "BEGIN       \n" +
                "DECLARE vAssyLevel INT;      \n" +
                "DECLARE	vAssyCount INT;      \n" +
                "DECLARE vQuoteCount INT;      \n" +
                "		SELECT (MAX(psar.LEVEL)+1) INTO vAssyLevel       \n" +
                "        FROM rfq_assemblies ra       \n" +
                "        JOIN part_sub_assy_relationship psar ON psar.partID = ra.partID AND psar.isdeleted = 0      \n" +
                "        WHERE ra.id = prfqAssyID;      \n" +
                "  \n" +
                "        SELECT COUNT(1) INTO vAssyCount FROM rfq_assemblies       \n" +
                "        WHERE rfqrefID = (SELECT rfqrefID FROM rfq_assemblies WHERE id = prfqAssyID AND isdeleted=0) AND isdeleted = 0;      \n" +
                "  \n" +
                "        SELECT COUNT(1) INTO vQuoteCount FROM rfq_assemblies_quotation_submitted raqs WHERE raqs.rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL AND isDeleted = 0;      \n" +
                "	   SELECT   ra.rfqrefID AS quoteGroupNumber,ra.quoteinDate,ra.quoteDueDate,ra.partID,ra.quoteFinalStatus, ra.isSummaryComplete, c.mfgpn AS assyNumber,c.rev AS revision,      \n" +
                "	   jt.name AS jobType, CASE WHEN c.bomLock=0 THEN '' ELSE 'BOM is locked' END bomlockStatus,      \n" +
                "	   c.PIDCode AS assyID,c.mfgPNDescription,c.specialNote,ra.assemblyTypeID,rat.name AS assyType,      \n" +
                "       fun_getSamplePicturesUploadCount(ra.partID) sampleImageCnt, mc.mfgType AS mfgType, vAssyLevel AS assyLevel, vAssyCount AS assyCount,      \n" +
                "	   c.liveVersion AS liveInternalVersion,rh.id,rh.name AS rohs,rh.rohsIcon,c.rev,c.nickname,c.businessRisk,      \n" +
                "	   vQuoteCount AS totalQuoteCount,      \n" +
                "	   rasq.quoteNumber AS quoteNumber, rasq.bomLastVersion AS bomLastVersion, rasq.quoteSubmitDate AS quoteSubmitDate, rasq.bomInternalVersion  AS bomInternalVersion,    \n" +
                "	   (SELECT fun_getMfgCodeAndNameByID(rf.customerid) FROM rfqforms rf WHERE id=ra.rfqrefID LIMIT 1) AS customerName,     \n" +
                "	   (CASE WHEN ra.status = 1 THEN 'In Progress'      \n" +
                "			  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'      \n" +
                "			  WHEN ra.status = 3 THEN 'Won'      \n" +
                "			  WHEN ra.status = 4 THEN 'Lost'      \n" +
                "		 WHEN ra.status = 5 THEN 'Canceled' END) `status` ,      \n" +
                "	   (CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending'      \n" +
                "		 WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote'      \n" +
                "	 	 WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'      \n" +
                "		 WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,      \n" +
                "         (      \n" +
                "			CASE  WHEN IFNULL(ra.isSummaryComplete,0)=0 THEN      \n" +
                "			(      \n" +
                "                SELECT GROUP_CONCAT(CONCAT(IFNULL(cs.fullName,''),' ',IFNULL(css.className,''), '######', IFNULL(css.colorCode,'')) ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@')      \n" +
                "                FROM component_standard_details csd      \n" +
                "                LEFT JOIN certificate_standards cs ON csd.certificatestandardID=cs.certificatestandardid      \n" +
                "                LEFT JOIN standard_class css ON csd.classID=css.classID WHERE csd.componentid= ra.partID AND csd.isDeleted = 0      \n" +
                "			)      \n" +
                "            ELSE      \n" +
                "            (      \n" +
                "				SELECT GROUP_CONCAT(CONCAT(IFNULL(cs.fullName,''),' ',IFNULL(css.className,''), '######', IFNULL(css.colorCode,'')) ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC SEPARATOR '@@@@@@')      \n" +
                "                FROM rfq_assy_standard_class_detail csd      \n" +
                "                LEFT JOIN certificate_standards cs ON csd.standardID=cs.certificatestandardid      \n" +
                "                LEFT JOIN standard_class css ON csd.standardClassIds=css.classID      \n" +
                "                WHERE csd.refSubmittedQuoteID=(SELECT id FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1)      \n" +
                "			)      \n" +
                "			END      \n" +
                "		)AS standards, ra.isActivityStart, ra.activityStartBy, c.isCustom,c.custAssyPN      \n" +
                "	   FROM rfq_assemblies ra      \n" +
                "       INNER JOIN component c ON c.id=ra.partID       \n" +
                "       INNER JOIN mfgcodemst mc ON mc.id = c.mfgCodeID      \n" +
                "       INNER JOIN rfq_assy_typemst rat ON rat.id=ra.assemblyTypeID       \n" +
                "	   INNER JOIN rfq_rohsmst rh ON rh.id=c.RoHSStatusID       \n" +
                "	   INNER JOIN jobtype jt ON jt.id = ra.jobTypeID      \n" +
                "       LEFT JOIN (SELECT id,rfqAssyID,quoteNumber,bomLastVersion,bomInternalVersion,quoteSubmitDate       \n" +
                "					FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL ORDER BY id DESC LIMIT 1) rasq ON rasq.rfqAssyID = ra.id      \n" +
                "       WHERE ra.id= prfqAssyID AND ra.isdeleted=0;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS  `Sproc_getAlternatePartList`;  \n" +
                "CREATE PROCEDURE `Sproc_getAlternatePartList`(                           \n" +
                "IN pconsolidateID  INT,        \n" +
                "IN pisPurchaseApi TINYINT                          \n" +
                ")  \n" +
                "BEGIN        \n" +
                "IF(pisPurchaseApi=0)THEN                \n" +
                "SET @SQLStatement1 = CONCAT(\"SELECT a.* FROM                        \n" +
                "						(SELECT c.PIDCode,c.imageURL, c.documentPath      \n" +
                "								,fun_getUnitNameByID(c.uom) unitName                     \n" +
                "								,c.RoHSStatusID                        \n" +
                "								,c.mfgCodeID                        \n" +
                "								,fun_getRoHSNameByID(c.RoHSStatusID) name                        \n" +
                "								,fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,c.feature,fun_getPartStatusNameByID(c.partStatus) gencCategoryName,c.partStatus gencCategoryID,c.mfgPNDescription,c.partPackage,c.noOfPosition,c.noOfRows,c.packageQty,c.uom,                        \n" +
                "								mg.mfgCode,mg.mfgName,mg.mfgType,c.mfgPN,0 isPackaging,c.id AS mfgPNID,c.mountingtypeID,c.functionalCategoryID,fun_getMountingTypeNameByID(c.mountingtypeID) mountName,fun_getPartTypeNameByID(c.functionalCategoryID) partTypeName,c.unit,c.connecterTypeID,rla.customerApproval,rla.approvedMountingType,rla.mismatchMountingTypeStep,  \n" +
                "                                c.isCustom,c.custAssyPN  \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate rla LEFT JOIN                                                                         \n" +
                "						component c ON rla.mfgpnid=c.id  LEFT JOIN                        \n" +
                "						mfgcodemst mg ON mg.id=c.mfgcodeID AND mg.isDeleted=0        \n" +
                "						WHERE rla.consolidateID=\",pconsolidateID,\" AND rla.isdeleted=0                        \n" +
                "						UNION                        \n" +
                "						SELECT c.PIDCode,c.imageURL,c.documentPath,fun_getUnitNameByID(c.uom) unitName,c.RoHSStatusID,c.mfgCodeID,fun_getRoHSNameByID(c.RoHSStatusID) name,fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,c.feature,fun_getPartStatusNameByID(c.partStatus) gencCategoryName,        \n" +
                "                                c.partStatus gencCategoryID,c.mfgPNDescription,c.partPackage,c.noOfPosition,c.noOfRows,c.packageQty,c.uom,                        \n" +
                "                                mg.mfgCode,mg.mfgName,mg.mfgType,c.mfgPN,1 isPackaging,c.id AS mfgPNID,c.mountingtypeID,c.functionalCategoryID,fun_getMountingTypeNameByID(c.mountingtypeID) mountName,fun_getPartTypeNameByID(c.functionalCategoryID) partTypeName,c.unit,c.connecterTypeID,'P' customerApproval, 1 approvedMountingType, 1 mismatchMountingTypeStep,  \n" +
                "                                c.isCustom,c.custAssyPN  \n" +
                "						  FROM component c                          \n" +
                "						  LEFT JOIN mfgcodemst mg ON mg.id=c.mfgcodeID AND mg.isDeleted=0        \n" +
                "						  WHERE c.packaginggroupID IN (SELECT packaginggroupID FROM component WHERE id IN (SELECT mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID=\",pconsolidateID,\" AND rla.isDeleted=0))                         \n" +
                "						  AND c.id NOT IN (SELECT mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate ra  WHERE ra.consolidateID=\",pconsolidateID,\" AND ra.isDeleted=0) AND c.isdeleted=0)a \");                                                                  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                                                  \n" +
                "			EXECUTE query1;                                                                  \n" +
                "			DEALLOCATE PREPARE query1;                 \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"SELECT id,qtyid FROM rfq_consolidate_mfgpn_lineitem_quantity WHERE consolidateid=\",pconsolidateID,\" AND isdeleted=0\");                                                                  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                                                  \n" +
                "			EXECUTE query2;                                                                  \n" +
                "			DEALLOCATE PREPARE query2;          \n" +
                "  \n" +
                "			ELSE        \n" +
                "			SET @SQLStatement1 = CONCAT(\"SELECT a.* FROM                        \n" +
                "				(SELECT c.PIDCode,c.imageURL,c.documentPath,fun_getUnitNameByID(c.uom) unitName                     \n" +
                "						,c.RoHSStatusID                        \n" +
                "						,c.mfgCodeID                        \n" +
                "						,fun_getRoHSNameByID(c.RoHSStatusID) name                        \n" +
                "						,fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,c.feature,fun_getPartStatusNameByID(c.partStatus) gencCategoryName,c.partStatus gencCategoryID,c.mfgPNDescription,c.partPackage,c.noOfPosition,c.noOfRows,c.packageQty,c.uom,                        \n" +
                "						mg.mfgCode,mg.mfgName,mg.mfgType,c.mfgPN,0 isPackaging,c.id AS mfgPNID,c.mountingtypeID,c.functionalCategoryID,fun_getMountingTypeNameByID(c.mountingtypeID) mountName,fun_getPartTypeNameByID(c.functionalCategoryID) partTypeName,c.unit,c.connecterTypeID,IFNULL(rla.isApproved ,0) isApproved,  \n" +
                "                        c.isCustom,c.custAssyPN  \n" +
                "					FROM rfq_lineitems_alternatepart rla LEFT JOIN                                                                         \n" +
                "					component c ON rla.mfgpnid=c.id  LEFT JOIN                        \n" +
                "					mfgcodemst mg ON mg.id=c.mfgcodeID AND mg.isDeleted=0        \n" +
                "					WHERE rla.rfqLineItemsID=\",pconsolidateID,\" AND rla.isdeleted=0                        \n" +
                "					UNION                        \n" +
                "					SELECT c.PIDCode,c.imageURL,c.documentPath,fun_getUnitNameByID(c.uom) unitName,c.RoHSStatusID,c.mfgCodeID,fun_getRoHSNameByID(c.RoHSStatusID) name,fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,c.feature,fun_getPartStatusNameByID(c.partStatus) gencCategoryName,        \n" +
                "							c.partStatus gencCategoryID,c.mfgPNDescription,c.partPackage,c.noOfPosition,c.noOfRows,c.packageQty,c.uom,                        \n" +
                "							mg.mfgCode,mg.mfgName,mg.mfgType,c.mfgPN,1 isPackaging,c.id AS mfgPNID,c.mountingtypeID,c.functionalCategoryID,fun_getMountingTypeNameByID(c.mountingtypeID) mountName,        \n" +
                "							fun_getPartTypeNameByID(c.functionalCategoryID) partTypeName,c.unit,c.connecterTypeID,0 isApproved,  \n" +
                "                            c.isCustom,c.custAssyPN  \n" +
                "					  FROM component c                          \n" +
                "					  LEFT JOIN mfgcodemst mg ON mg.id=c.mfgcodeID AND mg.isDeleted=0        \n" +
                "						  WHERE c.packaginggroupID IN (SELECT packaginggroupID FROM component WHERE id IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart rla WHERE rla.rfqLineItemsID=\",pconsolidateID,\" AND rla.isDeleted=0))                         \n" +
                "						  AND c.id NOT IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart ra  WHERE ra.rfqLineItemsID=\",pconsolidateID,\" AND ra.isDeleted=0) AND c.isdeleted=0)a \");                                                                  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                                                                  \n" +
                "			EXECUTE query1;                                                                  \n" +
                "			DEALLOCATE PREPARE query1;         \n" +
                "			SELECT 1;                \n" +
                "			END IF;                   \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-04-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCommonConsolidateLineMFGPNWithPackagingHistory_New`;  \n" +
                "CREATE FUNCTION `fun_getCommonConsolidateLineMFGPNWithPackagingHistory_New`(                          \n" +
                "  \n" +
                "	) RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN                          \n" +
                "	DECLARE result VARCHAR(16383);                     \n" +
                "  \n" +
                "	SELECT  CONCAT('(SELECT GROUP_CONCAT(    \n" +
                "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',    \n" +
                "				a.RoHSStatusID,''@@@'',     \n" +
                "				a.name,''@@@'',    \n" +
                "				IFNULL(a.rohsIcon,\"\"),''@@@'',    \n" +
                "				IFNULL(a.iscustom,\"\"),''@@@'',    \n" +
                "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',    \n" +
                "				IFNULL(a.partStatusName,\"\"),''@@@'',    \n" +
                "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',    \n" +
                "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',    \n" +
                "				0,''@@@'',0,''@@@'',1,''@@@'',1,''@@@'',0,''@@@'',0,''@@@'',1,''@@@'',        \n" +
                "				1,''@@@'',\"\",''@@@'',\"\",''@@@'',\"\",''@@@'',0,''@@@'',1,''@@@'',    \n" +
                "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',    \n" +
                "				a.mfgCode,''@@@'',a.mfgpnID,''@@@'',                \n" +
                "				0, ''@@@'',  \n" +
                "                ifnull(a.custAssyPN,''''))     \n" +
                "			FROM (     \n" +
                "					SELECT	PIDCode,    \n" +
                "						RoHSStatusID,     \n" +
                "						fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,    \n" +
                "						fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,        \n" +
                "						z.isCustom,     \n" +
                "						z.custAssyPN,     \n" +
                "						z.feature,    \n" +
                "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,    \n" +
                "						fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,        \n" +
                "						fun_getPartTBDDetails(z.mfgPNID) partTBD,     \n" +
                "						z.mfgpn,    \n" +
                "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,    \n" +
                "						z.mfgPNID            \n" +
                "					FROM       \n" +
                "						(SELECT IFNULL(d.id,c.id) AS mfgPNID ,        \n" +
                "							IFNULL(c.mfgcodeID,d.mfgCodeId) mfgCodeID,        \n" +
                "							IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,             \n" +
                "							IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,      \n" +
                "							IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,            \n" +
                "							IFNULL(d.feature,c.feature)  AS feature,      \n" +
                "							IFNULL(d.isCustom,c.isCustom)  AS isCustom,            \n" +
                "							IFNULL(d.custAssyPN,c.custAssyPN)  AS custAssyPN,            \n" +
                "							IFNULL(d.partStatus,d.partStatus) as partStatus	    \n" +
                "						FROM rfq_consolidated_mfgpn_lineitem_alternate_history  rla            \n" +
                "						INNER JOIN component c ON rla.mfgPNID = c.id            \n" +
                "						LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid                \n" +
                "						WHERE rla.consolidateID=rl.consolidateID AND rla.refHistoryID=rl.refHistoryID AND rla.isdeleted=0           \n" +
                "							) z group by  z.mfgPNID ,z.mfgCodeID,z.PIDCode,z.RoHSStatusID , z.partStatus,z.iscustom ,z.feature,z.mfgpn    \n" +
                "					) a ) AS mfgPN')  INTO @result;                     \n" +
                "  \n" +
                "      	SET result = @result;                          \n" +
                "	RETURN result;                          \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 16-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(      \n" +
                "	IN ppageIndex INT,      \n" +
                "	IN precordPerPage INT,      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "	IN pEmployeeID INT,      \n" +
                "	IN pCustomerIds VARCHAR(16383),      \n" +
                "	IN pAssyTypeIds VARCHAR(16383),      \n" +
                "	IN pRfqTypeIds VARCHAR(16383),      \n" +
                "	IN pJobTypeIds VARCHAR(16383),      \n" +
                "	IN pAssyIds VARCHAR(16383),      \n" +
                "	IN pAssyNicknameIds LONGTEXT,      \n" +
                "	IN pIsExportControlled TINYINT,      \n" +
                "	IN pIsQuoteOverdue TINYINT,      \n" +
                "	IN pIsSubAssemblyBOMs TINYINT,      \n" +
                "	IN pIsPriceGroupQuoteAssembly TINYINT,      \n" +
                "	IN pFromDate DATE,      \n" +
                "	IN pToDate DATE,      \n" +
                "	IN pOlderThenDays INT      \n" +
                "    )  \n" +
                "BEGIN                                \n" +
                "  \n" +
                "	DECLARE pOffset INT;                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                       \n" +
                "	DECLARE vTextAngularKeyCode VARCHAR(500);                        \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                           \n" +
                "        DECLARE vTimeZone VARCHAR(50);              \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                            \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;              \n" +
                "        SELECT fun_DatetimetoUTCDateTime() INTO @utcDatetime;              \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                  \n" +
                "  		SET pWhereClause = '1=1' ;                  \n" +
                "	END IF;           	             \n" +
                "  \n" +
                "        IF(pCustomerIds IS NOT NULL AND pCustomerIds != '') THEN                                 \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (', pCustomerIds, ') ');                                \n" +
                "	END IF;                       \n" +
                "  \n" +
                "	IF(pAssyTypeIds IS NOT NULL AND pAssyTypeIds != '') THEN                                 \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assemblyTypeID in (', pAssyTypeIds, ') ');                                \n" +
                "	END IF;                       \n" +
                "  \n" +
                "	IF(pRfqTypeIds IS NOT NULL AND pRfqTypeIds != '') THEN                                 \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND RFQTypeID in (', pRfqTypeIds, ') ');                                \n" +
                "	END IF;                       \n" +
                "  \n" +
                "        IF(pJobTypeIds IS NOT NULL AND pJobTypeIds != '') THEN                                 \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND jobTypeID in (', pJobTypeIds, ') ');                                \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	IF(pAssyIds IS NOT NULL AND pAssyIds != '' AND pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN                                 \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( partID in (', pAssyIds, ') or partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' )) )');                                \n" +
                "	ELSEIF(pAssyIds IS NOT NULL AND pAssyIds != '') THEN                                 \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND partID in (', pAssyIds, ') ');                                \n" +
                "	ELSEIF(pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN                        \n" +
                "		SET pWhereClause=CONCAT(pWhereClause,' and partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' ))');                        \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN                  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND                      \n" +
                "		   (CASE                    \n" +
                "			WHEN rfq_statusID = 1 THEN                    \n" +
                "				DATE(quoteDueDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")                  \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN                    \n" +
                "				DATE(quoteSubmitDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")                  \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN                    \n" +
                "				DATE(quoteClosedDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")                  \n" +
                "		    END)');                        \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF(pOlderThenDays IS NOT NULL) THEN                  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND                   \n" +
                "		 (CASE                    \n" +
                "			WHEN rfq_statusID = 1 THEN                    \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteDueDate) > ',pOlderThenDays,'                  \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN                    \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteSubmitDate) > ',pOlderThenDays,'                  \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN                    \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteClosedDate) > ',pOlderThenDays,'                  \n" +
                "		    END)              \n" +
                "		');                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF pIsQuoteOverdue = 1 THEN     		                            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND                      \n" +
                "        (CASE                    \n" +
                "        WHEN rfq_statusID = 1 THEN                    \n" +
                "				quoteDueDate < \"',@utcDatetime,'\"              \n" +
                "         WHEN (rfq_statusID = 2 OR rfq_statusID = 3 ) THEN                    \n" +
                "				quoteSubmitDate > quoteDueDate                     \n" +
                "		WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN                    \n" +
                "				quoteClosedDate	> quoteDueDate		                    \n" +
                "            END)');                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	IF pIsSubAssemblyBOMs = 1 THEN                         \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assyLevel > 1');                        \n" +
                "	END IF;                       \n" +
                "  \n" +
                "    /* IF pIsPriceGroupQuoteAssembly = 1 THEN                         \n" +
                "		SET pWhereClause = concat(pWhereClause, ' AND assyLevel > 1');                        \n" +
                "	END IF; */                      \n" +
                "  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();                  \n" +
                "	/* DECLARE SQLStatement varchar(255); */                  \n" +
                "   #DROP TEMPORARY TABLE IF EXISTS Results;                  \n" +
                "    SET @temp_Sproc_GetRFQList = CONCAT(\"SELECT (select COUNT(1) from rfq_lineitems rl where rl.partID = ra.partID and rl.isDeleted = 0) AS lineItemCount, rf.id, ra.partID,                  \n" +
                "			count(1) over (partition by rf.id) AS quoteGroupAssyCount,                    \n" +
                "            fun_getUserNameByEmployeID(rf.salesCommissionTo) salesCommissionTo,                  \n" +
                "            (select count(1) from rfq_price_group rpg where refRFQID = rf.id and rpg.isDeleted = 0) priceGroupCount,                      \n" +
                "            fun_getExportControlDetailFromPartID(ra.partID) as isExportControl,                        \n" +
                "			#(SELECT COUNT(1) FROM rfq_assemblies WHERE rfqrefID = rf.id AND isDeleted = 0) AS quoteGroupAssyCount,                  \n" +
                "			(SELECT MAX(pr.`level`)+1 FROM part_sub_assy_relationship pr WHERE pr.partID = ra.partID AND isDeleted = 0) AS assyLevel,                  \n" +
                "			(SELECT COUNT(1) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id AND quoteNumber IS NOT NULL) AS revisedQuoteCount,                  \n" +
                "			(SELECT max(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id) AS lastQuoteID, ra.isSummaryComplete,                  \n" +
                "			part.PIDCode,part.isCustom,part.RoHSStatusID, part.mfgPN, part.custAssyPN, part.mfgPNDescription,part.rev,part.assyCode,part.nickName,ro.rohsIcon,                  \n" +
                "			fun_getUserNameByEmployeID(rf.employeeID) AS rfqCreatedBy,                  \n" +
                "			fun_getUserNameByID(ra.Updatedby) AS rfqModifiedBy,                  \n" +
                "			part.liveVersion AS liveInternalVersion,                  \n" +
                "			fun_getBomProgressBar(ra.partID) AS bomProgress,                  \n" +
                "			fun_getMaterialProgress(ra.id) AS materialProgress,                  \n" +
                "			fun_getCustomPartProgress(ra.id) AS customPartProgress,                \n" +
                "			(CASE WHEN ra.status = 1 THEN 'In Progress'                  \n" +
                "				  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'                  \n" +
                "				  WHEN ra.status = 3 THEN 'Won'                      \n" +
                "				  WHEN ra.status = 4 THEN 'Lost'                  \n" +
                "				  WHEN ra.status = 5 THEN 'Canceled' END) `status` ,                  \n" +
                "			ra.status rfq_statusID,                \n" +
                "			(CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending'                  \n" +
                "					WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote'                  \n" +
                "					WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'                  \n" +
                "					WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,                  \n" +
                "			ro.name AS `rohsComplientConvertedValue`,                  \n" +
                "			(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'                  \n" +
                "				WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,                  \n" +
                "			(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'     \n" +
                "				WHEN (`ra`.`timePeriod` = 1) THEN 'W'                  \n" +
                "				WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,ra.jobTypeID,ra.assemblyTypeID,ra.RFQTypeID,                      \n" +
                "			fun_getAssyTypeByID(ra.assemblyTypeID) assyType,              \n" +
                "            fun_getjobTypeByID(ra.jobTypeID) AS JobType, fun_getrfqTypeByID(ra.RFQTypeID) AS OrderType, CONCAT('(',cu.mfgCode,') ',cu.mfgName) AS Customer, cu.id customerID,                  \n" +
                "			fun_getUserNameByID(ra.quoteSubmittedBy) AS RFQ_SubmitedBy, ra.winPrice,ra.winQuantity,                  \n" +
                "			ra.quoteInDate, cast(ra.quoteDueDate as DATE) as quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,      \n" +
                "            ra.isCustomPartDetShowInReport,      \n" +
                "			part.isActivityStart, fun_getMfgCodeByPartID(ra.partID) customerCode,                \n" +
                "			(CASE WHEN part.isActivityStart THEN fun_getUserNameByID(part.activityStartBy) ELSE '' END )AS username, part.activityStartBy,                \n" +
                "			TIMESTAMPDIFF(SECOND, part.activityStartAt,'\",@utcDatetime,\"') activityStartAt,     \n" +
                "			part.activityStartAt activityStartAtDateTime,                 \n" +
                "            ra.isActivityStart as isCostingActivityStart, (CASE WHEN ra.isActivityStart THEN fun_getUserNameByID(ra.activityStartBy) ELSE '' END )AS costingUserName, ra.activityStartBy as costingActivityBy,                \n" +
                "			TIMESTAMPDIFF(SECOND, ra.activityStartAt,'\",@utcDatetime,\"') costingActivityStartAt,                 \n" +
                "			ra.isBOMVerified,fun_getTextAngularData(ra.reason,'\",vTextAngularKeyCode,\"') reason, fun_getUserNameByID(ra.quoteClosedBy) AS RFQ_ClosedBy,ra.quoteClosedDate,                                             \n" +
                "            fun_getUserNameByID(ra.updatedBy) updatedby,                                      \n" +
                "			fun_getUserNameByID(ra.createdBy) createdby,                                       \n" +
                "			fun_getRoleByID(ra.createByRoleId) createdbyRole,                                      \n" +
                "			fun_getRoleByID(ra.updateByRoleId) updatedbyRole,                                      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                                      \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,                                     \n" +
                "			fun_getRfqLabourPercentage(ra.id) laborPercentage                                      \n" +
                "		FROM rfqforms rf                  \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND ra.isdeleted = 0                  \n" +
                "        JOIN mfgcodemst cu ON cu.id = rf.customerId AND cu.isdeleted = 0                  \n" +
                "		JOIN component part ON part.id = ra.partID AND part.category = 3 AND part.isdeleted = 0                  \n" +
                "		JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0                  \n" +
                "		WHERE rf.isdeleted = 0                                    \n" +
                "        and (case when (select count(1) from employee_mfg_mapping where employeeId = \",pEmployeeID,\" and isDeleted = 0) > 0 then                                     \n" +
                "		exists (select 1 from employee_mfg_mapping where mfgCodeId =  cu.id and employeeId = \",pEmployeeID,\" and isDeleted = 0)                                    \n" +
                "		else 1=1 end)                                    \n" +
                "        \");                  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                  \n" +
                "	ELSE                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY quoteDueDate DESC\") ;                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                  \n" +
                "	ELSE                  \n" +
                "		SET rowNumWhere = '';                  \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	IF pIsExportControlled = 1  AND pIsPriceGroupQuoteAssembly = 1 THEN                         \n" +
                "		SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\" AND priceGroupCount > 1 ');                        \n" +
                "	ELSEIF pIsExportControlled = 1 THEN                      \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\"');                            \n" +
                "	ELSEIF pIsExportControlled = 0 AND pIsPriceGroupQuoteAssembly = 1 THEN                      \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having priceGroupCount > 0 ');                              \n" +
                "	END IF;                      \n" +
                "	/* to get total count of rows */                     \n" +
                "	SET @RFQ_STATEMENT1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause);		                  \n" +
                "	PREPARE RFQquery1 FROM @RFQ_STATEMENT1;                    \n" +
                "	EXECUTE RFQquery1;                    \n" +
                "	DEALLOCATE PREPARE RFQquery1;           \n" +
                "  \n" +
                "	SET @RFQ_STATEMENT2 = CONCAT(\"select * from ( \", @temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                          			                        			                   \n" +
                "	PREPARE RFQquery2 FROM @RFQ_STATEMENT2;                    \n" +
                "	EXECUTE RFQquery2;                    \n" +
                "	DEALLOCATE PREPARE RFQquery2;                  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 16-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetQuoteSummaryDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetQuoteSummaryDetails`(                      \n" +
                "	IN prfqAssyID INT,  \n" +
                "    IN pAssyQuoteSubmittedID INT  \n" +
                "    )  \n" +
                "BEGIN                      \n" +
                "  \n" +
                "  DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                "		# select list for quote summary details of last submitted quote  \n" +
                "			SELECT unitPrice, qty, turnTime,priceGroup,  \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN CEILING(7*(turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "            WHEN qo.turnType = 'D' THEN turntime  \n" +
                "            WHEN qo.turnType = 'W' THEN (turntime*7) END) turntimedays,  \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN 'Business Days'  \n" +
                "            WHEN qo.turnType = 'D' THEN 'Week Days'                      \n" +
                "            WHEN qo.turnType = 'W' THEN 'Week' END) turnType,                      \n" +
                "            qo.excessMaterialCost, qo.extendedCost, (qo.nreCost + qo.toolingCost) nreCost ,(qo.nreDays + qo.toolingDays) nreDays, qo.nretoolingdescription,                      \n" +
                "            qo.additionalCost,qo.materialCost,qo.materialLeadTime,qo.laborCost,qo.laborLeadTime,qo.customItemLeadTime,qo.totalLeadTime,  qo.allCost, qo.allDays  \n" +
                "			FROM rfq_assy_quote_submitted_assydetail qo                      \n" +
                "			JOIN rfq_assemblies_quotation_submitted sb ON sb.id = qo.refSubmittedQuoteID                      \n" +
                "			WHERE refSubmittedQuoteID = pAssyQuoteSubmittedID                      \n" +
                "            ORDER BY qo.rfqPriceGroupId,qo.qty, qo.turnTime;                      \n" +
                "  \n" +
                "  \n" +
                "        # select details for assembly,customer, submitted quote of selected rfq assy                      \n" +
                "			SELECT ra.id rfqAssyID, ra.partID, rf.id quoteID, part.PIDCode , part.isCustom , part.nickName, part.liveInternalVersion, part.mfgPNDescription, part.mfgPN, part.rev,part.assyCode,                      \n" +
                "            part.custAssyPN, cu.mfgName,cu.mfgCode,rf.customerid,rqs.custBillingAddressID, IFNULL(rqs.custTermsID, cu.custTermsID) AS custTermsID, rqs.custShippingAddressID,                      \n" +
                "            (CASE WHEN rqs.quoteNumber IS NOT NULL THEN IFNULL(rqs.BOMIssues,'')                      \n" +
                "            WHEN rqs.quoteNumber IS NULL THEN IFNULL(fun_getQuoteSubjectToFollowing(ra.id),'') END) AS BOMIssues,                      \n" +
                "            (                      \n" +
                "				(                      \n" +
                "					CASE WHEN rqs.custTermsID IS NULL THEN                      \n" +
                "                    (                      \n" +
                "						SELECT gencCategoryName FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = (SELECT custTermsID FROM mfgcodemst WHERE id = rf.customerid)                      \n" +
                "					)                      \n" +
                "                    ELSE                      \n" +
                "                    (                      \n" +
                "                    	SELECT gencCategoryName FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = rqs.custTermsID                      \n" +
                "                    )                      \n" +
                "                    END                      \n" +
                "				)                      \n" +
                "			)paymentTerm,                      \n" +
                "            (                      \n" +
                "				(                      \n" +
                "					CASE WHEN rqs.custTermsID IS NULL THEN                      \n" +
                "                    (                      \n" +
                "						SELECT termsDays FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = (SELECT custTermsID FROM mfgcodemst WHERE id = rf.customerid)                      \n" +
                "					)                      \n" +
                "                    ELSE                      \n" +
                "                    (                      \n" +
                "                    	SELECT termsDays FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = rqs.custTermsID                      \n" +
                "                    )                      \n" +
                "                    END                      \n" +
                "				)                      \n" +
                "			)termDays,                      \n" +
                "            rqs.bomInternalVersion, rqs.quoteSubmitDate, rqs.quoteNumber, rqs.id quoteSubmittedID, ra.assyNote,                   \n" +
                "            fun_getTextAngularData(ra.additionalRequirement, vTextAngularKeyCode) additionalRequirement ,                              \n" +
                "            rf.quoteNote, rt.name RFQType, jt.name JobType, rat.name AssyType,                   \n" +
                "            fun_getTextAngularData(rqs.OtherNotes, vTextAngularKeyCode) OtherNotes,                  \n" +
                "            ra.isSummaryComplete, ra.isReadyForPricing, CONCAT(su.firstName,' ',su.lastName) `submittedBy`, su.emailAddress,                      \n" +
                "            ra.quoteFinalStatus, ra.isCustomPartDetShowInReport,                \n" +
                "            fun_getTextAngularData(rqs.promotions, vTextAngularKeyCode) promotions,                  \n" +
                "            ra.assyNote,    part.RoHSStatusID, ro.name AS rohsComplientConvertedValue, ro.rohsIcon AS rohsIconPath,                      \n" +
                "            ro.rohsIcon AS rohsIcon,                      \n" +
                "            (                      \n" +
                "				(                      \n" +
                "					CASE WHEN rqs.custBillingAddressID IS NULL THEN                      \n" +
                "					(                      \n" +
                "						SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                                   \n" +
                "						IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))                                 \n" +
                "						FROM customer_addresses ca                      \n" +
                "						JOIN countrymst co ON co.countryID = ca.countryID                      \n" +
                "						WHERE customerID = rf.customerid AND ca.isDefault = 1 AND ca.isDeleted = 0 AND ca.addressType = 'B'                      \n" +
                "					)                      \n" +
                "					ELSE                      \n" +
                "					(                      \n" +
                "						SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                                   \n" +
                "						IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))                                 \n" +
                "						FROM customer_addresses ca                      \n" +
                "						JOIN countrymst co ON co.countryID = ca.countryID                      \n" +
                "						WHERE id = rqs.custBillingAddressID                      \n" +
                "					)                      \n" +
                "					END                      \n" +
                "				)                      \n" +
                "			) billingAddress,                      \n" +
                "            (                      \n" +
                "				(                      \n" +
                "					CASE WHEN rqs.custBillingAddressID IS NULL THEN                      \n" +
                "						(                      \n" +
                "							SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                                   \n" +
                "							IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))                                 \n" +
                "							FROM customer_addresses ca                      \n" +
                "							JOIN countrymst co ON co.countryID = ca.countryID                      \n" +
                "							WHERE customerID = rf.customerid AND ca.isDefault = 1 AND ca.isDeleted = 0 AND ca.addressType = 'S'                      \n" +
                "						)                      \n" +
                "					ELSE                      \n" +
                "						(                      \n" +
                "							SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',                                                   \n" +
                "							IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))                                                  \n" +
                "							FROM customer_addresses ca                      \n" +
                "							JOIN countrymst co ON co.countryID = ca.countryID                      \n" +
                "							WHERE id = rqs.custShippingAddressID                      \n" +
                "						)                      \n" +
                "					END                      \n" +
                "                )                      \n" +
                "			) shippingAddress,                      \n" +
                "            (                      \n" +
                "				(                      \n" +
                "				CASE WHEN ra.isSummaryComplete = 1 THEN                      \n" +
                "					(                      \n" +
                "						SELECT GROUP_CONCAT(CONCAT(cs.fullName,(CASE WHEN sc.className IS NULL THEN '' ELSE ' ' END),IFNULL(sc.className,'')) SEPARATOR ' | ') standards                      \n" +
                "						FROM rfq_assy_standard_class_detail csd                      \n" +
                "						JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0                      \n" +
                "						LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0                      \n" +
                "						WHERE csd.refSubmittedQuoteID = rqs.id                      \n" +
                "					)                      \n" +
                "					ELSE                      \n" +
                "					(                      \n" +
                "						SELECT GROUP_CONCAT(CONCAT(cs.fullName,(CASE WHEN sc.className IS NULL THEN '' ELSE ' ' END),IFNULL(sc.className,'')) SEPARATOR ' | ') standards                      \n" +
                "						FROM component_standard_details  csd                      \n" +
                "						JOIN certificate_standards cs ON cs.certificateStandardID =  csd.certificateStandardID AND cs.isDeleted = 0                      \n" +
                "						LEFT JOIN standard_class sc  ON sc.classID =  csd.ClassID AND cs.isDeleted = 0                      \n" +
                "						WHERE csd.isDeleted = 0 AND csd.componentID = (SELECT partID FROM rfq_assemblies WHERE id = ra.id)                      \n" +
                "					)                      \n" +
                "                END                      \n" +
                "				)                      \n" +
                "			) standards,                      \n" +
                "            (                      \n" +
                "				(                      \n" +
                "				CASE WHEN ra.isSummaryComplete = 0 AND (SELECT MAX(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyId = ra.id) = rqs.id THEN                      \n" +
                "					(                      \n" +
                "						(SELECT GROUP_CONCAT(dataelement SEPARATOR '<br/>') dataelementdata FROM (                      \n" +
                "						SELECT CONCAT((CASE WHEN subFormName ='' THEN '' ELSE CONCAT('<b>',subFormName,'</b><br/>') END), GROUP_CONCAT(dataelement SEPARATOR '<br/>')) dataelement                      \n" +
                "						FROM (SELECT (CASE WHEN refSubFormTransID IS NOT NULL THEN fun_getDataElementSubFormNameByID(refSubFormTransID) ELSE '' END) subFormName,                      \n" +
                "						CONCAT(fun_getDataElementNameByID(dataElementID),': ',`value`) dataelement                      \n" +
                "						FROM dataelement_transactionvalues WHERE entityID = -12 AND isDeleted = 0 AND refTransID = (SELECT rfqrefID FROM rfq_assemblies WHERE id = ra.id)                      \n" +
                "						)dataelementForms                      \n" +
                "						GROUP BY subFormName                      \n" +
                "						)a)                      \n" +
                "					)                      \n" +
                "					ELSE                      \n" +
                "					(                      \n" +
                "						   rqs.RFQMISCData                      \n" +
                "					)                      \n" +
                "                END                      \n" +
                "				)                      \n" +
                "			) dataelementdata,                      \n" +
                "            (SELECT COUNT(1) > 0 FROM rfq_assemblies_quotation_submitted WHERE id>rqs.id AND rfqAssyID = ra.id AND isDeleted = 0 AND quoteNumber IS NOT NULL) isQuoteHistory,                      \n" +
                "            (CASE WHEN ra.status = 1 THEN 'In Progress'                      \n" +
                "			  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'                      \n" +
                "			  WHEN ra.status = 3 THEN 'Won'                      \n" +
                "			  WHEN ra.status = 4 THEN 'Lost'                      \n" +
                "              WHEN ra.status = 5 THEN 'Canceled' END) `status` ,                      \n" +
                "			ra.status rfq_statusID,                      \n" +
                "            ra.winPrice, ra.isActivityStart,       \n" +
                "            TIMESTAMPDIFF(SECOND, ra.activityStartAt,fun_DatetimetoUTCDateTime()) activityStartAt, fun_getEmpployeeNameByUserID(ra.activityStartBy) userName,      \n" +
                "            ra.winQuantity,ra.activityStartBy,      \n" +
                "            fun_getTextAngularData(ra.reason,vTextAngularKeyCode) reason                                \n" +
                "            FROM rfq_assemblies ra                      \n" +
                "            JOIN rfq_assemblies_quotation_submitted rqs ON rqs.rfqAssyID = ra.id                      \n" +
                "			JOIN rfqforms rf ON rf.id = ra.rfqrefID AND rf.isDeleted = 0                      \n" +
                "            JOIN rfqtype rt ON rt.id = ra.rfqTypeID AND rt.isDeleted = 0                      \n" +
                "            JOIN jobtype jt ON jt.id = ra.jobTypeID AND jt.isDeleted = 0                      \n" +
                "            JOIN rfq_assy_typemst rat ON rat.id = ra.assemblyTypeID AND rat.isDeleted = 0                      \n" +
                "			JOIN mfgcodemst cu ON cu.id = rf.customerid AND cu.isDeleted = 0                      \n" +
                "			JOIN component part ON part.id = ra.partID AND part.isDeleted = 0                      \n" +
                "            LEFT JOIN rfq_rohsmst ro ON ro.id = part.RoHSStatusID                      \n" +
                "            LEFT JOIN users su ON su.id = ra.quoteSubmittedBy                      \n" +
                "			WHERE ra.id= prfqAssyID AND rqs.id = pAssyQuoteSubmittedID;                      \n" +
                "  \n" +
                "  \n" +
                "        # select list of submitted quote summary                                                                  \n" +
                "			SELECT bomInternalVersion,BOMIssues, bomLastVersion, createByRoleId, createdAt, createdBy, custBillingAddressID,                  \n" +
                "			custShippingAddressID, custTermsID, deleteByRoleId, deletedAt, deletedBy, id, isDeleted, fun_getTextAngularData(OtherNotes, vTextAngularKeyCode) OtherNotes,                  \n" +
                "			fun_getTextAngularData(promotions, vTextAngularKeyCode) promotions, quoteDueDate, quoteInDate, quoteNumber, quoteSubmitDate,                  \n" +
                "			rfqAssyID, RFQMISCData, updateByRoleId, updatedAt, updatedBy                   \n" +
                "            FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND id = pAssyQuoteSubmittedID ;                                                                  \n" +
                "  \n" +
                "   # select list select terms and conditions of submitted quote summary                                                                    \n" +
                "			SELECT qst.*, ec.name ecoTypeName, CONCAT('<ul><li>', GROUP_CONCAT(CONCAT(ecv.name, (CASE WHEN qst.note IS NOT NULL THEN CONCAT(' <b>Note:</b>', qst.note) ELSE '' END)) SEPARATOR '</li><li>'),'</li></ul>') ecoTypeValues                                                     \n" +
                "            FROM rfq_assy_quote_submitted_termsconditions qst                                                    \n" +
                "            JOIN eco_type_category ec ON qst.termsconditionCatID = ec.ecoTypeCatID                                                    \n" +
                "            JOIN eco_type_values ecv ON qst.termsconditionTypeValueID = ecv.ecoTypeValID                                                    \n" +
                "            WHERE qst.isDeleted = 0                                                                    \n" +
                "            AND RefSubmittedQuoteID = pAssyQuoteSubmittedID                                                    \n" +
                "            GROUP BY ecv.ecoTypeCatID;                                                    \n" +
                "  \n" +
                "  \n" +
                "		#select list of standard certification detail of submitted quote                                                                  \n" +
                "			SELECT csd.id, csd.refSubmittedQuoteID, csd.standardID, csd.standardClassIDs, cs.fullName standard,sc.className stdclass                                                       \n" +
                "            FROM rfq_assy_standard_class_detail csd                                                                  \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0                                                                  \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0                                                                  \n" +
                "			WHERE csd.refSubmittedQuoteID = pAssyQuoteSubmittedID;                                                                  \n" +
                "  \n" +
                "		# select letest submited quote summary detail                                                              \n" +
                "			SELECT bomInternalVersion, BOMIssues, bomLastVersion, createByRoleId, createdAt, createdBy, custBillingAddressID, custShippingAddressID,      \n" +
                "            custTermsID, deleteByRoleId, deletedAt, deletedBy, id, isDeleted, fun_getTextAngularData(OtherNotes, vTextAngularKeyCode) OtherNotes,      \n" +
                "            fun_getTextAngularData(promotions, vTextAngularKeyCode) promotions, quoteDueDate, quoteInDate, quoteNumber, quoteSubmitDate, rfqAssyID,      \n" +
                "            RFQMISCData, updateByRoleId, updatedAt, updatedBy                    \n" +
                "            FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1;                                                      \n" +
                "  \n" +
                "		#select list of Custom Part detail of assembly.           \n" +
                "  \n" +
                "			  SELECT *, (amount*requestedQty) AS extendedCost FROM (      \n" +
                "				SELECT prfqAssyID `rfqAssyID`,  com.mfgPn CustomPart,com.PIDCode,raqc.mfgPNID, com.custAssyPN,      \n" +
                "				qoa.id additi, qo.requestedQty, fun_getRoHSNameByID(com.RoHSStatusID) rohsName, fun_getRoHSIconByID(com.RoHSStatusID) rohsIcon,       \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,      \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,      \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))      \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime      \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime      \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa      \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0      \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'Material'      \n" +
                "				LEFT JOIN rfq_assy_quotations_customparts raqc ON raqc.rfqAssyQuoteID = qoa.rfqAssyQuoteID AND raqc.id = qoa.refCustomPartQuoteID AND qo.isDeleted = 0       \n" +
                "				LEFT JOIN component com ON com.id = raqc.mfgPNID      \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID AND qoa.refCustomPartQuoteID IS NOT NULL         \n" +
                "				#HAVING amount>0      \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime,qdf.displayOrder      \n" +
                "			) a      \n" +
                "			GROUP BY requestedQty, turnTime,fieldName,amount,days;      \n" +
                "  \n" +
                "		#select list of NRE detail of assembly.                                                  \n" +
                "  \n" +
                "            SELECT *, (amount*toolingQty) AS extendedCost FROM (                                        \n" +
                "				SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,                                                  \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,                                                 \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,                                                \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))                                                                  \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime                                                            \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime , qoa.toolingQty                                        \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa                                                   \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0                                                  \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'NRE'                                        \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID                                            \n" +
                "				HAVING amount>0                                        \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime                                        \n" +
                "            ) a                                        \n" +
                "            GROUP BY fieldName,amount;                                        \n" +
                "  \n" +
                "  \n" +
                "		#select list of NRE detail of assembly.                                                  \n" +
                "  \n" +
                "            SELECT *, (amount*toolingQty) AS extendedCost FROM (                                        \n" +
                "				SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,                                                  \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,                                                 \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,                                                 \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))                                                                  \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime                                                            \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime , qoa.toolingQty                                                     \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa                                                   \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0                                                  \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'TooLing'                                        \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID                                            \n" +
                "				HAVING amount>0                                        \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime                                        \n" +
                "            ) a                                        \n" +
                "            GROUP BY fieldName,amount,toolingQty;                                        \n" +
                "  \n" +
                "		# Company detail                                        \n" +
                "			SELECT CONCAT(street1,', ',city,', ',state,' ',postcode)AS address,cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo                                    \n" +
                "			FROM customer_addresses cua                                        \n" +
                "			JOIN mfgcodemst cu ON cu.id = cua.customerId                                        \n" +
                "			WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1  AND cua.isDeleted = 0;                                        \n" +
                "		# select list of price Group detail              \n" +
                "            SELECT rpg.id priceGroupID, rpg.name priceGroup, rpg.qty, rpg.rfqAssyID,               \n" +
                "			com.mfgPN, com.PIDCode, ro.name rohsName, ro.rohsIcon, ra.partID ,com.isCustom, com.custAssyPN            \n" +
                "			FROM rfq_assy_submitted_price_group_detail rpg              \n" +
                "			JOIN rfq_assemblies ra ON ra.id = rpg.rfqAssyID              \n" +
                "			JOIN component com ON com.id = ra.partID              \n" +
                "			JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID              \n" +
                "			WHERE rpg.refSubmittedQuoteID = pAssyQuoteSubmittedID              \n" +
                "            ORDER BY rpg.name;              \n" +
                "  \n" +
                "        # select list of price Group               \n" +
                "			SELECT DISTINCT `name` FROM rfq_assy_submitted_price_group_detail              \n" +
                "			WHERE refSubmittedQuoteID = pAssyQuoteSubmittedID              \n" +
                "            ORDER BY NAME;              \n" +
                "  \n" +
                "        # select list select terms and conditions of submitted quote summary                                                                  \n" +
                "			SELECT qst.*, ec.name ecoTypeName, ecv.name ecoTypeValues FROM rfq_assy_quote_submitted_termsconditions qst                                                  \n" +
                "            JOIN eco_type_category ec ON qst.termsconditionCatID = ec.ecoTypeCatID                                                  \n" +
                "            JOIN eco_type_values ecv ON qst.termsconditionTypeValueID = ecv.ecoTypeValID                                                  \n" +
                "            WHERE qst.isDeleted = 0                                                                  \n" +
                "            AND RefSubmittedQuoteID = pAssyQuoteSubmittedID;                                                      \n" +
                "  \n" +
                "  \n" +
                "		# total requote count                                                       \n" +
                "			SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL AND isDeleted = 0;                                                      \n" +
                "  \n" +
                "		#select list of standard certification detail of assembly for not submitted quote                                                      \n" +
                "			SELECT csd.id, csd.certificateStandardID, csd.ClassID, cs.fullName standard,sc.className stdclass                                                      \n" +
                "            FROM component_standard_details  csd                                                                  \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.certificateStandardID AND cs.isDeleted = 0                                                                  \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.ClassID AND cs.isDeleted = 0                                                                  \n" +
                "			WHERE csd.isDeleted = 0 AND csd.componentID = (SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID);              \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GenerateQuoteSummary`;  \n" +
                "CREATE PROCEDURE `Sproc_GenerateQuoteSummary`(    \n" +
                "	IN prfqAssyID INT    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "	    SELECT rpg.`name` priceGroup, requestedQty `qty`,    \n" +
                "		(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))    \n" +
                "            WHEN qo.timeType = 'D' THEN turntime    \n" +
                "            WHEN qo.timeType = 'W' THEN (turntime*7) END) turntimedays,    \n" +
                "		qo.materialCost AS materialCost, qo.materialDays AS materialLeadTime, qo.laborCost AS laborCost, qo.laborDays AS laborLeadTime,    \n" +
                "        ifnull(qo.overheadCost,0) as additionalCost, qo.overheadDays `customItemLeadTime`,    \n" +
                "		qo.allCost, qo.allDays, ( qo.materialCost + qo.laborCost + IFNULL(qo.allCost,0) + ifnull(qo.overheadCost,0)) `unitPrice`,    \n" +
                "		(IFNULL(qo.materialDays,0)+    \n" +
                "        (CASE WHEN (qo.laborDays > ifnull(qo.overheadDays,0))    \n" +
                "			THEN IFNULL(qo.laborDays,0)    \n" +
                "        ELSE ifnull(qo.overheadDays,0) END)) `totalLeadTime`,    \n" +
                "		(qo.requestedQty * (qo.materialCost + qo.laborCost + IFNULL(qo.allCost,0) + ifnull(qo.overheadCost,0))) extendedCost,    \n" +
                "		qo.excessQtyTotalPrice `excessMaterialCost`,    \n" +
                "        (IFNULL(qo.nreCost,0)+ IFNULL(qo.toolingCost,0))nreCost, (IFNULL(qo.nreDays,0) + IFNULL(qo.toolingDays,0))nreDays,    \n" +
                "        fun_getNREToolingCostDescriptionbyQuoteID(qo.id,qo.rfqAssyID) AS nretoolingdescription    \n" +
                "		FROM rfq_assy_quotations qo    \n" +
                "        LEFT JOIN rfq_price_group rpg ON rpg.id = qo.rfqPriceGroupId    \n" +
                "		WHERE qo.rfqAssyID = prfqAssyID AND qo.isDeleted = 0 AND qo.refSubmittedQuoteID IS NULL    \n" +
                "        ORDER BY rpg.id,qo.requestedQty, qo.turnTime;    \n" +
                "  \n" +
                "  # Generate Custom part Detail         \n" +
                "        SELECT fieldName, requestedQty, amount, turnTime, CustomPart,mfgPNID,fun_getRoHSNameByID(RoHSStatusID) rohsName, fun_getRoHSIconByID(RoHSStatusID) rohsIcon, (amount*requestedQty) AS extendedCost , isCustom, custAssyPN    \n" +
                "        FROM (    \n" +
                "			SELECT qo.requestedQty,  com.mfgPn as CustomPart, raqc.mfgPNID, qdf.fieldName, com.RoHSStatusID, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount,  com.isCustom,com.custAssyPN,  \n" +
                "            (CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))    \n" +
                "						WHEN qo.timeType = 'D' THEN qo.turntime    \n" +
                "						WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime    \n" +
                "			FROM  rfq_assy_quotations qo    \n" +
                "			Inner JOIN rfq_assy_quotations_additionalcost qoa ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0    \n" +
                "            left Join rfq_assy_quotations_customparts raqc on raqc.rfqAssyQuoteID = qo.id and raqc.id = qoa.refCustomPartQuoteID AND qo.isDeleted = 0    \n" +
                "            left join component com on com.id = raqc.mfgPNID    \n" +
                "			Inner JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = qoa.quoteChargeDynamicFieldID    \n" +
                "			WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qdf.costingType = 'Material' AND qo.refSubmittedQuoteID IS NULL and qoa.refCustomPartQuoteID is not null    \n" +
                "            and IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) > 0    \n" +
                "            ORDER BY qo.requestedQty, qo.turnTime,qdf.displayOrder    \n" +
                "		) a    \n" +
                "		GROUP BY fieldName, requestedQty, amount, turnTime, CustomPart, mfgPNID,RoHSStatusID;    \n" +
                "  \n" +
                "	# Genereate NRE Details            \n" +
                "		SELECT fieldName, amount, toolingQty, days, isDaysRequire, (amount*toolingQty) AS extendedCost    \n" +
                "        FROM (    \n" +
                "			SELECT qdf.fieldName, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire, qoa.toolingQty    \n" +
                "			FROM  rfq_assy_quotations qo    \n" +
                "			Inner JOIN rfq_assy_quotations_additionalcost qoa ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0    \n" +
                "			Inner JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = qoa.quoteChargeDynamicFieldID    \n" +
                "			WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qdf.costingType = 'NRE' AND qo.refSubmittedQuoteID IS NULL    \n" +
                "            and IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) > 0    \n" +
                "            ORDER BY qo.requestedQty, qo.turnTime    \n" +
                "		) a    \n" +
                "		GROUP BY fieldName,amount,toolingQty,days,isDaysRequire;    \n" +
                "  \n" +
                "	# Genereate Tooling Details        (done)    \n" +
                "         SELECT fieldName,amount,toolingQty,days,isDaysRequire, (amount*toolingQty) AS extendedCost     \n" +
                "         FROM (    \n" +
                "			SELECT qdf.fieldName,  IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days,    \n" +
                "            qdf.isDaysRequire,qoa.toolingQty    \n" +
                "			FROM  rfq_assy_quotations qo    \n" +
                "			Inner JOIN rfq_assy_quotations_additionalcost qoa ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0    \n" +
                "			Inner JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = qoa.quoteChargeDynamicFieldID    \n" +
                "			WHERE qo.rfqAssyID = prfqAssyID AND qo.refSubmittedQuoteID IS NULL AND    \n" +
                "            qoa.isDeleted = 0 AND qdf.costingType = 'TooLing'    \n" +
                "            AND IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) > 0    \n" +
                "            ORDER BY qo.requestedQty, qo.turnTime    \n" +
                "		) a    \n" +
                "	 	GROUP BY fieldName,amount,toolingQty,days,isDaysRequire;    \n" +
                "  \n" +
                "	# return quotation current data count for assembly            \n" +
                "		SELECT COUNT(*) FROM rfq_assy_quotations WHERE rfqAssyID = prfqAssyID AND isDeleted = 0 AND refSubmittedQuoteID IS NULL;            \n" +
                "  \n" +
                "	# Return data for rfq Price Group Matrix    \n" +
                "		SELECT rpg.id as priceGroupID, rpg.name AS priceGroup, rpgd.qty, rpgd.rfqAssyID, ra.partID,    \n" +
                "		com.mfgPN, com.PIDCode, ro.name AS rohsName, ro.rohsIcon,com.isCustom,com.custAssyPN    \n" +
                "        FROM rfq_assemblies ra    \n" +
                "		Inner JOIN rfq_price_group rpg ON rpg.refRFQID = ra.rfqrefID AND rpg.isDeleted =0    \n" +
                "		LEFT JOIN rfq_price_group_detail rpgd ON rpgd.rfqPriceGroupID = rpg.id AND rpgd.rfqAssyID = ra.id AND rpgd.isDeleted = 0    \n" +
                "		JOIN component com ON com.id = ra.partID    \n" +
                "		JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID    \n" +
                "		WHERE rfqrefID = (SELECT rfqrefID FROM rfq_assemblies WHERE id = prfqAssyID) AND ra.isDeleted = 0    \n" +
                "        ORDER BY rpg.id;    \n" +
                "  \n" +
                "	# Return Price Group            \n" +
                "		SELECT * FROM rfq_price_group WHERE id IN (SELECT rfqPriceGroupID FROM rfq_price_group_detail WHERE isDeleted = 0             \n" +
                "        AND refRFQID =(SELECT rfqrefID FROM rfq_assemblies WHERE id = prfqAssyID)) AND isDeleted = 0            \n" +
                "        ORDER BY id;            \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 16-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4489,'2.00','V1','User Story 32093: BOM Tab improvement Points & QPA VS REF DES Validation improvement related changes - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4489:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 19-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetComponentPackagingAlias`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentPackagingAlias`(              \n" +
                "IN ppageIndex INT,            \n" +
                "IN precordPerPage INT,            \n" +
                "IN pOrderBy VARCHAR(255),            \n" +
                "IN pWhereClause VARCHAR(16383),            \n" +
                "IN pId INT         \n" +
                ")  \n" +
                "BEGIN         \n" +
                "  \n" +
                "		DECLARE pOffset INT;            \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;            \n" +
                "  \n" +
                "		set @temp_Sproc_GetComponentPackagingAlias = concat(\"SELECT com.id,com.mfgPN,mfg.mfgCode,mfg.mfgName,com.PIDCode,ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "        com.isCustom, com.custAssyPN  \n" +
                "         FROM component com          \n" +
                "		 LEFT JOIN mfgcodemst mfg ON mfg.id = com.mfgcodeID AND mfg.isDeleted = 0          \n" +
                "         LEFT JOIN rfq_rohsmst ro ON com.RoHSStatusID = ro.id AND ro.isdeleted = 0              \n" +
                "		 WHERE com.isDeleted = 0 AND com.id != \",pId,\" AND com.packaginggroupID = (SELECT aliasgroupID FROM component_packagingalias WHERE componentID = \",pId,\" AND isDeleted = 0)\");          \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY mfgPN ASC\") ;            \n" +
                "		ELSE            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
                "		END IF;	            \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN            \n" +
                "			SET pWhereClause = '1=1' ;            \n" +
                "		END IF;	            \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
                "		ELSE	            \n" +
                "			SET rowNumWhere = '';            \n" +
                "		END IF;	            \n" +
                "  \n" +
                "		/* to get total count of rows */           \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetComponentPackagingAlias,\" ) c where 1=1 and \", pWhereClause);          \n" +
                "		PREPARE query2 FROM @SQLStatement2;          \n" +
                "		EXECUTE query2;          \n" +
                "		DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetComponentPackagingAlias,\" ) c          \n" +
                "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
                "		PREPARE query1 FROM @SQLStatement2;          \n" +
                "		EXECUTE query1;          \n" +
                "		DEALLOCATE PREPARE query1;               \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPartProgrammingRefDesgDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPartProgrammingRefDesgDetail`(              \n" +
                "	IN pPartID INT        \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "		/* get Detail for part with RequireProgramming status true and selected as Pre-Assy or Post Assy in Programming status and Yes With PrePrgramm in isDNPBuy */        \n" +
                "			select 	rla.mountingtypeID,	rla.parttypeID,	com.programingRequired ,	rl.refDesig,	rl.dnpDesig, trim(rl.lineID)+0 as lineID,        \n" +
                "					rl.id,	rl.isBuyDNPQty,	rl.isInstall,	rl.isPurchase,	rl.programingStatus,	com.PIDCode,	com.mfgPN,        \n" +
                "                    rla.mfgPNID,	ro.name,	ro.rohsIcon,	com.RoHSStatusID,	com.mfgPNDescription, com.isCustom, com.custAssyPN,    \n" +
                "                    fun_getMfgCodeByID(com.mfgcodeID) mfrCode,com.mfgcodeID    \n" +
                "			from rfq_lineitems rl        \n" +
                "			join rfq_lineitems_alternatepart rla on rla.rfqLineItemsID = rl.id and rla.isdeleted = 0        \n" +
                "			join component com on com.id = rla.mfgPNID and com.isdeleted = 0        \n" +
                "			join rfq_rohsmst ro on ro.id = com.RoHSStatusID and ro.isDeleted = 0        \n" +
                "			left join component CPNCom on CPNCom.id = rl.custPNID and CPNCom.isDeleted = 0        \n" +
                "			where rl.partid = pPartID and rl.isdeleted = 0 and (com.programingRequired = 1 OR CPNCom.programingRequired = 1)        \n" +
                "			and rl.programingStatus in (1,2);        \n" +
                "  \n" +
                "		/* Get Detail of Part where Part Have Selected Software as Mounting type or Functional Type */        \n" +
                "			select rla.mountingtypeID,	rla.parttypeID,	com.programingRequired,	rl.refDesig,	rl.dnpDesig,	trim(rl.lineID)+0 as lineID,	rl.id,        \n" +
                "					rl.isBuyDNPQty,	rl.isInstall,	rl.isPurchase,	rl.programingStatus,	rl.customerPartDesc,	com.mfgPN,	com.PIDCode, rla.mfgPNID,        \n" +
                "					com.RoHSStatusID,	ro.name,	ro.rohsIcon,	com.mfgPNDescription, com.isCustom,  com.custAssyPN,  \n" +
                "                    fun_getMfgCodeByID(com.mfgcodeID) mfrCode,com.mfgcodeID    \n" +
                "			from rfq_lineitems rl        \n" +
                "			join rfq_lineitems_alternatepart rla on rla.rfqLineItemsID = rl.id and rla.isdeleted = 0        \n" +
                "			join component com on com.id = rla.mfgPNID and com.isdeleted = 0        \n" +
                "			Join rfq_rohsmst ro on ro.id = com.RoHSStatusID and ro.isDeleted = 0        \n" +
                "            where rl.partid = pPartID and rl.isInstall = 1 and rl.isdeleted = 0 and (rla.mountingtypeID = -2 or rla.parttypeID = -2);        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 19-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMAssyHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMAssyHistory`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pNarrative TINYINT,  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                "  \n" +
                "    SET @temp_Sproc_GetBOMAssyHistory = CONCAT(\"SELECT 	h.id,h.tableName,h.rfqLineItemID,h.rfqAssyID,ia.mfgcode, h.mfgPN,h.columnName,h.isResearchStatus,  \n" +
                "	h.oldValue,h.newValue,h.changeVersion,  \n" +
                "    fun_ApplyCommonDateTimeFormatByParaValue(h.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "    h.description,fun_getTextAngularData(h.narrative,'\",vTextAngularKeyCode,\"') narrative,h.time,  \n" +
                "	fun_getUserNameByID(h.updatedBy) AS CreatedUser,i.lineID,a.assemblyNumber,a.assemblyRev,a.assemblyDescription,  \n" +
                "	a.assemblyVersion,c.liveInternalVersion, ro.name AS `rohsComplientConvertedValue`,  \n" +
                "	ro.rohsIcon AS `rohsIcon`, h.mfgCodeID, h.mfgPNID, mf.mfgCode AS mfgMasterCode,  \n" +
                "	co.restrictUsePermanently,co.restrictUSEwithpermission,co.restrictPackagingUsePermanently,co.restrictPackagingUseWithpermission, co.isCustom, co.custAssyPN  \n" +
                "	FROM rfq_assembly_history h  \n" +
                "	INNER JOIN component c ON c.id = h.partId  \n" +
                "	LEFT OUTER JOIN rfq_lineitems i ON i.id = h.rfqLineItemID  \n" +
                "	LEFT OUTER JOIN rfq_lineitems_alternatepart ia ON ia.id = h.refTransID AND h.tableName = 'rfq_lineitems_alternatepart'  \n" +
                "	LEFT JOIN component co ON co.id = h.mfgPNID  \n" +
                "	LEFT JOIN mfgcodemst mf ON h.mfgcodeID = mf.id  \n" +
                "	LEFT JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id  \n" +
                "	LEFT OUTER JOIN rfq_assemblies a ON a.id = h.rfqAssyID  \n" +
                "	WHERE h.partID = \",pPartID,\" and h.isDeleted = 0\");  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY ID DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pNarrative = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , \" AND isResearchStatus = 1\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\"SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetBOMAssyHistory,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement3 = CONCAT(\"select * from ( \", @temp_Sproc_GetBOMAssyHistory,\" ) c  \n" +
                "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 19-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4490,'2.00','V1','Task 32147: Add new Icon for Copy Part# for Custom part and update at all place where common directive used related changes - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4490:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-04-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveReleaseLineFromPO`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveReleaseLineFromPO`(      \n" +
                "	IN pRefPOId INT,     \n" +
                "	IN pPartID INT,    \n" +
                "	IN pMFGPN VARCHAR(50)     \n" +
                ")  \n" +
                "BEGIN   \n" +
                "SELECT 	polrd.id,					polrd.qty poReleaseLineQty,			polrd.releaseNumber,    \n" +
                "		polrd.shippingDate,			polrd.promisedShipDate,     \n" +
                "		polrd.poLineWorkingStatus,	pod.id refPurchaseOrderDetID,		pod.lineID,    \n" +
                "		pod.qty poLineQty,			  \n" +
                "        (case when polrd.id is null then c.packagingID else pod.packagingID end) packagingID,					  \n" +
                "        pod.internalRef,  \n" +
                "		cpm.name packagingName,		c.mfgcodeID,						c.mfgPN,    \n" +
                "		c.RoHSStatusID,				fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,    \n" +
                "		fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,      				fun_getRoHSNameByID(c.RoHSStatusID) rohsName,    \n" +
                "		c.id partId,				polrd.receivedQty,    				pod.partDescription,		  \n" +
                "        pod.lineComment,  			pod.internalLineComment,	  \n" +
                "        cs.mfgpn supplierPN,  		cs.id supplierPNId,   \n" +
                "        mfgcod.mfgCode mfgCode,		c.packageQty spq,    \n" +
                "		c.unit,						c.uom,								c.uomText,    \n" +
                "		c.partType,					  \n" +
                "        (case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSID,	    \n" +
                "        fun_getRoHSNameByID(case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSName,    \n" +
                "        c.isCustom,					cs.isCustom AS isCustomSupplier    \n" +
                "    FROM purchase_order_det AS pod    \n" +
                "	INNER JOIN component AS c ON  c.id = pod.mfgPartID AND c.id = IFNULL(pPartID, c.id) AND c.mfgpn = IFNULL(pMFGPN, c.mfgPN) AND c.isDeleted = 0        \n" +
                "	INNER JOIN mfgcodemst mfgcod ON mfgcod.id = c.mfgcodeID OR mfgcod.id = c.mfgcodeID AND mfgcod.isDeleted = 0    \n" +
                "	LEFT JOIN purchase_order_line_release_det AS polrd ON  pod.id = polrd.refPurchaseOrderDetID AND polrd.isDeleted = 0    \n" +
                "	LEFT JOIN component_packagingmst AS cpm ON pod.packagingID = cpm.id AND cpm.isDeleted = 0    \n" +
                "	LEFT JOIN component cs ON cs.id = pod.supplierPartID AND cs.isDeleted = 0  \n" +
                "    WHERE pod.refPurchaseOrderID = pRefPOid    \n" +
                "    AND pod.isDeleted = 0;     \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4491,'2.00','V1','Resolved packaging and RoHS value issue for Other Part in Material Receipt - Dharmishtha'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4491:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-04-2021 *********************************** */
                "ALTER TABLE `packing_slip_material_receive`  \n" +
                "ADD COLUMN `lockStatus` varchar(2) NOT NULL DEFAULT 'NA',  \n" +
                "ADD COLUMN `lockedBy` VARCHAR(255) NULL,  \n" +
                "ADD COLUMN `lockedByRoleId` INT NULL,  \n" +
                "ADD COLUMN `lockedAt` DATETIME NULL;  \n" +
                /* **************************** Add Script Version ->21-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4492,'2.00','V1','User Story 31223: Add Provision to Lock Supplier Packing slip, Invoice, and Payment Transaction - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4492:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-04-2021 *********************************** */
                "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`, `createdBy`, `updatedAt`,`createByRoleId`,`updateByRoleId`)  \n" +
                "VALUES ('Allow to Lock Supplier Packing Slip', 1, 0, CURRENT_TIMESTAMP(), 1, CURRENT_TIMESTAMP(), 1, 1);  \n" +
                "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`, `createdBy`, `updatedAt`,`createByRoleId`,`updateByRoleId`)  \n" +
                "VALUES ('Allow to Lock Supplier Invoice', 1, 0, CURRENT_TIMESTAMP(), 1, CURRENT_TIMESTAMP(), 1, 1);  \n" +
                "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`, `createdBy`, `updatedAt`,`createByRoleId`,`updateByRoleId`)  \n" +
                "VALUES ('Allow to Lock Supplier Debit Memo', 1, 0, CURRENT_TIMESTAMP(), 1, CURRENT_TIMESTAMP(), 1, 1);  \n" +
                "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`, `createdBy`, `updatedAt`,`createByRoleId`,`updateByRoleId`)  \n" +
                "VALUES ('Allow to Lock Supplier Credit Memo', 1, 0, CURRENT_TIMESTAMP(), 1, CURRENT_TIMESTAMP(), 1, 1);  \n" +
                /* **************************** Add Script Version ->21-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4493,'2.00','V1','User Story 31223: Add Provision to Lock Supplier Packing slip, Invoice, and Payment Transaction - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4493:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-04-2021 *********************************** */
                "drop procedure if exists `Sproc_RetrivePackingSlipMaterialReceiveList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(10),  \n" +
                "	IN pMfgCodeIds VARCHAR(16383),  \n" +
                "	IN pAdvanceSearchPoSoPsInv VARCHAR(50),  \n" +
                "	IN pMfrPnId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pAdvanceSearchPoSoPsInv IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "											supplierSONumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	poNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	packingSlipNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	refInvoiceNumber = '\", pAdvanceSearchPoSoPsInv, \"'\"  \n" +
                "									  \" )  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
                "				SELECT 	refPackingSlipMaterialRecID  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrivePackingSlipMaterialReceiveList = CONCAT(\"  \n" +
                "			SELECT  *  \n" +
                "			FROM	(  \n" +
                "					SELECT 		p.id,                \n" +
                "							p.systemId,        \n" +
                "							p.poNumber,      \n" +
                "							po.id poId,                      \n" +
                "							p.mfgCodeID,                        \n" +
                "							p.supplierSONumber,                        \n" +
                "							p.packingSlipNumber,                        \n" +
                "							p.packingSlipDate,                        \n" +
                "							p.invoiceNumber,                        \n" +
                "							p.invoiceDate,                        \n" +
                "							p.creditMemoNumber,                        \n" +
                "							p.creditMemoDate,                        \n" +
                "							p.debitMemoNumber,                        \n" +
                "							p.debitMemoDate,                        \n" +
                "							p.receiptDate,                        \n" +
                "							p.description,                        \n" +
                "							p.billToAddress,                        \n" +
                "							p.shipToAddress,                        \n" +
                "							p.poVersion,                        \n" +
                "							p.isDeleted,                        \n" +
                "							p.receiptType,                        \n" +
                "							p.`status`,                   \n" +
                "							p.packingSlipModeStatus,                     \n" +
                "							p.chequeNumber,                        \n" +
                "							p.chequeDate,                        \n" +
                "							p.chequeAmount,                        \n" +
                "							p.applyDate,                        \n" +
                "							p.refParentCreditDebitInvoiceno,                        \n" +
                "							p.refPackingSlipNumberForInvoice,                        \n" +
                "							p.invoiceTotalDue,                        \n" +
                "							p.isTariffInvoice,                        \n" +
                "							p.bankName,              									                                           \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,                                     \n" +
                "							fun_getUserNameByID(p.createdBy)  createdByName,                                           \n" +
                "							fun_getMfgCodeByID(p.mfgCodeID) supplierCode,           \n" +
                "							fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCodeName,                              \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,                          \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,                          \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                          \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,                  \n" +
                "							(                \n" +
                "								CASE                \n" +
                "									WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'                \n" +
                "									WHEN p.packingSlipModeStatus = 'P' THEN 'Publish'                \n" +
                "									ELSE NULL                \n" +
                "								END                \n" +
                "							) packingSlipModeStatusValue,  	                \n" +
                "							ps.id invoiceId,                \n" +
                "							ps.invoiceNumber refInvoiceNumber,                \n" +
                "							ps.invoiceDate refInvoiceDate,                \n" +
                "							(                \n" +
                "								CASE                \n" +
                "									WHEN p.status = 'I' THEN 'Investigate'                \n" +
                "									WHEN p.status = 'W' THEN 'Waiting for Invoice'                \n" +
                "									WHEN p.status = 'IR' THEN 'Invoice Received'                \n" +
                "									WHEN p.status = 'A' THEN 'Approved to Pay'                \n" +
                "									WHEN p.status = 'P' THEN 'Paid'                \n" +
                "									ELSE NULL                \n" +
                "								END                \n" +
                "							) statusValue,                 \n" +
                "							IFNULL(g.cnt,0) packingSlipDocCount,           \n" +
                "							psm.totalDetailLine itemReceived,              \n" +
                "							psm.totalRejectLine totalRejectedLine,  \n" +
                "                            p.lockStatus,  \n" +
                "                            (case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "								when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "                                when p.lockStatus = 'LC' then 'Locked'  \n" +
                "                                else null end  \n" +
                "                            ) lockStatusValue,  \n" +
                "                            fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "                            fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "                            fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "					FROM		packing_slip_material_receive p                  \n" +
                "					LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0                  \n" +
                "					LEFT JOIN 	(                \n" +
                "								SELECT 		refPackingSlipMaterialRecID, COUNT(1) totalDetailLine, SUM(IF(psm.receivedStatus = 'R', 1, 0)) AS totalRejectLine               \n" +
                "								FROM 		packing_slip_material_receive_det psm                 \n" +
                "								WHERE 		isDeleted = 0                 \n" +
                "								GROUP BY 	refPackingSlipMaterialRecID                \n" +
                "							) psm ON psm.refPackingSlipMaterialRecID = p.id                \n" +
                "					LEFT JOIN 	vu_genericfilescount g ON g.gencFileOwnerType = 'packing_slip' AND g.refTransID = p.id                            \n" +
                "					LEFT JOIN 	purchase_order_mst po ON po.poNumber = p.poNumber AND po.isDeleted = 0    \n" +
                "					WHERE   	p.deletedAt IS NULL AND FIND_IN_SET(p.receiptType, '\", pReceiptType ,\"')                   \n" +
                "				) a                  \n" +
                "			WHERE \", v_advanceFilterWhereClause                  \n" +
                "		);                              \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;                                                        \n" +
                "	ELSE                                                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                        \n" +
                "	END IF;	                                                        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                        \n" +
                "		SET pWhereClause = '1=1' ;                                                        \n" +
                "	END IF;	                                                \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                         \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                        \n" +
                "	ELSE	                                                        \n" +
                "		SET rowNumWhere = '';                                                        \n" +
                "	END IF;	                                                        \n" +
                "  \n" +
                "	/* to get total count of rows */                                           \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c where 1=1 AND \", pWhereClause);            	                              \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                          \n" +
                "	EXECUTE query1;                                          \n" +
                "	DEALLOCATE PREPARE query1;                                        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                          \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                          \n" +
                "	EXECUTE query2;                                          \n" +
                "	DEALLOCATE PREPARE query2;                                      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->21-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4494,'2.00','V1','User Story 31223: Add Provision to Lock Supplier Packing slip, Invoice, and Payment Transaction - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4494:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 21-04-2021 *********************************** */
                "UPDATE `rfq_lineitems_errorcode` SET `isAllowToEngrApproved` = '1' where errorCode = 'MAPPARTPROGRAMREFDES';  \n" +
                /* **************************** Add Script Version -> 21-04-2021 *********************************** */
                "update rfq_lineitems_errorcode  \n" +
                "set   \n" +
                "description = '<% MFR %> <% MFR PN %> Functional Type is mismatched among with alternate parts. Either approve it from part processing menu or make correction in Part Master and refresh the BOM.',  \n" +
                "org_description = '<% MFR %> <% MFR PN %> Functional Type is mismatched among with alternate parts. Either approve it from part processing menu or make correction in Part Master and refresh the BOM.',  \n" +
                "displayName = 'Mismatch Functional Type'  \n" +
                "where errorCode = 'MISMATCHFUNCTIONALCATEGOR';  \n" +
                "  \n" +
                "  \n" +
                "update rfq_lineitems_errorcode  \n" +
                "set   \n" +
                "description = '<% MFR %> <% MFR PN %> Mounting Type is mismatched among with alternate parts. Either approve it from part processing menu or make correction in Part Master and refresh the BOM.',  \n" +
                "org_description = '<% MFR %> <% MFR PN %> Mounting Type is mismatched among with alternate parts. Either approve it from part processing menu or make correction in Part Master and refresh the BOM.',  \n" +
                "displayName = 'Mismatch Mounting Type'  \n" +
                "where errorCode = 'MISMATCHMOUNTINGTYPE';  \n" +
                /* **************************** Add Script Version -> 21-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4495,'2.00','V1','Bug 32602: QA Testing findings for #30241 : Mounting type mismatch related changes - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4495:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 21-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(    \n" +
                "IN ppartID INT    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;    \n" +
                "CREATE TEMPORARY TABLE tempRfq_lineitems AS    \n" +
                "SELECT a.id, a.lineID, a.cust_lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,          \n" +
                "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT isCPN FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPN,          \n" +
                "(CASE WHEN b.unitName IS NULL THEN a.org_uomName ELSE b.unitName END) AS uomID,    \n" +
                "(CASE WHEN a.programingStatus = 1 THEN 'Pre-Assy'     \n" +
                "		WHEN a.programingStatus = 2 THEN 'Post-Assy'     \n" +
                "        WHEN a.programingStatus = 3 THEN 'Cust will program'     \n" +
                "        WHEN a.programingStatus = 4 THEN 'Pre-Programmed'     \n" +
                "        ELSE 'N/A' END) AS programingStatus,    \n" +
                "CASE WHEN a.substitutesAllow IS NULL THEN a.org_substitutesAllow ELSE CASE WHEN a.substitutesAllow = 3 THEN 'Yes with Customer Approval' WHEN a.substitutesAllow = 2 THEN 'No' ELSE '' END END AS substitutesAllow,    \n" +
                "CASE WHEN (SELECT COUNT(1) FROM kit_allocation WHERE refBOMLineID = a.id AND `status` = 'A') > 0 THEN 1 ELSE 0 END AS allocatedInKit,    \n" +
                "a.description, a.level, a.numOfPosition, a.numOfRows, a.customerRev,          \n" +
                "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT programingRequired FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPNProgrammingRequire,    \n" +
                "a.customerDescription, a.customerPartDesc, part.partTypeName as partclassID, a.isInstall, a.isPurchase, a.isNotRequiredKitAllocation,    \n" +
                "a.isSupplierToBuy, a.leadQty, a.attritionRate, a.valueAddedCost, a.refRFQLineItemID, a.dnpQty, a.dnpDesig, a.qpaDesignatorStep,    \n" +
                "a.duplicateCPNStep, a.restrictCPNUseWithPermissionStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseInBOMStep,    \n" +
                "a.requireMountingTypeStep, a.requireFunctionalTypeStep, a.dnpInvalidREFDESStep, a.requireMountingTypeError,    \n" +
                "a.requireFunctionalTypeError, a.qpaDesignatorColorPriority, a.mergeLines, a.lineMergeStep,    \n" +
                "(CASE WHEN a.isBuyDNPQty = 'Y' THEN 'YES'     \n" +
                "	WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned'     \n" +
                "    WHEN a.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'     \n" +
                "    ELSE 'NO' END) AS isBuyDNPQty,      \n" +
                "a.isObsoleteLine,    \n" +
                "a.customerApprovalForQPAREFDESStep,    \n" +
                "a.customerApprovalForBuyStep,    \n" +
                "a.customerApprovalForPopulateStep,    \n" +
                "a.dnpQPARefDesStep,    \n" +
                "a.customerApprovalForDNPQPAREFDESStep,    \n" +
                "a.customerApprovalForDNPBuyStep,    \n" +
                "a.customerApprovalCPN,    \n" +
                "fun_getLatestCutomerComment(a.id, 2) qpaCustomerApprovalComment,    \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedQPA,      \n" +
                "fun_getLatestCutomerComment(a.id, 18) dnpqpaCustomerApprovalComment,    \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedDNPQPA,     \n" +
                "fun_getLatestCutomerComment(a.id, 3) buyCustomerApprovalComment,    \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuy,    \n" +
                "fun_getLatestCutomerComment(a.id, 17) buyDNPCustomerApprovalComment,    \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuyDNP,      \n" +
                "fun_getLatestCutomerComment(a.id, 4) populateCustomerApprovalComment,    \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPopulate,    \n" +
                "fun_getLatestCutomerComment(a.id, 5) cpnCustomerApprovalComment,    \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedCPN,    \n" +
                "fun_getLatestCutomerComment(a.id, 19) kitAllocationNotRequiredComment,    \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 19 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isNotRequiredKitAllocationApproved,      \n" +
                "ac.description AS additionalComment,    \n" +
                "ac.id AS additionalCommentId    \n" +
                "FROM rfq_lineitems a    \n" +
                "LEFT JOIN uoms b ON a.uomID = b.id AND IFNULL(b.isDeleted,0) = 0    \n" +
                "LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0    \n" +
                "LEFT JOIN rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = a.id AND IFNULL(ac.isDeleted,0) = 0    \n" +
                "WHERE IFNULL(a.isDeleted,0) = 0 AND a.partID = ppartID;       \n" +
                "  \n" +
                "SELECT b.id,          \n" +
                "b.lineID,    \n" +
                "b.cust_lineID,    \n" +
                "b.qpa,    \n" +
                "b.refDesig,    \n" +
                "(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgName ELSE a.mfgCode END) AS mfgCode,    \n" +
                "a.mfgCodeID,    \n" +
                "mcm.acquisitionDetail,    \n" +
                "a.mfgPN,    \n" +
                "a.mfgPNID,    \n" +
                "(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgName ELSE a.distributor END) AS distributor,	    \n" +
                "mcmDist.acquisitionDetail AS distAcquisitionDetail,    \n" +
                "a.distMfgCodeID,    \n" +
                "a.distPN,    \n" +
                "a.distMfgPNID,    \n" +
                "b.custPN,    \n" +
                "b.custPNID,    \n" +
                "b.isCustPN,    \n" +
                "b.uomID,    \n" +
                "b.programingStatus,    \n" +
                "b.substitutesAllow,    \n" +
                "b.allocatedInKit,    \n" +
                "a.description descriptionAlternate,    \n" +
                "b.description,    \n" +
                "b.level,    \n" +
                "b.numOfPosition,    \n" +
                "b.numOfRows,    \n" +
                "b.customerRev,              \n" +
                "b.isCustPNProgrammingRequire,            \n" +
                "b.customerDescription,    \n" +
                "b.customerPartDesc,    \n" +
                "b.partclassID,    \n" +
                "b.isInstall,    \n" +
                "b.isPurchase,       \n" +
                "b.isNotRequiredKitAllocation,    \n" +
                "b.isSupplierToBuy,      \n" +
                "b.leadQty,    \n" +
                "b.attritionRate,    \n" +
                "b.valueAddedCost,    \n" +
                "b.refRFQLineItemID,    \n" +
                "b.dnpQty,    \n" +
                "b.dnpDesig,    \n" +
                "a.id AS rfqAlternatePartID,    \n" +
                "b.qpaDesignatorStep,    \n" +
                "b.qpaDesignatorColorPriority,    \n" +
                "b.duplicateCPNStep,    \n" +
                "b.dnpInvalidREFDESStep,    \n" +
                "b.restrictCPNUseWithPermissionStep,    \n" +
                "b.restrictCPNUsePermanentlyStep,    \n" +
                "b.restrictCPNUseInBOMStep,    \n" +
                "b.requireMountingTypeStep,    \n" +
                "b.requireFunctionalTypeStep,      \n" +
                "b.requireMountingTypeError,    \n" +
                "b.requireFunctionalTypeError,    \n" +
                "b.isBuyDNPQty,    \n" +
                "b.isObsoleteLine,    \n" +
                "b.customerApprovalForQPAREFDESStep,    \n" +
                "b.customerApprovalForBuyStep,    \n" +
                "b.customerApprovalForPopulateStep,      \n" +
                "b.dnpQPARefDesStep,    \n" +
                "b.customerApprovalForDNPQPAREFDESStep,    \n" +
                "b.customerApprovalForDNPBuyStep,    \n" +
                "b.customerApprovalCPN,    \n" +
                "b.qpaCustomerApprovalComment,      \n" +
                "b.dnpqpaCustomerApprovalComment,    \n" +
                "b.buyCustomerApprovalComment,      \n" +
                "b.buyDNPCustomerApprovalComment,    \n" +
                "b.populateCustomerApprovalComment,    \n" +
                "b.cpnCustomerApprovalComment,      \n" +
                "b.isCustomerApprovedQPA,     \n" +
                "b.isCustomerApprovedBuy,    \n" +
                "b.isCustomerApprovedDNPQPA,    \n" +
                "b.isCustomerApprovedBuyDNP,    \n" +
                "b.isCustomerApprovedPopulate,    \n" +
                "b.isCustomerApprovedCPN,         \n" +
                "b.kitAllocationNotRequiredComment,    \n" +
                "b.isNotRequiredKitAllocationApproved,    \n" +
                "a.mfgVerificationStep,    \n" +
                "a.mfgDistMappingStep,    \n" +
                "a.mfgCodeStep,    \n" +
                "a.customerApproval,    \n" +
                "a.isCustomerUnAppoval,    \n" +
                "a.org_mfgCode,    \n" +
                "a.org_mfgPN,    \n" +
                "a.org_distributor,    \n" +
                "a.org_distPN,    \n" +
                "a.distVerificationStep,    \n" +
                "a.distCodeStep,    \n" +
                "a.getMFGPNStep,    \n" +
                "a.obsoletePartStep,    \n" +
                "a.mfgGoodPartMappingStep,    \n" +
                "a.mfgPNStep,    \n" +
                "a.distPNStep,    \n" +
                "a.badMfgPN,    \n" +
                "a.distGoodPartMappingStep,    \n" +
                "a.nonRohsStep,    \n" +
                "a.epoxyStep,    \n" +
                "a.invalidConnectorTypeStep,    \n" +
                "a.duplicateMPNInSameLineStep,    \n" +
                "a.mismatchMountingTypeStep,    \n" +
                "a.mismatchFunctionalCategoryStep,    \n" +
                "a.mismatchFunctionalCategoryStep,    \n" +
                "a.restrictUseWithPermissionStep,    \n" +
                "a.restrictUsePermanentlyStep,    \n" +
                "a.partPinIsLessthenBOMPinStep,       \n" +
                "a.mismatchRequiredProgrammingStep,             \n" +
                "a.mappingPartProgramStep,               \n" +
                "a.exportControlledStep,    \n" +
                "a.tbdPartStep,    \n" +
                "a.userData1,    \n" +
                "a.userData2,    \n" +
                "a.userData3,    \n" +
                "a.userData4,    \n" +
                "a.userData5,    \n" +
                "a.userData6,    \n" +
                "a.userData7,    \n" +
                "a.userData8,    \n" +
                "a.userData9,    \n" +
                "a.userData10,    \n" +
                "a.pickupPadRequiredStep,    \n" +
                "a.matingPartRquiredStep,         \n" +
                "a.suggestedGoodPartStep,           \n" +
                "a.suggestedGoodDistPartStep,    \n" +
                "a.driverToolsRequiredStep,    \n" +
                "a.functionalTestingRequiredStep,    \n" +
                "a.mismatchCustomPartStep,    \n" +
                "a.mismatchValueStep,           \n" +
                "a.approvedMountingType,    \n" +
                "a.mismatchPackageStep,    \n" +
                "a.mismatchPowerStep,    \n" +
                "a.mismatchToleranceStep,    \n" +
                "a.mismatchTempratureStep,    \n" +
                "a.mismatchNumberOfRowsStep,    \n" +
                "a.uomMismatchedStep,    \n" +
                "a.programingRequiredStep,    \n" +
                "a.mismatchProgrammingStatusStep,    \n" +
                "a.mismatchColorStep,    \n" +
                "a.restrictUseInBOMStep,    \n" +
                "a.restrictUseInBOMWithPermissionStep,    \n" +
                "a.restrictUseInBOMExcludingAliasStep,    \n" +
                "a.restrictUseInBOMExcludingAliasWithPermissionStep,           \n" +
                "a.restrictUseExcludingAliasStep,    \n" +
                "a.restrictUseExcludingAliasWithPermissionStep,           \n" +
                "a.unknownPartStep,    \n" +
                "a.defaultInvalidMFRStep,    \n" +
                "a.isUnlockApprovedPart,     \n" +
                "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN               \n" +
                "cpnPart.partTypeName            \n" +
                "ELSE               \n" +
                "part.partTypeName END) AS parttypeID,             \n" +
                "a.parttypeID AS functionalID,      \n" +
                "part.isTemperatureSensitive AS isFunctionalTemperatureSensitive,               \n" +
                "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN               \n" +
                "cpnMount.name           \n" +
                "ELSE               \n" +
                "mount.name END) AS mountingtypeID,	            \n" +
                "a.mountingtypeID AS mountingID,    \n" +
                "cat.categoryname partcategoryID,    \n" +
                "(SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,    \n" +
                "(SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,    \n" +
                "(SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,    \n" +
                "(SELECT (SELECT rh.refMainCategoryID FROM rfq_rohsmst rh WHERE rh.id = co.RoHSStatusID) FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) refMainCategoryID,    \n" +
                "CASE WHEN    \n" +
                "(co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR    \n" +
                "EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE co.partStatus = cp.id AND cp.name != 'Active' AND cp.isDeleted = 0)    \n" +
                "THEN 1 ELSE 0 END isObsolete,    \n" +
                "co.PIDCode,     \n" +
                "co.mfgPNDescription,    \n" +
                "co.pitch,    \n" +
                "co.noOfRows,    \n" +
                "IFNULL(pkg.name, co.partPackage) AS partPackage,    \n" +
                "co.value,    \n" +
                "co.tolerance,    \n" +
                "co.voltage,            \n" +
                "co.isCustom,    \n" +
                "co.packaging,    \n" +
                "co.deviceMarking,    \n" +
                "co.powerRating,    \n" +
                "co.minOperatingTemp,    \n" +
                "co.maxOperatingTemp,    \n" +
                "co.connecterTypeID,    \n" +
                "co.driverToolRequired,     \n" +
                "co.matingPartRquired,     \n" +
                "co.pickupPadRequired,     \n" +
                "co.programingRequired,     \n" +
                "co.dataSheetLink,              \n" +
                "co.isCPN,              \n" +
                "(SELECT GROUP_CONCAT(ComponentID) FROM component_drivetools WHERE refComponentID = co.id AND isDeleted = 0) AS driveToolIDs,     \n" +
                "(SELECT GROUP_CONCAT(ComponentID) FROM component_alternatepn WHERE refComponentID = co.id AND isDeleted = 0 AND `type` = 3) AS programingRequiredIDs,          \n" +
                "(SELECT GROUP_CONCAT(attributeID) FROM component_dynamic_attribute_mapping_part WHERE mfgPNID = co.id AND deletedAt IS NULL) AS operationalAttributeIDs,      \n" +
                "(SELECT pickTemperatureAbove FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxSolderingTemperature,    \n" +
                "(SELECT timeLiquidusSecond FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxTemperatureTime,    \n" +
                "co.isTemperatureSensitive,    \n" +
                "co.noOfPosition AS componentLead,    \n" +
                "fun_getPartStatusNameByID(co.partStatus) AS partStatus,    \n" +
                "fun_getPartStatusColorCodeByID(co.partStatus) AS partStatuscolorCode,    \n" +
                "co.createdBy,    \n" +
                "(SELECT u.unitName FROM UOMs u WHERE u.id = co.uom ) AS uom,    \n" +
                "co.color,    \n" +
                "co.uom AS partUOMID,          \n" +
                "co.serialNumber,        \n" +
                "CASE WHEN          \n" +
                "(SELECT COUNT(cs.isExportControlled) AS isExportControlled  FROM component c          \n" +
                "LEFT JOIN component_standard_details csd ON csd.componentID = c.id AND IFNULL(csd.isDeleted,0) = 0          \n" +
                "LEFT JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1          \n" +
                "WHERE c.id = co.id) > 0 THEN 1 ELSE 0 END isExportControlled,            \n" +
                "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16 OR rac.errorCode = 20) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) partCustomerApprovalComment,      \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16 OR rac.errorCode = 20) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPart,    \n" +
                "b.additionalComment ,    \n" +
                "b.additionalCommentId,      \n" +
                "a.suggestedByApplicationMsg,      \n" +
                "a.suggestedByApplicationStep      \n" +
                "FROM rfq_lineitems_alternatepart a    \n" +
                "LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0    \n" +
                "LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0    \n" +
                "LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0    \n" +
                "LEFT JOIN rfq_parttypemst part ON co.functionalCategoryID = part.id         \n" +
                "LEFT JOIN rfq_mountingtypemst mount ON co.mountingtypeID = mount.id              \n" +
                "LEFT JOIN rfq_partcategory cat ON co.category = cat.id         \n" +
                "LEFT JOIN rfq_packagecasetypemst pkg ON co.partPackageID = pkg.id         \n" +
                "JOIN tempRfq_lineitems b ON a.rfqLineItemsID = b.id    \n" +
                "LEFT JOIN component cpn ON b.custPNID = cpn.id AND cpn.isDeleted = 0    \n" +
                "LEFT JOIN rfq_parttypemst cpnPart ON cpn.functionalCategoryID = cpnPart.id    \n" +
                "LEFT JOIN rfq_mountingtypemst cpnMount ON cpn.mountingtypeID = cpnMount.id             \n" +
                "WHERE IFNULL(a.isDeleted,0) = 0 AND b.id IS NOT NULL ORDER BY b.lineID, a.id;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateConsolidateDataForPart`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateConsolidateDataForPart`(            \n" +
                "	IN prfqAssyIDORrefSalesOrderdetID INT,            \n" +
                "    IN ppartID INT            \n" +
                ")  \n" +
                "BEGIN               \n" +
                "DECLARE v_GroupConcatSeparator text;      \n" +
                "	SET SESSION group_concat_max_len = 500000;         \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;        \n" +
                "       -- Create leavel wise assembly BOM data              \n" +
                "        DROP TEMPORARY TABLE IF EXISTS leveldata;            \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS leveldata AS            \n" +
                "		WITH RECURSIVE cte AS            \n" +
                "		(            \n" +
                "			(            \n" +
                "				SELECT rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id AS lineItemID,rla.id AS alternateID,1 AS LEVEL, com.category,rla.rfqLineItemsID, rl.valueAddedCost,            \n" +
                "				rl.refRFQLineItemID, rl.refDesig,IFNULL(rl.qpa,0) AS qpacount, IFNULL(rl.qpa,0) AS kitqpacount, IFNULL(rl.dnpQty,0) dnpQty, IFNULL(rl.dnpQty,0) kitdnpQty,             \n" +
                "                rl.dnpDesig, IFNULL(rl.dnpDesigCount,0) actualdnpDesigCount, rl.isBuyDNPQty, IFNULL(rl.qpa,0) AS actualQPA, IFNULL(rl.refDesigCount,0) AS actualDesgCount,            \n" +
                "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END) ELSE IFNULL(rl.qpa,0) END) AS qpa1,            \n" +
                "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END) ELSE IFNULL(rl.qpa,0) END) AS kitqpa1,            \n" +
                "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END) ELSE IFNULL(rl.dnpQty,0) END) AS dnpQPA1,            \n" +
                "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END) ELSE IFNULL(rl.dnpQty,0) END) AS kitdnpQPA1,            \n" +
                "				IFNULL(rl.refDesigCount,0) refDesigCount, IFNULL(rl.refDesigCount,0) kitrefDesigCount, IFNULL(rl.dnpDesigCount,0) dnpDesigCount, IFNULL(rl.dnpDesigCount,0) kitdnpDesigCount, rl.qpaDesignatorStep, rl.custPNID,            \n" +
                "				IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep,IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep, IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,            \n" +
                "				CONCAT(rl.custPNID,' | ',IFNULL(rl.restrictCPNUseInBOMStep,0),' | ',IFNULL(rl.restrictCPNUsePermanentlyStep,1),' | ',IFNULL(rl.restrictCPNUseWithPermissionStep,1)) CPNPart,            \n" +
                "				/*            \n" +
                "				CONCAT(rla.mfgCodeID,' | ', rla.mfgPNID,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',            \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',            \n" +
                "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) AS part,            \n" +
                "				*/            \n" +
                "				IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) restrictUseInBOMExcludingAliasStep,            \n" +
                "				IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) restrictUseInBOMExcludingAliasWithPermissionStep,            \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0) restrictUseInBOMStep,            \n" +
                "				IFNULL(rla.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,            \n" +
                "				IFNULL(rla.restrictUseExcludingAliasStep,1) restrictUseExcludingAliasStep,            \n" +
                "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) restrictUseExcludingAliasWithPermissionStep,            \n" +
                "				IFNULL(rla.restrictUsePermanentlyStep,1) restrictUsePermanentlyStep,            \n" +
                "				IFNULL(rla.restrictUseWithPermissionStep,1) restrictUseWithPermissionStep,            \n" +
                "				/* we not required this in functionaly this will be used for check in detail            \n" +
                "				concat(rla.mfgCode,' | ',rla.mfgPN,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',            \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',            \n" +
                "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) as partcode,            \n" +
                "				*/            \n" +
                "				rl.attritionRate,rl.isInstall, rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,rl.isActive,rl.isNoBidsPN,rl.isDraft,rl.lineID,rl.numOfPosition, prfqAssyIDORrefSalesOrderdetID AS rfqAssyIDORrefSalesOrderdetID,            \n" +
                "				rl.uomID,rl.rfqAssyBomID, fun_getAssyPIDCodeByID(rl.partID) PIDCode, com.liveVersion, rl.isNotRequiredKitAllocation,            \n" +
                "                (CASE WHEN rl.isNotRequiredKitAllocation = 1 THEN            \n" +
                "					(SELECT COMMENT FROM rfq_lineitems_approval_comment WHERE errorcode = 19 AND rfqLineItemsID IS NOT NULL ORDER BY id DESC LIMIT 1)            \n" +
                "				ELSE '' END) AS notRequiredKitAllocationReason,            \n" +
                "                rla.approvedMountingType,rla.mismatchMountingTypeStep,rla.uomMismatchedStep,rla.mismatchFunctionalCategoryStep, com.connecterTypeID            \n" +
                "				FROM  rfq_lineitems rl            \n" +
                "				INNER JOIN rfq_lineitems_alternatepart rla ON rla.rfqLineItemsID = rl.id AND rl.isDeleted = 0            \n" +
                "				INNER JOIN component com ON com.id = rla.mfgPNID and com.isGoodPart <> 2    \n" +
                "				INNER JOIN component comp ON comp.id = rl.partID            \n" +
                "				WHERE rl.partId = ppartID  AND ifnull(rla.mfgGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodPartStep,1) = 1 and ifnull(rla.distGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodDistPartStep,1) = 1 AND rla.isDeleted = 0            \n" +
                "			)            \n" +
                "			UNION ALL            \n" +
                "			(            \n" +
                "				SELECT rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id AS lineItemID,rla.id AS alternateID,cte.level+1 AS LEVEL, com.category,rla.rfqLineItemsID,             \n" +
                "				rl.valueAddedCost, rl.refRFQLineItemID, rl.refDesig,            \n" +
                "				(            \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN            \n" +
                "							(cte.dnpQPA1 + cte.qpa1)            \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN            \n" +
                "							(cte.qpa1) 						              \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN            \n" +
                "							(cte.dnpQPA1)            \n" +
                "					END) * IFNULL(rl.qpa,0)            \n" +
                "				) AS qpacount,             \n" +
                "                (            \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN                     \n" +
                "							0            \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN            \n" +
                "							(cte.qpa1)            \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN            \n" +
                "							(cte.dnpQPA1)            \n" +
                "						ELSE            \n" +
                "							(cte.dnpQPA1 + cte.qpa1)            \n" +
                "					END) * IFNULL(rl.qpa,0)                \n" +
                "				) AS kitqpacount,             \n" +
                "				(            \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN            \n" +
                "							(cte.dnpQPA1 + cte.qpa1)            \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN            \n" +
                "							(cte.qpa1)            \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN            \n" +
                "							(cte.dnpQPA1)            \n" +
                "					END) * IFNULL(rl.dnpQty,0)            \n" +
                "				) AS dnpQty,            \n" +
                "                (            \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN            \n" +
                "							0            \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN            \n" +
                "							(cte.qpa1)            \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN            \n" +
                "							(cte.dnpQPA1)            \n" +
                "						ELSE            \n" +
                "							(cte.dnpQPA1 + cte.qpa1)            \n" +
                "					END) * IFNULL(rl.dnpQty,0)            \n" +
                "				) AS kitdnpQty,            \n" +
                "				rl.dnpDesig, IFNULL(rl.dnpDesigCount,0) actualdnpDesigCount, rl.isBuyDNPQty, IFNULL(rl.qpa,0) AS actualQPA, IFNULL(rl.refDesigCount,0) AS actualDesgCount,            \n" +
                "				(            \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN            \n" +
                "							(cte.dnpQPA1 + cte.qpa1)            \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN            \n" +
                "							(cte.qpa1)            \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN            \n" +
                "							(cte.dnpQPA1)            \n" +
                "					END)*            \n" +
                "					(CASE WHEN rl.uomID = -1 THEN            \n" +
                "						(CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN            \n" +
                "								IFNULL(rl.refDesigCount,0)            \n" +
                "							ELSE IFNULL(rl.qpa,0)            \n" +
                "						END)            \n" +
                "						ELSE IFNULL(rl.qpa,0)            \n" +
                "					END)            \n" +
                "				) AS qpa1,            \n" +
                "                (            \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN            \n" +
                "							0            \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN            \n" +
                "							(cte.qpa1)            \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN            \n" +
                "							(cte.dnpQPA1)            \n" +
                "						ELSE            \n" +
                "							(cte.dnpQPA1 + cte.qpa1)            \n" +
                "					END)*            \n" +
                "                    (CASE WHEN rl.uomID = -1 THEN            \n" +
                "						(CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END)            \n" +
                "					ELSE             \n" +
                "						IFNULL(rl.qpa,0)            \n" +
                "                    END)            \n" +
                "				) AS kitqpa1,            \n" +
                "				(            \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN            \n" +
                "							(cte.dnpQPA1 + cte.qpa1)            \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN            \n" +
                "							(cte.qpa1)            \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN            \n" +
                "							(cte.dnpQPA1)            \n" +
                "					END)*            \n" +
                "					(CASE WHEN rl.uomID = -1 THEN             \n" +
                "						(CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN             \n" +
                "								IFNULL(rl.dnpDesigCount,0)             \n" +
                "							ELSE IFNULL(rl.dnpQty,0)             \n" +
                "						END)             \n" +
                "						ELSE IFNULL(rl.dnpQty,0)             \n" +
                "					END)            \n" +
                "				) AS dnpQPA1,            \n" +
                "                (            \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN            \n" +
                "							0            \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN            \n" +
                "							(cte.qpa1)            \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN            \n" +
                "							(cte.dnpQPA1)            \n" +
                "						ELSE            \n" +
                "							(cte.dnpQPA1 + cte.qpa1)            \n" +
                "					END) *             \n" +
                "                    (CASE WHEN rl.uomID = -1 THEN            \n" +
                "						(CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END)            \n" +
                "					ELSE            \n" +
                "						IFNULL(rl.dnpQty,0)            \n" +
                "					END)            \n" +
                "				) AS kitdnpQPA1,              \n" +
                "				(            \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN            \n" +
                "							(cte.dnpQPA1 + cte.qpa1)            \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN            \n" +
                "							(cte.qpa1)            \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN            \n" +
                "							(cte.dnpQPA1)            \n" +
                "					END) *             \n" +
                "					IFNULL(rl.refDesigCount,0)            \n" +
                "				) refDesigCount,            \n" +
                "                (            \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN            \n" +
                "							0            \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN            \n" +
                "							(cte.qpa1)            \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN            \n" +
                "							(cte.dnpQPA1)            \n" +
                "						ELSE            \n" +
                "							(cte.dnpQPA1 + cte.qpa1)            \n" +
                "					END) * IFNULL(rl.refDesigCount,0)            \n" +
                "				) AS kitrefDesigCount,            \n" +
                "				(            \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN            \n" +
                "							(cte.dnpQPA1 + cte.qpa1)            \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN            \n" +
                "							(cte.qpa1)            \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN            \n" +
                "							(cte.dnpQPA1)            \n" +
                "					END) *            \n" +
                "					IFNULL(rl.dnpDesigCount,0)            \n" +
                "				) dnpDesigCount,            \n" +
                "                (            \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN            \n" +
                "							0            \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN            \n" +
                "							(cte.qpa1)            \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN            \n" +
                "							(cte.dnpQPA1)            \n" +
                "						ELSE            \n" +
                "							(cte.dnpQPA1 + cte.qpa1)            \n" +
                "					END) *            \n" +
                "					IFNULL(rl.dnpDesigCount,0)            \n" +
                "				) kitdnpDesigCount,            \n" +
                "				(CASE WHEN rl.qpaDesignatorStep != cte.qpaDesignatorStep THEN             \n" +
                "						1             \n" +
                "					ELSE rl.qpaDesignatorStep             \n" +
                "				END) AS qpaDesignatorStep ,            \n" +
                "				rl.custPNID, IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep, IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep,             \n" +
                "				IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,            \n" +
                "				CONCAT(rl.custPNID,' | ',IFNULL(rl.restrictCPNUseInBOMStep,0),' | ',IFNULL(rl.restrictCPNUsePermanentlyStep,1),' | ',IFNULL(rl.restrictCPNUseWithPermissionStep,1)) CPNPart,            \n" +
                "				/* CONCAT(rla.mfgCodeID,' | ', rla.mfgPNID,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) ,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) ,' | ',            \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0),' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0) ,' | ',IFNULL(rla.restrictUseExcludingAliasStep,1) ,' | ',IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) ,' | ',            \n" +
                "				IFNULL(rla.restrictUsePermanentlyStep,1) ,' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) AS part,*/            \n" +
                "				IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) restrictUseInBOMExcludingAliasStep,            \n" +
                "				IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) restrictUseInBOMExcludingAliasWithPermissionStep,            \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0) restrictUseInBOMStep,             \n" +
                "				IFNULL(rla.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,            \n" +
                "				IFNULL(rla.restrictUseExcludingAliasStep,1) restrictUseExcludingAliasStep,            \n" +
                "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) restrictUseExcludingAliasWithPermissionStep,            \n" +
                "				IFNULL(rla.restrictUsePermanentlyStep,1) restrictUsePermanentlyStep,            \n" +
                "				IFNULL(rla.restrictUseWithPermissionStep,1) restrictUseWithPermissionStep,            \n" +
                "				#com.packaginggroupID,            \n" +
                "				/* we not required this in functionaly this will be used for check in detail            \n" +
                "				concat(rla.mfgCode,' | ',rla.mfgPN,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',            \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',            \n" +
                "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) as partcode,            \n" +
                "				*/            \n" +
                "				rl.attritionRate,rl.isInstall, rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,rl.isActive,rl.isNoBidsPN,rl.isDraft,rl.lineID,rl.numOfPosition, prfqAssyIDORrefSalesOrderdetID AS rfqAssyIDORrefSalesOrderdetID,            \n" +
                "				rl.uomID,rl.rfqAssyBomID,fun_getAssyPIDCodeByID(rl.partID) PIDCode, com.liveVersion,rl.isNotRequiredKitAllocation,            \n" +
                "                (CASE WHEN rl.isNotRequiredKitAllocation = 1 THEN            \n" +
                "					(SELECT COMMENT FROM rfq_lineitems_approval_comment WHERE errorcode = 19 AND rfqLineItemsID IS NOT NULL ORDER BY id DESC LIMIT 1)            \n" +
                "				ELSE '' END) AS notRequiredKitAllocationReason,            \n" +
                "                rla.approvedMountingType,rla.mismatchMountingTypeStep,rla.uomMismatchedStep,rla.mismatchFunctionalCategoryStep,com.connecterTypeID            \n" +
                "				FROM  rfq_lineitems rl            \n" +
                "				INNER JOIN rfq_lineitems_alternatepart rla ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0            \n" +
                "				INNER JOIN component com ON com.id = rla.mfgPNID and com.isGoodPart <> 2           \n" +
                "				INNER JOIN component comp ON comp.id = rl.partID            \n" +
                "				JOIN cte cte ON cte.category = 3 AND rl.partID = cte.mfgPNID AND (cte.isPurchase = 1 OR (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P'))            \n" +
                "				WHERE ifnull(rla.mfgGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodPartStep,1) = 1 and ifnull(rla.distGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodDistPartStep,1) = 1 AND rla.isDeleted =0            \n" +
                "			)            \n" +
                "		)            \n" +
                "		SELECT cte.* FROM cte            \n" +
                "		ORDER BY lineItemID;            \n" +
                "  \n" +
                "	-- Create Temporary table for Alternate part with packaging alias grouping by lineitem            \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseAlternatepartwithPackagingGroup;            \n" +
                "		set @consolidateAlternatePartDetail = concat(\"CREATE TEMPORARY TABLE temp_LevleWiseAlternatepartwithPackagingGroup AS            \n" +
                "		SELECT a.rfqAssyIDORrefSalesOrderdetID, a.level, a.category, a.rfqlineitemsid, a.partid,            \n" +
                "        (CASE WHEN MIN(a.mountingTypeID) = MAX(a.mountingTypeID) THEN  /* Matched Mounting Type */            \n" +
                "					MIN(a.mountingTypeID)             \n" +
                "			WHEN MIN(a.mountingTypeID) !=  MAX(a.mountingTypeID)  AND MAX(approvedMountingType) = 1 THEN /*Mismatched with Approval Mounting Type */             \n" +
                "					MAX(approvedMountingTypeID)             \n" +
                "			ELSE  -1  /*-1 is TBD in case of Mismatched we need to display TBD mounting type*/ END) mountingtypeID,            \n" +
                "         (CASE WHEN MIN(a.partType) = MAX(a.partType) THEN /* Matched funcitonal Type */            \n" +
                "			MIN(a.partType)             \n" +
                "		ELSE             \n" +
                "			-1   /*-1 is TBD in case of Mismatched we need to display TBD functional type*/            \n" +
                "		END) partType,            \n" +
                "        (CASE WHEN MIN(a.connecterTypeID) = MAX(a.connecterTypeID) THEN  /* Matched connector Type */            \n" +
                "			MIN(a.connecterTypeID)            \n" +
                "		ELSE             \n" +
                "			-1  /*-1 is TBD in case of Mismatched we need to display TBD connector type*/            \n" +
                "		END) AS connecterTypeID,            \n" +
                "        MIN(a.uomMismatchedStep) AS uomMismatchedStep, MIN(a.mismatchFunctionalCategoryStep) AS mismatchFunctionalCategoryStep , MIN(a.mismatchMountingTypeStep) AS mismatchMountingTypeStep,            \n" +
                "        GROUP_CONCAT(a.mfgPNID ORDER BY a.mfgPNID) AS mfgpnIDs,            \n" +
                "        GROUP_CONCAT(CONCAT(a.mfgCodeID, ' | ', a.mfgPNID, ' | ', a.restrictUseInBOMExcludingAliasStep, ' | ',            \n" +
                "						a.restrictUseInBOMExcludingAliasWithPermissionStep, ' | ', a.restrictUseInBOMStep, ' | ',            \n" +
                "						a.restrictUseInBOMWithPermissionStep, ' | ', a.restrictUseExcludingAliasStep, ' | ',            \n" +
                "						a.restrictUseExcludingAliasWithPermissionStep, ' | ', a.restrictUsePermanentlyStep, ' | ',            \n" +
                "						a.restrictUseWithPermissionStep, ' | ', a.connecterTypeID, ' | ', a.partType, ' | ',a.mountingTypeID, ' | ',       \n" +
                "                        a.approvedMountingType ) ORDER BY mfgPNID SEPARATOR '\",v_GroupConcatSeparator,\"') Part,            \n" +
                "		GROUP_CONCAT(CONCAT('{ Level:', a.level, ' | AssyID:', a.AssyID, ' | Item:', TRIM(a.lineID) + 0, ' | PIDCode:', FUN_GETASSYPIDCODEBYID(a.mfgPNID),            \n" +
                "						' | mfgPNID: ', a.mfgPNID, ' | restrictUseInBOMExcludingAliasStep: ', a.restrictUseInBOMExcludingAliasStep,             \n" +
                "						' | restrictUseInBOMExcludingAliasWithPermissionStep:', a.restrictUseInBOMExcludingAliasWithPermissionStep, ' | restrictUseInBOMStep:', a.restrictUseInBOMStep,            \n" +
                "						' | restrictUseInBOMWithPermissionStep:', a.restrictUseInBOMWithPermissionStep, ' | restrictUseExcludingAliasStep:', a.restrictUseExcludingAliasStep,            \n" +
                "						' | restrictUseExcludingAliasWithPermissionStep:', a.restrictUseExcludingAliasWithPermissionStep, ' | restrictUsePermanentlyStep:', a.restrictUsePermanentlyStep,            \n" +
                "						' | restrictUseWithPermissionStep:', a.restrictUseWithPermissionStep, ' |Connector Type:', fun_getConnectorTypeNameByID(a.connecterTypeID) ,      \n" +
                "                        ' | Functional Type:', fun_getPartTypeNameByID(a.partType), ' | Mounting Type:', fun_getMountingTypeNameByID(a.mountingTypeID),       \n" +
                "                        ' | Approved Mounting Type:', approvedMountingTypeName,'}') ORDER BY mfgPNID SEPARATOR '\",v_GroupConcatSeparator,\"') AS mfgPartsWithPackagings            \n" +
                "		FROM             \n" +
                "			(SELECT x.rfqAssyIDORrefSalesOrderdetID, x.level, x.category, x.rfqlineitemsid, x.partid, x.AssyID, x.lineid, x.mfgPNID, x.mfgCodeID, x.mfgPN,            \n" +
                "					x.PIDCode, x.RoHSStatusID, x.feature, x.isCustom, x.partStatus, x.restrictUseInBOMStep, x.restrictUseInBOMWithPermissionStep,            \n" +
                "					x.restrictUsePermanentlyStep, x.restrictUseWithPermissionStep, x.restrictUseInBOMExcludingAliasStep, x.restrictUseInBOMExcludingAliasWithPermissionStep,            \n" +
                "					x.restrictUseExcludingAliasStep, x.restrictUseExcludingAliasWithPermissionStep, x.isDocumentUpload, x.mountingTypeID, x.partType,            \n" +
                "                    x.connecterTypeID, x.uomMismatchedStep, x.mismatchFunctionalCategoryStep, x.approvedMountingType, x.mismatchMountingTypeStep,            \n" +
                "                    x.approvedMountingTypeID, x.approvedMountingTypeName             \n" +
                "				FROM            \n" +
                "				(SELECT al.rfqAssyIDORrefSalesOrderdetID, al.level, al.category, al.rfqlineitemsid, al.lineid, al.partid, al.pidCode AS AssyID, IFNULL(d.id, c.id) AS mfgPNID,            \n" +
                "						IF((c.id = IFNULL(d.id, c.id)), TRUE, FALSE) isBomLine, IFNULL(c.mfgcodeID, d.mfgCodeId) mfgCodeID, IFNULL(d.mfgPN, c.mfgPN) AS mfgPN,            \n" +
                "						IFNULL(d.PIDCode, c.PIDCode) AS PIDCode, IFNULL(d.RoHSStatusID, c.RoHSStatusID) AS RoHSStatusID, IFNULL(d.feature, c.feature) AS feature,            \n" +
                "						IFNULL(d.isCustom, c.isCustom) AS isCustom, IFNULL(d.partStatus, d.partStatus) AS partStatus,             \n" +
                "						IFNULL(d.mountingTypeID,c.mountingTypeID) AS mountingTypeID, IFNULL(d.functionalCategoryID,c.functionalCategoryID) AS partType,             \n" +
                "                        IFNULL(d.connecterTypeID,IFNULL(c.connecterTypeID,-1)) AS connecterTypeID,            \n" +
                "						al.uomMismatchedStep, al.mismatchFunctionalCategoryStep, al.approvedMountingType,            \n" +
                "                        (CASE WHEN al.approvedMountingType = 1 THEN c.mountingTypeID ELSE -1 END) approvedMountingTypeID,            \n" +
                "                        (CASE WHEN al.approvedMountingType = 1 THEN fun_getMountingTypeNameByID(c.mountingTypeID) ELSE '' END) approvedMountingTypeName,            \n" +
                "                        al.mismatchMountingTypeStep,            \n" +
                "						IFNULL(al.restrictUseInBOMStep, 0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/            \n" +
                "						IFNULL(al.restrictUseInBOMWithPermissionStep, 0) restrictUseInBOMWithPermissionStep,            \n" +
                "						(CASE            \n" +
                "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part */            \n" +
                "								IFNULL(al.restrictUsePermanentlyStep, 1)             \n" +
                "							ELSE	 /*Packaging Alias*/              \n" +
                "								(CASE WHEN IFNULL(d.restrictUsePermanently, 0) = 1 THEN 0 ELSE 1 END)  /*Restrct from part master , UI side 0 equal to restrict*/                   \n" +
                "						END) AS restrictUsePermanentlyStep,            \n" +
                "						IFNULL(al.restrictUseWithPermissionStep, 1) restrictUseWithPermissionStep, 	/*Based on BOM Permission Packaging Alias will allow/Disallow  */                   \n" +
                "						(CASE            \n" +
                "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN  /*BOM Part*/            \n" +
                "								IFNULL(al.restrictUseInBOMExcludingAliasStep, 0)	 /*Ui side 1 equal to restrict value*/            \n" +
                "							ELSE             \n" +
                "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 1 ELSE 0 END) /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */            \n" +
                "						END) AS restrictUseInBOMExcludingAliasStep,            \n" +
                "						(CASE             \n" +
                "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part*/            \n" +
                "								IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep, 0)            \n" +
                "							ELSE   /*Packaging Alias*/            \n" +
                "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 1 ELSE 0 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */            \n" +
                "						END) AS restrictUseInBOMExcludingAliasWithPermissionStep,            \n" +
                "						(CASE            \n" +
                "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN 	/*Bom Part*/            \n" +
                "								IFNULL(al.restrictUseExcludingAliasStep, 1)		/*UI Side 0 equal to restrict*/             \n" +
                "							ELSE             \n" +
                "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 0 ELSE 1 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */            \n" +
                "						END) AS restrictUseExcludingAliasStep,            \n" +
                "						(CASE            \n" +
                "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part*/              \n" +
                "								IFNULL(al.restrictUseExcludingAliasWithPermissionStep, 1)	 /*UI Side 0 equal to restrict*/            \n" +
                "							ELSE             \n" +
                "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 0 ELSE 1 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */            \n" +
                "						END) AS restrictUseExcludingAliasWithPermissionStep,            \n" +
                "						IFNULL(ccl.isDocumentUpload, IFNULL(ccld.isDocumentUpload, 0)) AS isDocumentUpload            \n" +
                "				FROM            \n" +
                "					leveldata al            \n" +
                "				INNER JOIN component c ON al.mfgPNID = c.id            \n" +
                "				LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid and d.isGoodPart <> 2    \n" +
                "				LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id            \n" +
                "					AND ccl.customerID = (SELECT  mfgcodeid FROM component WHERE id = al.partid) AND ccl.isDeleted = 0            \n" +
                "				LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id            \n" +
                "					AND ccld.customerID = (SELECT  mfgcodeid FROM component WHERE id = al.partid) AND ccld.isDeleted = 0            \n" +
                "			) AS X            \n" +
                "			GROUP BY x.rfqAssyIDORrefSalesOrderdetID , x.level , x.category, x.rfqlineitemsid , x.partid , x.AssyID , x.lineid , x.mfgPNID , x.mfgCodeID , x.mfgPN , x.PIDCode , x.RoHSStatusID , x.feature , x.isCustom , x.partStatus , x.restrictUseInBOMStep , x.restrictUseInBOMWithPermissionStep ,             \n" +
                "			x.restrictUsePermanentlyStep , x.restrictUseWithPermissionStep , x.restrictUseInBOMExcludingAliasStep ,             \n" +
                "			x.restrictUseInBOMExcludingAliasWithPermissionStep , x.restrictUseExcludingAliasStep , x.restrictUseExcludingAliasWithPermissionStep , x.isDocumentUpload,            \n" +
                "			x.mountingTypeID, x.partType, x.connecterTypeID, x.uomMismatchedStep, x.mismatchFunctionalCategoryStep, x.approvedMountingType, x.mismatchMountingTypeStep ,x.approvedMountingTypeID, x.approvedMountingTypeName            \n" +
                "		) a            \n" +
                "		GROUP BY a.rfqAssyIDORrefSalesOrderdetID , a.level , a.category, a.rfqlineitemsid , a.partid , a.lineid\");                 \n" +
                "  \n" +
                "		PREPARE query2 FROM @consolidateAlternatePartDetail;      \n" +
                "		EXECUTE query2;      \n" +
                "		DEALLOCATE PREPARE query2;      \n" +
                "  \n" +
                "	-- Create Temporary table for level wise lineitem detail            \n" +
                "        DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseLineItemDetail;            \n" +
                "		CREATE TEMPORARY TABLE temp_LevleWiseLineItemDetail AS            \n" +
                "		SELECT a.rfqAssyIDORrefSalesOrderdetID, a.level, a.rfqlineitemsid, a.partid, a.lineID, a.uomID, a.attritionRate, a.isInstall, a.partclassID, a.partTypeID, a.leadQty,            \n" +
                "				a.isActive, a.isNoBidsPN, a.isDraft, a.numOfPosition,			            \n" +
                "				(CASE WHEN (a.isBuyDNPQty = 'Y' OR a.isBuyDNPQty = 'P') AND a.isPurchase = 1            \n" +
                "					THEN (a.qpa1 + IFNULL(a.dnpQPA1, 0))            \n" +
                "				WHEN (a.isBuyDNPQty = 'Y' OR a.isBuyDNPQty = 'P') AND a.isPurchase = 0            \n" +
                "					THEN (IFNULL(a.dnpQPA1, 0))            \n" +
                "				WHEN (a.isBuyDNPQty = 'N' OR a.isBuyDNPQty = 'C') AND a.isPurchase = 1            \n" +
                "					THEN (a.qpa1)            \n" +
                "				ELSE (a.qpa1 + IFNULL(a.dnpQPA1, 0))            \n" +
                "				END) qpa,  /* QPA count for Pricing */            \n" +
                "                (CASE WHEN (a.isPurchase = 0 AND a.isInstall = 0 AND (a.isBuyDNPQty = 'N')) THEN            \n" +
                "							0            \n" +
                "						WHEN ((a.isPurchase = 1 OR a.isInstall = 1) AND (a.isBuyDNPQty = 'N')) THEN            \n" +
                "							(a.kitqpa1)            \n" +
                "						WHEN (a.isPurchase = 0 AND a.isInstall = 0 AND (a.isBuyDNPQty <> 'N')) THEN            \n" +
                "							(a.kitdnpQPA1)            \n" +
                "						ELSE            \n" +
                "							(a.kitdnpQPA1 + a.kitqpa1)            \n" +
                "				END) AS KitqpawithDNP, /* QPA count for Kit Allocation */            \n" +
                "                (CASE WHEN a.isBuyDNPQty = 'N' THEN            \n" +
                "							0            \n" +
                "						ELSE            \n" +
                "							a.kitdnpQPA1            \n" +
                "				END) AS kitdnpWithoutQPA , /* QPA count for Kit Allocation */            \n" +
                "                a.valueAddedCost, IFNULL(a.refDesig, '') AS refDesig, IFNULL(dnpDesig, '') AS dnpDesig, a.qpaDesignatorStep, a.custPNID,            \n" +
                "				a.restrictCPNUseInBOMStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseWithPermissionStep, a.CPNPart, a.isNotRequiredKitAllocation, a.notRequiredKitAllocationReason,            \n" +
                "				CONCAT('{ Level:', a.level, ' | Part:', a.PIDCode, ' | Item:', TRIM(a.lineID) + 0, ' | QPA:', TRIM(a.qpacount) + 0, ' | DNP QPA:', TRIM(a.dnpQty) + 0,            \n" +
                "						' | Buy DNP QPA:', (CASE WHEN a.isBuyDNPQty = 'Y' THEN 'Yes' WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned' WHEN a.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM' ELSE 'No' END),            \n" +
                "						' | REF DES Count:', TRIM(a.refDesigCount) + 0, ' | Buy QPA:', a.isPurchase, ' | DNP REF DES Count:', TRIM(a.dnpDesigCount) + 0, ' | POPULATE:', a.isInstall,            \n" +
                "						' | PartID:', a.partID, ' | KitAllocationNotRequire:',a.isNotRequiredKitAllocation, '}') AS partlineID,            \n" +
                "				(CASE WHEN a.uomID = - 1            \n" +
                "					THEN (CASE WHEN a.qpacount != IFNULL(a.refDesigCount, 0) THEN 1 ELSE 0 END)            \n" +
                "				ELSE 0            \n" +
                "				END) isqpaMismatchflag,            \n" +
                "				(CASE WHEN a.uomID = - 1            \n" +
                "					THEN (CASE WHEN a.dnpQty != IFNULL(a.dnpDesigCount, 0) THEN 1 ELSE 0 END)            \n" +
                "				ELSE 0            \n" +
                "				END) isdnpQPAMismatchflag,            \n" +
                "				(CASE WHEN isBuyDNPQty = 'Y' OR isBuyDNPQty = 'P' OR isPurchase = 1            \n" +
                "					THEN 1            \n" +
                "				ELSE 0            \n" +
                "				END) isPurchaseWithDNP            \n" +
                "		FROM            \n" +
                "			leveldata a            \n" +
                "		GROUP BY a.rfqAssyIDORrefSalesOrderdetID , a.level , a.rfqlineitemsid , a.partid , a.lineID , a.uomID , a.attritionRate , a.isInstall , a.partclassID , a.partTypeID , a.leadQty ,             \n" +
                "        a.isActive , a.isNoBidsPN , a.isDraft , a.numOfPosition , a.isBuyDNPQty , a.isPurchase , a.qpa1 , a.dnpQPA1 , a.valueAddedCost , a.refDesig , a.dnpDesig , a.qpaDesignatorStep ,            \n" +
                "        a.custPNID , a.restrictCPNUseInBOMStep , a.restrictCPNUsePermanentlyStep , a.restrictCPNUseWithPermissionStep , a.CPNPart, a.isNotRequiredKitAllocation, a.notRequiredKitAllocationReason;            \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "        -- Create Consolidated data in temp table            \n" +
                "        DROP TEMPORARY TABLE IF EXISTS temp_Sproc_CreateRfqConsolidateLineItem;            \n" +
                "		set @finalConsolidateDetail = concat(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_CreateRfqConsolidateLineItem AS              \n" +
                "		SELECT tl.rfqAssyIDORrefSalesOrderdetID, 		tl.isInstall, 			tl.isPurchaseWithDNP, 			tl.uomID,             \n" +
                "				tl.numOfPosition, 	tl.custPNID, 			tl.restrictCPNUseInBOMStep, 	tl.restrictCPNUsePermanentlyStep,             \n" +
                "				tl.restrictCPNUseWithPermissionStep, tl.isNotRequiredKitAllocation, tl.notRequiredKitAllocationReason,            \n" +
                "				mfgpnIDs AS consolidatedmfgPNIDs, tal.Part AS consolidatedPartWithFlagDetail, tal.category, tal.mountingtypeID mountingTypeID,            \n" +
                "                tal.partType, tal.connecterTypeID, tal.uomMismatchedStep, tal.mismatchFunctionalCategoryStep , tal.mismatchMountingTypeStep,            \n" +
                "				MIN(tl.rfqlineitemsid) AS rfqlineitemsid,  (SELECT MIN(lineID) FROM leveldata WHERE rfqLineitemsID = MIN(tl.rfqlineitemsid)) lineid,            \n" +
                "				(CASE WHEN MAX(tl.isqpaMismatchflag) OR MAX(tl.isdnpQPAMismatchflag) THEN 1 ELSE 0 END) isqpaMismatch,            \n" +
                "				SUM(tl.qpa) qpa, SUM(tl.KitqpawithDNP) KitqpawithDNP, SUM(tl.kitdnpWithoutQPA) kitdnpWithoutQPA,            \n" +
                "				GROUP_CONCAT((CASE WHEN tl.dnpDesig = '' THEN tl.refDesig ELSE CONCAT(tl.refDesig,',',tl.dnpDesig) END)) AS consolidatedrefDesig,            \n" +
                "				GROUP_CONCAT(tl.rfqLineItemsID) AS consolidatedLineItemIDs,            \n" +
                "				COUNT(tl.rfqLineItemsID) AS multiple,            \n" +
                "				GROUP_CONCAT(tl.partlineID SEPARATOR '\",v_GroupConcatSeparator,\"') AS consolidatedpartlineID,             \n" +
                "				GROUP_CONCAT(tal.mfgPartsWithPackagings) AS consolidateRestrictPartDetail            \n" +
                "		FROM             \n" +
                "				temp_LevleWiseLineItemDetail tl              \n" +
                "				INNER JOIN temp_LevleWiseAlternatepartwithPackagingGroup tal ON tal.rfqLineItemsID = tl.rfqLineItemsID AND tal.level = tl.level            \n" +
                "		GROUP BY              \n" +
                "					tl.rfqAssyIDORrefSalesOrderdetID, 	tl.isInstall, 			tl.isPurchaseWithDNP, 			tl.uomID, 			tl.numOfPosition,             \n" +
                "					tl.custPNID, 	tl.restrictCPNUseInBOMStep, 		tl.restrictCPNUsePermanentlyStep, 		tl.restrictCPNUseWithPermissionStep,             \n" +
                "					tal.Part, tal.category, tal.mountingtypeID, tal.partType, tal.uomMismatchedStep, tal.mismatchFunctionalCategoryStep , tal.mismatchMountingTypeStep,            \n" +
                "                     tl.isNotRequiredKitAllocation, tl.notRequiredKitAllocationReason            \n" +
                "		ORDER BY rfqlineitemsid\");            \n" +
                "  \n" +
                "		PREPARE query3 FROM @finalConsolidateDetail;      \n" +
                "		EXECUTE query3;      \n" +
                "		DEALLOCATE PREPARE query3;      \n" +
                "  \n" +
                "        -- Drop temporary tables generated for generate consolidate data            \n" +
                "         DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseLineItemDetail;            \n" +
                "		 DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseAlternatepartwithPackagingGroup;            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveRFQLineitemsErrorCode`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveRFQLineitemsErrorCode`(      \n" +
                "	IN ppageIndex INT,        \n" +
                "	IN precordPerPage INT,        \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "	IN pCategoryIDs LONGTEXT          \n" +
                ")  \n" +
                "BEGIN      \n" +
                "		DECLARE pOffset INT;        \n" +
                "		DECLARE rowNumWhere VARCHAR(255);        \n" +
                "		DECLARE vTextAngularKeyCode VARCHAR(500);        \n" +
                "        DECLARE vDateTimeDisplayFormat VARCHAR(100);        \n" +
                "		DECLARE vTimeZone VARCHAR(50);        \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;        \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;        \n" +
                "		SELECT fun_DatetimetoUTCDateTime() INTO @utcDatetime;        \n" +
                "		SET vTextAngularKeyCode = fun_getTextAngularKeyCode();                      \n" +
                "        SET @tempQuery = CONCAT(\"SELECT id,(CASE WHEN(rfq_lineitems_errorcode.logicID=1) THEN 'QPA/Designator'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 2) THEN 'MFR Invalid'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 3) THEN 'MFR Verification'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 4) THEN 'Supplier Verification'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 5) THEN 'Invalid MFR-Supplier Mapping'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 6) THEN 'Get MFRPN'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 7) THEN 'MFR Bad Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 8) THEN 'Check Obsolete Parts'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 9) THEN 'MFR PN Invalid'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 10) THEN 'Supplier Invalid'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 11) THEN 'Supplier PN Invalid'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 12) THEN 'Customer Approval'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 13) THEN 'Supplier Bad Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 14) THEN 'Line Merge'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 15) THEN 'RoHS Status'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 16) THEN 'Epoxy'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 17) THEN 'Duplicate REF DES'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 18) THEN 'Invalid REF DES'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 20) THEN 'Pin Mismatch'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 21) THEN 'Duplicate MFR PN'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 22) THEN 'Require Mating Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 23) THEN 'Require Drive Tools Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 24) THEN 'Require Pickup Pad'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 25) THEN 'Restrict Use With Permission'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 26) THEN 'Restrict Use Permanently'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 27) THEN 'Mismatch Mounting Type'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 28) THEN 'Mismatch Functional Type'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 29) THEN 'Mismatch Pitch'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 30) THEN 'Mismatch Tolerance'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 31) THEN 'Mismatch Voltage'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 32) THEN 'Mismatch Package'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 33) THEN 'Mismatch Value'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 34) THEN 'Duplicate CPN with Rev'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 35) THEN 'Require Functional Testing Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 36) THEN 'Require Mounting Type'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 37) THEN 'Require Functional Type'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 39) THEN 'UOM Mismatched'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 40) THEN 'Programming Is Not Included'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 41) THEN 'Mismatch Color'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 42) THEN 'Mismatch Temperature'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 43) THEN 'Mismatch Power'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 50) THEN 'Restrict Use in BOM'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 51) THEN 'Customer Approval For QPA or REF DES'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 52) THEN 'Customer Approval For Buy'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 53) THEN 'Customer Approval For Populate'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 54) THEN 'Mismatch Number Of Rows'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 55) THEN 'Part pin is less then BOM pin'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 56) THEN 'TBD Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 57) THEN 'Restrict CPN Use With Permission'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 58) THEN 'Restrict CPN Use Permanently'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 59) THEN 'Restrict CPN Use in BOM'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 60) THEN 'Export Controlled'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 61) THEN 'Restrict Use in BOM With Permission'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 62) THEN 'TBD Type Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 63) THEN 'Default Invalid MFR'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 64) THEN 'Restrict Use In BOM Excluding Packaging Alias (With Permission)'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 65) THEN 'Restrict Use In BOM Excluding Packaging Alias (Permanently)'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 66) THEN 'Restrict Use Excluding Packaging Alias (Permanently)'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 67) THEN 'Restrict Use Excluding Packaging Alias (With Permission)'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 68) THEN 'DNP Qty vs REF DES'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 69) THEN 'Customer Approval For DNP QPA or REF DES'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 70) THEN 'Customer Approval For Buy Qty'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 71) THEN 'Invalid DNP REF DES'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 72) THEN 'Suggested Good Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 73) THEN 'Suggested Good Supplier Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 74) THEN 'Mismatch Required Programming'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 75) THEN 'Mismatch Custom Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 76) THEN 'Map Part Program REF DES'  \n" +
                "        WHEN(rfq_lineitems_errorcode.logicID = 77) THEN 'Suggested MFR Mapping'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 78) THEN 'Suggested Alternate Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 79) THEN 'Suggested Packaging Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 80) THEN 'Suggested Process Material Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 81) THEN 'Suggested RoHS Replacement Part'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 82) THEN 'Mismatch Line and Part Programming'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 83) THEN 'QPA REF DES Change'  \n" +
                "		WHEN(rfq_lineitems_errorcode.logicID = 84) THEN 'DNP QPA REF DES Change'  \n" +
                "		ELSE '' END) AS `logicName`,errorCode, errorColor,  \n" +
                "        fun_getUserNameByID(updatedBy) updatedby,    \n" +
                "		fun_getUserNameByID(createdBy) createdby,    \n" +
                "		fun_getRoleByID(createByRoleId) createdbyRole,    \n" +
                "		fun_getRoleByID(updateByRoleId) updatedbyRole,    \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,                \n" +
                "		description, systemVariable,logicID, displayName, org_description,                     \n" +
                "        fun_getTextAngularData(narrative,'\",vTextAngularKeyCode,\"') narrative,                    \n" +
                "        isExternalIssue, displayOrder,isResearchStatus,isAssemblyLevelError,isAllowToEngrApproved,       \n" +
                "		(CASE WHEN (`isExternalIssue` = 0) THEN 'No'      \n" +
                "		WHEN (`isExternalIssue` = 1) THEN 'Yes'      \n" +
                "		ELSE ''      \n" +
                "		END) AS `isExternalIssueValue`,                             \n" +
                "		(CASE WHEN (`isResearchStatus` = 0) THEN 'No'      \n" +
                "		WHEN (`isResearchStatus` = 1) THEN 'Yes'      \n" +
                "		ELSE ''      \n" +
                "		END) AS `isResearchStatusValue`,                             \n" +
                "		(CASE WHEN (`isAssemblyLevelError` = 0) THEN 'Line Level'      \n" +
                "		WHEN (`isAssemblyLevelError` = 1) THEN 'Assembly Level'      \n" +
                "		ELSE ''      \n" +
                "		END) AS `isAssemblyLevelErrorValue`,                         \n" +
                "		(CASE WHEN (`isAllowToEngrApproved` = 0) THEN 'No'      \n" +
                "		WHEN (`isAllowToEngrApproved` = 1) THEN 'Yes'                   \n" +
                "		WHEN (`isAllowToEngrApproved` = 2) THEN 'N/A (Not Applicable)'      \n" +
                "		ELSE ''      \n" +
                "		END) AS `isAllowToEngrApprovedValue`,      \n" +
                "		(SELECT COUNT(1) FROM rfq_error_code_category_mapping       \n" +
                "			WHERE errorCodeId = rfq_lineitems_errorcode.id AND isDeleted = 0 )AS RestrictCount      \n" +
                "		FROM `rfq_lineitems_errorcode`      \n" +
                "		WHERE `deletedAt` IS NULL AND IFNULL(isDeleted,0) = 0\");      \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY displayOrder IS NULL ASC, displayOrder, errorCode\") ;            \n" +
                "		ELSE            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
                "		END IF;	            \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN            \n" +
                "			SET pWhereClause = '1=1' ;            \n" +
                "		END IF;	            \n" +
                "  \n" +
                "		IF (pCategoryIDs IS NOT NULL AND pCategoryIDs != '') THEN       \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND id IN (SELECT m.errorCodeID FROM rfq_error_code_category_mapping m WHERE m.categoryID IN (', pCategoryIDs,') AND m.isDeleted = 0)');          \n" +
                "		END IF;        \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN             \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		            \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
                "		ELSE	            \n" +
                "			SET rowNumWhere = '';            \n" +
                "		END IF;	            \n" +
                "  \n" +
                "			/* to get total count of rows */           \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);          \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;          \n" +
                "			EXECUTE query2;          \n" +
                "			DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempquery,\" ) c          \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement2;          \n" +
                "			EXECUTE query1;          \n" +
                "			DEALLOCATE PREPARE query1;            \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 21-04-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_RFQ_LineItem_AlternatePart_BOM_History` AFTER UPDATE ON `rfq_lineitems_alternatepart`   \n" +
                "    FOR EACH ROW BEGIN            \n" +
                "	DECLARE pIsUpdateRequired BOOL;      \n" +
                "	DECLARE pLiveInternalVersion INT;      \n" +
                "	DECLARE pRfqAssID INT;      \n" +
                "	DECLARE pPartID INT;      \n" +
                "	DECLARE oldRfqAssyBom VARCHAR(50);      \n" +
                "	DECLARE newRfqAssyBom VARCHAR(50);      \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);      \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);             \n" +
                "	DECLARE pCompanyName VARCHAR(100);          \n" +
                "	DECLARE pErrorNarrative TEXT;              \n" +
                "	DECLARE pErrorDisplayName TEXT;              \n" +
                "	DECLARE pErrorIsResearchStatus TINYINT;       \n" +
                "	DECLARE pErrorCode VARCHAR(100);               \n" +
                "	DECLARE pDeleteMessage VARCHAR(100);         \n" +
                "  \n" +
                "	SET pIsUpdateRequired = FALSE;          \n" +
                "  \n" +
                "	SELECT partID, rfqAssyID INTO pPartID, pRfqAssID FROM rfq_lineitems WHERE id = NEW.rfqLineItemsID;            \n" +
                "  \n" +
                "	SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = pPartID;       \n" +
                "  \n" +
                "	SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';          \n" +
                "	IF pLiveInternalVersionMethod = \"P\" THEN      \n" +
                "		SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';       \n" +
                "	ELSE       \n" +
                "		SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';       \n" +
                "		IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN      \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%y%m%d') INTO pCompanyName ;      \n" +
                "		ELSE       \n" +
                "			SELECT DATE_FORMAT(fun_DatetimetoUTCDateTime(), '%m%d%y') INTO pCompanyName ;      \n" +
                "		END IF;      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	-- SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefix';      \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.distributor, 0) != IFNULL(NEW.distributor, 0) THEN            \n" +
                "		SET pIsUpdateRequired = TRUE;           \n" +
                "		INSERT INTO rfq_assembly_history       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,      \n" +
                "			oldValue,newValue,changeVersion,      \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)       \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier\",      \n" +
                "			CAST(OLD.distributor AS CHAR), CAST(NEW.distributor AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),      \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF IFNULL(OLD.distPN, 0) != IFNULL(NEW.distPN, 0) THEN       \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,      \n" +
                "			oldValue,newValue,changeVersion,      \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)       \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Supplier PN\",      \n" +
                "			CAST(OLD.distPN AS CHAR), CAST(NEW.distPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),      \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);      \n" +
                "	END IF;	      \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCode, 0) != IFNULL(NEW.mfgCode, 0) THEN       \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,      \n" +
                "			oldValue,newValue,changeVersion,      \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)       \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFR\",      \n" +
                "			CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),      \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);      \n" +
                "	END IF;	      \n" +
                "	IF IFNULL(OLD.mfgPN, 0) != IFNULL(NEW.mfgPN, 0) THEN       \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,      \n" +
                "			oldValue,newValue,changeVersion,      \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)       \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"MFR PN\",      \n" +
                "			CAST(OLD.mfgPN AS CHAR), CAST(NEW.mfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),      \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted, 0) != IFNULL(NEW.isDeleted, 0) AND NEW.isDeleted IS NOT NULL THEN             \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN         \n" +
                "			SET pDeleteMessage =\"MFR PN \";            \n" +
                "		ELSE         \n" +
                "			SET pDeleteMessage = CONCAT(\"MFR PN \",NEW.mfgPN);           \n" +
                "		END IF;         \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,      \n" +
                "			oldValue,newValue,changeVersion,      \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)       \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Deleted\",      \n" +
                "			\"\", CONCAT(pDeleteMessage,\" is Deleted.\"), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),      \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.deletedBy,NEW.deletedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);      \n" +
                "	END IF;	      \n" +
                "	IF (OLD.description != NEW.description AND IFNULL(OLD.description, 0) != IFNULL(NEW.description, 0)) THEN         \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history         \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,        \n" +
                "			oldValue,newValue,changeVersion,        \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)         \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Flextron Comment\",        \n" +
                "			CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),        \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF IFNULL(OLD.rfqAssyBomID, 0) != IFNULL(NEW.rfqAssyBomID, 0) THEN       \n" +
                "		IF oldRfqAssyBom != newRfqAssyBom THEN      \n" +
                "			SET pIsUpdateRequired = TRUE;            \n" +
                "			INSERT INTO rfq_assembly_history       \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,      \n" +
                "				oldValue,newValue,changeVersion,      \n" +
                "				createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)       \n" +
                "			VALUES 	(\"ref_lineitems\", NEW.id, NEW.rfqLineItemsID, NEW.rfqAssyID, pPartID, \"RFQ Assembly BOM\",      \n" +
                "				oldRfqAssyBom,newRfqAssyBom, CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),      \n" +
                "				fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);      \n" +
                "		END IF;         \n" +
                "	END IF;      \n" +
                "  \n" +
                "	-- IF IFNULL(OLD.customerApproval, 0) != IFNULL(NEW.customerApproval, 0) THEN         \n" +
                "	-- 	SET pIsUpdateRequired = TRUE;            \n" +
                "	-- 	INSERT INTO rfq_assembly_history       \n" +
                "	-- 		(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,      \n" +
                "	-- 		oldValue,newValue,changeVersion,      \n" +
                "	-- 		createdAt,updatedAt,updatedBy,createdBy)       \n" +
                "	-- 	VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Customer Approval\",      \n" +
                "	-- 		CAST(OLD.customerApproval AS CHAR), CAST(NEW.customerApproval AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),      \n" +
                "	-- 		fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy);      \n" +
                "	-- END IF;      \n" +
                "  \n" +
                "	IF IFNULL(OLD.badMfgPN, 0) != IFNULL(NEW.badMfgPN, 0) THEN       \n" +
                "		SET pIsUpdateRequired = TRUE;            \n" +
                "		INSERT INTO rfq_assembly_history       \n" +
                "			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,      \n" +
                "			oldValue,newValue,changeVersion,      \n" +
                "			createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID)       \n" +
                "		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Bad MFR PN\",      \n" +
                "			CAST(OLD.badMfgPN AS CHAR), CAST(NEW.badMfgPN AS CHAR), CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),      \n" +
                "			fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID);      \n" +
                "	END IF;         \n" +
                "  \n" +
                "	IF NEW.mfgCodeStep IS NOT NULL AND (IFNULL(OLD.mfgCodeStep, -1) != IFNULL(NEW.mfgCodeStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 2;      \n" +
                "		IF OLD.mfgCodeStep IS NOT NULL AND IFNULL(NEW.mfgCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.mfgCodeStep, 0) = 0 THEN      \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative,pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF NEW.distVerificationStep IS NOT NULL AND (IFNULL(OLD.distVerificationStep, -1) != IFNULL(NEW.distVerificationStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 4;            \n" +
                "		IF OLD.distVerificationStep IS NOT NULL AND IFNULL(NEW.distVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.distVerificationStep, 0) = 0 THEN               \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');           \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF NEW.distCodeStep IS NOT NULL AND (IFNULL(OLD.distCodeStep, -1) != IFNULL(NEW.distCodeStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 10;      \n" +
                "		IF OLD.distCodeStep IS NOT NULL AND IFNULL(NEW.distCodeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.distCodeStep, 0) = 0 THEN          \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');               \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF NEW.mfgDistMappingStep IS NOT NULL AND (IFNULL(OLD.mfgDistMappingStep, -1) != IFNULL(NEW.mfgDistMappingStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 5;      \n" +
                "		IF OLD.mfgDistMappingStep IS NOT NULL AND IFNULL(NEW.mfgDistMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.mfgDistMappingStep, 0) = 0 THEN        \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');       \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF NEW.getMFGPNStep IS NOT NULL AND (IFNULL(OLD.getMFGPNStep, -1) != IFNULL(NEW.getMFGPNStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 6;      \n" +
                "		IF OLD.getMFGPNStep IS NOT NULL AND IFNULL(NEW.getMFGPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.getMFGPNStep, 0) = 0 THEN           \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');              \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF NEW.obsoletePartStep IS NOT NULL AND (IFNULL(OLD.obsoletePartStep, -1) != IFNULL(NEW.obsoletePartStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 8;      \n" +
                "		IF OLD.obsoletePartStep IS NOT NULL AND IFNULL(NEW.obsoletePartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.obsoletePartStep, 0) = 0 THEN        \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');       \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF NEW.mfgVerificationStep IS NOT NULL AND (IFNULL(OLD.mfgVerificationStep, -1) != IFNULL(NEW.mfgVerificationStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 3;      \n" +
                "		IF OLD.mfgVerificationStep IS NOT NULL AND IFNULL(NEW.mfgVerificationStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.mfgVerificationStep, 0) = 0 THEN      \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');         \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF NEW.mfgGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.mfgGoodPartMappingStep, -1) != IFNULL(NEW.mfgGoodPartMappingStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 7;      \n" +
                "		IF OLD.mfgGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.mfgGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.mfgGoodPartMappingStep, 0) = 0 THEN              \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');            \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF NEW.mfgPNStep IS NOT NULL AND (IFNULL(OLD.mfgPNStep, -1) != IFNULL(NEW.mfgPNStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 9;      \n" +
                "		IF OLD.mfgPNStep IS NOT NULL AND IFNULL(NEW.mfgPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.mfgPNStep, 0) = 0 THEN      \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');         \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF NEW.distPNStep IS NOT NULL AND (IFNULL(OLD.distPNStep, -1) != IFNULL(NEW.distPNStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 11;      \n" +
                "		IF OLD.distPNStep IS NOT NULL AND IFNULL(NEW.distPNStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.distPNStep, 0) = 0 THEN            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');             \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF NEW.distGoodPartMappingStep IS NOT NULL AND (IFNULL(OLD.distGoodPartMappingStep, -1) != IFNULL(NEW.distGoodPartMappingStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 13;      \n" +
                "		IF OLD.distGoodPartMappingStep IS NOT NULL AND IFNULL(NEW.distGoodPartMappingStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.distGoodPartMappingStep, 0) = 0 THEN      \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "	IF NEW.nonRohsStep IS NOT NULL AND (IFNULL(OLD.nonRohsStep, -1) != IFNULL(NEW.nonRohsStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 15;      \n" +
                "		IF OLD.nonRohsStep IS NOT NULL AND IFNULL(NEW.nonRohsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.nonRohsStep, 0) = 0 THEN      \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "	IF NEW.epoxyStep IS NOT NULL AND (IFNULL(OLD.epoxyStep, -1) != IFNULL(NEW.epoxyStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 16;      \n" +
                "		IF OLD.epoxyStep IS NOT NULL AND IFNULL(NEW.epoxyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.epoxyStep, 0) = 0 THEN        \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');       \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;            \n" +
                "	IF NEW.invalidConnectorTypeStep IS NOT NULL AND (IFNULL(OLD.invalidConnectorTypeStep, -1) != IFNULL(NEW.invalidConnectorTypeStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 20;      \n" +
                "		IF OLD.invalidConnectorTypeStep IS NOT NULL AND IFNULL(NEW.invalidConnectorTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.invalidConnectorTypeStep, 0) = 0 THEN       \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');         \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "	IF NEW.duplicateMPNInSameLineStep IS NOT NULL AND (IFNULL(OLD.duplicateMPNInSameLineStep, -1) != IFNULL(NEW.duplicateMPNInSameLineStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 21;      \n" +
                "		IF OLD.duplicateMPNInSameLineStep IS NOT NULL AND IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.duplicateMPNInSameLineStep, 0) = 0 THEN       \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');        \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "	IF NEW.mismatchMountingTypeStep IS NOT NULL AND (IFNULL(OLD.mismatchMountingTypeStep, -1) != IFNULL(NEW.mismatchMountingTypeStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 27;      \n" +
                "		IF OLD.mismatchMountingTypeStep IS NOT NULL AND IFNULL(NEW.mismatchMountingTypeStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.mismatchMountingTypeStep, 0) = 0 THEN      \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');           \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF NEW.mismatchFunctionalCategoryStep IS NOT NULL AND (IFNULL(OLD.mismatchFunctionalCategoryStep, -1) != IFNULL(NEW.mismatchFunctionalCategoryStep, -1)) THEN      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 28;      \n" +
                "		IF OLD.mismatchFunctionalCategoryStep IS NOT NULL AND IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.mismatchFunctionalCategoryStep, 0) = 0 THEN      \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');              \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;           \n" +
                "	IF NEW.mismatchCustomPartStep IS NOT NULL AND (IFNULL(OLD.mismatchCustomPartStep, -1) != IFNULL(NEW.mismatchCustomPartStep, -1)) THEN      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode FROM rfq_lineitems_errorcode WHERE `logicID` = 75;      \n" +
                "		IF OLD.mismatchCustomPartStep IS NOT NULL AND IFNULL(NEW.mismatchCustomPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.mismatchCustomPartStep, 0) = 0 THEN      \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');              \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;      	      \n" +
                "	IF NEW.restrictUseWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseWithPermissionStep, -1) != IFNULL(NEW.restrictUseWithPermissionStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 25;      \n" +
                "		IF OLD.restrictUseWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.restrictUseWithPermissionStep, 0) = 0 THEN               \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');	           \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "	IF NEW.restrictUsePermanentlyStep IS NOT NULL AND (IFNULL(OLD.restrictUsePermanentlyStep, -1) != IFNULL(NEW.restrictUsePermanentlyStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 26;      \n" +
                "		IF OLD.restrictUsePermanentlyStep IS NOT NULL AND IFNULL(NEW.restrictUsePermanentlyStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.restrictUsePermanentlyStep, 0) = 0 THEN      \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');              \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;         \n" +
                "	IF NEW.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseExcludingAliasWithPermissionStep, -1) != IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 67;      \n" +
                "		IF OLD.restrictUseExcludingAliasWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.restrictUseExcludingAliasWithPermissionStep, 0) = 0 THEN            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');              \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "	IF NEW.restrictUseExcludingAliasStep IS NOT NULL AND (IFNULL(OLD.restrictUseExcludingAliasStep, -1) != IFNULL(NEW.restrictUseExcludingAliasStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 66;      \n" +
                "		IF OLD.restrictUseExcludingAliasStep IS NOT NULL AND IFNULL(NEW.restrictUseExcludingAliasStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.restrictUseExcludingAliasStep, 0) = 0 THEN       \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');        \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "	IF NEW.pickupPadRequiredStep IS NOT NULL AND (IFNULL(OLD.pickupPadRequiredStep, -1) != IFNULL(NEW.pickupPadRequiredStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 24;      \n" +
                "		IF OLD.pickupPadRequiredStep IS NOT NULL AND IFNULL(NEW.pickupPadRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.pickupPadRequiredStep, 0) = 0 THEN           \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');              \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "	IF NEW.matingPartRquiredStep IS NOT NULL AND (IFNULL(OLD.matingPartRquiredStep, -1) != IFNULL(NEW.matingPartRquiredStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 22;      \n" +
                "		IF OLD.matingPartRquiredStep IS NOT NULL AND IFNULL(NEW.matingPartRquiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.matingPartRquiredStep, 0) = 0 THEN           \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');              \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "	IF NEW.functionalTestingRequiredStep IS NOT NULL AND (IFNULL(OLD.functionalTestingRequiredStep, -1) != IFNULL(NEW.functionalTestingRequiredStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 35;      \n" +
                "		IF OLD.functionalTestingRequiredStep IS NOT NULL AND IFNULL(NEW.functionalTestingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.functionalTestingRequiredStep, 0) = 0 THEN               \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');           \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF; 	      \n" +
                "	IF NEW.uomMismatchedStep IS NOT NULL AND (IFNULL(OLD.uomMismatchedStep, -1) != IFNULL(NEW.uomMismatchedStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 39;      \n" +
                "		IF OLD.uomMismatchedStep IS NOT NULL AND IFNULL(NEW.uomMismatchedStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.uomMismatchedStep, 0) = 0 THEN        \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');       \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;           \n" +
                "  \n" +
                "	IF NEW.programingRequiredStep IS NOT NULL AND (IFNULL(OLD.programingRequiredStep, -1) != IFNULL(NEW.programingRequiredStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 40;      \n" +
                "		IF OLD.programingRequiredStep IS NOT NULL AND IFNULL(NEW.programingRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.programingRequiredStep, 0) = 0 THEN      \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');              \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMStep, -1) != IFNULL(NEW.restrictUseInBOMStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 50;      \n" +
                "		IF OLD.restrictUseInBOMStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');              \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMStep, 0) = 0 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');           \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMWithPermissionStep, -1) != IFNULL(NEW.restrictUseInBOMWithPermissionStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 61;      \n" +
                "		IF OLD.restrictUseInBOMWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');              \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMWithPermissionStep, 0) = 0 THEN              \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');      \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMExcludingAliasStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMExcludingAliasStep, -1) != IFNULL(NEW.restrictUseInBOMExcludingAliasStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 65;      \n" +
                "		IF OLD.restrictUseInBOMExcludingAliasStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');              \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMExcludingAliasStep, 0) = 0 THEN         \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');       \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "  \n" +
                "	IF NEW.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND (IFNULL(OLD.restrictUseInBOMExcludingAliasWithPermissionStep, -1) != IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 64;      \n" +
                "		IF OLD.restrictUseInBOMExcludingAliasWithPermissionStep IS NOT NULL AND IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');              \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.restrictUseInBOMExcludingAliasWithPermissionStep, 0) = 0 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');           \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF NEW.driverToolsRequiredStep IS NOT NULL AND (IFNULL(OLD.driverToolsRequiredStep, -1) != IFNULL(NEW.driverToolsRequiredStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 23;      \n" +
                "		IF OLD.driverToolsRequiredStep IS NOT NULL AND IFNULL(NEW.driverToolsRequiredStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.driverToolsRequiredStep, 0) = 0 THEN      \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');              \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;           \n" +
                "  \n" +
                "	IF NEW.mismatchNumberOfRowsStep IS NOT NULL AND (IFNULL(OLD.mismatchNumberOfRowsStep, -1) != IFNULL(NEW.mismatchNumberOfRowsStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 54;      \n" +
                "		IF OLD.mismatchNumberOfRowsStep IS NOT NULL AND IFNULL(NEW.mismatchNumberOfRowsStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.mismatchNumberOfRowsStep, 0) = 0 THEN      \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF NEW.partPinIsLessthenBOMPinStep IS NOT NULL AND (IFNULL(OLD.partPinIsLessthenBOMPinStep, -1) != IFNULL(NEW.partPinIsLessthenBOMPinStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 55;      \n" +
                "		IF OLD.partPinIsLessthenBOMPinStep IS NOT NULL AND IFNULL(NEW.partPinIsLessthenBOMPinStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.partPinIsLessthenBOMPinStep, 0) = 0 THEN               \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');              \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF NEW.tbdPartStep IS NOT NULL AND (IFNULL(OLD.tbdPartStep, -1) != IFNULL(NEW.tbdPartStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 56;      \n" +
                "		IF OLD.tbdPartStep IS NOT NULL AND IFNULL(NEW.tbdPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.tbdPartStep, 0) = 0 THEN      \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');              \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;             \n" +
                "  \n" +
                "	IF NEW.exportControlledStep IS NOT NULL AND (IFNULL(OLD.exportControlledStep, -1) != IFNULL(NEW.exportControlledStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 60;      \n" +
                "		IF OLD.exportControlledStep IS NOT NULL AND IFNULL(NEW.exportControlledStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.exportControlledStep, 0) = 0 THEN            \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');             \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;             \n" +
                "  \n" +
                "	IF NEW.unknownPartStep IS NOT NULL AND (IFNULL(OLD.unknownPartStep, -1) != IFNULL(NEW.unknownPartStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 62;      \n" +
                "		IF OLD.unknownPartStep IS NOT NULL AND IFNULL(NEW.unknownPartStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.unknownPartStep, 0) = 0 THEN      \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');         \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF NEW.defaultInvalidMFRStep IS NOT NULL AND (IFNULL(OLD.defaultInvalidMFRStep, -1) != IFNULL(NEW.defaultInvalidMFRStep, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 63;      \n" +
                "		IF OLD.defaultInvalidMFRStep IS NOT NULL AND IFNULL(NEW.defaultInvalidMFRStep, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "			CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF IFNULL(NEW.defaultInvalidMFRStep, 0) = 0 THEN              \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');           \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;          \n" +
                "  \n" +
                "  \n" +
                "	IF NEW.isUnlockApprovedPart IS NOT NULL AND (IFNULL(OLD.isUnlockApprovedPart, -1) != IFNULL(NEW.isUnlockApprovedPart, -1)) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		IF NEW.mfgPN IS NULL OR NEW.mfgPN = \"\" THEN         \n" +
                "			SET pDeleteMessage =\"MFR PN \";            \n" +
                "		ELSE         \n" +
                "			SET pDeleteMessage = CONCAT(\"MFR PN \",NEW.mfgPN);           \n" +
                "		END IF;       \n" +
                "	 	IF OLD.isUnlockApprovedPart IS NOT NULL AND IFNULL(NEW.isUnlockApprovedPart, 0) = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "	 		INSERT INTO rfq_assembly_history      \n" +
                "	 			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "	 			oldValue,newValue,changeVersion,               \n" +
                "	 			description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)      \n" +
                "	 		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Unlock Part\",               \n" +
                "	 			\"Locked\", \"Unlocked\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "	 			 CONCAT(pDeleteMessage,\" is Unlocked.\"),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);               \n" +
                "	 	ELSEIF IFNULL(NEW.isUnlockApprovedPart, 0) = 0 THEN      \n" +
                "	 		INSERT INTO rfq_assembly_history      \n" +
                "	 			(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "	 			oldValue,newValue,changeVersion,               \n" +
                "	 			description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative)      \n" +
                "	 		VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, \"Lock part\",               \n" +
                "	 			\"Unlocked\", \"Locked\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "	 			 CONCAT(pDeleteMessage,\" is Locked.\"),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);               \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF IFNULL(OLD.customerApproval, 'N') != IFNULL(NEW.customerApproval, 'N') THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode  FROM rfq_lineitems_errorcode WHERE `logicID` = 12;           \n" +
                "		IF IFNULL(NEW.customerApproval, 'N') = 'P' THEN      \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				CONCAT('Customer approval pending for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSE      \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;        \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID,  pErrorDisplayName,               \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				CONCAT('Approved comments of ', New.mfgCode,' ', New.mfgPN, ' : ',pErrorNarrative),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),      \n" +
                "				 New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);            \n" +
                "		END IF;      \n" +
                "	END IF;              \n" +
                "  \n" +
                "  # Mismatch Programming required step      \n" +
                "    IF NEW.mismatchRequiredProgrammingStep IS NOT NULL AND (OLD.mismatchRequiredProgrammingStep != NEW.mismatchRequiredProgrammingStep) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;         \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode        \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 74;      \n" +
                "		IF OLD.mismatchRequiredProgrammingStep IS NOT NULL AND NEW.mismatchRequiredProgrammingStep = 1 AND pLiveInternalVersion > 1 THEN      \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');          \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		ELSEIF NEW.mismatchRequiredProgrammingStep = 0 THEN      \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');           \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,               \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);               \n" +
                "		END IF;      \n" +
                "	END IF;       \n" +
                "      # Part and Program ref des mapping required step              \n" +
                "    IF NEW.mappingPartProgramStep IS NOT NULL AND (OLD.mappingPartProgramStep != NEW.mappingPartProgramStep) THEN       	              \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode      \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 76;              \n" +
                "		IF OLD.mappingPartProgramStep IS NOT NULL AND NEW.mappingPartProgramStep = 1 AND pLiveInternalVersion > 1 THEN              \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');        \n" +
                "			INSERT INTO rfq_assembly_history              \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,             \n" +
                "				oldValue,newValue,changeVersion,             \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)              \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,             \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),             \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);             \n" +
                "		ELSEIF NEW.mappingPartProgramStep = 0 THEN              \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');         \n" +
                "			INSERT INTO rfq_assembly_history              \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,             \n" +
                "				oldValue,newValue,changeVersion,             \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)              \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,             \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),             \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);             \n" +
                "		END IF;              \n" +
                "	END IF;            \n" +
                "  \n" +
                "  \n" +
                "    # Mismatch Programming status Step    \n" +
                "    IF NEW.mismatchProgrammingStatusStep IS NOT NULL AND (OLD.mismatchProgrammingStatusStep != NEW.mismatchProgrammingStatusStep) THEN       	              \n" +
                "		SET pIsUpdateRequired = TRUE;       \n" +
                "		SELECT `narrative`, `displayName`, `isResearchStatus`,`errorCode` INTO pErrorNarrative, pErrorDisplayName,  pErrorIsResearchStatus, pErrorCode      \n" +
                "        FROM rfq_lineitems_errorcode WHERE `logicID` = 82;              \n" +
                "		IF OLD.mismatchProgrammingStatusStep IS NOT NULL AND NEW.mismatchProgrammingStatusStep = 1 AND pLiveInternalVersion > 1 THEN              \n" +
                "		CALL Sproc_getErrorMessage(OLD.description, pErrorCode, 'Issue Resolved');        \n" +
                "			INSERT INTO rfq_assembly_history              \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,             \n" +
                "				oldValue,newValue,changeVersion,             \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)              \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,             \n" +
                "				\"Validation Failed\", \"Validation Passed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),             \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);             \n" +
                "		ELSEIF NEW.mismatchProgrammingStatusStep = 0 THEN              \n" +
                "			CALL Sproc_getErrorMessage(NEW.description, pErrorCode, 'Issue Generated');         \n" +
                "			INSERT INTO rfq_assembly_history              \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,             \n" +
                "				oldValue,newValue,changeVersion,             \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy,mfgCode, mfgCodeID, mfgPN, mfgPNID,narrative, isResearchStatus)              \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, pErrorDisplayName,             \n" +
                "				\"Validation Passed\", \"Validation Failed\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),             \n" +
                "				@resuleErrorMessage, fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.updatedBy,New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,pErrorNarrative, pErrorIsResearchStatus);             \n" +
                "		END IF;              \n" +
                "	END IF;       \n" +
                "  \n" +
                "	IF IFNULL(OLD.approvedMountingType, -1) != IFNULL(NEW.approvedMountingType, -1) THEN       	      \n" +
                "		SET pIsUpdateRequired = TRUE;      \n" +
                "		IF IFNULL(NEW.approvedMountingType, -1) = 0 THEN      \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID, 'Mounting Type and Functional Type Approval',               \n" +
                "				\"Approved\", \"Not Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				CONCAT('Disapproved mounting type and functional type for ', New.mfgCode, ' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy),New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);               \n" +
                "		ELSE      \n" +
                "			SELECT IFNULL(`comment`, '') INTO `pErrorNarrative` FROM rfq_lineitems_approval_comment WHERE rfqLineItemsAlternatePartID = NEW.id ORDER BY  approvalDate DESC LIMIT 1;        \n" +
                "			INSERT INTO rfq_assembly_history      \n" +
                "				(tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,               \n" +
                "				oldValue,newValue,changeVersion,               \n" +
                "				description,createdAt,updatedAt,updatedBy,createdBy, mfgCode, mfgCodeID, mfgPN, mfgPNID, narrative)      \n" +
                "			VALUES 	(\"rfq_lineitems_alternatepart\", NEW.id, NEW.rfqLineItemsID, pRfqAssID, pPartID,  'Mounting Type and Functional Type Approval',               \n" +
                "				\"Not Approved\", \"Approved\", CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)),               \n" +
                "				CONCAT('Approved mounting type and functional type  of ', New.mfgCode,' ', New.mfgPN),fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),IFNULL(NEW.updatedBy,NEW.createdBy),IFNULL(NEW.updatedBy,NEW.createdBy), New.mfgCode, New.mfgCodeID, New.mfgPN, New.mfgPNID,NULL);            \n" +
                "		END IF;      \n" +
                "	END IF;           \n" +
                "  \n" +
                "	IF pIsUpdateRequired = TRUE THEN            \n" +
                "		CALL Sproc_UpdateAllParentPartInternalVersion(NEW.partID, 'rfq_lineitems_alternatepart', NEW.updatedBy);            \n" +
                "	END IF;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPartProgrammingRefDesgDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPartProgrammingRefDesgDetail`(  \n" +
                "	IN pPartID INT  \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "		/* get Detail for part with RequireProgramming status true and selected as Pre-Assy or Post Assy in Programming status and Yes With PrePrgramm in isDNPBuy */        \n" +
                "			select 	rla.mountingtypeID,	rla.parttypeID,	com.programingRequired ,	rl.refDesig,	rl.dnpDesig, trim(rl.lineID)+0 as lineID,        \n" +
                "					rl.id,	rl.isBuyDNPQty,	rl.isInstall,	rl.isPurchase,	rl.programingStatus,	com.PIDCode,	com.mfgPN,        \n" +
                "                    rla.mfgPNID,	ro.name,	ro.rohsIcon,	com.RoHSStatusID,	com.mfgPNDescription, com.isCustom, com.custAssyPN,    \n" +
                "                    fun_getMfgCodeByID(com.mfgcodeID) mfrCode,com.mfgcodeID    \n" +
                "			from rfq_lineitems rl        \n" +
                "			join rfq_lineitems_alternatepart rla on rla.rfqLineItemsID = rl.id and rla.isdeleted = 0        \n" +
                "			join component com on com.id = rla.mfgPNID and com.isdeleted = 0        \n" +
                "			join rfq_rohsmst ro on ro.id = com.RoHSStatusID and ro.isDeleted = 0        \n" +
                "			left join component CPNCom on CPNCom.id = rl.custPNID and CPNCom.isDeleted = 0        \n" +
                "			where rl.partid = pPartID and rl.isdeleted = 0 and rla.customerApproval = 'A' and (com.programingRequired = 1 OR CPNCom.programingRequired = 1)        \n" +
                "			and rl.programingStatus in (1,2);        \n" +
                "  \n" +
                "		/* Get Detail of Part where Part Have Selected Software as Mounting type or Functional Type */        \n" +
                "			select rla.mountingtypeID,	rla.parttypeID,	com.programingRequired,	rl.refDesig,	rl.dnpDesig,	trim(rl.lineID)+0 as lineID,	rl.id,        \n" +
                "					rl.isBuyDNPQty,	rl.isInstall,	rl.isPurchase,	rl.programingStatus,	rl.customerPartDesc,	com.mfgPN,	com.PIDCode, rla.mfgPNID,        \n" +
                "					com.RoHSStatusID,	ro.name,	ro.rohsIcon,	com.mfgPNDescription, com.isCustom,  com.custAssyPN,  \n" +
                "                    fun_getMfgCodeByID(com.mfgcodeID) mfrCode,com.mfgcodeID    \n" +
                "			from rfq_lineitems rl        \n" +
                "			join rfq_lineitems_alternatepart rla on rla.rfqLineItemsID = rl.id and rla.isdeleted = 0        \n" +
                "			join component com on com.id = rla.mfgPNID and com.isdeleted = 0        \n" +
                "			Join rfq_rohsmst ro on ro.id = com.RoHSStatusID and ro.isDeleted = 0        \n" +
                "            where rl.partid = pPartID and rl.isInstall = 1 and rla.customerApproval = 'A' and rl.isdeleted = 0 and (rla.mountingtypeID = -2 or rla.parttypeID = -2);        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 21-04-2021 *********************************** */
                /* **************************** Add Script Version -> 21-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4496,'2.00','V1','User Story 32636: Demo Improvement Points of User story #29967 & #30241 give by Jaybhai related changes - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4496:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-04-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BU_component_sid_stock`;  \n" +
                "CREATE TRIGGER `Trg_BU_component_sid_stock` BEFORE UPDATE ON `component_sid_stock` FOR EACH ROW BEGIN        \n" +
                "	IF (NEW.isDeleted = 0 AND NEW.deletedAt IS NULL AND      \n" +
                "		(SELECT 	COUNT(1)       \n" +
                "		FROM 	component_sid_stock        \n" +
                "		WHERE 	uid = NEW.uid 			            \n" +
                "		AND 	isDeleted = 0 AND id != NEW.id      \n" +
                "	) > 0) THEN     \n" +
                "  \n" +
                "       select CONCAT('Duplicate entry  of ', NEW.uid) into @msg;    \n" +
                "        SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT= @msg;   \n" +
                "  \n" +
                "	END IF;         \n" +
                "END;  \n" +
                "DROP TRIGGER IF EXISTS `Trg_BI_component_sid_stock`;  \n" +
                "CREATE TRIGGER `Trg_BI_component_sid_stock` BEFORE INSERT ON `component_sid_stock` FOR EACH ROW BEGIN      \n" +
                "	IF (    \n" +
                "		SELECT 	COUNT(1) FROM component_sid_stock      \n" +
                "		WHERE 	uid = NEW.uid 			          \n" +
                "		AND 	isdeleted = 0     \n" +
                "	) > 0 THEN       \n" +
                "		 select CONCAT('Duplicate entry entry of ', NEW.uid) into @msg;    \n" +
                "        SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT= @msg;       \n" +
                "	END IF;       \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->22-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4497,'2.00','V1',' Change SP by DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4497:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-04-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierQuotePartPricingDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuotePartPricingDetails`(                                                            \n" +
                "	IN pSupplierQuotePartDetalID INT    \n" +
                ")  \n" +
                "BEGIN               \n" +
                "		/*For attributes fields*/        \n" +
                "		SELECT 	sqpa.attributeID, q.fieldName, q.toolingPrice,      \n" +
                "				REPLACE(REPLACE(q.fieldName,'.','@$@'), \" \", \"\") AS attributeColumnName                  \n" +
                "		FROM    supplier_quote_part_attribute sqpa        \n" +
                "		inner JOIN 	quotecharges_dynamic_fields_mst q ON sqpa.attributeID = q.id AND q.isDeleted = 0        \n" +
                "		WHERE 	sqpa.supplierQuotePartDetID = pSupplierQuotePartDetalID           \n" +
                "		AND 	sqpa.isDeleted = 0;        \n" +
                "  \n" +
                "		SELECT  SQPP.id,				SQPP.supplierQuotePartDetID,	SQPP.itemNumber,        \n" +
                "				SQPP.qty,				SQPP.`min`,						SQPP.mult,        \n" +
                "				SQPP.stock,				SQPP.packageID,					SQPP.reeling,        \n" +
                "				SQPP.NCNR,				SQPP.leadTime,					SQPP.UnitOfTime,        \n" +
                "				SQPP.UnitPrice,			SQPP.negotiatePrice,        \n" +
                "				fun_getPartAttibuteAndPriceBySupplierQuotePartPriceID(SQPP.id) attibutePriceList        \n" +
                "		FROM		supplier_quote_part_price SQPP        \n" +
                "		WHERE 		SQPP.supplierQuotePartDetID = pSupplierQuotePartDetalID         \n" +
                "		AND 		SQPP.isDeleted = 0        \n" +
                "		GROUP BY 	SQPP.itemNumber;                                           \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4498,'2.00','V1','Supplier quote default value set for packaging - Dharmishtha'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4498:
            allDbChangesArray.push(
                /* **************************** New Script -> 022-04-2021 *********************************** */
                "DROP  TABLE IF EXISTS mfgcodemst_comment_det;  \n" +
                "CREATE TABLE mfgcodemst_comment_det (  \n" +
                "id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,  \n" +
                "mfgCodeId INT NOT NULL,  \n" +
                "inspectionRequirementId INT NOT NULL,  \n" +
                "createdBy VARCHAR(255),  \n" +
                "createdAt DATETIME,  \n" +
                "createByRoleId INT,  \n" +
                "updatedBy VARCHAR(255),  \n" +
                "updatedAt DATETIME,  \n" +
                "updateByRoleId INT,  \n" +
                "isDeleted TINYINT(1),  \n" +
                "deletedAt DATETIME,  \n" +
                "deletedBy VARCHAR(255),  \n" +
                "deleteByRoleId INT  \n" +
                ");   \n" +
                "  \n" +
                "INSERT INTO page_detail (`pageName`,`RO`,`RW`,`pageRoute`, `pageURL`, `menuName`, `parentPageID`, `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`)  \n" +
                "VALUES( 'Manage Customer Comment',0,0, 'app.customer.managecustomer.comments', '/comments/:customerType/:cid', 'Manage Customer Comment', 58, 'icons-manage-customer', 1, 1, 0, 1, 'Customer');  \n" +
                "  \n" +
                "INSERT INTO page_detail(`pageName`, `RO`,`RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`)  \n" +
                "VALUES( 'Manage Supplier Comment',0,0, 'app.supplier.managesupplier.comments', '/comments/:customerType/:cid', 'Manage Supplier Comment', 59, 'icons-manage-supplier', 1, 1, 0, 1, 'Supplier');  \n" +
                /* **************************** Add Script Version ->22-04-2021*********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_mfgcodemst_comment_det` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_mfgcodemst_comment_det`(                                                                      \n" +
                "	IN tableName VARCHAR(255),                                                                      \n" +
                "	IN IDs LONGTEXT,                                                                      \n" +
                "	IN deletedBy INT,                                                                      \n" +
                "	IN entityID VARCHAR(255),                                                                      \n" +
                "	IN refrenceIDs LONGTEXT,             \n" +
                "	IN countList INT,        \n" +
                "	IN pRoleID INT        \n" +
                ")  \n" +
                "BEGIN                 \n" +
                "	SET @SQL = CONCAT('      \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_delete_mfgcodemst_comment_det AS                                                                      \n" +
                "				(SELECT 0 cnt, \"\" as msg)        \n" +
                "		       ');                                                                    \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;                                                                      \n" +
                "	EXECUTE stmt;         \n" +
                "  \n" +
                "	IF (countList = FALSE) THEN      \n" +
                "		IF (SELECT SUM(t.cnt) FROM temp_delete_mfgcodemst_comment_det t) = 0 THEN       \n" +
                "			SET @SQL1 = CONCAT('      \n" +
                "					UPDATE 	mfgcodemst_comment_det       \n" +
                "					SET 	isDeleted=',1,',      \n" +
                "						deletedBy=',deletedBy,',       \n" +
                "						deleteByRoleId = ',pRoleID,',       \n" +
                "						deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"       \n" +
                "					where 	id IN(',IDs,') and deletedAt is NULL      \n" +
                "				');		                                                                      \n" +
                "			PREPARE stmt1 FROM @SQL1;                                                                      \n" +
                "			EXECUTE stmt1;      \n" +
                "  \n" +
                "			SELECT * FROM temp_delete_mfgcodemst_comment_det WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";      \n" +
                "		ELSE      \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM temp_delete_mfgcodemst_comment_det t;        \n" +
                "		END IF;      \n" +
                "	ELSE      \n" +
                "		SELECT 		t1.cnt,      \n" +
                "				t2.display_page_name AS msg              \n" +
                "		FROM 		tempbr_label_template t1              \n" +
                "		INNER JOIN 	temp_delete_mfgcodemst_comment_det t2 ON t1.msg=t2.tabel_name              \n" +
                "		WHERE 		IFNULL(cnt,0) > 0 AND msg IS NOT NULL 	      \n" +
                "					AND msg != \"\"              \n" +
                "		ORDER BY 	t2.display_page_name;      \n" +
                "	END IF;        \n" +
                "	DROP TABLE temp_delete_mfgcodemst_comment_det;      \n" +
                "  \n" +
                "END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerCommentList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerCommentList`(                                    \n" +
                "	IN pPageIndex INT(11),                                    \n" +
                "	IN pRecordPerPage INT(11),                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                \n" +
                "	IN pMFGId INT(11)      \n" +
                ")  \n" +
                "BEGIN                                    \n" +
                "	DECLARE pOffset INT(11);                        \n" +
                "	DECLARE rowNumWhere VARCHAR(255);             \n" +
                "	DECLARE v_PartId INT(11);           \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                     \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;            \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;            \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerCommentList = CONCAT(\"  \n" +
                "		SELECT 		cird.id,   \n" +
                "				cird.mfgCodeId,  \n" +
                "				cird.inspectionRequirementId,          \n" +
                "				im.requirement requirement,            \n" +
                "                gc.gencCategoryID,    \n" +
                "                case when im.requiementType = 'R' then      \n" +
                "					'Requirement'      \n" +
                "				when im.requiementType = 'C' then      \n" +
                "					'Comment'      \n" +
                "				end requiementType,     \n" +
                "                im.isActive,  \n" +
                "                gc.categoryType,    \n" +
                "                (CASE WHEN (`im`.`isActive` = 0) THEN 'Inactive'                       \n" +
                "					WHEN (`im`.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`,      \n" +
                "                case when gc.gencCategoryCode is not null then concat('(',gc.gencCategoryCode,') ',gc.gencCategoryName) else gc.gencCategoryName End AS partRequirementCategoryName,    \n" +
                "				fun_getUserNameByID(cird.updatedBy) updatedby,                                \n" +
                "				fun_getUserNameByID(cird.createdBy) createdby,                                \n" +
                "				fun_getRoleByID(cird.createByRoleId) createdbyRole,                                \n" +
                "				fun_getRoleByID(cird.updateByRoleId) updatedbyRole,                                \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(cird.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                                \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(cird.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt          					           \n" +
                "		FROM 		mfgcodemst_comment_det cird            \n" +
                "		INNER JOIN 	inspection_mst im ON im.id = cird.inspectionRequirementId AND im.isDeleted = 0          \n" +
                "        JOIN  genericcategory gc ON im.partRequirementCategoryID = gc.gencCategoryID    \n" +
                "		WHERE		cird.mfgCodeId = \", pMFGId ,\"   \n" +
                "				AND cird.isDeleted = 0\");  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                      \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \",\" requiementType DESC \") ;                                                      \n" +
                "	ELSE                                                      \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;                                                      \n" +
                "	END IF;	                                                      \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                        \n" +
                "		SET pWhereClause = ' 1=1 ' ;                        \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                      \n" +
                "	ELSE	                                                      \n" +
                "		SET rowNumWhere = '';                                                      \n" +
                "	END IF;            \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerCommentList,\" ) c where 1=1 and \", pWhereClause);                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                        \n" +
                "	EXECUTE query1;                                        \n" +
                "	DEALLOCATE PREPARE query1;            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT a.* FROM ( \", @temp_Sproc_RetrieveCustomerCommentList,\" ) a WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                        \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                        \n" +
                "	EXECUTE query2;                             \n" +
                "	DEALLOCATE PREPARE query2;            \n" +
                "  \n" +
                "    END;  \n" +
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(                          \n" +
                "    IN tableName VARCHAR(255),                          \n" +
                "    IN IDs LONGTEXT,                          \n" +
                "    IN deletedBy INT,                          \n" +
                "    IN entityID VARCHAR(255),                          \n" +
                "    IN refrenceIDs LONGTEXT,       \n" +
                "    IN countList INT,                           \n" +
                "    IN pRoleID INT                          \n" +
                ")  \n" +
                "BEGIN                          \n" +
                "IF tableName=\"employees\" THEN                          \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"eco_type_category\" THEN                          \n" +
                "     CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"eco_type_values\" THEN                          \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"customers\" THEN                          \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"certificate_standards\" THEN                          \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"department\" THEN                          \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"genericcategory\" THEN                          \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"equipment\" THEN                          \n" +
                "    CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"master_templates\" THEN                          \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"operations\" THEN                          \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"workorder\" THEN                          \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"roles\" THEN                          \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"standard_class\" THEN                          \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"dataelement\" THEN                          \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN                          \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"component\" THEN                          \n" +
                "    CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"workorder_cluster\" THEN                          \n" +
                "    CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"workorder_operation\" THEN                          \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"workorder_operation_part\" THEN                          \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN                          \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"workorder_operation_employee\" THEN                          \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN                          \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"entity\" THEN                          \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"salesordermst\" THEN                          \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"mfgcodemst\" THEN                          \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN                          \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"shippedassembly\" THEN                          \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN                          \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"br_label_template\" THEN                          \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"measurement_types\" THEN                          \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"uoms\" THEN                          \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"jobtypes\" THEN                          \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"rfqtype\" THEN                          \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"reasonmst\" THEN                          \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"component_sid_stock\" THEN                          \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN                          \n" +
                "    CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"chart_templatemst\" THEN                          \n" +
                "    CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"shipping_requestdet\" THEN                          \n" +
                "    CALL Sproc_checkDelete_shipping_requestdet(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"chart_rawdata_category\" THEN                          \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"rfq_lineitems\" THEN                          \n" +
                "      CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"requirement\" THEN                          \n" +
                "    CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN                          \n" +
                "    CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"customer_addresses\" THEN                          \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"rfqforms\" THEN                          \n" +
                "    CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN                          \n" +
                "    CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"who_bought_who\" THEN                          \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"rfq_parttypemst\" THEN                          \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN                          \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN                          \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN                          \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"cost_category\" THEN                          \n" +
                "    CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"chartypemst\" THEN                          \n" +
                "    CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"countrymst\" THEN                          \n" +
                "     CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN                          \n" +
                "     CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"rfq_assy_typemst\" THEN                          \n" +
                "     CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"warehousemst\" THEN                          \n" +
                "     CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"binmst\" THEN                          \n" +
                "     CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"rackmst\" THEN                          \n" +
                "     CALL Sproc_checkDelete_rackmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"component_logicalgroup\" THEN                          \n" +
                "     CALL Sproc_checkDelete_component_logical_group(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"packing_slip_material_receive\" THEN                          \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"packing_slip_material_receive_det\" THEN                          \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive_det(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;          \n" +
                "IF tableName=\"packing_slip_material_receive_memo\" THEN                          \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive_memo(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"packing_slip_track_number\" THEN                          \n" +
                "     CALL Sproc_checkDelete_packing_slip_track_number(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"reserve_stock_request\" THEN                          \n" +
                "       	 CALL Sproc_checkDelete_reserve_stock_request(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"component_packagingmst\" THEN                          \n" +
                "     CALL Sproc_checkDelete_component_packagingmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"workorder_trans_narrative_history\" THEN                          \n" +
                "     CALL Sproc_checkDelete_workorder_trans_narrative_history(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"scannermst\" THEN                          \n" +
                "     CALL Sproc_checkDelete_Scanner(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"component_alternatepn_validations\" THEN                          \n" +
                "     CALL Sproc_checkDelete_Alias_Parts_Validation(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"workorder_operation_equipment_feeder_details\" THEN                          \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment_feeder_details(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"component_price_break_details\" THEN                          \n" +
                "    CALL Sproc_checkDelete_component_price_break_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"department_location\" THEN                          \n" +
                "    CALL Sproc_checkDelete_department_location(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"purchase_parts_details\" THEN                          \n" +
                "    CALL Sproc_checkDelete_purchase_parts_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"rfq_rohsmst\" THEN                          \n" +
                "    CALL Sproc_checkDelete_rfq_rohsmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"component_partstatusmst\" THEN                          \n" +
                "    CALL Sproc_checkDelete_component_partstatusmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"workorder_trans_umid_details\" THEN                          \n" +
                "    CALL Sproc_checkDelete_workorder_trans_umid_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"labor_cost_template\" THEN                          \n" +
                "    CALL Sproc_checkDelete_labor_cost_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"rfq_packagecasetypemst\" THEN                          \n" +
                "    CALL Sproc_checkDelete_rfq_packagecasetypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"component_dynamic_attribute\" THEN                          \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"component_dynamic_attribute_mapping_part\" THEN                          \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute_mapping_part(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"labeltemplatesmst\" THEN                          \n" +
                "    CALL Sproc_checkDelete_labeltemplates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"reportmaster\" THEN                          \n" +
                "    CALL Sproc_checkDelete_reportMaster(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"operating_temperature_conversion_mst\" THEN                          \n" +
                "    CALL Sproc_checkDelete_operating_temperature_conversion_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"inspection_mst\" THEN                          \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementMst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"inspection_template_mst\" THEN                          \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementTemplate(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"componenet_inspection_requirement_det\" THEN                          \n" +
                "    CALL Sproc_checkDelete_componenet_inspection_requirement_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"supplier_quote_mst\" THEN                          \n" +
                "   CALL Sproc_checkDelete_supplier_quote(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"supplier_quote_parts_det\" THEN                          \n" +
                "   CALL Sproc_checkDelete_supplier_quote_parts(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"calibration_details\" THEN                          \n" +
                "   CALL Sproc_checkDelete_CalibrationDetails(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"customer_packingslip\" THEN                          \n" +
                "   CALL Sproc_checkDelete_customer_packingslip(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"customer_packingslip_det\" THEN                          \n" +
                "   CALL Sproc_checkDelete_customer_packingslip_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"supplier_attribute_template_mst\" THEN                          \n" +
                "      CALL Sproc_checkDelete_supplier_attribute_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"freeonboardmst\" THEN                          \n" +
                "   CALL Sproc_checkDelete_freeonboard(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"generic_file_extension\" THEN                          \n" +
                "   CALL Sproc_checkDelete_genericFileExtension(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                          \n" +
                "IF tableName=\"assemblystock\" THEN                          \n" +
                "   CALL Sproc_checkDelete_assemblystock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                        \n" +
                "IF tableName=\"customer_invoice\" THEN                          \n" +
                "   CALL Sproc_checkDelete_customer_invoice(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                     \n" +
                "IF tableName=\"workorder_boxserialno\" THEN                          \n" +
                "   CALL Sproc_checkDelete_wo_box_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                     \n" +
                "IF tableName=\"workorder_trans_boxserialno\" THEN                          \n" +
                "   CALL Sproc_checkDelete_wo_trans_box_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                         \n" +
                "IF tableName=\"bank_mst\" THEN                  \n" +
                "   CALL Sproc_checkDelete_bank(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                  \n" +
                "IF tableName=\"cameramst\" THEN                          \n" +
                "   CALL Sproc_checkDelete_cameramst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;                 \n" +
                "IF tableName=\"release_notes_detail\" THEN                          \n" +
                "   CALL Sproc_checkDelete_releasenotes_detail(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;              \n" +
                "IF tableName=\"release_notes\" THEN                          \n" +
                "   CALL Sproc_checkDelete_releasenotes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;             \n" +
                "IF tableName=\"purchase_order_mst\" THEN                          \n" +
                "   CALL Sproc_checkDelete_purchase_order_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;             \n" +
                "IF tableName=\"purchase_order_det\" THEN                          \n" +
                "   CALL Sproc_checkDelete_purchase_order_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF; 		              \n" +
                "IF tableName=\"acct_acctmst\" THEN                          \n" +
                "    CALL Sproc_checkDelete_acct_acctmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;        \n" +
                "IF tableName=\"help_blog_det\" THEN                          \n" +
                "   CALL Sproc_checkDelete_helpblog_detail(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;            \n" +
                "IF tableName=\"acct_classmst\" THEN     \n" +
                "	CALL Sproc_checkDelete_acct_classmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                 \n" +
                "END IF;  \n" +
                "IF tableName=\"mfgcodemst_comment_det\" THEN                          \n" +
                "    CALL Sproc_checkDelete_mfgcodemst_comment_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);                          \n" +
                "END IF;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->22-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4499,'2.00','V1',' User Story 32181: Supplier & Customer: Add one tab Comment in detail page - Purav '," + userid + " , '" + requiredDet.ipAddress + "');"

            );
            break;
        case 4499:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-04-2021 *********************************** */
                "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`, `createdBy`, `updatedAt`,`createByRoleId`,`updateByRoleId`)  \n" +
                "VALUES ('Allow to Lock Supplier Payment', 1, 0, CURRENT_TIMESTAMP(), 1, CURRENT_TIMESTAMP(), 1, 1);  \n" +
                "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`, `createdBy`, `updatedAt`,`createByRoleId`,`updateByRoleId`)  \n" +
                "VALUES ('Allow to Lock Supplier RMA', 1, 0, CURRENT_TIMESTAMP(), 1, CURRENT_TIMESTAMP(), 1, 1);  \n" +
                "INSERT INTO entity(entityID,entityName,remark,isactive,createdby,systemGenerated,columnView)  \n" +
                "VALUES (-19,'Supplier RMA','Supplier RMA',1,1,1,100);  \n" +
                /* **************************** Add Script Version ->22-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4500,'2.00','V1','User Story 31223: Add Provision to Lock Supplier Transaction - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4500:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-04-2021 *********************************** */
                "drop procedure if exists `Sproc_GetOldCreditDebitMemoData`;  \n" +
                "CREATE PROCEDURE `Sproc_GetOldCreditDebitMemoData`(  \n" +
                "	IN pPackingSlipDetId INT  \n" +
                ")  \n" +
                "BEGIN                     \n" +
                "	SELECT 		a.id,      \n" +
                "			SUM(a.extendedPrice) extendedPrice,      \n" +
                "			a.refPackingSlipMaterialRecID,      \n" +
                "			a.refPackingSlipDetId,      \n" +
                "			GROUP_CONCAT(a.approveNote SEPARATOR '###') approveNote,      \n" +
                "			b.id packingSlipId,      \n" +
                "			b.status,      \n" +
                "			b.receiptType,      \n" +
                "			b.packingSlipNumber,      \n" +
                "			b.packingSlipDate,      \n" +
                "			b.creditMemoNumber,     \n" +
                "			b.creditMemoDate,     \n" +
                "			b.debitMemoNumber,      \n" +
                "			b.debitMemoDate,    \n" +
                "			(SELECT COUNT(1) FROM (SELECT id FROM packing_slip_material_receive_det c WHERE c.refPackingSlipMaterialRecID = b.id AND c.isDeleted = 0 GROUP BY c.refPackingSlipDetId) a) noOfLineInPackingSlip,  \n" +
                "            b.lockStatus  \n" +
                "	FROM 		packing_slip_material_receive_det a       \n" +
                "	LEFT JOIN	packing_slip_material_receive b ON a.refPackingSlipMaterialRecID = b.id AND b.isDeleted = 0      \n" +
                "	WHERE 		refPackingSlipDetId = pPackingSlipDetId AND a.isDeleted = 0      \n" +
                "	GROUP BY 	a.refPackingSlipMaterialRecID, a.refPackingSlipDetId, b.id, b.receiptType, b.packingSlipNumber, b.packingSlipDate;      \n" +
                "  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_GetPackingSlipInvoicePaymentToInformation`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipInvoicePaymentToInformation`(    \n" +
                "	IN pPaymentId INT,        \n" +
                "	IN pMfgCodeId INT        \n" +
                ")  \n" +
                "BEGIN                    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	IF pPaymentId IS NOT NULL THEN     \n" +
                "  \n" +
                "        SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "		SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SELECT 		pi.systemId,        \n" +
                "				pi.accountReference,                    \n" +
                "				pi.mfgcodeID,                    \n" +
                "				m.mfgCode,                    \n" +
                "				m.mfgName,                    \n" +
                "				CONCAT('(',m.mfgCode,') ',m.mfgName) fullMfgName,                    \n" +
                "				pi.paymentType,                    \n" +
                "				p.gencCategoryName paymentTypeName,                    \n" +
                "				pi.paymentNumber,                    \n" +
                "				pi.bankAccountMasID,                    \n" +
                "				pi.bankName,                    \n" +
                "				pi.bankAccountNo,                    \n" +
                "				pi.paymentDate,                    \n" +
                "				pi.paymentAmount,                    \n" +
                "				pi.payToName,                    \n" +
                "				pi.payToAddress,                    \n" +
                "				pi.remark,              \n" +
                "				pi.isPaymentVoided,              \n" +
                "				pi.voidPaymentReason,          \n" +
                "				pi.billToName,          \n" +
                "				pi.billToAddress,  \n" +
                "                pi.lockStatus,  \n" +
                "				fun_getUserNameByID(pi.lockedBy) lockByName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pi.lockedAt, v_TimeZone, v_DateTimeDisplayFormat) lockedAt  \n" +
                "		FROM 		packingslip_invoice_payment PI                    \n" +
                "		INNER JOIN 	mfgcodemst m ON m.id = pi.mfgcodeID                    \n" +
                "		INNER JOIN 	genericcategory p ON p.gencCategoryID = pi.paymentType                    \n" +
                "		WHERE 		pi.isDeleted = 0                    \n" +
                "					AND 		PI.refPaymentMode = 'P'            \n" +
                "					AND 		pi.id = pPaymentId;                    \n" +
                "	ELSE                    \n" +
                "		SELECT 		m.accountRef accountReference,                    \n" +
                "				m.id mfgcodeID,                    \n" +
                "				m.mfgCode,                    \n" +
                "				m.mfgName,                    \n" +
                "				CONCAT('(',m.mfgCode,') ',m.mfgName) fullMfgName,                    \n" +
                "				m.paymentMethodID paymentType,                    \n" +
                "				p.gencCategoryName paymentTypeName,                    \n" +
                "				NULL paymentNumber,                    \n" +
                "				b.id bankAccountMasID,                    \n" +
                "				b.bankName,                    \n" +
                "				b.accountCode bankAccountNo,                    \n" +
                "				NULL paymentDate,                    \n" +
                "				NULL paymentAmount,                    \n" +
                "				ca.bankRemitToName payToName,                    \n" +
                "				fun_getAddressbyIDForCheckPrint(ca.id) payToAddress,                    \n" +
                "				NULL remark,              \n" +
                "				0 isPaymentVoided,              \n" +
                "				NULL voidPaymentReason,          \n" +
                "				cb.companyName billToName,          \n" +
                "				fun_getAddressbyIDForCheckPrint(cb.id) billToAddress,  \n" +
                "                null lockStatus,  \n" +
                "				null lockByName,  \n" +
                "				null lockedAt  \n" +
                "		FROM 		mfgcodemst m                    \n" +
                "		LEFT JOIN 	genericcategory p ON p.gencCategoryID = m.paymentMethodID    \n" +
                "        LEFT JOIN 	bank_mst b ON b.id = p.bankid AND b.isDeleted = 0 AND b.isActive = 1    \n" +
                "		LEFT JOIN 	customer_addresses ca ON ca.customerId = m.id AND ca.isDeleted = 0 AND ca.addressType = 'P' AND ca.isDefault = 1                    \n" +
                "		LEFT JOIN 	customer_addresses cb ON cb.customerId = m.id AND cb.isDeleted = 0 AND cb.addressType = 'B' AND cb.isDefault = 1          \n" +
                "		WHERE 		m.isDeleted = 0                    \n" +
                "					AND m.id = pMfgCodeId;                    \n" +
                "	END IF;                    \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->22-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4501,'2.00','V1','User Story 31223: Add Provision to Lock Supplier Transaction - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4501:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-04-2021 *********************************** */
                "drop procedure if exists `Sproc_RetrivePackingSlipMaterialReceiveList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveList`(    \n" +
                "	IN pPageIndex INT,    \n" +
                "	IN pRecordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN pReceiptType VARCHAR(10),    \n" +
                "	IN pMfgCodeIds VARCHAR(16383),    \n" +
                "	IN pAdvanceSearchPoSoPsInv VARCHAR(50),    \n" +
                "	IN pMfrPnId INT    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE v_TimeZone VARCHAR(50);    \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);    \n" +
                "	SET SESSION group_concat_max_len = 500000;    \n" +
                "  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';    \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;    \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;    \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN    \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pAdvanceSearchPoSoPsInv IS NOT NULL) THEN    \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \" AND (    \n" +
                "											supplierSONumber = '\", pAdvanceSearchPoSoPsInv, \"'    \n" +
                "										OR 	poNumber = '\", pAdvanceSearchPoSoPsInv, \"'    \n" +
                "										OR 	packingSlipNumber = '\", pAdvanceSearchPoSoPsInv, \"'    \n" +
                "										OR 	refInvoiceNumber = '\", pAdvanceSearchPoSoPsInv, \"'\"    \n" +
                "									  \" )    \n" +
                "					\");    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN    \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (    \n" +
                "				SELECT 	refPackingSlipMaterialRecID    \n" +
                "				FROM 	packing_slip_material_receive_det    \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0    \n" +
                "			)    \n" +
                "		\");    \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrivePackingSlipMaterialReceiveList = CONCAT(\"    \n" +
                "			SELECT  *    \n" +
                "			FROM	(    \n" +
                "					SELECT 		p.id,                  \n" +
                "							p.systemId,          \n" +
                "							p.poNumber,        \n" +
                "							po.id poId,                        \n" +
                "							p.mfgCodeID,                          \n" +
                "							p.supplierSONumber,                          \n" +
                "							p.packingSlipNumber,                          \n" +
                "							p.packingSlipDate,                          \n" +
                "							p.invoiceNumber,                          \n" +
                "							p.invoiceDate,                          \n" +
                "							p.creditMemoNumber,                          \n" +
                "							p.creditMemoDate,                          \n" +
                "							p.debitMemoNumber,                          \n" +
                "							p.debitMemoDate,                          \n" +
                "							p.receiptDate,                          \n" +
                "							p.description,                          \n" +
                "							p.billToAddress,                          \n" +
                "							p.shipToAddress,                          \n" +
                "							p.poVersion,                          \n" +
                "							p.isDeleted,                          \n" +
                "							p.receiptType,                          \n" +
                "							p.`status`,                     \n" +
                "							p.packingSlipModeStatus,                       \n" +
                "							p.chequeNumber,                          \n" +
                "							p.chequeDate,                          \n" +
                "							p.chequeAmount,                          \n" +
                "							p.applyDate,                          \n" +
                "							p.refParentCreditDebitInvoiceno,                          \n" +
                "							p.refPackingSlipNumberForInvoice,                          \n" +
                "							p.invoiceTotalDue,                          \n" +
                "							p.isTariffInvoice,                          \n" +
                "							p.bankName,              									                                             \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,                                       \n" +
                "							fun_getUserNameByID(p.createdBy)  createdByName,                                             \n" +
                "							fun_getMfgCodeByID(p.mfgCodeID) supplierCode,             \n" +
                "							fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCodeName,                                \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,                            \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,                            \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                            \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,                    \n" +
                "							(                  \n" +
                "								CASE                  \n" +
                "									WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'                  \n" +
                "									WHEN p.packingSlipModeStatus = 'P' THEN 'Publish'                  \n" +
                "									ELSE NULL                  \n" +
                "								END                  \n" +
                "							) packingSlipModeStatusValue,  	                  \n" +
                "							ps.id invoiceId,                  \n" +
                "							ps.invoiceNumber refInvoiceNumber,                  \n" +
                "                            ps.lockStatus refInvoiceLockStatus,  \n" +
                "							ps.invoiceDate refInvoiceDate,                  \n" +
                "							(                  \n" +
                "								CASE                  \n" +
                "									WHEN p.status = 'I' THEN 'Investigate'                  \n" +
                "									WHEN p.status = 'W' THEN 'Waiting for Invoice'                  \n" +
                "									WHEN p.status = 'IR' THEN 'Invoice Received'                  \n" +
                "									WHEN p.status = 'A' THEN 'Approved to Pay'                  \n" +
                "									WHEN p.status = 'P' THEN 'Paid'                  \n" +
                "									ELSE NULL                  \n" +
                "								END                  \n" +
                "							) statusValue,                   \n" +
                "							IFNULL(g.cnt,0) packingSlipDocCount,             \n" +
                "							psm.totalDetailLine itemReceived,                \n" +
                "							psm.totalRejectLine totalRejectedLine,    \n" +
                "                            p.lockStatus,    \n" +
                "                            (case when p.lockStatus = 'NA' then 'Not Applicable'    \n" +
                "								when p.lockStatus = 'RL' then 'Ready To Lock'    \n" +
                "                                when p.lockStatus = 'LC' then 'Locked'    \n" +
                "                                else null end    \n" +
                "                            ) lockStatusValue,    \n" +
                "                            fun_getUserNameByID(p.lockedBy) lockByName,    \n" +
                "                            fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,    \n" +
                "                            fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt    \n" +
                "					FROM		packing_slip_material_receive p                    \n" +
                "					LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0                    \n" +
                "					LEFT JOIN 	(                  \n" +
                "								SELECT 		refPackingSlipMaterialRecID, COUNT(1) totalDetailLine, SUM(IF(psm.receivedStatus = 'R', 1, 0)) AS totalRejectLine                 \n" +
                "								FROM 		packing_slip_material_receive_det psm                   \n" +
                "								WHERE 		isDeleted = 0                   \n" +
                "								GROUP BY 	refPackingSlipMaterialRecID                  \n" +
                "							) psm ON psm.refPackingSlipMaterialRecID = p.id                  \n" +
                "					LEFT JOIN 	vu_genericfilescount g ON g.gencFileOwnerType = 'packing_slip' AND g.refTransID = p.id                              \n" +
                "					LEFT JOIN 	purchase_order_mst po ON po.poNumber = p.poNumber AND po.isDeleted = 0      \n" +
                "					WHERE   	p.deletedAt IS NULL AND FIND_IN_SET(p.receiptType, '\", pReceiptType ,\"')                     \n" +
                "				) a                    \n" +
                "			WHERE \", v_advanceFilterWhereClause                    \n" +
                "		);                                \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;                                                          \n" +
                "	ELSE                                                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                          \n" +
                "	END IF;	                                                          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                          \n" +
                "		SET pWhereClause = '1=1' ;                                                          \n" +
                "	END IF;	                                                  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                           \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                          \n" +
                "	ELSE	                                                          \n" +
                "		SET rowNumWhere = '';                                                          \n" +
                "	END IF;	                                                          \n" +
                "  \n" +
                "	/* to get total count of rows */                                             \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c where 1=1 AND \", pWhereClause);            	                                \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                            \n" +
                "	EXECUTE query1;                                            \n" +
                "	DEALLOCATE PREPARE query1;                                          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                            \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                            \n" +
                "	EXECUTE query2;                                            \n" +
                "	DEALLOCATE PREPARE query2;                                        \n" +
                "  \n" +
                "    END;  \n" +
                "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(        \n" +
                "	IN pPageIndex INT,        \n" +
                "	IN pRecordPerPage INT,        \n" +
                "	IN pOrderBy VARCHAR(255),        \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "	IN pReceiptType VARCHAR(10),        \n" +
                "	IN pMfgCodeIds LONGTEXT,        \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,        \n" +
                "	IN pDueDate DATE,        \n" +
                "	IN pAdditionalDays INT,        \n" +
                "	IN pTermsAndAboveDays INT,        \n" +
                "	IN pInvoiceNumber VARCHAR(50),        \n" +
                "	IN pIsExactSearch TINYINT,        \n" +
                "	IN pMfrPnId INT,        \n" +
                "    IN pInvoiceIds LONGTEXT,        \n" +
                "    IN pExactPaymentNumberSearch TINYINT,        \n" +
                "    IN pPaymentNumber VARCHAR(50),        \n" +
                "    IN pPaymentTermsIds LONGTEXT,        \n" +
                "    IN pInvoiceFromDate DATE,        \n" +
                "    IN pInvoiceToDate DATE        \n" +
                ")  \n" +
                "BEGIN        \n" +
                "	DECLARE pOffset INT;                        \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                        \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                        \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                        \n" +
                "    DECLARE vCurrentDate DATE;                        \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;                        \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;                        \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;                        \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"                            \n" +
                "			SELECT 		p.id,                          \n" +
                "					p.systemId,                      \n" +
                "					p.poNumber,                            \n" +
                "                    po.id poId,      \n" +
                "					p.mfgCodeID,                            \n" +
                "					p.supplierSONumber,                            \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,  \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,  \n" +
                "					p.packingSlipDate,                            \n" +
                "					p.invoiceNumber,                            \n" +
                "                    p.lockStatus invoiceLockStatus,  \n" +
                "					p.invoiceDate,                \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,                \n" +
                "					p.creditMemoNumber,  \n" +
                "                    p.lockStatus creditMemoLockStatus,  \n" +
                "					p.creditMemoDate,                            \n" +
                "					p.debitMemoNumber,                            \n" +
                "                    p.lockStatus debitMemoLockStatus,  \n" +
                "					p.debitMemoDate,                            \n" +
                "					p.receiptDate,                            \n" +
                "					p.description,                            \n" +
                "					p.billToAddress,                            \n" +
                "					p.shipToAddress,                            \n" +
                "					p.poVersion,                            \n" +
                "					p.isDeleted,                            \n" +
                "					p.receiptType,                            \n" +
                "					p.`status`,                            \n" +
                "					p.applyDate,                            \n" +
                "					p.refParentCreditDebitInvoiceno,                            \n" +
                "					p.refPackingSlipNumberForInvoice,                            \n" +
                "					p.invoiceTotalDue,                            \n" +
                "					p.isTariffInvoice,                                              \n" +
                "					p.creditMemoType,        \n" +
                "                    (        \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN        \n" +
                "								'Invoice Credit Memo'        \n" +
                "							WHEN p.creditMemoType = 'MC' THEN        \n" +
                "								'Manual Credit Memo'        \n" +
                "							WHEN p.creditMemoType = 'RC' THEN        \n" +
                "								'RMA Credit Memo'        \n" +
                "							WHEN p.creditMemoType = 'ID' THEN        \n" +
                "								'Invoice Debit Memo'        \n" +
                "							WHEN p.creditMemoType = 'MD' THEN        \n" +
                "								'Manual Debit Memo'        \n" +
                "						END        \n" +
                "					) creditMemoTypeValue,        \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,                                         \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,                              \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,                              \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,                              \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                              \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                                       \n" +
                "                    fun_getMfgNameByID(p.mfgCodeID) supplierName,        \n" +
                "					fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCode,          \n" +
                "					fun_getMfgCodeByID(p.mfgCodeID) supplierCodeName,                            \n" +
                "					(                                  \n" +
                "						SELECT 	IFNULL(g.cnt,0)                                \n" +
                "						FROM 	vu_genericfilescount g                                   \n" +
                "						WHERE 	g.refTransID = p.id                                   \n" +
                "								AND                                 \n" +
                "								(                                \n" +
                "									CASE                                 \n" +
                "										WHEN p.receiptType = 'C' THEN g.entityID = -15                                \n" +
                "										WHEN p.receiptType = 'D' THEN g.entityID = -16                                  \n" +
                "										ELSE g.entityID = -13                                \n" +
                "									END                                \n" +
                "								)                         \n" +
                "					) invoiceDocCount,                                  \n" +
                "					(                                  \n" +
                "						SELECT 	IFNULL(g.cnt,0)                                   \n" +
                "						FROM 	vu_genericfilescount g                                   \n" +
                "						WHERE 	g.refTransID = psm.id                       \n" +
                "								AND g.entityID = -14                         \n" +
                "								AND g.gencFileOwnerType = 'packing_slip'                             \n" +
                "					) packingSlipDocCount,                                                   \n" +
                "					pd.itemReceived,                                                        \n" +
                "					pd.otherChargesItemReceived,                                                              \n" +
                "					pd.itemDisapproved,                            \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,                            \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,                            \n" +
                "					ps.status parentInvoiceStatus,                            \n" +
                "					ps.invoiceNumber refInvoiceNumber,  \n" +
                "                    ps.lockStatus refInvoiceLockStatus,  \n" +
                "					ps.creditMemoType parentCreditMemoType,                            \n" +
                "					pd.totalExtendedAmount,              \n" +
                "                    pd.totalDiscount,              \n" +
                "					pe.totalCreditAmount,                            \n" +
                "					pe.totalDebitAmount,                            \n" +
                "					(                            \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)                            \n" +
                "					) amountToPay,                            \n" +
                "					pd.packingDetailNote,                            \n" +
                "					pd.approveLineCount,                            \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN                                    \n" +
                "											p.debitMemoDate                                    \n" +
                "										WHEN p.receiptType = 'C' THEN                                    \n" +
                "											p.creditMemoDate                                    \n" +
                "										ELSE p.invoiceDate                                            \n" +
                "									end), p.termsDays, p.paymentTermsID) paymentDueDate,                            \n" +
                "					fun_getGenericCategoryNameByID(p.paymentTermsID) paymentTermName,                            \n" +
                " 					p.paymentTermsID,                            \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,                                                    \n" +
                "					psm.packingSlipModeStatus,                                            \n" +
                "					get_totalSupplierInvoicePaidAmountById(p.id) paidAmount,                                            \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,                                        \n" +
                "					p.invoiceRequireManagementApproval,                                        \n" +
                "					(                                        \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN                                        \n" +
                "								'Yes'                                        \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN                                        \n" +
                "								'No'                                        \n" +
                "						END                                        \n" +
                "					) invoiceRequireManagementApprovalValue,                                         \n" +
                "					p.invoiceApprovalStatus,                                        \n" +
                "					(                                        \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN                                        \n" +
                "								'Approved'                                        \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN                                        \n" +
                "								'Pending'                                        \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN                                        \n" +
                "								'N/A'                                        \n" +
                "						END                                        \n" +
                "					) invoiceApprovalStatusValue,                                        \n" +
                "					p.invoiceApprovedBy,                                        \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,                                        \n" +
                "					p.invoiceApprovalDate,                                        \n" +
                "					p.invoiceApprovalComment,  \n" +
                "					p.internalRemark,  \n" +
                "					p.lockStatus,  \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "						when p.lockStatus = 'LC' then 'Locked'  \n" +
                "						else null end  \n" +
                "					) lockStatusValue,  \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "			FROM packing_slip_material_receive p  \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0                            \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0                            \n" +
                "            LEFT JOIN 	purchase_order_mst po ON po.poNumber = p.poNumber AND po.isDeleted = 0        \n" +
                "			left join (                            \n" +
                "							select 	a.refPackingSlipMaterialRecID,                            \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,                            \n" +
                "								sum(a.itemReceived) itemReceived,                                                      \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,                            \n" +
                "								sum(a.itemDisapproved) itemDisapproved,                            \n" +
                "								sum(a.approveLineCount) approveLineCount,                            \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,              \n" +
                "                                sum(discount) totalDiscount              \n" +
                "							from 	(                                                      \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,                                                       \n" +
                "										psm.packingSlipSerialNumber,                                                       \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,                                          \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,    \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/    \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,    \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,    \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,                            \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,                            \n" +
                "										extendedPrice,              \n" +
                "                                        discount              \n" +
                "									FROM 	packing_slip_material_receive_det psm                            \n" +
                "									WHERE 	psm.isDeleted = 0                            \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)                            \n" +
                "								) a                                                                \n" +
                "							group by a.refPackingSlipMaterialRecID                                                      \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id                                                                \n" +
                "				left join (                                                      \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,                                                                 \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,                                            \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,                                            \n" +
                "    									sum(get_totalSupplierInvoicePaidAmountById(ps.id)) totalPaidDebitCreditAmount                                            \n" +
                "							from 		packing_slip_material_receive ps                                                                \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID                                                                \n" +
                "								  where ps.receiptType in ('C','D')                            \n" +
                "									and ps.isDeleted = 0                            \n" +
                "									and pd.isDeleted = 0                            \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno                            \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id                            \n" +
                "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",                            \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),                                \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')\") ELSE \"\" END)                                                 \n" +
                "	);                                                            \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                        \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN                        \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.paymentTermsID in (', pPaymentTermsIds, ' )');                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN                        \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN                        \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"                        \n" +
                "				and exists (select 1                        \n" +
                "							  from packingslip_invoice_payment pm                        \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id                        \n" +
                "							 where pm.isDeleted = 0                        \n" +
                "							   and pm.isPaymentVoided = 0                        \n" +
                "							   and pm.refPaymentMode = 'P'                        \n" +
                "							   and pd.refPackingslipInvoiceID = p.id                        \n" +
                "							   and pm.paymentNumber \",                        \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END                        \n" +
                "                               ,\") \");                        \n" +
                "    END IF;                        \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;                        \n" +
                "	ELSE                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                        \n" +
                "		SET pWhereClause = '1=1' ;                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                        \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                        \n" +
                "	END IF;                \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'                 \n" +
                "												   or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");                \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN                \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'                \n" +
                "												   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");                \n" +
                "    END IF;                \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN                        \n" +
                "		IF pIsExactSearch = 1 THEN                        \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"                        \n" +
                "									AND (                        \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'                        \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'                        \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'                        \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'                        \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'                        \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'                        \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"                        \n" +
                "									  \" ) \"                        \n" +
                "						);                        \n" +
                "		ELSE                        \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"                        \n" +
                "									AND (                        \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'                        \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'                        \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'                        \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'                        \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'                        \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'                        \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"                        \n" +
                "									  \" ) \"                        \n" +
                "						);                        \n" +
                "		END IF;                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN                        \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (                        \n" +
                "				SELECT 1                        \n" +
                "				  FROM packing_slip_material_receive_det x                        \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0                        \n" +
                "			)                        \n" +
                "		\");                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                        \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;                        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                        \n" +
                "	ELSE                        \n" +
                "		SET rowNumWhere = '';                        \n" +
                "	END IF;                        \n" +
                "  \n" +
                "	/* to get total count of rows */                        \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );                        \n" +
                "    PREPARE query1 FROM @SQLStatement1;                        \n" +
                "    EXECUTE query1;                        \n" +
                "	DEALLOCATE PREPARE query1;                        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"                        \n" +
                "			SELECT 	c.*,                        \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,                        \n" +
                "				round(c.paidAmount,2) totalPaidAmount,                        \n" +
                "				round((c.totalExtendedAmount - c.paidAmount),2) paymentAmount,                        \n" +
                "				round((c.totalExtendedAmount - c.paidAmount),2) balanceToPayAmount,                                   \n" +
                "				round((c.totalPaidDebitCreditAmount+c.paidAmount),2) totalPaidAmountToDisableDelete                        \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c                        \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);                        \n" +
                "	PREPARE query2 FROM @SQLStatement2;                        \n" +
                "	EXECUTE query2;                        \n" +
                "	DEALLOCATE PREPARE query2;                        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->22-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4502,'2.00','V1','User Story 31223: Add Provision to Lock Supplier Transaction - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4502:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-04-2021 *********************************** */
                "drop procedure if exists `Sproc_InvoicePaymentVoidAndReIssue`;  \n" +
                "CREATE PROCEDURE `Sproc_InvoicePaymentVoidAndReIssue`(                 \n" +
                "	IN pSystemId VARCHAR(20),              \n" +
                "	IN pRefVoidPaymentId INT,                        \n" +
                "	IN pAccountReference VARCHAR(50),                        \n" +
                "	IN pPaymentType INT,                        \n" +
                "	IN pPaymentNumber VARCHAR(50),                        \n" +
                "	IN pBankAccountMasID INT,                        \n" +
                "	IN pBankAccountNo VARCHAR(50),                        \n" +
                "	IN pBankName VARCHAR(255),                        \n" +
                "	IN pPaymentDate DATE,                        \n" +
                "	IN pRemark VARCHAR(255),                        \n" +
                "	IN pPayToName VARCHAR(255),                        \n" +
                "	IN pPayToAddress VARCHAR(255),                        \n" +
                "	IN pVoidPaymentReason VARCHAR(255),            \n" +
                "	IN pRefPaymentModeOfInvPayment VARCHAR(2),                     \n" +
                "	IN pMfgcodeID INT,            \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,           \n" +
                "	IN pisCustomerZeroPayment TINYINT,                      \n" +
                "	IN pUserID INT,                        \n" +
                "	IN pRoleID INT                        \n" +
                ")  \n" +
                "BEGIN                          \n" +
                "	DECLARE vCount INT;                          \n" +
                "	DECLARE vCountExistsCheckNo INT;                          \n" +
                "	DECLARE vNewPaymentID INT;                          \n" +
                "	DECLARE vOldPaymentOrCheckNo VARCHAR(50);                          \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                            \n" +
                "BEGIN                            \n" +
                "	ROLLBACK;                            \n" +
                "	RESIGNAL;                            \n" +
                "END;                            \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                            \n" +
                "  BEGIN                            \n" +
                "	ROLLBACK;                            \n" +
                "	RESIGNAL;                            \n" +
                "END;                            \n" +
                "  \n" +
                "	/* pRefPaymentModeOfInvPayment >> P-Payable   R-Receivable */            \n" +
                "	SELECT 	COUNT(1)   INTO 	vCount                          \n" +
                "	FROM 	packingslip_invoice_payment                          \n" +
                "	WHERE 	id = pRefVoidPaymentId                          \n" +
                "	AND isPaymentVoided = 0                    \n" +
                "	AND refPaymentMode = pRefPaymentModeOfInvPayment ;                          \n" +
                "  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;	            \n" +
                "  \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'P') THEN            \n" +
                "		/*check duplicate check number validation*/                \n" +
                "		SELECT 	COUNT(1)  INTO 	vCountExistsCheckNo                        \n" +
                "		FROM 	packingslip_invoice_payment                        \n" +
                "		WHERE 	isdeleted = 0                        \n" +
                "		AND paymentNumber = pPaymentNumber                        \n" +
                "		AND bankAccountMasID = pBankAccountMasID            \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;                        \n" +
                "	 ELSEIF (pRefPaymentModeOfInvPayment = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN            \n" +
                "		/* check duplicate check number if confirmation not taken */              \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo                      \n" +
                "		FROM packingslip_invoice_payment                      \n" +
                "		WHERE refPaymentMode = pRefPaymentModeOfInvPayment             \n" +
                "		AND paymentNumber = pPaymentNumber                      \n" +
                "		AND mfgcodeID = pMfgcodeID             \n" +
                "		AND isdeleted = 0    ;            \n" +
                "	 END IF;               \n" +
                "  \n" +
                "  \n" +
                "	IF vCount = 1 AND vCountExistsCheckNo = 0 THEN                          \n" +
                "  \n" +
                "		UPDATE 	packingslip_invoice_payment                          \n" +
                "		SET 	voidPaymentReason = pVoidPaymentReason,                          \n" +
                "			isPaymentVoided = 1,                          \n" +
                "			updatedBy = pUserID,                          \n" +
                "			updateByRoleId = pRoleID,                        \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()                        \n" +
                "		WHERE 	id = pRefVoidPaymentId                          \n" +
                "		AND isDeleted = 0                    \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;           \n" +
                "  \n" +
                "  \n" +
                "		/*insert same records for new reissue payment transaction*/                \n" +
                "		INSERT INTO packingslip_invoice_payment                          \n" +
                "				(systemId, mfgcodeID, paymentNumber, paymentDate, paymentAmount, paymentType, accountReference, bankAccountMasID,                          \n" +
                "				bankAccountNo, bankName, payToName, payToAddress, remark, createdBy, createByRoleId,                          \n" +
                "				updatedBy, updateByRoleId, refVoidedPaymentNumber, refVoidedPaymentId, refPaymentMode,                  \n" +
                "				billToName, billToAddress, isZeroPayment,           \n" +
                "				lockStatus)                          \n" +
                "		SELECT 	pSystemId, mfgcodeID, pPaymentNumber, pPaymentDate, paymentAmount, pPaymentType, pAccountReference, pBankAccountMasID,                          \n" +
                "				pBankAccountNo, pBankName, pPayToName, pPayToAddress, pRemark, pUserID, pRoleID,                          \n" +
                "				pUserID, pRoleID, paymentNumber, id, refPaymentMode,                  \n" +
                "				billToName, billToAddress, isZeroPayment,           \n" +
                "				(CASE WHEN pRefPaymentModeOfInvPayment = 'R' THEN           \n" +
                "							(CASE WHEN lockStatus = 'LC' THEN 'RL' ELSE lockStatus END)  \n" +
                "					  WHEN pRefPaymentModeOfInvPayment = 'P' THEN  \n" +
                "							'RL'  \n" +
                "					 ELSE NULL END)                 \n" +
                "		FROM 	packingslip_invoice_payment                          \n" +
                "		WHERE 	id = pRefVoidPaymentId                          \n" +
                "		AND isDeleted = 0                    \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;                          \n" +
                "  \n" +
                "		SET vNewPaymentID = LAST_INSERT_ID();                          \n" +
                "  \n" +
                "		/*update payment void flag in detail table*/                \n" +
                "		UPDATE 	packingslip_invoice_payment_det                \n" +
                "		SET 	isPaymentVoided = 1,                \n" +
                "			updatedBy = pUserID,                \n" +
                "			updateByRoleId = pRoleID,                \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()                \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId                \n" +
                "		AND isDeleted = 0;                \n" +
                "  \n" +
                "		/*insert same records for new reissue payment detail transaction*/                \n" +
                "		INSERT INTO packingslip_invoice_payment_det                          \n" +
                "				(refPayementid, refPackingslipInvoiceID, createdBy, createByRoleId, updatedBy, updateByRoleId, paymentAmount,             \n" +
                "				isPaymentVoided, refCustPackingslipInvoiceID)                          \n" +
                "		SELECT 	vNewPaymentID, refPackingslipInvoiceID, pUserID, pRoleID,                           \n" +
                "			pUserID, pRoleID, paymentAmount,             \n" +
                "			FALSE, refCustPackingslipInvoiceID	              \n" +
                "		FROM 	packingslip_invoice_payment_det                          \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId                          \n" +
                "		AND isDeleted = 0;                \n" +
                "  \n" +
                "		SELECT vNewPaymentID refPayementid;                          \n" +
                "	ELSE                          \n" +
                "		IF vCountExistsCheckNo != 0 THEN                        \n" +
                "			SELECT 'DUPLICATE_CHECKNO' AS message;                        \n" +
                "		ELSEIF vCount = 0 THEN            \n" +
                "			IF (pRefPaymentModeOfInvPayment = 'R' AND (SELECT COUNT(1) FROM packingslip_invoice_payment WHERE id = pRefVoidPaymentId              \n" +
                "									AND isPaymentVoided = 1  AND refPaymentMode = pRefPaymentModeOfInvPayment) > 0) THEN            \n" +
                "				SELECT 'ALREADY_VOIDED' AS message;            \n" +
                "			ELSE            \n" +
                "				SELECT 'NOT_FOUND' AS message;              \n" +
                "			END IF;	               \n" +
                "		ELSE                        \n" +
                "			SELECT 'NOT_FOUND' AS message;                        \n" +
                "		END IF;                        \n" +
                "	END IF;                          \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_RetrieveSupplierInvoicePayment`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePayment`(              \n" +
                "	IN ppageIndex INT,              \n" +
                "	IN precordPerPage INT,              \n" +
                "	IN pOrderBy VARCHAR(255),              \n" +
                "	IN pWhereClause VARCHAR(16383),              \n" +
                "	IN pSupplierIDs VARCHAR(16383),              \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),              \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),              \n" +
                "    IN pExactPaymentNumberSearch TINYINT,      \n" +
                "	IN pPaymentNumber VARCHAR(10),              \n" +
                "    IN pInvoiceNumber VARCHAR(50),              \n" +
                "	IN pExactPaymentAmountSearch TINYINT,      \n" +
                "	IN pAmount VARCHAR(50),              \n" +
                "	IN pFromDate DATE,              \n" +
                "	IN pToDate DATE      \n" +
                ")  \n" +
                "BEGIN              \n" +
                "	DECLARE pOffset INT;              \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;              \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);              \n" +
                "	DECLARE v_TimeZone VARCHAR(50);              \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);              \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;              \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;              \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';              \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN              \n" +
                "  		SET pWhereClause = '1=1' ;              \n" +
                "	END IF;                                           \n" +
                "  \n" +
                "	IF(pSupplierIDs IS NOT NULL AND pSupplierIDs != '' ) THEN              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pSupplierIDs,')');              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');              \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');              \n" +
                "	END IF;	                              \n" +
                "  \n" +
                "	IF(pPaymentNumber IS NOT NULL) THEN              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');              \n" +
                "	END IF;	                                   \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN              \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND          \n" +
                "			EXISTS (select 1          \n" +
                "					   from packing_slip_material_receive psd          \n" +
                "					   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id          \n" +
                "					  where psd.isDeleted = 0          \n" +
                "						and pdet.refPayementid = inv.id          \n" +
                "						AND psd.invoiceNumber = \"',pInvoiceNumber,'\"          \n" +
                "				)'            \n" +
                "		);              \n" +
                "	END IF;	                                   \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');              \n" +
                "	END IF;	                                       \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');              \n" +
                "	ELSEIF (pFromDate IS NOT NULL AND pToDate IS NULL) THEN                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');                                        \n" +
                "	ELSEIF (pToDate IS NOT NULL AND pFromDate IS NULL) THEN                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');                                        \n" +
                "	END IF;                                       \n" +
                "  \n" +
                "	SET @Sproc_Sproc_RetrieveSupplierInvoicePayment = CONCAT(\"              \n" +
                "		SELECT		inv.id,          \n" +
                "				inv.systemId,        \n" +
                "				inv.mfgcodeID,              \n" +
                "				fun_getMfgCodeByID(inv.mfgcodeID) supplier,            \n" +
                "				fun_getMfgCodeAndNameByID(inv.mfgcodeID) supplierCodeName,              \n" +
                "				inv.isPaymentVoided,                      \n" +
                "				case 	when inv.isPaymentVoided = 0 then                      \n" +
                "						'Paid'                      \n" +
                "					else 	            \n" +
                "						'Voided'             \n" +
                "				end isPaymentVoidedConvertedValue,                      \n" +
                "				inv.voidPaymentReason,                      \n" +
                "				inv.refVoidedPaymentNumber,  \n" +
                "                (select c.lockStatus from packingslip_invoice_payment c   \n" +
                "					where c.refPaymentMode = 'P' and c.id = inv.refVoidedPaymentId) refVoidedPaymentLockStatus,  \n" +
                "				inv.paymentNumber,                                        \n" +
                "				inv.bankName,                                        \n" +
                "				inv.bankAccountNo,                                        \n" +
                "				inv.paymentType,                                        \n" +
                "				inv.bankAccountMasID,                                        \n" +
                "				gc.gencCategoryName paymentMethod,                                  \n" +
                "				gc.systemGenerated systemGeneratedPaymentMethod,                                  \n" +
                "				inv.paymentDate,                                  \n" +
                "				invdet.invoiceAmount,                                  \n" +
                "				inv.paymentAmount,                                  \n" +
                "				inv.payToAddress payToAddress,                                                 \n" +
                "				inv.payToName,                \n" +
                "				inv.accountReference,                                  \n" +
                "				inv.remark,                                  \n" +
                "				fun_getUserNameByID(inv.createdBy) createdby,                                                              \n" +
                "				fun_getUserNameByID(inv.updatedBy) updatedby,                                              \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,	                                            \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,                                              \n" +
                "				fun_getRoleByID(inv.updateByRoleId) updatedbyRole,                                         \n" +
                "				fun_getRoleByID(inv.createByRoleId) createdbyRole,  \n" +
                "				inv.lockStatus,  \n" +
                "				(case when inv.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "					when inv.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "					when inv.lockStatus = 'LC' then 'Locked'  \n" +
                "					else null end  \n" +
                "				) lockStatusValue,  \n" +
                "				fun_getUserNameByID(inv.lockedBy) lockByName,  \n" +
                "				fun_getRoleByID(inv.lockedByRoleId) lockedByRoleName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "		FROM		packingslip_invoice_payment inv                                   \n" +
                "		INNER JOIN 	genericcategory gc ON inv.paymentType = gc.gencCategoryID                       \n" +
                "		INNER JOIN 	(                   \n" +
                "					SELECT 		pid.refPayementid,	SUM(psmd.extendedPrice) invoiceAmount                  \n" +
                "					FROM 		packingslip_invoice_payment_det pid                  \n" +
                "					LEFT JOIN 	packing_slip_material_receive_det psmd ON psmd.refPackingSlipMaterialRecID = pid.refPackingslipInvoiceID AND psmd.isDeleted = 0                         \n" +
                "					WHERE 		pid.isDeleted = 0             \n" +
                "					GROUP BY 	pid.refPayementid                   \n" +
                "				) invdet ON invdet.refPayementid = inv.id                   \n" +
                "		WHERE 		inv.isDeleted = 0             \n" +
                "					AND inv.refPaymentMode = 'P'             \n" +
                "					AND gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause            \n" +
                "	);                                          \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN              \n" +
                "		SET pOrderBy = \" ORDER BY paymentDate desc, isPaymentVoided asc \";              \n" +
                "	ELSE              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN              \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;              \n" +
                "	ELSE              \n" +
                "		SET rowNumWhere = '';              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	/* to get total count of rows */              \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c where 1=1 and \", pWhereClause);              \n" +
                "        PREPARE query1 FROM @SQLStatement1;              \n" +
                "	EXECUTE query1;              \n" +
                "	DEALLOCATE PREPARE query1;              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);              \n" +
                "	PREPARE query2 FROM @SQLStatement2;              \n" +
                "	EXECUTE query2;              \n" +
                "	DEALLOCATE PREPARE query2;              \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->22-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4503,'2.00','V1','User Story 31223: Add Provision to Lock Supplier Transaction - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4503:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-04-2021 *********************************** */
                "drop procedure if exists `Sproc_RetriveSupplierRMAList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierRMAList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pMfgCodeIds VARCHAR(16383),  \n" +
                "	IN pAdvanceSearchNumbers VARCHAR(50),  \n" +
                "	IN pSearchType VARCHAR(10),  \n" +
                "	IN pMfrPnId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');                    \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF (pAdvanceSearchNumbers IS NOT NULL) THEN              \n" +
                "		IF (pSearchType = 'contains') THEN              \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (                     \n" +
                "												rmaNumber LIKE '%\", pAdvanceSearchNumbers, \"%'                     \n" +
                "											OR 	packingSlipNumber LIKE '%\", pAdvanceSearchNumbers, \"%'                      \n" +
                "											OR 	refCreditMemoNumber LIKE '%\", pAdvanceSearchNumbers, \"%'\"                      \n" +
                "										  \" )                     \n" +
                "									\");                      \n" +
                "		ELSE              \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (                     \n" +
                "												rmaNumber = '\", pAdvanceSearchNumbers, \"'                     \n" +
                "											OR 	packingSlipNumber = '\", pAdvanceSearchNumbers, \"'                      \n" +
                "											OR 	refCreditMemoNumber = '\", pAdvanceSearchNumbers, \"'\"                      \n" +
                "										  \" )                     \n" +
                "									\");                      \n" +
                "		END IF;              \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN          \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (          \n" +
                "				SELECT 	refPackingSlipMaterialRecID          \n" +
                "				FROM 	packing_slip_material_receive_det          \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0          \n" +
                "			)          \n" +
                "		\");          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierRMAList = CONCAT(\"               \n" +
                "		SELECT	*              \n" +
                "		FROM 	(              \n" +
                "				SELECT 		p.id,              \n" +
                "						p.systemId,      \n" +
                "						p.receiptType,                          \n" +
                "						p.packingSlipModeStatus rmaModeStatus,              \n" +
                "						(                  \n" +
                "							CASE                  \n" +
                "								WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'                  \n" +
                "								WHEN p.packingSlipModeStatus = 'P' THEN 'Publish'              \n" +
                "								WHEN p.packingSlipModeStatus = 'S' THEN 'Shipped'                  \n" +
                "								ELSE NULL                  \n" +
                "							END                  \n" +
                "						) rmaModeStatusValue,                \n" +
                "						p.`status`,              \n" +
                "						(	              \n" +
                "							CASE                  \n" +
                "								WHEN p.status = 'D' THEN 'Draft'                  \n" +
                "								WHEN p.status = 'WS' THEN 'Waiting For Shipment'                  \n" +
                "								WHEN p.status = 'WC' THEN 'Waiting for Credit Memo'              \n" +
                "								WHEN p.status = 'CR' THEN 'Credit Memo Received'                  \n" +
                "								WHEN p.status = 'A' THEN 'Approved to Pay'                  \n" +
                "								WHEN p.status = 'P' THEN 'Paid'                  \n" +
                "								ELSE NULL                  \n" +
                "							END                  \n" +
                "						) statusValue,                \n" +
                "						p.mfgCodeID,              \n" +
                "						fun_getMfgCodeByID(p.mfgCodeID) supplierCode,          \n" +
                "						fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCodeName,            \n" +
                "						p.poNumber rmaNumber,              \n" +
                "						p.poDate rmaDate,              \n" +
                "						p.packingSlipNumber,                          \n" +
                "						p.packingSlipDate,                          \n" +
                "						p.receiptDate shippedDate,              \n" +
                "						IFNULL(g.cnt,0) rmaDocCount,             \n" +
                "						psm.totalDetailLine itemReturn,              \n" +
                "						ps.id refCreditMemoId,            \n" +
                "						ps.creditMemoNumber refCreditMemoNumber,  \n" +
                "                        ps.lockStatus  refCreditMemoLockStatus,  \n" +
                "						ps.creditMemoDate refCreditMemoDate,               \n" +
                "						p.remark,              \n" +
                "						p.internalRemark,          \n" +
                "						p.shippingMethodId,              \n" +
                "						fun_getGenericCategoryCodeNameByID(p.shippingMethodId) shippingMethod,              \n" +
                "						p.carrierId,              \n" +
                "						fun_getGenericCategoryCodeNameByID(p.carrierId) carrier,              \n" +
                "						p.carrierAccountNumber,              \n" +
                "						p.shippingInsurance,              \n" +
                "						(              \n" +
                "							CASE              \n" +
                "								WHEN p.shippingInsurance = 1 THEN 'Yes'              \n" +
                "								WHEN p.shippingInsurance = 0 THEN 'No'              \n" +
                "								ELSE NULL               \n" +
                "							END              \n" +
                "						) shippingInsuranceValue,              \n" +
                "						p.rmaShippingAddress,              \n" +
                "						fun_getUserNameByID(p.updatedBy) updatedByName,                                       \n" +
                "						fun_getUserNameByID(p.createdBy)  createdByName,                                             \n" +
                "						fun_getRoleByID(p.createByRoleId) createdbyRole,                            \n" +
                "						fun_getRoleByID(p.updateByRoleId) updatedbyRole,                            \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                            \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                        p.lockStatus,  \n" +
                "						(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "							when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "							when p.lockStatus = 'LC' then 'Locked'  \n" +
                "							else null end  \n" +
                "						) lockStatusValue,  \n" +
                "						fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "						fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "				FROM 		packing_slip_material_receive p              \n" +
                "				LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0              \n" +
                "				LEFT JOIN 	(                  \n" +
                "							SELECT 		refPackingSlipMaterialRecID, COUNT(1) totalDetailLine                 \n" +
                "							FROM 		packing_slip_material_receive_det psm                   \n" +
                "							WHERE 		isDeleted = 0                   \n" +
                "							GROUP BY 	refPackingSlipMaterialRecID                  \n" +
                "						) psm ON psm.refPackingSlipMaterialRecID = p.id                  \n" +
                "				LEFT JOIN vu_genericfilescount g ON g.refTransID = p.id         \n" +
                "						AND	g.gencFileOwnerType = 'supplier_rma' AND g.refTransID = p.id                     \n" +
                "				WHERE 		p.receiptType = 'R' AND p.isDeleted = 0              \n" +
                "			) AS a              \n" +
                "		WHERE \", v_advanceFilterWhereClause              \n" +
                "	);               \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;                                                          \n" +
                "	ELSE                                                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                          \n" +
                "	END IF;                \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                          \n" +
                "		SET pWhereClause = ' 1=1 ' ;                                                          \n" +
                "	END IF;                      \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                                           \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage; 		                                                          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                          \n" +
                "	ELSE	                                                          \n" +
                "		SET rowNumWhere = '';                                                          \n" +
                "	END IF;               \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetriveSupplierRMAList,\" ) c where 1=1 AND \", pWhereClause);                               \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                            \n" +
                "	EXECUTE query1;                                            \n" +
                "	DEALLOCATE PREPARE query1;              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetriveSupplierRMAList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                            \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                            \n" +
                "	EXECUTE query2;                                            \n" +
                "	DEALLOCATE PREPARE query2;              \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->22-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4504,'2.00','V1','User Story 31223: Add Provision to Lock Supplier Transaction - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4504:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-04-2021 *********************************** */
                "ALTER TABLE `component`   \n" +
                "ADD COLUMN `umidSPQ` DECIMAL(18,6) NULL,  \n" +
                "ADD COLUMN `internalReference` VARCHAR(50) NULL;  \n" +
                /* **************************** Add Script Version -> 23-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4505,'2.00','V1',' Update Component UmidSQP and Internal ref Field - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4505:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-04-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialReceiveDetStock`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveDetStock`(                     \n" +
                "	IN pRMADetailLineId INT,    \n" +
                "	IN pPackingSlipId INT,        \n" +
                "	IN pPackingSlipDetailId INT,        \n" +
                "	IN pPartId INT,        \n" +
                "	IN pPackagingId INT        \n" +
                ")  \n" +
                "BEGIN                          \n" +
                "	SELECT 		MAX(pds.id) stockId,        \n" +
                "			'PU' AS `type`,        \n" +
                "			'Pending UMID' AS `typeValue`,         \n" +
                "			NULL umidId,        \n" +
                "			NULL umid,        \n" +
                "			vu.PartId partId,         \n" +
                "			vu.packagingID packagingId,        \n" +
                "			NULL receiveMaterialType,        \n" +
                "			SUM(pd.receivedQty) receivedQty,        \n" +
                "			SUM(pd.receivedQty - IFNULL(pd.umidCreatedQty, 0) - IFNULL(vu.returnQty,0)) availableQty,        \n" +
                "			SUM(IFNULL(pds.qty,0)) shipmentQty,        \n" +
                "			vu.BinID binId,        \n" +
                "			b.name binName,        \n" +
                "			b.WarehouseID,        \n" +
                "			fun_getWarehouseNameByID(b.WarehouseID) warehouseName,        \n" +
                "			fun_getDepartmentNameByBinID(b.id) parentWarehouseName        \n" +
                "	FROM 		vu_umid_creation_pending vu        \n" +
                "	LEFT JOIN 	(    \n" +
                "				SELECT 		refPackingSlipMaterialRecID, SUM(receivedQty) receivedQty, SUM(umidCreatedQty) umidCreatedQty, packagingID, partID    \n" +
                "				FROM 		packing_slip_material_receive_det    \n" +
                "				WHERE 		isDeleted = 0    \n" +
                "				GROUP BY  	refPackingSlipMaterialRecID, packagingID, partID    \n" +
                "			) pd ON pd.refPackingSlipMaterialRecID = vu.packingSlipID AND pd.packagingID = vu.packagingID AND pd.partID = vu.PartId    \n" +
                "	LEFT JOIN 	packing_slip_material_receive_det_stock pds ON pd.refPackingSlipMaterialRecID = pds.refPackingSlipId     \n" +
                "						AND pds.refPackingSlipId = vu.packingSlipID     \n" +
                "						AND pds.packagingId = vu.packagingID     \n" +
                "						AND pds.partId = vu.PartId     \n" +
                "						AND pds.isDeleted = 0     \n" +
                "						AND pds.type = 'PU'     \n" +
                "						AND (CASE WHEN pRMADetailLineId IS NOT NULL THEN pds.refRMADetailId = pRMADetailLineId ELSE pds.refRMADetailId IS NULL END)       \n" +
                "	LEFT JOIN 	binmst b ON b.id = vu.BinID        \n" +
                "	WHERE 		vu.packingSlipID = pPackingSlipId        \n" +
                "				AND vu.packagingID = pPackagingId        \n" +
                "				AND vu.partID = pPartId        \n" +
                "				AND b.isDeleted = 0        \n" +
                "	GROUP BY 	typeValue, umidId, umid, partId, packagingId, receiveMaterialType,binId, binName, WarehouseID, warehouseName, parentWarehouseName        \n" +
                "	UNION        \n" +
                "	SELECT 		cp.id stockId,        \n" +
                "			cp.type AS `type`,        \n" +
                "			'UMID' AS `typeValue`,        \n" +
                "			c.id umidId,        \n" +
                "			c.uid umid,        \n" +
                "			c.refcompid partId,        \n" +
                "			c.packaging packagingId,         \n" +
                "			c.receiveMaterialType,        \n" +
                "			pd.receivedQty receivedQty,        \n" +
                "			c.pkgQty availableQty,        \n" +
                "			cp.qty shipmentQty,        \n" +
                "			c.binID binId,        \n" +
                "			b.name binName,        \n" +
                "			b.WarehouseID,        \n" +
                "			fun_getWarehouseNameByID(b.WarehouseID) warehouseName,        \n" +
                "			fun_getDepartmentNameByBinID(b.id) parentWarehouseName        \n" +
                "	FROM 		packing_slip_material_receive_det_stock cp        \n" +
                "	INNER JOIN 	component_sid_stock c ON c.id = cp.refSidId        \n" +
                "	INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetId         \n" +
                "	INNER JOIN 	binmst b ON b.id = c.binId        \n" +
                "	WHERE 		cp.refPackingSlipDetId = pPackingSlipDetailId      and cp.refRMADetailid = pRMADetailLineId  \n" +
                "				AND cp.type = 'U'        \n" +
                "				AND cp.isDeleted = 0        \n" +
                "				AND c.isDeleted = 0        \n" +
                "				AND pd.isDeleted = 0        \n" +
                "				AND b.isDeleted = 0        \n" +
                "	UNION        \n" +
                "	SELECT 		NULL stockId,        \n" +
                "			'U' AS `type`,        \n" +
                "			'UMID' AS `typeValue`,        \n" +
                "			c.id umidId,        \n" +
                "			c.uid umid,        \n" +
                "			c.refcompid partId,        \n" +
                "			c.packaging packagingId,         \n" +
                "			c.receiveMaterialType,        \n" +
                "			pd.receivedQty receivedQty,        \n" +
                "			c.pkgQty availableQty,        \n" +
                "			0 shipmentQty,        \n" +
                "			c.binID binId,        \n" +
                "			b.name binName,        \n" +
                "			b.WarehouseID,        \n" +
                "			fun_getWarehouseNameByID(b.WarehouseID) warehouseName,        \n" +
                "			fun_getDepartmentNameByBinID(b.id) parentWarehouseName        \n" +
                "	FROM 		component_sid_stock_packing_detail cp        \n" +
                "	INNER JOIN 	component_sid_stock c ON c.id = cp.refComponentSidStockID        \n" +
                "	INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetailID         \n" +
                "	INNER JOIN 	binmst b ON b.id = c.binID        \n" +
                "	WHERE 		c.pkgQty > 0         \n" +
                "				AND cp.refPackingSlipDetailID = pPackingSlipDetailId        \n" +
                "				AND cp.isDeleted = 0        \n" +
                "				AND c.isDeleted = 0        \n" +
                "				AND pd.isDeleted = 0        \n" +
                "				AND b.isDeleted = 0;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->06-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4506,'2.00','V1',' Change SP Sproc_RetrivePackingSlipMaterialReceiveDetStock related RMA Stock issue  - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4506:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-04-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitAllocationLineItemsForExport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitAllocationLineItemsForExport`(  \n" +
                "IN pPartID INT,  \n" +
                "IN pRefSalesOrderDetID INT,         \n" +
                "IN pIsConsolidated TINYINT,  \n" +
                "IN pKitQty INT,  \n" +
                "IN pCustomerId INT      \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	IF (pIsConsolidated = 0) THEN  \n" +
                "		SELECT * FROM  \n" +
                "			(SELECT  z.id AS id,	 z.refSalesOrderDetID,	 z.mfgPNID,	 z.partid,	 z.lineID AS _lineID,	z.cust_lineID,	  \n" +
                "					(CASE  \n" +
                "						WHEN z.custPNID IS NULL THEN NULL  \n" +
                "						ELSE FUN_GETMFGPNBYID(z.custPNID)  \n" +
                "					END) custPN, z.restrictUseInBOMExcludingAliasStep,  \n" +
                "					z.isGoodPart, z.restrictPackagingUsePermanently, z.restrictPackagingUseWithpermission, z.restrictUsePermanently, z.restrictUSEwithpermission,  \n" +
                "					z.customerRev,	 z.customerDescription,	 z.qpa,	 z.refDesig,	FUN_GETUOMBYID(z.uomID) AS uom,  \n" +
                "					(CASE  \n" +
                "						WHEN z.isInstall = 1 THEN 'TRUE'  \n" +
                "						ELSE 'FALSE'  \n" +
                "					END) AS isInstall,  \n" +
                "					(CASE  \n" +
                "						WHEN z.isPurchase = 1 THEN 'TRUE'  \n" +
                "						ELSE 'FALSE'  \n" +
                "					END) AS isPurchase,  \n" +
                "					z.numOfRows,	z.numOfPosition,	z.dnpQty,	z.dnpDesig,  \n" +
                "					(CASE  \n" +
                "						WHEN z.substitutesAllow = 3 THEN 'Yes with Customer Approval'  \n" +
                "						WHEN z.substitutesAllow = 2 THEN 'No'  \n" +
                "						ELSE ''  \n" +
                "					END) AS substitutesAllow,  \n" +
                "					(CASE  \n" +
                "						WHEN z.isBuyDNPQty = 'Y' THEN 'YES'  \n" +
                "						WHEN z.isBuyDNPQty = 'C' THEN 'Customer Consigned'  \n" +
                "						WHEN z.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'  \n" +
                "						ELSE 'NO'  \n" +
                "					END) AS isBuyDNPQty,  \n" +
                "					(CASE  \n" +
                "						WHEN z.programingStatus = 1 THEN 'Pre-Assy'  \n" +
                "						WHEN z.programingStatus = 2 THEN 'Post-Assy'  \n" +
                "						WHEN z.programingStatus = 3 THEN 'Cust will program'  \n" +
                "						WHEN z.programingStatus = 4 THEN 'Pre-Programmed'  \n" +
                "						ELSE 'N/A'  \n" +
                "					END) AS programingStatus,  \n" +
                "					FUN_GETMFGCODEBYID(z.mfgCodeID) AS mfgCode,		z.mfgPN,	z.customerPartDesc,	z.description AS description,  \n" +
                "					z.allocatedQty,		z.allocatedUnit,	z.allocatedPins,  \n" +
                "					(CASE  \n" +
                "						WHEN z.uomMismatchedStep = 0 THEN 0  \n" +
                "						ELSE (z.qpa * IFNULL(pKitQty, 0))  \n" +
                "					END) requiredQtyBuild,  \n" +
                "					(CASE  \n" +
                "						WHEN  \n" +
                "							(z.uomMismatchedStep = 0  \n" +
                "								OR z.connecterTypeID != - 2)  \n" +
                "						THEN  \n" +
                "							0  \n" +
                "						ELSE (z.qpa * IFNULL(pKitQty, 0) * IFNULL(z.numOfPosition, 0))  \n" +
                "					END) requirePinsBuild,  \n" +
                "					(CASE  \n" +
                "						WHEN  \n" +
                "							z.uomMismatchedStep = 0  \n" +
                "								OR z.isNotRequiredKitAllocation = 1  \n" +
                "						THEN  \n" +
                "							0  \n" +
                "						ELSE CASE  \n" +
                "							WHEN  \n" +
                "								z.connecterTypeID = - 2  \n" +
                "							THEN  \n" +
                "								CASE  \n" +
                "									WHEN (((IFNULL(z.qpa, 0) * pKitQty * IFNULL(z.numOfPosition, 0)) - (z.allocatedPins + z.consumePin)) < 0) THEN 0  \n" +
                "									ELSE ((IFNULL(z.qpa, 0) * pKitQty * IFNULL(z.numOfPosition, 0)) - (z.allocatedPins + + z.consumePin))  \n" +
                "								END  \n" +
                "							ELSE CASE  \n" +
                "								WHEN (((IFNULL(z.qpa, 0) * pKitQty) - (z.allocatedUnit + z.consumeUnits)) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(z.qpa, 0) * pKitQty) - (z.allocatedUnit + z.consumeUnits))  \n" +
                "							END  \n" +
                "						END  \n" +
                "					END) shortagePerBuild,  \n" +
                "					SUM(IFNULL(FUN_CONVERTUOM(d.uom, z.uomID, IF(d.customerConsign = 0, IFNULL(d.availableStock, 0), 0)), 0)) availabelStock,  \n" +
                "					SUM(IFNULL(FUN_CONVERTUOM(d.uom, z.uomID, IF(d.customerConsign = 1  \n" +
                "						AND d.customerID = pCustomerId, IFNULL(d.availableStock, 0), 0)), 0)) availabelStockCustomerConsign  \n" +
                "			FROM  \n" +
                "				(SELECT l.id AS id,		l.refSalesOrderDetID,	al.id AS rfqLineItemsAlternateID,	l.partID AS partid,		l.lineID,  \n" +
                "					l.cust_lineID,		l.custPN,		l.custPNID,		l.customerRev,	l.customerDescription,	l.refDesig,		l.numOfPosition,  \n" +
                "					l.programingStatus,		l.substitutesAllow,		IFNULL(d.mfgPN, c.mfgPN) AS mfgPN,	l.uomID,  IFNULL(d.isGoodPart, c.isGoodPart) isGoodPart,   \n" +
                "					IFNULL(d.restrictPackagingUseWithpermission, c.restrictPackagingUseWithpermission) restrictPackagingUseWithpermission,    \n" +
                "					IFNULL(d.restrictPackagingUsePermanently, c.restrictPackagingUsePermanently) restrictPackagingUsePermanently, 	al.restrictUseInBOMExcludingAliasStep,  \n" +
                "					IFNULL(d.restrictUsePermanently, c.restrictUsePermanently) restrictUsePermanently, IFNULL(d.restrictUSEwithpermission, c.restrictUSEwithpermission) restrictUSEwithpermission,  \n" +
                "					CONCAT(l.description, '  ', al.description) AS description,		l.isInstall,	l.isPurchase,	l.dnpQty,	l.dnpDesig,  \n" +
                "					l.isBuyDNPQty,		l.numOfRows,	al.uomMismatchedStep,	l.customerPartDesc,		l.isNotRequiredKitAllocation,  \n" +
                "					IFNULL(d.id, c.id) AS mfgPNID,	IFNULL(d.mfgcodeID, c.mfgcodeID) AS mfgCodeID,	IFNULL(d.uom, c.uom) AS uom, c.connecterTypeID,  \n" +
                "					IFNULL(d.noOfRows, c.noOfRows) AS noOfRows,		IFNULL(ka.allocatedQty, 0) allocatedQty,	IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "					IFNULL(ka.allocatedPins, 0) allocatedPins,	IFNULL(ka.consumePin, 0) consumePin,	IFNULL(ka.consumeUnits, 0) consumeUnits,	IFNULL(ka.consumeQty, 0) consumeQty,  \n" +
                "					(CASE  \n" +
                "						WHEN  \n" +
                "							l.isPurchase = 1 OR l.isInstall = 1  \n" +
                "						THEN  \n" +
                "							(IFNULL(l.qpa, 0) + IF(l.isBuyDNPQty = 'Y'  \n" +
                "								OR l.isBuyDNPQty = 'P'  \n" +
                "								OR l.isBuyDNPQty = 'C', IFNULL(l.dnpQty, 0), 0))  \n" +
                "						ELSE (IF(l.isBuyDNPQty = 'Y'  \n" +
                "							OR l.isBuyDNPQty = 'P'  \n" +
                "							OR l.isBuyDNPQty = 'C', IFNULL(l.dnpQty, 0), 0))  \n" +
                "					END) AS qpa  \n" +
                "			FROM  \n" +
                "				kit_allocation_lineitems l  \n" +
                "			JOIN kit_allocation_lineitems_alternatepart al ON l.id = al.refKitAllocationLineItemId AND l.isDeleted = 0 AND al.isDeleted = 0 AND al.mfgPNID IS NOT NULL  \n" +
                "			JOIN component c ON al.mfgPNID = c.id  \n" +
                "			LEFT JOIN component d ON c.packaginggroupID = d.packaginggroupID  \n" +
                "			LEFT OUTER JOIN vu_kit_allocation_summary ka ON al.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "				AND al.partID = ka.assyID  \n" +
                "				AND al.refRfqLineitem = ka.refBOMLineID  \n" +
                "				AND NOT EXISTS( SELECT  1 FROM  \n" +
                "					kit_allocation_lineitems_alternatepart `x`  \n" +
                "				WHERE x.refRfqLineitem = al.refRfqLineitem AND x.mfgPNID = d.id AND d.id <> c.id AND x.isDeleted = 0)  \n" +
                "			WHERE  \n" +
                "				l.partID = pPartID  \n" +
                "					AND l.refSalesOrderDetID = pRefSalesOrderDetID) z  \n" +
                "			LEFT JOIN vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, mfgPNID)  \n" +
                "			GROUP BY z.id , z.rfqLineItemsAlternateID , z.refSalesOrderDetID , z.mfgPNID , z.partid , z.lineID , z.cust_lineID , z.custPN , z.customerRev ,  \n" +
                "					z.isGoodPart, z.restrictPackagingUsePermanently, z.restrictPackagingUseWithpermission, z.restrictUsePermanently, z.restrictUSEwithpermission, z.restrictUseInBOMExcludingAliasStep,  \n" +
                "                    z.customerDescription , z.qpa , z.refDesig , z.uomID , z.isInstall , z.isPurchase , z.numOfRows , z.customerPartDesc , z.numOfPosition ,   \n" +
                "					z.isNotRequiredKitAllocation , z.dnpQty , z.dnpDesig , z.isBuyDNPQty , z.programingStatus , z.substitutesAllow,   \n" +
                "					z.mfgCodeID , z.mfgPN , z.noOfRows , z.mfgPNID , z.description) a;  \n" +
                "	ELSE  \n" +
                "  \n" +
                "        # Create Temp Table to Get partID from bifurcate consolidated MFR IDs - consolidatedMfgPNIDs  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_consolidate_Line_alternateparts;                                                                \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_consolidate_Line_alternateparts AS  \n" +
                "		SELECT  id, refSalesOrderDetid, rfqLineItemsId, consolidatedLineItemIDs,isAssembly,isDeleted,  \n" +
                "		SUBSTRING_INDEX(SUBSTRING_INDEX(a.consolidatedMfgPNIDs, ',', numbers.n), ',', -1) partid  \n" +
                "			FROM (select 1 n union all  \n" +
                "				  select 2 union all   \n" +
                "				  select 3 union all  \n" +
                "				  select 4 union all   \n" +
                "				  select 5 union all  \n" +
                "				  select 6 union all  \n" +
                "				  select 7 union all  \n" +
                "				  select 8 union all  \n" +
                "				  select 9 union all  \n" +
                "				  select 10 union all  \n" +
                "				  select 11 union all  \n" +
                "				  select 12 union all   \n" +
                "				  select 13 union all  \n" +
                "				  select 14 union all   \n" +
                "				  select 15 union all  \n" +
                "				  select 16 union all  \n" +
                "				  select 17 union all  \n" +
                "				  select 18 union all  \n" +
                "				  select 19 union all  \n" +
                "				  select 20 union all  \n" +
                "				  select 21 union all  \n" +
                "				  select 22 union all   \n" +
                "				  select 23 union all  \n" +
                "				  select 24 union all   \n" +
                "				  select 25  \n" +
                "				  ) numbers INNER JOIN  kit_allocation_consolidate_line_detail a   \n" +
                "			   on CHAR_LENGTH(a.consolidatedMfgPNIDs)  \n" +
                "				 -CHAR_LENGTH(REPLACE(a.consolidatedMfgPNIDs, ',', ''))>=numbers.n-1  \n" +
                "			 WHERE refsalesorderdetid = 117 AND isAssembly = 0 AND isDeleted = 0  \n" +
                "			 ORDER BY id, n;  \n" +
                "  \n" +
                "			SELECT * FROM  \n" +
                "				(SELECT c.id,	 refSalesOrderDetID,	partid,		_lineID,	  \n" +
                "						FUN_GETMFGCODEBYPARTID(partid) AS mfgCode,	FUN_GETMFGPNBYID(partid) AS mfgPN,  \n" +
                "						custPNID,	qpa,	consolidatedQPA,	dnpQPA,		isInstall,	  \n" +
                "						isGoodPart, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, restrictUsePermanently, restrictUSEwithpermission,	  \n" +
                "						FUN_GETUNITNAMEBYID(uomID) uom,		FUN_GETPARTTYPENAMEBYID(parttypeID) partTypeName,	FUN_GETMOUNTINGTYPENAMEBYID(mountingTypeID) mountingTypeName,  \n" +
                "						numOfPosition,		requiredQtyBuild,		requirePinsBuild,	allocatedQty,	 c.allocatedUnit,	consumeUnits,  \n" +
                "						consumeQty,		consumePin,		allocatedPins,		scrapedPins,	notRequiredKitAllocationReason,  \n" +
                "						(CASE  \n" +
                "							WHEN custPNID IS NULL THEN NULL  \n" +
                "							ELSE FUN_GETMFGPNBYID(custPNID)  \n" +
                "						END) custPN,  \n" +
                "						(CASE  \n" +
                "							WHEN isNotRequiredKitAllocation = 1 THEN 'Yes'  \n" +
                "							ELSE 'No'  \n" +
                "						END) AS isNotRequiredKitAllocationValue,  \n" +
                "						(CASE  \n" +
                "							WHEN  \n" +
                "								uomMismatchedStep = 0  \n" +
                "									OR isNotRequiredKitAllocation = 1  \n" +
                "							THEN  \n" +
                "								0  \n" +
                "							ELSE CASE  \n" +
                "								WHEN  \n" +
                "									c.connecterTypeID = - 2  \n" +
                "								THEN  \n" +
                "									CASE  \n" +
                "										WHEN (((IFNULL(c.qpa, 0) * pKitQty * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(c.qpa, 0) * pKitQty * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin))  \n" +
                "									END  \n" +
                "								ELSE CASE  \n" +
                "									WHEN (((IFNULL(c.qpa, 0) * pKitQty) - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0  \n" +
                "									ELSE ((IFNULL(c.qpa, 0) * pKitQty) - (c.allocatedUnit + c.consumeUnits))  \n" +
                "								END  \n" +
                "							END  \n" +
                "						END) shortagePerBuild  \n" +
                "				FROM  \n" +
                "					(SELECT      a.id,		a.lineId AS _lineID,	a.refSalesOrderDetId refSalesOrderDetID,	b.partid,  \n" +
                "							a.rfqLineItemsId,		a.consolidatedpartlineID,	a.consolidateRestrictPartDetail,	a.ConsolidatedLineItemIDs,  \n" +
                "							a.custPNID,		a.isNotRequiredKitAllocation,		a.notRequiredKitAllocationReason,	 a.uomMismatchedStep,  \n" +
                "							a.consolidatedMfgPNIDs mfgPart,		IFNULL(a.kitQPAWithDNP, 0) qpa,		IFNULL(a.kitQPAWithDNP, 0) consolidatedQPA,  \n" +
                "							IFNULL(a.kitDNPWithoutQPA, 0) dnpQPA,	a.uomID,	a.isInstall,	a.connecterTypeID,	 a.partType parttypeID,  \n" +
                "							a.mountingTypeID,	a.numOfPosition,  \n" +
                "							b.isGoodPart, b.restrictPackagingUsePermanently, b.restrictPackagingUseWithpermission, b.restrictUsePermanently, b.restrictUSEwithpermission,  \n" +
                "							(CASE  \n" +
                "								WHEN a.uomMismatchedStep = 0 THEN 0  \n" +
                "								ELSE (IFNULL(a.kitQPAWithDNP, 0) * pKitQty)  \n" +
                "							END) AS requiredQtyBuild,  \n" +
                "							(CASE  \n" +
                "							WHEN  \n" +
                "								(a.uomMismatchedStep = 1  \n" +
                "									AND a.connecterTypeID = - 2)  \n" +
                "							THEN  \n" +
                "								((IFNULL(a.kitQPAWithDNP, 0) * pKitQty) * IFNULL(a.numOfPosition, 0))  \n" +
                "							ELSE 0  \n" +
                "						END) AS requirePinsBuild,  \n" +
                "						IFNULL(b.allocatedQty, 0) allocatedQty,		IFNULL(b.allocatedUnit, 0) allocatedUnit,	IFNULL(b.consumeUnits, 0) consumeUnits,  \n" +
                "						IFNULL(b.consumeQty, 0) consumeQty,		IFNULL(b.allocatedPins, 0) allocatedPins,	IFNULL(b.consumePin, 0) consumePin,		IFNULL(b.scrapedPins, 0) scrapedPins  \n" +
                "				FROM  \n" +
                "					kit_allocation_consolidate_Line_detail a  \n" +
                "				INNER JOIN (SELECT  a.refSalesOrderDetid,	a.rfqLineItemsId,	a.consolidatedLineItemIDs,	a.partid,  \n" +
                "						c.isGoodPart, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.restrictUsePermanently, c.restrictUSEwithpermission,  \n" +
                "                        SUM(b.allocatedQty) allocatedQty,	SUM(b.allocatedunit) allocatedUnit,	SUM(b.AllocatedPins) allocatedPins,  \n" +
                "						SUM(b.ConsumeQty) consumeQty,	SUM(b.ConsumeUnits) consumeUnits,	SUM(b.consumePin) consumePin,	SUM(b.scrapedPins) scrapedPins  \n" +
                "				FROM  \n" +
                "					temp_consolidate_Line_alternateparts a  \n" +
                "				JOIN component c ON a.partid = c.id  \n" +
                "				LEFT JOIN vu_kit_allocation_summary b ON a.refsalesORderDetid = b.refsalesOrderDetId  \n" +
                "					AND FIND_IN_SET(b.refBOMLineID, a.consolidatedLineItemIDs)  \n" +
                "				GROUP BY a.refSalesOrderDetid , a.rfqLineItemsId , a.partid) b ON a.refSalesOrderDetId = b.refSalesOrderDetId  \n" +
                "					AND a.rfqLineItemsId = b.rfqLineItemsId  \n" +
                "					AND a.consolidatedLineItemIDs = b.consolidatedLineItemIDs  \n" +
                "				WHERE a.refSalesOrderDetID = pRefSalesOrderDetID AND a.isAssembly = 0 AND a.isDeleted = 0) AS c  \n" +
                "				LEFT JOIN vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, mfgPart)  \n" +
                "				GROUP BY c.id , _lineID , refSalesOrderDetID , custPNID , isNotRequiredKitAllocation , uomMismatchedStep , qpa ,   \n" +
                "						consolidatedQPA , dnpQPA , uomID , isInstall , c.connecterTypeID , parttypeID , mountingTypeID , numOfPosition ,  \n" +
                "						isGoodPart, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, restrictUsePermanently, restrictUSEwithpermission,   \n" +
                "						notRequiredKitAllocationReason,	requiredQtyBuild , requirePinsBuild , allocatedQty , allocatedUnit , consumeUnits , consumeQty , allocatedPins , scrapedPins , c.partid   \n" +
                "				order by _lineID) AS mainQuery; 				  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_consolidate_Line_alternateparts;   \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-04-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_CreateKitAllocationAssyDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateKitAllocationAssyDetail`(                                                                                                                                \n" +
                "	IN pPartID INT,                                                                                  \n" +
                "	IN pSalesOrderDetailID INT,                                                                                                              \n" +
                "	IN pKitQty INT,                                                                            \n" +
                "	IN pMrpQty INT,                                                                              \n" +
                "	IN pUserID VARCHAR(50),                                                                                \n" +
                "	IN pActionStatus VARCHAR(50),                                \n" +
                "	IN pRoleID INT	                                \n" +
                ")  \n" +
                "BEGIN                                                 \n" +
                "	DECLARE v_assyDataCount INT;          \n" +
                "	DECLARE v_KitAssyDetailPIDs VARCHAR(10000);           \n" +
                "	DECLARE v_RfqLineitemsIds VARCHAR(10000);           \n" +
                "	DECLARE v_RfqLineItemIdsForDeallocate VARCHAR(10000);           \n" +
                "	DECLARE v_AssyIdsForDeallocate VARCHAR(10000);                                                         \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSubAmmseblyData;                                                                    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempSubAmmseblyData AS                                                                                                                       \n" +
                "	SELECT 		ps.prPerPartID,               \n" +
                "			c.liveInternalVersion,               \n" +
                "			c.liveVersion,        \n" +
                "			ps.level                                                                              \n" +
                "	FROM 		part_sub_assy_relationship ps                                                                              \n" +
                "	JOIN		component c ON c.id = ps.prPerPartID                                                                              \n" +
                "	WHERE 		ps.PartID = pPartID          \n" +
                "	AND 		c.liveInternalVersion IS NOT NULL           \n" +
                "	AND 		ps.isDeleted = 0          \n" +
                "	GROUP BY 	ps.prPerPartID, c.liveInternalVersion, c.liveVersion, ps.level;                                           \n" +
                "  \n" +
                "	SELECT 	COUNT(1)               \n" +
                "	INTO 	v_assyDataCount               \n" +
                "	FROM 	tempSubAmmseblyData               \n" +
                "	WHERE 	prPerPartID = pPartID;                                                                            \n" +
                "  \n" +
                "	IF (v_assyDataCount > 0) THEN                                                                            \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempAssyConsolidateDetail;                                                                       \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempAssyConsolidateDetail AS              \n" +
                "		SELECT 	id, consolidatedLineItemIDs, kitQPAWithDNP AS qpa, refAssyId, refSalesOrderDetId, isDeleted           \n" +
                "		FROM 	kit_allocation_consolidate_Line_detail           \n" +
                "		WHERE 	refSalesOrderDetID = pSalesOrderDetailID              \n" +
                "				AND isAssembly = 1           \n" +
                "				AND isDeleted = 0;                                                                              \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForUpdate;                                                                       \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForUpdate AS                                                                               \n" +
                "		SELECT 		tsd.prPerPartID AS prPerPartID, 			                                                                    \n" +
                "				pSalesOrderDetailID AS salesOrderDetailID,                                                                               \n" +
                "				IFNULL(SUM(ld.qpa),1) perAssyBuildQty, 		                                                                        \n" +
                "				(IFNULL(SUM(ld.qpa), 1) * pKitQty) totalAssyBuildQty,                \n" +
                "				pKitQty AS kitQty,                                                                        \n" +
                "				(IFNULL(SUM(ld.qpa), 1) * pMrpQty) totalAssyMrpQty,                \n" +
                "				pMrpQty AS mrpQty,                                                                        \n" +
                "				tsd.liveInternalVersion AS liveInternalVersion,	              \n" +
                "				tsd.liveVersion AS liveVersion,		                                                                              \n" +
                "				IFNULL(tsd.level, 0) AS bomAssyLevel,			              \n" +
                "				pUserID AS updatedBy, 		                              \n" +
                "				pUserID AS createdBy,               \n" +
                "				pRoleID AS createByRoleId,              \n" +
                "				pRoleID AS updateByRoleId                                                                                \n" +
                "		FROM 		tempSubAmmseblyData tsd                                                                              \n" +
                "		LEFT JOIN	(          \n" +
                "					SELECT 		rla.mfgPNID, a.qpa        \n" +
                "					FROM 		tempAssyConsolidateDetail a          \n" +
                "					INNER JOIN	rfq_lineitems_alternatepart rla ON rla.partID = a.refAssyId AND rla.isDeleted = 0          \n" +
                "					WHERE 		FIND_IN_SET(rla.rfqLineitemsID, a.consolidatedLineItemIDs) AND a.isDeleted = 0          \n" +
                "				) ld ON ld.mfgPNID = tsd.prPerPartID                                                                    \n" +
                "		GROUP BY 	tsd.prPerPartID, tsd.liveInternalVersion, tsd.liveVersion, tsd.level        \n" +
                "		ORDER BY 	tsd.level, tsd.prPerPartID;                                                                          \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForLineItem;                                                                    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForLineItem AS                                                                               \n" +
                "		SELECT 		pSalesOrderDetailID AS refSalesOrderDetID,  		id, 		          \n" +
                "				lineID, 	qpa, 		dnpQty,		    	isInstall,	              \n" +
                "				isPurchase,	isBuyDNPQty,	custPN,			custPNID,	              \n" +
                "				uomID, 		partID,		numOfPosition, 		description,	          \n" +
                "				restrictCPNUseWithPermissionStep,	restrictCPNUsePermanentlyStep, 		          \n" +
                "				restrictCPNUseInBOMStep,		customerApprovalCPN,		    	          \n" +
                "				isNotRequiredKitAllocation,               \n" +
                "				fun_getApprovalCommentOfBOMLine(19, rl.id) notRequiredKitAllocationReason,          \n" +
                "				isDeleted,      deleteByRoleId,		refDesig,	customerRev,	  \n" +
                "                customerDescription,	dnpDesig,	programingStatus,	  \n" +
                "                cust_lineID,	substitutesAllow,	numOfRows, customerPartDesc                                                     \n" +
                "		FROM 		rfq_lineitems rl                                                                               \n" +
                "		WHERE 	 	/*FIND_IN_SET(PartId, v_KitAssyDetailPIDs) */        \n" +
                "				EXISTS (SELECT 1  FROM tempSubAmmseblyData temp         \n" +
                "										WHERE temp.prPerPartid = partid)        \n" +
                "                AND isDeleted = 0;             \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempResultForLineItemAlternatePart;                                                                    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempResultForLineItemAlternatePart AS                                                                              \n" +
                "		SELECT 	pSalesOrderDetailID AS refSalesOrderDetID,		rfqLineItemsID, 		id, 			          \n" +
                "			distributor, 			distMfgCodeID, 		distPN, 	    		distMfgPNID,		          \n" +
                "			mfgCode,			mfgCodeID, 		mfgPN, 				mfgPNID,		          \n" +
                "			description,	    		isActive,	    	isApproved,			RoHSStatusID,		          \n" +
                "			parttypeID, 		    	mountingtypeID,		partcategoryID, 	    	partID,			          \n" +
                "			customerApproval,		customerApprovalBy,	customerApprovalDate,		restrictUsePermanentlyStep,				          \n" +
                "			restrictUseWithPermissionStep, 	restrictUseInBOMStep,	restrictUseInBOMWithPermissionStep, 	    		          \n" +
                "			mismatchMountingTypeStep,	approvedMountingType, 	mismatchFunctionalCategoryStep,	    			          \n" +
                "			uomMismatchedStep,		restrictUseInBOMExcludingAliasStep,	    		restrictUseInBOMExcludingAliasWithPermissionStep, 	              \n" +
                "			restrictUseExcludingAliasStep,	restrictUseExcludingAliasWithPermissionStep,		isDeleted,               \n" +
                "			deleteByRoleId			                                                                              \n" +
                "		FROM 	rfq_lineitems_alternatepart rla                                                                               \n" +
                "		WHERE 	/*FIND_IN_SET(rla.rfqLineItemsID, v_RfqLineitemsIds) */        \n" +
                "				EXISTS  ( SELECT 1 FROM rfq_LineItems rl         \n" +
                "									WHERE EXISTS (SELECT 1  FROM tempSubAmmseblyData temp         \n" +
                "															WHERE temp.prPerPartid = partid)        \n" +
                "									AND rl.id =  rla.rfqLineItemsID        \n" +
                "                                    AND rl.isdeleted = 0)        \n" +
                "				AND isDeleted = 0;            \n" +
                "  \n" +
                "		/* Delete any line detail (delete any kit) from sales order */          \n" +
                "		IF (pActionStatus = 'DELETE') THEN          \n" +
                "			/* Delete from kit_allocation_assy_detail */          \n" +
                "			UPDATE 	kit_allocation_assy_detail kasd          \n" +
                "			SET 	kasd.updatedBy = pUserID,            \n" +
                "				kasd.isDeleted = 1,                                    \n" +
                "				kasd.deletedAt = fun_DatetimetoUTCDateTime(),                                    \n" +
                "				kasd.deletedBy = pUserId,              \n" +
                "				kasd.updateByRoleId = pRoleID,              \n" +
                "				kasd.deleteByRoleId = pRoleID          \n" +
                "			WHERE 	kasd.refSalesOrderDetID = pSalesOrderDetailID;          \n" +
                "  \n" +
                "			/* Delete from kit_allocation_lineitems */          \n" +
                "			UPDATE 	kit_allocation_lineitems kal          \n" +
                "			SET 	kal.updatedBy = pUserID,            \n" +
                "				kal.isDeleted = 1,                                    \n" +
                "				kal.deletedAt = fun_DatetimetoUTCDateTime(),                                    \n" +
                "				kal.deletedBy = pUserId,              \n" +
                "				kal.updateByRoleId = pRoleID,              \n" +
                "				kal.deleteByRoleId = pRoleID          \n" +
                "			WHERE 	kal.refSalesOrderDetID = pSalesOrderDetailID;          \n" +
                "  \n" +
                "			/* Delete from kit_allocation_lineitems_alternatepart */          \n" +
                "			UPDATE 	kit_allocation_lineitems_alternatepart kala          \n" +
                "			SET 	kala.updatedBy = pUserID,            \n" +
                "				kala.isDeleted = 1,                                    \n" +
                "				kala.deletedAt = fun_DatetimetoUTCDateTime(),                                    \n" +
                "				kala.deletedBy = pUserId,              \n" +
                "				kala.updateByRoleId = pRoleID,              \n" +
                "				kala.deleteByRoleId = pRoleID          \n" +
                "			WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID;          \n" +
                "  \n" +
                "			-- Deallocate UMID from kit allocation when delete sales order detail (Any Kit) from sales order          \n" +
                "			UPDATE 	kit_allocation ka                                            \n" +
                "			SET 	ka.returnQty = ka.allocatedQty,                                            \n" +
                "				ka.returnUnit = ka.allocatedUnit,                                            \n" +
                "				ka.returnUOM = ka.allocatedUOM,                                            \n" +
                "				ka.returnDate = fun_DatetimetoUTCDateTime(),                                              \n" +
                "				ka.updatedBy = pUserID,                              \n" +
                "				ka.updateByRoleId = pRoleID,	                              \n" +
                "				ka.`status` = 'D',                        \n" +
                "				ka.remark = 'Auto Deallocated from ReCalculation'                                            \n" +
                "			WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID          \n" +
                "					AND ka.`status` = 'A';       \n" +
                "  \n" +
                "			-- Delete release plan detail      \n" +
                "			UPDATE 	salesorder_plan_detailsmst      \n" +
                "			SET 	isDeleted = 1,                                \n" +
                "				deletedAt = fun_DatetimetoUTCDateTime(),                                    \n" +
                "				deletedBy = pUserId      \n" +
                "			WHERE 	salesOrderDetID = pSalesOrderDetailID       \n" +
                "					AND isDeleted = 0;      \n" +
                "		END IF;          \n" +
                "  \n" +
                "		/* Insert data in kit allocation table when any new sales order line detail add in sales order */          \n" +
                "		IF (pActionStatus != 'DELETE') THEN          \n" +
                "			IF (pActionStatus = 'UPDATE') THEN          \n" +
                "				/* Delete kit_allocation_assy_detail if sales order detail changed assy for particular line detail */          \n" +
                "				UPDATE 	kit_allocation_assy_detail kasd          \n" +
                "				SET 	kasd.updatedBy = pUserID,            \n" +
                "					kasd.isDeleted = 1,                                    \n" +
                "					kasd.deletedAt = fun_DatetimetoUTCDateTime(),                                    \n" +
                "					kasd.deletedBy = pUserId,              \n" +
                "					kasd.updateByRoleId = pRoleID,              \n" +
                "					kasd.deleteByRoleId = pRoleID          \n" +
                "				WHERE 	kasd.refSalesOrderDetID = pSalesOrderDetailID          \n" +
                "						/*AND NOT EXISTS (  SELECT 	1          \n" +
                "											FROM 	tempResultForUpdate r          \n" +
                "											WHERE 	r.salesOrderDetailID = kasd.refSalesOrderDetID          \n" +
                "											AND r.prPerPartID = kasd.partId  ) */         \n" +
                "						AND kasd.isDeleted = 0;          \n" +
                "  \n" +
                "				/* Delete kit_allocation_lineitems if sales order detail changed assy for particular line detail */          \n" +
                "				UPDATE 	kit_allocation_lineitems kal          \n" +
                "				SET 	kal.updatedBy = pUserID,            \n" +
                "					kal.isDeleted = 1,                                    \n" +
                "					kal.deletedAt = fun_DatetimetoUTCDateTime(),                                    \n" +
                "					kal.deletedBy = pUserId,              \n" +
                "					kal.updateByRoleId = pRoleID,              \n" +
                "					kal.deleteByRoleId = pRoleID          \n" +
                "				WHERE 	kal.refSalesOrderDetID = pSalesOrderDetailID          \n" +
                "						/*AND NOT EXISTS (  SELECT 	1          \n" +
                "											FROM 	tempResultForLineItem r          \n" +
                "											WHERE 	r.refSalesOrderDetID = kal.refSalesOrderDetID          \n" +
                "													AND r.partID = kal.partID          \n" +
                "													AND r.id = kal.refRfqLineitem          \n" +
                "													AND kal.id IS NOT NULL  )    */      \n" +
                "						AND kal.isDeleted = 0;          \n" +
                "  \n" +
                "				/* Delete kit_allocation_lineitems_alternatepart if sales order detail changed assy for particular line detail */		          \n" +
                "				UPDATE 	kit_allocation_lineitems_alternatepart kala          \n" +
                "				SET 	kala.updatedBy = pUserID,            \n" +
                "						kala.isDeleted = 1,                                    \n" +
                "						kala.deletedAt = fun_DatetimetoUTCDateTime(),                                    \n" +
                "						kala.deletedBy = pUserId,              \n" +
                "						kala.updateByRoleId = pRoleID,              \n" +
                "						kala.deleteByRoleId = pRoleID          \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID          \n" +
                "							/*AND NOT EXISTS (  SELECT 	1          \n" +
                "											FROM 	tempResultForLineItemAlternatePart r          \n" +
                "											WHERE 	r.refSalesOrderDetID = kala.refSalesOrderDetID          \n" +
                "													AND r.rfqLineItemsID = kala.refRfqLineitem        \n" +
                "													AND r.partID = kala.partID          \n" +
                "													AND r.mfgPNID = kala.mfgPNID )      */    \n" +
                "							AND kala.isDeleted = 0;          \n" +
                "  \n" +
                "				-- Deallocate UMID from kit allocation when delete sales order detail (Any Kit) from sales order          \n" +
                "				-- In this case assembly was change on sales order line detail so internally we do deallocate UMID which contail old assembly (Old Kit)          \n" +
                "				UPDATE 	kit_allocation ka                                            \n" +
                "				SET 	ka.returnQty = ka.allocatedQty,                                            \n" +
                "					ka.returnUnit = ka.allocatedUnit,                                            \n" +
                "					ka.returnUOM = ka.allocatedUOM,                                            \n" +
                "					ka.returnDate = fun_DatetimetoUTCDateTime(),                                              \n" +
                "					ka.updatedBy = pUserID,                              \n" +
                "					ka.updateByRoleId = pRoleID,	                              \n" +
                "					ka.`status` = 'D',                        \n" +
                "					ka.remark = 'Auto Deallocated from ReCalculation'                                            \n" +
                "				WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID          \n" +
                "						AND ka.`status` = 'A';          \n" +
                "			END IF;          \n" +
                "  \n" +
                "			IF (pActionStatus = 'UPDATE' OR pActionStatus = 'CALCULATEKITALLOCATION') THEN          \n" +
                "  \n" +
                "				IF (pActionStatus = 'CALCULATEKITALLOCATION') THEN          \n" +
                "  \n" +
                "					/* Delete from kit_allocation_assy_detail if any sub assembly line delete from BOM */          \n" +
                "					UPDATE 	kit_allocation_assy_detail kasd          \n" +
                "					SET 	kasd.updatedBy = pUserID,            \n" +
                "							kasd.isDeleted = 1,                                    \n" +
                "							kasd.deletedAt = fun_DatetimetoUTCDateTime(),                                    \n" +
                "							kasd.deletedBy = pUserId,              \n" +
                "							kasd.updateByRoleId = pRoleID,              \n" +
                "							kasd.deleteByRoleId = pRoleID          \n" +
                "						WHERE 	kasd.refSalesOrderDetID = pSalesOrderDetailID          \n" +
                "								-- and kasd.partId = pPartID          \n" +
                "								AND NOT EXISTS (  	SELECT 	1          \n" +
                "													FROM 	tempResultForUpdate r          \n" +
                "													WHERE 	r.salesOrderDetailID = kasd.refSalesOrderDetID          \n" +
                "															AND r.prPerPartID = kasd.partId  	)          \n" +
                "								AND kasd.isDeleted = 0;          \n" +
                "  \n" +
                "					/* Delete from kit_allocation_lineitems if any sub assembly or any mfr pn line remove from BOM */          \n" +
                "					UPDATE 	kit_allocation_lineitems kal          \n" +
                "					SET 	kal.updatedBy = pUserID,            \n" +
                "						kal.isDeleted = 1,                                    \n" +
                "						kal.deletedAt = fun_DatetimetoUTCDateTime(),                                    \n" +
                "						kal.deletedBy = pUserId,              \n" +
                "						kal.updateByRoleId = pRoleID,              \n" +
                "						kal.deleteByRoleId = pRoleID          \n" +
                "					WHERE 	kal.refSalesOrderDetID = pSalesOrderDetailID          \n" +
                "							-- AND kal.partID = pPartID          \n" +
                "							AND NOT EXISTS ( 	SELECT 	1          \n" +
                "								FROM 	tempResultForLineItem r          \n" +
                "								WHERE 	r.refSalesOrderDetID = kal.refSalesOrderDetID          \n" +
                "										AND r.partID = kal.partID          \n" +
                "										AND r.id = kal.refRfqLineitem  	)          \n" +
                "							AND kal.isDeleted = 0;          \n" +
                "  \n" +
                "					/* Get rfqLineItem and AssyID from kit_allocation_lineitems_alternatepart table from deallocated UMID because if any line delete from BOM*/          \n" +
                "					SELECT 	GROUP_CONCAT(refRfqLineitem), GROUP_CONCAT(partID)          \n" +
                "					INTO	v_RfqLineItemIdsForDeallocate, v_AssyIdsForDeallocate          \n" +
                "					FROM 	kit_allocation_lineitems_alternatepart kala          \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID          \n" +
                "							-- AND kala.partID = pPartID          \n" +
                "							AND NOT EXISTS (  SELECT 	1          \n" +
                "												FROM 	tempResultForLineItemAlternatePart r          \n" +
                "												WHERE 	r.refSalesOrderDetID = kala.refSalesOrderDetID          \n" +
                "														AND r.partID = kala.partID          \n" +
                "														AND r.mfgPNID = kala.mfgPNID          \n" +
                "														AND r.rfqLineitemsID = kala.refRfqLineitem)          \n" +
                "							AND kala.isDeleted = 0;          \n" +
                "  \n" +
                "					/* Delete from kit_allocation_lineitems_alternatepart if any sub assembly or any mfr pn line remove from BOM */          \n" +
                "					UPDATE 	kit_allocation_lineitems_alternatepart kala          \n" +
                "					SET 	kala.updatedBy = pUserID,            \n" +
                "						kala.isDeleted = 1,                                    \n" +
                "						kala.deletedAt = fun_DatetimetoUTCDateTime(),                                    \n" +
                "						kala.deletedBy = pUserId,              \n" +
                "						kala.updateByRoleId = pRoleID,              \n" +
                "						kala.deleteByRoleId = pRoleID          \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID          \n" +
                "							-- AND kala.partID = pPartID          \n" +
                "							AND NOT EXISTS (  SELECT 	1          \n" +
                "								FROM 	tempResultForLineItemAlternatePart r          \n" +
                "								WHERE 	r.refSalesOrderDetID = kala.refSalesOrderDetID          \n" +
                "										AND r.rfqLineitemsID = kala.refRfqLineitem        \n" +
                "										AND r.partID = kala.partID          \n" +
                "										AND r.mfgPNID = kala.mfgPNID  )          \n" +
                "						AND kala.isDeleted = 0;          \n" +
                "  \n" +
                "					/* Deallocate UMID if any line change the MFR PN and that line have any UMID allocate */          \n" +
                "					IF (v_RfqLineItemIdsForDeallocate IS NOT NULL AND v_AssyIdsForDeallocate IS NOT NULL) THEN          \n" +
                "						UPDATE 	kit_allocation ka                                            \n" +
                "						SET 	ka.returnQty = ka.allocatedQty,                                            \n" +
                "							ka.returnUnit = ka.allocatedUnit,                                            \n" +
                "							ka.returnUOM = ka.allocatedUOM,                                            \n" +
                "							ka.returnDate = fun_DatetimetoUTCDateTime(),                                              \n" +
                "							ka.updatedBy = pUserID,                              \n" +
                "							ka.updateByRoleId = pRoleID,                              \n" +
                "							ka.`status` = 'D',                        \n" +
                "							ka.remark = 'Auto Deallocated from ReCalculation'                                            \n" +
                "						WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID 	                                            \n" +
                "								AND FIND_IN_SET(ka.assyID, v_AssyIdsForDeallocate)                                      \n" +
                "								AND FIND_IN_SET(ka.refBOMLineID, v_RfqLineItemIdsForDeallocate)          \n" +
                "								AND ka.`status` = 'A';           \n" +
                "					END IF;          \n" +
                "  \n" +
                "				END IF;          \n" +
                "  \n" +
                "				/* Update kit_allocation_assy_detail if any change in sales order detail line or any change in kit */          \n" +
                "				/* In case of pActionStatus = 'UPDATE' we have to update only kit_allocation_assy_detail table becuse we only update qty, mrpqty, kitqty and update assy case cover in above query*/          \n" +
                "				UPDATE 	kit_allocation_assy_detail ka, tempResultForUpdate tsd                                                                               \n" +
                "				SET 	ka.partId = tsd.prPerPartID,                                                                               \n" +
                "					ka.refSalesOrderDetID = tsd.salesOrderDetailID,                                                                               \n" +
                "					ka.perAssyBuildQty = tsd.perAssyBuildQty,                                                                               \n" +
                "					ka.totalAssyBuildQty = tsd.totalAssyBuildQty,                                                                               \n" +
                "					ka.kitQty = tsd.kitQty,                                                                               \n" +
                "					ka.totalAssyMrpQty = tsd.totalAssyMrpQty,                                                                               \n" +
                "					ka.mrpQty = tsd.mrpQty,                                                                               \n" +
                "					ka.bomInternalVersion = tsd.liveInternalVersion,                                                                             \n" +
                "					ka.bomInternalVersionString = tsd.liveVersion,                                                                            \n" +
                "					ka.bomAssyLevel = tsd.bomAssyLevel,                                                                               \n" +
                "					ka.updatedBy = tsd.updatedBy,                              \n" +
                "					ka.updateByRoleId = tsd.updateByRoleId                              \n" +
                "				WHERE	ka.id IS NOT NULL          \n" +
                "						AND ka.partId = tsd.prPerPartID           \n" +
                "						AND ka.refSalesOrderDetID = tsd.salesOrderDetailID           \n" +
                "						AND ka.isDeleted = 0;          \n" +
                "  \n" +
                "				IF (pActionStatus = 'CALCULATEKITALLOCATION') THEN          \n" +
                "  \n" +
                "					/* Update kit_allocation_lineitems table if any change in BOM line */          \n" +
                "					UPDATE 	kit_allocation_lineitems kal, tempResultForLineItem tlt                                                                               \n" +
                "					SET 	kal.refSalesOrderDetID = tlt.refSalesOrderDetID,                                                                               \n" +
                "						kal.refRfqLineitem = tlt.id,                                                                               \n" +
                "						kal.lineID = tlt.lineID,                                                                               \n" +
                "						kal.qpa = tlt.qpa,                                                                          \n" +
                "						kal.dnpQty = tlt.dnpQty,                                                                   \n" +
                "						kal.isInstall = tlt.isInstall,                                                                  \n" +
                "						kal.isPurchase = tlt.isPurchase,                                                                  \n" +
                "						kal.isBuyDNPQty = tlt.isBuyDNPQty,                                                                      \n" +
                "						kal.custPN = tlt.custPN,                                                                               \n" +
                "						kal.custPNID = tlt.custPNID,                                                                               \n" +
                "						kal.uomID = tlt.uomID,                                                                               \n" +
                "						kal.partID = tlt.partID,                                                                      \n" +
                "						kal.numOfPosition = tlt.numOfPosition,                                                             \n" +
                "						kal.description = tlt.description,                                                            \n" +
                "						kal.restrictCPNUseWithPermissionStep = tlt.restrictCPNUseWithPermissionStep,                                                            \n" +
                "						kal.restrictCPNUsePermanentlyStep = tlt.restrictCPNUsePermanentlyStep,                                                            \n" +
                "						kal.restrictCPNUseInBOMStep = tlt.restrictCPNUseInBOMStep,                                                            \n" +
                "						kal.customerApprovalCPN = tlt.customerApprovalCPN,                       \n" +
                "						kal.isNotRequiredKitAllocation = tlt.isNotRequiredKitAllocation,                    \n" +
                "						kal.notRequiredKitAllocationReason = tlt.notRequiredKitAllocationReason,                                             \n" +
                "						kal.updatedBy = pUserID,                                                                              \n" +
                "						kal.updateByRoleId = pRoleID,  \n" +
                "                        kal.refDesig = tlt.refDesig,  \n" +
                "                        kal.customerRev = tlt.customerRev,  \n" +
                "                        kal.customerDescription = tlt.customerDescription,  \n" +
                "                        kal.dnpDesig = tlt.dnpDesig,  \n" +
                "                        kal.programingStatus = tlt.programingStatus,  \n" +
                "                        kal.cust_lineID = tlt.cust_lineID,  \n" +
                "                        kal.substitutesAllow = tlt.substitutesAllow,  \n" +
                "                        kal.numOfRows = tlt.numOfRows,  \n" +
                "                        kal.customerPartDesc = tlt.customerPartDesc  \n" +
                "					WHERE	kal.id IS NOT NULL           \n" +
                "							AND kal.refRfqLineitem = tlt.id           \n" +
                "							AND kal.refSalesOrderDetID = tlt.refSalesOrderDetID           \n" +
                "							AND kal.isDeleted = 0;         \n" +
                "  \n" +
                "					/* Get rfqLineItem and AssyID from kit_allocation_lineitems_alternatepart table from deallocated UMID because if any change in MFR PN on particular line*/          \n" +
                "					SELECT 	GROUP_CONCAT(refRfqLineitem), GROUP_CONCAT(partID)          \n" +
                "					INTO	v_RfqLineItemIdsForDeallocate, v_AssyIdsForDeallocate          \n" +
                "					FROM 	kit_allocation_lineitems_alternatepart kala          \n" +
                "					WHERE 	kala.refSalesOrderDetID = pSalesOrderDetailID          \n" +
                "							-- AND kala.partID = pPartID          \n" +
                "							AND NOT EXISTS (          \n" +
                "								SELECT 	1          \n" +
                "								FROM 	tempResultForLineItemAlternatePart r          \n" +
                "								WHERE 	r.refSalesOrderDetID = kala.refSalesOrderDetID          \n" +
                "										AND r.partID = kala.partID          \n" +
                "										AND r.mfgPNID = kala.mfgPNID          \n" +
                "										AND kala.id IS NOT NULL          \n" +
                "							)          \n" +
                "							AND kala.isDeleted = 0;          \n" +
                "  \n" +
                "					UPDATE 	kit_allocation_lineitems_alternatepart kala, tempResultForLineItemAlternatePart tlia                                                                               \n" +
                "					SET 	kala.refSalesOrderDetID = tlia.refSalesOrderDetID,                                                                               \n" +
                "						kala.refRfqLineitem = tlia.rfqLineItemsID,                                                                               \n" +
                "						kala.refRfqLineItemAlternatePartId = tlia.id,                                                                               \n" +
                "						kala.distributor = tlia.distributor,                                                                               \n" +
                "						kala.distMfgCodeID = tlia.distMfgCodeID,                                                                               \n" +
                "						kala.distPN = tlia.distPN,                                                                               \n" +
                "						kala.distMfgPNID = tlia.distMfgPNID,                                                                              \n" +
                "						kala.mfgCode = tlia.mfgCode,                                                                              \n" +
                "						kala.mfgCodeID = tlia.mfgCodeID,                                                                              \n" +
                "						kala.mfgPN = tlia.mfgPN,                                                                              \n" +
                "						kala.mfgPNID = tlia.mfgPNID,                                                              \n" +
                "						kala.description = tlia.description,                                                                       \n" +
                "						kala.isActive = tlia.isActive,                                                                              \n" +
                "						kala.isApproved = tlia.isApproved,                                                                              \n" +
                "						kala.RoHSStatusID = tlia.RoHSStatusID,                                                                              \n" +
                "						kala.parttypeID = tlia.parttypeID,                                                                              \n" +
                "						kala.mountingtypeID = tlia.mountingtypeID,                                                                              \n" +
                "						kala.partcategoryID = tlia.partcategoryID,                                                                              \n" +
                "						kala.partID = tlia.partID,                                             \n" +
                "						kala.customerApproval = tlia.customerApproval,                                        \n" +
                "						kala.customerApprovalBy = tlia.customerApprovalBy,                                        \n" +
                "						kala.customerApprovalDate = tlia.customerApprovalDate,                                        \n" +
                "						kala.restrictUsePermanentlyStep = tlia.restrictUsePermanentlyStep,                                                                              \n" +
                "						kala.restrictUseWithPermissionStep = tlia.restrictUseWithPermissionStep,                                                                              \n" +
                "						kala.restrictUseInBOMStep = tlia.restrictUseInBOMStep,                                                                \n" +
                "						kala.restrictUseInBOMWithPermissionStep = tlia.restrictUseInBOMWithPermissionStep,                                                              \n" +
                "						kala.mismatchMountingTypeStep = tlia.mismatchMountingTypeStep,                   \n" +
                "						kala.approvedMountingType = tlia.approvedMountingType,                                                                \n" +
                "						kala.mismatchFunctionalCategoryStep = tlia.mismatchFunctionalCategoryStep,                                      \n" +
                "						kala.uomMismatchedStep = tlia.uomMismatchedStep,                                      \n" +
                "						kala.restrictUseInBOMExcludingAliasStep = tlia.restrictUseInBOMExcludingAliasStep,                                    \n" +
                "						kala.restrictUseInBOMExcludingAliasWithPermissionStep = tlia.restrictUseInBOMExcludingAliasWithPermissionStep,                                    \n" +
                "						kala.restrictUseExcludingAliasStep = tlia.restrictUseExcludingAliasStep,                                    \n" +
                "						kala.restrictUseExcludingAliasWithPermissionStep = tlia.restrictUseExcludingAliasWithPermissionStep,                                                                            \n" +
                "						kala.updatedBy = pUserID,                                                                              \n" +
                "						kala.updateByRoleId=pRoleID,                              \n" +
                "						kala.deleteByRoleId=tlia.deleteByRoleId			                              \n" +
                "					WHERE	kala.id IS NOT NULL           \n" +
                "							AND kala.refSalesOrderDetID = tlia.refSalesOrderDetID           \n" +
                "							AND kala.refRfqLineitem = tlia.rfqLineItemsID           \n" +
                "							AND kala.mfgPNID = tlia.mfgPNID           \n" +
                "							AND kala.isDeleted = 0;          \n" +
                "  \n" +
                "					/* Deallocate UMID if any line change the MFR PN and that line have any UMID allocate*/          \n" +
                "					IF (v_RfqLineItemIdsForDeallocate IS NOT NULL AND v_AssyIdsForDeallocate IS NOT NULL) THEN          \n" +
                "						UPDATE 	kit_allocation ka                                            \n" +
                "						SET 	ka.returnQty = ka.allocatedQty,                                            \n" +
                "							ka.returnUnit = ka.allocatedUnit,                                            \n" +
                "							ka.returnUOM = ka.allocatedUOM,                                            \n" +
                "							ka.returnDate = fun_DatetimetoUTCDateTime(),                                              \n" +
                "							ka.updatedBy = pUserID,                              \n" +
                "							ka.updateByRoleId = pRoleID,                              \n" +
                "							ka.`status` = 'D',                        \n" +
                "							ka.remark = 'Auto Deallocated from ReCalculation'                                            \n" +
                "						WHERE 	ka.refSalesOrderDetID = pSalesOrderDetailID 	                                            \n" +
                "								AND FIND_IN_SET(ka.assyID, v_AssyIdsForDeallocate)                                      \n" +
                "								AND FIND_IN_SET(ka.refBOMLineID, v_RfqLineItemIdsForDeallocate)          \n" +
                "								AND ka.`status` = 'A';           \n" +
                "					END IF;          \n" +
                "				END IF;	          \n" +
                "			END IF;          \n" +
                "  \n" +
                "			/* Insert new data in kit_allocation_assy_detail */          \n" +
                "			INSERT INTO kit_allocation_assy_detail (              \n" +
                "				partId, 		refSalesOrderDetID, 		perAssyBuildQty, 		totalAssyBuildQty,               \n" +
                "				kitQty,     		totalAssyMrpQty,     		mrpQty,     			bomInternalVersion,               \n" +
                "				bomInternalVersionString,     				bomAssyLevel,     		createdBy,               \n" +
                "				updatedBy,		createByRoleId,    		updateByRoleId              \n" +
                "			)                                                                              \n" +
                "			SELECT 	tsd.prPerPartID,		tsd.salesOrderDetailID,		tsd.perAssyBuildQty, 		tsd.totalAssyBuildQty,		              \n" +
                "				tsd.kitQty,			tsd.totalAssyMrpQty,		tsd.mrpQty,			tsd.liveInternalVersion,	              \n" +
                "				tsd.liveVersion,		tsd.bomAssyLevel,		tsd.updatedBy, 			tsd.createdBy,		              \n" +
                "				tsd.createByRoleId, 		tsd.updateByRoleId                                                                              \n" +
                "			FROM 	tempResultForUpdate tsd          \n" +
                "			LEFT JOIN kit_allocation_assy_detail kaad ON kaad.partId = tsd.prPerPartID           \n" +
                "						AND kaad.refSalesOrderDetID = tsd.salesOrderDetailID          \n" +
                "						AND kaad.isDeleted = 0          \n" +
                "			WHERE 	kaad.id IS NULL;          \n" +
                "  \n" +
                "			/* Insert new data in kit_allocation_lineitems */          \n" +
                "			INSERT INTO kit_allocation_lineitems (              \n" +
                "				refSalesOrderDetID, 		refRfqLineitem, 		lineID, 		qpa,               \n" +
                "				dnpQty,     			isInstall,     			isPurchase,     	isBuyDNPQty,               \n" +
                "				custPN,     			custPNID,     			uomID,     		partID,               \n" +
                "				numOfPosition,  		description,     		restrictCPNUseWithPermissionStep,               \n" +
                "				restrictCPNUsePermanentlyStep, 	restrictCPNUseInBOMStep,     	customerApprovalCPN,    isNotRequiredKitAllocation,               \n" +
                "				notRequiredKitAllocationReason, createdBy,     			updatedBy,    		createByRoleId,              \n" +
                "				updateByRoleId,		refDesig,	customerRev,	customerDescription,	dnpDesig,	programingStatus,	  \n" +
                "                cust_lineID,	substitutesAllow,	numOfRows, customerPartDesc  \n" +
                "			)                                                                              \n" +
                "			SELECT 	tlt.refSalesOrderDetID,	    		tlt.id,			tlt.lineID,			tlt.qpa, 		              \n" +
                "				tlt.dnpQty,				tlt.isInstall,		tlt.isPurchase, 	    	tlt.isBuyDNPQty,                                                                  \n" +
                "				tlt.custPN, 	      	    		tlt.custPNID,	    	tlt.uomID, 		    	tlt.partID, 	              \n" +
                "				tlt.numOfPosition,			tlt.description,	tlt.restrictCPNUseWithPermissionStep, 		              \n" +
                "				tlt.restrictCPNUsePermanentlyStep,	tlt.restrictCPNUseInBOMStep,				tlt.customerApprovalCPN,	              \n" +
                "				tlt.isNotRequiredKitAllocation,		tlt.notRequiredKitAllocationReason,    		pUserID,	           \n" +
                "				pUserID,				pRoleID,     		pRoleID,	tlt.refDesig,	tlt.customerRev,	tlt.customerDescription,  \n" +
                "                tlt.dnpDesig,	tlt.programingStatus,	tlt.cust_lineID,	tlt.substitutesAllow,	tlt.numOfRows, tlt.customerPartDesc	                                                                              \n" +
                "			FROM 	tempResultForLineItem tlt          \n" +
                "			LEFT JOIN kit_allocation_lineitems kal ON kal.refSalesOrderDetID = tlt.refSalesOrderDetID          \n" +
                "							AND kal.partID = tlt.partID          \n" +
                "							AND kal.refRfqLineitem = tlt.id          \n" +
                "							AND kal.isDeleted = 0          \n" +
                "			WHERE 	kal.id IS NULL;            \n" +
                "  \n" +
                "			/* Insert new data in kit_allocation_lineitems_alternatepart */                                                                             \n" +
                "			INSERT INTO kit_allocation_lineitems_alternatepart (              \n" +
                "				refSalesOrderDetID,		refKitAllocationLineItemId,     	refRfqLineitem,     		refRfqLineItemAlternatePartId,               \n" +
                "				distributor,     		distMfgCodeID,     			distPN,     			distMfgPNID,               \n" +
                "				mfgCode,     			mfgCodeID,     				mfgPN,     			mfgPNID,               \n" +
                "				description,    		isActive,     				isApproved,     		RoHSStatusID,               \n" +
                "				parttypeID,     		mountingtypeID,     			partcategoryID,     		partID,               \n" +
                "				customerApproval,     		customerApprovalBy,     		customerApprovalDate,   	restrictUsePermanentlyStep,                                         \n" +
                "				restrictUseWithPermissionStep, 	restrictUseInBOMStep,     		restrictUseInBOMWithPermissionStep,               \n" +
                "				mismatchMountingTypeStep,     	approvedMountingType,     		mismatchFunctionalCategoryStep,	uomMismatchedStep,                                     \n" +
                "				restrictUseInBOMExcludingAliasStep,	    				restrictUseInBOMExcludingAliasWithPermissionStep, 	              \n" +
                "				restrictUseExcludingAliasStep,	restrictUseExcludingAliasWithPermissionStep,                          	createdBy,               \n" +
                "				updatedBy,    			createByRoleId,    			updateByRoleId              \n" +
                "			)                                                                              \n" +
                "			SELECT 	tlia.refSalesOrderDetID, 	fun_getKitLineItemPKIdForKitAlternate(tlia.rfqLineItemsID, pSalesOrderDetailID) refKitAllocationLineItemId,                                                                              \n" +
                "				tlia.rfqLineItemsID,		tlia.id,			tlia.distributor,		tlia.distMfgCodeID, 		              \n" +
                "				tlia.distPN, 	    		tlia.distMfgPNID,		tlia.mfgCode,			tlia.mfgCodeID, 		              \n" +
                "				tlia.mfgPN,			tlia.mfgPNID,			tlia.description,	    	tlia.isActive,	              \n" +
                "				tlia.isApproved,		tlia.RoHSStatusID,		tlia.parttypeID, 		tlia.mountingtypeID, 			              \n" +
                "				tlia.partcategoryID,		tlia.partID,			tlia.customerApproval,		tlia.customerApprovalBy,	              \n" +
                "				tlia.customerApprovalDate,	tlia.restrictUsePermanentlyStep,				tlia.restrictUseWithPermissionStep, 		              \n" +
                "				tlia.restrictUseInBOMStep,	tlia.restrictUseInBOMWithPermissionStep, 	    		tlia.mismatchMountingTypeStep, 		              \n" +
                "				tlia.approvedMountingType,	tlia.mismatchFunctionalCategoryStep,		    		tlia.uomMismatchedStep,                                                             \n" +
                "				tlia.restrictUseInBOMExcludingAliasStep,	    		tlia.restrictUseInBOMExcludingAliasWithPermissionStep, 		              \n" +
                "				tlia.restrictUseExcludingAliasStep,		    		tlia.restrictUseExcludingAliasWithPermissionStep,                                    \n" +
                "				pUserID, 		pUserID,     			pRoleID,     		pRoleID	                                                                              \n" +
                "			FROM 	tempResultForLineItemAlternatePart tlia           \n" +
                "			LEFT JOIN kit_allocation_lineitems_alternatepart kala ON tlia.refSalesOrderDetID = kala.refSalesOrderDetID           \n" +
                "							AND tlia.partID = kala.partID           \n" +
                "							AND tlia.rfqLineItemsID = kala.refRfqLineitem          \n" +
                "							AND tlia.mfgPNID = kala.mfgPNID          \n" +
                "							AND kala.isDeleted = 0          \n" +
                "			WHERE 	kala.id IS NULL;          \n" +
                "  \n" +
                "			CALL Sproc_GenerateWarehouseForKit(pSalesOrderDetailID, pUserID, pRoleID);          \n" +
                "		END IF;           \n" +
                "  \n" +
                "		SELECT 1 AS IsSuccess, NULL AS ErrorCode;	          \n" +
                "	ELSE           \n" +
                "		SELECT 0 AS IsSuccess, 'ERR_KIT01' AS ErrorCode;          \n" +
                "	END IF;                                                                             \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForLineItemAlternatePart;                                                                              \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForLineItem;	                                                                              \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempResultForUpdate;                                                                              \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSubAmmseblyData;                                                                             \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-04-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4507,'2.00','V1','User Story 32598: Kit List / Kit Page : Give provision to export Kit BOM along with stock detail [ HOT FIX] - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4507:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-04-2021  ********************************** */
                "ALTER TABLE kit_allocation_lineitems ADD refDesig        varchar(3000);  \n" +
                "ALTER TABLE kit_allocation_lineitems ADD customerRev        varchar(50);  \n" +
                "ALTER TABLE kit_allocation_lineitems ADD customerDescription        longtext;  \n" +
                "ALTER TABLE kit_allocation_lineitems ADD dnpDesig        varchar(3000);  \n" +
                "ALTER TABLE kit_allocation_lineitems ADD programingStatus        int;  \n" +
                "ALTER TABLE kit_allocation_lineitems ADD cust_lineID        longtext;  \n" +
                "ALTER TABLE kit_allocation_lineitems ADD substitutesAllow        int;  \n" +
                "ALTER TABLE kit_allocation_lineitems ADD numOfRows        decimal(16,8);  \n" +
                "ALTER TABLE kit_allocation_lineitems ADD COLUMN customerPartDesc longtext;  \n" +
                /* **************************** New Script -> 24-04-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4508,'2.00','V1','User Story 32598: Kit List / Kit Page : Give provision to export Kit BOM along with stock detail [ HOT FIX] - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4508:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-04-2021  ********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssyCompListForCustomerPackingSlipMISC` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyCompListForCustomerPackingSlipMISC`(                              \n" +
                "	IN pCustomerID INT  ,                           \n" +
                "	IN pSearch VARCHAR(100),                  \n" +
                "	IN pPartID INT                              \n" +
                ")  \n" +
                "BEGIN                                      \n" +
                "	DECLARE v_respOfGetAcquiredMFRListFn INT;	                  \n" +
                "	DECLARE v_whereClause VARCHAR(500);                  \n" +
                "	DECLARE v_searchAssyClause VARCHAR(500);                  \n" +
                "	DECLARE v_acquiredCustClause VARCHAR(500);                \n" +
                "  \n" +
                "	SET v_whereClause = \"\";                   \n" +
                "	SET v_searchAssyClause = \"id>=0\";                       \n" +
                "	SET v_acquiredCustClause = \"\";                            \n" +
                "  \n" +
                "	IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany=1)>0 THEN -- fca then default get all assy                          \n" +
                "		SET pCustomerID=NULL;                          \n" +
                "	END IF;                       \n" +
                "  \n" +
                "  \n" +
                "	IF pPartID IS NOT NULL THEN                   \n" +
                "		SET v_whereClause = CONCAT(v_whereClause,\" AND co.id = \",pPartID,\" \");                   \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	IF pCustomerID IS NOT NULL AND pPartID IS NOT NULL THEN                           \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID) INTO v_respOfGetAcquiredMFRListFn;                             \n" +
                "		SET v_acquiredCustClause = CONCAT(v_acquiredCustClause,\" AND (co.mfgcodeID in ( select buyTo from acquireCustomers) or co.id=\",pPartID,\" OR co.mfgcodeID in (select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and  smm.supplierID=\",pCustomerID,\")) \");                              \n" +
                "        ELSEIF 	pCustomerID IS NOT NULL THEN            \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID) INTO v_respOfGetAcquiredMFRListFn;                             \n" +
                "		SET v_acquiredCustClause = CONCAT(v_acquiredCustClause,\" AND (co.mfgcodeID in ( select buyTo from acquireCustomers) OR co.mfgcodeID in (select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and  smm.supplierID=\",pCustomerID,\")) \");                              \n" +
                "        END IF;                   \n" +
                "  \n" +
                "	IF pSearch IS NOT NULL AND pSearch != '' THEN                    \n" +
                "		SET v_searchAssyClause = CONCAT(v_searchAssyClause,\" AND (PIDCode LIKE '%\",pSearch,\"%' OR combinemfgPN LIKE '%\",pSearch,\"%') \");                   \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	SET @SQLStAssyComp = CONCAT(\"SELECT co.id,co.mfgPN, co.PIDCode, co.mfgPNDescription AS description,                  \n" +
                "				co.rev, co.nickName, co.partType ,                          \n" +
                "				u.unitName, u.id unitID,                   \n" +
                "				ro.rohsIcon, ro.name AS rohsName,              \n" +
                "				concat('(',mfg.mfgcode,')',' ',co.mfgPN) combinemfgPN,              \n" +
                "				co.mfgcodeID,fun_getMfgCodeAndNameByID(co.mfgcodeID)mfgName,              \n" +
                "				fun_getCertificationByPartID(co.id)standards ,      \n" +
                "                 mfg.mfgType,  \n" +
                "                 co.category,  \n" +
                "                 co.iscustom,  \n" +
                "                 co.isCPN,	  \n" +
                "                (select group_concat(cert.fullName)from  certificate_standards cert 	  \n" +
                "						where cert.certificateStandardID in (select compstd.certificateStandardID	  \n" +
                "							from component_standard_details compstd where compstd.componentID = co.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "                co.rfqOnly           \n" +
                "			FROM component co                              \n" +
                "				LEFT JOIN uoms u ON co.uom = u.id AND u.isDeleted = 0                              \n" +
                "				LEFT JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND ro.isDeleted = 0                              \n" +
                "				LEFT JOIN mfgcodemst mfg ON co.mfgCodeID = mfg.id AND mfg.isDeleted = 0                   \n" +
                "			WHERE (co.category = 3 or co.iscustom=1 or co.iscpn=1)	                  \n" +
                "			\", v_whereClause  , v_acquiredCustClause , \"                   \n" +
                "			 AND co.isDeleted = 0 and co.partType != 4                 \n" +
                "  \n" +
                "			UNION                  \n" +
                "  \n" +
                "			SELECT co.id,co.mfgPN, co.PIDCode, co.mfgPNDescription AS description,                  \n" +
                "				co.rev, co.nickName, co.partType ,                            \n" +
                "				u.unitName, u.id unitID,                   \n" +
                "				ro.rohsIcon, ro.name AS rohsName,              \n" +
                "				concat('(',mfg.mfgcode,')',' ',co.mfgPN) combinemfgPN,              \n" +
                "				co.mfgcodeID,fun_getMfgCodeAndNameByID(co.mfgcodeID)mfgName,              \n" +
                "				fun_getCertificationByPartID(co.id)standards  ,      \n" +
                "                mfg.mfgType,      \n" +
                "                co.category,      \n" +
                "                co.iscustom,      \n" +
                "                co.isCPN ,	  \n" +
                "                (select group_concat(cert.fullName)from  certificate_standards cert 	  \n" +
                "						where cert.certificateStandardID in (select compstd.certificateStandardID	  \n" +
                "							from component_standard_details compstd where compstd.componentID = co.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "                 co.rfqOnly         \n" +
                "			FROM component co                          \n" +
                "				INNER JOIN mfgcodemst mfg ON co.mfgCodeID = mfg.id                   \n" +
                "							AND mfg.isDeleted = 0 AND mfg.mfgType= 'MFG'                    \n" +
                "				INNER JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND ro.isDeleted = 0                              \n" +
                "				LEFT JOIN uoms u ON co.uom = u.id AND u.isDeleted = 0                              \n" +
                "  \n" +
                "			WHERE co.category in (2,1) and co.iscustom=0 and co.iscpn=0                  \n" +
                "			\", v_whereClause , \"                   \n" +
                "			AND co.isDeleted = 0                  \n" +
                "			AND co.isGoodPart = 1	                  \n" +
                "			and co.partType != 4          \n" +
                "			\");                   \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @SQLStAssyComp,\" ) c                \n" +
                "				where \", v_searchAssyClause);              \n" +
                "				PREPARE query1 FROM @SQLStatement2;                              \n" +
                "	EXECUTE query1;                              \n" +
                "	DEALLOCATE PREPARE query1;                           \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-04-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4509,'2.00','V1','Merge SP issue due to print changes - VS '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4509:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-04-2021 *********************************** */
                "UPDATE page_detail SET iconClass= 'icons-add-notification-category' WHERE menuName= 'Add Notification Category';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-equipment-ownership' WHERE menuName= 'Add Equipment, Workstation & Sample Ownership';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-work-order' WHERE menuName= 'Add Work Order';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-carrier-master' WHERE menuName= 'Add Carrier';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-labor-cost-template' WHERE menuName= 'Add Labor cost template';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-standard' WHERE menuName= 'Add Standard';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-charges-type' WHERE menuName= 'Add Charges Type';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-eco-dfm-type' WHERE menuName= 'Add ECO/DFM Type';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-titles' WHERE menuName= 'Add Title';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-equipment-workstation-sample-type' WHERE menuName= 'Add Equipment, Workstation & Sample Type';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-home-menu-category' WHERE menuName= 'Add Home Menu Category';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-location' WHERE menuName= 'Add Location';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-operation' WHERE menuName= 'Add Operation';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-packing-slip' WHERE menuName= 'Add Material Receipt';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-request-for-shipment' WHERE menuName= 'Add Request For Shipment';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-rfq' WHERE menuName= 'Add RFQ';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-role' WHERE menuName= 'Add Role';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-report-category' WHERE menuName= 'Add Report Category';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-part-requirement-category' WHERE menuName= 'Add Part Requirement Category';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-standard-type' WHERE menuName= 'Add Standard Type';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-payment-term' WHERE menuName= 'Add Payment Term';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-responsibilities' WHERE menuName= 'Add Responsibility';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-operation-type' WHERE menuName= 'Add Operation Type';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-supplier-quote' WHERE menuName= 'Add Supplier Quote';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-po' WHERE menuName= 'Add Purchase Order';  \n" +
                "UPDATE page_detail SET iconClass= 'icons-add-sales-order' WHERE menuName= 'Add Sales Order';  \n" +
                /* **************************** Add Script Version -> 24-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4510,'2.00','V1','Add Icon Changes - VS'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4510:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-04-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(                      \n" +
                "	IN pGoodPart VARCHAR(100),                            \n" +
                "	IN pSearch VARCHAR(500),                            \n" +
                "	IN pId INT,        \n" +
                "	IN pMfgType VARCHAR(50),                            \n" +
                "	IN pRoHSStatusID VARCHAR(100),                            \n" +
                "	IN pMfgCodeId INT,                            \n" +
                "	IN pMountingType VARCHAR(50),                            \n" +
                "	IN pMountingTypeId INT,                            \n" +
                "	IN pCategoryID INT,                            \n" +
                "	IN pIsContainCPN TINYINT,                            \n" +
                "	IN pRohsMainCategoryID INT,                            \n" +
                "	IN pIsRohsMainCategoryInvertMatch TINYINT,                    \n" +
                "	IN prefSupplierMfgpnComponentID INT ,                    \n" +
                "	IN ppackagingID INT,                    \n" +
                "	IN pstrictCustomPart TINYINT,                    \n" +
                "	IN psupplierID INT,      \n" +
                "    IN pPartType int      \n" +
                ")  \n" +
                "BEGIN                            \n" +
                "	DECLARE vRohsMainCategoryID INT;                            \n" +
                "	SET vRohsMainCategoryID = pRohsMainCategoryID;                            \n" +
                "	/*===>this logic is added to compare invert rohs category*/                            \n" +
                "	IF pIsRohsMainCategoryInvertMatch = FALSE  THEN                            \n" +
                "		IF pRohsMainCategoryID = -1 THEN                             \n" +
                "			SET vRohsMainCategoryID = -2;                                \n" +
                "		ELSEIF pRohsMainCategoryID = -2 THEN                                \n" +
                "			SET vRohsMainCategoryID = -1;                                \n" +
                "		END IF;                                \n" +
                "	END IF;                        \n" +
                "	/*<===this logic is added to compare invert rohs category*/                    \n" +
                "	/* this logic used in purchase order when supplier is strictly custom part */                   \n" +
                "	IF(pstrictCustomPart = 1)THEN            \n" +
                "		SELECT *         \n" +
                "		FROM                                        \n" +
                "		(                                        \n" +
                "			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,                                        \n" +
                "					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,                          \n" +
                "					c.isGoodPart,							c.RoHSStatusID,					c.rohsgroupID,                            \n" +
                "					c.mfgcodeID,        \n" +
                "					m.mfgCode,								m.mfgType,						m.mfgName,        \n" +
                "					c.category,								c.imageURL,						c.documentPath,                    \n" +
                "					c.mfgPNDescription,						c.minOperatingTemp,				c.maxOperatingTemp,                            \n" +
                "					c.value,								c.partPackage,					c.powerRating,                            \n" +
                "					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,                            \n" +
                "					c.noOfPosition,							c.noOfRows,						c.pitch,                            \n" +
                "					c.pitchMating,							c.length,						c.width,                            \n" +
                "					c.height,								c.voltage,						c.weight,                            \n" +
                "					c.feature,								c.color,						c.partStatus,                            \n" +
                "					c.uom,									c.uomClassID,					c.unit,                            \n" +
                "					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,	        \n" +
                "					c.restrictPackagingUseWithpermission,        \n" +
                "					u.abbreviation AS uomName,				u.unitName AS  unitName,                     \n" +
                "					r.rohsIcon,								r.name AS rohsName,                            \n" +
                "					c.partPackageID,						c.bomLock,						c.businessRisk,                            \n" +
                "					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,                            \n" +
                "					c.eau,									c.epicorType,					c.functionalTestingRequired,                                  \n" +
                "					c.heightText,							c.isCPN,						c.isCustom,                                  \n" +
                "					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,                                  \n" +
                "					c.maxQtyonHand,							c.minimum,						c.mult,                                  \n" +
                "					c.packageQty,							c.partType,						c.pcbPerArray,                                  \n" +
                "					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,                                  \n" +
                "					c.plannedValuePerBuild,					c.programingRequired,                                  \n" +
                "					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,                                  \n" +
                "					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,                                  \n" +
                "					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,                                  \n" +
                "					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,                      \n" +
                "					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,        \n" +
                "					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,            \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 			c.umidSPQ        \n" +
                "			FROM 	component c        \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND m.mfgType = IFNULL(pMfgType, m.mfgType)        \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID        \n" +
                "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0        \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId        \n" +
                "			WHERE 	c.isdeleted = 0         \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)        \n" +
                "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)                      \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)                      \n" +
                "			AND 	c.id = IFNULL(pId, c.id)         \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)           \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)                     \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)                     \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)                    \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)                     \n" +
                "			AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID         \n" +
                "									FROM supplier_mapping_mst smm        \n" +
                "									WHERE smm.isdeleted = 0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR                     \n" +
                "					c.mfgcodeid IN (SELECT mc.id         \n" +
                "										FROM mfgcodemst mc         \n" +
                "										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR                    \n" +
                "					c.mfgcodeid IN (SELECT mc.id         \n" +
                "										FROM mfgcodemst mc         \n" +
                "										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)                    \n" +
                "			)        \n" +
                "			AND c.category != 3        \n" +
                "			AND c.iscustom = 1        \n" +
                "		) AS a        \n" +
                "		WHERE (        \n" +
                "				(pSearch IS NULL AND 1 = 1) OR                                                    \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR         \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn         \n" +
                "													WHERE opn.refcomponentid = a.id         \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')        \n" +
                "											)        \n" +
                "										)        \n" +
                "				)                                                    \n" +
                "		)                                  \n" +
                "		ORDER BY mfgPN;    \n" +
                "  \n" +
                "	ELSEIF(pMountingType IS NOT NULL AND pstrictCustomPart = 0) THEN                      \n" +
                "	/* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,        \n" +
                "    Reports, Price Break Update, Customer Part, Good-Bad Mapping Part, Supplier Quote, Supplier RMA */                                     \n" +
                "		SELECT * FROM                                        \n" +
                "		(                                        \n" +
                "			 SELECT c.id,							CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,         \n" +
                "					c.mfgPN orgMfgPN, 					c.packaginggroupID, 					c.PIDCode,         \n" +
                "					c.isGoodPart, 						c.RoHSStatusID, 						c.rohsgroupID,         \n" +
                "					c.mfgcodeID,					        \n" +
                "					m.mfgCode, 							m.mfgType,								m.mfgName,         \n" +
                "					c.category,							c.imageURL,								c.documentPath,                    \n" +
                "					c.mfgPNDescription,					c.minOperatingTemp,        				c.maxOperatingTemp,        \n" +
                "					c.value,							c.partPackage,							c.powerRating,        \n" +
                "					c.functionalCategoryID,         	c.mountingTypeID,						c.connecterTypeID,        \n" +
                "					c.noOfPosition,        				c.noOfRows,								c.pitch,        \n" +
                "					c.pitchMating,        				c.length,								c.width,        \n" +
                "					c.height,        					c.voltage,								c.weight,        \n" +
                "					c.feature,        					c.color,								c.partStatus,        \n" +
                "					c.uom,					        	c.uomClassID,							c.unit,                \n" +
                "					c.restrictUsePermanently,			c.restrictUSEwithpermission,			c.restrictPackagingUsePermanently,                                            \n" +
                "					c.restrictPackagingUseWithpermission,                                            \n" +
                "					u.abbreviation AS uomName,			u.unitName AS  unitName,                             \n" +
                "					r.rohsIcon,							r.name AS rohsName,                            \n" +
                "					c.partPackageID,        			c.bomLock,								c.businessRisk,                            \n" +
                "					c.costCategoryID,					c.deviceMarking,						c.driverToolRequired,                            \n" +
                "					c.eau,								c.epicorType,							c.functionalTestingRequired,                                  \n" +
                "					c.heightText,						c.isCPN,								c.isCustom,                                   \n" +
                "					c.leadTime,							c.matingPartRquired,					c.maxPriceLimit,                                  \n" +
                "					c.maxQtyonHand,						c.minimum,								c.mult,                                  \n" +
                "					c.packageQty,						c.partType,								c.pcbPerArray,                                  \n" +
                "					c.pickupPadRequired,				c.plannedOverRunPercentagePerBuild, 	c.plannedValuePerBuild,                                  \n" +
                "					c.programingRequired,				c.rfqOnly,								c.saftyStock,                                  \n" +
                "					c.scrapRatePercentagePerBuild, 		c.scrapValuePerBuild,					c.selfLifeDays,                                  \n" +
                "					c.shelfListDaysThresholdPercentage, c.temperatureCoefficient,				c.temperatureCoefficientUnit,                                  \n" +
                "					c.temperatureCoefficientValue,		c.trackSerialNumber,					c.refSupplierMfgpnComponentID,                        \n" +
                "					c.refMfgPNMfgCodeId,                      \n" +
                "					vu.mfgName  supplierPartMfgName, 	vu.mfgPN supplierPartMfgPn, 			vu.mfgCode supplierPartMfgCode,            \n" +
                "					c.isWaterSoluble,        			c.isNoClean,        					c.isFluxNotApplicable,            \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 				c.umidSPQ  \n" +
                "			FROM 	component c        \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND (m.isdeleted = 0 AND  m.mfgType = IFNULL(pMfgType, m.mfgType))                   \n" +
                "			JOIN 	rfq_mountingtypemst AS mt ON mt.id = c.mountingTypeID AND mt.name = pMountingType                          \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID                   \n" +
                "			JOIN  	uoms u ON u.id = c.uom AND u.isdeleted = 0        \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId        \n" +
                "			WHERE 	c.isdeleted = 0                   \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)                      \n" +
                "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)                      \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)                      \n" +
                "			AND		c.id = IFNULL(pId, c.id) AND c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)                      \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)                     \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)                     \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)          \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)          \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)                    \n" +
                "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)        \n" +
                "		) AS a                                                    \n" +
                "		WHERE (        \n" +
                "				(pSearch IS NULL AND 1 = 1) OR                                                    \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR         \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn         \n" +
                "													WHERE opn.refcomponentid = a.id         \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')        \n" +
                "											)        \n" +
                "										)        \n" +
                "				)                                                    \n" +
                "		)                                  \n" +
                "		ORDER BY mfgPN;         \n" +
                "  \n" +
                "	ELSE        \n" +
                "    -- select pstrictCustomPart;  \n" +
                "	  /* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,         \n" +
                "	  Reports,  Price Break Update,  Customer Part,  Good-Bad Mapping Part,  Supplier Quote,  Supplier RMAb*/        \n" +
                "  \n" +
                "		select *         \n" +
                "		from        \n" +
                "		(        \n" +
                "			select 	c.id, 						CONCAT('(', m.mfgCode, ') ', c.mfgPN) mfgPN,        \n" +
                "					c.mfgPN orgMfgPN,			c.packaginggroupID,					c.PIDCode,        \n" +
                "					c.isGoodPart,				c.RoHSStatusID,						c.rohsgroupID,        \n" +
                "					c.mfgcodeID,        \n" +
                "					m.mfgCode,					m.mfgName,							m.mfgType,        \n" +
                "					c.tolerance,				c.category,							c.imageURL,        \n" +
                "					c.documentPath,				c.mfgPNDescription,					c.minOperatingTemp,        \n" +
                "					c.maxOperatingTemp,			c.value,							c.partPackage,        \n" +
                "					c.powerRating,				c.functionalCategoryID,				c.mountingTypeID,        \n" +
                "					c.connecterTypeID,			c.noOfPosition,           	 		c.noOfRows,        \n" +
                "					c.pitch,            		c.pitchMating,            			c.length,        \n" +
                "					c.width,            		c.height,							c.voltage,        \n" +
                "					c.weight,            		c.feature,            				c.color,        \n" +
                "					c.partStatus,            	c.uom,            					c.uomClassID,        \n" +
                "					c.unit,            			c.restrictUsePermanently,			c.restrictUSEwithpermission,        \n" +
                "					c.restrictPackagingUsePermanently,								c.restrictPackagingUseWithpermission,        \n" +
                "					c.packagingID,				c.packaging,        \n" +
                "					u.abbreviation AS uomName,	u.unitName AS unitName,        \n" +
                "					r.rohsIcon,					r.name AS rohsName,        \n" +
                "					c.partPackageID,			c.bomLock,							c.businessRisk,        \n" +
                "					c.costCategoryID,			c.deviceMarking,					c.driverToolRequired,        \n" +
                "					c.eau,						c.epicorType,						c.functionalTestingRequired,        \n" +
                "					c.heightText,				c.isCPN,							c.isCustom,        \n" +
                "					c.leadTime,            		c.matingPartRquired,				c.maxPriceLimit,        \n" +
                "					c.maxQtyonHand,           	c.minimum,							c.mult,        \n" +
                "					c.packageQty,            	c.partType,							c.pcbPerArray,        \n" +
                "					c.pickupPadRequired,		c.plannedOverRunPercentagePerBuild, c.plannedValuePerBuild,        \n" +
                "					c.programingRequired,		c.rfqOnly,							c.saftyStock,        \n" +
                "					c.scrapRatePercentagePerBuild,		c.scrapValuePerBuild,		c.selfLifeDays,        \n" +
                "					c.shelfListDaysThresholdPercentage,	c.temperatureCoefficient,	c.temperatureCoefficientUnit,				        \n" +
                "					c.temperatureCoefficientValue,		c.trackSerialNumber,		c.refSupplierMfgpnComponentID,        \n" +
                "					c.refMfgPNMfgCodeId,        \n" +
                "					vu.mfgName  supplierPartMfgName,        \n" +
                "					vu.mfgPN supplierPartMfgPn,        \n" +
                "					vu.mfgCode supplierPartMfgCode,        \n" +
                "					c.isWaterSoluble,			c.isNoClean,						c.isFluxNotApplicable,        \n" +
                "					c.detailDescription,		c.isHazmatMaterial, 				c.umidSPQ  \n" +
                "			from component c        \n" +
                "			INNER JOIN	mfgCodemst m ON m.id = c.mfgcodeID AND m.mfgType = IFNULL(pMfgType, m.mfgType)        \n" +
                "			INNER JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0        \n" +
                "			INNER JOIN uoms u ON u.id = c.uom AND u.isdeleted = 0        \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId        \n" +
                "			WHERE 	c.isdeleted = 0        \n" +
                "			AND 	c.id = IFNULL(pId, c.id)        \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart, c.isGoodPart)        \n" +
                "			AND 	c.RoHSStatusID = IFNULL(pRoHSStatusID, c.RoHSStatusID)        \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)        \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)        \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)        \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID, c.packagingID)        \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)        \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)          \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN = c.isCPN ELSE c.isCPN = FALSE END)        \n" +
                "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)        \n" +
                "			AND 	(CASE WHEN pstrictCustomPart = 0 THEN c.iscustom = 0 ELSE 1 = 1 END)    \n" +
                "		) AS a        \n" +
                "		WHERE (        \n" +
                "				(pSearch IS NULL AND 1 = 1) OR         \n" +
                "				(pSearch IS NOT NULL AND         \n" +
                "					(        \n" +
                "						a.mfgPN LIKE CONCAT('%', pSearch, '%') OR         \n" +
                "						EXISTS( SELECT  1        \n" +
                "								FROM 	component_otherpn opn        \n" +
                "								WHERE 	opn.refcomponentid = a.id        \n" +
                "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))        \n" +
                "					)        \n" +
                "				)        \n" +
                "			)        \n" +
                "		ORDER BY mfgPN;                    \n" +
                "	END IF;                            \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(                                                  \n" +
                "	IN pFromPartID INT,                                      \n" +
                "    IN pNewEpicorType varchar(50),                                      \n" +
                "    IN pNewAssemblyType INT,                                      \n" +
                "    IN pNewMfgcodeID INT,                                      \n" +
                "    IN pNewCustAssyPN varchar(500),                                      \n" +
                "    IN pNewPartRev varchar(50),                                      \n" +
                "    IN pNewMfgPN varchar(100),                                      \n" +
                "    IN pNewAssyCode varchar(50),                                      \n" +
                "    IN pNewNickName varchar(50),                                      \n" +
                "    IN pNewPIDCode varchar(109),                                \n" +
                "    IN pIsCPN tinyint,                          \n" +
                "    IN pIsCustom tinyInt,                          \n" +
                "    IN pUserID Int,                                                  \n" +
                "    IN pUserRoleId Int,                                                  \n" +
                "    IN pIsAttribute tinyint,                                                  \n" +
                "    IN pIsSettings tinyint,                                                  \n" +
                "    IN pIsAdditionalAttibute tinyint,                                                  \n" +
                "    IN pIsPackagingDetail tinyint,                                                  \n" +
                "    IN pIsStandards tinyint,                                                  \n" +
                "    IN pIsRequiredFunctionalType tinyint,                                                  \n" +
                "    IN pIsRequiredMountingType tinyint,                                                  \n" +
                "    IN pIsPackagingAliasPart tinyint,                                                  \n" +
                "    IN pIsOtherPartName tinyint,                                                  \n" +
                "    IN pIsAlternatePart tinyint,                                                  \n" +
                "    IN pIsRoHSReplacementPart tinyint,                                                  \n" +
                "    IN pIsDriveTool tinyint,                                                  \n" +
                "    IN pIsProcessMaterial tinyint,                                                  \n" +
                "    IN pIsRequiredMattingParts tinyint,                                                  \n" +
                "    IN pIsPickupPad tinyint,                                                  \n" +
                "    IN pIsFunctionalTesingTool tinyint,                                                  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,                                                  \n" +
                "    IN pIsBOM tinyint,                          \n" +
                "    IN pIsFluxType tinyInt,                          \n" +
                "    IN pIsComments tinyInt,              \n" +
                "    IN pIsCopyImages tinyInt,              \n" +
                "    IN pIsCopyDatasheet tinyInt,              \n" +
                "    IN pIsCopyDocument tinyInt,              \n" +
                "    IN pIsOperationalAttirbutes tinyInt,              \n" +
                "    IN pIsAcceptableShippinCountry tinyInt,              \n" +
                "    IN pIsTrackSNumber tinyInt,              \n" +
                "    IN pMfgPNDescription varchar(2000),              \n" +
                "    IN pDetailDescription varchar(2000)              \n" +
                ")  \n" +
                "BEGIN                                                  \n" +
                "DECLARE vValidationPassed tinyint;                                      \n" +
                "DECLARE vFromPartCategory tinyint;                                      \n" +
                "DECLARE vFromMfgType varchar(5);                                  \n" +
                "DECLARE vCount INT;                                                \n" +
                "DECLARE vToPartID INT;                                                \n" +
                "DECLARE vUserRoleId INT;                    \n" +
                "DECLARE vMisMatchFields longtext;                                         \n" +
                "/*DECLARE EXIT HANDLER FOR SQLEXCEPTION                                                  \n" +
                "BEGIN                                                  \n" +
                "	ROLLBACK;                                                  \n" +
                "	RESIGNAL;                                                  \n" +
                "END;                                                  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                                                  \n" +
                "  BEGIN                                                  \n" +
                "	ROLLBACK;                                                  \n" +
                "	RESIGNAL;                                                  \n" +
                "END;  */                    \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;                      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;                      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;                  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail                  \n" +
                "    select * from component where 1 = 2;                  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail                  \n" +
                "    select * from component where 1 = 2;                  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail                  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;                  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed                                      \n" +
                "  \n" +
                "    select co.category, m.mfgType                                  \n" +
                "      into vFromPartCategory, vFromMfgType                                  \n" +
                "	  from component co                                   \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID                                  \n" +
                "	 where co.id = pFromPartID;                                  \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/                                  \n" +
                "		set pIsAttribute = 1;                                  \n" +
                "        set pIsAdditionalAttibute = 1;                                  \n" +
                "    end if;                                  \n" +
                "  \n" +
                "	set vCount = 0;                                      \n" +
                "    if (vFromPartCategory = 3) then # check category                                      \n" +
                "	   select count(1) into vCount                                                \n" +
                "		 from component co                                                \n" +
                "		where co.mfgcodeID = pNewMfgcodeID                                      \n" +
                "          and co.category = 3                                      \n" +
                "		  and co.custAssyPN = pNewCustAssyPN                                    \n" +
                "		  and co.rev = pNewPartRev                                                \n" +
                "          and co.isDeleted = 0                                                \n" +
                "		  and co.deletedAt is null;                                               \n" +
                "		if vCount > 0 then                                      \n" +
                "			set vValidationPassed = 0;                                      \n" +
                "            select 'DUPLICATE_REV' as message;                                      \n" +
                "        end if;                                      \n" +
                "  \n" +
                "         set vCount = 0;                                      \n" +
                "		 select count(1) into vCount                                      \n" +
                "			 from component co                                      \n" +
                "			where co.nickName != pNewNickName                                      \n" +
                "              and co.category = 3                                      \n" +
                "              and co.custAssyPN = pNewCustAssyPN                                      \n" +
                "              and co.mfgcodeID = pNewMfgcodeID                                      \n" +
                "			  and co.isDeleted = 0                                      \n" +
                "			  and co.deletedAt is null;                                       \n" +
                "		  if vCount > 0 then                                      \n" +
                "			set vValidationPassed = 0;                                      \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,                                      \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName                                      \n" +
                "				 from component co                                      \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID                                      \n" +
                "				where co.nickName != pNewNickName                                      \n" +
                "				  and co.category = 3                                      \n" +
                "				  and co.custAssyPN = pNewCustAssyPN                                      \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID                                      \n" +
                "				  and co.isDeleted = 0                                      \n" +
                "				  and co.deletedAt is null                                      \n" +
                "				  limit 1;                                      \n" +
                "		  end if;                                      \n" +
                "  \n" +
                "		set vCount = 0;                                      \n" +
                "		 select count(1) into vCount                                      \n" +
                "			 from component co                                      \n" +
                "			where co.nickName = pNewNickName                                      \n" +
                "              and co.category = 3                                      \n" +
                "              and co.custAssyPN != pNewCustAssyPN                                      \n" +
                "              and co.mfgcodeID = pNewMfgcodeID                                      \n" +
                "			  and co.isDeleted = 0                                    \n" +
                "			  and co.deletedAt is null;                                      \n" +
                "		 if vCount > 0 then                                      \n" +
                "			set vValidationPassed = 0;                                      \n" +
                "				select 'DUPLICATE_NICKNAME' as message,                                      \n" +
                "                        custAssyPN                                      \n" +
                "				 from component co                                      \n" +
                "				where co.nickName = pNewNickName                                      \n" +
                "				  and co.category = 3                                      \n" +
                "				  and co.custAssyPN != pNewCustAssyPN                                      \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID                                      \n" +
                "				  and co.isDeleted = 0                                    \n" +
                "				  and co.deletedAt is null                                      \n" +
                "				  limit 1;                                      \n" +
                "		  end if;                                      \n" +
                "	end if;                                      \n" +
                "  \n" +
                "    set vCount = 0;                                      \n" +
                "		select count(1) into vCount                                                \n" +
                "		 from component co                                                \n" +
                "		where co.mfgcodeID = pNewMfgcodeID                                      \n" +
                "		  and co.mfgPN = pNewMfgPN                                                \n" +
                "          and co.isDeleted = 0                                    \n" +
                "		  and co.deletedAt is null;                                               \n" +
                "	 if vCount > 0 then                                      \n" +
                "		set vValidationPassed = 0;                                      \n" +
                "        select 'DUPLICATE_MFGPN' as message;                                      \n" +
                "     end if;                                      \n" +
                "  \n" +
                "    set vCount = 0;                                      \n" +
                "		select count(1) into vCount                                                \n" +
                "		 from component co                                                \n" +
                "		where co.PIDCode = pNewPIDCode                                                \n" +
                "		  and co.isDeleted = 0                                    \n" +
                "		  and co.deletedAt is null;                                           \n" +
                "    if vCount > 0 then                                      \n" +
                "		set vValidationPassed = 0;                                      \n" +
                "        select 'DUPLICATE_PID' as message;                                      \n" +
                "     end if;                                      \n" +
                "  \n" +
                "	if vValidationPassed = 1 then  #1 passed, 0 failed                            \n" +
                "		-- START TRANSACTION;                      \n" +
                "		insert into component(                                                \n" +
                "				isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,                                                \n" +
                "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,                                                \n" +
                "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,                                                \n" +
                "				partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,                                                \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,                                                \n" +
                "				countryOfOrigin, htsCode, createdBy, createByRoleId,                                                \n" +
                "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,                                  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,            \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,            \n" +
                "                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference)                                      \n" +
                "		select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,                                                \n" +
                "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,                                                \n" +
                "				pMfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,                                                \n" +
                "				partStatus, partStatusText, leadTime, fun_getComponent_Serial_Number(pUserID)/*serialNumber*/, RoHSStatusID,                                                \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,                                                \n" +
                "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,                                                \n" +
                "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,pDetailDescription,                                  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,                          \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),                          \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),                          \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),                          \n" +
                "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,                 \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,                                     \n" +
                "                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),              \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN requiredTestTime ELSE null END),                            \n" +
                "                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),            \n" +
                "                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),            \n" +
                "                (CASE WHEN (pIsDriveTool = 1) THEN driverToolRequired ELSE 0 END),            \n" +
                "                (CASE WHEN (pIsRequiredMattingParts = 1) THEN matingPartRquired ELSE 0 END),            \n" +
                "                (CASE WHEN (pIsPickupPad = 1) THEN pickupPadRequired ELSE 0 END),            \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN functionalTestingRequired ELSE 0 END),  \n" +
                "                internalReference  \n" +
                "		 from component                                                \n" +
                "		where id = pFromPartID;                                                \n" +
                "		set vToPartID = LAST_INSERT_ID();                      \n" +
                "  \n" +
                "		IF pIsAttribute  then                                                    \n" +
                "			UPDATE `component` toPart,                                                   \n" +
                "			(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,                                                  \n" +
                "			`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,                                                  \n" +
                "			`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,                                                  \n" +
                "			`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart                                                  \n" +
                "			SET                                                  \n" +
                "			toPart.`functionalCategoryID` = fromPart.functionalCategoryID,                                                  \n" +
                "			toPart.`functionalCategoryText` = fromPart.functionalCategoryText,                                                  \n" +
                "			toPart.`mountingTypeID` = fromPart.mountingTypeID,                                                  \n" +
                "			toPart.`mountingTypeText` = fromPart.mountingTypeText,                                                  \n" +
                "			toPart.`operatingTemp` = fromPart.operatingTemp,                                                  \n" +
                "			toPart.`minOperatingTemp` = fromPart.minOperatingTemp,                                                  \n" +
                "			toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,                                                  \n" +
                "			toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,                                                  \n" +
                "			toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,                                                  \n" +
                "			toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,                                                  \n" +
                "			toPart.`connecterTypeID` = fromPart.connecterTypeID,                                                  \n" +
                "			toPart.`connectorTypeText` = fromPart.connectorTypeText,                                                  \n" +
                "			toPart.`noOfPositionText` = fromPart.noOfPositionText,                                                  \n" +
                "			toPart.`noOfPosition` = fromPart.noOfPosition,                                                  \n" +
                "			toPart.`noOfRowsText` = fromPart.noOfRowsText,                                                  \n" +
                "			toPart.`noOfRows` = fromPart.noOfRows,                                                  \n" +
                "			toPart.`pitch` = fromPart.pitch,                                                  \n" +
                "			toPart.`pitchMating` = fromPart.pitchMating,                                                  \n" +
                "			toPart.`sizeDimension` = fromPart.sizeDimension,                                                  \n" +
                "			toPart.`length` = fromPart.length,                                                  \n" +
                "			toPart.`width` = fromPart.width,                                                  \n" +
                "			toPart.`heightText` = fromPart.heightText,                                                  \n" +
                "			toPart.`height` = fromPart.height,                                                  \n" +
                "			toPart.`updatedBy` = pUserID,                                                  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,                                          \n" +
                "			toPart.`updatedAt` = current_timestamp()                                                  \n" +
                "			WHERE toPart.`id` = vToPartID;                                                  \n" +
                "		end if;                                                  \n" +
                "		IF pIsSettings then                                                  \n" +
                "			UPDATE `component` toPart,                                                   \n" +
                "			(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,                                                  \n" +
                "			`selfLifeDays`,`shelfListDaysThresholdPercentage`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,                                                  \n" +
                "			`programingRequired`,`restrictUSEwithpermission`,`bomLock`,`restrictUsePermanently` from component where id = pFromPartID) fromPart                                                  \n" +
                "			SET                                                  \n" +
                "			toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,                                                  \n" +
                "			toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,                                                  \n" +
                "			toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,                                                  \n" +
                "			toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,                                                  \n" +
                "			toPart.`selfLifeDays` = fromPart.selfLifeDays,                                                  \n" +
                "			toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,                                                  \n" +
                "			toPart.`maxPriceLimit` = fromPart.maxPriceLimit,                                                  \n" +
                "			toPart.`maxQtyonHand` = fromPart.maxQtyonHand,                                                  \n" +
                "			toPart.`saftyStock` = fromPart.saftyStock,                                                  \n" +
                "			toPart.`eau` = fromPart.eau,                                                  \n" +
                "			toPart.`businessRisk` = fromPart.businessRisk,                                                                                                     \n" +
                "			toPart.`programingRequired` = fromPart.programingRequired,                                                                                     \n" +
                "			toPart.`restrictUSEwithpermission` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUSEwithpermission END),                                                  \n" +
                "			toPart.`bomLock` = fromPart.bomLock,                                                  \n" +
                "			toPart.`restrictUsePermanently` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUsePermanently END),                                                  \n" +
                "			toPart.`updatedBy` = pUserID,                                                \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,                                          \n" +
                "			toPart.`updatedAt` = current_timestamp()                                                  \n" +
                "			WHERE toPart.`id` = vToPartID;                                                \n" +
                "			INSERT INTO `component_temperature_sensitive_data`                                                  \n" +
                "			(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                                                  \n" +
                "			select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`                                                  \n" +
                "			from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;                                                  \n" +
                "		end if;                                                  \n" +
                "		IF pIsAdditionalAttibute then                                                  \n" +
                "			UPDATE `component` toPart,                                                   \n" +
                "			(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`                                                   \n" +
                "			from component where id = pFromPartID) fromPart                                                  \n" +
                "			SET                                                  \n" +
                "			toPart.`tolerance` = fromPart.tolerance,                                                  \n" +
                "			toPart.`voltage` = fromPart.voltage,                                                  \n" +
                "			toPart.`value` = fromPart.value,                                                  \n" +
                "			toPart.`partPackage` = fromPart.partPackage,                                                  \n" +
                "			toPart.`powerRating` = fromPart.powerRating,                                                  \n" +
                "			toPart.`weight` = fromPart.weight,                                                  \n" +
                "			toPart.`feature` = fromPart.feature,                                                  \n" +
                "			toPart.`color` = fromPart.color,                                                  \n" +
                "			toPart.`updatedBy` = pUserID,                                                  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,                                          \n" +
                "			toPart.`updatedAt` = current_timestamp()                                                  \n" +
                "			WHERE toPart.`id` = vToPartID;                                                  \n" +
                "		end if;                                                  \n" +
                "		IF pIsPackagingDetail then                                                  \n" +
                "			UPDATE `component` toPart,                                                   \n" +
                "			(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,                                                  \n" +
                "			`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom`,`umidSPQ` from component where id = pFromPartID) fromPart                                                  \n" +
                "			SET                                                  \n" +
                "			toPart.`deviceMarking` = fromPart.deviceMarking,                                                  \n" +
                "			toPart.`packagingID` = fromPart.packagingID,                                                  \n" +
                "			toPart.`minimum` = fromPart.minimum,                                                  \n" +
                "			toPart.`mult` = fromPart.mult,                                                  \n" +
                "			toPart.`packageQty` = fromPart.packageQty,                         \n" +
                "			toPart.`umidSPQ` = fromPart.umidSPQ,        \n" +
                "			toPart.`uomClassID` = fromPart.uomClassID,                                                  \n" +
                "			toPart.`uom` = fromPart.uom,                                                  \n" +
                "			toPart.`uomText` = fromPart.uomText,                                                  \n" +
                "			toPart.`unit` = fromPart.unit,                                                  \n" +
                "			toPart.`pcbPerArray` = fromPart.pcbPerArray,                                                  \n" +
                "			toPart.`grossWeight` = fromPart.grossWeight,                                                  \n" +
                "			toPart.`grossWeightUom` = fromPart.grossWeightUom,                                                  \n" +
                "			toPart.`packagingWeight` = fromPart.packagingWeight,                                                  \n" +
                "			toPart.`packagingWeightUom` = fromPart.packagingWeightUom,                                                  \n" +
                "			toPart.`updatedBy` = pUserID,                                                  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,                                          \n" +
                "			toPart.`updatedAt` = current_timestamp()                                                  \n" +
                "			WHERE toPart.`id` = vToPartID;                                                  \n" +
                "		end if;                                                  \n" +
                "		if pIsStandards then                                                  \n" +
                "			UPDATE `component` toPart,                                                   \n" +
                "			(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart                                                  \n" +
                "			SET                                                  \n" +
                "			toPart.`countryOfOrigin` = fromPart.countryOfOrigin,                                                  \n" +
                "			toPart.`htsCode` = fromPart.htsCode,                                                  \n" +
                "			toPart.`updatedBy` = pUserID,                                                  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,                                          \n" +
                "			toPart.`updatedAt` = current_timestamp()                                                  \n" +
                "			WHERE toPart.`id` = vToPartID;                                                  \n" +
                "			INSERT INTO `component_standard_details`                                                  \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)                                                  \n" +
                "			select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`                                                  \n" +
                "			from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null                                                  \n" +
                "			and not exists (select 1 from component_standard_details csd                                                  \n" +
                "			where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));                                                  \n" +
                "		end if;                                                  \n" +
                "		if pIsRequiredMountingType then                                                  \n" +
                "			INSERT INTO `component_requiremountingtype`                                                  \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                                                  \n" +
                "			SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                                                  \n" +
                "			FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                                                   \n" +
                "			and not exists (select 1 from component_requiremountingtype                                                   \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);              \n" +
                "		end if;                                                  \n" +
                "		if pIsRequiredFunctionalType then                                                  \n" +
                "			INSERT INTO `component_requirefunctionaltype`                                                  \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                                                  \n" +
                "			SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                                                  \n" +
                "			FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                                                  \n" +
                "			and not exists (select 1 from component_requirefunctionaltype                                                   \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);            \n" +
                "		end if;                                                  \n" +
                "		IF pIsAcceptableShippinCountry then                   \n" +
                "			INSERT INTO component_acceptable_shipping_countries              \n" +
                "				(refComponentID,countryID,createdAt,createdBy,createByRoleId)              \n" +
                "			SELECT               \n" +
                "				vToPartID,countryID,current_timestamp(),pUserID,pUserRoleId              \n" +
                "			FROM              \n" +
                "				component_acceptable_shipping_countries where refComponentID= pFromPartID and isDeleted = 0;              \n" +
                "		end if;              \n" +
                "  \n" +
                "		IF(pIsPackagingAliasPart)                  \n" +
                "		THEN                  \n" +
                "			set vMisMatchFields  = '';                  \n" +
                "			CALL  Sproc_CheckPackagingAlias_Validation(vToPartID,pFromPartID, vMisMatchFields);                  \n" +
                "			set vValidationPassed = (select CASE WHEN (vMisMatchFields  != '') THEN 0 ELSE 1 END);                  \n" +
                "		END IF;                  \n" +
                "		IF(vValidationPassed = 0)                  \n" +
                "		THEN                  \n" +
                "			ROLLBACK;                                                     \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;                      \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;                      \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;                  \n" +
                "			select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;                         \n" +
                "		ELSE               \n" +
                "			if pIsPackagingAliasPart then                       \n" +
                "				set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);                                                  \n" +
                "				set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);                                                  \n" +
                "				if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then                                                  \n" +
                "					# generate new packaging alias group id                                                  \n" +
                "					set @newPackagingGroupID = (SELECT ifnull(`maxValue`,0) FROM `identity` WHERE `type`= 'PackagingGroupID' AND isdeleted=0 limit 1);                                                  \n" +
                "					# update alias group id as new packaging alias group id in packaging alias table                                                  \n" +
                "					update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);                                                  \n" +
                "					# update packaging alias group id as new packaging alias group id in component table                                                  \n" +
                "					update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);                     \n" +
                "					# update Identity value with new Max Value                   \n" +
                "					UPDATE `identity` SET `maxvalue`= @newPackagingGroupID + 1,`updatedAt`= current_timestamp() ,                \n" +
                "							`updatedBy`= pUserID, `updateByRoleId`= pUserRoleId WHERE `type`='PackagingGroupID' AND isdeleted=0;                   \n" +
                "				elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then                                                  \n" +
                "					# generate new packaging alias group id                    \n" +
                "					set @newPackagingGroupID = (SELECT ifnull(`maxValue`,0) FROM `identity` WHERE `type`= 'PackagingGroupID' AND isdeleted=0 limit 1);                  \n" +
                "					# Insert data in packaging alias table for ToPartID  & FromPartID                                                \n" +
                "					INSERT INTO `component_packagingalias`                                                  \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                                                  \n" +
                "					values                  \n" +
                "					(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                  \n" +
                "					INSERT INTO `component_packagingalias`                                                  \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                                                  \n" +
                "					values                  \n" +
                "					(@newPackagingGroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                  \n" +
                "					# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId                                               \n" +
                "					update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,vToPartID);	                   \n" +
                "					# update Identity value with new Max Value                   \n" +
                "					UPDATE `identity` SET `maxvalue`= @newPackagingGroupID + 1,`updatedAt`= current_timestamp() ,                \n" +
                "							`updatedBy`= pUserID, `updateByRoleId`= pUserRoleId WHERE `type`='PackagingGroupID' AND isdeleted=0;                   \n" +
                "				elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then                                                  \n" +
                "				# Insert data in packaging alias table for ToPartID                                                  \n" +
                "					INSERT INTO `component_packagingalias`                                                  \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                                                  \n" +
                "					values                  \n" +
                "					(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                  \n" +
                "				# Update data for packaging alias group id for  ToPartID                  \n" +
                "					update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;                  \n" +
                "				elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then                                                  \n" +
                "				# Insert data in packaging alias table for ToPartID                                                  \n" +
                "					INSERT INTO `component_packagingalias`                                                  \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                                                  \n" +
                "					values                                                  \n" +
                "					(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                                                  \n" +
                "				# Update data for packaging alias group id for  FromPartID		                                                  \n" +
                "					update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;                     \n" +
                "				end if;                                                  \n" +
                "			end if;                                                  \n" +
                "			if pIsOtherPartName then                                                  \n" +
                "				INSERT INTO `component_otherpn`                                                  \n" +
                "				(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                                                  \n" +
                "				SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                                                  \n" +
                "				FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                                                  \n" +
                "				and not exists (select 1 from component_otherpn                                                   \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);                                                  \n" +
                "			end if;                                                  \n" +
                "			If pIsAlternatePart then                                                  \n" +
                "				INSERT INTO `component_alternatepn`                                                  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                                                  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                                                  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                                                  \n" +
                "				and not exists (select 1 from component_alternatepn                                                   \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);                                                  \n" +
                "			end if;                                      \n" +
                "			if pIsRoHSReplacementPart then                                \n" +
                "				INSERT INTO `component_alternatepn`                                                  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                                                  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                                                  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 6 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                                                  \n" +
                "				and not exists (select 1 from component_alternatepn                                                   \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 6);               \n" +
                "			end if;                                                  \n" +
                "			if pIsDriveTool then                                                  \n" +
                "				INSERT INTO `component_drivetools`                                                  \n" +
                "				(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)                                                  \n" +
                "				SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`                                                  \n" +
                "				FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID                                                  \n" +
                "				and not exists (select 1 from component_drivetools                                                   \n" +
                "				where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);                                      				                                                 \n" +
                "			end if;                                                  \n" +
                "			if pIsProcessMaterial then                                                  \n" +
                "				INSERT INTO `component_processmaterial`                                                  \n" +
                "				(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)                                                  \n" +
                "				SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`                                                  \n" +
                "				FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID                                                  \n" +
                "				and not exists (select 1 from component_processmaterial                                                   \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);                                                   \n" +
                "			end if;                                                  \n" +
                "			if pIsRequiredMattingParts then                                                  \n" +
                "				INSERT INTO `component_alternatepn`                                                  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                                                  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                                                  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                                                  \n" +
                "				and not exists (select 1 from component_alternatepn                                                   \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);                                      				                                                 \n" +
                "			end if;                                                  \n" +
                "			if pIsPickupPad then                                                  \n" +
                "				INSERT INTO `component_alternatepn`                                                  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                                                  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                                                  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                                                  \n" +
                "				and not exists (select 1 from component_alternatepn                                                   \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);            \n" +
                "			end if;                                      \n" +
                "			if pIsFunctionalTesingTool then                                                  \n" +
                "				INSERT INTO `component_alternatepn`                                                  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                                                  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                                                  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                                                  \n" +
                "				and not exists (select 1 from component_alternatepn                                                   \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);                                      				                                                  \n" +
                "			end if;                                                  \n" +
                "			if pIsFinctionalRestingEquipment then                                                  \n" +
                "				INSERT INTO `component_functionaltestingequipment`                                                  \n" +
                "				(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                                                  \n" +
                "				SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                                                  \n" +
                "				FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                                                  \n" +
                "				and not exists (select 1 from component_functionaltestingequipment                                                   \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);                                                  \n" +
                "			end if;                                                  \n" +
                "			if (vFromPartCategory = 3) then                                      \n" +
                "				if pIsBOM then                   \n" +
                "					CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);                                          \n" +
                "				end if;                                                \n" +
                "				call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);                                            \n" +
                "			end if;                            \n" +
                "			if(pIsComments = 1) THEN                           \n" +
                "					INSERT INTO componenet_inspection_requirement_det                          \n" +
                "							(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)                          \n" +
                "					select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),                          \n" +
                "					pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;                          \n" +
                "					INSERT INTO assembly_revision_comments                          \n" +
                "						(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)				                          \n" +
                "					select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where                           \n" +
                "						partID = pFromPartID;                          \n" +
                "			END IF;                    \n" +
                "  \n" +
                "            CALL Sproc_getRefTransDetailForDocument('component',vToPartID,false);              \n" +
                "			IF pIsCopyImages  then                        \n" +
                "				insert into component_images                                                \n" +
                "						(imageURL, refComponentID, createdBy,createdAt, createByRoleId)                                                \n" +
                "				select imageURL, vToPartID,pUserID, current_timestamp(), pUserRoleId              \n" +
                "				 from component_images                                                \n" +
                "				where refComponentID = pFromPartID and isDeleted = false;                 \n" +
                "			end if;              \n" +
                "			IF pIsCopyDatasheet  then                   \n" +
                "				insert into component_datasheets                                                \n" +
                "						(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)                                                \n" +
                "				select datasheetURL, vToPartID,pUserID ,current_timestamp(), pUserRoleId              \n" +
                "				from component_datasheets                                                \n" +
                "					where refComponentID = pFromPartID and isDeleted = false;                     \n" +
                "			end if;              \n" +
                "            IF pIsOperationalAttirbutes  then                   \n" +
                "				INSERT INTO component_dynamic_attribute_mapping_part              \n" +
                "					(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)              \n" +
                "				SELECT               \n" +
                "					vToPartID,attributeID,attributeValue,current_timestamp(),pUserID,pUserRoleId              \n" +
                "				FROM              \n" +
                "				component_dynamic_attribute_mapping_part where mfgPNID= pFromPartID and isDeleted = 0;                    \n" +
                "			end if;              \n" +
                "            IF pIsCopyDocument then                  \n" +
                "                # [S] - copy document_folder from selected part/assembly level to new part              \n" +
                "				INSERT INTO generic_folder                                                                      \n" +
                "						(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                                                      \n" +
                "						`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)                                                                      \n" +
                "				SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,                                                                      \n" +
                "						0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,                                    \n" +
                "						a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId                                                           \n" +
                "				FROM generic_folder a                                     \n" +
                "				WHERE a.refTransID = pFromPartID                                     \n" +
                "				AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;                                                                      \n" +
                "  \n" +
                "				UPDATE generic_folder gf1,                                                                      \n" +
                "				(   SELECT a.gencFolderID, a.copyGencFolderID                                                                      \n" +
                "					FROM generic_folder a WHERE a.refTransID = vToPartID                                 \n" +
                "					AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0                               \n" +
                "				) gf2                                                                      \n" +
                "				SET gf1.refParentId = gf2.gencFolderID                                                                      \n" +
                "				WHERE gf1.refParentId = gf2.copyGencFolderID                                     \n" +
                "				AND gf1.refTransID = vToPartID                                 \n" +
                "				AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;                                     \n" +
                "				# [E] - copy generic_folder from selected part/assembly level to new part              \n" +
                "  \n" +
                "                INSERT INTO genericfiles              \n" +
                "					(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,              \n" +
                "					entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,              \n" +
                "					refCopyTransID,refCopyGencFileOwnerType,createByRoleId)              \n" +
                "				select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,              \n" +
                "					entityID,gencFileOwnerType,isActive,genFilePath,current_timestamp(),pUserID,isShared,fileGroupBy,refParentId,fileSize,              \n" +
                "					pFromPartID,refCopyGencFileOwnerType,pUserRoleId               \n" +
                "				from genericfiles where refTransID = pFromPartID and entityID = -9 and isRecycle = 0 and isDeleted = 0;                \n" +
                "  \n" +
                "                UPDATE genericfiles gf1,                                                                      \n" +
                "				(   SELECT a.gencFolderID, a.copyGencFolderID                                                                      \n" +
                "					FROM generic_folder a WHERE a.refTransID = vToPartID                                 \n" +
                "					AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0                               \n" +
                "				) gf2                                                                      \n" +
                "				SET gf1.refParentId = gf2.gencFolderID                                                                      \n" +
                "				WHERE gf1.refParentId = gf2.copyGencFolderID                                     \n" +
                "				AND gf1.refTransID = vToPartID                                  \n" +
                "				AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;                         \n" +
                "			end if;              \n" +
                "  \n" +
                "            -- commit;            \n" +
                "            set @documentPathOfFromPart = (select documentPath from component where id = pFromPartID);            \n" +
                "            IF(@documentPathOfFromPart is null)            \n" +
                "            THEN 				            \n" +
                "				CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,false);             \n" +
                "            END IF;            \n" +
                "			select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;                        \n" +
                "		END IF;                  \n" +
                "	end if;                                               \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_CopyPartDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyPartDetail`(            \n" +
                "	IN pFromPartID INT(11),            \n" +
                "    IN pToPartID INT(11),            \n" +
                "    IN pUserID Int(11),             \n" +
                "    IN pIsAttribute tinyint(1),            \n" +
                "    IN pIsSettings tinyint(1),            \n" +
                "    IN pIsAdditionalAttibute tinyint(1),            \n" +
                "    IN pIsPackagingDetail tinyint(1),            \n" +
                "    IN pIsStandards tinyint(1),            \n" +
                "    IN pIsRequiredFunctionalType tinyint(1),            \n" +
                "    IN pIsRequiredMountingType tinyint(1),            \n" +
                "    IN pIsPackagingAliasPart tinyint(1),            \n" +
                "    IN pIsOtherPartName tinyint(1),            \n" +
                "    IN pIsAlternatePart tinyint(1),            \n" +
                "    IN pIsRoHSReplacementPart tinyint(1),            \n" +
                "    IN pIsDriveTool tinyint(1),            \n" +
                "    IN pIsProcessMaterial tinyint(1),            \n" +
                "    IN pIsRequiredMattingParts tinyint(1),            \n" +
                "    IN pIsPickupPad tinyint(1),            \n" +
                "    IN pIsProgram tinyint(1),            \n" +
                "    IN pIsFunctionalTesingTool tinyint(1),            \n" +
                "    IN pIsFinctionalRestingEquipment tinyint(1)            \n" +
                ")  \n" +
                "BEGIN            \n" +
                "DECLARE vValidationPassed tinyint;            \n" +
                "DECLARE vMisMatchFields longtext;          \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION            \n" +
                "BEGIN            \n" +
                "	ROLLBACK;            \n" +
                "	RESIGNAL;            \n" +
                "END;            \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING            \n" +
                "  BEGIN            \n" +
                "	ROLLBACK;            \n" +
                "	RESIGNAL;            \n" +
                "END;             \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;              \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;              \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail          \n" +
                "    select * from component where 1 = 2;          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail          \n" +
                "    select * from component where 1 = 2;           \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail          \n" +
                "    select * from component_alternatepn_validations where 1 = 2;          \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed                        \n" +
                "  \n" +
                "	START TRANSACTION;          \n" +
                "	IF pIsAttribute  then              \n" +
                "		UPDATE `component` toPart,             \n" +
                "		(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,            \n" +
                "		`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,            \n" +
                "		`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,            \n" +
                "		`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart            \n" +
                "		SET            \n" +
                "		toPart.`functionalCategoryID` = fromPart.functionalCategoryID,            \n" +
                "		toPart.`functionalCategoryText` = fromPart.functionalCategoryText,            \n" +
                "		toPart.`mountingTypeID` = fromPart.mountingTypeID,            \n" +
                "		toPart.`mountingTypeText` = fromPart.mountingTypeText,            \n" +
                "		toPart.`operatingTemp` = fromPart.operatingTemp,            \n" +
                "		toPart.`minOperatingTemp` = fromPart.minOperatingTemp,            \n" +
                "		toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,            \n" +
                "		toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,            \n" +
                "		toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,            \n" +
                "		toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,            \n" +
                "		toPart.`connecterTypeID` = fromPart.connecterTypeID,            \n" +
                "		toPart.`connectorTypeText` = fromPart.connectorTypeText,            \n" +
                "		toPart.`noOfPositionText` = fromPart.noOfPositionText,            \n" +
                "		toPart.`noOfPosition` = fromPart.noOfPosition,            \n" +
                "		toPart.`noOfRowsText` = fromPart.noOfRowsText,            \n" +
                "		toPart.`noOfRows` = fromPart.noOfRows,            \n" +
                "		toPart.`pitch` = fromPart.pitch,            \n" +
                "		toPart.`pitchMating` = fromPart.pitchMating,            \n" +
                "		toPart.`sizeDimension` = fromPart.sizeDimension,            \n" +
                "		toPart.`length` = fromPart.length,            \n" +
                "		toPart.`width` = fromPart.width,            \n" +
                "		toPart.`heightText` = fromPart.heightText,            \n" +
                "		toPart.`height` = fromPart.height,            \n" +
                "		toPart.`updatedBy` = pUserID,            \n" +
                "		toPart.`updatedAt` = current_timestamp()            \n" +
                "		WHERE toPart.`id` = pToPartID;            \n" +
                "	end if;            \n" +
                "	IF pIsSettings then            \n" +
                "		UPDATE `component` toPart,             \n" +
                "		(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,            \n" +
                "		`selfLifeDays`,`shelfListDaysThresholdPercentage`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,            \n" +
                "		`driverToolRequired`,`matingPartRquired`,`pickupPadRequired`,`programingRequired`,`functionalTestingRequired`,            \n" +
                "		`restrictUSEwithpermission`,`bomLock`,`restrictUsePermanently` from component where id = pFromPartID) fromPart            \n" +
                "		SET            \n" +
                "		toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,            \n" +
                "		toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,            \n" +
                "		toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,            \n" +
                "		toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,            \n" +
                "		toPart.`selfLifeDays` = fromPart.selfLifeDays,            \n" +
                "		toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,            \n" +
                "		toPart.`maxPriceLimit` = fromPart.maxPriceLimit,            \n" +
                "		toPart.`maxQtyonHand` = fromPart.maxQtyonHand,            \n" +
                "		toPart.`saftyStock` = fromPart.saftyStock,            \n" +
                "		toPart.`eau` = fromPart.eau,             \n" +
                "		toPart.`businessRisk` = fromPart.businessRisk,            \n" +
                "		toPart.`driverToolRequired` = fromPart.driverToolRequired,            \n" +
                "		toPart.`matingPartRquired` = fromPart.matingPartRquired,            \n" +
                "		toPart.`pickupPadRequired` = fromPart.pickupPadRequired,            \n" +
                "		toPart.`programingRequired` = fromPart.programingRequired,            \n" +
                "		toPart.`functionalTestingRequired` = fromPart.functionalTestingRequired,            \n" +
                "		toPart.`restrictUSEwithpermission` = fromPart.restrictUSEwithpermission,            \n" +
                "		toPart.`bomLock` = fromPart.bomLock,            \n" +
                "		toPart.`restrictUsePermanently` = fromPart.restrictUsePermanently,            \n" +
                "		toPart.`updatedBy` = pUserID,            \n" +
                "		toPart.`updatedAt` = current_timestamp()            \n" +
                "		WHERE toPart.`id` = pToPartID;            \n" +
                "		INSERT INTO `component_temperature_sensitive_data`            \n" +
                "		(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)            \n" +
                "		select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, pToPartID `refComponentID`            \n" +
                "		from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;            \n" +
                "	end if;            \n" +
                "	IF pIsAdditionalAttibute then            \n" +
                "		UPDATE `component` toPart,             \n" +
                "		(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`             \n" +
                "		from component where id = pFromPartID) fromPart            \n" +
                "		SET            \n" +
                "		toPart.`tolerance` = fromPart.tolerance,            \n" +
                "		toPart.`voltage` = fromPart.voltage,            \n" +
                "		toPart.`value` = fromPart.value,            \n" +
                "		toPart.`partPackage` = fromPart.partPackage,            \n" +
                "		toPart.`powerRating` = fromPart.powerRating,            \n" +
                "		toPart.`weight` = fromPart.weight,            \n" +
                "		toPart.`feature` = fromPart.feature,            \n" +
                "		toPart.`color` = fromPart.color,            \n" +
                "		toPart.`updatedBy` = pUserID,            \n" +
                "		toPart.`updatedAt` = current_timestamp()            \n" +
                "		WHERE toPart.`id` = pToPartID;            \n" +
                "	end if;            \n" +
                "	IF pIsPackagingDetail then            \n" +
                "		UPDATE `component` toPart,             \n" +
                "		(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,            \n" +
                "		`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom`,`umidSPQ` from component where id = pFromPartID) fromPart            \n" +
                "		SET            \n" +
                "		toPart.`deviceMarking` = fromPart.deviceMarking,            \n" +
                "		toPart.`packagingID` = fromPart.packagingID,            \n" +
                "		toPart.`minimum` = fromPart.minimum,            \n" +
                "		toPart.`mult` = fromPart.mult,            \n" +
                "		toPart.`packageQty` = fromPart.packageQty,            \n" +
                "        toPart.`umidSPQ` = fromPart.umidSPQ,        \n" +
                "		toPart.`uomClassID` = fromPart.uomClassID,            \n" +
                "		toPart.`uom` = fromPart.uom,            \n" +
                "		toPart.`uomText` = fromPart.uomText,            \n" +
                "		toPart.`unit` = fromPart.unit,            \n" +
                "		toPart.`pcbPerArray` = fromPart.pcbPerArray,            \n" +
                "		toPart.`grossWeight` = fromPart.grossWeight,            \n" +
                "		toPart.`grossWeightUom` = fromPart.grossWeightUom,            \n" +
                "		toPart.`packagingWeight` = fromPart.packagingWeight,            \n" +
                "		toPart.`packagingWeightUom` = fromPart.packagingWeightUom,            \n" +
                "		toPart.`updatedBy` = pUserID,            \n" +
                "		toPart.`updatedAt` = current_timestamp()            \n" +
                "		WHERE toPart.`id` = pToPartID;            \n" +
                "	end if;            \n" +
                "	if pIsStandards then            \n" +
                "		UPDATE `component` toPart,             \n" +
                "		(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart            \n" +
                "		SET            \n" +
                "		toPart.`countryOfOrigin` = fromPart.countryOfOrigin,            \n" +
                "		toPart.`htsCode` = fromPart.htsCode,            \n" +
                "		toPart.`updatedBy` = pUserID,            \n" +
                "		toPart.`updatedAt` = current_timestamp()            \n" +
                "		WHERE toPart.`id` = pToPartID;            \n" +
                "		INSERT INTO `component_standard_details`            \n" +
                "		(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)            \n" +
                "		select pToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`            \n" +
                "		from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null            \n" +
                "		and not exists (select 1 from component_standard_details csd            \n" +
                "		where componentID = pToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));            \n" +
                "	end if;            \n" +
                "	if pIsRequiredMountingType then            \n" +
                "		INSERT INTO `component_requiremountingtype`            \n" +
                "		(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)            \n" +
                "		SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`            \n" +
                "		FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null             \n" +
                "		and not exists (select 1 from component_requiremountingtype             \n" +
                "		where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);            \n" +
                "		set @requiredMountingTypecount =  (select count(1) from component_requiremountingtype where isDeleted = 0 and deletedat is null and refComponentID = pToPartID);            \n" +
                "		if @requiredMountingTypecount>0 then            \n" +
                "			UPDATE `component` toPart            \n" +
                "			SET            \n" +
                "			toPart.`mountingTypePartRequired` = true,            \n" +
                "			toPart.`updatedBy` = pUserID,            \n" +
                "			toPart.`updatedAt` = current_timestamp()            \n" +
                "			WHERE toPart.`id` = pToPartID;            \n" +
                "		end if;            \n" +
                "	end if;            \n" +
                "	if pIsRequiredFunctionalType then            \n" +
                "		INSERT INTO `component_requirefunctionaltype`            \n" +
                "		(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)            \n" +
                "		SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`            \n" +
                "		FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null            \n" +
                "		and not exists (select 1 from component_requirefunctionaltype             \n" +
                "		where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);            \n" +
                "		set @requiredFunctionalTypecount =  (select count(1) from component_requirefunctionaltype where isDeleted = 0 and deletedat is null and refComponentID = pToPartID);            \n" +
                "		if @requiredFunctionalTypecount>0 then            \n" +
                "			UPDATE `component` toPart            \n" +
                "			SET            \n" +
                "			toPart.`functionalTypePartRequired` = true,            \n" +
                "			toPart.`updatedBy` = pUserID,            \n" +
                "			toPart.`updatedAt` = current_timestamp()            \n" +
                "			WHERE toPart.`id` = pToPartID;            \n" +
                "		end if;            \n" +
                "	end if;            \n" +
                "	IF(pIsPackagingAliasPart)          \n" +
                "	THEN          \n" +
                "		set vMisMatchFields  = '';          \n" +
                "		CALL  Sproc_CheckPackagingAlias_Validation(pToPartID, pFromPartID, vMisMatchFields);          \n" +
                "		set vValidationPassed = (select CASE WHEN (vMisMatchFields != '') THEN 0 ELSE 1 END);          \n" +
                "	END IF;         \n" +
                "	IF(vValidationPassed = 0)          \n" +
                "	THEN                                      \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;              \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;              \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;          \n" +
                "		select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;               \n" +
                "	ELSE        \n" +
                "		if pIsPackagingAliasPart then            \n" +
                "			set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);            \n" +
                "			set @ToPackagingAliasID = (select packaginggroupID from component where id = pToPartID);            \n" +
                "			select @FromPackagingAliasID,@ToPackagingAliasID;          \n" +
                "			if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then            \n" +
                "				# generate new packaging alias group id            \n" +
                "				set @newPackagingGroupID = (SELECT ifnull(`maxValue`,0) FROM `identity` WHERE `type`= 'PackagingGroupID' AND isdeleted=0 limit 1);            \n" +
                "				# update alias group id as new packaging alias group id in packaging alias table            \n" +
                "				update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);            \n" +
                "				# update packaging alias group id as new packaging alias group id in component table            \n" +
                "				update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);            \n" +
                "				# update Identity value with new Max Value           \n" +
                "				UPDATE `identity` SET `maxvalue`= @newPackagingGroupID + 1,`updatedAt`= current_timestamp() ,          \n" +
                "							`updatedBy`= pUserID, `updateByRoleId`= pUserRoleId WHERE `type`='PackagingGroupID' AND isdeleted=0;          \n" +
                "			elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then                                          \n" +
                "				# generate new packaging alias group id            \n" +
                "				set @newPackagingGroupID = (SELECT ifnull(`maxValue`,0)+1 FROM `identity` WHERE `type`= 'PackagingGroupID' AND isdeleted=0 limit 1);          \n" +
                "				select @newPackagingGroupID;          \n" +
                "				# Insert data in packaging alias table for ToPartID  & FromPartID                                        \n" +
                "				INSERT INTO `component_packagingalias`                                          \n" +
                "				(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                                          \n" +
                "				values          \n" +
                "				(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);          \n" +
                "				INSERT INTO `component_packagingalias`                                          \n" +
                "				(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                                          \n" +
                "				values          \n" +
                "				(@newPackagingGroupID, pToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);          \n" +
                "  \n" +
                "				# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId                                       \n" +
                "				update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,pToPartID);	        \n" +
                "                # update Identity value with new Max Value              \n" +
                "                UPDATE `identity` SET `maxvalue`= @newPackagingGroupID + 1,`updatedAt`= current_timestamp() ,          \n" +
                "							`updatedBy`= pUserID, `updateByRoleId`= pUserRoleId WHERE `type`='PackagingGroupID' AND isdeleted=0;             \n" +
                "			elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then            \n" +
                "  \n" +
                "			# Insert data in packaging alias table for ToPartID            \n" +
                "				INSERT INTO `component_packagingalias`            \n" +
                "				(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)            \n" +
                "				values            \n" +
                "				(@FromPackagingAliasID, pToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);            \n" +
                "			# Update data for packaging alias group id for  ToPartID	            \n" +
                "				update component set packaginggroupID = @FromPackagingAliasID where id = pToPartID;            \n" +
                "  \n" +
                "			elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then            \n" +
                "  \n" +
                "			# Insert data in packaging alias table for ToPartID            \n" +
                "				INSERT INTO `component_packagingalias`            \n" +
                "				(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)            \n" +
                "				values            \n" +
                "				(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);            \n" +
                "			# Update data for packaging alias group id for  FromPartID		            \n" +
                "				update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;            \n" +
                "  \n" +
                "			end if;            \n" +
                "		end if;            \n" +
                "		if pIsOtherPartName then            \n" +
                "			INSERT INTO `component_otherpn`            \n" +
                "			(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)            \n" +
                "			SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`            \n" +
                "			FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null            \n" +
                "			and not exists (select 1 from component_otherpn             \n" +
                "			where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);            \n" +
                "		end if;            \n" +
                "		If pIsAlternatePart then            \n" +
                "			INSERT INTO `component_alternatepn`            \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)            \n" +
                "			SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`            \n" +
                "			FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != pToPartID            \n" +
                "			and not exists (select 1 from component_alternatepn             \n" +
                "			where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);            \n" +
                "		end if;            \n" +
                "		if pIsRoHSReplacementPart then            \n" +
                "			INSERT INTO `component_alternatepn`            \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)            \n" +
                "			SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`            \n" +
                "			FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 6 and isDeleted = 0 and deletedAt is null and componentID != pToPartID            \n" +
                "			and not exists (select 1 from component_alternatepn             \n" +
                "			where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 6);            \n" +
                "		end if;            \n" +
                "		if pIsDriveTool then            \n" +
                "			INSERT INTO `component_drivetools`            \n" +
                "			(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)            \n" +
                "			SELECT pToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`            \n" +
                "			FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != pToPartID            \n" +
                "			and not exists (select 1 from component_drivetools             \n" +
                "			where refComponentID = pToPartID and componentID != pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);            \n" +
                "  \n" +
                "			set @DriveToolcount =  (select count(1) from component_drivetools where isDeleted = 0 and deletedat is null and refComponentID = pToPartID);            \n" +
                "			if @DriveToolcount>0 then            \n" +
                "				UPDATE `component` toPart            \n" +
                "				SET            \n" +
                "				toPart.`driverToolRequired` = true,            \n" +
                "				toPart.`updatedBy` = pUserID,            \n" +
                "				toPart.`updatedAt` = current_timestamp()            \n" +
                "				WHERE toPart.`id` = pToPartID;            \n" +
                "			end if;            \n" +
                "		end if;            \n" +
                "		if pIsProcessMaterial then            \n" +
                "			INSERT INTO `component_processmaterial`            \n" +
                "			(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)            \n" +
                "			SELECT pToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`            \n" +
                "			FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != pToPartID            \n" +
                "			and not exists (select 1 from component_processmaterial             \n" +
                "			where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);             \n" +
                "		end if;            \n" +
                "		if pIsRequiredMattingParts then            \n" +
                "			INSERT INTO `component_alternatepn`            \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)            \n" +
                "			SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`            \n" +
                "			FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != pToPartID            \n" +
                "			and not exists (select 1 from component_alternatepn             \n" +
                "			where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);            \n" +
                "  \n" +
                "			set @mattingpartcount =  (select count(1) from component_alternatepn where type = '5' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);            \n" +
                "			if @mattingpartcount>0 then            \n" +
                "				UPDATE `component` toPart            \n" +
                "				SET            \n" +
                "				toPart.`matingPartRquired` = true,            \n" +
                "				toPart.`updatedBy` = pUserID,            \n" +
                "				toPart.`updatedAt` = current_timestamp()            \n" +
                "				WHERE toPart.`id` = pToPartID;            \n" +
                "			end if;            \n" +
                "  \n" +
                "		end if;            \n" +
                "		if pIsPickupPad then            \n" +
                "		INSERT INTO `component_alternatepn`            \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)            \n" +
                "			SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`            \n" +
                "			FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != pToPartID            \n" +
                "			and not exists (select 1 from component_alternatepn             \n" +
                "			where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);            \n" +
                "  \n" +
                "			set @PickupPadcount =  (select count(1) from component_alternatepn where type = '2' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);            \n" +
                "			if @PickupPadcount>0 then            \n" +
                "				UPDATE `component` toPart            \n" +
                "				SET            \n" +
                "				toPart.`pickupPadRequired` = true,            \n" +
                "				toPart.`updatedBy` = pUserID,            \n" +
                "				toPart.`updatedAt` = current_timestamp()            \n" +
                "				WHERE toPart.`id` = pToPartID;            \n" +
                "			end if;            \n" +
                "		end if;            \n" +
                "		if pIsProgram then            \n" +
                "			INSERT INTO `component_alternatepn`            \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)            \n" +
                "			SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`            \n" +
                "			FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 3 and isDeleted = 0 and deletedAt is null and componentID != pToPartID            \n" +
                "			and not exists (select 1 from component_alternatepn             \n" +
                "			where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 3);            \n" +
                "  \n" +
                "			set @Programcount =  (select count(1) from component_alternatepn where type = '3' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);            \n" +
                "			if @Programcount>0 then            \n" +
                "				UPDATE `component` toPart            \n" +
                "				SET            \n" +
                "				toPart.`programingRequired` = true,            \n" +
                "				toPart.`updatedBy` = pUserID,            \n" +
                "				toPart.`updatedAt` = current_timestamp()            \n" +
                "				WHERE toPart.`id` = pToPartID;            \n" +
                "			end if;            \n" +
                "		end if;            \n" +
                "		if pIsFunctionalTesingTool then            \n" +
                "			INSERT INTO `component_alternatepn`            \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)            \n" +
                "			SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`            \n" +
                "			FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != pToPartID            \n" +
                "			and not exists (select 1 from component_alternatepn             \n" +
                "			where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);            \n" +
                "  \n" +
                "			set @FunctionalTesingToolcount =  (select count(1) from component_alternatepn where type = '4' and isDeleted = 0 and deletedat is null and refComponentID = pToPartID);            \n" +
                "			if @FunctionalTesingToolcount>0 then            \n" +
                "				UPDATE `component` toPart            \n" +
                "				SET            \n" +
                "				toPart.`functionalTestingRequired` = true,            \n" +
                "				toPart.`updatedBy` = pUserID,            \n" +
                "				toPart.`updatedAt` = current_timestamp()            \n" +
                "				WHERE toPart.`id` = pToPartID;            \n" +
                "			end if;            \n" +
                "		end if;            \n" +
                "		if pIsFinctionalRestingEquipment then            \n" +
                "			INSERT INTO `component_functionaltestingequipment`            \n" +
                "			(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)            \n" +
                "			SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`            \n" +
                "			FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null            \n" +
                "			and not exists (select 1 from component_functionaltestingequipment             \n" +
                "			where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);            \n" +
                "		end if;            \n" +
                "		commit;            \n" +
                "		select * from component where id = pToPartID;            \n" +
                "	END IF;          \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4511,'2.00','V1',' User Story 32871: MFR SPQ and UMID SPQ in part master, Internal Ref# - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4511:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-04-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveKitAllocationList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationList`(                                  \n" +
                "	IN pPageIndex INT,                                  \n" +
                "	IN pRecordPerPage INT,                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                  \n" +
                "	IN pPartId INT,                                  \n" +
                "	IN pRefSalesOrderDetailId INT,                                  \n" +
                "	IN pLineId INT,                                  \n" +
                "	IN pPackagingAlias BOOLEAN,                                  \n" +
                "	IN pFunctionalType VARCHAR(1000),                                  \n" +
                "	IN pMountingType VARCHAR(1000),                                  \n" +
                "	IN pCartType VARCHAR(1000),                                  \n" +
                "	IN pWarehouse VARCHAR(1000),                                  \n" +
                "	IN pFeasibilityQty INT,                                  \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,                                  \n" +
                "	IN pCustomerId INT                                                  \n" +
                ")  \n" +
                "BEGIN                                  \n" +
                "	DECLARE pOffset INT;                                   \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                                  \n" +
                "	DECLARE pAllocatedSharedCount INT;                                  \n" +
                "	DECLARE pKitQty INT DEFAULT 0;                                  \n" +
                "	DECLARE pWhereLineId VARCHAR(500);                                  \n" +
                "	DECLARE vCartLineId VARCHAR(16383);                                  \n" +
                "	DECLARE vWHLineId VARCHAR(16383);                                  \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);                                  \n" +
                "	SET SESSION group_concat_max_len = 500000;                                  \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';                                  \n" +
                "  \n" +
                "	IF (pLineId != 0) THEN                                  \n" +
                "		SET pWhereLineId = CONCAT(\" AND k.lineID = \", pLineId);                                  \n" +
                "	ELSE                                  \n" +
                "		SET pWhereLineId = ' AND 1 = 1';                                  \n" +
                "	END IF;                                  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                                  \n" +
                "	ELSE                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                  \n" +
                "	END IF;                                  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                  \n" +
                "		SET pWhereClause = ' 1 = 1 ' ;                                  \n" +
                "	END IF;                                  \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN                                  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');                                  \n" +
                "	END IF;                                  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN                                  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');                                  \n" +
                "	END IF;                                  \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN                                  \n" +
                "		SELECT 		GROUP_CONCAT(ka.refBOMLineID) INTO vCartLineId                                  \n" +
                "		FROM 		kit_allocation ka                                  \n" +
                "		INNER JOIN 	component_sid_stock css ON css.id = ka.refUIDId                                  \n" +
                "		INNER JOIN	binmst b ON css.binID = b.id                                  \n" +
                "		INNER JOIN 	warehousemst w ON b.WarehouseID = w.ID                                  \n" +
                "		WHERE 		ka.refSalesOrderDetID = pRefSalesOrderDetailId                                  \n" +
                "		AND 		ka.assyID = pPartId                                  \n" +
                "		AND 		ka.`status` = 'A'                                  \n" +
                "        AND			(CASE WHEN (pWarehouse IS NOT NULL AND pWarehouse != '')                                   \n" +
                "							THEN FIND_IN_SET( w.ID, pWarehouse)                                   \n" +
                "                            ELSE FIND_IN_SET(IFNULL(w.cartMfr, '-1'), pCartType)                                   \n" +
                "					END)                                  \n" +
                "		AND 		css.isDeleted = 0 ;                                  \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN                                  \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vCartLineId, ') ');                                   \n" +
                "		END IF;                                  \n" +
                "	END IF;                                  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                                  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                  \n" +
                "	ELSE                                  \n" +
                "		SET rowNumWhere = '';                                  \n" +
                "	END IF;                                  \n" +
                "	IF (pIsCallFromFeasibility AND pFeasibilityQty IS NOT NULL) THEN                                  \n" +
                "		SET pKitQty = IFNULL(pFeasibilityQty, 0);                                  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND ShortagePerBuildWithAvailable > 0 ');                                  \n" +
                "	ELSE                                  \n" +
                "		SELECT 	IFNULL(totalAssyBuildQty, 0)                                  \n" +
                "		INTO 	pKitQty                                  \n" +
                "		FROM 	kit_allocation_assy_detail                                  \n" +
                "		WHERE 	partId = pPartId                                  \n" +
                "				AND refSalesOrderDetID = pRefSalesOrderDetailId                                  \n" +
                "				AND isDeleted = 0;                                  \n" +
                "	END IF;                      \n" +
                "	SET @vFromSQLQuery = CONCAT('                                  \n" +
                "		SELECT	*                                  \n" +
                "		FROM	(                                  \n" +
                "				SELECT 		c.id, 			refSalesOrderDetID, 		partID, 			qpa, 			dnpQty, 				                        \n" +
                "						lineID,     		uomID,				unitName,			parttypeID,		partTypeName, 	                        \n" +
                "						c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,    		requirePinsBuild,	mfgPN,    		                        \n" +
                "						mfgPNIdsWithPackaging,	allocatedQty,			c.allocatedUnit,		allocatedPins,		scrapedPins,                                  \n" +
                "						allocated_shared,	freeToShareAmongOtherKits,	allocatedSTKPosition,   	consumeUnits, 		consumeQty,          	                        \n" +
                "						consumePin, 		isInstall,			isBuyDNPQty,			description,		custPNID,                         \n" +
                "						custPN,  		custPIDCode, 			custIsCustom,          		restrictCPNUseWithPermissionStep, 			                        \n" +
                "						restrictCPNUsePermanentlyStep, 				restrictCPNUseInBOMStep,        restrictPackagingUsePermanently, 		                        \n" +
                "						restrictPackagingUseWithpermission,          		cpnRoHsIcon,			cpnRoHsName,		uomMismatchedStep,                                  \n" +
                "						isNotRequiredKitAllocation, 				isNotRequiredKitAllocationValue, 			notRequiredKitAllocationReason,                                  \n" +
                "						refRfqLineitem, 	rfqLineItemsId, 		c.numOfPosition,		mfgPart, 		c.connecterTypeID,                    \n" +
                "						(CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END) cpnMfgPNIdsWithPackaging,                  \n" +
                "						(                                  \n" +
                "							CASE                                  \n" +
                "								WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0                                  \n" +
                "								ELSE                                   \n" +
                "									CASE                                  \n" +
                "										WHEN c.connecterTypeID = - 2 THEN                                  \n" +
                "											CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0                         \n" +
                "												ELSE ((IFNULL(qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin)) END                                \n" +
                "										ELSE                                  \n" +
                "											CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0                         \n" +
                "												ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) END                                \n" +
                "									END                                  \n" +
                "							END                                  \n" +
                "						) shortagePerBuild,                        \n" +
                "						(                                  \n" +
                "							CASE                                  \n" +
                "								WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0                                  \n" +
                "								ELSE                                  \n" +
                "									CASE                                  \n" +
                "										WHEN c.connecterTypeID = -2 THEN                                  \n" +
                "											CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0), 0)))) < 0) THEN 0                         \n" +
                "												ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin) - (SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0), 0)))) END                                \n" +
                "										ELSE                                  \n" +
                "											CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0                         \n" +
                "												ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END                                \n" +
                "									END                              \n" +
                "							END                                  \n" +
                "						) shortagePerBuildWithAvailable,                        \n" +
                "						SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0)),0)) availabelStock,                        \n" +
                "						SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0), 0)) availabelStockInPins,                  \n" +
                "						SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0)),0)) availabelStockCustomerConsign,                  \n" +
                "						SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0), 0)) availabelStockCustomerConsignInPins                  \n" +
                "				FROM	(                         \n" +
                "						SELECT 		id, 			refSalesOrderDetID, 			partID, 			qpa, 			dnpQty, 				                        \n" +
                "								lineID,     		uomID,					unitName,			parttypeID,		partTypeName, 	                        \n" +
                "								mountingtypeID,		mountingTypeName,                                  \n" +
                "								(CASE WHEN uomMismatchedStep = 0 THEN 0 ELSE (qpa * IFNULL(', pKitQty, ', 0)) END) requiredQtyBuild,                                  \n" +
                "								(CASE WHEN (uomMismatchedStep = 0 OR connecterTypeID != - 2)                                  \n" +
                "										THEN 0                                  \n" +
                "										ELSE (qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0))                                  \n" +
                "								END) requirePinsBuild,                             \n" +
                "								',fun_getKitConsolidateLineMFGPNWithPackaging(pPackagingAlias, pRefSalesOrderDetailId, pCustomerId),',                        \n" +
                "								',fun_getKitMFRPNIdsWithPackaging(pRefSalesOrderDetailId),',                            \n" +
                "								IFNULL(allocatedQty, 0) allocatedQty,		IFNULL(allocatedUnit, 0) allocatedUnit,		IFNULL(allocatedPins, 0) allocatedPins,			                        \n" +
                "								IFNULL(scrapedPins, 0) scrapedPins,          	allocated_shared,                                  \n" +
                "								/*(    \n" +
                "									CASE 	WHEN uomMismatchedStep = 0 THEN 0                                  \n" +
                "										ELSE (    \n" +
                "											CASE     \n" +
                "												WHEN ((qpa * IFNULL(', pKitQty, ', 0)) - allocatedUnit) < 0 THEN     \n" +
                "													ABS((qpa * IFNULL(', pKitQty, ', 0)) - allocatedUnit)                                  \n" +
                "												ELSE 0                                  \n" +
                "											END    \n" +
                "										)                                  \n" +
                "									END    \n" +
                "								) freeToShareAmongOtherKits,*/                                  \n" +
                "								(    \n" +
                "									CASE 	    \n" +
                "										WHEN uomMismatchedStep = 0 THEN 0                                  \n" +
                "										WHEN (IFNULL(connecterTypeID, 0) != -2) AND ((allocatedUnit - ((qpa * IFNULL(', pKitQty, ', 0)) - consumeUnits)) > 0) THEN    \n" +
                "											allocatedUnit - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   < 0 then 0 else  ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   end)  \n" +
                "										WHEN (IFNULL(connecterTypeID, 0) = -2) AND ((allocatedPins - ((qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin)) > 0) THEN    \n" +
                "											allocatedPins - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) < 0 then 0 else ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) end)    \n" +
                "										ELSE 0                               \n" +
                "									END    \n" +
                "								) freeToShareAmongOtherKits,    \n" +
                "								allocatedSTKPosition,   	consumeUnits, 		consumeQty,          	consumePin, 	isInstall,		                        \n" +
                "								isBuyDNPQty,			description,		custPNID,                         \n" +
                "								custPN,  			custPIDCode, 		custIsCustom,                                  \n" +
                "								restrictCPNUseWithPermissionStep, 			restrictCPNUsePermanentlyStep,                         \n" +
                "								restrictCPNUseInBOMStep,          			restrictPackagingUsePermanently, 		                        \n" +
                "								restrictPackagingUseWithpermission,                                  \n" +
                "								cpnRoHsIcon,			cpnRoHsName,		uomMismatchedStep,                                  \n" +
                "								isNotRequiredKitAllocation, 	isNotRequiredKitAllocationValue, 		notRequiredKitAllocationReason,                                  \n" +
                "								refRfqLineitem, 		rfqLineItemsId, 	numOfPosition,		mfgPart, 	connecterTypeID                                  \n" +
                "						FROM                                  \n" +
                "						(                                  \n" +
                "								SELECT 	k.id,	k.refSalesOrderDetID, 	k.partID,                                  \n" +
                "									(CASE WHEN k.isPurchase = 1 OR k.isInstall = 1                                  \n" +
                "											THEN (IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))                                  \n" +
                "											ELSE (IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))                                  \n" +
                "									END) AS qpa,                                  \n" +
                "									IFNULL(k.dnpQty, 0) dnpQty,                                  \n" +
                "									k.lineID,                                  \n" +
                "									k.uomID,		FUN_GETUNITNAMEBYID(k.uomID) unitName,                                  \n" +
                "									kl.parttypeID,		FUN_GETPARTTYPENAMEBYID(kl.parttypeID) partTypeName,                                  \n" +
                "									kl.mountingtypeID,	FUN_GETMOUNTINGTYPENAMEBYID(kl.mountingtypeID) mountingTypeName,                                  \n" +
                "									k.refRfqLineitem,	k.refRfqLineitem AS rfqLineItemsId,                                  \n" +
                "									k.numOfPosition,                                  \n" +
                "									IFNULL(ka.allocatedQty,0) allocatedQty,			IFNULL(ka.allocatedUnit,0) allocatedUnit,                                  \n" +
                "									IFNULL(ka.allocatedPins,0) allocatedPins,		IFNULL(ka.scrapedPins,0) scrapedPins,                                  \n" +
                "									IFNULL(ka.allocated_shared, 0) allocated_shared,        IFNULL(ka.allocatedSTKPosition, 0) allocatedSTKPosition,                                  \n" +
                "									IFNULL(ka.consumeUnits, 0) consumeUnits, 		IFNULL(ka.consumeQty, 0) consumeQty, 		IFNULL(ka.consumePin, 0) consumePin,                                 \n" +
                "									k.isInstall,		k.isBuyDNPQty,          	CONCAT(IFNULL(k.description, ''), IFNULL(kl.description, '')) AS description,                                  \n" +
                "									k.restrictCPNUseWithPermissionStep,	                        \n" +
                "									k.restrictCPNUsePermanentlyStep,          		k.restrictCPNUseInBOMStep,				                        \n" +
                "									k.isNotRequiredKitAllocation,          			(CASE WHEN k.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,                                  \n" +
                "									k.notRequiredKitAllocationReason,			k.custPNID, 					k.custPN,                                  \n" +
                "									FUN_GETASSYPIDCODEBYID(k.custPNID) custPIDCode,		cpnCom.isCustom custIsCustom,			cpnCom.restrictPackagingUsePermanently,                                  \n" +
                "									cpnCom.restrictPackagingUseWithpermission,		FUN_GETROHSICONBYID(cpnCom.RoHSStatusID) cpnRoHsIcon,                                  \n" +
                "									FUN_GETROHSNAMEBYID(cpnCom.RoHSStatusID) cpnRoHsName,	kl.uomMismatchedStep,			kl.connecterTypeID,                                  \n" +
                "									(Case when k.custPNID is not null then concat(k.custPNID,\",\",kl.mfgPart) else kl.mfgPart end) mfgPart                                  \n" +
                "								FROM 	(                                  \n" +
                "										SELECT 	kal.refSalesOrderDetID,		 kal.partID, 	kal.refRfqLineitem, 	group_concat(c.id) mfgPart,                                  \n" +
                "												max(c.connecterTypeID) connecterTypeID,                                  \n" +
                "												(case 	when min(c.functionalCategoryID) = max(c.functionalCategoryID) /* Matched Mounting Type */                                  \n" +
                "														then min(c.functionalCategoryID)                                  \n" +
                "														else -1 /* MisMatched */                                  \n" +
                "												end) parttypeID,                                  \n" +
                "												(case 	when min(c.mountingTypeID) = max(c.mountingTypeID) /* Matched Mounting Type */                                  \n" +
                "															then  min(c.mountingTypeID)                                    \n" +
                "														when min(c.mountingTypeID) !=  max(c.mountingTypeID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */                                    \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE null END))                                   \n" +
                "														else  -1                                   \n" +
                "												end) mountingTypeID,                                  \n" +
                "												min(kal.uomMismatchedStep) uomMismatchedStep,    /* Zero indicate to part value does not match with BOM UOM */                                  \n" +
                "												group_concat(kal.description) AS description                                 \n" +
                "										FROM 	kit_allocation_lineitems_alternatepart kal                                  \n" +
                "										JOIN 	component c on kal.mfgPNID = c.id AND c.isGoodPart = 1                                  \n" +
                "										WHERE	kal.refSalesOrderDetID =  ', pRefSalesOrderDetailId , '                                  \n" +
                "												AND 	kal.partID =  ', pPartId, '                                  \n" +
                "												AND 	kal.isDeleted = 0                                  \n" +
                "												AND		c.isDeleted = 0                                  \n" +
                "										GROUP BY  kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem                                  \n" +
                "									) AS kl                                  \n" +
                "							inner join 	kit_allocation_lineitems k on k.refSalesOrderDetID = kl.refSalesOrderDetID and k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem ', pWhereLineId ,'                                  \n" +
                "							left join 	component cpnCom on k.custPNID = cpnCom.id and cpnCom.isDeleted = 0                                  \n" +
                "							left outer join vu_kit_allocation_summary ka on kl.refSalesOrderDetID = ka.refSalesOrderDetID                                  \n" +
                "												AND kl.partID = ka.assyID                                  \n" +
                "												AND kl.refRfqLineitem = ka.refBOMLineID                \n" +
                "							where 		 k.isDeleted = 0                                 \n" +
                "						) AS a                        \n" +
                "					) AS c                        \n" +
                "					LEFT JOIN	vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END))                       \n" +
                "					GROUP BY 	c.id, 			refSalesOrderDetID, 		partID, 			qpa, 			dnpQty, 				                        \n" +
                "							lineID,     		uomID,				unitName,			parttypeID,		partTypeName, 	                        \n" +
                "							c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,    		requirePinsBuild,	mfgPN,    		                        \n" +
                "							mfgPNIdsWithPackaging,	allocatedQty,			allocatedUnit,			allocatedPins,		scrapedPins,                                  \n" +
                "							allocated_shared,	freeToShareAmongOtherKits,	allocatedSTKPosition,   	consumeUnits, 		consumeQty,          	                        \n" +
                "							consumePin, 		isInstall,			isBuyDNPQty,			description,		custPNID,                         \n" +
                "							custPN,  		custPIDCode, 			custIsCustom,          		restrictCPNUseWithPermissionStep, 			                        \n" +
                "							restrictCPNUsePermanentlyStep, 				restrictCPNUseInBOMStep,        restrictPackagingUsePermanently, 		                        \n" +
                "							restrictPackagingUseWithpermission,          		cpnRoHsIcon,			cpnRoHsName,		uomMismatchedStep,                                  \n" +
                "							isNotRequiredKitAllocation, 				isNotRequiredKitAllocationValue, 			notRequiredKitAllocationReason,                                  \n" +
                "							refRfqLineitem, 	rfqLineItemsId, 		c.numOfPosition,		mfgPart, 		c.connecterTypeID                        \n" +
                "  \n" +
                "		) As mainData                                                                                                                                  \n" +
                "		WHERE', pWhereClause,' ', vFilterWhereClause                                  \n" +
                "	);                                  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS rfqLineItemsKitsResult;                                  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS rfqLineItemsKitsResult AS \", @vFromSQLQuery, \" \" , pOrderBy, \" \", rowNumWhere);                                  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;                                  \n" +
                "  \n" +
                "    EXECUTE mainQuery;                                  \n" +
                "	DEALLOCATE PREPARE mainQuery;                                  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as 'COUNT(*)' from ( \", @vFromSQLQuery, \") as a\");                                                   \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                  \n" +
                "	EXECUTE query1;                                  \n" +
                "	DEALLOCATE PREPARE query1;                                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM rfqLineItemsKitsResult \");                                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                  \n" +
                "	EXECUTE query2;                                  \n" +
                "	DEALLOCATE PREPARE query2;                   \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from ( \", @vFromSQLQuery, \" AND uomMismatchedStep = 0) as a\");                                  \n" +
                "	PREPARE query3 FROM @SQLStatement3;                                  \n" +
                "	EXECUTE query3;                                  \n" +
                "	DEALLOCATE PREPARE query3;               \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");                                  \n" +
                "	PREPARE query4 FROM @SQLStatement4;                                  \n" +
                "	EXECUTE query4;                                  \n" +
                "	DEALLOCATE PREPARE query4;                                  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE rfqLineItemsKitsResult;                                  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->06-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4512,'2.00','V1',' Change SP Sproc_RetriveKitAllocationList Correct FreetoShareAmongotherKit Formula - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4512:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 26-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPartProgrammingRefDesgDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPartProgrammingRefDesgDetail`(  \n" +
                "	IN pPartID INT  \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "		/* get Detail for part with RequireProgramming status true and selected as Pre-Assy or Post Assy in Programming status and Yes With PrePrgramm in isDNPBuy */        \n" +
                "			select 	rla.mountingtypeID,	rla.parttypeID,	com.programingRequired ,	rl.refDesig,	rl.dnpDesig, trim(rl.lineID)+0 as lineID,        \n" +
                "					rl.id,	rl.isBuyDNPQty,	rl.isInstall,	rl.isPurchase,	rl.programingStatus,	com.PIDCode,	com.mfgPN,        \n" +
                "                    rla.mfgPNID,	ro.name,	ro.rohsIcon,	com.RoHSStatusID,	com.mfgPNDescription, com.isCustom, com.custAssyPN,    \n" +
                "                    fun_getMfgCodeByID(com.mfgcodeID) mfrCode,com.mfgcodeID,  \n" +
                "				rla.pickupPadRequiredStep,    \n" +
                "				rla.matingPartRquiredStep,         \n" +
                "				rla.suggestedGoodPartStep,           \n" +
                "				rla.suggestedGoodDistPartStep,    \n" +
                "				rla.driverToolsRequiredStep,    \n" +
                "				rla.functionalTestingRequiredStep,    \n" +
                "				rla.mismatchCustomPartStep,    \n" +
                "				rla.mismatchValueStep,           \n" +
                "				rla.approvedMountingType,    \n" +
                "				rla.mismatchPackageStep,    \n" +
                "				rla.mismatchPowerStep,    \n" +
                "				rla.mismatchToleranceStep,    \n" +
                "				rla.mismatchTempratureStep,    \n" +
                "				rla.mismatchNumberOfRowsStep,    \n" +
                "				rla.uomMismatchedStep,    \n" +
                "				rla.programingRequiredStep,    \n" +
                "				rla.mismatchProgrammingStatusStep,    \n" +
                "				rla.mismatchColorStep,    \n" +
                "				rla.restrictUseInBOMStep,    \n" +
                "				rla.restrictUseInBOMWithPermissionStep,    \n" +
                "				rla.restrictUseInBOMExcludingAliasStep,    \n" +
                "				rla.restrictUseInBOMExcludingAliasWithPermissionStep,           \n" +
                "				rla.restrictUseExcludingAliasStep,    \n" +
                "				rla.restrictUseExcludingAliasWithPermissionStep,           \n" +
                "				rla.unknownPartStep,    \n" +
                "				rla.defaultInvalidMFRStep,    \n" +
                "				rla.suggestedByApplicationStep,  \n" +
                "				rla.mfgVerificationStep,    \n" +
                "				rla.mfgDistMappingStep,    \n" +
                "				rla.mfgCodeStep,    \n" +
                "				rla.customerApproval,    \n" +
                "				rla.isCustomerUnAppoval,    \n" +
                "				rla.org_mfgCode,    \n" +
                "				rla.org_mfgPN,    \n" +
                "				rla.org_distributor,    \n" +
                "				rla.org_distPN,    \n" +
                "				rla.distVerificationStep,    \n" +
                "				rla.distCodeStep,    \n" +
                "				rla.getMFGPNStep,    \n" +
                "				rla.obsoletePartStep,    \n" +
                "				rla.mfgGoodPartMappingStep,    \n" +
                "				rla.mfgPNStep,    \n" +
                "				rla.distPNStep,    \n" +
                "				rla.badMfgPN,    \n" +
                "				rla.distGoodPartMappingStep,    \n" +
                "				rla.nonRohsStep,    \n" +
                "				rla.epoxyStep,    \n" +
                "				rla.invalidConnectorTypeStep,    \n" +
                "				rla.duplicateMPNInSameLineStep,    \n" +
                "				rla.mismatchMountingTypeStep,    \n" +
                "				rla.mismatchFunctionalCategoryStep,    \n" +
                "				rla.mismatchFunctionalCategoryStep,    \n" +
                "				rla.restrictUseWithPermissionStep,    \n" +
                "				rla.restrictUsePermanentlyStep,    \n" +
                "				rla.partPinIsLessthenBOMPinStep,       \n" +
                "				rla.mismatchRequiredProgrammingStep,             \n" +
                "				rla.mappingPartProgramStep,               \n" +
                "				rla.exportControlledStep,    \n" +
                "				rla.tbdPartStep  \n" +
                "			from rfq_lineitems rl        \n" +
                "			join rfq_lineitems_alternatepart rla on rla.rfqLineItemsID = rl.id and rla.isdeleted = 0        \n" +
                "			join component com on com.id = rla.mfgPNID and com.isdeleted = 0        \n" +
                "			join rfq_rohsmst ro on ro.id = com.RoHSStatusID and ro.isDeleted = 0        \n" +
                "			left join component CPNCom on CPNCom.id = rl.custPNID and CPNCom.isDeleted = 0        \n" +
                "			where rl.partid = pPartID and rl.isdeleted = 0 and (com.programingRequired = 1 OR CPNCom.programingRequired = 1)        \n" +
                "			and rl.programingStatus in (1,2);        \n" +
                "  \n" +
                "		/* Get Detail of Part where Part Have Selected Software as Mounting type or Functional Type */        \n" +
                "			select rla.mountingtypeID,	rla.parttypeID,	com.programingRequired,	rl.refDesig,	rl.dnpDesig,	trim(rl.lineID)+0 as lineID,	rl.id,        \n" +
                "					rl.isBuyDNPQty,	rl.isInstall,	rl.isPurchase,	rl.programingStatus,	rl.customerPartDesc,	com.mfgPN,	com.PIDCode, rla.mfgPNID,        \n" +
                "					com.RoHSStatusID,	ro.name,	ro.rohsIcon,	com.mfgPNDescription, com.isCustom,  com.custAssyPN,  \n" +
                "                    fun_getMfgCodeByID(com.mfgcodeID) mfrCode,com.mfgcodeID,  \n" +
                "                    rla.pickupPadRequiredStep,    \n" +
                "				rla.matingPartRquiredStep,         \n" +
                "				rla.suggestedGoodPartStep,           \n" +
                "				rla.suggestedGoodDistPartStep,    \n" +
                "				rla.driverToolsRequiredStep,    \n" +
                "				rla.functionalTestingRequiredStep,    \n" +
                "				rla.mismatchCustomPartStep,    \n" +
                "				rla.mismatchValueStep,           \n" +
                "				rla.approvedMountingType,    \n" +
                "				rla.mismatchPackageStep,    \n" +
                "				rla.mismatchPowerStep,    \n" +
                "				rla.mismatchToleranceStep,    \n" +
                "				rla.mismatchTempratureStep,    \n" +
                "				rla.mismatchNumberOfRowsStep,    \n" +
                "				rla.uomMismatchedStep,    \n" +
                "				rla.programingRequiredStep,    \n" +
                "				rla.mismatchProgrammingStatusStep,    \n" +
                "				rla.mismatchColorStep,    \n" +
                "				rla.restrictUseInBOMStep,    \n" +
                "				rla.restrictUseInBOMWithPermissionStep,    \n" +
                "				rla.restrictUseInBOMExcludingAliasStep,    \n" +
                "				rla.restrictUseInBOMExcludingAliasWithPermissionStep,           \n" +
                "				rla.restrictUseExcludingAliasStep,    \n" +
                "				rla.restrictUseExcludingAliasWithPermissionStep,           \n" +
                "				rla.unknownPartStep,    \n" +
                "				rla.defaultInvalidMFRStep,    \n" +
                "				rla.suggestedByApplicationStep,  \n" +
                "				rla.mfgVerificationStep,    \n" +
                "				rla.mfgDistMappingStep,    \n" +
                "				rla.mfgCodeStep,    \n" +
                "				rla.customerApproval,    \n" +
                "				rla.isCustomerUnAppoval,    \n" +
                "				rla.org_mfgCode,    \n" +
                "				rla.org_mfgPN,    \n" +
                "				rla.org_distributor,    \n" +
                "				rla.org_distPN,    \n" +
                "				rla.distVerificationStep,    \n" +
                "				rla.distCodeStep,    \n" +
                "				rla.getMFGPNStep,    \n" +
                "				rla.obsoletePartStep,    \n" +
                "				rla.mfgGoodPartMappingStep,    \n" +
                "				rla.mfgPNStep,    \n" +
                "				rla.distPNStep,    \n" +
                "				rla.badMfgPN,    \n" +
                "				rla.distGoodPartMappingStep,    \n" +
                "				rla.nonRohsStep,    \n" +
                "				rla.epoxyStep,    \n" +
                "				rla.invalidConnectorTypeStep,    \n" +
                "				rla.duplicateMPNInSameLineStep,    \n" +
                "				rla.mismatchMountingTypeStep,    \n" +
                "				rla.mismatchFunctionalCategoryStep,    \n" +
                "				rla.mismatchFunctionalCategoryStep,    \n" +
                "				rla.restrictUseWithPermissionStep,    \n" +
                "				rla.restrictUsePermanentlyStep,    \n" +
                "				rla.partPinIsLessthenBOMPinStep,       \n" +
                "				rla.mismatchRequiredProgrammingStep,             \n" +
                "				rla.mappingPartProgramStep,               \n" +
                "				rla.exportControlledStep,    \n" +
                "				rla.tbdPartStep  \n" +
                "			from rfq_lineitems rl        \n" +
                "			join rfq_lineitems_alternatepart rla on rla.rfqLineItemsID = rl.id and rla.isdeleted = 0        \n" +
                "			join component com on com.id = rla.mfgPNID and com.isdeleted = 0        \n" +
                "			Join rfq_rohsmst ro on ro.id = com.RoHSStatusID and ro.isDeleted = 0        \n" +
                "            where rl.partid = pPartID and rl.isInstall = 1 and rl.isdeleted = 0 and (rla.mountingtypeID = -2 or rla.parttypeID = -2);        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-04-2021 *********************************** */
                /* **************************** Add Script Version -> 26-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4513,'2.00','V1','User Story 32636: Demo Improvement Points of User story #29967 & #30241 give by Jaybhai related changes - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 4513:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-04-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN                     \n" +
                "	DECLARE v_PackingSlipReceiptType VARCHAR(5);                 \n" +
                "	DECLARE v_CreditMemoType VARCHAR(5);                 \n" +
                "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);                 \n" +
                "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);                 \n" +
                "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);                 \n" +
                "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);            \n" +
                "	DECLARE PORLINE_OTY INT;                \n" +
                "	DECLARE vTotalQty INT;           \n" +
                "    DECLARE vPOStatus VARCHAR(5);   \n" +
                "	SELECT `qty`, `poLineWorkingStatus` INTO PORLINE_OTY, vPOStatus FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;                  \n" +
                "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;       \n" +
                "	IF (vPOStatus != 'CA') THEN  \n" +
                "		IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN                    \n" +
                "			UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID AND poLineWorkingStatus!='C';                  \n" +
                "		ELSE                     \n" +
                "			UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;               \n" +
                "		END IF;            \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),                  \n" +
                "		(                 \n" +
                "			CASE                 \n" +
                "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'                 \n" +
                "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'                 \n" +
                "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'                 \n" +
                "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'                 \n" +
                "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'                 \n" +
                "				ELSE NULL                 \n" +
                "			END                 \n" +
                "		),                 \n" +
                "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),                  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN                  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN                 \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),                 \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                 \n" +
                "		END IF;                 \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR PN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN                   \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN                 \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),                 \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                 \n" +
                "		END IF;                 \n" +
                "  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier PN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN                       \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN                 \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),                  \n" +
                "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),                 \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                    \n" +
                "		END IF;                        \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),                  \n" +
                "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN                     \n" +
                "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN                 \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(FORMAT(OLD.invoicePrice, 5) AS CHAR), CAST(FORMAT(new.invoicePrice, 5) AS CHAR),                 \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "		END IF;                 \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN                   \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN                 \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(FORMAT(OLD.purchasePrice, 5) AS CHAR), CAST(FORMAT(new.purchasePrice, 5) AS CHAR),                 \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "		END IF;                 \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',                 \n" +
                "		CAST(                 \n" +
                "			(                 \n" +
                "				CASE                  \n" +
                "					WHEN old.`status` = 'P' THEN 'Pending'                 \n" +
                "					WHEN old.`status` = 'A' THEN 'Approved'                 \n" +
                "					WHEN old.`status` = 'D' THEN 'Disapproved'                  \n" +
                "				END                 \n" +
                "			)                 \n" +
                "		AS CHAR),                 \n" +
                "		CAST(                 \n" +
                "			(                 \n" +
                "				CASE                  \n" +
                "					WHEN new.`status` = 'P' THEN 'Pending'                 \n" +
                "					WHEN new.`status` = 'A' THEN 'Approved'                 \n" +
                "					WHEN new.`status` = 'D' THEN 'Disapproved'                  \n" +
                "				END                 \n" +
                "			)                 \n" +
                "		AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN                      \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN                 \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),                  \n" +
                "			(CASE WHEN OLD.extendedPrice > 0 THEN CAST(FORMAT(OLD.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST((FORMAT(OLD.extendedPrice, 2) * -1) AS CHAR), ')') END),             \n" +
                "			(CASE WHEN new.extendedPrice > 0 THEN CAST(FORMAT(new.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST((FORMAT(new.extendedPrice, 2) * -1) AS CHAR), ')') END),             \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "		END IF;                 \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',              \n" +
                "		(CASE WHEN OLD.extendedReceivedPrice > 0 THEN CAST(FORMAT(OLD.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST((FORMAT(OLD.extendedReceivedPrice, 2) * -1) AS CHAR), ')') END),             \n" +
                "		(CASE WHEN new.extendedReceivedPrice > 0 THEN CAST(FORMAT(new.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST((FORMAT(new.extendedReceivedPrice, 2) * -1)AS CHAR), ')') END),             \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(FORMAT(OLD.difference, 5) AS CHAR), CAST(FORMAT(new.difference, 5) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(CAST(OLD.differenceQty AS SIGNED) AS CHAR), CAST(CAST(new.differenceQty AS SIGNED) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',                 \n" +
                "		CAST(                 \n" +
                "			(                 \n" +
                "				CASE                  \n" +
                "					WHEN old.receivedStatus = 'P' THEN 'Pending'                 \n" +
                "					WHEN old.receivedStatus = 'A' THEN 'Accepted'                 \n" +
                "					WHEN old.receivedStatus = 'R' THEN 'Rejected'                  \n" +
                "				END                 \n" +
                "			)                 \n" +
                "		AS CHAR),                 \n" +
                "		CAST(                 \n" +
                "			(                 \n" +
                "				CASE                  \n" +
                "					WHEN new.receivedStatus = 'P' THEN 'Pending'                 \n" +
                "					WHEN new.receivedStatus = 'A' THEN 'Accepted'                 \n" +
                "					WHEN new.receivedStatus = 'R' THEN 'Rejected'                  \n" +
                "				END                 \n" +
                "			)                 \n" +
                "		AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF v_PackingSlipReceiptType = 'R' THEN                 \n" +
                "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN                 \n" +
                "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;                 \n" +
                "		ELSE                 \n" +
                "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;                 \n" +
                "		END IF;                 \n" +
                "  \n" +
                "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN                 \n" +
                "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;                 \n" +
                "		ELSE                 \n" +
                "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;                 \n" +
                "		END IF;                 \n" +
                "  \n" +
                "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN                 \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;                 \n" +
                "		ELSE                 \n" +
                "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;                 \n" +
                "		END IF;                 \n" +
                "  \n" +
                "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN                 \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;                 \n" +
                "		ELSE                 \n" +
                "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;                 \n" +
                "		END IF;                 \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN                           \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),                 \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "		END IF;                 \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN                           \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),                 \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "		END IF;                 \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,                  \n" +
                "		CONCAT(                 \n" +
                "			(                 \n" +
                "				CASE                 \n" +
                "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '                 \n" +
                "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '                 \n" +
                "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '                 \n" +
                "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '                 \n" +
                "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '                 \n" +
                "					ELSE 'Line# '                 \n" +
                "				END                 \n" +
                "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'                 \n" +
                "		),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.updatedBy,0) != IFNULL(NEW.updatedBy,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Modified By', CAST(fun_getUserNameByID(OLD.updatedBy) AS CHAR), CAST(fun_getUserNameByID(new.updatedBy) AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;             \n" +
                "  \n" +
                "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;             \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->26-04-2021*********************************** */
                "DROP TRIGGER IF EXISTS `TRG_AI_packing_slip_material_receive_det`;  \n" +
                "CREATE TRIGGER `TRG_AI_packing_slip_material_receive_det` AFTER INSERT ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN            \n" +
                "	DECLARE PORLINE_OTY INT;        \n" +
                "	DECLARE vTotalQty INT;         \n" +
                "    DECLARE vPOStatus VARCHAR(5);   \n" +
                "	SELECT `qty`, `poLineWorkingStatus` INTO PORLINE_OTY, vPOStatus FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;          \n" +
                "        SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;        \n" +
                "	IF (NEW.isDeleted = TRUE)THEN         \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',poLineCompleteType=(NULL),poLineCompleteReason=(NULL),receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;          \n" +
                "	ELSEIF (vPOStatus != 'CA') THEN  \n" +
                "		IF( NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND           \n" +
                "		PORLINE_OTY <= vTotalQty) THEN            \n" +
                "			UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto', receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;          \n" +
                "		ELSE             \n" +
                "			UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;          \n" +
                "		END IF;             \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->26-04-2021*********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN                     \n" +
                "	DECLARE v_PackingSlipReceiptType VARCHAR(5);                 \n" +
                "	DECLARE v_CreditMemoType VARCHAR(5);                 \n" +
                "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);                 \n" +
                "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);                 \n" +
                "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);                 \n" +
                "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);            \n" +
                "	DECLARE PORLINE_OTY INT;                \n" +
                "	DECLARE vTotalQty INT;           \n" +
                "    DECLARE vPOStatus VARCHAR(5);   \n" +
                "	SELECT `qty`, `poLineWorkingStatus` INTO PORLINE_OTY, vPOStatus FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;                  \n" +
                "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;       \n" +
                "	IF (vPOStatus != 'CA') THEN  \n" +
                "		IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN                    \n" +
                "			UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID AND poLineWorkingStatus!='C';                  \n" +
                "		ELSE                     \n" +
                "			UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;               \n" +
                "		END IF;            \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),                  \n" +
                "		(                 \n" +
                "			CASE                 \n" +
                "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'                 \n" +
                "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'                 \n" +
                "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'                 \n" +
                "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'                 \n" +
                "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'                 \n" +
                "				ELSE NULL                 \n" +
                "			END                 \n" +
                "		),                 \n" +
                "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),                  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN                  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN                 \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),                 \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                 \n" +
                "		END IF;                 \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR PN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN                   \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN                 \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),                 \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                 \n" +
                "		END IF;                 \n" +
                "  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier PN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN                       \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN                 \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),                  \n" +
                "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),                 \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                    \n" +
                "		END IF;                        \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),                  \n" +
                "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN                     \n" +
                "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN                 \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(FORMAT(OLD.invoicePrice, 5) AS CHAR), CAST(FORMAT(new.invoicePrice, 5) AS CHAR),                 \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "		END IF;                 \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN                   \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN                 \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(FORMAT(OLD.purchasePrice, 5) AS CHAR), CAST(FORMAT(new.purchasePrice, 5) AS CHAR),                 \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "		END IF;                 \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',                 \n" +
                "		CAST(                 \n" +
                "			(                 \n" +
                "				CASE                  \n" +
                "					WHEN old.`status` = 'P' THEN 'Pending'                 \n" +
                "					WHEN old.`status` = 'A' THEN 'Approved'                 \n" +
                "					WHEN old.`status` = 'D' THEN 'Disapproved'                  \n" +
                "				END                 \n" +
                "			)                 \n" +
                "		AS CHAR),                 \n" +
                "		CAST(                 \n" +
                "			(                 \n" +
                "				CASE                  \n" +
                "					WHEN new.`status` = 'P' THEN 'Pending'                 \n" +
                "					WHEN new.`status` = 'A' THEN 'Approved'                 \n" +
                "					WHEN new.`status` = 'D' THEN 'Disapproved'                  \n" +
                "				END                 \n" +
                "			)                 \n" +
                "		AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN                      \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN                 \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),                  \n" +
                "			(CASE WHEN OLD.extendedPrice > 0 THEN CAST(FORMAT(OLD.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST((FORMAT(OLD.extendedPrice, 2) * -1) AS CHAR), ')') END),             \n" +
                "			(CASE WHEN new.extendedPrice > 0 THEN CAST(FORMAT(new.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST((FORMAT(new.extendedPrice, 2) * -1) AS CHAR), ')') END),             \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "		END IF;                 \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',              \n" +
                "		(CASE WHEN OLD.extendedReceivedPrice > 0 THEN CAST(FORMAT(OLD.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST((FORMAT(OLD.extendedReceivedPrice, 2) * -1) AS CHAR), ')') END),             \n" +
                "		(CASE WHEN new.extendedReceivedPrice > 0 THEN CAST(FORMAT(new.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST((FORMAT(new.extendedReceivedPrice, 2) * -1)AS CHAR), ')') END),             \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(FORMAT(OLD.difference, 5) AS CHAR), CAST(FORMAT(new.difference, 5) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(CAST(OLD.differenceQty AS SIGNED) AS CHAR), CAST(CAST(new.differenceQty AS SIGNED) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',                 \n" +
                "		CAST(                 \n" +
                "			(                 \n" +
                "				CASE                  \n" +
                "					WHEN old.receivedStatus = 'P' THEN 'Pending'                 \n" +
                "					WHEN old.receivedStatus = 'A' THEN 'Accepted'                 \n" +
                "					WHEN old.receivedStatus = 'R' THEN 'Rejected'                  \n" +
                "				END                 \n" +
                "			)                 \n" +
                "		AS CHAR),                 \n" +
                "		CAST(                 \n" +
                "			(                 \n" +
                "				CASE                  \n" +
                "					WHEN new.receivedStatus = 'P' THEN 'Pending'                 \n" +
                "					WHEN new.receivedStatus = 'A' THEN 'Accepted'                 \n" +
                "					WHEN new.receivedStatus = 'R' THEN 'Rejected'                  \n" +
                "				END                 \n" +
                "			)                 \n" +
                "		AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF v_PackingSlipReceiptType = 'R' THEN                 \n" +
                "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN                 \n" +
                "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;                 \n" +
                "		ELSE                 \n" +
                "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;                 \n" +
                "		END IF;                 \n" +
                "  \n" +
                "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN                 \n" +
                "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;                 \n" +
                "		ELSE                 \n" +
                "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;                 \n" +
                "		END IF;                 \n" +
                "  \n" +
                "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN                 \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;                 \n" +
                "		ELSE                 \n" +
                "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;                 \n" +
                "		END IF;                 \n" +
                "  \n" +
                "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN                 \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;                 \n" +
                "		ELSE                 \n" +
                "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;                 \n" +
                "		END IF;                 \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN                           \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),                 \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "		END IF;                 \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN                           \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),                 \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "		END IF;                 \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,                  \n" +
                "		CONCAT(                 \n" +
                "			(                 \n" +
                "				CASE                 \n" +
                "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '                 \n" +
                "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '                 \n" +
                "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '                 \n" +
                "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '                 \n" +
                "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '                 \n" +
                "					ELSE 'Line# '                 \n" +
                "				END                 \n" +
                "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'                 \n" +
                "		),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;                 \n" +
                "  \n" +
                "	IF IFNULL(OLD.updatedBy,0) != IFNULL(NEW.updatedBy,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Modified By', CAST(fun_getUserNameByID(OLD.updatedBy) AS CHAR), CAST(fun_getUserNameByID(new.updatedBy) AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;             \n" +
                "  \n" +
                "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN                         \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                           \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                         \n" +
                "	END IF;             \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->26-04-2021*********************************** */
                "DROP TRIGGER IF EXISTS `TRG_AU_purchase_order_line_release_det`;  \n" +
                "CREATE TRIGGER `TRG_AU_purchase_order_line_release_det` AFTER UPDATE ON `purchase_order_line_release_det` FOR EACH ROW BEGIN            \n" +
                "	DECLARE vPurchaseOrderDetID INT;        \n" +
                "	DECLARE vPurchaseOrderID INT;        \n" +
                "	DECLARE vStatus VARCHAR(5);     \n" +
                "	SELECT `refPurchaseOrderDetID` INTO vPurchaseOrderDetID FROM purchase_order_line_release_det WHERE id = New.id;          \n" +
                "        SELECT refPurchaseOrderID INTO vPurchaseOrderID FROM purchase_order_det WHERE id= vPurchaseOrderDetID;        \n" +
                "  \n" +
                "	IF (NEW.isDeleted = TRUE OR (IFNULL(NEW.poLineWorkingStatus,0)!=IFNULL(OLD.poLineWorkingStatus,0))OR (IFNULL(NEW.receivedQty,0)!=IFNULL(OLD.receivedQty,0)))THEN         \n" +
                "  \n" +
                "	  SELECT IFNULL(MAX(CASE WHEN (poLineWorkingStatus = 'P') THEN 'P' WHEN (poLineWorkingStatus = 'CA') THEN 'CA' ELSE 'C' END),'P') INTO vStatus FROM  vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=vPurchaseOrderID;    \n" +
                "	  IF(vStatus='P' OR vStatus='CA') THEN     \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus=vStatus WHERE id=vPurchaseOrderID;     \n" +
                "	  ELSE    \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus=vStatus,poCompleteType=IFNULL(poCompleteType,'Auto') WHERE id=vPurchaseOrderID;     \n" +
                "	  END IF;       \n" +
                "  \n" +
                "	END IF;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->26-04-2021*********************************** */
                "DROP procedure IF EXISTS `Sproc_PurchaseOrderElasticSearchDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_PurchaseOrderElasticSearchDetail`(      \n" +
                "IN poID INT    \n" +
                ")   \n" +
                "BEGIN SELECT     \n" +
                "       pod.id,    \n" +
                "       pom.id AS purchaseID,    \n" +
                "       DATE_FORMAT(pom.poDate , \"%m/%d/%y\") poDate,    \n" +
                "       pom.poNumber,    \n" +
                "       pom.poRevision,    \n" +
                "       DATE_FORMAT(pom.soDate , \"%m/%d/%y\") soDate,    \n" +
                "       pom.soNumber,    \n" +
                "       CONCAT('(',mg.mfgCode,')',' ',mg.mfgName) supplierName,    \n" +
                "       pom.supplierID,    \n" +
                "       pod.supplierQuoteNumber,    \n" +
                "       fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,     \n" +
                "       pom.termsID,    \n" +
                "       pom.shippingMethodID,    \n" +
                "       fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,     \n" +
                "       pom.carrierID,    \n" +
                "       fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,     \n" +
                "       pom.carrierAccountNumber,     \n" +
                "       pom.poComment,    \n" +
                "       pod.internalRef,    \n" +
                "       pom.serialNumber,    \n" +
                "       c.PIDCode,    \n" +
                "       c.mfgPN,    \n" +
                "       pod.mfgPartID,    \n" +
                "       CONCAT(emp.firstName,' ',emp.lastName) contactPerson,    \n" +
                "       pom.contactPersonEmpID,    \n" +
                "      fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,    \n" +
                "      c.mfgcodeID,    \n" +
                "      pod.partDescription,    \n" +
                "      pod.qty,    \n" +
                "      fun_getUnitNameByID(c.uom) unitName,    \n" +
                "      pod.packagingID,    \n" +
                "      fun_getPackagingNameByID(pod.packagingID) packagingName,    \n" +
                "      pom.serialNumber,  \n" +
                "      case when pom.poWorkingStatus='C' then 'Completed' when pom.poWorkingStatus='CA' then 'Canceled' else 'In Progress' end poWorkingStatus        \n" +
                "  \n" +
                "  \n" +
                "FROM purchase_order_det pod JOIN purchase_order_mst pom ON pom.id=pod.refPurchaseOrderID      \n" +
                " JOIN mfgcodemst mg ON mg.id=pom.supplierID AND pom.isDeleted=0    \n" +
                " JOIN component c ON c.id=pod.mfgPartID AND c.isDeleted=0    \n" +
                "LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0      \n" +
                "WHERE pom.isdeleted=0 AND  pom.id=poID AND pod.isdeleted=0;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->26-04-2021*********************************** */
                "DROP procedure IF EXISTS `Sproc_updatePurchaseOrderStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_updatePurchaseOrderStatus`(              \n" +
                "IN pPOID INT,              \n" +
                "IN pupdatedBy VARCHAR(100),              \n" +
                "IN pupdatedRoleID VARCHAR(100),    \n" +
                "IN pcompleteReason VARCHAR(1000),    \n" +
                "IN pcompleteType VARCHAR(20),  \n" +
                "IN pcancellationReason VARCHAR(1000)       \n" +
                ")  \n" +
                "BEGIN              \n" +
                "  IF pcompleteReason IS NOT NULL THEN  \n" +
                "	UPDATE purchase_order_mst SET poWorkingStatus='C',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,poCompleteReason=pcompleteReason,poCompleteType=pcompleteType  WHERE id=pPOID;      \n" +
                "  \n" +
                "	UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='C',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID,poLineCompleteReason=IFNULL(poLineCompleteReason,pcompleteReason),poLineCompleteType=IFNULL(poLineCompleteType,pcompleteType) WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);      \n" +
                "  ELSEIF pcancellationReason IS NOT NULL THEN  \n" +
                "	UPDATE purchase_order_mst SET poWorkingStatus='CA',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,cancleReason=pcancellationReason,poCompleteType=pcompleteType WHERE id=pPOID;      \n" +
                "  \n" +
                "	UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='CA',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);      \n" +
                "  ELSE   \n" +
                "	UPDATE purchase_order_mst SET poWorkingStatus='P',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,cancleReason=pcancellationReason,poCompleteType=pcompleteType WHERE id=pPOID;      \n" +
                "  \n" +
                "	UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='P',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);      \n" +
                "  END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->26-04-2021*********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderPerLineDeatils`(                                      \n" +
                "	IN ppageIndex INT,                                      \n" +
                "	IN precordPerPage INT,                                      \n" +
                "	IN pOrderBy VARCHAR(255),                                      \n" +
                "	IN pWhereClause VARCHAR(16383),                \n" +
                "	IN psupplierID VARCHAR(16000),                 \n" +
                "	IN pshippingMethodId VARCHAR(16000),                \n" +
                "	IN psearchposotype VARCHAR(10),                \n" +
                "	IN psearchposotext VARCHAR(1000),                \n" +
                "	IN ppartIds VARCHAR(1000),        \n" +
                "	IN ppostatus VARCHAR(10),        \n" +
                "	IN pfromDate DATE,        \n" +
                "	IN ptoDate DATE                                   \n" +
                ")  \n" +
                "BEGIN                                      \n" +
                "  \n" +
                "	DECLARE pOffset INT;                                      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                      \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                                     \n" +
                "	DECLARE vTimeZone VARCHAR(50);                                     \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                            \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;                     \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(\"                                  \n" +
                "		SELECT pod.id,                \n" +
                "       pom.id as refPurchaseOrderID,                \n" +
                "       CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,                \n" +
                "       pod.mfgPartID,                \n" +
                "       pod.packagingID,                \n" +
                "       pod.supplierPartID,                \n" +
                "       pod.partDescription,                \n" +
                "       pod.pcbPerArray,                \n" +
                "       pod.rohsStatusID,                \n" +
                "       pod.internalRef,                \n" +
                "       pod.qty,                \n" +
                "       pod.price,                \n" +
                "       pom.shippingMethodID,                \n" +
                "       (pod.qty * pod.price) extPrice,                \n" +
                "       pod.totalRelease,                \n" +
                "       pod.lineComment,                \n" +
                "       pod.lineID,                \n" +
                "       pod.supplierQuoteNumber,                \n" +
                "       pom.poDate,                \n" +
                "       pom.poRevision,                \n" +
                "       pom.soNumber,                \n" +
                "       pom.soDate,                \n" +
                "       c.mfgPN,                \n" +
                "       c.pidCode,                \n" +
                "       c.unit,                \n" +
                "       c.iscustom,              \n" +
                "       c.partType,                \n" +
                "       rr.name AS rohsName,                \n" +
                "       rr.rohsIcon,                \n" +
                "       cp.name AS packagingName,                \n" +
                "       mc.mfgCode,                \n" +
                "       mc.mfgName,                \n" +
                "       mc.id As mfgcodeID,                \n" +
                "       pom.poNumber,                \n" +
                "       pom.status,             \n" +
                "       pom.carrierID,           \n" +
                "       case when c.partType=4 and pom.poWorkingStatus='C' then 'C' when c.partType=4 and pom.poWorkingStatus='CA' then 'CA' else ifnull(vups.poLineWorkingStatus,'P') end poWorkingStatus,        \n" +
                "       case when c.partType=4 and pom.poWorkingStatus='C' then 'Closed' when c.partType=4 and pom.poWorkingStatus='CA' then 'Canceled' else ifnull(vups.poLineWorkingDisplayStatus,'Open') end poLineWorkingDisplayStatus,        \n" +
                "       vups.totalReceivedQty,          \n" +
                "       vups.totalPendingQty,     \n" +
                "       vups.poLineCompleteReason,    \n" +
                "       case when c.partType=4 and pom.poWorkingStatus='C' then 'Auto' else  vups.poLineCompleteType end poLineCompleteType,       \n" +
                "       concat('(',m.mfgcode,')',' ',m.mfgName) supplierName,                 \n" +
                "       fun_getUnitNameByID(c.uom) uomName,                \n" +
                "       sc.mfgPN supplierPN,                \n" +
                "       pom.supplierID,           \n" +
                "       pom.termsID,             \n" +
                "        fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,                \n" +
                "       fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,                 \n" +
                "       fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,                 \n" +
                "        pom.carrierAccountNumber,                \n" +
                "        pom.poComment,                \n" +
                "       pom.shippingComment,         \n" +
                "       pod.internalLineComment,               \n" +
                "        m.mfgcode as supplierMfgName,                \n" +
                "       fun_getOtherChargesByPurchaseOrderDetID(pod.id) otherExpense,                \n" +
                "       (SELECT GROUP_CONCAT(polr.instruction SEPARATOR  '<br/>') FROM purchase_order_line_requirement_det polr WHERE polr.refPurchaseOrderDetID=pod.id AND polr.isDeleted=0) purchaseRequirement,                \n" +
                "       (ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)+(pod.qty * pod.price)) totalExtPrice,         \n" +
                "       CONCAT('(',mc.mfgCode,')',' ',mc.mfgName) mfgcodeName,                \n" +
                "       fun_getUserNameByID(pod.updatedBy)updatedby,                 \n" +
                "       fun_getUserNameByID(pod.createdBy) createdby,                \n" +
                "       fun_getRoleByID(pod.createByRoleId) createdbyRole,                 \n" +
                "       fun_getRoleByID(pod.updateByRoleId) updatedbyRole,                \n" +
                "       (select pold.shippingDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) shipDate,                \n" +
                "       (select pold.promisedShipDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) promisedShipDate,                \n" +
                "       fun_ApplyCommonDateTimeFormatByParaValue(pod.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                  \n" +
                "       fun_ApplyCommonDateTimeFormatByParaValue(pod.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "       psmr.packingSlipDate,  \n" +
                "		(CASE WHEN(psmr.isDeleted=1) THEN psmr.id=NULL ELSE psmr.id END) as packingSlipId  \n" +
                "  \n" +
                "FROM purchase_order_mst pom       \n" +
                "left JOIN purchase_order_det pod ON pom.id=pod.refPurchaseOrderID and  pod.isdeleted=0          \n" +
                "left join vu_purchaseorder_shipping_release vups on vups.refPurchaseOrderDetID= pod.id            \n" +
                "left JOIN mfgcodemst m ON m.id=pom.supplierID                \n" +
                "left JOIN component c ON c.id=pod.mfgPartID                \n" +
                "left join component sc on sc.id=pod.supplierPartID                \n" +
                "left JOIN mfgcodemst mc ON mc.id=c.mfgcodeID                \n" +
                "LEFT JOIN rfq_rohsmst rr ON rr.id=pod.rohsStatusID                \n" +
                "LEFT JOIN component_packagingmst cp ON cp.id=pod.packagingID                \n" +
                "LEFT JOIN packing_slip_material_receive psmr ON psmr.refPurchaseOrderID = pom.id  \n" +
                "WHERE pom.isdeleted=0  \n" +
                "	\");                                      \n" +
                "  IF(psupplierID IS NOT NULL)THEN                \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.supplierID in (',psupplierID,')');                \n" +
                "  END IF;                \n" +
                "  IF(pshippingMethodId IS NOT NULL)THEN                \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.shippingMethodID in (',pshippingMethodId,')');                \n" +
                "  END IF;                \n" +
                "  IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN                \n" +
                "	IF(psearchposotype='C')THEN                \n" +
                "              SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pom.soNumber  like ''%',psearchposotext,'%'' OR pom.poNumber  like ''%',psearchposotext,'%'')');                \n" +
                "         ELSE                \n" +
                "         SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pom.soNumber  =''',psearchposotext,''' OR pom.poNumber  =''',psearchposotext,''')');                \n" +
                "         END IF;                \n" +
                "  END IF;          \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN                \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate>=''',pfromDate,''' and pom.poDate<=''',ptoDate,''')');                           \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN                \n" +
                "       SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate>=''',pfromDate,''')');                  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN                \n" +
                "       SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate<=''',ptoDate,''')');                                 \n" +
                "  END IF;          \n" +
                "    IF(ppostatus IS NOT NULL)THEN        \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when c.partType=4 and pom.poWorkingStatus=\"C\" then \"C\" else ifnull(vups.poLineWorkingStatus,\"P\") end),''', ppostatus ,''')');           \n" +
                "  END IF;               \n" +
                "  IF(ppartIds IS NOT NULL)THEN                \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,'))');                \n" +
                "  END IF;     \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                      \n" +
                "        SET pOrderBy = \"ORDER BY createdAt DESC\";                            \n" +
                "	ELSE                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                      \n" +
                "	END IF;	                \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                      \n" +
                "		SET pWhereClause = '1=1' ;                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                      \n" +
                "	ELSE	                                      \n" +
                "		SET rowNumWhere = '';                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */                                         \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c where 1=1 and \", pWhereClause);                                        \n" +
                "	PREPARE query2 FROM @SQLStatement2;       \n" +
                "  \n" +
                "	EXECUTE query2;                                        \n" +
                "	DEALLOCATE PREPARE query2;                                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                        \n" +
                "	PREPARE query1 FROM @SQLStatement2;        \n" +
                "  \n" +
                "	EXECUTE query1;                                        \n" +
                "	DEALLOCATE PREPARE query1;                                  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->26-04-2021*********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderSummaryDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderSummaryDeatils`(                                      \n" +
                "	IN ppageIndex INT,                                      \n" +
                "	IN precordPerPage INT,                                      \n" +
                "	IN pOrderBy VARCHAR(255),                                      \n" +
                "	IN pWhereClause VARCHAR(16383),                \n" +
                "	IN psupplierID VARCHAR(16000),                \n" +
                "	IN pshippingMethodId VARCHAR(16000),                \n" +
                "	IN psearchposotype VARCHAR(10),                \n" +
                "	IN psearchposotext VARCHAR(1000),                \n" +
                "	IN ppartIds VARCHAR(1000),       \n" +
                "	IN ppostatus VARCHAR(10),      \n" +
                "	IN pfromDate DATE,      \n" +
                "	IN ptoDate DATE                         \n" +
                ")  \n" +
                "BEGIN                                      \n" +
                "  \n" +
                "	DECLARE pOffset INT;                                      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                      \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                                     \n" +
                "	DECLARE vTimeZone VARCHAR(50);                                     \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                            \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;                     \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(\"                                  \n" +
                "		SELECT pom.id,                \n" +
                "       pom.poNumber,                \n" +
                "       pom.supplierID,                \n" +
                "       pom.poDate,                \n" +
                "       pom.soNumber,                \n" +
                "       pom.soDate,                \n" +
                "       pom.termsID,                \n" +
                "       pom.shippingMethodID,                \n" +
                "       CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,                \n" +
                "       pom.status,                \n" +
                "       pom.poComment,                \n" +
                "       pom.shippingComment,                \n" +
                "       pom.serialNumber,                \n" +
                "       pom.poRevision,           \n" +
                "       pom.carrierID,               \n" +
                "       pom.carrierAccountNumber,                \n" +
                "       CASE WHEN pom.shippingInsurance=0 THEN 'No' ELSE 'Yes' END shippingInsuranceName,                \n" +
                "       pom.shippingInsurance,                \n" +
                "       pom.supplierAddress,                \n" +
                "       pom.shippingAddress,                \n" +
                "       pom.intermediateAddress,                \n" +
                "       CASE WHEN pom.isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPO,                \n" +
                "       pom.isBlanketPO,                \n" +
                "       m.mfgcode,    \n" +
                "       pom.poCompleteReason,    \n" +
                "       pom.poCompleteType,    \n" +
                "       pom.cancleReason,  \n" +
                "      concat('(',m.mfgcode,')',' ',m.mfgName) supplierName,               \n" +
                "       pom.poWorkingStatus,         \n" +
                "        (select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='C') poCompletedLine,        \n" +
                "         (select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='P') poPendingLine,              \n" +
                "       case when pom.poWorkingStatus='P' then 'In Progress' when  pom.poWorkingStatus='C' then 'Completed' else 'Canceled' end workingStatusName,               \n" +
                "       IFNULL(vgf.cnt, 0) poDocumentCount,               \n" +
                "       (SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID                \n" +
                "        WHERE pod.isdeleted=0 and c.partType!=4 and pod.refPurchaseOrderID=pom.id) totalItems,                \n" +
                "        (SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID                \n" +
                "        WHERE pod.isdeleted=0 and c.partType=4 and pod.refPurchaseOrderID=pom.id) totalOtherItems,                \n" +
                "       fun_getFOBById(pom.freeOnBoardId) freeOnBoard,                \n" +
                "       fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,                \n" +
                "       fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,                 \n" +
                "       fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,                \n" +
                "       (select sum((pod.qty * pod.price)+ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)) from purchase_order_det pod where pod.refPurchaseOrderID=pom.id and pod.isdeleted=0) totalAmount,                \n" +
                "       fun_getUserNameByID(pom.updatedBy)updatedby,                 \n" +
                "       fun_getUserNameByID(pom.createdBy) createdby,                \n" +
                "       fun_getRoleByID(pom.createByRoleId) createdbyRole,                 \n" +
                "       fun_getRoleByID(pom.updateByRoleId) updatedbyRole,                \n" +
                "       fun_ApplyCommonDateTimeFormatByParaValue(pom.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                  \n" +
                "       fun_ApplyCommonDateTimeFormatByParaValue(pom.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "       (CASE WHEN(psmr.isDeleted=1) THEN psmr.id=NULL ELSE psmr.id END) as packingSlipId  \n" +
                "FROM purchase_order_mst pom JOIN mfgcodemst m ON m.id=pom.supplierID                \n" +
                "LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0             \n" +
                "LEFT JOIN vu_genericfilescount vgf ON vgf.entityID = -20 AND vgf.refTransID = pom.id                 \n" +
                "LEFT JOIN packing_slip_material_receive psmr ON psmr.refPurchaseOrderID = pom.id  \n" +
                "WHERE pom.isdeleted=0                  \n" +
                "	\");                 \n" +
                "  \n" +
                "  IF(psupplierID IS NOT NULL)THEN                \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and pom.supplierID in (',psupplierID,')');                \n" +
                "  END IF;                \n" +
                "  IF(pshippingMethodId IS NOT NULL)THEN                \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and pom.shippingMethodID in (',pshippingMethodId,')');                \n" +
                "  END IF;                \n" +
                "  IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN                \n" +
                "	IF(psearchposotype='C')THEN                \n" +
                "              SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (pom.soNumber  like ''%',psearchposotext,'%'' OR pom.poNumber  like ''%',psearchposotext,'%'')');                \n" +
                "         ELSE                \n" +
                "              SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (pom.soNumber  =''',psearchposotext,''' OR pom.poNumber  =''',psearchposotext,''')');                \n" +
                "         END IF;                \n" +
                "  END IF;        \n" +
                "  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN              \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (pom.poDate>=''',pfromDate,''' and pom.poDate<=''',ptoDate,''')');                         \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN              \n" +
                "       SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (pom.poDate>=''',pfromDate,''')');                \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN              \n" +
                "       SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (pom.poDate<=''',ptoDate,''')');                               \n" +
                "  END IF;        \n" +
                "  \n" +
                "  IF(ppostatus IS NOT NULL)THEN      \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and FIND_IN_SET(pom.poWorkingStatus,''', ppostatus ,''')');         \n" +
                "  END IF;             \n" +
                "  \n" +
                "  IF(ppartIds IS NOT NULL)THEN                \n" +
                "  SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' AND exists (select 1 from purchase_order_det pod where pod.refPurchaseOrderID = pom.id and pod.isDeleted = 0 and                 \n" +
                "   (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,')))');                \n" +
                "  END IF;                \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                      \n" +
                "        SET pOrderBy = \"ORDER BY createdAt DESC\";                            \n" +
                "	ELSE                                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                      \n" +
                "	END IF;	                \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                      \n" +
                "		SET pWhereClause = '1=1' ;                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                       \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                      \n" +
                "	ELSE	                                      \n" +
                "		SET rowNumWhere = '';                                      \n" +
                "	END IF;	                                      \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */                                         \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c where 1=1 and \", pWhereClause);                                        \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                        \n" +
                "	EXECUTE query2;                                        \n" +
                "	DEALLOCATE PREPARE query2;                                      \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                        \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                        \n" +
                "	EXECUTE query1;                                        \n" +
                "	DEALLOCATE PREPARE query1;                                  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->26-04-2021*********************************** */
                "DROP VIEW IF EXISTS `vu_purchaseorder_shipping_release` ;  \n" +
                "CREATE VIEW `vu_purchaseorder_shipping_release` AS  \n" +
                "    SELECT   \n" +
                "        `pold`.`refPurchaseOrderDetID` AS `refPurchaseOrderDetID`,  \n" +
                "        `pod`.`refPurchaseOrderID` AS `refPurchaseOrderID`,  \n" +
                "        SUM(`pold`.`qty`) AS `totalQty`,  \n" +
                "        SUM(IFNULL(`pold`.`receivedQty`, 0)) AS `totalReceivedQty`,  \n" +
                "        (CASE  \n" +
                "            WHEN ((SUM(`pold`.`qty`) - SUM(IFNULL(`pold`.`receivedQty`, 0))) > 0) THEN (SUM(`pold`.`qty`) - SUM(IFNULL(`pold`.`receivedQty`, 0)))  \n" +
                "            ELSE 0  \n" +
                "        END) AS `totalPendingQty`,  \n" +
                "        MAX((CASE  \n" +
                "            WHEN (`pold`.`poLineWorkingStatus` = 'CA') THEN 'CA'  \n" +
                "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 'P'  \n" +
                "            ELSE 'C'  \n" +
                "        END)) AS `poLineWorkingStatus`,  \n" +
                "        MAX((CASE  \n" +
                "            WHEN (`pold`.`poLineWorkingStatus` = 'CA') THEN 'Canceled'  \n" +
                "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 'Open'  \n" +
                "            ELSE 'Closed'  \n" +
                "        END)) AS `poLineWorkingDisplayStatus`,  \n" +
                "        MAX((CASE  \n" +
                "            WHEN (`pold`.`poLineCompleteType` = 'Manual') THEN 'Manual'  \n" +
                "            WHEN (`pold`.`poLineCompleteType` = 'Auto') THEN 'Auto'  \n" +
                "            ELSE ''  \n" +
                "        END)) AS `poLineCompleteType`,  \n" +
                "        SUM((CASE  \n" +
                "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 1  \n" +
                "            ELSE 0  \n" +
                "        END)) AS `pendingLineCount`,  \n" +
                "        SUM((CASE  \n" +
                "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'C') THEN 1  \n" +
                "            ELSE 0  \n" +
                "        END)) AS `receivedLineCount`,  \n" +
                "        (CASE  \n" +
                "            WHEN  \n" +
                "                (MAX((CASE  \n" +
                "                    WHEN (`pold`.`poLineCompleteType` = 'Manual') THEN 'Manual'  \n" +
                "                    WHEN (`pold`.`poLineCompleteType` = 'Auto') THEN 'Auto'  \n" +
                "                    ELSE ''  \n" +
                "                END)) = 'Manual')  \n" +
                "            THEN  \n" +
                "                GROUP_CONCAT(CONCAT('Release#:',  \n" +
                "                            ' ',  \n" +
                "                            `pold`.`releaseNumber`,  \n" +
                "                            '  \n" +
                "',  \n" +
                "                            'PO Release Complete Type:',  \n" +
                "                            ' ',  \n" +
                "                            `pold`.`poLineCompleteType`,  \n" +
                "                            '  \n" +
                "',  \n" +
                "                            'PO Release Complete Reason:',  \n" +
                "                            IFNULL(`pold`.`poLineCompleteReason`, ''))  \n" +
                "                    SEPARATOR '  \n" +
                "')  \n" +
                "            ELSE ''  \n" +
                "        END) AS `poLineCompleteReason`  \n" +
                "    FROM  \n" +
                "        (`purchase_order_line_release_det` `pold`  \n" +
                "        JOIN `purchase_order_det` `pod` ON ((`pod`.`id` = `pold`.`refPurchaseOrderDetID`)))  \n" +
                "    WHERE  \n" +
                "        (`pold`.`isDeleted` = 0)  \n" +
                "    GROUP BY `pold`.`refPurchaseOrderDetID` , `pod`.`refPurchaseOrderID`;  \n" +
                /* **************************** Add Script Version ->26-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4514,'2.00','V1',' User Story 32566: Implement Cancel Purchase order Option - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4514:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-04-2021 *********************************** */
                "ALTER TABLE purchase_order_line_release_det ADD carrierAccountNumber varchar(255), ADD carrierID int(11);  \n" +
                "ALTER TABLE purchase_order_line_release_det ADD CONSTRAINT FK_purchase_order_line_release_det_releaseLineCarrierID FOREIGN KEY (carrierID) REFERENCES genericcategory(gencCategoryID);  \n" +
                /* **************************** Add Script Version ->26-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4515,'2.00','V1',' User Story 32566: Implement Cancel Purchase order Option - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4515:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-04-2021 *********************************** */
                "INSERT INTO feature_mst(featureName, isActive, isDeleted, createdBy) VALUES ('Allow to Cancel PO', 1,0, 1);  \n" +
                "INSERT INTO feature_mst(featureName, isActive, isDeleted, createdBy) VALUES ('Allow to Revoke PO', 1,0, 1);  \n" +
                /* **************************** Add Script Version ->26-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4516,'2.00','V1',' User Story 32566: Implement Cancel Purchase order Option - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4516:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-04-2021 *********************************** */
                "ALTER TABLE `purchase_order_mst` ADD cancleReason Varchar(1000);  \n" +
                /* **************************** Add Script Version ->26-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4517,'2.00','V1',' User Story 32566: Implement Cancel Purchase order Option - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4517:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-04-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveReleaseLineFromPO`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveReleaseLineFromPO`(        \n" +
                "	IN pRefPOId INT,       \n" +
                "	IN pPartID INT,      \n" +
                "	IN pMFGPN VARCHAR(50)       \n" +
                ")  \n" +
                "BEGIN     \n" +
                "SELECT 	polrd.id,					polrd.qty poReleaseLineQty,			polrd.releaseNumber,      \n" +
                "		polrd.shippingDate,			polrd.promisedShipDate,       \n" +
                "		polrd.poLineWorkingStatus,	pod.id refPurchaseOrderDetID,		pod.lineID,      \n" +
                "		pod.qty poLineQty,			    \n" +
                "        (case when polrd.id is null then c.packagingID else pod.packagingID end) packagingID,					    \n" +
                "        pod.internalRef,    \n" +
                "		cpm.name packagingName,		c.mfgcodeID,						c.mfgPN,      \n" +
                "		c.RoHSStatusID,				fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,      \n" +
                "		fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,      				fun_getRoHSNameByID(c.RoHSStatusID) rohsName,      \n" +
                "		c.id partId,				polrd.receivedQty,    				pod.partDescription,		    \n" +
                "        pod.lineComment,  			pod.internalLineComment,	    \n" +
                "        cs.mfgpn supplierPN,  		cs.id supplierPNId,     \n" +
                "        mfgcod.mfgCode mfgCode,		c.packageQty spq,    				c.umidSPQ,  \n" +
                "		c.unit,						c.uom,								c.uomText,      \n" +
                "		c.partType,					    \n" +
                "        (case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSID,	      \n" +
                "        fun_getRoHSNameByID(case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSName,      \n" +
                "        c.isCustom,					cs.isCustom AS isCustomSupplier      \n" +
                "    FROM purchase_order_det AS pod      \n" +
                "	INNER JOIN component AS c ON  c.id = pod.mfgPartID AND c.id = IFNULL(pPartID, c.id) AND c.mfgpn = IFNULL(pMFGPN, c.mfgPN) AND c.isDeleted = 0          \n" +
                "	INNER JOIN mfgcodemst mfgcod ON mfgcod.id = c.mfgcodeID OR mfgcod.id = c.mfgcodeID AND mfgcod.isDeleted = 0      \n" +
                "	LEFT JOIN purchase_order_line_release_det AS polrd ON  pod.id = polrd.refPurchaseOrderDetID AND polrd.isDeleted = 0      \n" +
                "	LEFT JOIN component_packagingmst AS cpm ON pod.packagingID = cpm.id AND cpm.isDeleted = 0      \n" +
                "	LEFT JOIN component cs ON cs.id = pod.supplierPartID AND cs.isDeleted = 0    \n" +
                "    WHERE pod.refPurchaseOrderID = pRefPOid      \n" +
                "    AND pod.isDeleted = 0;       \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(  \n" +
                "	IN pPageIndex INT,          \n" +
                "	IN pRecordPerPage INT,          \n" +
                "	IN pOrderBy VARCHAR(255),          \n" +
                "	IN pWhereClause VARCHAR(16383),          \n" +
                "	IN pPackingSlipID INT,          \n" +
                "    IN pInvoiceLineId INT          \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	DECLARE pOffset INT;          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;          \n" +
                "	DECLARE v_ParentPackingSlipId INT;          \n" +
                "	DECLARE v_InvoiceSlipId INT;          \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);          \n" +
                "	DECLARE v_TimeZone VARCHAR(50);          \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;          \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;          \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;          \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;          \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS          \n" +
                "	SELECT 	*,          \n" +
                "		(          \n" +
                "			CASE          \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'          \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'          \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'          \n" +
                "				ELSE NULL          \n" +
                "			END          \n" +
                "		) AS receivedStatusValue          \n" +
                "	FROM 	(          \n" +
                "		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,          \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,          \n" +
                "				p.nickname, 					p.partID, 								p.scanLabel,          \n" +
                "				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,          \n" +
                "				p.binID, 						p.warehouseID, 							p.parentWarehouseID,          \n" +
                "				p.invoicePrice, 				p.disputedPrice,          \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,          \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,          \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,          \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,          \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,          \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,          \n" +
                "				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,          \n" +
                "				p.discount,          \n" +
                "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,          \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,          \n" +
                "				p.refCreditDebitInvoiceNo,          \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated,          \n" +
                "				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,          \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,          \n" +
                "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,          \n" +
                "				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,          \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,          \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,          \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,          \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,          \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,          \n" +
                "				sc.packagingID supplierPackagingId,		c.umidSPQ spq,                                       c.isCustom,          \n" +
                "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,          \n" +
                "				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,      \n" +
                "				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,                    \n" +
                "				fun_getRoHSNameByID(p.rohsstatus) prohsName,              \n" +
                "				(          \n" +
                "					CASE          \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN          \n" +
                "							p.receivedStatus          \n" +
                "						ELSE          \n" +
                "							(SELECT receivedStatus          \n" +
                "							FROM 	packing_slip_material_receive_det          \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId          \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber          \n" +
                "									AND isDeleted = 0 LIMIT 1)          \n" +
                "					END          \n" +
                "				) receivedStatus,          \n" +
                "				p.remark,          \n" +
                "				p.internalRemark,          \n" +
                "				p.comment,          \n" +
                "				p.internalRef,          \n" +
                "				p.purchaseInspectionComment,          \n" +
                "				(          \n" +
                "					CASE          \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN          \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')          \n" +
                "						ELSE          \n" +
                "							(SELECT COUNT(1)          \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp          \n" +
                "							WHERE EXISTS (          \n" +
                "									SELECT 	1          \n" +
                "									FROM 	packing_slip_material_receive_det pslip          \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId          \n" +
                "											AND 	pslip.id = psmp.lineId          \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber          \n" +
                "											AND	pslip.isDeleted = 0)          \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')          \n" +
                "					END          \n" +
                "				) AS purchaseRequirementCount,          \n" +
                "				(          \n" +
                "					CASE          \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN          \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')          \n" +
                "						ELSE          \n" +
                "							(SELECT COUNT(1)          \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm          \n" +
                "							WHERE 	EXISTS (          \n" +
                "									SELECT 	1          \n" +
                "									FROM 	packing_slip_material_receive_det psmr          \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId          \n" +
                "										AND	psmr.id = psm.lineId          \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber          \n" +
                "										AND 	psmr.isDeleted = 0          \n" +
                "									)          \n" +
                "								AND psm.inspectionStatus = 'R'          \n" +
                "								AND psm.isDeleted = 0          \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')          \n" +
                "					END          \n" +
                "				) AS rejectedPurchaseRequirementCount,          \n" +
                "				(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,          \n" +
                "				(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,          \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,          \n" +
                "				(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0          \n" +
                "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,          \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,          \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,          \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,          \n" +
                "				ps.refInvoiceIdForMemo,          \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,          \n" +
                "				ps.refInvoiceNumberForMemo,          \n" +
                "				(          \n" +
                "					CASE          \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL          \n" +
                "						ELSE          \n" +
                "							(SELECT `status`          \n" +
                "							FROM 	packing_slip_material_receive_det          \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId          \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber          \n" +
                "									AND isDeleted = 0)          \n" +
                "					END          \n" +
                "				) invoiceStatus,          \n" +
                "				(          \n" +
                "					CASE          \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL          \n" +
                "						ELSE          \n" +
                "							(SELECT refCreditDebitInvoiceNo          \n" +
                "							FROM 	packing_slip_material_receive_det          \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId          \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber          \n" +
                "									AND isDeleted = 0)          \n" +
                "					END          \n" +
                "				) invoiceLineHasMemo,          \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,          \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd          \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'          \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id          \n" +
                "					AND pd.partId = p.partID) commentCount,          \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,          \n" +
                "				p.refPackingSlipIdForRma,          \n" +
                "				p.refPackingSlipDetIdForRMA,          \n" +
                "				p.refInvoiceIdForRma,          \n" +
                "				p.refPackingSlipForRma,          \n" +
                "				p.refInvoiceForRma,          \n" +
                "				rm.packingSlipQty parentDetailLinePackingSlipQty,          \n" +
                "				rm.invoicePrice parentDetailLineInvoicePrice,          \n" +
                "				rm.extendedPrice parentDetailLineExtendedPrice,          \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipNumberById(p.refPackingSlipIdForRma) ELSE refPackingSlipForRma END) refPackingSlipNumber,          \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE refInvoiceForRma END) refInvoiceNumber,          \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma) ELSE NULL END) refPackingSlipSupplierId          \n" +
                "		FROM		packing_slip_material_receive_det p          \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0          \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL          \n" +
                "		LEFT JOIN	(          \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo          \n" +
                "					FROM 	packing_slip_material_receive_det ps          \n" +
                "					WHERE 	ps.isDeleted = 0          \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId          \n" +
                "		LEFT JOIN 	(          \n" +
                "					SELECT 	packingSlipSerialNumber, packingSlipQty, invoicePrice, extendedPrice          \n" +
                "					FROM 	packing_slip_material_receive_det          \n" +
                "					WHERE 	isDeleted = 0 AND refPackingSlipMaterialRecID = v_ParentPackingSlipId          \n" +
                "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber          \n" +
                "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0          \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID          \n" +
                "		AND 		p.isDeleted = 0          \n" +
                "	) a;          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS          \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID          \n" +
                "	FROM		packing_slip_material_receive_det psm          \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID          \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)          \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)          \n" +
                "	AND			ps.receiptType = 'P'          \n" +
                "	AND			psm.isDeleted = 0          \n" +
                "	GROUP BY 	ps.poNumber, psm.partID, psm.packagingID;          \n" +
                "  \n" +
                "	-- Set received qty detail          \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q          \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,          \n" +
                "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))          \n" +
                "	WHERE 	r.partID = q.partID AND r.packagingID = q.packagingID;          \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN          \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;          \n" +
                "	ELSE          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN          \n" +
                "		SET pWhereClause = '1=1' ;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "    IF pInvoiceLineId IS NOT NULL THEN          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;          \n" +
                "    END IF;          \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN          \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
                "	ELSE          \n" +
                "		SET rowNumWhere = '';          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	/* to get total count of rows */          \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );          \n" +
                "	PREPARE query1 FROM @SQLStatement1;          \n" +
                "	EXECUTE query1;          \n" +
                "	DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);          \n" +
                "	PREPARE query2 FROM @SQLStatement2;          \n" +
                "	EXECUTE query2;          \n" +
                "	DEALLOCATE PREPARE query2;          \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,          \n" +
                "											invoiceTotalDue As invoiceTotalDue,          \n" +
                "									   ifnull((select round(sum(b.paymentAmount),2)          \n" +
                "										  from packingslip_invoice_payment a          \n" +
                "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid          \n" +
                "										 where b.refPackingslipInvoiceID = c.id          \n" +
                "                                           and a.refPaymentMode = 'P'          \n" +
                "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal          \n" +
                "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");          \n" +
                "	PREPARE query3 FROM @SQLStatement3;          \n" +
                "	EXECUTE query3;          \n" +
                "	DEALLOCATE PREPARE query3;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->26-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4518,'2.00','V1','User Story 32876: Material Receipt: Change validation for qty based on packaging and UMID SPQ instead on SPQ of Part Master - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4518:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-04-2021 *********************************** */
                "drop procedure if exists `Sproc_MatchBarCodeAndSaveDelimiters`;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(  \n" +
                "    IN pWhereClause VARCHAR(16383),  \n" +
                "    IN puserID VARCHAR(50),  \n" +
                "    IN pnickName VARCHAR(20),  \n" +
                "    IN pprefix VARCHAR(20),  \n" +
                "    IN puid VARCHAR(20),  \n" +
                "    IN pComponentID INT,  \n" +
                "    IN pCustomerID INT,  \n" +
                "    IN pCPN BOOL,  \n" +
                "    IN pMFGAvailabel BOOL,  \n" +
                "    IN pRefCpnMfgID INT,  \n" +
                "    IN pAssyID INT,  \n" +
                "    IN pSalesOrderDetailID INT,  \n" +
                "    IN pReceiveMaterialType VARCHAR(255),  \n" +
                "    IN pkitAssemblyID INT,  \n" +
                "    IN pBarcodeID INT,  \n" +
                "    IN pBOMLineID INT,  \n" +
                "    IN pSupplierID INT,  \n" +
                "    IN pCategory VARCHAR(2),  \n" +
                "    IN pInventoryType VARCHAR(2),  \n" +
                "    IN pCallFrom VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                "	DECLARE v_delimiter VARCHAR(10);  \n" +
                "	DECLARE v_length INT;  \n" +
                "	DECLARE v_fieldType INT;  \n" +
                "	DECLARE v_entityId INT;  \n" +
                "	DECLARE v_dataElementId INT;  \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);  \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);  \n" +
                "	DECLARE strLabel VARCHAR(2000);  \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);  \n" +
                "	DECLARE StaticField VARCHAR(100);  \n" +
                "	DECLARE DynamicField VARCHAR(100);  \n" +
                "	DECLARE strFeildforInsert VARCHAR(10000) DEFAULT 'scanlabel';  \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');  \n" +
                "	DECLARE plen,slen INT;  \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;  \n" +
                "	DECLARE pbr_Separator VARCHAR(50);  \n" +
                "	DECLARE barcode_type_id INT;  \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);  \n" +
                "	DECLARE UpdateValue VARCHAR(16383);  \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';  \n" +
                "	DECLARE v_SupplierID INT;  \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);  \n" +
                "	DECLARE v_barcode_id INT;  \n" +
                "	DECLARE v_barcode_count INT;  \n" +
                "	DECLARE v_NumberOfPart INT;  \n" +
                "	DECLARE v_rfqLineItemsID INT;  \n" +
                "	DECLARE v_componentCount INT;  \n" +
                "	DECLARE v_componentId INT;  \n" +
                "	DECLARE v_mfgPartNO VARCHAR(100);  \n" +
                "	DECLARE v_partMFG INT;  \n" +
                "	DECLARE v_isGoodPart TINYINT;  \n" +
                "	DECLARE v_restrictUsePermanently TINYINT;  \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT;  \n" +
                "	DECLARE v_restrictUseInBOM TINYINT;  \n" +
                "	DECLARE v_isInstall TINYINT;  \n" +
                "	DECLARE v_isBOMLineClean TINYINT;  \n" +
                "	DECLARE v_BOMLineId INT;  \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT;  \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT;  \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;  \n" +
                "	DECLARE v_PIDCode VARCHAR(110);  \n" +
                "	DECLARE v_isPurchase TINYINT;  \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);  \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);  \n" +
                "	DECLARE v_BOMLineCount INT;  \n" +
                "	DECLARE v_AlternateLineId INT;  \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);  \n" +
                "	DECLARE v_BOMAssyId INT;  \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);  \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT;  \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT;  \n" +
                "	DECLARE v_isCPNFlag TINYINT;  \n" +
                "	DECLARE v_dateCodeFormatID INT;  \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);  \n" +
                "  	DECLARE v_RefMfgCodeMstID VARCHAR(10000);  \n" +
                "	DECLARE v_MfrNotFoundForSupplierQuote TINYINT;  \n" +
                "	DECLARE v_SupplierQuoteMFRIsNotCustomPart TINYINT;                            \n" +
                "	DECLARE v_MFRList VARCHAR(10000);                          \n" +
                "	DECLARE v_barcode_status INT;                          \n" +
                "	DECLARE v_category INT;                          \n" +
                "	DECLARE v_partType INT;              \n" +
                "  \n" +
                "	SET v_SupplierQuoteMFRIsNotCustomPart = 0;	                            \n" +
                "	SET v_MfrNotFoundForSupplierQuote = 0;                            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;                     \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error                    \n" +
                "	(                    \n" +
                "		errorText LONGTEXT,                    \n" +
                "		IsSuccess VARCHAR (2),          \n" +
                "		MFGPart VARCHAR(10000)                         \n" +
                "	);                        \n" +
                "  \n" +
                "	/* Temp table for Packing Slip */    \n" +
                "	IF (pCategory = 'P') THEN                        \n" +
                "		DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;                     \n" +
                "		CREATE TEMPORARY TABLE temp_packing_slip_material_receive                        \n" +
                "		(                                 \n" +
                "			scanlabel VARCHAR(1000),                        \n" +
                "			poNumber VARCHAR(50),                    \n" +
                "			supplierSONumber VARCHAR(50),                  \n" +
                "			packingSlipNumber VARCHAR(50),                  \n" +
                "			invoiceNumber VARCHAR(50)                  \n" +
                "		);                        \n" +
                "	ELSE /* Temp table for MFR */                         \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;                     \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock                    \n" +
                "		(                    \n" +
                "			refcompid INT,                    \n" +
                "			pkgQty DECIMAL(18,6),  \n" +
                "			dateCode VARCHAR(10),  \n" +
                "			lotCode VARCHAR(255),  \n" +
                "			scanlabel VARCHAR(1000),  \n" +
                "			createdBy VARCHAR(255),  \n" +
                "			uid VARCHAR(14),  \n" +
                "			prefix VARCHAR(20),  \n" +
                "			nickName VARCHAR(50),  \n" +
                "			cpn TINYINT,  \n" +
                "			mfgAvailabel TINYINT,  \n" +
                "			refCPNMFGPNID INT,  \n" +
                "			customerID INT,  \n" +
                "			assyID INT,  \n" +
                "			salesOrderDetailID INT,  \n" +
                "			receiveMaterialType VARCHAR(255),  \n" +
                "			refSupplierPartId INT,                                            \n" +
                "			mfrDateCode VARCHAR(50),                  \n" +
                "			poNumber VARCHAR(50),                    \n" +
                "			supplierSONumber VARCHAR(50),                  \n" +
                "			packingSlipNumber VARCHAR(50),                  \n" +
                "			invoiceNumber VARCHAR(50),              \n" +
                "			binName VARCHAR(100),              \n" +
                "			packaging VARCHAR(100),              \n" +
                "			packingSlipDetailNickname VARCHAR(50)              \n" +
                "		);    \n" +
                "  \n" +
                "		/* Temp table for data element value */    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;                     \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values                    \n" +
                "		(                    \n" +
                "			entityid INT,  \n" +
                "			dataelementid INT,  \n" +
                "			`value` LONGTEXT,  \n" +
                "			createdBy VARCHAR(255)  \n" +
                "		);   \n" +
                "    END IF;                            \n" +
                "  \n" +
                "	-- get data from barcode templates with seprator     \n" +
                "	# return error code  \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found  \n" +
                "	# 0: Barcode template does not exist, Please add template  \n" +
                "	# 1: Validation Clear  \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component  \n" +
                "	# 3: Mfgcode is not found  \n" +
                "	# 4: MFG PN does not exist  \n" +
                "	# 5: Multiple MFG PN found  \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code  \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly  \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer  \n" +
                "	# 9:  Multiple barcode template found.  \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check  \n" +
                "	# 11: MFG PN is incorrect part  \n" +
                "	# 12: PID PID1 was restricted part at part master level.  \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.  \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.  \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.  \n" +
                "	# 17: PID is contain more than 1 BOM line.  \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.  \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
                "	# 20: NOT ALLOW TO SELECT OTHER MFG FOR MAPPED SUPPLIER.  \n" +
                "	# 21: OTHEN THEN CUSTOM PART NOT ALLOW TO SELECT FOR MAPPED SUPPLIER.  \n" +
                "	# 22: You cannot create UMID for assembly from Existing Stock.  \n" +
                "	# 23: In UMID Management screen not allow to scan which part's part type is Other  \n" +
                "  \n" +
                "	block1: BEGIN                   \n" +
                "		SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");           \n" +
                "		IF (pBarcodeID IS NULL) THEN                                                                                              \n" +
                "			/* Get barcode from labelstring */    \n" +
                "			SELECT COUNT(*), id, barcodeType, `name`, `status` INTO v_barcode_count, v_barcode_id, barcode_type_id, @barcode_name, v_barcode_status                         \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND                        \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                                                     \n" +
                "  \n" +
                "			IF (v_barcode_status = 1 OR v_barcode_status IS NULL) THEN                          \n" +
                "				/* Get More than 1 barcode then give validation */    \n" +
                "				IF (v_barcode_count > 1) THEN    \n" +
                "					SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND                      \n" +
                "					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);                                                     \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                     \n" +
                "					('Multiple barcode template found.',9,@multiple_barcode_string);	                    \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                           \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                                             \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;    \n" +
                "				ELSE       \n" +
                "					SET pBarcodeID = v_barcode_id;    \n" +
                "				END IF;                           \n" +
                "			END IF;   \n" +
                "		ELSE    \n" +
                "			/* Get data from barcode id */    \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID AND `status`=1;    \n" +
                "		END IF;                                                                                             \n" +
                "  \n" +
                "		/* If data not get from barcode then concat none in label string find in table */    \n" +
                "		IF (barcode_type_id IS NULL AND (v_barcode_status = 1 OR v_barcode_status IS NULL)) THEN                     			          \n" +
                "			SET pWhereClause = CONCAT(\"NONE\", pWhereClause);                   \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name                         \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND      \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;    \n" +
                "			SET pBarcodeID = v_barcode_id;                                                              \n" +
                "		END IF;     \n" +
                "  \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */      \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID                  \n" +
                "			WHERE b.isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND id = pBarcodeID;    \n" +
                "			SET v_BarcodeType = '2D';          \n" +
                "		ELSE /* barcode 1D */                                                       \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template                   \n" +
                "			WHERE isDeleted=0 AND barcodeCategory = pCategory  AND `status`=1 AND id = pBarcodeID;                                                     \n" +
                "			SET v_BarcodeType = '1D';       \n" +
                "		END IF;     \n" +
                "	END block1;                                                          \n" +
                "  \n" +
                "	/* If error is not found then continue else select error */    \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN    \n" +
                "		block2: BEGIN                                      \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found                    \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR                    \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter                 \n" +
                "				WHERE refbrID = pBarcodeID AND isDeleted = 0;             \n" +
                "			-- declare exit loop if data not found                    \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;                    \n" +
                "			-- if any record match found than  check for delimiter and its value               \n" +
                "			IF (pbr_template_ID > 0) THEN                    \n" +
                "				-- create temporary table for deliemeter and component dataelement                    \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;	                    \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(                    \n" +
                "					pentityId INT,                    \n" +
                "					pdataElementId INT,                    \n" +
                "					pdelimiter_value VARCHAR(200)                    \n" +
                "				);               \n" +
                "				-- create temporary table for separator string values                    \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;			                    \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));          \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string                    \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength                         \n" +
                "				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID;         \n" +
                "				-- open cursor                    \n" +
                "				OPEN barcodeMatch_cursor;               \n" +
                "				-- set str label as whereclause                  \n" +
                "				-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter                \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");                  \n" +
                "				-- if prefix is found than remove those from actual string match                    \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN		                    \n" +
                "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));  \n" +
                "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));  \n" +
                "				 END IF;                   \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match                     \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN                    \n" +
                "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                    \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);                    \n" +
                "				 END IF;	                                                                                \n" +
                "				-- insert all values after seprator split            \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");                                                        				                                    				                \n" +
                "				PREPARE stmt1 FROM @SQL;                    \n" +
                "				EXECUTE stmt1;                                   \n" +
                "				DEALLOCATE PREPARE stmt1;                  \n" +
                "				IF (pCategory = 'P') THEN                        \n" +
                "					-- create dynamic query to insert in packing slip                    \n" +
                "					SET QueryForStatic = 'insert into temp_packing_slip_material_receive';                                        \n" +
                "				ELSE                         \n" +
                "					-- create dynamic query to insert in recieving material                    \n" +
                "					SET QueryForStatic = 'insert into temp_Component_Sid_Stock';                                        \n" +
                "				END IF;                        \n" +
                "  \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template                    \n" +
                "				barcodeMatch_loop:LOOP                   \n" +
                "					-- get all five selected values                    \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;            \n" +
                "					-- exit loop if no record found for barcode match                    \n" +
                "					IF exit_loop THEN                                                                                      \n" +
                "						CLOSE barcodeMatch_cursor;                    \n" +
                "						LEAVE barcodeMatch_loop;                    \n" +
                "					END IF;               \n" +
                "					-- dynamic query to get dellimeter string with values from string                    \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');                      \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;	                    \n" +
                "					EXECUTE stmtdelimiter;                                        \n" +
                "					DEALLOCATE PREPARE stmtdelimiter;                         \n" +
                "  \n" +
                "					-- get delimiter values from string                    \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));            \n" +
                "					-- check for field type is static or dynamic                    \n" +
                "					-- if static field than check for mfg code and mfg part number  \n" +
                "					IF v_fieldType = 0  THEN                        \n" +
                "						-- component_sid_stock                     \n" +
                "						-- get static field name from barcode table delimiter data element id                                    \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id = v_dataElementId AND isDeleted = 0);         \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys                    \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN                            \n" +
                "							SET MFG_Part_No = delimiter_value_data;     \n" +
                "							/* If component id is not found */                         \n" +
                "							IF(pComponentID = 0)THEN            \n" +
                "								/* Get component data */    \n" +
                "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;  \n" +
                "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS                                    \n" +
                "								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission, a.isCustom, a.category, a.partType FROM               \n" +
                "								(              \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 	component c                                                                                               \n" +
                "									WHERE 	c.mfgPN = delimiter_value_data AND c.isGoodPart = 1 AND c.isDeleted = 0              \n" +
                "									UNION              \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                                                                                               \n" +
                "									FROM 		component_otherpn co                                                                                               \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID AND c.isDeleted = 0           \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND c.isGoodPart = 1 AND co.isDeleted = 0	                              \n" +
                "								) a                              \n" +
                "								UNION                              \n" +
                "								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType FROM               \n" +
                "								(              \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                            \n" +
                "									FROM 	component c                                                                                               \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND c.isDeleted = 0           \n" +
                "									UNION              \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType                            \n" +
                "									FROM 		component_otherpn co                                                                                               \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID               \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data) AND co.isDeleted = 0 AND c.isDeleted = 0	                              \n" +
                "								) a                              \n" +
                "								INNER JOIN component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;                              \n" +
                "  \n" +
                "								IF (pSupplierID IS NOT NULL) THEN  \n" +
                "									SELECT GROUP_CONCAT(refMfgCodeMstID) INTO v_RefMfgCodeMstID FROM supplier_mapping_mst s WHERE s.supplierID = pSupplierID                             \n" +
                "								        AND s.refMfgCodeMstID IN (SELECT t.mfgcodeID FROM temp_component_detail t) AND s.isDeleted = 0;                            \n" +
                "								        SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(mfgcodeID))INTO v_MFRList FROM temp_component_detail; 				                            \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail t WHERE FIND_IN_SET(t.mfgcodeID,v_RefMfgCodeMstID) AND isCustom = 1;  		                            \n" +
                "								   ELSE  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;  \n" +
                "								END IF;					                            \n" +
                "  \n" +
                "								IF (v_componentCount > 1) THEN           \n" +
                "									/* If component is more that one then remove supplier from list */    \n" +
                "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;  \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS  \n" +
                "									SELECT * FROM temp_component_detail WHERE refSupplierMfgpnComponentID IS NULL;  \n" +
                "  \n" +
                "									/* After remove supplier if get only one record then  */    \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;  \n" +
                "									IF (v_componentCount < 2) THEN  \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
                "										FROM 	temp_component_supplier_detail;  \n" +
                "									END IF;  \n" +
                "								ELSE  \n" +
                "									IF (pSupplierID IS NULL) THEN  \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
                "										FROM 	temp_component_detail;                            \n" +
                "									ELSE 	                            \n" +
                "										IF ((SELECT COUNT(1) FROM temp_component_detail) = 0) THEN                            \n" +
                "											SET v_MfrNotFoundForSupplierQuote = 1;                            \n" +
                "										ELSEIF ((SELECT COUNT(1) FROM temp_component_detail WHERE isCustom = 1) = 0) THEN                            \n" +
                "											SET v_componentCount=0;                            \n" +
                "											SET v_SupplierQuoteMFRIsNotCustomPart = 1;                            \n" +
                "										ELSE                            \n" +
                "											SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission                    \n" +
                "												INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission                    \n" +
                "											FROM 	temp_component_detail WHERE isCustom = 1 AND FIND_IN_SET(mfgcodeID,v_RefMfgCodeMstID);                            \n" +
                "										END IF;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							ELSE        \n" +
                "								/* If component id is found */    \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType                    \n" +
                "									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType                    \n" +
                "								FROM 	component  \n" +
                "								WHERE 	id = pComponentID AND isDeleted = 0;          \n" +
                "							END IF;    \n" +
                "  \n" +
                "							/* Remove from cursor if found more that one component */    \n" +
                "							IF v_componentCount > 1 THEN    \n" +
                "								CLOSE barcodeMatch_cursor;                    \n" +
                "								LEAVE barcodeMatch_loop;          \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* If inventory is opening inventory and type is assembly */    \n" +
                "							IF(pInventoryType = 'OI' AND v_category = 3) THEN                     \n" +
                "								CLOSE barcodeMatch_cursor;                    \n" +
                "								LEAVE barcodeMatch_loop;          \n" +
                "							END IF;                    \n" +
                "  \n" +
                "							/* If bad part found */    \n" +
                "							IF (v_isGoodPart != 1) THEN                            \n" +
                "								CLOSE barcodeMatch_cursor;                    \n" +
                "								LEAVE barcodeMatch_loop;     \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check all type of restriction */    \n" +
                "							IF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN                               \n" +
                "								CLOSE barcodeMatch_cursor;                    \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check all type of restriction with packaging */    \n" +
                "							IF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN                             \n" +
                "								CLOSE barcodeMatch_cursor;                    \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Barcode MFR and Part MFR mismatch */    \n" +
                "							IF (@barcodeMFG != -1 AND @barcodeMFG != -2 AND @barcodeMFG != -3 AND @barcodeMFG != -4 AND @barcodeMFG != -5 AND @barcodeMFG != -6 AND @barcodeMFG != -7 AND @barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN        \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';                             \n" +
                "								CLOSE barcodeMatch_cursor;                    \n" +
                "								LEAVE barcodeMatch_loop;          \n" +
                "							END IF;            \n" +
                "  \n" +
                "							/* Found DIST then set id of MFR of that DIST */    \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;        \n" +
                "							IF (@MFGType = 'DIST') THEN        \n" +
                "								SET v_SupplierID = v_componentId;        \n" +
                "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier;        \n" +
                "							END IF;     \n" +
                "  \n" +
                "							/* Check kit allocation */    \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN          \n" +
                "								/* Get data of rfq line, rfq line item, cpn, packaging part of kit bom */    \n" +
                "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailID;  \n" +
                "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId  \n" +
                "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId                \n" +
                "								FROM 	(  \n" +
                "										SELECT 	*  \n" +
                "										FROM  \n" +
                "											(    \n" +
                "												SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,               \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId  \n" +
                "												FROM 		component_packagingalias cp      \n" +
                "												LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid  \n" +
                "												LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0  \n" +
                "												UNION      \n" +
                "												SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
                "												FROM 		rfq_lineitems_alternatepart rla  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                   \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0         \n" +
                "												UNION                                                                       \n" +
                "												SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
                "												FROM 		rfq_lineitems_alternatepart rla  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID                   \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0 AND custPNID IS NOT NULL  \n" +
                "												GROUP BY 	custPNID, rla.partID  \n" +
                "											) b               \n" +
                "										WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)  \n" +
                "										GROUP BY b.lineID, b.assyId                                                        \n" +
                "									) a;                                                        \n" +
                "  \n" +
                "								/* BOM line not found  */    \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN                           \n" +
                "									CLOSE barcodeMatch_cursor;                    \n" +
                "									LEAVE barcodeMatch_loop;         \n" +
                "								/* Found More then one BOM line */  \n" +
                "								ELSEIF (v_BOMLineCount > 1) THEN                            \n" +
                "									CLOSE barcodeMatch_cursor;                    \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								ELSE              \n" +
                "									/* Restrict use bom */    \n" +
                "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN          \n" +
                "										CLOSE barcodeMatch_cursor;                    \n" +
                "										LEAVE barcodeMatch_loop;          \n" +
                "									END IF;                                                                 \n" +
                "  \n" +
                "									/* BOM line contain any error */    \n" +
                "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;  \n" +
                "									IF (v_isBOMLineClean = 0) THEN  \n" +
                "										CLOSE barcodeMatch_cursor;  \n" +
                "										LEAVE barcodeMatch_loop;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "  \n" +
                "								/* Part not install, purchase and not dnp  */  \n" +
                "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Set dynamic query for component */    \n" +
                "							IF  v_componentCount = 1 THEN                             \n" +
                "								IF (strFeildforInsert = 'scanlabel') THEN                          \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                    \n" +
                "									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"'); 	    				  \n" +
                "								ELSE                          \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');                    \n" +
                "									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_componentId, '\"'); 	    		                    \n" +
                "								END IF;                          \n" +
                "							END IF;                \n" +
                "						END IF;                    \n" +
                "  \n" +
                "						/* Not in use */    \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys                    \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN            \n" +
                "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND isDeleted = 0;                                    \n" +
                "						END IF;      \n" +
                "  \n" +
                "						/* Set dynamic query for pkgQty */    \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');    \n" +
                "							ELSE                          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');                    \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');                                       \n" +
                "							END IF;                          \n" +
                "						END IF;                          \n" +
                "  \n" +
                "						/* Set dynamic query for lotcode */    \n" +
                "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN      		                \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                    \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');    \n" +
                "							ELSE                          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');                    \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');    \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for mfrdatecode and datecode */    \n" +
                "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN                              \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');                    \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');    \n" +
                "							ELSE                          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');                    \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');    \n" +
                "							END IF;                          \n" +
                "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;                                            \n" +
                "							IF (v_dateCodeFormatID IS NOT NULL) THEN                                            \n" +
                "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);                                            \n" +
                "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;                                            \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');                    \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');                                            \n" +
                "							ELSE                          \n" +
                "								SET exit_loop = FALSE;                          \n" +
                "							END IF;                           \n" +
                "						END IF;                \n" +
                "  \n" +
                "						/* Set dynamic query for binid */    \n" +
                "						IF(StaticField=\"binID\" AND delimiter_value_data IS NOT NULL) THEN      		                \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');                    \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');    \n" +
                "							ELSE                          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');                    \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');    \n" +
                "							END IF;                          \n" +
                "						END IF;                  \n" +
                "  \n" +
                "						/* Set dynamic query for packaging */    \n" +
                "						IF(StaticField=\"packagingID\" AND delimiter_value_data IS NOT NULL) THEN      		                \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');                    \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');    \n" +
                "							ELSE                          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');                    \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');    \n" +
                "							END IF;                          \n" +
                "						END IF;                \n" +
                "  \n" +
                "						/* Set dynamic query for nickname */    \n" +
                "						IF(StaticField=\"nickname\" AND delimiter_value_data IS NOT NULL) THEN      		                \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');                    \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');    \n" +
                "							ELSE                          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');                    \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');    \n" +
                "							END IF;                          \n" +
                "						END IF;                         \n" +
                "  \n" +
                "						/* Set dynamic query for po number */    \n" +
                "						IF(StaticField=\"poNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');                    \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');    \n" +
                "							ELSE                          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');                    \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');    \n" +
                "							END IF;                          \n" +
                "						END IF;                         \n" +
                "  \n" +
                "						/* Set dynamic query for so number */    \n" +
                "						IF(StaticField=\"supplierSONumber\" AND delimiter_value_data IS NOT NULL) THEN      		                \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');                    \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');    \n" +
                "							ELSE                          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');                    \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');    \n" +
                "							END IF;                          \n" +
                "						END IF;                     \n" +
                "  \n" +
                "						/* Set dynamic query for packing slip number */    \n" +
                "						IF(StaticField=\"packingSlipNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');                    \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');    \n" +
                "							ELSE                          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');                    \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');    \n" +
                "							END IF;                          \n" +
                "						END IF;                     \n" +
                "  \n" +
                "						/* Set dynamic query for invoice number */    \n" +
                "						IF(StaticField=\"invoiceNumber\" AND delimiter_value_data IS NOT NULL) THEN      		                \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN                          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');                    \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');    \n" +
                "							ELSE                          \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');                    \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');    \n" +
                "							END IF;                          \n" +
                "						END IF;                \n" +
                "					ELSE                   \n" +
                "						/* Set dynamic query for other than system generated */    \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE                     \n" +
                "							dataElementID=v_dataElementId AND isDeleted = 0;                 \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)                     \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);  \n" +
                "					END IF;  \n" +
                "				END LOOP barcodeMatch_loop;  \n" +
                "				-- check if mfg and component both found than  \n" +
                "				IF v_componentCount = 0 AND pSupplierID IS NULL THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not exist',4,MFG_Part_No);                \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 1 THEN                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not exist',4,MFG_Part_No);                    \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=0 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (v_MFRList,20,MFG_Part_No);          	                            \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MFR PN whose MFR is already mapped and the part is custom part, and the scanned MFR PN is not a custom part.',21,MFG_Part_No);				                            \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN                            \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MFR PN whose MFR is already mapped and the part is custom part, and the scanned MFR PN is not a custom part.',21,MFG_Part_No);  \n" +
                "				ELSEIF (v_componentCount > 1) THEN          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MFR PN found',5,MFG_Part_No);                     \n" +
                "				ELSEIF (v_componentCount = 1 AND v_partType = 4 AND puid IS NOT NULL) THEN          \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>', v_PIDCode ,'</b> part type is <b>Other</b>. So you cannot create UMID for PID <b>', v_PIDCode ,'</b>.'),23,v_PIDCode);                     \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN                                                                 \n" +
                "					IF (v_isGoodPart = 2) THEN                                                                            \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
                "					ELSE                                                                            \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
                "					END IF;                                                                            \n" +
                "				ELSEIF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);  \n" +
                "				ELSEIF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN                                                                 \n" +
                "					IF (v_isCPNFlag = 1) THEN                                                            \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
                "					ELSE                                                             \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
                "					END IF;                                                            \n" +
                "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN      \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);          \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN or CPN is not found in bom of this assembly.',7,MFG_Part_No);          \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));          \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN                 \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line# <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> part(s) <b>',v_PIDCode,'</b> are not clean or part are not Engineering Approved yet. Please clean line level issue to allocate material.'),15,MFG_Part_No);            \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty = 'N') THEN                    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR PN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);          \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN                    \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);         \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN                    \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);         \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN                    \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);         \n" +
                "				ELSEIF (pInventoryType = 'OI' AND v_category = 3) THEN                   \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create UMID for assembly <b>',v_PIDCode,'</b> from Existing Stock.'),22,MFG_Part_No);                    \n" +
                "				ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN                    \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;                    \n" +
                "					IF @Mfgmatched = 0  THEN                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MFR PN are avialable but not matched in component',2,MFG_Part_No);					                    \n" +
                "					END IF;							                    \n" +
                "				ELSE           \n" +
                "					IF @mfgCount = 0 THEN                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);                    \n" +
                "					END IF;	                    \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND v_componentCount=0  THEN                      \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;                    \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MFR PN is not Found',0,MFG_Part_No);                    \n" +
                "					END IF;				                    \n" +
                "				END IF;	  \n" +
                "  \n" +
                "				IF (pCPN = 1) THEN   \n" +
                "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;      \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;      \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN      \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);                    \n" +
                "					END IF;           \n" +
                "  \n" +
                "					IF (@isCPNPart != 1) THEN        \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);                    \n" +
                "					END IF;   \n" +
                "				END IF;         \n" +
                "  \n" +
                "				IF (puid IS NOT NULL) THEN        \n" +
                "					/* If not fire any validation */    \n" +
                "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN           \n" +
                "  \n" +
                "						-- must call statements in sequence       \n" +
                "						/* Add component sid stock in temp table of stock table and add in temp table */       		          \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',',','uid',')','VALUES','(',valuesforInsert,',',puserID,',\"',puid,'\")',';');  \n" +
                "						PREPARE stmt1 FROM @SQL1;                    \n" +
                "						EXECUTE stmt1;                 \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set prefix=','\"',pprefix,'\"');      \n" +
                "						IF (pnickName IS NOT NULL) THEN      \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');      \n" +
                "						END IF;          \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue, ',cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel);    \n" +
                "  \n" +
                "						IF (pRefCpnMfgID IS NOT NULL) THEN      \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);      \n" +
                "						END IF;           \n" +
                "  \n" +
                "						IF (pCustomerID IS NOT NULL) THEN      \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);      \n" +
                "						END IF;       \n" +
                "  \n" +
                "						IF (pAssyID IS NOT NULL) THEN      \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);      \n" +
                "						END IF;         \n" +
                "  \n" +
                "						IF (pSalesOrderDetailID IS NOT NULL) THEN      \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',salesOrderDetailID=',pSalesOrderDetailID);      \n" +
                "						END IF;          \n" +
                "  \n" +
                "						IF (pReceiveMaterialType IS NOT NULL) THEN      \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');   \n" +
                "						END IF;       \n" +
                "  \n" +
                "						IF (v_SupplierID IS NOT NULL) THEN      \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);      \n" +
                "						END IF;       \n" +
                "  \n" +
                "						SET UpdateValue = CONCAT(UpdateValue,' where uid=','\"',puid,'\"');                                                     \n" +
                "						SET @sql2 = UpdateValue;	                     \n" +
                "						PREPARE stmt2 FROM @SQL2;                    \n" +
                "						EXECUTE stmt2;	    \n" +
                "						DEALLOCATE PREPARE stmt2;                           \n" +
                "  \n" +
                "						/* Add success result in save error table */    \n" +
                "						IF (pkitAssemblyID IS NULL) THEN                                                                    \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                    \n" +
                "						ELSE                                                                     \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));                    \n" +
                "						END IF;                                                                    \n" +
                "  \n" +
                "						/* Add data in table of delimeter table */    \n" +
                "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN          \n" +
                "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)                     \n" +
                "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t; 	                    \n" +
                "						END IF;                    \n" +
                "  \n" +
                "						/* select detail of error table */    \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;    \n" +
                "  \n" +
                "						/* select detail in temp table of component sid stock table  */      \n" +
                "						SELECT * FROM temp_Component_Sid_Stock;      \n" +
                "  \n" +
                "						/* Select data of component */    \n" +
                "						SELECT 	c.*,                                                  \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,                                                  \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                                                   \n" +
                "							csup.packageQty AS supplierPkgQty,  \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
                "							csup.mfgcodeID AS supplierMfgId,                                                   \n" +
                "							mcm.mfgcode AS supplierMFGCode,                                                   \n" +
                "							mcm.mfgName AS supplierMFGName,                                                   \n" +
                "							csup.mfgPN AS supplierMFGPN,                                                   \n" +
                "							csup.packagingID AS supplierPackagingId,                                                   \n" +
                "							fun_getPackagingNameByID(csup.packagingID) AS supplierPackagingName,                                                   \n" +
                "							csup.minimum AS supplierMinimum,                                                   \n" +
                "							ccpn.id AS cpnID,                                                   \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,                                                   \n" +
                "							rfqroh.rohsIcon AS rohsIcon,                                                   \n" +
                "							rfqroh.name AS rohsName,                                                   \n" +
                "							rfqmou.name AS mountingTypeName,                                                   \n" +
                "							um.unitName AS uomName,                                                  \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                                                  \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,                                                  \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,                                \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName                                                   \n" +
                "						FROM component AS c   \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                                                  \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID              \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID    \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom                 \n" +
                "						WHERE c.id = v_componentId;  \n" +
                "  \n" +
                "						/* select data of data element of component sid stock */    \n" +
                "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`  \n" +
                "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv   \n" +
                "						LEFT OUTER JOIN `dataelement` AS dl  \n" +
                "						ON cssdlv.dataelementid = dl.dataElementID AND dl.isDeleted = 0;         \n" +
                "  \n" +
                "						/* select data of cpn */    \n" +
                "						SELECT 	id, refComponentID, refCPNPartID  \n" +
                "						FROM 	component_cust_alias_rev_pn  \n" +
                "						WHERE 	refCPNPartID = v_componentId AND isDeleted = 0;  \n" +
                "  \n" +
                "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (  \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND isDeleted = 0  \n" +
                "						) AND isDeleted = 0;                                                                    \n" +
                "  \n" +
                "						/* select detail of bom */    \n" +
                "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,  \n" +
                "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN  \n" +
                "						FROM 		rfq_lineitems_alternatepart rla  \n" +
                "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
                "						WHERE 		rla.isDeleted = 0  \n" +
                "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))  \n" +
                "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)  \n" +
                "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);  \n" +
                "  \n" +
                "					ELSE              \n" +
                "						/* Found any error then select error  */    \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                    \n" +
                "					END IF;      \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN         \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;    \n" +
                "				ELSE  \n" +
                "					/* generate dynamic query and save in temp in case of packing slip */    \n" +
                "					IF (pCategory = 'P' OR (SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,')','VALUES','(',valuesforInsert,')',';');  \n" +
                "						PREPARE stmt1 FROM @SQL1;                    \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;                \n" +
                "					END IF;              \n" +
                "  \n" +
                "					/* Add success data in temp error table */    \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);                                               \n" +
                "  \n" +
                "					/* Add success data in temp table for select in case of call from packing slip packing slip screen */    \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                           \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                                                           \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;                 \n" +
                "  \n" +
                "					/* In case of MFR PN then select recod of component and save in temp table in case of call from packing slip scrren */    \n" +
                "					IF (pCategory = 'M') THEN              \n" +
                "						DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                           \n" +
                "						CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                              \n" +
                "						SELECT 	c.*,                                                   \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,                                                   \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,                                                   \n" +
                "							csup.packageQty AS supplierPkgQty,  \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
                "							csup.mfgcodeID AS supplierMfgId,                                                   \n" +
                "							mcm.mfgcode AS supplierMFGCode,                                                   \n" +
                "							mcm.mfgName AS supplierMFGName,                                                   \n" +
                "							csup.packagingID AS supplierPackagingId,                                                   \n" +
                "							csup.mfgPN AS supplierMFGPN,                                                   \n" +
                "							csup.id AS supplierMFGPNID,                                                   \n" +
                "							fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,                                                   \n" +
                "							fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,                                                             \n" +
                "							ccpn.id AS cpnID,                                                   \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,                                                   \n" +
                "							rfqroh.rohsIcon AS rohsIcon,                                                   \n" +
                "							rfqroh.name AS rohsName,                                                   \n" +
                "							rfqmou.name AS mountingTypeName,                                                   \n" +
                "							um.unitName AS uomName,                                                  \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,                                                  \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,                                                  \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
                "						FROM component AS c   \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID                                                  \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID               \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID             \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID      \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom    \n" +
                "						WHERE c.id = v_componentId;                 \n" +
                "					END IF;                            \n" +
                "				END IF;                \n" +
                "			ELSE                                                     \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES                     \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);	                    \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;	                          \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;                                                           \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS                          \n" +
                "				SELECT 1;                           \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                           \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                          \n" +
                "				SELECT 1; 		                        \n" +
                "			END IF;                    \n" +
                "  \n" +
                "		END block2;                                            \n" +
                "	ELSE                                          \n" +
                "		IF (puid IS NOT NULL) THEN                                          \n" +
                "			SELECT * FROM tempUIDSuccessDetail;                                          \n" +
                "		ELSE                                           \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;                                                           \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS                                          \n" +
                "			SELECT 1;                                          \n" +
                "		END IF;                                          \n" +
                "	END IF;                              \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->26-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4519,'2.00','V1','User Story 32876: Material Receipt: Change validation for qty based on packaging and UMID SPQ instead on SPQ of Part Master - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4519:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-04-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitAllocationLineItemsForExport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitAllocationLineItemsForExport`(    \n" +
                "IN pPartID INT,    \n" +
                "IN pRefSalesOrderDetID INT,           \n" +
                "IN pIsConsolidated TINYINT,    \n" +
                "IN pKitQty INT,    \n" +
                "IN pCustomerId INT        \n" +
                ")  \n" +
                "BEGIN   \n" +
                "	IF (pIsConsolidated = 0) THEN    \n" +
                "		SELECT * FROM    \n" +
                "			(SELECT  z.id AS id,	 z.refSalesOrderDetID,	 z.mfgPNID,	 z.partid,	 z.lineID AS _lineID,	z.cust_lineID,	    \n" +
                "					(CASE    \n" +
                "						WHEN z.custPNID IS NULL THEN NULL    \n" +
                "						ELSE FUN_GETMFGPNBYID(z.custPNID)    \n" +
                "					END) custPN, z.restrictUseInBOMExcludingAliasStep,    \n" +
                "					z.isGoodPart, z.restrictPackagingUsePermanently, z.restrictPackagingUseWithpermission, z.restrictUsePermanently, z.restrictUSEwithpermission,    \n" +
                "					z.customerRev,	 z.customerDescription,	 z.qpa,	 z.refDesig,	FUN_GETUOMBYID(z.uomID) AS uom,    \n" +
                "					(CASE    \n" +
                "						WHEN z.isInstall = 1 THEN 'TRUE'    \n" +
                "						ELSE 'FALSE'    \n" +
                "					END) AS isInstall,    \n" +
                "					(CASE    \n" +
                "						WHEN z.isPurchase = 1 THEN 'TRUE'    \n" +
                "						ELSE 'FALSE'    \n" +
                "					END) AS isPurchase,    \n" +
                "					z.numOfRows,	z.numOfPosition,	z.dnpQty,	z.dnpDesig,    \n" +
                "					(CASE    \n" +
                "						WHEN z.substitutesAllow = 3 THEN 'Yes with Customer Approval'    \n" +
                "						WHEN z.substitutesAllow = 2 THEN 'No'    \n" +
                "						ELSE ''    \n" +
                "					END) AS substitutesAllow,    \n" +
                "					(CASE    \n" +
                "						WHEN z.isBuyDNPQty = 'Y' THEN 'YES'    \n" +
                "						WHEN z.isBuyDNPQty = 'C' THEN 'Customer Consigned'    \n" +
                "						WHEN z.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'    \n" +
                "						ELSE 'NO'    \n" +
                "					END) AS isBuyDNPQty,    \n" +
                "					(CASE    \n" +
                "						WHEN z.programingStatus = 1 THEN 'Pre-Assy'    \n" +
                "						WHEN z.programingStatus = 2 THEN 'Post-Assy'    \n" +
                "						WHEN z.programingStatus = 3 THEN 'Cust will program'    \n" +
                "						WHEN z.programingStatus = 4 THEN 'Pre-Programmed'    \n" +
                "						ELSE 'N/A'    \n" +
                "					END) AS programingStatus,    \n" +
                "					FUN_GETMFGCODEBYID(z.mfgCodeID) AS mfgCode,		z.mfgPN,	z.customerPartDesc,	z.description AS description,    \n" +
                "					z.allocatedQty,		z.allocatedUnit,	z.allocatedPins,    \n" +
                "					(CASE    \n" +
                "						WHEN z.uomMismatchedStep = 0 THEN 0    \n" +
                "						ELSE (z.qpa * IFNULL(pKitQty, 0))    \n" +
                "					END) requiredQtyBuild,    \n" +
                "					(CASE    \n" +
                "						WHEN    \n" +
                "							(z.uomMismatchedStep = 0    \n" +
                "								OR z.connecterTypeID != - 2)    \n" +
                "						THEN    \n" +
                "							0    \n" +
                "						ELSE (z.qpa * IFNULL(pKitQty, 0) * IFNULL(z.numOfPosition, 0))    \n" +
                "					END) requirePinsBuild,    \n" +
                "					(CASE    \n" +
                "						WHEN    \n" +
                "							z.uomMismatchedStep = 0    \n" +
                "								OR z.isNotRequiredKitAllocation = 1    \n" +
                "						THEN    \n" +
                "							0    \n" +
                "						ELSE CASE    \n" +
                "							WHEN    \n" +
                "								z.connecterTypeID = - 2    \n" +
                "							THEN    \n" +
                "								CASE    \n" +
                "									WHEN (((IFNULL(z.qpa, 0) * pKitQty * IFNULL(z.numOfPosition, 0)) - (z.allocatedPins + z.consumePin)) < 0) THEN 0    \n" +
                "									ELSE ((IFNULL(z.qpa, 0) * pKitQty * IFNULL(z.numOfPosition, 0)) - (z.allocatedPins + + z.consumePin))    \n" +
                "								END    \n" +
                "							ELSE CASE    \n" +
                "								WHEN (((IFNULL(z.qpa, 0) * pKitQty) - (z.allocatedUnit + z.consumeUnits)) < 0) THEN 0    \n" +
                "								ELSE ((IFNULL(z.qpa, 0) * pKitQty) - (z.allocatedUnit + z.consumeUnits))    \n" +
                "							END    \n" +
                "						END    \n" +
                "					END) shortagePerBuild,    \n" +
                "					SUM(IFNULL(FUN_CONVERTUOM(d.uom, z.uomID, IF(d.customerConsign = 0, IFNULL(d.availableStock, 0), 0)), 0)) availabelStock,    \n" +
                "					SUM(IFNULL(FUN_CONVERTUOM(d.uom, z.uomID, IF(d.customerConsign = 1    \n" +
                "						AND d.customerID = pCustomerId, IFNULL(d.availableStock, 0), 0)), 0)) availabelStockCustomerConsign    \n" +
                "			FROM    \n" +
                "				(SELECT l.id AS id,		l.refSalesOrderDetID,	al.id AS rfqLineItemsAlternateID,	l.partID AS partid,		l.lineID,    \n" +
                "					l.cust_lineID,		l.custPN,		l.custPNID,		l.customerRev,	l.customerDescription,	l.refDesig,		l.numOfPosition,    \n" +
                "					l.programingStatus,		l.substitutesAllow,		IFNULL(d.mfgPN, c.mfgPN) AS mfgPN,	l.uomID,  IFNULL(d.isGoodPart, c.isGoodPart) isGoodPart,     \n" +
                "					IFNULL(d.restrictPackagingUseWithpermission, c.restrictPackagingUseWithpermission) restrictPackagingUseWithpermission,      \n" +
                "					IFNULL(d.restrictPackagingUsePermanently, c.restrictPackagingUsePermanently) restrictPackagingUsePermanently, 	al.restrictUseInBOMExcludingAliasStep,    \n" +
                "					IFNULL(d.restrictUsePermanently, c.restrictUsePermanently) restrictUsePermanently, IFNULL(d.restrictUSEwithpermission, c.restrictUSEwithpermission) restrictUSEwithpermission,    \n" +
                "					CONCAT(l.description, '  ', al.description) AS description,		l.isInstall,	l.isPurchase,	l.dnpQty,	l.dnpDesig,    \n" +
                "					l.isBuyDNPQty,		l.numOfRows,	al.uomMismatchedStep,	l.customerPartDesc,		l.isNotRequiredKitAllocation,    \n" +
                "					IFNULL(d.id, c.id) AS mfgPNID,	IFNULL(d.mfgcodeID, c.mfgcodeID) AS mfgCodeID,	IFNULL(d.uom, c.uom) AS uom, c.connecterTypeID,    \n" +
                "					IFNULL(d.noOfRows, c.noOfRows) AS noOfRows,		IFNULL(ka.allocatedQty, 0) allocatedQty,	IFNULL(ka.allocatedUnit, 0) allocatedUnit,    \n" +
                "					IFNULL(ka.allocatedPins, 0) allocatedPins,	IFNULL(ka.consumePin, 0) consumePin,	IFNULL(ka.consumeUnits, 0) consumeUnits,	IFNULL(ka.consumeQty, 0) consumeQty,    \n" +
                "					(CASE    \n" +
                "						WHEN    \n" +
                "							l.isPurchase = 1 OR l.isInstall = 1    \n" +
                "						THEN    \n" +
                "							(IFNULL(l.qpa, 0) + IF(l.isBuyDNPQty = 'Y'    \n" +
                "								OR l.isBuyDNPQty = 'P'    \n" +
                "								OR l.isBuyDNPQty = 'C', IFNULL(l.dnpQty, 0), 0))    \n" +
                "						ELSE (IF(l.isBuyDNPQty = 'Y'    \n" +
                "							OR l.isBuyDNPQty = 'P'    \n" +
                "							OR l.isBuyDNPQty = 'C', IFNULL(l.dnpQty, 0), 0))    \n" +
                "					END) AS qpa    \n" +
                "			FROM    \n" +
                "				kit_allocation_lineitems l    \n" +
                "			JOIN kit_allocation_lineitems_alternatepart al ON l.id = al.refKitAllocationLineItemId AND l.isDeleted = 0 AND al.isDeleted = 0 AND al.mfgPNID IS NOT NULL    \n" +
                "			JOIN component c ON al.mfgPNID = c.id    \n" +
                "			LEFT JOIN component d ON c.packaginggroupID = d.packaginggroupID    \n" +
                "			LEFT OUTER JOIN vu_kit_allocation_summary ka ON al.refSalesOrderDetID = ka.refSalesOrderDetID    \n" +
                "				AND al.partID = ka.assyID    \n" +
                "				AND al.refRfqLineitem = ka.refBOMLineID    \n" +
                "				AND NOT EXISTS( SELECT  1 FROM    \n" +
                "					kit_allocation_lineitems_alternatepart `x`    \n" +
                "				WHERE x.refRfqLineitem = al.refRfqLineitem AND x.mfgPNID = d.id AND d.id <> c.id AND x.isDeleted = 0)    \n" +
                "			WHERE    \n" +
                "				l.partID = pPartID    \n" +
                "					AND l.refSalesOrderDetID = pRefSalesOrderDetID) z    \n" +
                "			LEFT JOIN vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, mfgPNID)    \n" +
                "			GROUP BY z.id , z.rfqLineItemsAlternateID , z.refSalesOrderDetID , z.mfgPNID , z.partid , z.lineID , z.cust_lineID , z.custPN , z.customerRev ,    \n" +
                "					z.isGoodPart, z.restrictPackagingUsePermanently, z.restrictPackagingUseWithpermission, z.restrictUsePermanently, z.restrictUSEwithpermission, z.restrictUseInBOMExcludingAliasStep,    \n" +
                "                    z.customerDescription , z.qpa , z.refDesig , z.uomID , z.isInstall , z.isPurchase , z.numOfRows , z.customerPartDesc , z.numOfPosition ,     \n" +
                "					z.isNotRequiredKitAllocation , z.dnpQty , z.dnpDesig , z.isBuyDNPQty , z.programingStatus , z.substitutesAllow,     \n" +
                "					z.mfgCodeID , z.mfgPN , z.noOfRows , z.mfgPNID , z.description) a;    \n" +
                "	ELSE    \n" +
                "  \n" +
                "        # Create Temp Table to Get partID from bifurcate consolidated MFR IDs - consolidatedMfgPNIDs    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_consolidate_Line_alternateparts;                                                                  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_consolidate_Line_alternateparts AS    \n" +
                "		SELECT  id, refSalesOrderDetid, rfqLineItemsId, consolidatedLineItemIDs,isAssembly,isDeleted,    \n" +
                "		SUBSTRING_INDEX(SUBSTRING_INDEX(a.consolidatedMfgPNIDs, ',', numbers.n), ',', -1) partid    \n" +
                "			FROM (select 1 n union all    \n" +
                "				  select 2 union all     \n" +
                "				  select 3 union all    \n" +
                "				  select 4 union all     \n" +
                "				  select 5 union all    \n" +
                "				  select 6 union all    \n" +
                "				  select 7 union all    \n" +
                "				  select 8 union all    \n" +
                "				  select 9 union all    \n" +
                "				  select 10 union all    \n" +
                "				  select 11 union all    \n" +
                "				  select 12 union all     \n" +
                "				  select 13 union all    \n" +
                "				  select 14 union all     \n" +
                "				  select 15 union all    \n" +
                "				  select 16 union all    \n" +
                "				  select 17 union all    \n" +
                "				  select 18 union all    \n" +
                "				  select 19 union all    \n" +
                "				  select 20 union all    \n" +
                "				  select 21 union all    \n" +
                "				  select 22 union all     \n" +
                "				  select 23 union all    \n" +
                "				  select 24 union all     \n" +
                "				  select 25    \n" +
                "				  ) numbers INNER JOIN  kit_allocation_consolidate_line_detail a     \n" +
                "			   on CHAR_LENGTH(a.consolidatedMfgPNIDs)    \n" +
                "				 -CHAR_LENGTH(REPLACE(a.consolidatedMfgPNIDs, ',', ''))>=numbers.n-1    \n" +
                "			 WHERE refsalesorderdetid = pRefSalesOrderDetID AND isAssembly = 0 AND isDeleted = 0    \n" +
                "			 ORDER BY id, n;    \n" +
                "  \n" +
                "			SELECT * FROM    \n" +
                "				(SELECT c.id,	 refSalesOrderDetID,	partid,		_lineID,	    \n" +
                "						FUN_GETMFGCODEBYPARTID(partid) AS mfgCode,	FUN_GETMFGPNBYID(partid) AS mfgPN,    \n" +
                "						custPNID,	qpa,	consolidatedQPA,	dnpQPA,		isInstall,	    \n" +
                "						isGoodPart, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, restrictUsePermanently, restrictUSEwithpermission,	    \n" +
                "						FUN_GETUNITNAMEBYID(uomID) uom,		FUN_GETPARTTYPENAMEBYID(parttypeID) partTypeName,	FUN_GETMOUNTINGTYPENAMEBYID(mountingTypeID) mountingTypeName,    \n" +
                "						numOfPosition,		requiredQtyBuild,		requirePinsBuild,	allocatedQty,	 c.allocatedUnit,	consumeUnits,    \n" +
                "						consumeQty,		consumePin,		allocatedPins,		scrapedPins,	notRequiredKitAllocationReason,    \n" +
                "						(CASE    \n" +
                "							WHEN custPNID IS NULL THEN NULL    \n" +
                "							ELSE FUN_GETMFGPNBYID(custPNID)    \n" +
                "						END) custPN,    \n" +
                "						(CASE    \n" +
                "							WHEN isNotRequiredKitAllocation = 1 THEN 'Yes'    \n" +
                "							ELSE 'No'    \n" +
                "						END) AS isNotRequiredKitAllocationValue,    \n" +
                "						(CASE    \n" +
                "							WHEN    \n" +
                "								uomMismatchedStep = 0    \n" +
                "									OR isNotRequiredKitAllocation = 1    \n" +
                "							THEN    \n" +
                "								0    \n" +
                "							ELSE CASE    \n" +
                "								WHEN    \n" +
                "									c.connecterTypeID = - 2    \n" +
                "								THEN    \n" +
                "									CASE    \n" +
                "										WHEN (((IFNULL(c.qpa, 0) * pKitQty * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0    \n" +
                "										ELSE ((IFNULL(c.qpa, 0) * pKitQty * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin))    \n" +
                "									END    \n" +
                "								ELSE CASE    \n" +
                "									WHEN (((IFNULL(c.qpa, 0) * pKitQty) - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0    \n" +
                "									ELSE ((IFNULL(c.qpa, 0) * pKitQty) - (c.allocatedUnit + c.consumeUnits))    \n" +
                "								END    \n" +
                "							END    \n" +
                "						END) shortagePerBuild    \n" +
                "				FROM    \n" +
                "					(SELECT      a.id,		a.lineId AS _lineID,	a.refSalesOrderDetId refSalesOrderDetID,	b.partid,    \n" +
                "							a.rfqLineItemsId,		a.consolidatedpartlineID,	a.consolidateRestrictPartDetail,	a.ConsolidatedLineItemIDs,    \n" +
                "							a.custPNID,		a.isNotRequiredKitAllocation,		a.notRequiredKitAllocationReason,	 a.uomMismatchedStep,    \n" +
                "							a.consolidatedMfgPNIDs mfgPart,		IFNULL(a.kitQPAWithDNP, 0) qpa,		IFNULL(a.kitQPAWithDNP, 0) consolidatedQPA,    \n" +
                "							IFNULL(a.kitDNPWithoutQPA, 0) dnpQPA,	a.uomID,	a.isInstall,	a.connecterTypeID,	 a.partType parttypeID,    \n" +
                "							a.mountingTypeID,	a.numOfPosition,    \n" +
                "							b.isGoodPart, b.restrictPackagingUsePermanently, b.restrictPackagingUseWithpermission, b.restrictUsePermanently, b.restrictUSEwithpermission,    \n" +
                "							(CASE    \n" +
                "								WHEN a.uomMismatchedStep = 0 THEN 0    \n" +
                "								ELSE (IFNULL(a.kitQPAWithDNP, 0) * pKitQty)    \n" +
                "							END) AS requiredQtyBuild,    \n" +
                "							(CASE    \n" +
                "							WHEN    \n" +
                "								(a.uomMismatchedStep = 1    \n" +
                "									AND a.connecterTypeID = - 2)    \n" +
                "							THEN    \n" +
                "								((IFNULL(a.kitQPAWithDNP, 0) * pKitQty) * IFNULL(a.numOfPosition, 0))    \n" +
                "							ELSE 0    \n" +
                "						END) AS requirePinsBuild,    \n" +
                "						IFNULL(b.allocatedQty, 0) allocatedQty,		IFNULL(b.allocatedUnit, 0) allocatedUnit,	IFNULL(b.consumeUnits, 0) consumeUnits,    \n" +
                "						IFNULL(b.consumeQty, 0) consumeQty,		IFNULL(b.allocatedPins, 0) allocatedPins,	IFNULL(b.consumePin, 0) consumePin,		IFNULL(b.scrapedPins, 0) scrapedPins    \n" +
                "				FROM    \n" +
                "					kit_allocation_consolidate_Line_detail a    \n" +
                "				INNER JOIN (SELECT  a.refSalesOrderDetid,	a.rfqLineItemsId,	a.consolidatedLineItemIDs,	a.partid,    \n" +
                "						c.isGoodPart, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.restrictUsePermanently, c.restrictUSEwithpermission,    \n" +
                "                        SUM(b.allocatedQty) allocatedQty,	SUM(b.allocatedunit) allocatedUnit,	SUM(b.AllocatedPins) allocatedPins,    \n" +
                "						SUM(b.ConsumeQty) consumeQty,	SUM(b.ConsumeUnits) consumeUnits,	SUM(b.consumePin) consumePin,	SUM(b.scrapedPins) scrapedPins    \n" +
                "				FROM    \n" +
                "					temp_consolidate_Line_alternateparts a    \n" +
                "				JOIN component c ON a.partid = c.id    \n" +
                "				LEFT JOIN vu_kit_allocation_summary b ON a.refsalesORderDetid = b.refsalesOrderDetId    \n" +
                "					AND FIND_IN_SET(b.refBOMLineID, a.consolidatedLineItemIDs)    \n" +
                "				GROUP BY a.refSalesOrderDetid , a.rfqLineItemsId , a.partid) b ON a.refSalesOrderDetId = b.refSalesOrderDetId    \n" +
                "					AND a.rfqLineItemsId = b.rfqLineItemsId    \n" +
                "					AND a.consolidatedLineItemIDs = b.consolidatedLineItemIDs    \n" +
                "				WHERE a.refSalesOrderDetID = pRefSalesOrderDetID AND a.isAssembly = 0 AND a.isDeleted = 0) AS c    \n" +
                "				LEFT JOIN vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, mfgPart)    \n" +
                "				GROUP BY c.id , _lineID , refSalesOrderDetID , custPNID , isNotRequiredKitAllocation , uomMismatchedStep , qpa ,     \n" +
                "						consolidatedQPA , dnpQPA , uomID , isInstall , c.connecterTypeID , parttypeID , mountingTypeID , numOfPosition ,    \n" +
                "						isGoodPart, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, restrictUsePermanently, restrictUSEwithpermission,     \n" +
                "						notRequiredKitAllocationReason,	requiredQtyBuild , requirePinsBuild , allocatedQty , allocatedUnit , consumeUnits , consumeQty , allocatedPins , scrapedPins , c.partid     \n" +
                "				order by _lineID) AS mainQuery; 				    \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_consolidate_Line_alternateparts;     \n" +
                "    END IF;    \n" +
                "END;  \n" +
                /* **************************** New Script -> 26-04-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4520,'2.00','V1','Bug 32920: Qa Testing issues for #32598: Kit list/Kit page: Give Provision to export kit bom along with stock details - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4520:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-04-2021 *********************************** */
                "SET @customerID = (SELECT pageID FROM page_detail WHERE pageName = 'Manage Customer');  \n" +
                " update  page_detail set parentPageID = @customerID WHERE pageName = 'Manage Customer Comment';  \n" +
                "  \n" +
                " SET @supplierID = (SELECT pageID FROM page_detail WHERE pageName = 'Manage Supplier');  \n" +
                " UPDATE  page_detail SET parentPageID = @supplierID WHERE pageName = 'Manage Supplier Comment';  \n" +
                /* **************************** Add Script Version ->26-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4521,'2.00','V1',' Updating constant id with relative id - Purav '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4521:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-04-2021 *********************************** */
                "ALTER TABLE mfgcodemst_comment_det ALTER isDeleted SET DEFAULT 0;  \n" +
                /* **************************** Add Script Version ->26-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4522,'2.00','V1','Set dedault value to idDelete Column - Purav '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4522:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesShippingDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(                                          \n" +
                "	IN psalesorderDetID INT ,                                        \n" +
                "	IN packingSlipID INT,      \n" +
                "	IN ppackingslipDetID INT                                         \n" +
                "    )  \n" +
                "BEGIN                                           \n" +
                " SELECT ss.shippingID,                            \n" +
                "        ss.sDetId,                            \n" +
                "		IFNULL(sd.custPOLineNumber ,1)   custPOLineNumber,                            \n" +
                "        IFNULL(ss.releaseNumber,1) releaseNumber,                            \n" +
                "        ss.qty,                            \n" +
                "        ss.shippingDate,                                        \n" +
                "        ss.releaseNotes,                            \n" +
                "        sd.tentativeBuild,                            \n" +
                "        sd.qty AS poQty,                            \n" +
                "        sd.partID,                            \n" +
                "        sd.price,                            \n" +
                "        sd.lineID,                  \n" +
                "        sd.internalComment,                    \n" +
                "        sd.partDescription,                  \n" +
                "        sd.remark,      \n" +
                "        c.iscustom,                                          \n" +
                "         c.mfgpn,                            \n" +
                "         c.mfgpndescription,                            \n" +
                "         c.pidcode,                            \n" +
                "         fun_getUnitNameByID(c.uom) unitMeaser,                            \n" +
                "         c.nickName,                \n" +
                "         c.mfgcodeID,                \n" +
                "         fun_getMfgCodeAndNameByID(c.mfgcodeID)mfgName,                                   \n" +
                "	(CASE WHEN ss.shippingMethodID IS NULL THEN som.shippingMethodID                      \n" +
                "			ELSE ss.shippingMethodID END) shippingMethodID ,                          \n" +
                "	(CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddressID                      \n" +
                "			ELSE ss.shippingAddressID END) shippingAddressID ,	                               \n" +
                "	fun_getRoHSIconByPartID(sd.partID) rohsIcon,                            \n" +
                "	fun_getRoHSNameByPartID(sd.partID) rohsName,                \n" +
                "	fun_getCertificationByPartID(sd.partID)standards,                                    \n" +
                "	CONCAT(IFNULL(ss.releaseNumber,1),' | ',ss.qty,' | ',DATE_FORMAT(ss.shippingDate, '%m-%d-%y')) shipping,                             \n" +
                "	(SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd WHERE refsalesorderdetid=ss.sDetId                       \n" +
                "		AND cpd.refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE transType = 'P' AND isDeleted = 0)                      \n" +
                "		AND cpd.isdeleted=0) shippedQty ,                      \n" +
                "	(CASE WHEN ss.shippingMethodID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.shippingMethodID))                      \n" +
                "		ELSE (fun_getGenericCategoryCodeNameByID(ss.shippingMethodID)) END) shippingMethodText,        \n" +
                "		c.partType,        \n" +
                "        (SELECT mfg.mfgType FROM mfgcodemst mfg WHERE mfg.id = c.mfgcodeid AND mfg.isDeleted = 0 ) mfgType,    \n" +
                "        sd.quoteNumber,sd.quoteFrom, sd.refAssyQtyTurnTimeID, sd.refRFQGroupID, sd.refRFQQtyTurnTimeID  ,    \n" +
                "        IFNULL(sd.assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'     \n" +
                "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'    \n" +
                "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )    \n" +
                "					FROM rfq_assy_quantity_turn_time rfqAssyTurn     \n" +
                "				JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0    \n" +
                "                    WHERE rfqAssyTurn.id = sd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText    \n" +
                " FROM salesshippingmst ss                               \n" +
                "	JOIN salesorderdet sd ON ss.sDetID=sd.id                     \n" +
                "	JOIN salesordermst som ON som.id = sd.refSalesOrderID                      \n" +
                "	JOIN COMPONENT c ON c.id=sd.partid         \n" +
                "  \n" +
                "WHERE sd.id=psalesorderDetID                      \n" +
                "AND  sd.isDeleted = 0 AND       \n" +
                "(CASE WHEN ppackingslipDetID IS NULL THEN      \n" +
                "	ss.qty > (SELECT   \n" +
                "	IFNULL(SUM(cpd.shipqty),0) FROM customer_packingslip_det cpd WHERE cpd.shippingId=ss.shippingID   \n" +
                "		AND cpd.isdeleted=0 AND refCustPackingSlipID IN (  \n" +
                "		SELECT id FROM customer_packingslip WHERE transType=\"P\"))      \n" +
                "ELSE       \n" +
                "	ss.qty=ss.qty      \n" +
                "END)      \n" +
                "AND ss.isdeleted=0              \n" +
                "ORDER BY ss.releaseNumber,ss.shippingDate;                                          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->26-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4523,'2.00','V1','Resolved Production Issue for Release Line not comming - VS '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4523:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 27-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItems`(              \n" +
                "	IN ppageIndex INT,              \n" +
                "	IN precordPerPage INT,              \n" +
                "	IN pOrderBy VARCHAR(255),              \n" +
                "	IN pWhereClause VARCHAR(16383),              \n" +
                "	IN pPartID INT,              \n" +
                "	IN pPackaging TINYINT            \n" +
                ")  \n" +
                "BEGIN              \n" +
                "	DECLARE pOffset INT;            \n" +
                "	DECLARE rowNumWhere VARCHAR(255);         \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);         \n" +
                "  \n" +
                "  SET SESSION group_concat_max_len = 5000000000;            \n" +
                "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;          \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS Temp_Sproc_GetRFQLineItems;              \n" +
                "           set @RFQLineItemDetail = concat(\"CREATE TEMPORARY TABLE IF NOT EXISTS Temp_Sproc_GetRFQLineItems AS              \n" +
                "			select  rl.id,  IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep, IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep,            \n" +
                "			IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,            \n" +
                "			rl.lineID,  fun_getAssyPIDCodeByID(rl.custPNID) CPNPID, rl.qpa, rl.refDesig,rl.isPurchase, rl.isInstall, rl.dnpQty, rl.dnpDesig,            \n" +
                "			(CASE WHEN rl.isBuyDNPQty = 'Y' THEN 'YES'             \n" +
                "            WHEN rl.isBuyDNPQty = 'C' THEN 'Customer Consigned'             \n" +
                "            WHEN rl.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'            \n" +
                "            ELSE 'NO' END) AS isBuyDNPQty,            \n" +
                "			fun_getUnitNameByID(rl.uomID) unitName, fun_GetBOMLineMountingType(rl.id) as `name`,fun_GetBOMLineFunctionalType(rl.id) as `functionalType`,            \n" +
                "			CONCAT(GROUP_CONCAT(IFNULL(REPLACE(ra.description,'            \n" +
                "			','<br/>'),'') SEPARATOR '<br/>'),(CASE WHEN GROUP_CONCAT(IFNULL(ra.description,'') SEPARATOR '<br/>') = ''  THEN '' ELSE '<br/>'END), IFNULL(REPLACE(rl.description,'','<br/>'),'')) AS internalComment,              \n" +
                "			rl.numOfPosition, rl.valueAddedCost, com.PIDCode, com.category, rl.cust_lineID, rl.level, rl.uomID,   rl.partID, ra.mfgPNID,            \n" +
                "			b.mfgPN, b.PIDList         \n" +
                "			from rfq_lineitems rl            \n" +
                "			LEFT JOIN rfq_lineitems_alternatepart ra ON rl.id =ra.rfqLineItemsID AND rl.isDeleted = 0              \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND com.isDeleted = 0              \n" +
                "			inner join             \n" +
                "				(select a.id, a.partid,        \n" +
                "                GROUP_CONCAT(DISTINCT(IFNULL(REPLACE(REPLACE(a.PIDCode,',','***'),',','..'),'N/A')),'@@@',        \n" +
                "                a.RoHSStatusID,'@@@',IFNULL(a.name,''),'@@@', IFNULL(a.rohsIcon,''),'@@@',IFNULL(a.isCustom,0),        \n" +
                "                '@@@',REPLACE(IFNULL(a.feature,''),',',''),'@@@',IFNULL(a.partStatusname,''),'@@@',            \n" +
                "				REPLACE(IFNULL(a.partStatusColor,''),',','***'),'@@@',REPLACE(IFNULL(a.partTBD,''),',','***'),'@@@',            \n" +
                "				IFNULL(a.restrictUseInBOMStep,0) ,'@@@',            \n" +
                "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),'@@@',            \n" +
                "				IFNULL(a.restrictUsePermanentlyStep,1) ,'@@@',            \n" +
                "				IFNULL(a.restrictUseWithPermissionStep,1),'@@@',            \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),'@@@',            \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),'@@@',            \n" +
                "				IFNULL(a.restrictUseExcludingAliasStep,1),'@@@',            \n" +
                "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),'@@@',            \n" +
                "				IFNULL(REPLACE(REPLACE(a.description,',','***'),'','<br/>'),''),'@@@','','@@@','','@@@',            \n" +
                "				IFNULL(a.approvedMountingType,0),'@@@',            \n" +
                "				IFNULL(a.mismatchMountingTypeStep,1),'@@@' ,                  \n" +
                "				REPLACE(a.mfgPN,',','***'),'@@@',                  \n" +
                "				a.mfgCode,'@@@',                  \n" +
                "				a.mfgPNID,'@@@',           \n" +
                "                IFNULL(a.isDocumentUpload,0), '@@@',    \n" +
                "                ifnull(a.custAssyPN,''),'@@@' ,   IFNULL(a.mismatchFunctionalCategoryStep,1)  \n" +
                "				ORDER BY a.mfgPN asc separator '\",v_GroupConcatSeparator,\"') AS mfgPn ,            \n" +
                "				GROUP_CONCAT(a.PIDCode) PIDList            \n" +
                "				from (            \n" +
                "					SELECT  `z`.`id` AS `id`, `z`.`partid` AS `partid`, `z`.`isBomLine` AS `isBomLine`, `z`.`mfgPNID` AS `mfgPNID`, `z`.`PIDCode` AS `PIDCode`,            \n" +
                "					`z`.`RoHSStatusID` AS `RoHSStatusID`, FUN_GETROHSNAMEBYID(`z`.`RoHSStatusID`) AS `name`, FUN_GETROHSICONBYID(`z`.`RoHSStatusID`) AS `rohsIcon`,            \n" +
                "					FUN_GETPARTSTATUSNAMEBYID(`z`.`partStatus`) AS `partStatusName`, `z`.`approvedMountingType` AS `approvedMountingType`, `z`.`mismatchMountingTypeStep` AS `mismatchMountingTypeStep`, `z`.`mismatchFunctionalCategoryStep` as mismatchFunctionalCategoryStep,  \n" +
                "					FUN_GETPARTSTATUSCOLORBYID(`z`.`partStatus`) AS `partStatusColor`, FUN_GETPARTTBDDETAILS(`z`.`mfgPNID`) AS `partTBD`, FUN_GETMFGCODEBYID(`z`.`mfgCodeID`) AS `mfgCode`,            \n" +
                "					`z`.`isCustom` AS `iscustom`, `z`.`custAssyPN` as custAssyPN, `z`.`feature` AS `feature`, `z`.`mfgPN` AS `mfgpn`, `z`.`isDocumentUpload` AS `isDocumentUpload`, `z`.`description` AS `description`,            \n" +
                "					MAX(`z`.`restrictUseInBOMStep`) AS `restrictUseInBOMStep`,            \n" +
                "					MAX(`z`.`restrictUseInBOMWithPermissionStep`) AS `restrictUseInBOMWithPermissionStep`,            \n" +
                "					MIN(`z`.`restrictUsePermanentlyStep`) AS `restrictUsePermanentlyStep`,            \n" +
                "					MIN(`z`.`restrictUseWithPermissionStep`) AS `restrictUseWithPermissionStep`,            \n" +
                "					MAX(`z`.`restrictUseInBOMExcludingAliasStep`) AS `restrictUseInBOMExcludingAliasStep`,            \n" +
                "					MAX(`z`.`restrictUseInBOMExcludingAliasWithPermissionStep`) AS `restrictUseInBOMExcludingAliasWithPermissionStep`,            \n" +
                "					MIN(`z`.`restrictUseExcludingAliasStep`) AS `restrictUseExcludingAliasStep`,            \n" +
                "					MIN(`z`.`restrictUseExcludingAliasWithPermissionStep`) AS `restrictUseExcludingAliasWithPermissionStep`            \n" +
                "					FROM            \n" +
                "					(SELECT  `l`.`id` AS `id`, `l`.`partID` AS `partid`, IFNULL(`d`.`id`, `c`.`id`) AS `mfgPNID`,            \n" +
                "							IF((`c`.`id` = IFNULL(`d`.`id`, `c`.`id`)), TRUE, FALSE) AS `isBomLine`,            \n" +
                "							IFNULL(`d`.`mfgcodeID`, `c`.`mfgcodeID`) AS `mfgCodeID`,            \n" +
                "							IFNULL(`d`.`mfgPN`, `c`.`mfgPN`) AS `mfgPN`,            \n" +
                "							IFNULL(`d`.`PIDCode`, `c`.`PIDCode`) AS `PIDCode`,            \n" +
                "							IFNULL(`d`.`RoHSStatusID`, `c`.`RoHSStatusID`) AS `RoHSStatusID`,            \n" +
                "							IFNULL(`d`.`feature`, `c`.`feature`) AS `feature`,            \n" +
                "							IFNULL(`d`.`isCustom`, `c`.`isCustom`) AS `isCustom`,      \n" +
                "                            IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,      \n" +
                "							IFNULL(`d`.`partStatus`, `c`.`partStatus`) AS `partStatus`,            \n" +
                "							IFNULL(`al`.`restrictUseInBOMStep`, 0) AS `restrictUseInBOMStep`,            \n" +
                "							IFNULL(`al`.`restrictUseInBOMWithPermissionStep`, 0) AS `restrictUseInBOMWithPermissionStep`,            \n" +
                "							IF((`c`.`id` = IFNULL(`d`.`id`, `c`.`id`)), `al`.`description`, '') AS `description`,            \n" +
                "							(CASE            \n" +
                "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUsePermanentlyStep`, 1)            \n" +
                "								ELSE (CASE            \n" +
                "									WHEN (IFNULL(`d`.`restrictUsePermanently`, 0) = 1) THEN 0            \n" +
                "									ELSE 1            \n" +
                "								END)            \n" +
                "							END) AS `restrictUsePermanentlyStep`,            \n" +
                "							IFNULL(`al`.`restrictUseWithPermissionStep`, 1) AS `restrictUseWithPermissionStep`,            \n" +
                "							(CASE            \n" +
                "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUseInBOMExcludingAliasStep`, 0)            \n" +
                "								ELSE (CASE            \n" +
                "									WHEN ((((IFNULL(`d`.`restrictUsePermanently`, 0) + IFNULL(`d`.`restrictUSEwithpermission`, 0)) + IFNULL(`d`.`restrictPackagingUsePermanently`, 0)) + IFNULL(`d`.`restrictPackagingUseWithpermission`, 0)) > 0) THEN 1            \n" +
                "									ELSE 0            \n" +
                "								END)            \n" +
                "							END) AS `restrictUseInBOMExcludingAliasStep`,            \n" +
                "							(CASE            \n" +
                "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUseInBOMExcludingAliasWithPermissionStep`, 0)            \n" +
                "								ELSE (CASE            \n" +
                "									WHEN ((((IFNULL(`d`.`restrictUsePermanently`, 0) + IFNULL(`d`.`restrictUSEwithpermission`, 0)) + IFNULL(`d`.`restrictPackagingUsePermanently`, 0)) + IFNULL(`d`.`restrictPackagingUseWithpermission`, 0)) > 0) THEN 1            \n" +
                "									ELSE 0            \n" +
                "								END)            \n" +
                "							END) AS `restrictUseInBOMExcludingAliasWithPermissionStep`,            \n" +
                "							(CASE            \n" +
                "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUseExcludingAliasStep`, 1)            \n" +
                "								ELSE (CASE            \n" +
                "									WHEN ((((IFNULL(`d`.`restrictUsePermanently`, 0) + IFNULL(`d`.`restrictUSEwithpermission`, 0)) + IFNULL(`d`.`restrictPackagingUsePermanently`, 0)) + IFNULL(`d`.`restrictPackagingUseWithpermission`, 0)) > 0) THEN 0            \n" +
                "									ELSE 1            \n" +
                "								END)            \n" +
                "							END) AS `restrictUseExcludingAliasStep`,            \n" +
                "							(CASE            \n" +
                "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUseExcludingAliasWithPermissionStep`, 1)            \n" +
                "								ELSE (CASE            \n" +
                "									WHEN ((((IFNULL(`d`.`restrictUsePermanently`, 0) + IFNULL(`d`.`restrictUSEwithpermission`, 0)) + IFNULL(`d`.`restrictPackagingUsePermanently`, 0)) + IFNULL(`d`.`restrictPackagingUseWithpermission`, 0)) > 0) THEN 0            \n" +
                "									ELSE 1            \n" +
                "								END)            \n" +
                "							END) AS `restrictUseExcludingAliasWithPermissionStep`,            \n" +
                "							IFNULL(`al`.`approvedMountingType`, 0) AS `approvedMountingType`,            \n" +
                "							IFNULL(`al`.`mismatchMountingTypeStep`, 1) AS `mismatchMountingTypeStep`,  \n" +
                "                            IFNULL(`al`.`mismatchFunctionalCategoryStep`, 1) AS `mismatchFunctionalCategoryStep`,            \n" +
                "							IFNULL(`ccl`.`isDocumentUpload`, IFNULL(`ccld`.`isDocumentUpload`, 0)) AS `isDocumentUpload`            \n" +
                "					FROM `rfq_lineitems` `l`            \n" +
                "					JOIN `rfq_lineitems_alternatepart` `al` ON `l`.`id` = `al`.`rfqLineItemsID` AND `l`.`isDeleted` = 0 AND `al`.`isDeleted` = 0            \n" +
                "						AND `al`.`mfgPNID` IS NOT NULL            \n" +
                "					JOIN `component` `c` ON `al`.`mfgPNID` = `c`.`id`            \n" +
                "					LEFT JOIN `component` `d` ON `c`.`packaginggroupID` = `d`.`packaginggroupID`            \n" +
                "						AND NOT EXISTS (SELECT  1 FROM `rfq_lineitems_alternatepart` `x`            \n" +
                "						WHERE `x`.`rfqLineItemsID` = `al`.`rfqLineItemsID` AND `x`.`mfgPNID` = `d`.`id` AND `d`.`id` <> `c`.`id` and `x`.`isDeleted` = 0)                        \n" +
                "					LEFT JOIN `component_customer_loa` `ccl` ON `ccl`.`componentID` = `c`.`id`            \n" +
                "						AND `ccl`.`customerID` = (SELECT `component`.`mfgcodeID` FROM `component` WHERE `component`.`id` = `l`.`partID`)            \n" +
                "						AND `ccl`.`isDeleted` = 0            \n" +
                "					LEFT JOIN `component_customer_loa` `ccld` ON `ccld`.`componentID` = `d`.`id`            \n" +
                "						AND `ccld`.`customerID` = (SELECT  `component`.`mfgcodeID` FROM `component` WHERE `component`.`id` = `l`.`partID`)             \n" +
                "						AND `ccld`.`isDeleted` = 0            \n" +
                "						where l.partID = \", pPartID ,\"            \n" +
                "				) `z`            \n" +
                "				GROUP BY `z`.`id` , `z`.`partid` , `z`.`isBomLine` , `z`.`mfgPNID` , `z`.`mfgCodeID` , `z`.`PIDCode` , `z`.`RoHSStatusID` , `z`.`description` , `z`.`partStatus` , `z`.`approvedMountingType` , `z`.`mismatchMountingTypeStep` , `z`.mismatchFunctionalCategoryStep, `z`.`isCustom` , `z`.`feature` , `z`.`mfgPN` , `z`.`isDocumentUpload`                            \n" +
                "				) a            \n" +
                "			where partID = \", pPartID,\" and (case when \",pPackaging,\" = 1 then 1=1 else a.isBomLine = 1 end)            \n" +
                "				Group by id, partid             \n" +
                "			) b on rl.id = b.id            \n" +
                "			WHERE  rl.partID = \", pPartID ,\" and ra.mfgPNID is not null and ra.isDeleted = 0                 \n" +
                "			GROUP BY rl.id              \n" +
                "			ORDER BY rl.lineID \");             \n" +
                "  \n" +
                "            PREPARE RFQLineItemDetail FROM @RFQLineItemDetail;              \n" +
                "			EXECUTE RFQLineItemDetail;              \n" +
                "			DEALLOCATE PREPARE RFQLineItemDetail;        \n" +
                "  \n" +
                "			IF (pOrderBy IS NOT NULL) THEN              \n" +
                "				SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;              \n" +
                "			ELSE              \n" +
                "				SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;              \n" +
                "			END IF;              \n" +
                "  \n" +
                "  \n" +
                "			IF(pWhereClause IS NULL OR pWhereClause = '') THEN              \n" +
                "				SET pWhereClause = '1=1' ;              \n" +
                "			END IF;              \n" +
                "  \n" +
                "  \n" +
                "			IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN              \n" +
                "				SET pOffset = (ppageIndex -1) * precordPerPage;              \n" +
                "				SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;              \n" +
                "			ELSE              \n" +
                "				SET rowNumWhere = '';              \n" +
                "			END IF;              \n" +
                "  \n" +
                "  \n" +
                "			/* to get total count of rows */              \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM Temp_Sproc_GetRFQLineItems where \", pWhereClause );              \n" +
                "			PREPARE query1 FROM @SQLStatement1;              \n" +
                "			EXECUTE query1;              \n" +
                "			DEALLOCATE PREPARE query1;              \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM Temp_Sproc_GetRFQLineItems where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);              \n" +
                "			PREPARE query2 FROM @SQLStatement2;        \n" +
                "			EXECUTE query2;        \n" +
                "			DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "			SET @SQLStatement3= (SELECT fun_getRestrictedPartsinPlannBOM(IFNULL(pPartID,0)));              \n" +
                "			PREPARE query3 FROM @SQLStatement3;              \n" +
                "			EXECUTE query3;              \n" +
                "			DEALLOCATE PREPARE query3;              \n" +
                "			DROP TEMPORARY TABLE Temp_Sproc_GetRFQLineItems;              \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 27-04-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_GetBOMLineMountingType`;  \n" +
                "CREATE FUNCTION `fun_GetBOMLineMountingType`(         \n" +
                "		prfqlineitemid int      \n" +
                "    ) RETURNS char(50) CHARSET utf8mb4  \n" +
                "BEGIN        \n" +
                "	DECLARE result CHAR(50);      \n" +
                "  \n" +
                "SELECT (CASE WHEN COUNT(1) > 1 AND MAX(approvedMountingType) = 1 THEN      \n" +
                "            max(approvedMountingTypeName)      \n" +
                "        WHEN COUNT(1) > 1 AND MAX(approvedMountingType) = 0 THEN      \n" +
                "            'Mismatched'      \n" +
                "        ELSE MIN(name)      \n" +
                "    END) Mountingtype INTO @result       \n" +
                "    FROM (      \n" +
                "			SELECT  mt.name, approvedMountingType,      \n" +
                "            (CASE WHEN approvedMountingType = 1 THEN mt.name ELSE '' END) approvedMountingTypeName      \n" +
                "            FROM rfq_lineitems_alternatepart rlam      \n" +
                "            INNER JOIN component c ON c.id = rlam.mfgpnid      \n" +
                "            INNER JOIN rfq_mountingtypemst mt ON mt.id = c.mountingtypeid      \n" +
                "            WHERE rlam.rfqlineitemsid = prfqlineitemid AND rlam.isDeleted = 0      \n" +
                "            GROUP BY c.mountingtypeid , approvedMountingType) a;      \n" +
                " 	SET result = @result;          \n" +
                "	RETURN result;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-04-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_GetBOMLineFunctionalType`;  \n" +
                "CREATE FUNCTION `fun_GetBOMLineFunctionalType`(         \n" +
                "		prfqlineitemid int      \n" +
                "    ) RETURNS char(50) CHARSET utf8mb4  \n" +
                "BEGIN        \n" +
                "	DECLARE result CHAR(50);      \n" +
                "  \n" +
                "SELECT (CASE WHEN COUNT(1) > 1 AND MAX(approvedMountingType) = 1 THEN      \n" +
                "            max(approvedFuncitonalTypeName)      \n" +
                "        WHEN COUNT(1) > 1 AND MAX(approvedMountingType) = 0 THEN      \n" +
                "            'Mismatched'      \n" +
                "        ELSE MIN(partTypeName)      \n" +
                "    END) functionalType INTO @result       \n" +
                "    FROM (      \n" +
                "			SELECT  pt.partTypeName, approvedMountingType,      \n" +
                "            (CASE WHEN approvedMountingType = 1 THEN pt.partTypeName ELSE '' END) approvedFuncitonalTypeName      \n" +
                "            FROM rfq_lineitems_alternatepart rlam      \n" +
                "            INNER JOIN component c ON c.id = rlam.mfgpnid      \n" +
                "            INNER JOIN rfq_parttypemst pt ON pt.id = c.functionalCategoryID  \n" +
                "            WHERE rlam.rfqlineitemsid = prfqlineitemid AND rlam.isDeleted = 0      \n" +
                "            GROUP BY c.functionalCategoryID , approvedMountingType) a;      \n" +
                " 	SET result = @result;          \n" +
                "	RETURN result;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSupplierQuoteByPartID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSupplierQuoteByPartID`(                                         \n" +
                "IN pPartID TEXT                                         \n" +
                ")  \n" +
                "BEGIN                                         \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(100);                     \n" +
                "	DECLARE vTimeZone VARCHAR(50);                     \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;            \n" +
                "	SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSuplierPrice;      \n" +
                "  \n" +
                "	SET @quoteresult =  CONCAT(\"      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempSuplierPrice AS          \n" +
                "	      SELECT DISTINCT sq.id supplierQuoteID,          \n" +
                "		sp.id supplierQuotePartID,          \n" +
                "		sq.supplierID,          \n" +
                "		m.mfgCode AS supplierCode,          \n" +
                "		m.mfgName AS supplierName,         \n" +
                "		cm.mfgCode,          \n" +
                "		cm.mfgName,          \n" +
                "		sp.partID,          \n" +
                "		sp.supplierPartID,          \n" +
                "		sq.quoteNumber,          \n" +
                "		sq.quoteDate,          \n" +
                "		fun_ApplyCommonDateFormatByParaValue(sq.quoteDate,'\",vTimeZone,\"', '\",vDateDisplayFormat,\"') quoteDateValue,          \n" +
                "		sq.quoteStatus,          \n" +
                "		c.mfgPN,          \n" +
                "		c.PIDCode,          \n" +
                "		c.RoHSStatusID,          \n" +
                "		c.isCustom,  \n" +
                "        c.custAssyPN,  \n" +
                "		r.name rohs,          \n" +
                "		r.rohsIcon,      \n" +
                "		(select count(1) from supplier_quote_part_price sqp where sqp.supplierquotepartdetid= sp.id and sqp.isdeleted=0) priceCount         \n" +
                "	FROM supplier_quote_parts_det sp          \n" +
                "	LEFT JOIN supplier_quote_mst sq ON sq.id = sp.supplierQuoteMstID    \n" +
                "	LeFt Join mfgcodemst m on m.id = sq.supplierID        \n" +
                "	LEFT JOIN Component c ON c.id = sp.partID       \n" +
                "	LEFT JOIN mfgcodemst cm ON cm.id = c.mfgCodeID        \n" +
                "	LEFT JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID          \n" +
                "	WHERE sp.partID in (\",pPartID,\") AND sp.isDeleted = 0 AND sp.isActive;\");          \n" +
                "	PREPARE quoteresult1 FROM @quoteresult;         \n" +
                "	EXECUTE quoteresult1;                                                                            \n" +
                "	DEALLOCATE PREPARE quoteresult1;          \n" +
                "  \n" +
                "	SELECT * FROM    tempSuplierPrice WHERE priceCount>0;      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSuplierPrice;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4524,'2.00','V1','Bug 32707: Bug 32767: Bug 32602:  related changes - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4524:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-04-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitAllocationLineItemsForExport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitAllocationLineItemsForExport`(      \n" +
                "IN pPartID INT,      \n" +
                "IN pRefSalesOrderDetID INT,             \n" +
                "IN pIsConsolidated TINYINT,      \n" +
                "IN pKitQty INT,      \n" +
                "IN pCustomerId INT          \n" +
                ")  \n" +
                "BEGIN     \n" +
                "	IF (pIsConsolidated = 0) THEN      \n" +
                "		SELECT * FROM      \n" +
                "			(SELECT  z.id AS id,	 z.refSalesOrderDetID,	 z.mfgPNID,	 z.partid,	 z.lineID AS _lineID,	z.cust_lineID,	      \n" +
                "					(CASE      \n" +
                "						WHEN z.custPNID IS NULL THEN NULL      \n" +
                "						ELSE FUN_GETMFGPNBYID(z.custPNID)      \n" +
                "					END) custPN, z.restrictUseInBOMExcludingAliasStep,  z.restrictUseInBOMExcludingAliasWithPermissionStep, z.restrictUseInBOMStep, z.restrictUseInBOMWithPermissionStep,     \n" +
                "					z.isGoodPart, z.restrictPackagingUsePermanently, z.restrictPackagingUseWithpermission, z.restrictUsePermanently, z.restrictUSEwithpermission,      \n" +
                "					z.customerRev,	 z.customerDescription,	 z.qpa,	 z.refDesig,	FUN_GETUOMBYID(z.uomID) AS uom,      \n" +
                "					(CASE      \n" +
                "						WHEN z.isInstall = 1 THEN 'TRUE'      \n" +
                "						ELSE 'FALSE'      \n" +
                "					END) AS isInstall,      \n" +
                "					(CASE      \n" +
                "						WHEN z.isPurchase = 1 THEN 'TRUE'      \n" +
                "						ELSE 'FALSE'      \n" +
                "					END) AS isPurchase,      \n" +
                "					z.numOfRows,	z.numOfPosition,	z.dnpQty,	z.dnpDesig,      \n" +
                "					(CASE      \n" +
                "						WHEN z.substitutesAllow = 3 THEN 'Yes with Customer Approval'      \n" +
                "						WHEN z.substitutesAllow = 2 THEN 'No'      \n" +
                "						ELSE ''      \n" +
                "					END) AS substitutesAllow,      \n" +
                "					(CASE      \n" +
                "						WHEN z.isBuyDNPQty = 'Y' THEN 'YES'      \n" +
                "						WHEN z.isBuyDNPQty = 'C' THEN 'Customer Consigned'      \n" +
                "						WHEN z.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'      \n" +
                "						ELSE 'NO'      \n" +
                "					END) AS isBuyDNPQty,      \n" +
                "					(CASE      \n" +
                "						WHEN z.programingStatus = 1 THEN 'Pre-Assy'      \n" +
                "						WHEN z.programingStatus = 2 THEN 'Post-Assy'      \n" +
                "						WHEN z.programingStatus = 3 THEN 'Cust will program'      \n" +
                "						WHEN z.programingStatus = 4 THEN 'Pre-Programmed'      \n" +
                "						ELSE 'N/A'      \n" +
                "					END) AS programingStatus,      \n" +
                "					FUN_GETMFGCODEBYID(z.mfgCodeID) AS mfgCode,		z.mfgPN,	z.customerPartDesc,	z.description AS description,      \n" +
                "					z.allocatedQty,		z.allocatedUnit,	z.allocatedPins,      \n" +
                "					(CASE      \n" +
                "						WHEN z.uomMismatchedStep = 0 THEN 0      \n" +
                "						ELSE (z.qpa * IFNULL(pKitQty, 0))      \n" +
                "					END) requiredQtyBuild,      \n" +
                "					(CASE      \n" +
                "						WHEN      \n" +
                "							(z.uomMismatchedStep = 0      \n" +
                "								OR z.connecterTypeID != - 2)      \n" +
                "						THEN      \n" +
                "							0      \n" +
                "						ELSE (z.qpa * IFNULL(pKitQty, 0) * IFNULL(z.numOfPosition, 0))      \n" +
                "					END) requirePinsBuild,      \n" +
                "					(CASE      \n" +
                "						WHEN      \n" +
                "							z.uomMismatchedStep = 0      \n" +
                "								OR z.isNotRequiredKitAllocation = 1      \n" +
                "						THEN      \n" +
                "							0      \n" +
                "						ELSE CASE      \n" +
                "							WHEN      \n" +
                "								z.connecterTypeID = - 2      \n" +
                "							THEN      \n" +
                "								CASE      \n" +
                "									WHEN (((IFNULL(z.qpa, 0) * pKitQty * IFNULL(z.numOfPosition, 0)) - (z.allocatedPins + z.consumePin)) < 0) THEN 0      \n" +
                "									ELSE ((IFNULL(z.qpa, 0) * pKitQty * IFNULL(z.numOfPosition, 0)) - (z.allocatedPins + + z.consumePin))      \n" +
                "								END      \n" +
                "							ELSE CASE      \n" +
                "								WHEN (((IFNULL(z.qpa, 0) * pKitQty) - (z.allocatedUnit + z.consumeUnits)) < 0) THEN 0      \n" +
                "								ELSE ((IFNULL(z.qpa, 0) * pKitQty) - (z.allocatedUnit + z.consumeUnits))      \n" +
                "							END      \n" +
                "						END      \n" +
                "					END) shortagePerBuild,      \n" +
                "					SUM(IFNULL(FUN_CONVERTUOM(d.uom, z.uomID, IF(d.customerConsign = 0, IFNULL(d.availableStock, 0), 0)), 0)) availabelStock,      \n" +
                "					SUM(IFNULL(FUN_CONVERTUOM(d.uom, z.uomID, IF(d.customerConsign = 1      \n" +
                "						AND d.customerID = pCustomerId, IFNULL(d.availableStock, 0), 0)), 0)) availabelStockCustomerConsign      \n" +
                "			FROM      \n" +
                "				(SELECT l.id AS id,		l.refSalesOrderDetID,	al.id AS rfqLineItemsAlternateID,	l.partID AS partid,		l.lineID,      \n" +
                "					l.cust_lineID,		l.custPN,		l.custPNID,		l.customerRev,	l.customerDescription,	l.refDesig,		l.numOfPosition,      \n" +
                "					l.programingStatus,		l.substitutesAllow,		IFNULL(d.mfgPN, c.mfgPN) AS mfgPN,	l.uomID,  IFNULL(d.isGoodPart, c.isGoodPart) isGoodPart,       \n" +
                "					IFNULL(d.restrictPackagingUseWithpermission, c.restrictPackagingUseWithpermission) restrictPackagingUseWithpermission,        \n" +
                "					IFNULL(d.restrictPackagingUsePermanently, c.restrictPackagingUsePermanently) restrictPackagingUsePermanently, 	  \n" +
                "                    al.restrictUseInBOMExcludingAliasStep,  al.restrictUseInBOMExcludingAliasWithPermissionStep, al.restrictUseInBOMStep, al.restrictUseInBOMWithPermissionStep,  \n" +
                "					IFNULL(d.restrictUsePermanently, c.restrictUsePermanently) restrictUsePermanently, IFNULL(d.restrictUSEwithpermission, c.restrictUSEwithpermission) restrictUSEwithpermission,      \n" +
                "					CONCAT(l.description, '  ', al.description) AS description,		l.isInstall,	l.isPurchase,	l.dnpQty,	l.dnpDesig,      \n" +
                "					l.isBuyDNPQty,		l.numOfRows,	al.uomMismatchedStep,	l.customerPartDesc,		l.isNotRequiredKitAllocation,      \n" +
                "					IFNULL(d.id, c.id) AS mfgPNID,	IFNULL(d.mfgcodeID, c.mfgcodeID) AS mfgCodeID,	IFNULL(d.uom, c.uom) AS uom, c.connecterTypeID,      \n" +
                "					IFNULL(d.noOfRows, c.noOfRows) AS noOfRows,		IFNULL(ka.allocatedQty, 0) allocatedQty,	IFNULL(ka.allocatedUnit, 0) allocatedUnit,      \n" +
                "					IFNULL(ka.allocatedPins, 0) allocatedPins,	IFNULL(ka.consumePin, 0) consumePin,	IFNULL(ka.consumeUnits, 0) consumeUnits,	IFNULL(ka.consumeQty, 0) consumeQty,      \n" +
                "					(CASE      \n" +
                "						WHEN      \n" +
                "							l.isPurchase = 1 OR l.isInstall = 1      \n" +
                "						THEN      \n" +
                "							(IFNULL(l.qpa, 0) + IF(l.isBuyDNPQty = 'Y'      \n" +
                "								OR l.isBuyDNPQty = 'P'      \n" +
                "								OR l.isBuyDNPQty = 'C', IFNULL(l.dnpQty, 0), 0))      \n" +
                "						ELSE (IF(l.isBuyDNPQty = 'Y'      \n" +
                "							OR l.isBuyDNPQty = 'P'      \n" +
                "							OR l.isBuyDNPQty = 'C', IFNULL(l.dnpQty, 0), 0))      \n" +
                "					END) AS qpa      \n" +
                "			FROM      \n" +
                "				kit_allocation_lineitems l      \n" +
                "			JOIN kit_allocation_lineitems_alternatepart al ON l.id = al.refKitAllocationLineItemId AND l.isDeleted = 0 AND al.isDeleted = 0 AND al.mfgPNID IS NOT NULL      \n" +
                "			JOIN component c ON al.mfgPNID = c.id      \n" +
                "			LEFT JOIN component d ON c.packaginggroupID = d.packaginggroupID      \n" +
                "			LEFT OUTER JOIN vu_kit_allocation_summary ka ON al.refSalesOrderDetID = ka.refSalesOrderDetID      \n" +
                "				AND al.partID = ka.assyID      \n" +
                "				AND al.refRfqLineitem = ka.refBOMLineID      \n" +
                "				AND NOT EXISTS( SELECT  1 FROM      \n" +
                "					kit_allocation_lineitems_alternatepart `x`      \n" +
                "				WHERE x.refRfqLineitem = al.refRfqLineitem AND x.mfgPNID = d.id AND d.id <> c.id AND x.isDeleted = 0)      \n" +
                "			WHERE      \n" +
                "				l.partID = pPartID      \n" +
                "					AND l.refSalesOrderDetID = pRefSalesOrderDetID) z      \n" +
                "			LEFT JOIN vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, mfgPNID)      \n" +
                "			GROUP BY z.id , z.rfqLineItemsAlternateID , z.refSalesOrderDetID , z.mfgPNID , z.partid , z.lineID , z.cust_lineID , z.custPN , z.customerRev ,      \n" +
                "					z.isGoodPart, z.restrictPackagingUsePermanently, z.restrictPackagingUseWithpermission, z.restrictUsePermanently, z.restrictUSEwithpermission,  \n" +
                "					z.restrictUseInBOMExcludingAliasStep,  z.restrictUseInBOMExcludingAliasWithPermissionStep, z.restrictUseInBOMStep, z.restrictUseInBOMWithPermissionStep,  \n" +
                "					z.customerDescription , z.qpa , z.refDesig , z.uomID , z.isInstall , z.isPurchase , z.numOfRows , z.customerPartDesc , z.numOfPosition ,       \n" +
                "					z.isNotRequiredKitAllocation , z.dnpQty , z.dnpDesig , z.isBuyDNPQty , z.programingStatus , z.substitutesAllow,       \n" +
                "					z.mfgCodeID , z.mfgPN , z.noOfRows , z.mfgPNID , z.description) a;      \n" +
                "	ELSE      \n" +
                "  \n" +
                "        # Create Temp Table to Get partID from bifurcate consolidated MFR IDs - consolidatedMfgPNIDs      \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_consolidate_Line_alternateparts;                                                                    \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_consolidate_Line_alternateparts AS      \n" +
                "		SELECT  id, refSalesOrderDetid, rfqLineItemsId, consolidatedLineItemIDs,isAssembly,isDeleted,      \n" +
                "		SUBSTRING_INDEX(SUBSTRING_INDEX(a.consolidatedMfgPNIDs, ',', numbers.n), ',', -1) partid      \n" +
                "			FROM (select 1 n union all      \n" +
                "				  select 2 union all       \n" +
                "				  select 3 union all      \n" +
                "				  select 4 union all       \n" +
                "				  select 5 union all      \n" +
                "				  select 6 union all      \n" +
                "				  select 7 union all      \n" +
                "				  select 8 union all      \n" +
                "				  select 9 union all      \n" +
                "				  select 10 union all      \n" +
                "				  select 11 union all      \n" +
                "				  select 12 union all       \n" +
                "				  select 13 union all      \n" +
                "				  select 14 union all       \n" +
                "				  select 15 union all      \n" +
                "				  select 16 union all      \n" +
                "				  select 17 union all      \n" +
                "				  select 18 union all      \n" +
                "				  select 19 union all      \n" +
                "				  select 20 union all      \n" +
                "				  select 21 union all      \n" +
                "				  select 22 union all       \n" +
                "				  select 23 union all      \n" +
                "				  select 24 union all       \n" +
                "				  select 25      \n" +
                "				  ) numbers INNER JOIN  kit_allocation_consolidate_line_detail a       \n" +
                "			   on CHAR_LENGTH(a.consolidatedMfgPNIDs)      \n" +
                "				 -CHAR_LENGTH(REPLACE(a.consolidatedMfgPNIDs, ',', ''))>=numbers.n-1      \n" +
                "			 WHERE refsalesorderdetid = pRefSalesOrderDetID AND isAssembly = 0 AND isDeleted = 0      \n" +
                "			 ORDER BY id, n;      \n" +
                "  \n" +
                "			SELECT * FROM      \n" +
                "				(SELECT c.id,	 refSalesOrderDetID,	partid,		_lineID,	      \n" +
                "						FUN_GETMFGCODEBYPARTID(partid) AS mfgCode,	FUN_GETMFGPNBYID(partid) AS mfgPN,      \n" +
                "						custPNID,	qpa,	consolidatedQPA,	dnpQPA,		isInstall,	      \n" +
                "						isGoodPart, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, restrictUsePermanently, restrictUSEwithpermission,	      \n" +
                "						FUN_GETUNITNAMEBYID(uomID) uom,		FUN_GETPARTTYPENAMEBYID(parttypeID) partTypeName,	FUN_GETMOUNTINGTYPENAMEBYID(mountingTypeID) mountingTypeName,      \n" +
                "						numOfPosition,		requiredQtyBuild,		requirePinsBuild,	allocatedQty,	 c.allocatedUnit,	consumeUnits,      \n" +
                "						consumeQty,		consumePin,		allocatedPins,		scrapedPins,	notRequiredKitAllocationReason,      \n" +
                "						(CASE      \n" +
                "							WHEN custPNID IS NULL THEN NULL      \n" +
                "							ELSE FUN_GETMFGPNBYID(custPNID)      \n" +
                "						END) custPN,      \n" +
                "						(CASE      \n" +
                "							WHEN isNotRequiredKitAllocation = 1 THEN 'Yes'      \n" +
                "							ELSE 'No'      \n" +
                "						END) AS isNotRequiredKitAllocationValue,      \n" +
                "						(CASE      \n" +
                "							WHEN      \n" +
                "								uomMismatchedStep = 0      \n" +
                "									OR isNotRequiredKitAllocation = 1      \n" +
                "							THEN      \n" +
                "								0      \n" +
                "							ELSE CASE      \n" +
                "								WHEN      \n" +
                "									c.connecterTypeID = - 2      \n" +
                "								THEN      \n" +
                "									CASE      \n" +
                "										WHEN (((IFNULL(c.qpa, 0) * pKitQty * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0      \n" +
                "										ELSE ((IFNULL(c.qpa, 0) * pKitQty * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin))      \n" +
                "									END      \n" +
                "								ELSE CASE      \n" +
                "									WHEN (((IFNULL(c.qpa, 0) * pKitQty) - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0      \n" +
                "									ELSE ((IFNULL(c.qpa, 0) * pKitQty) - (c.allocatedUnit + c.consumeUnits))      \n" +
                "								END      \n" +
                "							END      \n" +
                "						END) shortagePerBuild      \n" +
                "				FROM      \n" +
                "					(SELECT      a.id,		a.lineId AS _lineID,	a.refSalesOrderDetId refSalesOrderDetID,	b.partid,      \n" +
                "							a.rfqLineItemsId,		a.consolidatedpartlineID,	a.consolidateRestrictPartDetail,	a.ConsolidatedLineItemIDs,      \n" +
                "							a.custPNID,		a.isNotRequiredKitAllocation,		a.notRequiredKitAllocationReason,	 a.uomMismatchedStep,      \n" +
                "							a.consolidatedMfgPNIDs mfgPart,		IFNULL(a.kitQPAWithDNP, 0) qpa,		IFNULL(a.kitQPAWithDNP, 0) consolidatedQPA,      \n" +
                "							IFNULL(a.kitDNPWithoutQPA, 0) dnpQPA,	a.uomID,	a.isInstall,	a.connecterTypeID,	 a.partType parttypeID,      \n" +
                "							a.mountingTypeID,	a.numOfPosition,      \n" +
                "							b.isGoodPart, b.restrictPackagingUsePermanently, b.restrictPackagingUseWithpermission, b.restrictUsePermanently, b.restrictUSEwithpermission,      \n" +
                "							(CASE      \n" +
                "								WHEN a.uomMismatchedStep = 0 THEN 0      \n" +
                "								ELSE (IFNULL(a.kitQPAWithDNP, 0) * pKitQty)      \n" +
                "							END) AS requiredQtyBuild,      \n" +
                "							(CASE      \n" +
                "							WHEN      \n" +
                "								(a.uomMismatchedStep = 1      \n" +
                "									AND a.connecterTypeID = - 2)      \n" +
                "							THEN      \n" +
                "								((IFNULL(a.kitQPAWithDNP, 0) * pKitQty) * IFNULL(a.numOfPosition, 0))      \n" +
                "							ELSE 0      \n" +
                "						END) AS requirePinsBuild,      \n" +
                "						IFNULL(b.allocatedQty, 0) allocatedQty,		IFNULL(b.allocatedUnit, 0) allocatedUnit,	IFNULL(b.consumeUnits, 0) consumeUnits,      \n" +
                "						IFNULL(b.consumeQty, 0) consumeQty,		IFNULL(b.allocatedPins, 0) allocatedPins,	IFNULL(b.consumePin, 0) consumePin,		IFNULL(b.scrapedPins, 0) scrapedPins      \n" +
                "				FROM      \n" +
                "					kit_allocation_consolidate_Line_detail a      \n" +
                "				INNER JOIN (SELECT  a.refSalesOrderDetid,	a.rfqLineItemsId,	a.consolidatedLineItemIDs,	a.partid,      \n" +
                "						c.isGoodPart, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.restrictUsePermanently, c.restrictUSEwithpermission,      \n" +
                "                        SUM(b.allocatedQty) allocatedQty,	SUM(b.allocatedunit) allocatedUnit,	SUM(b.AllocatedPins) allocatedPins,      \n" +
                "						SUM(b.ConsumeQty) consumeQty,	SUM(b.ConsumeUnits) consumeUnits,	SUM(b.consumePin) consumePin,	SUM(b.scrapedPins) scrapedPins      \n" +
                "				FROM      \n" +
                "					temp_consolidate_Line_alternateparts a      \n" +
                "				JOIN component c ON a.partid = c.id      \n" +
                "				LEFT JOIN vu_kit_allocation_summary b ON a.refsalesORderDetid = b.refsalesOrderDetId      \n" +
                "					AND FIND_IN_SET(b.refBOMLineID, a.consolidatedLineItemIDs)      \n" +
                "				GROUP BY a.refSalesOrderDetid , a.rfqLineItemsId , a.partid) b ON a.refSalesOrderDetId = b.refSalesOrderDetId      \n" +
                "					AND a.rfqLineItemsId = b.rfqLineItemsId      \n" +
                "					AND a.consolidatedLineItemIDs = b.consolidatedLineItemIDs      \n" +
                "				WHERE a.refSalesOrderDetID = pRefSalesOrderDetID AND a.isAssembly = 0 AND a.isDeleted = 0) AS c      \n" +
                "				LEFT JOIN vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, mfgPart)      \n" +
                "				GROUP BY c.id , _lineID , refSalesOrderDetID , custPNID , isNotRequiredKitAllocation , uomMismatchedStep , qpa ,       \n" +
                "						consolidatedQPA , dnpQPA , uomID , isInstall , c.connecterTypeID , parttypeID , mountingTypeID , numOfPosition ,      \n" +
                "						isGoodPart, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, restrictUsePermanently, restrictUSEwithpermission,       \n" +
                "						notRequiredKitAllocationReason,	requiredQtyBuild , requirePinsBuild , allocatedQty , allocatedUnit , consumeUnits , consumeQty , allocatedPins , scrapedPins , c.partid       \n" +
                "				order by _lineID) AS mainQuery; 				      \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_consolidate_Line_alternateparts;       \n" +
                "    END IF;      \n" +
                "END;  \n" +
                /* **************************** New Script -> 27-04-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4525,'2.00','V1','Bug 32920: Qa Testing issues for #32598: Kit list/Kit page: Give Provision to export kit bom along with stock details - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4525:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-04-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateCustomerPayment`(            \n" +
                "	IN pCustInvoicePaymentDetList JSON,            \n" +
                "	IN pMfgcodeID INT,            \n" +
                "	IN pPaymentNumber VARCHAR(50),            \n" +
                "	IN pPaymentDate DATE,            \n" +
                "	IN pPaymentAmount DECIMAL(18,8),            \n" +
                "	IN pPaymentType INT,            \n" +
                "	IN pAccountReference VARCHAR(50),            \n" +
                "	IN pBankAccountMasID INT,            \n" +
                "	IN pBankAccountNo VARCHAR(50),            \n" +
                "	IN pBankName VARCHAR(255),            \n" +
                "	IN pRemark VARCHAR(1000),            \n" +
                "	IN pRefPaymentMode VARCHAR(1),            \n" +
                "	IN pTotSelectedInvOfCust INT,           \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,         \n" +
                "	IN pSystemID VARCHAR(20),        \n" +
                "	IN pisZeroPayment INT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,     \n" +
                "	IN pUserID INT,            \n" +
                "	IN pUserRoleID INT            \n" +
                "    )  \n" +
                "BEGIN            \n" +
                "  \n" +
                "	DECLARE insertedInvPaymentMstID INT;        \n" +
                "	DECLARE vCountExistsCheckNo INT;      \n" +
                "	DECLARE vLockStatusToBe VARCHAR(5);        \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;        \n" +
                "  \n" +
                "	IF (pisConfmTakenForDuplicateCheckNo = 0) THEN        \n" +
                "		/* check duplicate check number if confirmation not taken */          \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo                  \n" +
                "		FROM packingslip_invoice_payment                  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode         \n" +
                "		AND paymentNumber = pPaymentNumber                  \n" +
                "		AND mfgcodeID = pMfgcodeID        \n" +
                "		AND isPaymentVoided = 0        \n" +
                "		AND isdeleted = 0    ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "	IF(vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0         \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN            \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */              \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;                                              \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS                                                        \n" +
                "		SELECT 	*                                                         \n" +
                "		FROM 	JSON_TABLE(                 \n" +
                "			pCustInvoicePaymentDetList,                                                        \n" +
                "				\"$[*]\" COLUMNS(                \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",                                                 \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",                                                        \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,            \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,            \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\"            \n" +
                "				)              \n" +
                "			) AS CustInvoicePaymentDetList_JT ;             \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */	              \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;                                              \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS 	            \n" +
                "			SELECT cps.id AS invoiceMstID,             \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,            \n" +
                "				cps.status,            \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det            \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id         \n" +
                "					AND isPaymentVoided = 0            \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet            \n" +
                "			FROM customer_packingslip cps            \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)            \n" +
                "			AND cps.isDeleted = 0            \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */            \n" +
                "		;            \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)             \n" +
                "			> if selected invoice not found from db            \n" +
                "			> original Payment Amount Of Invoice  mismatch            \n" +
                "			> invoice Total Paid Amount mismatch            \n" +
                "			*/	              \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;                                              \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS             \n" +
                "			SELECT tucipl.*            \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl            \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID            \n" +
                "			WHERE (            \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))              \n" +
                "				OR            \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))	            \n" +
                "				OR            \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))            \n" +
                "				)            \n" +
                "			;            \n" +
                "  \n" +
                "	END IF;            \n" +
                "  \n" +
                "	/* set up default temp table if not created */              \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS              \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;            \n" +
                "  \n" +
                "	IF (vCountExistsCheckNo = 0 AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN            \n" +
                "		-- select 'create';       \n" +
                "  \n" +
                "		/* Lock Status >> Ready To Lock - \"RL\" , Locked - \"LC\" , N/A - \"NA\" */      \n" +
                "		SET vLockStatusToBe = 'NA' ;      \n" +
                "		IF(pTotSelectedInvOfCust > 0) THEN       \n" +
                "			IF((pPaymentAmount - (SELECT IFNULL(SUM(paymentAmountForSelectedInvoice),0)       \n" +
                "							FROM temp_UI_CustInvoicePaymentDetList)) = 0) THEN      \n" +
                "				SET vLockStatusToBe = 'RL' ;      \n" +
                "			END IF;	      \n" +
                "		END IF;	      \n" +
                "  \n" +
                "  \n" +
                "		INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,            \n" +
                "			`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,            \n" +
                "			`bankName`,`remark`,`refPaymentMode`,`systemId` ,       \n" +
                "			`lockStatus`, `isZeroPayment` , `depositBatchNumber` ,        \n" +
                "			`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "			`updatedAt`,`updatedBy`,`updateByRoleId`)            \n" +
                "		VALUES(pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,            \n" +
                "			pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,            \n" +
                "			pBankName, pRemark, pRefPaymentMode, pSystemID,            \n" +
                "			vLockStatusToBe,pisZeroPayment, pDepositBatchNumber,    \n" +
                "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,   \n" +
                "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;        \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		SET insertedInvPaymentMstID = LAST_INSERT_ID();               \n" +
                "  \n" +
                "  \n" +
                "		IF(pTotSelectedInvOfCust > 0) THEN            \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,            \n" +
                "					`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "					`updatedAt`, `updatedBy`,`updateByRoleId`)            \n" +
                "			SELECT insertedInvPaymentMstID, paymentAmountForSelectedInvoice, invoiceMstID,            \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,   \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID            \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList ;            \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */	            \n" +
                "			UPDATE customer_packingslip cps            \n" +
                "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID            \n" +
                "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv,            \n" +
                "				cps.updatedBy = pUserID,               \n" +
                "				cps.updateByRoleId = pUserRoleID ,              \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()            \n" +
                "			WHERE cps.id = tucipdl.invoiceMstID            \n" +
                "			-- and tucipdl.newApplyPaymentStatusOfInv is not null             \n" +
                "			-- and tucipdl.newApplyPaymentStatusOfInv != ''            \n" +
                "			AND cps.isDeleted = 0	;            \n" +
                "  \n" +
                "		END IF;            \n" +
                "  \n" +
                "  \n" +
                "	END IF;            \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */              \n" +
                "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0) OR (vCountExistsCheckNo > 0)) THEN              \n" +
                "		SELECT 0 AS 'spStatus' ;              \n" +
                "	ELSE              \n" +
                "		SELECT 1 AS 'spStatus' ;              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	/* Resp[1] - get all mis match amount records or deleted invoices */              \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;             \n" +
                "  \n" +
                "	/* Resp[2] - newly inserted payment master id  */             \n" +
                "	SELECT insertedInvPaymentMstID AS insertedInvPaymentMstID;         \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */          \n" +
                "	IF (vCountExistsCheckNo > 0) THEN        \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;              \n" +
                "	ELSE              \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;              \n" +
                "	END IF;              \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;               \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;             \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;            \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 27-04-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustomerPayment`(          \n" +
                "	IN pCustInvoicePaymentDetList JSON,          \n" +
                "	IN pCustomerPaymentMstID INT,          \n" +
                "	IN pMfgcodeID INT,          \n" +
                "	IN pPaymentNumber VARCHAR(50),          \n" +
                "	IN pPaymentDate DATE,          \n" +
                "	IN pPaymentAmount DECIMAL(18,8),          \n" +
                "	IN pPaymentType INT,          \n" +
                "	IN pAccountReference VARCHAR(50),          \n" +
                "	IN pBankAccountMasID INT,          \n" +
                "	IN pBankAccountNo VARCHAR(50),          \n" +
                "	IN pBankName VARCHAR(255),          \n" +
                "	IN pRemark VARCHAR(1000),          \n" +
                "	IN pRefPaymentMode VARCHAR(1),          \n" +
                "	IN pTotSelectedInvOfCust INT,          \n" +
                "	IN pDeleteCustInvPaymentDetList JSON,          \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,        \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,    \n" +
                "	IN pUserID INT,          \n" +
                "	IN pUserRoleID INT          \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "  \n" +
                "	DECLARE vCountExistsCheckNo INT;        \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;        \n" +
                "  \n" +
                "	IF (pisConfmTakenForDuplicateCheckNo = 0) THEN        \n" +
                "		/* check for duplicate check/payment number if confirmation not taken */          \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo                  \n" +
                "		FROM packingslip_invoice_payment                  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode         \n" +
                "		AND paymentNumber = pPaymentNumber                  \n" +
                "		AND mfgcodeID = pMfgcodeID         \n" +
                "		AND id != pCustomerPaymentMstID        \n" +
                "		AND isPaymentVoided = 0        \n" +
                "		AND isdeleted = 0    ;        \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "	IF(vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0         \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN          \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */            \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;                                            \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS                                                      \n" +
                "		SELECT 	*                                                       \n" +
                "		FROM 	JSON_TABLE(               \n" +
                "			pCustInvoicePaymentDetList,                                                      \n" +
                "				\"$[*]\" COLUMNS(              \n" +
                "					`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",          \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",                                               \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",                                                      \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,          \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,          \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\"            \n" +
                "				)            \n" +
                "			) AS CustInvoicePaymentDetList_JT ;           \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */	            \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;                                            \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS 	          \n" +
                "			SELECT cps.id AS invoiceMstID, cps.status,           \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,          \n" +
                "				pipd.id invPaymentDetMstID,           \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det          \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id         \n" +
                "					AND isPaymentVoided = 0          \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet          \n" +
                "			FROM customer_packingslip cps          \n" +
                "				LEFT JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID          \n" +
                "					 AND pipd.refPayementid = pCustomerPaymentMstID	        \n" +
                "					 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0          \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)          \n" +
                "			AND cps.isDeleted = 0          \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */          \n" +
                "		;          \n" +
                "  \n" +
                "		/* get all deleted invoice payment det (passed from UI but not in db)           \n" +
                "			if selected payment det not found from db - tdacipl.invPaymentDetMstID comes NULL in below query  */          \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;                                            \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS           \n" +
                "			SELECT tucipl.*          \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl          \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID          \n" +
                "			WHERE tucipl.invPaymentDetMstID IS NOT NULL  	           \n" +
                "			AND tucipl.invPaymentDetMstID != IFNULL(tdacipl.invPaymentDetMstID,0)            \n" +
                "			;          \n" +
                "  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)           \n" +
                "			> if selected invoice not found from db > tdacipl.invoiceMstID comes NULL          \n" +
                "			> original Payment Amount Of Invoice  mismatch > tdacipl.originalPayAmountOfInvoice comes NULL          \n" +
                "			> invoice Total Paid Amount mismatch > tdacipl.invTotPaidAmtFromAllPaymentDet comes NULL          \n" +
                "			*/	            \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;                                            \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS           \n" +
                "			SELECT tucipl.* ,           \n" +
                "				tdacipl.invoiceMstID AS invoiceMstIDOfDBAvailable, tdacipl.originalPayAmountOfInvoice AS originalPayAmountOfInvoiceOfDBAvailable,          \n" +
                "				tdacipl.invTotPaidAmtFromAllPaymentDet AS invTotPaidAmtFromAllPaymentDetOfDBAvailable          \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl          \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID          \n" +
                "			WHERE (          \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))            \n" +
                "				OR          \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))	          \n" +
                "				OR          \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))          \n" +
                "				)          \n" +
                "			;          \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)          \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN          \n" +
                "			-- SELECT 'update';          \n" +
                "			IF(pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN           \n" +
                "  \n" +
                "  \n" +
                "				/* get/map all deleting customer Invoice Payment Detail List send from UI */            \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;                                            \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS                                                      \n" +
                "				SELECT 	*                                                       \n" +
                "				FROM 	JSON_TABLE(               \n" +
                "					pDeleteCustInvPaymentDetList,                                                      \n" +
                "						\"$[*]\" COLUMNS(              \n" +
                "							`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",          \n" +
                "							`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"                                             \n" +
                "						)            \n" +
                "				) AS DeleteCustInvoicePaymentDetList_JT ;           \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;                                            \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS           \n" +
                "					SELECT refCustPackingslipInvoiceID           \n" +
                "					FROM temp_UI_Delete_CustInvoicePaymentDetList ;          \n" +
                "  \n" +
                "  \n" +
                "				/* delete those which are unselected(from UI) inv payment det */          \n" +
                "				UPDATE packingslip_invoice_payment_det           \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,           \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()           \n" +
                "				WHERE id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)         \n" +
                "				AND isPaymentVoided = 0          \n" +
                "				AND isDeleted = 0 ;          \n" +
                "  \n" +
                "  \n" +
                "				/* update invoice payment status */	          \n" +
                "				UPDATE customer_packingslip cps          \n" +
                "					LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet          \n" +
                "						 FROM packingslip_invoice_payment_det          \n" +
                "						WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)          \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0           \n" +
                "						GROUP BY refCustPackingslipInvoiceID ) invPaymentDet          \n" +
                "					 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID              \n" +
                "				SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'           \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND          \n" +
                "								cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'          \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND          \n" +
                "								cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'          \n" +
                "  \n" +
                "							   ELSE cps.paymentStatus END          \n" +
                "							) ,          \n" +
                "					cps.updatedBy = pUserID,             \n" +
                "					cps.updateByRoleId = pUserRoleID ,            \n" +
                "					cps.updatedAt = fun_DatetimetoUTCDateTime()          \n" +
                "				WHERE cps.id IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)          \n" +
                "				AND cps.isDeleted = 0	;          \n" +
                "  \n" +
                "			END IF;          \n" +
                "  \n" +
                "  \n" +
                "			/* update all inv payment det amount whose amount is changed from UI */          \n" +
                "			UPDATE packingslip_invoice_payment_det pipd          \n" +
                "				JOIN (SELECT invPaymentDetMstID, paymentAmountForSelectedInvoice          \n" +
                "					FROM temp_UI_CustInvoicePaymentDetList          \n" +
                "					WHERE invPaymentDetMstID IS NOT NULL) tucipdl          \n" +
                "				ON pipd.id = tucipdl.invPaymentDetMstID          \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedInvoice,0),          \n" +
                "				pipd.updatedBy = pUserID,             \n" +
                "				pipd.updateByRoleId = pUserRoleID ,            \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()          \n" +
                "			WHERE IFNULL(pipd.paymentAmount,0) != IFNULL(tucipdl.paymentAmountForSelectedInvoice,0)          \n" +
                "			AND pipd.refPayementid = pCustomerPaymentMstID          \n" +
                "			AND pipd.isPaymentVoided = 0         \n" +
                "			AND pipd.isDeleted = 0           \n" +
                "			;          \n" +
                "  \n" +
                "			/* insert newly selected inv payment det */          \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,          \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)          \n" +
                "			SELECT pCustomerPaymentMstID, IFNULL(paymentAmountForSelectedInvoice,0), invoiceMstID,          \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID          \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList           \n" +
                "			WHERE invPaymentDetMstID IS NULL          \n" +
                "			;          \n" +
                "  \n" +
                "			/* update invoice payment status */	          \n" +
                "			UPDATE customer_packingslip cps          \n" +
                "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID          \n" +
                "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv ,          \n" +
                "				cps.updatedBy = pUserID,             \n" +
                "				cps.updateByRoleId = pUserRoleID ,            \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()	          \n" +
                "			WHERE cps.id = tucipdl.invoiceMstID          \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv IS NOT NULL           \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv != ''          \n" +
                "			AND cps.isDeleted = 0	;	          \n" +
                "  \n" +
                "		END IF;	          \n" +
                "  \n" +
                "  \n" +
                "	ELSE          \n" +
                "  \n" +
                "		IF(vCountExistsCheckNo = 0 AND pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN           \n" +
                "  \n" +
                "			/* get/map all deleting customer Invoice Payment Detail List send from UI */            \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;                                            \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS                                                      \n" +
                "			SELECT 	*                                                       \n" +
                "			FROM 	JSON_TABLE(               \n" +
                "				pDeleteCustInvPaymentDetList,                                                      \n" +
                "					\"$[*]\" COLUMNS(              \n" +
                "						`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",          \n" +
                "						`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"                                             \n" +
                "					)            \n" +
                "			) AS DeleteCustInvoicePaymentDetList_JT ;           \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;                                            \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS           \n" +
                "				SELECT refCustPackingslipInvoiceID           \n" +
                "				FROM temp_UI_Delete_CustInvoicePaymentDetList ;          \n" +
                "  \n" +
                "  \n" +
                "			/* delete those which are unselected(from UI) inv payment det */          \n" +
                "			UPDATE packingslip_invoice_payment_det           \n" +
                "			SET isDeleted = 1, deletedBy = pUserID,           \n" +
                "				deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()           \n" +
                "			WHERE id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)         \n" +
                "			AND isPaymentVoided = 0          \n" +
                "			AND isDeleted = 0 ;          \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */	          \n" +
                "			UPDATE customer_packingslip cps          \n" +
                "				LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet          \n" +
                "					 FROM packingslip_invoice_payment_det          \n" +
                "					WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)          \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0           \n" +
                "					GROUP BY refCustPackingslipInvoiceID ) invPaymentDet          \n" +
                "				 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID              \n" +
                "			SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'           \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND          \n" +
                "							cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'          \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND          \n" +
                "							cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'          \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END          \n" +
                "						) ,          \n" +
                "				cps.updatedBy = pUserID,             \n" +
                "				cps.updateByRoleId = pUserRoleID ,            \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()          \n" +
                "			WHERE cps.id IN(SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)          \n" +
                "			AND cps.isDeleted = 0	;          \n" +
                "  \n" +
                "		END IF;	          \n" +
                "  \n" +
                "	END IF;          \n" +
                "  \n" +
                "  \n" +
                "	IF (vCountExistsCheckNo = 0) THEN        \n" +
                "		/* update invoice payment master details */          \n" +
                "		UPDATE packingslip_invoice_payment          \n" +
                "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,          \n" +
                "			paymentType = pPaymentType,          \n" +
                "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,          \n" +
                "			bankAccountNo = pBankAccountNo, bankName = pBankName,          \n" +
                "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,  \n" +
                "			updatedBy = pUserID,             \n" +
                "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()           \n" +
                "		WHERE id = pCustomerPaymentMstID        \n" +
                "		AND isPaymentVoided = 0	        \n" +
                "		AND isDeleted = 0 ;          \n" +
                "		/* update lockStatus based on Payment Variance if record not locked */      \n" +
                "		UPDATE packingslip_invoice_payment psip      \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount                  \n" +
                "					FROM packingslip_invoice_payment_det psipd                    \n" +
                "					WHERE psipd.refPayementid = pCustomerPaymentMstID      \n" +
                "					AND psipd.refCustPackingslipInvoiceID IS NOT NULL                     \n" +
                "					AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0      \n" +
                "					GROUP BY psipd.refPayementid ) invPayDetTemp                     \n" +
                "			ON psip.id = invPayDetTemp.refPayementid      \n" +
                "		SET psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) > 0 THEN 'NA'      \n" +
                "					WHEN (IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0 THEN 'RL'      \n" +
                "					ELSE psip.lockStatus END 	      \n" +
                "		WHERE psip.id = pCustomerPaymentMstID        \n" +
                "		AND psip.lockStatus != 'LC'			      \n" +
                "		AND psip.isPaymentVoided = 0	        \n" +
                "		AND psip.isDeleted = 0       \n" +
                "		;       \n" +
                "  \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "	/* set up default temp table if not created */            \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS            \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;          \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS            \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;          \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */            \n" +
                "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) > 0)           \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0)        \n" +
                "		OR (vCountExistsCheckNo > 0)) THEN            \n" +
                "		SELECT 0 AS 'spStatus' ;            \n" +
                "	ELSE            \n" +
                "		SELECT 1 AS 'spStatus' ;            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	/* Resp[1] - get all deleted invoice payment det (passed from UI but not in db) */            \n" +
                "	SELECT * FROM temp_Deleted_CustInvPayDetList ;           \n" +
                "  \n" +
                "	/* Resp[2] - get all mis match amount records or deleted invoices */            \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;           \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */          \n" +
                "	IF (vCountExistsCheckNo > 0) THEN        \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;              \n" +
                "	ELSE              \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;              \n" +
                "	END IF;          \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;             \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;           \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;          \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;          \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;                              \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs; 	          \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 27-04-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentByMstID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentByMstID`(      \n" +
                "	IN pPaymentMstID INT      \n" +
                "    )  \n" +
                "BEGIN      \n" +
                "  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                                               \n" +
                "		DECLARE v_TimeZone VARCHAR(50);                                          	      \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;                                                      \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;   	      \n" +
                "  \n" +
                "  \n" +
                "		SELECT 	psip.id,                                                                \n" +
                "			psip.mfgcodeID, psip.paymentNumber, psip.paymentDate, psip.paymentAmount,      \n" +
                "			psip.paymentType,  psip.accountReference, psip.bankAccountMasID, psip.bankAccountNo,        \n" +
                "			psip.bankName,  psip.remark,  psip.isPaymentVoided, psip.systemId ,       \n" +
                "			psip.lockStatus, psip.isZeroPayment,  psip.depositBatchNumber,   \n" +
                "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,      \n" +
                "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,       \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone , v_DateTimeDisplayFormat) AS lockedAt,                                                                 \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,      \n" +
                "			(CASE WHEN psip.isPaymentVoided = 0 THEN      \n" +
                "					(CASE WHEN (invPayDetTemp.invoiceNumberList IS NOT NULL AND       \n" +
                "						(IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0) THEN 'Received & Applied'        \n" +
                "					ELSE 'Received' END)                      \n" +
                "			    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue      \n" +
                "		FROM packingslip_invoice_payment psip                                       \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber) invoiceNumberList ,                  \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount                  \n" +
                "				    FROM packingslip_invoice_payment_det psipd                    \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id                     \n" +
                "											AND cps.isDeleted = 0                    \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL                     \n" +
                "				     AND psipd.isDeleted = 0                    \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp                     \n" +
                "				ON psip.id = invPayDetTemp.refPayementid                         \n" +
                "		WHERE id = pPaymentMstID      \n" +
                "		AND refPaymentMode = 'R'                     \n" +
                "		AND psip.isDeleted = 0            \n" +
                "		;      \n" +
                "	END;  \n" +
                /* **************************** New Script -> 27-04-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoicePayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoicePayment`(                                                                                                  \n" +
                "	IN ppageIndex INT,                                                                                                  \n" +
                "	IN precordPerPage INT,                                                                                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                      \n" +
                "	IN pCustomerIDs VARCHAR(16383),                                      \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),                                      \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),                                      \n" +
                "	IN pExactPaymentNumberSearch TINYINT,      \n" +
                "	IN pPaymentNumber VARCHAR(1000),                                       \n" +
                "	IN pInvoiceNumber VARCHAR(1000),                                       \n" +
                "	IN pAmount VARCHAR(50),         \n" +
                "	IN pExactPaymentAmountSearch TINYINT,                                        \n" +
                "	IN pFromDate DATE,                                                    \n" +
                "	IN pToDate DATE,        \n" +
                "	IN pIsDisplayZeroPaymentDataOnly TINYINT,                  \n" +
                "	IN pRefPaymentMode VARCHAR(1)                                         \n" +
                ")  \n" +
                "BEGIN                                                                                                  \n" +
                "	DECLARE pOffset INT;                                                                                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                                                  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                                               \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                                                \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(5000);                                                \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                                                      \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                                                 \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';                                      \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                            \n" +
                "  		SET pWhereClause = '1=1' ;                                            \n" +
                "	END IF;                                               \n" +
                "  \n" +
                "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN                                                                                                                                                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');                                                                             \n" +
                "	END IF;	                                       \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN                                                                                                                                                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');                                                                             \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN                                                                                                                                                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');                                                                             \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN                                                                                                                                                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');                                                                                     \n" +
                "	END IF;	                                       \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN                                                                                                                                                                        \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND                            \n" +
                "             EXISTS(                       \n" +
                "			SELECT  1                     \n" +
                "			FROM packingslip_invoice_payment_det                            \n" +
                "			WHERE refPayementid = psip.id           \n" +
                "			AND isDeleted=0                  \n" +
                "			AND refCustPackingslipInvoiceID IN (SELECT id                     \n" +
                "								FROM customer_packingslip                            \n" +
                "								WHERE transType = \"I\"                 \n" +
                "								AND invoiceNumber = \"',pInvoiceNumber,'\"                    \n" +
                "								AND isDeleted=0)                    \n" +
                "			 )');                                                                                   \n" +
                "	END IF;	                                       \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN                                                                                                                                                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');                                                                                       \n" +
                "	END IF;	                                           \n" +
                "  \n" +
                "	IF(pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN                                            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');                                                  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN                                            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');                                            \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN                                            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');                                            \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF(pIsDisplayZeroPaymentDataOnly = 1) THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');          \n" +
                "	END IF;                                       \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"              			                                                          \n" +
                "            SELECT 						                                                    \n" +
                "		psip.id,                                                                \n" +
                "                psip.mfgcodeID,                                            \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,                               \n" +
                "                psip.isPaymentVoided,                          \n" +
                "                (CASE WHEN psip.isPaymentVoided = 0 THEN      \n" +
                "				(CASE WHEN (invPayDetTemp.invoiceNumberList IS NOT NULL AND       \n" +
                "					(IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0) THEN 'Received & Applied'        \n" +
                "				ELSE 'Received' END)                      \n" +
                "                    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue,                          \n" +
                "		psip.voidPaymentReason,            \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,             \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,                              \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')            \n" +
                "										ELSE NULL END) AS voidedAt,	                        \n" +
                "                psip.refVoidedPaymentNumber,              \n" +
                "                psip.refVoidedPaymentId,                          \n" +
                "                psip.paymentNumber,                                            \n" +
                "                psip.bankName,                                            \n" +
                "                psip.bankAccountNo,                                            \n" +
                "                psip.paymentType,                                            \n" +
                "                psip.bankAccountMasID,           \n" +
                "                psip.systemId ,                                           \n" +
                "                gc.gencCategoryName paymentMethod,                                      \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,                                      \n" +
                "		psip.paymentDate,                                      \n" +
                "                psip.paymentAmount,                                      \n" +
                "		psip.payToAddress payToAddress,                                                     \n" +
                "                psip.accountReference,                                      \n" +
                "                psip.remark,                 \n" +
                "                psip.lockStatus,      \n" +
                "		(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'       \n" +
                "			 WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,	      \n" +
                "                fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,                              \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,                                                                 \n" +
                "                invPayDetTemp.invoiceNumberList,                     \n" +
                "                IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS selectedInvoiceTotPaymentAmount,                  \n" +
                "                IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmt,           \n" +
                "                (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_packingslip_invoice_payment'          \n" +
                "				AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0) AS totalDocuments ,          \n" +
                "		psip.isZeroPayment , psip.depositBatchNumber ,    \n" +
                "		fun_getUserNameByID(psip.createdBy) createdby,                                                                  \n" +
                "		fun_getUserNameByID(psip.updatedBy) updatedby,                                                  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,	                                                \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,                                                  \n" +
                "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,                                             \n" +
                "		fun_getRoleByID(psip.createByRoleId) createdbyRole                                             \n" +
                "	   FROM packingslip_invoice_payment psip                                       \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0                    \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber, '#####',cps.id SEPARATOR '@@@@@') invoiceNumberList ,                  \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount                  \n" +
                "				    FROM packingslip_invoice_payment_det psipd                    \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id                     \n" +
                "											AND cps.isDeleted = 0                    \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL                     \n" +
                "				     AND psipd.isDeleted = 0                    \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp                     \n" +
                "				ON psip.id = invPayDetTemp.refPayementid                         \n" +
                "            WHERE refPaymentMode = '\",pRefPaymentMode,\"'                     \n" +
                "            AND psip.isDeleted = 0                     \n" +
                "             \" ,v_InvoiceNumberWhereClause);                                              \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                                                  \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";                                                                                                  \n" +
                "	ELSE                                                                                                  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;                                                                                                  \n" +
                "	END IF;	                                                            		                                      \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                                                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                  \n" +
                "	ELSE	                                                                                                  \n" +
                "		SET rowNumWhere = '';                                                                                                  \n" +
                "	END IF;	                                                                                                   \n" +
                "  \n" +
                "	/* to get total count of rows */                                                                               \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);                                                               			                							                      \n" +
                "  \n" +
                "        PREPARE query1 FROM @SQLStatement1;                                                                              \n" +
                "	EXECUTE query1;                                                                              \n" +
                "	DEALLOCATE PREPARE query1;                                                                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                	                                                                         \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                              \n" +
                "	EXECUTE query2;                                                                              \n" +
                "	DEALLOCATE PREPARE query2;                                                                           \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 27-04-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustInvPaymentDetailList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustInvPaymentDetailList`(                                                                                                  \n" +
                "	IN ppageIndex INT,                                                                                                  \n" +
                "	IN precordPerPage INT,                                                                                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                                  \n" +
                "	IN pWhereClause VARCHAR(16383),                                      \n" +
                "	IN pCustomerIDs VARCHAR(16383),                                      \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),                                      \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),                                      \n" +
                "	IN pExactPaymentNumberSearch TINYINT,      \n" +
                "	IN pPaymentNumber VARCHAR(50),                                       \n" +
                "	IN pInvoiceNumber VARCHAR(50),                                       \n" +
                "	IN pAmount VARCHAR(50),         \n" +
                "	IN pExactPaymentAmountSearch TINYINT,                                        \n" +
                "	IN pFromDate DATE,                                                    \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromInvoiceDate DATE,                                                    \n" +
                "	IN pToInvoiceDate DATE,        \n" +
                "	IN pIsDisplayZeroPaymentDataOnly TINYINT,                  \n" +
                "	IN pRefPaymentMode VARCHAR(1)                                         \n" +
                ")  \n" +
                "BEGIN                                                                                                  \n" +
                "	DECLARE pOffset INT;                                                                                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                                                  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                                               \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                                                \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                                                      \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                                                 \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                            \n" +
                "  		SET pWhereClause = '1=1' ;                                            \n" +
                "	END IF;                                               \n" +
                "  \n" +
                "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN                                                                                                                                                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');                                                                             \n" +
                "	END IF;	                                       \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN                                                                                                                                                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');                                                                             \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN                                                                                                                                                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');                                                                             \n" +
                "	END IF;	                                  \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN                                                                                                                                                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');                                                                                     \n" +
                "	END IF;	                                       \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceNumber = \"',pInvoiceNumber,'\"');	                                                                                  \n" +
                "	END IF;	                                       \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN                                                                                                                                                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');                                                                                       \n" +
                "	END IF;	                                           \n" +
                "  \n" +
                "	IF(pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN                                            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');                                                  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN                                            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');                                            \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN                                            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');                                            \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pFromInvoiceDate IS NOT NULL AND pToInvoiceDate IS NOT NULL) THEN                                            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate >= \"',pFromInvoiceDate,'\" AND invoiceDate <= \"',pToInvoiceDate,'\" ');                                                  \n" +
                "	ELSEIF(pFromInvoiceDate IS NOT NULL AND pToInvoiceDate IS NULL) THEN                                            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate >= \"',pFromInvoiceDate,'\" ');                                            \n" +
                "	ELSEIF(pToInvoiceDate IS NOT NULL AND pFromInvoiceDate IS NULL) THEN                                            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate <= \"',pToInvoiceDate,'\" ');                                            \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF(pIsDisplayZeroPaymentDataOnly = 1) THEN      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');          \n" +
                "	END IF;                                       \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"              			                                                          \n" +
                "            SELECT 						                                                    \n" +
                "		psip.id AS paymentMstID ,                                                                \n" +
                "                psip.mfgcodeID,                                            \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,                                 \n" +
                "                psip.paymentNumber,                                            \n" +
                "                psip.bankName,                                            \n" +
                "                psip.bankAccountNo,                                            \n" +
                "                psip.paymentType,                                            \n" +
                "                psip.bankAccountMasID,                             \n" +
                "                gc.gencCategoryName paymentMethod,                                      \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,                                      \n" +
                "		psip.paymentDate,                                      \n" +
                "                psip.paymentAmount,                                      \n" +
                "		psip.isZeroPayment , psip.depositBatchNumber ,   \n" +
                "		cps.id AS invoiceMstID, cps.invoiceNumber , cps.invoiceDate ,   \n" +
                "		cps.totalAmount AS invoiceOrgAmount ,   \n" +
                "		psipd.paymentAmount AS invoiceDepositAmount ,   \n" +
                "		fun_getUserNameByID(psip.createdBy) createdby,                                                                  \n" +
                "		fun_getUserNameByID(psip.updatedBy) updatedby,                                                  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,	                                                \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,                                                  \n" +
                "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,                                             \n" +
                "		fun_getRoleByID(psip.createByRoleId) createdbyRole                                             \n" +
                "	   FROM packingslip_invoice_payment psip                                       \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0     \n" +
                "			JOIN  packingslip_invoice_payment_det psipd ON psip.id = psipd.refPayementid AND psipd.isPaymentVoided = 0 AND psipd.isDeleted = 0   		  \n" +
                "				JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id AND transType = 'I' AND cps.isDeleted = 0                     \n" +
                "            WHERE psip.refPaymentMode = 'R'    \n" +
                "            AND psip.isPaymentVoided = 0                   \n" +
                "            AND psip.isDeleted = 0   \n" +
                "             \");                                              \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                                                  \n" +
                "		SET pOrderBy = \" ORDER BY paymentDate DESC \";                                                                                                  \n" +
                "	ELSE                                                                                                  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;                                                                                                  \n" +
                "	END IF;	                                                            		                                      \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                                                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                  \n" +
                "	ELSE	                                                                                                  \n" +
                "		SET rowNumWhere = '';                                                                                                  \n" +
                "	END IF;	                                                                                                   \n" +
                "  \n" +
                "	/* to get total count of rows */                                                                               \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);                                                               			                							                      \n" +
                "  \n" +
                "        PREPARE query1 FROM @SQLStatement1;                                                                              \n" +
                "	EXECUTE query1;                                                                              \n" +
                "	DEALLOCATE PREPARE query1;                                                                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                	                                                                         \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                              \n" +
                "	EXECUTE query2;                                                                              \n" +
                "	DEALLOCATE PREPARE query2;                                                                           \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 27-04-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_InvoicePaymentVoidAndReIssue` ;  \n" +
                "CREATE PROCEDURE `Sproc_InvoicePaymentVoidAndReIssue`(               \n" +
                "	IN pSystemId VARCHAR(20),            \n" +
                "	IN pRefVoidPaymentId INT,                      \n" +
                "	IN pAccountReference VARCHAR(50),                      \n" +
                "	IN pPaymentType INT,                      \n" +
                "	IN pPaymentNumber VARCHAR(50),                      \n" +
                "	IN pBankAccountMasID INT,                      \n" +
                "	IN pBankAccountNo VARCHAR(50),                      \n" +
                "	IN pBankName VARCHAR(255),                      \n" +
                "	IN pPaymentDate DATE,                      \n" +
                "	IN pRemark VARCHAR(255),                      \n" +
                "	IN pPayToName VARCHAR(255),                      \n" +
                "	IN pPayToAddress VARCHAR(255),                      \n" +
                "	IN pVoidPaymentReason VARCHAR(255),          \n" +
                "	IN pRefPaymentModeOfInvPayment VARCHAR(2),                   \n" +
                "	IN pMfgcodeID INT,          \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,         \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2),                    \n" +
                "	IN pUserID INT,                      \n" +
                "	IN pRoleID INT                      \n" +
                ")  \n" +
                "BEGIN                        \n" +
                "	DECLARE vCount INT;                        \n" +
                "	DECLARE vCountExistsCheckNo INT;                        \n" +
                "	DECLARE vNewPaymentID INT;                        \n" +
                "	DECLARE vOldPaymentOrCheckNo VARCHAR(50);                        \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                          \n" +
                "BEGIN                          \n" +
                "	ROLLBACK;                          \n" +
                "	RESIGNAL;                          \n" +
                "END;                          \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                          \n" +
                "  BEGIN                          \n" +
                "	ROLLBACK;                          \n" +
                "	RESIGNAL;                          \n" +
                "END;                          \n" +
                "  \n" +
                "	/* pRefPaymentModeOfInvPayment >> P-Payable   R-Receivable */          \n" +
                "	SELECT 	COUNT(1)   INTO 	vCount                        \n" +
                "	FROM 	packingslip_invoice_payment                        \n" +
                "	WHERE 	id = pRefVoidPaymentId                        \n" +
                "	AND isPaymentVoided = 0                  \n" +
                "	AND refPaymentMode = pRefPaymentModeOfInvPayment ;                        \n" +
                "  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;	          \n" +
                "  \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'P') THEN          \n" +
                "		/*check duplicate check number validation*/              \n" +
                "		SELECT 	COUNT(1)  INTO 	vCountExistsCheckNo                      \n" +
                "		FROM 	packingslip_invoice_payment                      \n" +
                "		WHERE 	isdeleted = 0                      \n" +
                "		AND paymentNumber = pPaymentNumber                      \n" +
                "		AND bankAccountMasID = pBankAccountMasID          \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;                      \n" +
                "	 ELSEIF (pRefPaymentModeOfInvPayment = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN          \n" +
                "		/* check duplicate check number if confirmation not taken */            \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo                    \n" +
                "		FROM packingslip_invoice_payment                    \n" +
                "		WHERE refPaymentMode = pRefPaymentModeOfInvPayment           \n" +
                "		AND paymentNumber = pPaymentNumber                    \n" +
                "		AND mfgcodeID = pMfgcodeID           \n" +
                "		AND isdeleted = 0    ;          \n" +
                "	 END IF;             \n" +
                "  \n" +
                "  \n" +
                "	IF vCount = 1 AND vCountExistsCheckNo = 0 THEN                        \n" +
                "  \n" +
                "		UPDATE 	packingslip_invoice_payment                        \n" +
                "		SET 	voidPaymentReason = pVoidPaymentReason,                        \n" +
                "			isPaymentVoided = 1,                        \n" +
                "			updatedBy = pUserID,                        \n" +
                "			updateByRoleId = pRoleID,                      \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()                      \n" +
                "		WHERE 	id = pRefVoidPaymentId                        \n" +
                "		AND isDeleted = 0                  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;         \n" +
                "  \n" +
                "  \n" +
                "		/*insert same records for new reissue payment transaction*/              \n" +
                "		INSERT INTO packingslip_invoice_payment                        \n" +
                "				(systemId, mfgcodeID, paymentNumber, paymentDate, paymentAmount, paymentType, accountReference, bankAccountMasID,                        \n" +
                "				bankAccountNo, bankName, payToName, payToAddress, remark, createdBy, createByRoleId,                        \n" +
                "				updatedBy, updateByRoleId, refVoidedPaymentNumber, refVoidedPaymentId, refPaymentMode,                \n" +
                "				billToName, billToAddress, isZeroPayment, depositBatchNumber,         \n" +
                "				lockStatus)                        \n" +
                "		SELECT 	pSystemId, mfgcodeID, pPaymentNumber, pPaymentDate, paymentAmount, pPaymentType, pAccountReference, pBankAccountMasID,                        \n" +
                "				pBankAccountNo, pBankName, pPayToName, pPayToAddress, pRemark, pUserID, pRoleID,                        \n" +
                "				pUserID, pRoleID, paymentNumber, id, refPaymentMode,                \n" +
                "				billToName, billToAddress, isZeroPayment, pDepositBatchNumber,        \n" +
                "				(CASE WHEN pRefPaymentModeOfInvPayment = 'R' THEN         \n" +
                "							(CASE WHEN lockStatus = 'LC' THEN 'RL' ELSE lockStatus END)        \n" +
                "					ELSE NULL END)               \n" +
                "		FROM 	packingslip_invoice_payment                        \n" +
                "		WHERE 	id = pRefVoidPaymentId                        \n" +
                "		AND isDeleted = 0                  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;                        \n" +
                "  \n" +
                "		SET vNewPaymentID = LAST_INSERT_ID();                        \n" +
                "  \n" +
                "		/*update payment void flag in detail table*/              \n" +
                "		UPDATE 	packingslip_invoice_payment_det              \n" +
                "		SET 	isPaymentVoided = 1,              \n" +
                "			updatedBy = pUserID,              \n" +
                "			updateByRoleId = pRoleID,              \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()              \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId              \n" +
                "		AND isDeleted = 0;              \n" +
                "  \n" +
                "		/*insert same records for new reissue payment detail transaction*/              \n" +
                "		INSERT INTO packingslip_invoice_payment_det                        \n" +
                "				(refPayementid, refPackingslipInvoiceID, createdBy, createByRoleId, updatedBy, updateByRoleId, paymentAmount,           \n" +
                "				isPaymentVoided, refCustPackingslipInvoiceID)                        \n" +
                "		SELECT 	vNewPaymentID, refPackingslipInvoiceID, pUserID, pRoleID,                         \n" +
                "			pUserID, pRoleID, paymentAmount,           \n" +
                "			FALSE, refCustPackingslipInvoiceID	            \n" +
                "		FROM 	packingslip_invoice_payment_det                        \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId                        \n" +
                "		AND isDeleted = 0;              \n" +
                "  \n" +
                "		SELECT vNewPaymentID refPayementid;                        \n" +
                "	ELSE                        \n" +
                "		IF vCountExistsCheckNo != 0 THEN                      \n" +
                "			SELECT 'DUPLICATE_CHECKNO' AS message;                      \n" +
                "		ELSEIF vCount = 0 THEN          \n" +
                "			IF (pRefPaymentModeOfInvPayment = 'R' AND (SELECT COUNT(1) FROM packingslip_invoice_payment WHERE id = pRefVoidPaymentId            \n" +
                "									AND isPaymentVoided = 1  AND refPaymentMode = pRefPaymentModeOfInvPayment) > 0) THEN          \n" +
                "				SELECT 'ALREADY_VOIDED' AS message;          \n" +
                "			ELSE          \n" +
                "				SELECT 'NOT_FOUND' AS message;            \n" +
                "			END IF;	             \n" +
                "		ELSE                      \n" +
                "			SELECT 'NOT_FOUND' AS message;                      \n" +
                "		END IF;                      \n" +
                "	END IF;                        \n" +
                "END;  \n" +
                /* **************************** New Script -> 27-04-2021  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_Packingslip_Invoice_Payment_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_History` AFTER UPDATE ON `packingslip_invoice_payment`   \n" +
                "    FOR EACH ROW BEGIN               \n" +
                "  DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment\";              \n" +
                "  DECLARE vOldval LONGTEXT DEFAULT '';              \n" +
                "  DECLARE vNewval LONGTEXT DEFAULT '';              \n" +
                "  DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                                               \n" +
                "  DECLARE v_TimeZone VARCHAR(50);                                                \n" +
                "  \n" +
                "  SELECT fun_getTimeZone() INTO v_TimeZone;                                                      \n" +
                "  SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;         \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentNumber, \"\") != IFNULL(NEW.paymentNumber, \"\") THEN            \n" +
                "        INSERT INTO supplier_invoice_payment_history              \n" +
                "					(tableName,									refPaymentID,              \n" +
                "                    Colname,									Oldval,              \n" +
                "                    Newval,										createdAt,              \n" +
                "					createdBy,									createByRoleId,              \n" +
                "					updatedAt,									updatedBy,              \n" +
                "					updateByRoleId)              \n" +
                "		  VALUES 	(vTableName,								NEW.id,              \n" +
                "                    \"Payment# or Check#\",					OLD.paymentNumber,              \n" +
                "                    NEW.paymentNumber,							OLD.updatedAt,              \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/              \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/              \n" +
                "	END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.paymentDate, \"\") != IFNULL(NEW.paymentDate, \"\") THEN              \n" +
                "		INSERT INTO supplier_invoice_payment_history              \n" +
                "					(tableName,									refPaymentID,              \n" +
                "                    Colname,									Oldval,              \n" +
                "                    Newval,										createdAt,              \n" +
                "					createdBy,									createByRoleId,              \n" +
                "					updatedAt,									updatedBy,              \n" +
                "					updateByRoleId)              \n" +
                "		  VALUES 	(vTableName,								NEW.id,              \n" +
                "                    \"Payment Date\",								CAST(DATE_FORMAT(OLD.paymentDate, '%m/%d/%y') AS CHAR),              \n" +
                "                    CAST(DATE_FORMAT(NEW.paymentDate, '%m/%d/%y') AS CHAR),		OLD.updatedAt,              \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/              \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\") THEN              \n" +
                "		INSERT INTO supplier_invoice_payment_history              \n" +
                "					(tableName,									refPaymentID,              \n" +
                "                    Colname,									Oldval,              \n" +
                "                    Newval,										createdAt,              \n" +
                "					createdBy,									createByRoleId,              \n" +
                "					updatedAt,									updatedBy,              \n" +
                "					updateByRoleId)              \n" +
                "		  VALUES 	(vTableName,								NEW.id,              \n" +
                "                    \"Payment Amount ($)\",							CAST(FORMAT(OLD.paymentAmount,2) AS CHAR),              \n" +
                "                    CAST(FORMAT(NEW.paymentAmount,2) AS CHAR),			OLD.updatedAt,              \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/              \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/              \n" +
                "	END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.paymentType, \"\") != IFNULL(NEW.paymentType, \"\") THEN              \n" +
                "		SELECT IFNULL(gencCategoryName, '') INTO vOldval              \n" +
                "		  FROM genericcategory              \n" +
                "		 WHERE gencCategoryID = OLD.paymentType              \n" +
                "		 LIMIT 1;              \n" +
                "  \n" +
                "        SELECT IFNULL(gencCategoryName, '') INTO vNewval              \n" +
                "		  FROM genericcategory              \n" +
                "		 WHERE gencCategoryID = NEW.paymentType              \n" +
                "		 LIMIT 1;              \n" +
                "  \n" +
                "         INSERT INTO supplier_invoice_payment_history              \n" +
                "					(tableName,									refPaymentID,              \n" +
                "                    Colname,									Oldval,              \n" +
                "                    Newval,										createdAt,              \n" +
                "					createdBy,									createByRoleId,              \n" +
                "					updatedAt,									updatedBy,              \n" +
                "					updateByRoleId)              \n" +
                "		  VALUES 	(vTableName,								NEW.id,              \n" +
                "                    \"Payment Method\",							vOldval,              \n" +
                "                    vNewval,									OLD.updatedAt,              \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/              \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/              \n" +
                "	END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.accountReference, \"\") != IFNULL(NEW.accountReference, \"\") THEN              \n" +
                "		INSERT INTO supplier_invoice_payment_history              \n" +
                "					(tableName,									refPaymentID,              \n" +
                "                    Colname,									Oldval,              \n" +
                "                    Newval,										createdAt,              \n" +
                "					createdBy,									createByRoleId,              \n" +
                "					updatedAt,									updatedBy,              \n" +
                "					updateByRoleId)              \n" +
                "		  VALUES 	(vTableName,								NEW.id,              \n" +
                "                    \"Account Reference\",						OLD.accountReference,              \n" +
                "                    NEW.accountReference,						OLD.updatedAt,              \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/              \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/              \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.bankAccountNo, \"\") != IFNULL(NEW.bankAccountNo, \"\") THEN              \n" +
                "		INSERT INTO supplier_invoice_payment_history              \n" +
                "					(tableName,									refPaymentID,              \n" +
                "                    Colname,									Oldval,              \n" +
                "                    Newval,										createdAt,              \n" +
                "					createdBy,									createByRoleId,              \n" +
                "					updatedAt,									updatedBy,              \n" +
                "					updateByRoleId)              \n" +
                "		  VALUES 	(vTableName,								NEW.id,              \n" +
                "                    \"Bank Account Code\",						OLD.bankAccountNo,              \n" +
                "                    NEW.bankAccountNo,							OLD.updatedAt,              \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/              \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/              \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.bankName, \"\") != IFNULL(NEW.bankName, \"\") THEN              \n" +
                "		INSERT INTO supplier_invoice_payment_history              \n" +
                "					(tableName,									refPaymentID,              \n" +
                "                    Colname,									Oldval,              \n" +
                "                    Newval,										createdAt,              \n" +
                "					createdBy,									createByRoleId,              \n" +
                "					updatedAt,									updatedBy,              \n" +
                "					updateByRoleId)              \n" +
                "		  VALUES 	(vTableName,								NEW.id,              \n" +
                "                    \"Bank Name\",								OLD.bankName,              \n" +
                "                    NEW.bankName,								OLD.updatedAt,              \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/              \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/              \n" +
                "    END IF;              \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark, \"\") != IFNULL(NEW.remark, \"\") THEN              \n" +
                "		INSERT INTO supplier_invoice_payment_history              \n" +
                "					(tableName,									refPaymentID,              \n" +
                "                    Colname,									Oldval,              \n" +
                "                    Newval,										createdAt,              \n" +
                "					createdBy,									createByRoleId,              \n" +
                "					updatedAt,									updatedBy,              \n" +
                "					updateByRoleId)              \n" +
                "		  VALUES 	(vTableName,								NEW.id,              \n" +
                "                    \"Comment\",									OLD.remark,              \n" +
                "                    NEW.remark,									OLD.updatedAt,              \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/              \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/              \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.isDeleted, \"\") != IFNULL(NEW.isDeleted, \"\") THEN          \n" +
                "		IF NEW.isDeleted = TRUE THEN          \n" +
                "			SET vNewval = 'Deleted';          \n" +
                "		ELSEIF NEW.isDeleted = FALSE THEN          \n" +
                "			SET vNewval = 'Restored';          \n" +
                "		ELSE          \n" +
                "			SET vNewval = 'Unknown action on delete';          \n" +
                "        END IF;          \n" +
                "		INSERT INTO supplier_invoice_payment_history              \n" +
                "					(tableName,									refPaymentID,              \n" +
                "                    Colname,									Oldval,              \n" +
                "                    Newval,										createdAt,              \n" +
                "					createdBy,									createByRoleId,              \n" +
                "					updatedAt,									updatedBy,              \n" +
                "					updateByRoleId)              \n" +
                "		  VALUES 	(vTableName,								NEW.id,          \n" +
                "                    vNewval,									NULL,          \n" +
                "                    OLD.paymentNumber,							OLD.updatedAt,          \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,          \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/          \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/          \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") THEN              \n" +
                "		SET vOldval = CASE WHEN OLD.isPaymentVoided = TRUE THEN 'Voided' ELSE         \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)        \n" +
                "				END;              \n" +
                "		SET vNewval = CASE WHEN NEW.isPaymentVoided = TRUE THEN 'Voided' ELSE         \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)        \n" +
                "				END;              \n" +
                "        INSERT INTO supplier_invoice_payment_history              \n" +
                "					(tableName,									refPaymentID,              \n" +
                "                    Colname,									Oldval,              \n" +
                "                    Newval,										createdAt,              \n" +
                "					createdBy,									createByRoleId,              \n" +
                "					updatedAt,									updatedBy,              \n" +
                "					updateByRoleId)              \n" +
                "		  VALUES 	(vTableName,								NEW.id,              \n" +
                "                    \"Payment Status\",							vOldval,              \n" +
                "                    vNewval,									OLD.updatedAt,              \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/              \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/         \n" +
                "  \n" +
                "  \n" +
                "		IF (IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") AND NEW.isPaymentVoided = TRUE) THEN              \n" +
                "			INSERT INTO supplier_invoice_payment_history              \n" +
                "							(tableName,									refPaymentID,              \n" +
                "				    Colname,									Oldval,              \n" +
                "				    Newval,										createdAt,              \n" +
                "							createdBy,									createByRoleId,              \n" +
                "							updatedAt,									updatedBy,              \n" +
                "							updateByRoleId)              \n" +
                "				  VALUES 	(vTableName,								NEW.id,              \n" +
                "				    \"Voided Date\",							'',              \n" +
                "				    fun_ApplyCommonDateTimeFormatByParaValue(NEW.UpdatedAt,v_TimeZone,v_DateTimeDisplayFormat),									OLD.updatedAt,              \n" +
                "							OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "							fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/              \n" +
                "							NEW.updateByRoleId); /*updateByRoleId*/              \n" +
                "		  END IF;         \n" +
                "  \n" +
                "		  IF (IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") AND NEW.isPaymentVoided = TRUE) THEN              \n" +
                "			INSERT INTO supplier_invoice_payment_history              \n" +
                "							(tableName,									refPaymentID,              \n" +
                "				    Colname,									Oldval,              \n" +
                "				    Newval,										createdAt,              \n" +
                "							createdBy,									createByRoleId,              \n" +
                "							updatedAt,									updatedBy,              \n" +
                "							updateByRoleId)              \n" +
                "				  VALUES 	(vTableName,								NEW.id,              \n" +
                "				    \"Voided By\",							'',              \n" +
                "				    fun_getUserNameByID(NEW.updatedBy),									OLD.updatedAt,              \n" +
                "							OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "							fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/              \n" +
                "							NEW.updateByRoleId); /*updateByRoleId*/              \n" +
                "		 END IF;        \n" +
                "  \n" +
                "  \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.voidPaymentReason, \"\") != IFNULL(NEW.voidPaymentReason, \"\") THEN              \n" +
                "		INSERT INTO supplier_invoice_payment_history              \n" +
                "					(tableName,									refPaymentID,              \n" +
                "                    Colname,									Oldval,              \n" +
                "                    Newval,										createdAt,              \n" +
                "					createdBy,									createByRoleId,              \n" +
                "					updatedAt,									updatedBy,              \n" +
                "					updateByRoleId)              \n" +
                "		  VALUES 	(vTableName,								NEW.id,              \n" +
                "                    \"Void Payment Reason\",						OLD.voidPaymentReason,              \n" +
                "                    NEW.voidPaymentReason,						OLD.updatedAt,              \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/              \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/              \n" +
                "    END IF;              \n" +
                "  \n" +
                "    IF IFNULL(OLD.refVoidedPaymentNumber, \"\") != IFNULL(NEW.refVoidedPaymentNumber, \"\") THEN              \n" +
                "		INSERT INTO supplier_invoice_payment_history              \n" +
                "					(tableName,									refPaymentID,              \n" +
                "                    Colname,									Oldval,              \n" +
                "                    Newval,										createdAt,              \n" +
                "					createdBy,									createByRoleId,              \n" +
                "					updatedAt,									updatedBy,              \n" +
                "					updateByRoleId)            \n" +
                "		  VALUES 	(vTableName,								NEW.id,              \n" +
                "                    \"Ref Voided Payment Or Check number\",		OLD.refVoidedPaymentNumber,              \n" +
                "                    NEW.refVoidedPaymentNumber,					OLD.updatedAt,              \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/              \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/              \n" +
                "    END IF;          \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockStatus, \"\") != IFNULL(NEW.lockStatus, \"\") THEN              \n" +
                "        INSERT INTO supplier_invoice_payment_history              \n" +
                "					(tableName,									refPaymentID,              \n" +
                "                    Colname,									Oldval,              \n" +
                "                    Newval,										createdAt,              \n" +
                "					createdBy,									createByRoleId,              \n" +
                "					updatedAt,									updatedBy,              \n" +
                "					updateByRoleId)              \n" +
                "		  VALUES 	(vTableName,								NEW.id,              \n" +
                "                    \"Lock Status\",						(CASE WHEN OLD.lockStatus = 'NA' THEN 'Not Applicable'   WHEN OLD.lockStatus = 'RL' THEN 'Ready To Lock'       \n" +
                "													WHEN OLD.lockStatus = 'LC' THEN 'Locked' ELSE '' END),              \n" +
                "                    (CASE WHEN NEW.lockStatus = 'NA' THEN 'Not Applicable'   WHEN NEW.lockStatus = 'RL' THEN 'Ready To Lock'       \n" +
                "				WHEN NEW.lockStatus = 'LC' THEN 'Locked' ELSE '' END),									OLD.updatedAt,              \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/              \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/              \n" +
                "    END IF;         \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedAt, \"\") != IFNULL(NEW.lockedAt, \"\") THEN              \n" +
                "        INSERT INTO supplier_invoice_payment_history              \n" +
                "					(tableName,									refPaymentID,              \n" +
                "                    Colname,									Oldval,              \n" +
                "                    Newval,										createdAt,              \n" +
                "					createdBy,									createByRoleId,              \n" +
                "					updatedAt,									updatedBy,              \n" +
                "					updateByRoleId)              \n" +
                "		  VALUES 	(vTableName,								NEW.id,              \n" +
                "                    \"Locked Date\",							'',              \n" +
                "                    fun_ApplyCommonDateTimeFormatByParaValue(NEW.lockedAt,v_TimeZone,v_DateTimeDisplayFormat),									OLD.updatedAt,              \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/              \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/              \n" +
                "    END IF;         \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedBy, \"\") != IFNULL(NEW.lockedBy, \"\") THEN              \n" +
                "        INSERT INTO supplier_invoice_payment_history              \n" +
                "					(tableName,									refPaymentID,              \n" +
                "                    Colname,									Oldval,              \n" +
                "                    Newval,										createdAt,              \n" +
                "					createdBy,									createByRoleId,              \n" +
                "					updatedAt,									updatedBy,              \n" +
                "					updateByRoleId)              \n" +
                "		  VALUES 	(vTableName,								NEW.id,              \n" +
                "                    \"Locked By\",							'',              \n" +
                "                    fun_getUserNameByID(NEW.lockedBy),									OLD.updatedAt,              \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/              \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/              \n" +
                "    END IF;        \n" +
                "  \n" +
                "  \n" +
                "  /*        \n" +
                "    IF IFNULL(OLD.refPaymentMode, \"\") != IFNULL(NEW.refPaymentMode, \"\") THEN          \n" +
                "		set vOldval = case when OLD.refPaymentMode = 'P' then 'Payable' else 'Receivable' end;          \n" +
                "		set vNewval = case when NEW.refPaymentMode = 'P' then 'Payable' else 'Receivable' end;          \n" +
                "		INSERT INTO supplier_invoice_payment_history          \n" +
                "					(tableName,									refPaymentID,              \n" +
                "                    Colname,									Oldval,              \n" +
                "                    Newval,										createdAt,              \n" +
                "					createdBy,									createByRoleId,              \n" +
                "					updatedAt,									updatedBy,              \n" +
                "					updateByRoleId)            \n" +
                "		  VALUES 	(vTableName,								NEW.id,              \n" +
                "                    \"Payment Mode\",								vOldval,              \n" +
                "                    vNewval,									OLD.updatedAt,              \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "					fun_DatetimetoUTCDateTime(), 	NEW.updatedBy,               \n" +
                "					NEW.updateByRoleId);              \n" +
                "    END IF;        \n" +
                "   */         \n" +
                "  \n" +
                "    IF NEW.refPaymentMode = 'P' THEN        \n" +
                "  \n" +
                "		IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN            \n" +
                "			IF OLD.mfgcodeID IS NOT NULL THEN            \n" +
                "				SELECT IFNULL(`mfgCode`, '') INTO vOldval          \n" +
                "				FROM mfgcodemst              \n" +
                "				WHERE id =OLD.mfgcodeID              \n" +
                "				ORDER BY id DESC LIMIT 1;              \n" +
                "			END IF;            \n" +
                "			IF NEW.mfgcodeID IS NOT NULL THEN            \n" +
                "				SELECT IFNULL(`mfgCode`, '') INTO vNewval          \n" +
                "				FROM mfgcodemst            \n" +
                "				WHERE id =NEW.mfgcodeID            \n" +
                "				ORDER BY id DESC LIMIT 1;            \n" +
                "			END IF;            \n" +
                "			  INSERT INTO supplier_invoice_payment_history              \n" +
                "						(tableName,									refPaymentID,              \n" +
                "			    Colname,									Oldval,              \n" +
                "			    Newval,										createdAt,              \n" +
                "						createdBy,									createByRoleId,              \n" +
                "						updatedAt,									updatedBy,              \n" +
                "						updateByRoleId)              \n" +
                "			  VALUES 	(vTableName,								NEW.id,              \n" +
                "			    \"Supplier\",									vOldval,              \n" +
                "			    vNewval,									OLD.updatedAt,              \n" +
                "						OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/              \n" +
                "						NEW.updateByRoleId); /*updateByRoleId*/              \n" +
                "		END IF;         \n" +
                "  \n" +
                "	    IF IFNULL(OLD.payToName, \"\") != IFNULL(NEW.payToName, \"\") THEN              \n" +
                "			INSERT INTO supplier_invoice_payment_history              \n" +
                "						(tableName,									refPaymentID,              \n" +
                "			    Colname,									Oldval,              \n" +
                "			    Newval,										createdAt,              \n" +
                "						createdBy,									createByRoleId,              \n" +
                "						updatedAt,									updatedBy,              \n" +
                "						updateByRoleId)              \n" +
                "			  VALUES 	(vTableName,								NEW.id,              \n" +
                "			    \"Pay To name\",								OLD.payToName,              \n" +
                "			    NEW.payToName,								OLD.updatedAt,              \n" +
                "						OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/              \n" +
                "						NEW.updateByRoleId); /*updateByRoleId*/              \n" +
                "	    END IF;              \n" +
                "  \n" +
                "	    IF IFNULL(OLD.payToAddress, \"\") != IFNULL(NEW.payToAddress, \"\") THEN              \n" +
                "			INSERT INTO supplier_invoice_payment_history              \n" +
                "						(tableName,									refPaymentID,              \n" +
                "			    Colname,									Oldval,              \n" +
                "			    Newval,										createdAt,              \n" +
                "						createdBy,									createByRoleId,              \n" +
                "						updatedAt,									updatedBy,              \n" +
                "						updateByRoleId)              \n" +
                "			  VALUES 	(vTableName,								NEW.id,              \n" +
                "			    \"Pay To Address\",							OLD.payToAddress,              \n" +
                "			    NEW.payToAddress,							OLD.updatedAt,              \n" +
                "						OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/              \n" +
                "						NEW.updateByRoleId); /*updateByRoleId*/              \n" +
                "	    END IF;               \n" +
                "  \n" +
                "	    IF IFNULL(OLD.billToName, \"\") != IFNULL(NEW.billToName, \"\") THEN              \n" +
                "			INSERT INTO supplier_invoice_payment_history              \n" +
                "						(tableName,									refPaymentID,              \n" +
                "			    Colname,									Oldval,              \n" +
                "			    Newval,										createdAt,              \n" +
                "						createdBy,									createByRoleId,              \n" +
                "						updatedAt,									updatedBy,              \n" +
                "						updateByRoleId)            \n" +
                "			  VALUES 	(vTableName,								NEW.id,              \n" +
                "			    \"Bill To Name\",								OLD.billToName,              \n" +
                "			    NEW.billToName,								OLD.updatedAt,              \n" +
                "						OLD.updatedBy,								OLD.updateByRoleId,              \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/              \n" +
                "						NEW.updateByRoleId); /*updateByRoleId*/              \n" +
                "	    END IF;          \n" +
                "  \n" +
                "	    IF IFNULL(OLD.billToAddress, \"\") != IFNULL(NEW.billToAddress, \"\") THEN          \n" +
                "			INSERT INTO supplier_invoice_payment_history          \n" +
                "						(tableName,									refPaymentID,          \n" +
                "			    Colname,									Oldval,          \n" +
                "			    Newval,										createdAt,          \n" +
                "						createdBy,									createByRoleId,          \n" +
                "						updatedAt,									updatedBy,          \n" +
                "						updateByRoleId)          \n" +
                "			  VALUES 	(vTableName,								NEW.id,          \n" +
                "			    \"Bill To Address\",							OLD.billToAddress,          \n" +
                "			    NEW.billToAddress,							OLD.updatedAt,          \n" +
                "						OLD.updatedBy,								OLD.updateByRoleId,          \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/          \n" +
                "						NEW.updateByRoleId); /*updateByRoleId*/          \n" +
                "	    END IF;   \n" +
                "  \n" +
                "  \n" +
                "    ELSEIF NEW.refPaymentMode = 'R' THEN  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.depositBatchNumber, \"\") != IFNULL(NEW.depositBatchNumber, \"\") THEN              \n" +
                "			INSERT INTO supplier_invoice_payment_history              \n" +
                "						(tableName,						refPaymentID,              \n" +
                "						Colname,						Oldval,              \n" +
                "						Newval,							createdAt,              \n" +
                "						createdBy,						createByRoleId,              \n" +
                "						updatedAt,						updatedBy,              \n" +
                "						updateByRoleId)              \n" +
                "			  VALUES 	(vTableName,							NEW.id,              \n" +
                "					\"Deposit Batch#\",						OLD.depositBatchNumber,              \n" +
                "					NEW.depositBatchNumber,						OLD.updatedAt,              \n" +
                "					OLD.updatedBy,							OLD.updateByRoleId,              \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/			NEW.updatedBy, /*updatedBy*/              \n" +
                "					NEW.updateByRoleId); /*updateByRoleId*/              \n" +
                "	    END IF;   \n" +
                "  \n" +
                "  \n" +
                "    END IF;     \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 27-04-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentDetForElastic` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentDetForElastic`(                                                                                                \n" +
                "	IN pPaymentMstID INT                                       \n" +
                ")  \n" +
                "BEGIN                                                                                                \n" +
                "	 DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                                             \n" +
                "	DECLARE v_TimeZone VARCHAR(50);          \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                                                    \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;      \n" +
                "  \n" +
                "            SELECT 						                                                  \n" +
                "		psip.id,                                                              \n" +
                "                psip.mfgcodeID,                                          \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,                             \n" +
                "                psip.isPaymentVoided,                        \n" +
                "                CASE WHEN psip.isPaymentVoided = 0 THEN 'Received'                        \n" +
                "                    ELSE 'Voided' END isPaymentVoidedConvertedValue,                        \n" +
                "		psip.voidPaymentReason,          \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,           \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,                            \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone, v_DateTimeDisplayFormat)          \n" +
                "										ELSE NULL END) AS voidedAt,	                      \n" +
                "                psip.refVoidedPaymentNumber,            \n" +
                "                psip.refVoidedPaymentId,                        \n" +
                "                psip.paymentNumber,                                          \n" +
                "                psip.bankName,                                          \n" +
                "                psip.bankAccountNo,                                          \n" +
                "                psip.paymentType,                                          \n" +
                "                psip.bankAccountMasID,         \n" +
                "                psip.systemId ,                                         \n" +
                "                gc.gencCategoryName paymentMethod,                                    \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,                                    \n" +
                "		psip.paymentDate,                                    \n" +
                "                psip.accountReference,                                    \n" +
                "                (CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'     \n" +
                "			 WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,	    \n" +
                "                fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,                            \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone, v_DateTimeDisplayFormat) lockedAt,                                                               \n" +
                "                invPayDetTemp.invoiceNumberList,      \n" +
                "                psip.remark  , psip.depositBatchNumber    \n" +
                "	   FROM packingslip_invoice_payment psip                                     \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0                  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber SEPARATOR ', ') invoiceNumberList                 \n" +
                "				    FROM packingslip_invoice_payment_det psipd                  \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id                   \n" +
                "											AND cps.isDeleted = 0                  \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL                   \n" +
                "				     AND psipd.isDeleted = 0                  \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp                   \n" +
                "				ON psip.id = invPayDetTemp.refPayementid                       \n" +
                "            WHERE psip.id = IFNULL(pPaymentMstID,psip.id)      \n" +
                "            AND psip.refPaymentMode = 'R'                   \n" +
                "            AND psip.isDeleted = 0                   \n" +
                "             ;                                            \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 27-04-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllInvoiceOfCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllInvoiceOfCustomerPayment`(        \n" +
                "	IN pCustomerID INT,        \n" +
                "	IN pPayementID INT,        \n" +
                "	IN pInvoiceTransType VARCHAR(5),      \n" +
                "	IN pisGetOnlyPaidInvoiceFromPayment TINYINT        \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "  \n" +
                "	DECLARE v_isPaymentVoided TINYINT ;      \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(15);                                                                           \n" +
                "	DECLARE vTimeZone VARCHAR(50);     \n" +
                "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);    \n" +
                "	DECLARE v_paymentTermsID INT;	  \n" +
                "	DECLARE v_custTermsDays INT;  \n" +
                "	SET v_custTermsDays = NULL;  \n" +
                "  \n" +
                "	SET v_isPaymentVoided = 0;                                                                                                                      \n" +
                "	SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;     \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;     \n" +
                "	SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\")     \n" +
                "			INTO currDateWithAppliedTimeZone ;    \n" +
                "	-- select currDateWithAppliedTimeZone	;    \n" +
                "  \n" +
                "	SELECT paymentTermsID INTO v_paymentTermsID  \n" +
                "	FROM mfgcodemst   \n" +
                "	WHERE id = pCustomerID   \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	IF v_paymentTermsID IS NOT NULL THEN   \n" +
                "		SELECT IFNULL(termsDays,0) INTO v_custTermsDays  \n" +
                "		FROM `genericcategory`   \n" +
                "		WHERE `gencCategoryID` = v_paymentTermsID  \n" +
                "		AND categoryType = 'Payment Terms'   \n" +
                "		AND isDeleted = 0 ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pPayementID IS NULL OR pPayementID = '') THEN        \n" +
                "  \n" +
                "		/* add new customer payment case */        \n" +
                "		SELECT *         \n" +
                "		FROM (        \n" +
                "			SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,         \n" +
                "			cps.totalAmount AS originalPayAmountOfInvoice,        \n" +
                "				cps.status, cps.isZeroValue ,  \n" +
                "				v_custTermsDays AS custCurrentTermsDays ,    \n" +
                "				(CASE WHEN cps.totalAmount = 0 THEN 'N/A'  \n" +
                "					WHEN v_paymentTermsID IS NULL THEN ''  \n" +
                "					WHEN fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID) <= CAST(currDateWithAppliedTimeZone AS DATE)    \n" +
                "							THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID))    \n" +
                "					ELSE 0 END) AS noOfDaysLateAfterDueDate,     \n" +
                "				NULL invPaymentDetMstID,  NULL refCustPackingslipInvoiceID,        \n" +
                "				0 AS invPaidAmtFromCurrPaymentDet,        \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det        \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id      \n" +
                "					AND isPaymentVoided = 0         \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet        \n" +
                "			FROM customer_packingslip cps        \n" +
                "			WHERE cps.customerID = pCustomerID        \n" +
                "			AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */         \n" +
                "			AND cps.isDeleted = 0	        \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */        \n" +
                "		) tempInv        \n" +
                "		WHERE (        \n" +
                "			(         \n" +
                "				tempInv.originalPayAmountOfInvoice = 0 AND tempInv.invTotPaidAmtFromAllPaymentDet IS NULL        \n" +
                "					/* get all peding to pay inv with 0 amount */        \n" +
                "			)        \n" +
                "			OR        \n" +
                "			(        \n" +
                "				(tempInv.originalPayAmountOfInvoice  - IFNULL(tempInv.invTotPaidAmtFromAllPaymentDet,0)) > 0          \n" +
                "						 /* get all peding to pay inv */	        \n" +
                "			)        \n" +
                "		   )				        \n" +
                "  \n" +
                "		;        \n" +
                "  \n" +
                "	ELSE        \n" +
                "		/* update customer payment case */        \n" +
                "  \n" +
                "		SELECT isPaymentVoided INTO v_isPaymentVoided      \n" +
                "		FROM packingslip_invoice_payment      \n" +
                "		WHERE id = pPayementID       \n" +
                "		AND isDeleted = 0 ;      \n" +
                "  \n" +
                "  \n" +
                "		IF(v_isPaymentVoided = 0) THEN      \n" +
                "  \n" +
                "  \n" +
                "			IF(pisGetOnlyPaidInvoiceFromPayment = 0) THEN       \n" +
                "			/* get already paid invoices + get pending to pay invoices */        \n" +
                "  \n" +
                "				/* get already paid invoices  */        \n" +
                "				SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,         \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,        \n" +
                "					cps.status,  cps.isZeroValue ,    \n" +
                "					v_custTermsDays AS custCurrentTermsDays ,  \n" +
                "					(CASE WHEN cps.totalAmount = 0 THEN 'N/A'    \n" +
                "						WHEN v_paymentTermsID IS NULL THEN ''  \n" +
                "						WHEN fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID) <= CAST(currDateWithAppliedTimeZone AS DATE)    \n" +
                "							THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID))    \n" +
                "						ELSE 0 END) AS noOfDaysLateAfterDueDate,       \n" +
                "					pipd.id invPaymentDetMstID,  pipd.refCustPackingslipInvoiceID,        \n" +
                "					IFNULL(pipd.paymentAmount,0) AS invPaidAmtFromCurrPaymentDet,        \n" +
                "					(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det        \n" +
                "						WHERE refCustPackingslipInvoiceID = cps.id       \n" +
                "						AND isPaymentVoided = 0        \n" +
                "						AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet        \n" +
                "				FROM customer_packingslip cps        \n" +
                "					JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID        \n" +
                "								 AND pipd.refPayementid = pPayementID        \n" +
                "								 AND pipd.isPaymentVoided = 0      \n" +
                "								 AND pipd.isDeleted = 0        \n" +
                "				WHERE cps.customerID = pCustomerID        \n" +
                "				AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */         \n" +
                "				AND cps.isDeleted = 0        \n" +
                "				AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */        \n" +
                "  \n" +
                "				UNION        \n" +
                "  \n" +
                "				/* get pending to pay invoices  */        \n" +
                "				SELECT *         \n" +
                "				FROM (        \n" +
                "					SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,         \n" +
                "					cps.totalAmount AS originalPayAmountOfInvoice,        \n" +
                "						cps.status, cps.isZeroValue ,    \n" +
                "						v_custTermsDays AS custCurrentTermsDays ,  \n" +
                "						(CASE WHEN cps.totalAmount = 0 THEN 'N/A'    \n" +
                "							WHEN v_paymentTermsID IS NULL THEN ''  \n" +
                "							WHEN fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID) <= CAST(currDateWithAppliedTimeZone AS DATE)    \n" +
                "								THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID))    \n" +
                "							ELSE 0 END) AS noOfDaysLateAfterDueDate,        \n" +
                "						NULL invPaymentDetMstID,  NULL refCustPackingslipInvoiceID,        \n" +
                "						0 AS invPaidAmtFromCurrPaymentDet,        \n" +
                "						(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det        \n" +
                "							WHERE refCustPackingslipInvoiceID = cps.id       \n" +
                "							AND isPaymentVoided = 0      \n" +
                "							AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet        \n" +
                "					FROM customer_packingslip cps        \n" +
                "					WHERE cps.customerID = pCustomerID        \n" +
                "					AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */         \n" +
                "					AND cps.isDeleted = 0        \n" +
                "					AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */        \n" +
                "					AND cps.id NOT IN (SELECT refCustPackingslipInvoiceID FROM packingslip_invoice_payment_det        \n" +
                "								WHERE refPayementid = pPayementID       \n" +
                "								AND isPaymentVoided = 0      \n" +
                "								AND isDeleted = 0 GROUP BY refCustPackingslipInvoiceID)	        \n" +
                "  \n" +
                "				) tempInv        \n" +
                "				WHERE         \n" +
                "				 (        \n" +
                "					(         \n" +
                "						tempInv.originalPayAmountOfInvoice = 0 AND tempInv.invTotPaidAmtFromAllPaymentDet IS NULL        \n" +
                "							/* get all peding to pay inv with 0 amount */        \n" +
                "					)        \n" +
                "					OR        \n" +
                "					(        \n" +
                "						(tempInv.originalPayAmountOfInvoice  - IFNULL(tempInv.invTotPaidAmtFromAllPaymentDet,0)) > 0          \n" +
                "								 /* get all peding to pay inv */	        \n" +
                "					)        \n" +
                "				   )        \n" +
                "				;       \n" +
                "  \n" +
                "			ELSEIF(pisGetOnlyPaidInvoiceFromPayment = 1) THEN      \n" +
                "  \n" +
                "				/* get already paid invoices  */        \n" +
                "				SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,         \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,        \n" +
                "					cps.status,  cps.isZeroValue ,     \n" +
                "					v_custTermsDays AS custCurrentTermsDays ,     \n" +
                "					(CASE WHEN cps.totalAmount = 0 THEN 'N/A'    \n" +
                "						WHEN v_paymentTermsID IS NULL THEN ''  \n" +
                "						WHEN fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID) <= CAST(currDateWithAppliedTimeZone AS DATE)    \n" +
                "							THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID))    \n" +
                "						ELSE 0 END) AS noOfDaysLateAfterDueDate,     \n" +
                "					pipd.id invPaymentDetMstID,  pipd.refCustPackingslipInvoiceID,        \n" +
                "					IFNULL(pipd.paymentAmount,0) AS invPaidAmtFromCurrPaymentDet,        \n" +
                "					(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det        \n" +
                "						WHERE refCustPackingslipInvoiceID = cps.id       \n" +
                "						AND isPaymentVoided = 0        \n" +
                "						AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet        \n" +
                "				FROM customer_packingslip cps        \n" +
                "					JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID        \n" +
                "								 AND pipd.refPayementid = pPayementID        \n" +
                "								 AND pipd.isPaymentVoided = 0      \n" +
                "								 AND pipd.isDeleted = 0        \n" +
                "				WHERE cps.customerID = pCustomerID        \n" +
                "				AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */         \n" +
                "				AND cps.isDeleted = 0        \n" +
                "				AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */      \n" +
                "				;      \n" +
                "  \n" +
                "			END IF;	      \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		ELSEIF(v_isPaymentVoided = 1) THEN      \n" +
                "  \n" +
                "			/* get already paid invoices only */        \n" +
                "			SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,         \n" +
                "			cps.totalAmount AS originalPayAmountOfInvoice,        \n" +
                "				cps.status, cps.isZeroValue ,    \n" +
                "				v_custTermsDays AS custCurrentTermsDays ,    \n" +
                "				(CASE WHEN cps.totalAmount = 0 THEN 'N/A'    \n" +
                "					WHEN v_paymentTermsID IS NULL THEN ''  \n" +
                "					WHEN fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID) <= CAST(currDateWithAppliedTimeZone AS DATE)    \n" +
                "						THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID))    \n" +
                "					ELSE 0 END) AS noOfDaysLateAfterDueDate,      \n" +
                "				pipd.id invPaymentDetMstID,  pipd.refCustPackingslipInvoiceID,  pipd.isPaymentVoided,      \n" +
                "				IFNULL(pipd.paymentAmount,0) AS invPaidAmtFromCurrPaymentDet,        \n" +
                "				((SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det        \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id       \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0)       \n" +
                "				   --  + IFNULL(pipd.paymentAmount,0)      \n" +
                "				    ) AS invTotPaidAmtFromAllPaymentDet        \n" +
                "			FROM customer_packingslip cps        \n" +
                "				JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID        \n" +
                "							 AND pipd.refPayementid = pPayementID        \n" +
                "							 AND pipd.isDeleted = 0        \n" +
                "			WHERE cps.customerID = pCustomerID        \n" +
                "			AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */         \n" +
                "			AND cps.isDeleted = 0        \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */        \n" +
                "			;  	      \n" +
                "  \n" +
                "		END IF;      \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	END IF;        \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* get customer Past Due Balance >> check from current date till pending */    \n" +
                "	SELECT SUM(CASE WHEN a.paymentDueDate <= CAST(currDateWithAppliedTimeZone AS DATE) THEN a.totalOutstandingAmount ELSE 0 END) AS pastDueAmount     \n" +
                "	FROM (      \n" +
                "		SELECT customerID,    \n" +
                "			(IFNULL(totalAmount,0) - IFNULL(get_totalCustomerInvoiceReceivedAmountById(id),0)) AS totalOutstandingAmount ,      \n" +
                "				DATE_ADD(invoiceDate, INTERVAL IFNULL(termsDays,0) DAY) paymentDueDate        \n" +
                "  \n" +
                "		FROM customer_packingslip        \n" +
                "		WHERE customerID = pCustomerID    \n" +
                "		AND transType = pInvoiceTransType   /* here 'I' for invoice */         \n" +
                "		AND isDeleted = 0        \n" +
                "	    ) a        \n" +
                "	GROUP BY a.customerID ;    \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 27-04-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentBalanceAndPastDue` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentBalanceAndPastDue`(        \n" +
                "	IN pPageIndex INT,        \n" +
                "	IN pRecordPerPage INT,        \n" +
                "	IN pOrderBy VARCHAR(255),        \n" +
                "	IN pWhereClause VARCHAR(16383),   \n" +
                "	IN pRequestType VARCHAR(5),  \n" +
                "	IN pAgedReceivablesDueAsOfDate DATE ,    \n" +
                "	IN pDueDate DATE ,  \n" +
                "	IN pAdditionalDays INT,        \n" +
                "	IN pTermsAndAboveDays INT  ,  \n" +
                "	IN pIsIncludeZeroValueInvoices TINYINT      \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "	/* pRequestType Aged Receivable - 'AR' , Past Due - 'PD'  */  \n" +
                "	DECLARE vDueDate DATE;        \n" +
                "	DECLARE pOffset INT;        \n" +
                "	DECLARE rowNumWhere VARCHAR(255);     \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(15);                                                                           \n" +
                "	DECLARE vTimeZone VARCHAR(50);     \n" +
                "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);    \n" +
                "  \n" +
                "	/* cps.subStatus 2-Invoiced,3-Corrected and Invoiced */    	  \n" +
                "  \n" +
                "	IF (pRequestType = 'AR') THEN	/* pRequestType Aged Receivable - 'AR' */  \n" +
                "		SET vDueDate = pAgedReceivablesDueAsOfDate;  \n" +
                "  \n" +
                "	ELSEIF (pRequestType = 'PD') THEN /* Past Due - 'PD' */  \n" +
                "		IF (pTermsAndAboveDays IS NOT NULL) THEN  \n" +
                "			SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;     \n" +
                "			SELECT fun_getTimeZone() INTO vTimeZone;     \n" +
                "			SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\") INTO currDateWithAppliedTimeZone ;   \n" +
                "			SET vDueDate = DATE_ADD(currDateWithAppliedTimeZone, INTERVAL IFNULL(pTermsAndAboveDays,0) DAY);        \n" +
                "		ELSE  \n" +
                "			SET vDueDate = DATE_ADD(pDueDate, INTERVAL IFNULL(pAdditionalDays,0) DAY);   \n" +
                "		END IF;	  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_balanceDue = CONCAT(\"       \n" +
                "		SELECT temp_greater_zero_amt.customerID ,        \n" +
                "			temp_greater_zero_amt.customerCodeName,   \n" +
                "			temp_greater_zero_amt.custCurrTermDays,    \n" +
                "			temp_greater_zero_amt.totalCreditMemoAmount,        \n" +
                "			temp_greater_zero_amt.totalOutstandingAmount,      \n" +
                "			temp_greater_zero_amt.pastDueAmount,    \n" +
                "			temp_greater_zero_amt.totalAdjustmentPendingAmount  ,  \n" +
                "			(ABS(temp_greater_zero_amt.totalCreditMemoAmount) + IFNULL(temp_greater_zero_amt.totalAdjustmentPendingAmount,0)) AS totalCreditAmount ,  \n" +
                "			IFNULL(temp_greater_zero_amt.totalOutstandingAmount,0) - (ABS(temp_greater_zero_amt.totalCreditMemoAmount) + IFNULL(temp_greater_zero_amt.totalAdjustmentPendingAmount,0)) AS balanceAfterTotCreditUsed ,  \n" +
                "			temp_greater_zero_amt.agedAmountAs0To30,  \n" +
                "			temp_greater_zero_amt.agedAmountAs31To60,  \n" +
                "			temp_greater_zero_amt.agedAmountAs61To90,	  \n" +
                "			temp_greater_zero_amt.agedAmountAs91To120,  \n" +
                "			temp_greater_zero_amt.agedAmountAs121More ,   \n" +
                "			temp_greater_zero_amt.totalAmountOfAgedDueReceivable,  \n" +
                "			temp_greater_zero_amt.totalInvCount ,  \n" +
                "			(CASE WHEN '\",pRequestType,\"' = 'PD' THEN  \n" +
                "				IFNULL(temp_greater_zero_amt.totalOutstandingAmount,0) - IFNULL(temp_greater_zero_amt.totalAmountOfAgedDueReceivable,0)   \n" +
                "			ELSE NULL END) AS totalAmountWithinTerms		  \n" +
                "		FROM (    \n" +
                "			SELECT temp_InvPay.customerID ,    \n" +
                "				fun_getMfgCodeAndNameByID(temp_InvPay.customerID) AS customerCodeName,   \n" +
                "				temp_InvPay.custCurrTermDays,     \n" +
                "				temp_InvPay.totalCreditMemoAmount,        \n" +
                "				temp_InvPay.totalOutstandingAmount,      \n" +
                "				temp_InvPay.pastDueAmount ,      \n" +
                "				(SELECT IFNULL(SUM(paymentAmount),0) - IFNULL(temp_InvPay.totalPaidAmount,0) AS totalAdjustmentPendingAmount      \n" +
                "					FROM packingslip_invoice_payment      \n" +
                "					WHERE mfgcodeID = temp_InvPay.customerID       \n" +
                "					AND refPaymentMode = 'R' AND isPaymentVoided = 0 AND isDeleted = 0      \n" +
                "					GROUP BY mfgcodeID)  AS totalAdjustmentPendingAmount ,    \n" +
                "				temp_InvPay.isAllInvPaid ,  \n" +
                "				temp_InvPay.agedAmountAs0To30,  \n" +
                "				temp_InvPay.agedAmountAs31To60,  \n" +
                "				temp_InvPay.agedAmountAs61To90,	  \n" +
                "				temp_InvPay.agedAmountAs91To120,  \n" +
                "				temp_InvPay.agedAmountAs121More ,  \n" +
                "				(CASE WHEN temp_InvPay.daysDiffOfInv IS NOT NULL THEN   \n" +
                "						(IFNULL(temp_InvPay.agedAmountAs0To30,0) + IFNULL(temp_InvPay.agedAmountAs31To60,0) + IFNULL(temp_InvPay.agedAmountAs61To90,0) +   \n" +
                "						IFNULL(temp_InvPay.agedAmountAs91To120,0) + IFNULL(temp_InvPay.agedAmountAs121More,0))		  \n" +
                "					ELSE NULL END) AS totalAmountOfAgedDueReceivable,  \n" +
                "				temp_InvPay.totalInvCount	  \n" +
                "  \n" +
                "			FROM (      \n" +
                "					SELECT a.customerID,   \n" +
                "						a.termsDays AS custCurrTermDays,  \n" +
                "						a.daysDiffOfInv,  \n" +
                "						SUM(CASE WHEN a.transType IN ('C') THEN a.totalOutstandingAmount ELSE 0 END) AS totalCreditMemoAmount,        \n" +
                "						SUM(CASE WHEN a.transType IN ('I') THEN a.totalOutstandingAmount ELSE 0 END) AS totalOutstandingAmount,        \n" +
                "						SUM(CASE WHEN a.transType IN ('I') AND a.paymentDueDate <= '\",vDueDate,\"' THEN a.totalOutstandingAmount ELSE 0 END) AS pastDueAmount ,      \n" +
                "						SUM(IFNULL(a.paidAmount,0)) AS totalPaidAmount	,    \n" +
                "						MIN(CASE WHEN a.paidAmount IS NULL THEN 0 ELSE 1 END) AS isAllInvPaid  ,  \n" +
                "						(CASE WHEN a.daysDiffOfInv IS NOT NULL THEN   \n" +
                "								SUM(CASE WHEN a.transType IN ('I') AND a.daysDiffOfInv >= 0 AND a.daysDiffOfInv <= 30    \n" +
                "									THEN a.totalOutstandingAmount ELSE 0 END)   \n" +
                "							ELSE NULL END) AS agedAmountAs0To30,   \n" +
                "						(CASE WHEN a.daysDiffOfInv IS NOT NULL THEN	     \n" +
                "								SUM(CASE WHEN a.transType IN ('I') AND a.daysDiffOfInv >= 31 AND a.daysDiffOfInv <= 60    \n" +
                "									THEN a.totalOutstandingAmount ELSE 0 END)   \n" +
                "							ELSE NULL END) AS agedAmountAs31To60 ,  \n" +
                "						(CASE WHEN a.daysDiffOfInv IS NOT NULL THEN	  \n" +
                "								SUM(CASE WHEN a.transType IN ('I') AND a.daysDiffOfInv >= 61 AND a.daysDiffOfInv <= 90    \n" +
                "									THEN a.totalOutstandingAmount ELSE 0 END)   \n" +
                "							ELSE NULL END) AS agedAmountAs61To90 ,  \n" +
                "						(CASE WHEN a.daysDiffOfInv IS NOT NULL THEN  \n" +
                "								SUM(CASE WHEN a.transType IN ('I') AND a.daysDiffOfInv >= 91 AND a.daysDiffOfInv <= 120    \n" +
                "									THEN a.totalOutstandingAmount ELSE 0 END)   \n" +
                "							ELSE NULL END) AS agedAmountAs91To120 ,	  \n" +
                "						(CASE WHEN a.daysDiffOfInv IS NOT NULL THEN    \n" +
                "								SUM(CASE WHEN a.transType IN ('I') AND a.daysDiffOfInv >= 121    \n" +
                "									THEN a.totalOutstandingAmount ELSE 0 END)  \n" +
                "							ELSE NULL END) AS agedAmountAs121More ,  \n" +
                "						(CASE WHEN '\",pRequestType,\"' = 'AR' THEN   \n" +
                "								SUM(CASE WHEN a.transType IN ('I') THEN 1 WHEN a.transType IN ('C') THEN NULL ELSE 0 END)  \n" +
                "							WHEN '\",pRequestType,\"' = 'PD' AND a.termsDays IS NOT NULL THEN		  \n" +
                "								SUM(CASE WHEN a.transType IN ('I') AND a.paymentDueDate <= '\",vDueDate,\"' THEN 1 WHEN a.transType IN ('C') THEN NULL ELSE 0 END)		  \n" +
                "							ELSE NULL END) AS totalInvCount		  \n" +
                "					  FROM (      \n" +
                "						SELECT cps.customerID, cps.invoiceDate,  \n" +
                "								mcm.paymentTermsID , gc.termsDays ,      \n" +
                "								cps.transType,        \n" +
                "								IFNULL(cps.totalAmount,0) as totalAmount,        \n" +
                "								(CASE WHEN cps.transType = 'I' THEN       \n" +
                "										get_totalCustomerInvoiceReceivedAmountById(cps.id)       \n" +
                "									ELSE 0 END) AS paidAmount,    \n" +
                "  \n" +
                "								(CASE WHEN cps.transType = 'I' THEN       \n" +
                "										IFNULL(cps.totalAmount,0) - IFNULL(get_totalCustomerInvoiceReceivedAmountById(cps.id),0)       \n" +
                "									ELSE IFNULL(cps.totalAmount,0) END) AS totalOutstandingAmount ,   \n" +
                "  \n" +
                "								(CASE WHEN gc.termsDays IS NOT NULL AND cps.transType = 'I' THEN  \n" +
                "											 DATE_ADD(cps.invoiceDate,  INTERVAL gc.termsDays DAY)  \n" +
                "									ELSE NULL END) AS paymentDueDate ,   \n" +
                "  \n" +
                "								(CASE WHEN '\",pRequestType,\"' = 'AR' THEN   \n" +
                "										(CASE WHEN cps.transType = 'I' THEN DATEDIFF('\",vDueDate,\"', cps.invoiceDate)  \n" +
                "											ELSE NULL END)   \n" +
                "								    WHEN '\",pRequestType,\"' = 'PD' AND gc.termsDays IS NOT NULL THEN		  \n" +
                "										(CASE WHEN cps.transType = 'I' THEN  \n" +
                "												DATEDIFF('\",vDueDate,\"', (DATE_ADD(cps.invoiceDate,  INTERVAL gc.termsDays DAY)))  \n" +
                "											ELSE NULL END)   \n" +
                "								    ELSE NULL END) AS daysDiffOfInv			       \n" +
                "  \n" +
                "							FROM customer_packingslip cps    \n" +
                "								JOIN mfgcodemst mcm ON cps.customerID = mcm.id AND mcm.isDeleted = 0  \n" +
                "									LEFT JOIN genericcategory gc ON mcm.paymentTermsID = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "							WHERE cps.transType IN ('I','C')      \n" +
                "							AND cps.subStatus IN (2,3)    \n" +
                "							AND (CASE WHEN \",pIsIncludeZeroValueInvoices,\" = 0 AND cps.transType = 'I' THEN cps.totalAmount > 0 ELSE 1=1 END)          \n" +
                "							AND cps.isDeleted = 0   \n" +
                "						 ) a     \n" +
                "					GROUP BY a.customerID        \n" +
                "  \n" +
                "					UNION       \n" +
                "  \n" +
                "					/* get advance payment entry records for which no any invoice added */    \n" +
                "					SELECT pip.mfgcodeID AS customerID,    \n" +
                "						gc.termsDays AS custCurrTermDays,  \n" +
                "						NULL daysDiffOfInv ,  \n" +
                "						0 AS totalCreditMemoAmount,        \n" +
                "						0 AS totalOutstandingAmount,        \n" +
                "						0 AS pastDueAmount ,      \n" +
                "						0 AS totalPaidAmount,    \n" +
                "						0 AS isAllInvPaid ,   \n" +
                "						0 AS agedAmountAs0To30,  \n" +
                "						0 AS agedAmountAs31To60,  \n" +
                "						0 AS agedAmountAs61To90,  \n" +
                "						0 AS agedAmountAs91To120,  \n" +
                "						0 AS agedAmountAs121More ,  \n" +
                "						NULL AS totalInvCount	      \n" +
                "					FROM packingslip_invoice_payment pip    \n" +
                "						JOIN mfgcodemst mcm ON pip.mfgcodeID = mcm.id AND mcm.isDeleted = 0  \n" +
                "							LEFT JOIN genericcategory gc ON mcm.paymentTermsID = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "					WHERE pip.refPaymentMode = 'R'      \n" +
                "					AND pip.mfgcodeID NOT IN (SELECT customerID FROM customer_packingslip       \n" +
                "									WHERE transType IN ('I','C')   \n" +
                "									AND subStatus IN (2,3)    \n" +
                "									AND (CASE WHEN \",pIsIncludeZeroValueInvoices,\" = 0 AND transType = 'I' THEN totalAmount > 0 ELSE 1=1 END)        									  \n" +
                "									AND isDeleted = 0)  \n" +
                "					AND pip.paymentAmount > 0				      \n" +
                "					AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0      \n" +
                "  \n" +
                "			) temp_InvPay	    \n" +
                "		) temp_greater_zero_amt    \n" +
                "		WHERE (ABS(temp_greater_zero_amt.totalCreditMemoAmount) > 0 OR 	    \n" +
                "			temp_greater_zero_amt.totalOutstandingAmount > 0 OR 	    \n" +
                "			temp_greater_zero_amt.totalAdjustmentPendingAmount > 0 OR     \n" +
                "			temp_greater_zero_amt.isAllInvPaid = 0) 	      \n" +
                "  \n" +
                "	\");        \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN        \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;        \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;        \n" +
                "	ELSE        \n" +
                "		SET rowNumWhere = '';        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY totalOutstandingAmount desc, customerCodeName asc\") ;        \n" +
                "	ELSE        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN        \n" +
                "		SET pWhereClause = '1=1' ;        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	/* to get total count of rows */        \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_balanceDue ,\" ) c where \", pWhereClause );        \n" +
                "	PREPARE query1 FROM @SQLStatement1;        \n" +
                "	EXECUTE query1;        \n" +
                "	DEALLOCATE PREPARE query1;        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"        \n" +
                "			SELECT 	c.*        \n" +
                "			FROM 	(\", @temp_balanceDue ,\" ) c        \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "	--  select @SQLStatement2 ;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;        \n" +
                "	EXECUTE query2;        \n" +
                "	DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->27-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4526,'2.00','V1',' customer payment sps - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4526:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_InvoicePaymentVoidAndReIssue` ;  \n" +
                "CREATE PROCEDURE `Sproc_InvoicePaymentVoidAndReIssue`(                 \n" +
                "	IN pSystemId VARCHAR(20),              \n" +
                "	IN pRefVoidPaymentId INT,                        \n" +
                "	IN pAccountReference VARCHAR(50),                        \n" +
                "	IN pPaymentType INT,                        \n" +
                "	IN pPaymentNumber VARCHAR(50),                        \n" +
                "	IN pBankAccountMasID INT,                        \n" +
                "	IN pBankAccountNo VARCHAR(50),                        \n" +
                "	IN pBankName VARCHAR(255),                        \n" +
                "	IN pPaymentDate DATE,                        \n" +
                "	IN pRemark VARCHAR(255),                        \n" +
                "	IN pPayToName VARCHAR(255),                        \n" +
                "	IN pPayToAddress VARCHAR(255),                        \n" +
                "	IN pVoidPaymentReason VARCHAR(255),            \n" +
                "	IN pRefPaymentModeOfInvPayment VARCHAR(2),                     \n" +
                "	IN pMfgcodeID INT,            \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,           \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2),                      \n" +
                "	IN pUserID INT,                        \n" +
                "	IN pRoleID INT                        \n" +
                ")  \n" +
                "BEGIN                          \n" +
                "	DECLARE vCount INT;                          \n" +
                "	DECLARE vCountExistsCheckNo INT;                          \n" +
                "	DECLARE vNewPaymentID INT;                          \n" +
                "	DECLARE vOldPaymentOrCheckNo VARCHAR(50);                          \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                            \n" +
                "BEGIN                            \n" +
                "	ROLLBACK;                            \n" +
                "	RESIGNAL;                            \n" +
                "END;                            \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                            \n" +
                "  BEGIN                            \n" +
                "	ROLLBACK;                            \n" +
                "	RESIGNAL;                            \n" +
                "END;                            \n" +
                "  \n" +
                "	/* pRefPaymentModeOfInvPayment >> P-Payable   R-Receivable */            \n" +
                "	SELECT 	COUNT(1)   INTO 	vCount                          \n" +
                "	FROM 	packingslip_invoice_payment                          \n" +
                "	WHERE 	id = pRefVoidPaymentId                          \n" +
                "	AND isPaymentVoided = 0                    \n" +
                "	AND refPaymentMode = pRefPaymentModeOfInvPayment ;                          \n" +
                "  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;	            \n" +
                "  \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'P') THEN            \n" +
                "		/*check duplicate check number validation*/                \n" +
                "		SELECT 	COUNT(1)  INTO 	vCountExistsCheckNo                        \n" +
                "		FROM 	packingslip_invoice_payment                        \n" +
                "		WHERE 	isdeleted = 0                        \n" +
                "		AND paymentNumber = pPaymentNumber                        \n" +
                "		AND bankAccountMasID = pBankAccountMasID            \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;                        \n" +
                "	 ELSEIF (pRefPaymentModeOfInvPayment = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN            \n" +
                "		/* check duplicate check number if confirmation not taken */              \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo                      \n" +
                "		FROM packingslip_invoice_payment                      \n" +
                "		WHERE refPaymentMode = pRefPaymentModeOfInvPayment             \n" +
                "		AND paymentNumber = pPaymentNumber                      \n" +
                "		AND mfgcodeID = pMfgcodeID             \n" +
                "		AND isdeleted = 0    ;            \n" +
                "	 END IF;               \n" +
                "  \n" +
                "  \n" +
                "	IF vCount = 1 AND vCountExistsCheckNo = 0 THEN                          \n" +
                "  \n" +
                "		UPDATE 	packingslip_invoice_payment                          \n" +
                "		SET 	voidPaymentReason = pVoidPaymentReason,                          \n" +
                "			isPaymentVoided = 1,                          \n" +
                "			updatedBy = pUserID,                          \n" +
                "			updateByRoleId = pRoleID,                        \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()                        \n" +
                "		WHERE 	id = pRefVoidPaymentId                          \n" +
                "		AND isDeleted = 0                    \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;           \n" +
                "  \n" +
                "  \n" +
                "		/*insert same records for new reissue payment transaction*/                \n" +
                "		INSERT INTO packingslip_invoice_payment                          \n" +
                "				(systemId, mfgcodeID, paymentNumber, paymentDate, paymentAmount, paymentType, accountReference, bankAccountMasID,                          \n" +
                "				bankAccountNo, bankName, payToName, payToAddress, remark, createdBy, createByRoleId,                          \n" +
                "				updatedBy, updateByRoleId, refVoidedPaymentNumber, refVoidedPaymentId, refPaymentMode,                  \n" +
                "				billToName, billToAddress, isZeroPayment, depositBatchNumber,           \n" +
                "				lockStatus)                          \n" +
                "		SELECT 	pSystemId, mfgcodeID, pPaymentNumber, pPaymentDate, paymentAmount, pPaymentType, pAccountReference, pBankAccountMasID,                          \n" +
                "				pBankAccountNo, pBankName, pPayToName, pPayToAddress, pRemark, pUserID, pRoleID,                          \n" +
                "				pUserID, pRoleID, paymentNumber, id, refPaymentMode,                  \n" +
                "				billToName, billToAddress, isZeroPayment, pDepositBatchNumber,          \n" +
                "				(CASE WHEN pRefPaymentModeOfInvPayment = 'R' THEN           \n" +
                "							(CASE WHEN lockStatus = 'LC' THEN 'RL' ELSE lockStatus END)   \n" +
                "					WHEN pRefPaymentModeOfInvPayment = 'P' THEN 'RL' 		         \n" +
                "					ELSE NULL END)                 \n" +
                "		FROM 	packingslip_invoice_payment                          \n" +
                "		WHERE 	id = pRefVoidPaymentId                          \n" +
                "		AND isDeleted = 0                    \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;                          \n" +
                "  \n" +
                "		SET vNewPaymentID = LAST_INSERT_ID();                          \n" +
                "  \n" +
                "		/*update payment void flag in detail table*/                \n" +
                "		UPDATE 	packingslip_invoice_payment_det                \n" +
                "		SET 	isPaymentVoided = 1,                \n" +
                "			updatedBy = pUserID,                \n" +
                "			updateByRoleId = pRoleID,                \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()                \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId                \n" +
                "		AND isDeleted = 0;                \n" +
                "  \n" +
                "		/*insert same records for new reissue payment detail transaction*/                \n" +
                "		INSERT INTO packingslip_invoice_payment_det                          \n" +
                "				(refPayementid, refPackingslipInvoiceID, createdBy, createByRoleId, updatedBy, updateByRoleId, paymentAmount,             \n" +
                "				isPaymentVoided, refCustPackingslipInvoiceID)                          \n" +
                "		SELECT 	vNewPaymentID, refPackingslipInvoiceID, pUserID, pRoleID,                           \n" +
                "			pUserID, pRoleID, paymentAmount,             \n" +
                "			FALSE, refCustPackingslipInvoiceID	              \n" +
                "		FROM 	packingslip_invoice_payment_det                          \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId                          \n" +
                "		AND isDeleted = 0;                \n" +
                "  \n" +
                "		SELECT vNewPaymentID refPayementid;                          \n" +
                "	ELSE                          \n" +
                "		IF vCountExistsCheckNo != 0 THEN                        \n" +
                "			SELECT 'DUPLICATE_CHECKNO' AS message;                        \n" +
                "		ELSEIF vCount = 0 THEN            \n" +
                "			IF (pRefPaymentModeOfInvPayment = 'R' AND (SELECT COUNT(1) FROM packingslip_invoice_payment WHERE id = pRefVoidPaymentId              \n" +
                "									AND isPaymentVoided = 1  AND refPaymentMode = pRefPaymentModeOfInvPayment) > 0) THEN            \n" +
                "				SELECT 'ALREADY_VOIDED' AS message;            \n" +
                "			ELSE            \n" +
                "				SELECT 'NOT_FOUND' AS message;              \n" +
                "			END IF;	               \n" +
                "		ELSE                        \n" +
                "			SELECT 'NOT_FOUND' AS message;                        \n" +
                "		END IF;                        \n" +
                "	END IF;                          \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->27-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4527,'2.00','V1',' Sproc_InvoicePaymentVoidAndReIssue - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4527:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-04-2021 *********************************** */
                "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(          \n" +
                "	IN pPageIndex INT,          \n" +
                "	IN pRecordPerPage INT,          \n" +
                "	IN pOrderBy VARCHAR(255),          \n" +
                "	IN pWhereClause VARCHAR(16383),          \n" +
                "	IN pReceiptType VARCHAR(10),          \n" +
                "	IN pMfgCodeIds LONGTEXT,          \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,          \n" +
                "	IN pDueDate DATE,          \n" +
                "	IN pAdditionalDays INT,          \n" +
                "	IN pTermsAndAboveDays INT,          \n" +
                "	IN pInvoiceNumber VARCHAR(50),    \n" +
                "	IN pIsExactSearch TINYINT,          \n" +
                "	IN pMfrPnId INT,          \n" +
                "    IN pInvoiceIds LONGTEXT,          \n" +
                "    IN pExactPaymentNumberSearch TINYINT,          \n" +
                "    IN pPaymentNumber VARCHAR(50),          \n" +
                "    IN pPaymentTermsIds LONGTEXT,          \n" +
                "    IN pInvoiceFromDate DATE,          \n" +
                "    IN pInvoiceToDate DATE          \n" +
                ")  \n" +
                "BEGIN          \n" +
                "	DECLARE pOffset INT;                          \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                          \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                          \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                          \n" +
                "    DECLARE vCurrentDate DATE;                          \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;                          \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;                          \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;                          \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"                              \n" +
                "			SELECT 		p.id,                            \n" +
                "					p.systemId,                        \n" +
                "					p.poNumber,                              \n" +
                "                    po.id poId,        \n" +
                "					p.mfgCodeID,                              \n" +
                "					p.supplierSONumber,                              \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,    \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,    \n" +
                "					p.packingSlipDate,                              \n" +
                "					p.invoiceNumber,                              \n" +
                "                    p.lockStatus invoiceLockStatus,    \n" +
                "					p.invoiceDate,                  \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,                  \n" +
                "					p.creditMemoNumber,    \n" +
                "                    p.lockStatus creditMemoLockStatus,    \n" +
                "					p.creditMemoDate,                              \n" +
                "					p.debitMemoNumber,                              \n" +
                "                    p.lockStatus debitMemoLockStatus,    \n" +
                "					p.debitMemoDate,                              \n" +
                "					p.receiptDate,                              \n" +
                "					p.description,                              \n" +
                "					p.billToAddress,                              \n" +
                "					p.shipToAddress,                              \n" +
                "					p.poVersion,                              \n" +
                "					p.isDeleted,                              \n" +
                "					p.receiptType,                              \n" +
                "					p.`status`,                              \n" +
                "					p.applyDate,                              \n" +
                "					p.refParentCreditDebitInvoiceno,                              \n" +
                "					p.refPackingSlipNumberForInvoice,                              \n" +
                "					p.invoiceTotalDue,                              \n" +
                "					p.isTariffInvoice,                                                \n" +
                "					p.creditMemoType,          \n" +
                "                    (          \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN          \n" +
                "								'Invoice Credit Memo'          \n" +
                "							WHEN p.creditMemoType = 'MC' THEN          \n" +
                "								'Manual Credit Memo'          \n" +
                "							WHEN p.creditMemoType = 'RC' THEN          \n" +
                "								'RMA Credit Memo'          \n" +
                "							WHEN p.creditMemoType = 'ID' THEN          \n" +
                "								'Invoice Debit Memo'          \n" +
                "							WHEN p.creditMemoType = 'MD' THEN          \n" +
                "								'Manual Debit Memo'          \n" +
                "						END          \n" +
                "					) creditMemoTypeValue,          \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,                                           \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,                                \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,                                \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,                                \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                                \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                                         \n" +
                "                    fun_getMfgNameByID(p.mfgCodeID) supplierName,          \n" +
                "					fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCode,            \n" +
                "					fun_getMfgCodeByID(p.mfgCodeID) supplierCodeName,                              \n" +
                "					(                                    \n" +
                "						SELECT 	IFNULL(g.cnt,0)                                  \n" +
                "						FROM 	vu_genericfilescount g                                     \n" +
                "						WHERE 	g.refTransID = p.id                                     \n" +
                "								AND                                   \n" +
                "								(                                  \n" +
                "									CASE                                   \n" +
                "										WHEN p.receiptType = 'C' THEN g.entityID = -15                                  \n" +
                "										WHEN p.receiptType = 'D' THEN g.entityID = -16                                    \n" +
                "										ELSE g.entityID = -13                                  \n" +
                "									END                                  \n" +
                "								)                           \n" +
                "					) invoiceDocCount,                                    \n" +
                "					(                                    \n" +
                "						SELECT 	IFNULL(g.cnt,0)                                     \n" +
                "						FROM 	vu_genericfilescount g                                     \n" +
                "						WHERE 	g.refTransID = psm.id                         \n" +
                "								AND g.entityID = -14                           \n" +
                "								AND g.gencFileOwnerType = 'packing_slip'                               \n" +
                "					) packingSlipDocCount,                                                     \n" +
                "					pd.itemReceived,                                                          \n" +
                "					pd.otherChargesItemReceived,                                                                \n" +
                "					pd.itemDisapproved,                              \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,                              \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,                              \n" +
                "					ps.status parentInvoiceStatus,                              \n" +
                "					ps.invoiceNumber refInvoiceNumber,    \n" +
                "                    ps.lockStatus refInvoiceLockStatus,    \n" +
                "					ps.creditMemoType parentCreditMemoType,                              \n" +
                "					pd.totalExtendedAmount,                \n" +
                "                    pd.totalDiscount,                \n" +
                "					pe.totalCreditAmount,                              \n" +
                "					pe.totalDebitAmount,                              \n" +
                "					(                              \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)                              \n" +
                "					) amountToPay,                              \n" +
                "					pd.packingDetailNote,                              \n" +
                "					pd.approveLineCount,                              \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN                                      \n" +
                "											p.debitMemoDate                                      \n" +
                "										WHEN p.receiptType = 'C' THEN                                      \n" +
                "											p.creditMemoDate                                      \n" +
                "										ELSE p.invoiceDate                                              \n" +
                "									end), g.termsDays, m.paymentTermsID) paymentDueDate,                              \n" +
                "					g.gencCategoryName paymentTermName,                              \n" +
                " 					m.paymentTermsID paymentTermsID,                              \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,                                                      \n" +
                "					psm.packingSlipModeStatus,                                              \n" +
                "					get_totalSupplierInvoicePaidAmountById(p.id) paidAmount,                                              \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,                                          \n" +
                "					p.invoiceRequireManagementApproval,                                          \n" +
                "					(                                          \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN                                          \n" +
                "								'Yes'                                          \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN                                          \n" +
                "								'No'                                          \n" +
                "						END                                          \n" +
                "					) invoiceRequireManagementApprovalValue,                                           \n" +
                "					p.invoiceApprovalStatus,                                          \n" +
                "					(                                          \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN                                          \n" +
                "								'Approved'                                          \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN                                          \n" +
                "								'Pending'                                          \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN                                          \n" +
                "								'N/A'                                          \n" +
                "						END                                          \n" +
                "					) invoiceApprovalStatusValue,                                          \n" +
                "					p.invoiceApprovedBy,                                          \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,                                          \n" +
                "					p.invoiceApprovalDate,                                          \n" +
                "					p.invoiceApprovalComment,    \n" +
                "					p.internalRemark,    \n" +
                "					p.lockStatus,    \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'    \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'    \n" +
                "						when p.lockStatus = 'LC' then 'Locked'    \n" +
                "						else null end    \n" +
                "					) lockStatusValue,    \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,    \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,    \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt    \n" +
                "			FROM packing_slip_material_receive p    \n" +
                "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID  \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0                              \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0                              \n" +
                "            LEFT JOIN 	purchase_order_mst po ON po.poNumber = p.poNumber AND po.isDeleted = 0          \n" +
                "			left join (                              \n" +
                "							select 	a.refPackingSlipMaterialRecID,                              \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,                              \n" +
                "								sum(a.itemReceived) itemReceived,                                                        \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,                              \n" +
                "								sum(a.itemDisapproved) itemDisapproved,                              \n" +
                "								sum(a.approveLineCount) approveLineCount,                              \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,                \n" +
                "                                sum(discount) totalDiscount                \n" +
                "							from 	(                                                        \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,                                                         \n" +
                "										psm.packingSlipSerialNumber,                                                         \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,                                            \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,      \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/      \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,      \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,      \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,                              \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,                              \n" +
                "										extendedPrice,                \n" +
                "                                        discount                \n" +
                "									FROM 	packing_slip_material_receive_det psm                              \n" +
                "									WHERE 	psm.isDeleted = 0                              \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)                              \n" +
                "								) a                                                                  \n" +
                "							group by a.refPackingSlipMaterialRecID                                                        \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id                                                                  \n" +
                "				left join (                                                        \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,                                                                   \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,                                              \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,                                              \n" +
                "    									sum(get_totalSupplierInvoicePaidAmountById(ps.id)) totalPaidDebitCreditAmount                                              \n" +
                "							from 		packing_slip_material_receive ps                                                                  \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID                                                                  \n" +
                "								  where ps.receiptType in ('C','D')                              \n" +
                "									and ps.isDeleted = 0                              \n" +
                "									and pd.isDeleted = 0                              \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno                              \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id                              \n" +
                "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",                              \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),                                  \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')\") ELSE \"\" END)                                                   \n" +
                "	);                                                              \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                          \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');                          \n" +
                "	END IF;                          \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN                          \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');                          \n" +
                "	END IF;                          \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN                          \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');                          \n" +
                "	END IF;                          \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN                          \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"                          \n" +
                "				and exists (select 1                          \n" +
                "							  from packingslip_invoice_payment pm                          \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id                          \n" +
                "							 where pm.isDeleted = 0                          \n" +
                "							   and pm.isPaymentVoided = 0                          \n" +
                "							   and pm.refPaymentMode = 'P'                          \n" +
                "							   and pd.refPackingslipInvoiceID = p.id                          \n" +
                "							   and pm.paymentNumber \",                          \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END                          \n" +
                "                               ,\") \");                          \n" +
                "    END IF;                          \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;                          \n" +
                "	ELSE                          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                          \n" +
                "	END IF;                          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                          \n" +
                "		SET pWhereClause = '1=1' ;                          \n" +
                "	END IF;                          \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                          \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                          \n" +
                "	END IF;                  \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN                  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'                   \n" +
                "												   or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");                  \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN                  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'                  \n" +
                "												   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");                  \n" +
                "    END IF;                  \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN                          \n" +
                "		IF pIsExactSearch = 1 THEN                          \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"                          \n" +
                "									AND (                          \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'                          \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'                          \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'                          \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'                          \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'                          \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'                          \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"                          \n" +
                "									  \" ) \"                          \n" +
                "						);                          \n" +
                "		ELSE                          \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"                          \n" +
                "									AND (                          \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'                          \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'                          \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'                          \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'                          \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'                          \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'                          \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"                          \n" +
                "									  \" ) \"                          \n" +
                "						);                          \n" +
                "		END IF;                          \n" +
                "	END IF;                          \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN                          \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (                          \n" +
                "				SELECT 1                          \n" +
                "				  FROM packing_slip_material_receive_det x                          \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0                          \n" +
                "			)                          \n" +
                "		\");                          \n" +
                "	END IF;                          \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                          \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;                          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                          \n" +
                "	ELSE                          \n" +
                "		SET rowNumWhere = '';                          \n" +
                "	END IF;                          \n" +
                "  \n" +
                "	/* to get total count of rows */                          \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );                          \n" +
                "    PREPARE query1 FROM @SQLStatement1;                          \n" +
                "    EXECUTE query1;                          \n" +
                "	DEALLOCATE PREPARE query1;                          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"                          \n" +
                "			SELECT 	c.*,                          \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,                          \n" +
                "				round(c.paidAmount,2) totalPaidAmount,                          \n" +
                "				round((c.totalExtendedAmount - c.paidAmount),2) paymentAmount,                          \n" +
                "				round((c.totalExtendedAmount - c.paidAmount),2) balanceToPayAmount,                                     \n" +
                "				round((c.totalPaidDebitCreditAmount+c.paidAmount),2) totalPaidAmountToDisableDelete                          \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c                          \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);                          \n" +
                "	PREPARE query2 FROM @SQLStatement2;                          \n" +
                "	EXECUTE query2;                          \n" +
                "	DEALLOCATE PREPARE query2;                          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->27-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4528,'2.00','V1','User Story 32955: Change Payment terms, due date calculation and related filters from Invoice to Supplier Master - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4528:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-04-2021 *********************************** */
                "drop procedure if exists `Sproc_Utility_UpdateOtherChargesForSupplierTransaction`;  \n" +
                "CREATE PROCEDURE `Sproc_Utility_UpdateOtherChargesForSupplierTransaction`(    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE v_finished INTEGER DEFAULT 0;     \n" +
                "    DECLARE v_OtherChargeName varchar(100) default null;    \n" +
                "    DECLARE v_OtherPartName varchar(100) default null;    \n" +
                "    DECLARE v_OtherChargeId INT;    \n" +
                "    DECLARE v_OtherPartId INT;    \n" +
                "  \n" +
                "	DECLARE cur_charge CURSOR FOR     \n" +
                "	select 'Assembly NRE' otherChargeName, 'ASSY NRE' otherPartName union all    \n" +
                "	select 'FAI Report Charge' otherChargeName, 'FAIR' otherPartName union all    \n" +
                "	select 'Freight & Shipping Charge' otherChargeName, 'FREIGHT (SHIPPING) CHARGE' otherPartName union all    \n" +
                "	select 'Misc Charge - Comment Required' otherChargeName, 'MISC CHARGE' otherPartName union all    \n" +
                "	select 'Misc Charge - Labels' otherChargeName, 'MISC CHARGE' otherPartName union all    \n" +
                "	select 'MISC ORDERED ITEM' otherChargeName, 'MISC CHARGE' otherPartName union all    \n" +
                "	select 'PCB NRE Charge' otherChargeName, 'PCB NRE' otherPartName union all    \n" +
                "	select 'Stencil Charge' otherChargeName, 'Stencil Charge' otherPartName union all    \n" +
                "	select 'Tooling Charge' otherChargeName, 'Tooling Charge' otherPartName;    \n" +
                "  \n" +
                "    DECLARE CONTINUE HANDLER       \n" +
                "        FOR NOT FOUND SET v_finished = 1;     \n" +
                "  \n" +
                "    OPEN cur_charge;    \n" +
                "    get_part: LOOP    \n" +
                "  \n" +
                "    FETCH cur_charge INTO v_OtherChargeName, v_OtherPartName;    \n" +
                "		IF v_finished = 1 THEN      \n" +
                "			LEAVE get_part;      \n" +
                "		END IF;      \n" +
                "  \n" +
                "	set v_OtherChargeId = null;    \n" +
                "	set v_OtherPartId = null;    \n" +
                "  \n" +
                "	select gencCategoryID into v_OtherChargeId    \n" +
                "	  from genericcategory a    \n" +
                "	 where categoryType = 'Charges Type'    \n" +
                "	   and gencCategoryName = v_OtherChargeName    \n" +
                "	   and isDeleted = 0;    \n" +
                "  \n" +
                "    select id into v_OtherPartId    \n" +
                "	  from component b    \n" +
                "	 where mfgPN = v_OtherPartName    \n" +
                "       and partType = 4/*Other Part Type*/    \n" +
                "       and isDeleted = 0;    \n" +
                "  \n" +
                "	IF v_OtherChargeId is not null and v_OtherPartId is not null THEN    \n" +
                "		update packing_slip_material_receive_det    \n" +
                "           set partID = v_OtherPartId    \n" +
                "         where refChargesTypeId = v_OtherChargeId;    \n" +
                "    END IF;    \n" +
                "  \n" +
                "    END LOOP get_part;    \n" +
                "  \n" +
                "    select count(1) NoOfChargesLines, 'Pending to Update data Please Check Detail' Message  \n" +
                "	  from packing_slip_material_receive_det  \n" +
                "	 where refChargesTypeId is not null  \n" +
                "	   and partID is null  \n" +
                "	having count(1) > 1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->28-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4529,'2.00','V1','updated other changes data updation SP - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4529:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-04-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_updatePurchaseOrderStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_updatePurchaseOrderStatus`(  \n" +
                "IN pPOID INT,  \n" +
                "IN pupdatedBy VARCHAR(100),  \n" +
                "IN pupdatedRoleID VARCHAR(100),  \n" +
                "IN pcompleteReason VARCHAR(1000),  \n" +
                "IN pcompleteType VARCHAR(20),  \n" +
                "IN pcancellationReason VARCHAR(1000),  \n" +
                "IN ptype VARCHAR(5)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  IF pcompleteReason IS NOT NULL THEN  \n" +
                "	UPDATE purchase_order_mst SET poWorkingStatus='C',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,poCompleteReason=pcompleteReason,poCompleteType=pcompleteType  WHERE id=pPOID;  \n" +
                "  \n" +
                "	UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='C',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID,poLineCompleteReason=IFNULL(poLineCompleteReason,pcompleteReason),poLineCompleteType=IFNULL(poLineCompleteType,pcompleteType) WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);  \n" +
                "  ELSEIF pcancellationReason IS NOT NULL THEN  \n" +
                "	IF ptype = 'C' THEN /* for cancellation po */  \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus='CA',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,cancleReason=pcancellationReason,poCompleteType=pcompleteType WHERE id=pPOID;  \n" +
                "  \n" +
                "		UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='CA',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);  \n" +
                "	ELSEIF ptype = 'R' THEN /* for revoke cancellation po */  \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus='P',poRevision='00',`status`=0,updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,cancleReason=pcancellationReason,poCompleteType=pcompleteType WHERE id=pPOID;  \n" +
                "  \n" +
                "		UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='P',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);  \n" +
                "	END IF;  \n" +
                "  END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->28-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4530,'2.00','V1',' User Story 32566: Implement Cancel Purchase order Option - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4530:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-04-2021 *********************************** */
                "delete from feature_user_mapping where featureID=(select featureID from feature_mst where featureName = 'Allow to Revoke PO');  \n" +
                "delete from feature_page_details where featureID=(select featureID from feature_mst where featureName = 'Allow to Revoke PO');  \n" +
                "delete from feature_role_mapping where featureID=(select featureID from feature_mst where featureName = 'Allow to Revoke PO');  \n" +
                "delete from feature_mst where featureName = 'Allow to Revoke PO';  \n" +
                "update feature_mst set featureName='Allow to Cancel PO / Undo Cancellation' where featureName='Allow to Cancel PO';  \n" +
                /* **************************** Add Script Version ->28-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4531,'2.00','V1',' User Story 32566: Implement Cancel Purchase order Option - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4531:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-04-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_mst`;  \n" +
                "CREATE TRIGGER `Trg_AU_purchase_order_mst` AFTER UPDATE ON `purchase_order_mst` FOR EACH ROW BEGIN                 \n" +
                "    IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN                \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                  \n" +
                "       VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO#',CAST(OLD.poNumber AS CHAR),                \n" +
                "       CAST(new.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "	END IF;                \n" +
                "    IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN            \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "    VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SO#',CAST(OLD.soNumber AS CHAR),                \n" +
                "       CAST(new.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "    END IF;                \n" +
                "    IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN                 \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "    VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Date',CAST(OLD.poDate AS CHAR),                \n" +
                "       CAST(new.poDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "    END IF;        \n" +
                "    IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN                 \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "    VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SO Date',CAST(OLD.soDate AS CHAR),                \n" +
                "       CAST(new.soDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "    END IF;                   \n" +
                "    IF IFNULL(OLD.supplierID,0) != IFNULL(NEW.supplierID,0) THEN                \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "    VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.supplierID) AS CHAR),                \n" +
                "       CAST(fun_getMfgCodeAndNameByPartID(new.supplierID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "    END IF;                \n" +
                "    IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN                \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "    VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Terms', CAST(fun_getGenericCategoryCodeNameByID(OLD.termsID) AS CHAR),                \n" +
                "       CAST(fun_getGenericCategoryCodeNameByID(new.termsID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "    END IF;                \n" +
                "    IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN                \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "    VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodID) AS CHAR),                \n" +
                "       CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "    END IF;               \n" +
                "    IF IFNULL(OLD.poRevision ,0) != IFNULL(NEW.poRevision ,0) THEN                \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "    VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Revision', CAST(OLD.poRevision AS CHAR),                \n" +
                "       CAST(new.poRevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "    END IF;                \n" +
                "    IF IFNULL(OLD.shippingComment ,0) != IFNULL(NEW.shippingComment ,0) THEN                \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "    VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Internal Notes', CAST(OLD.shippingComment AS CHAR),                \n" +
                "       CAST(new.shippingComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "    END IF;           \n" +
                "    IF IFNULL(OLD.poComment ,0) != IFNULL(NEW.poComment ,0) THEN                \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "    VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Comment', CAST(OLD.poComment AS CHAR),                \n" +
                "       CAST(new.poComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "    END IF;             \n" +
                "    IF IFNULL(OLD.status ,0) != IFNULL(NEW.status ,0) THEN                \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "    VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Status', CAST(CASE WHEN OLD.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR),                \n" +
                "       CAST(CASE WHEN NEW.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "    END IF;                \n" +
                "    IF IFNULL(OLD.carrierID ,0) != IFNULL(NEW.carrierID ,0) THEN                \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "     VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR),                \n" +
                "       CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "    END IF;                \n" +
                "    IF IFNULL(OLD.carrierAccountNumber ,0) != IFNULL(NEW.carrierAccountNumber ,0) THEN                \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "     VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR),                \n" +
                "       CAST(new.carrierAccountNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "    END IF;                \n" +
                "    IF IFNULL(OLD.isDeleted ,0) != IFNULL(NEW.isDeleted ,0) THEN                \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "     VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'DELETE', CAST(CASE WHEN OLD.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR),                \n" +
                "       CAST(CASE WHEN NEW.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "    END IF;        \n" +
                "    IF IFNULL(OLD.isBlanketPO ,0) != IFNULL(NEW.isBlanketPO ,0) THEN                \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "     VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Blanket PO', CAST(CASE WHEN OLD.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR),                \n" +
                "       CAST(CASE WHEN NEW.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "    END IF;         \n" +
                "    IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN                \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "     VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Shipping with Insurance', CAST(CASE WHEN OLD.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR),                \n" +
                "       CAST(CASE WHEN NEW.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "    END IF;         \n" +
                "    IF IFNULL(OLD.supplierAddress ,0) != IFNULL(NEW.supplierAddress ,0) THEN                \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "     VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Supplier Address', CAST(OLD.supplierAddress AS CHAR),                \n" +
                "       CAST(NEW.supplierAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "    END IF;            \n" +
                "    IF IFNULL(OLD.shippingAddress ,0) != IFNULL(NEW.shippingAddress ,0) THEN                \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "     VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Bill To / Ship To', CAST(OLD.shippingAddress AS CHAR),                \n" +
                "       CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "    END IF;         \n" +
                "    IF IFNULL(OLD.intermediateAddress ,0) != IFNULL(NEW.intermediateAddress ,0) THEN                \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "     VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Mark For', CAST(OLD.intermediateAddress AS CHAR),                \n" +
                "       CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "    END IF;         \n" +
                "    IF IFNULL(OLD.freeOnBoardID ,0) != IFNULL(NEW.freeOnBoardID ,0) THEN                \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "     VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'FOB', CAST(fun_getFOBById(OLD.freeOnBoardID) AS CHAR),                \n" +
                "       CAST(fun_getFOBById(NEW.freeOnBoardID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "    END IF;     \n" +
                "    IF IFNULL(OLD.poWorkingStatus ,0) != IFNULL(NEW.poWorkingStatus ,0) THEN       \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)                \n" +
                "     VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Working Status', CAST(CASE WHEN IFNULL(OLD.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN OLD.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END  AS CHAR),                \n" +
                "       CAST(CASE WHEN IFNULL(NEW.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN NEW.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);                \n" +
                "    END IF;     \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->28-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4532,'2.00','V1',' User Story 32566: Implement Cancel Purchase order Option - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4532:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-04-2021 *********************************** */
                "INSERT INTO page_detail (pageName, RO, RW, menuRoute, pageRoute, pageURL, menuName, parentPageRoute, parentPageID, hasChild, orderBy, tabLevel, iconClass, isActive, createdBy, isDisplay, displayMenuName)  \n" +
                "VALUES ('Peripheral', '0', '0', 'setting.peripheral', NULL, NULL, 'Peripheral', NULL, NULL, '1', '36.00000000', NULL, 'mdi-video', '1', '1','0', 'Peripheral');  \n" +

                "SELECT pageid INTO @pageid FROM page_detail WHERE pageName='Admin';  \n" +
                "UPDATE page_detail SET parentPageID=@pageid WHERE pageName='Peripheral';  \n" +

                "SELECT pageid INTO @pageid FROM page_detail WHERE pageName='Peripheral';  \n" +
                "UPDATE page_detail SET parentPageID=@pageid , menuRoute = 'setting.peripheral.cameralist' WHERE pageName='Camera List';  \n" +

                "SELECT pageid INTO @pageid FROM page_detail WHERE pageName='Peripheral';  \n" +
                "UPDATE page_detail SET parentPageID=@pageid , menuRoute = 'setting.peripheral.picturestation' WHERE pageName='Picture Station';  \n" +

                "SELECT pageid INTO @pageid FROM page_detail WHERE pageName='Peripheral';  \n" +
                "UPDATE page_detail SET parentPageID=@pageid , menuRoute = 'setting.peripheral.printerlist' WHERE pageName='Printer';  \n" +

                "SELECT pageid INTO @pageid FROM page_detail WHERE pageName='Peripheral';  \n" +
                "UPDATE page_detail SET parentPageID=@pageid , menuRoute = 'setting.peripheral.scannerlist' WHERE pageName='Scanner';  \n" +

                /* **************************** New Script -> 28-04-2021 *********************************** */
                "INSERT INTO page_detail (pageName, RO, RW, menuRoute, pageRoute, pageURL, menuName, parentPageRoute, parentPageID, hasChild, orderBy, tabLevel, iconClass, isActive, createdBy, isDisplay, displayMenuName)  \n" +
                "VALUES ('Logistics', '0', '0', 'setting.logistics', NULL, NULL, 'Logistics', NULL, NULL, '1', '37.00000000', NULL, 'mdi mdi-forklift', '1', '1','0', 'Logistics');  \n" +

                "SELECT pageid INTO @pageid FROM page_detail WHERE pageName='Admin';  \n" +
                "UPDATE page_detail SET parentPageID=@pageid WHERE pageName='Logistics';  \n" +

                "SELECT pageid INTO @pageid FROM page_detail WHERE pageName='Logistics';  \n" +
                "UPDATE page_detail SET parentPageID=@pageid , menuRoute = 'setting.logistics.carriermst' WHERE pageName='Carriers';  \n" +

                "SELECT pageid INTO @pageid FROM page_detail WHERE pageName='Logistics';  \n" +
                "UPDATE page_detail SET parentPageID=@pageid , menuRoute = 'setting.logistics.shippingtype' WHERE pageName='Shipping Type';  \n" +

                /* **************************** New Script -> 28-04-2021 *********************************** */
                "SELECT pageid INTO @pageid FROM page_detail WHERE pageName='Accounting';  \n" +
                "UPDATE page_detail SET parentPageID=@pageid , menuRoute = 'setting.accounting.paymentmethods' WHERE pageName='Payment Methods';  \n" +

                "SELECT pageid INTO @pageid FROM page_detail WHERE pageName='Accounting';  \n" +
                "UPDATE page_detail SET parentPageID=@pageid , menuRoute = 'setting.accounting.bank' WHERE pageName='Bank Account';  \n" +

                "SELECT pageid INTO @pageid FROM page_detail WHERE pageName='Accounting';  \n" +
                "UPDATE page_detail SET parentPageID=@pageid , menuRoute = 'setting.accounting.chargestype' WHERE pageName='Charges Type';  \n" +

                /* **************************** New Script -> 28-04-2021 *********************************** */

                "SELECT pageid INTO @pageid FROM page_detail WHERE pageName='Communication';  \n" +
                "UPDATE page_detail SET parentPageID=@pageid , menuRoute = 'setting.system.communication.notificationcategory' WHERE pageName='Notification Category';  \n" +

                "SELECT pageid INTO @pageid FROM page_detail WHERE pageName='Communication';  \n" +
                "UPDATE page_detail SET parentPageID=@pageid , menuRoute = 'setting.system.communication.partrequirementcategory' , menuName = 'Requirement Category' , displayMenuName = 'Requirement Category' WHERE pageName='Part Requirement Category';  \n" +

                /* **************************** New Script -> 28-04-2021 *********************************** */

                "INSERT INTO page_detail (pageName, RO, RW, menuRoute, pageRoute, pageURL, menuName, parentPageRoute, parentPageID, hasChild, orderBy, tabLevel, iconClass, isActive, createdBy, isDisplay, displayMenuName)  \n" +
                "VALUES ('SupplierMenu', '0', '0', 'setting.suppliers', NULL, NULL, 'Supplier', NULL, NULL, '1', '26.00000000', NULL, 'icon-account-switch', '1', '1','0', 'Supplier');  \n" +

                "SELECT pageid INTO @pageid FROM page_detail WHERE pageName='Admin';  \n" +
                "UPDATE page_detail SET parentPageID=@pageid WHERE pageName='SupplierMenu';  \n" +

                "SELECT pageid INTO @pageid FROM page_detail WHERE pageName='SupplierMenu';  \n" +
                "UPDATE page_detail SET parentPageID=@pageid , menuRoute = 'setting.suppliers.suppliermenu', orderBy = '1.00000000' WHERE pageName='Supplier';  \n" +

                "SELECT pageid INTO @pageid FROM page_detail WHERE pageName='SupplierMenu';  \n" +
                "UPDATE page_detail SET parentPageID=@pageid , menuRoute = 'setting.suppliers.supplierattributetemplate' WHERE pageName='Supplier Attributes Template';  \n" +

                /* **************************** New Script -> 28-04-2021 *********************************** */

                "SELECT pageid INTO @pageid FROM page_detail WHERE pageName='Configuration';  \n" +
                "UPDATE page_detail SET parentPageID=@pageid , menuRoute = 'setting.system.homemenucategory' WHERE pageName='Home Menu Category';  \n" +

                "UPDATE page_detail SET menuName = 'Requirement & Comments' , displayMenuName = 'Requirement & Comments'  WHERE pageName='Part Requirement(s)';  \n" +
                "UPDATE page_detail SET menuName = 'Initial Stock List' , displayMenuName = 'Initial Stock List'  WHERE pageName='Opening Part Balance';  \n" +

                /* **************************** Add Script Version ->28-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4533,'2.00','V1','Menu Rearrangement - Heena'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4533:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-04-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitAllocationLineItemsForExport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitAllocationLineItemsForExport`(        \n" +
                "IN pPartID INT,        \n" +
                "IN pRefSalesOrderDetID INT,               \n" +
                "IN pIsConsolidated TINYINT,        \n" +
                "IN pKitQty INT,        \n" +
                "IN pCustomerId INT   \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	IF (pIsConsolidated = 0) THEN        \n" +
                "		SELECT * FROM        \n" +
                "			(SELECT  z.id AS id,	 z.refSalesOrderDetID,	 z.mfgPNID,	 z.partid,	 z.lineID AS _lineID,	z.cust_lineID,	        \n" +
                "					(CASE        \n" +
                "						WHEN z.custPNID IS NULL THEN NULL        \n" +
                "						ELSE FUN_GETMFGPNBYID(z.custPNID)        \n" +
                "					END) custPN, z.restrictUseInBOMExcludingAliasStep,  z.restrictUseInBOMExcludingAliasWithPermissionStep, z.restrictUseInBOMStep, z.restrictUseInBOMWithPermissionStep,       \n" +
                "					z.isGoodPart, z.restrictPackagingUsePermanently, z.restrictPackagingUseWithpermission, z.restrictUsePermanently, z.restrictUSEwithpermission,        \n" +
                "					z.customerRev,	 z.customerDescription,	 z.qpa,	 z.refDesig,	FUN_GETUOMBYID(z.uomID) AS uom,        \n" +
                "					(CASE        \n" +
                "						WHEN z.isInstall = 1 THEN 'TRUE'        \n" +
                "						ELSE 'FALSE'        \n" +
                "					END) AS isInstall,        \n" +
                "					(CASE        \n" +
                "						WHEN z.isPurchase = 1 THEN 'TRUE'        \n" +
                "						ELSE 'FALSE'        \n" +
                "					END) AS isPurchase,        \n" +
                "					z.numOfRows,	z.numOfPosition,	z.dnpQty,	z.dnpDesig,        \n" +
                "					(CASE        \n" +
                "						WHEN z.substitutesAllow = 3 THEN 'Yes with Customer Approval'        \n" +
                "						WHEN z.substitutesAllow = 2 THEN 'No'        \n" +
                "						ELSE ''        \n" +
                "					END) AS substitutesAllow,        \n" +
                "					(CASE        \n" +
                "						WHEN z.isBuyDNPQty = 'Y' THEN 'YES'        \n" +
                "						WHEN z.isBuyDNPQty = 'C' THEN 'Customer Consigned'        \n" +
                "						WHEN z.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'        \n" +
                "						ELSE 'NO'        \n" +
                "					END) AS isBuyDNPQty,        \n" +
                "					(CASE        \n" +
                "						WHEN z.programingStatus = 1 THEN 'Pre-Assy'        \n" +
                "						WHEN z.programingStatus = 2 THEN 'Post-Assy'        \n" +
                "						WHEN z.programingStatus = 3 THEN 'Cust will program'        \n" +
                "						WHEN z.programingStatus = 4 THEN 'Pre-Programmed'        \n" +
                "						ELSE 'N/A'        \n" +
                "					END) AS programingStatus,        \n" +
                "					FUN_GETMFGCODEBYID(z.mfgCodeID) AS mfgCode,		z.mfgPN,	z.customerPartDesc,	z.description AS description,        \n" +
                "					z.allocatedQty,		z.allocatedUnit,	z.allocatedPins,        \n" +
                "					(CASE        \n" +
                "						WHEN z.uomMismatchedStep = 0 THEN 0        \n" +
                "						ELSE (z.qpa * IFNULL(pKitQty, 0))        \n" +
                "					END) requiredQtyBuild,        \n" +
                "					(CASE        \n" +
                "						WHEN        \n" +
                "							(z.uomMismatchedStep = 0        \n" +
                "								OR z.connecterTypeID != - 2)        \n" +
                "						THEN        \n" +
                "							0        \n" +
                "						ELSE (z.qpa * IFNULL(pKitQty, 0) * IFNULL(z.numOfPosition, 0))        \n" +
                "					END) requirePinsBuild,        \n" +
                "					(CASE        \n" +
                "						WHEN        \n" +
                "							z.uomMismatchedStep = 0        \n" +
                "								OR z.isNotRequiredKitAllocation = 1        \n" +
                "						THEN        \n" +
                "							0        \n" +
                "						ELSE CASE        \n" +
                "							WHEN        \n" +
                "								z.connecterTypeID = - 2        \n" +
                "							THEN        \n" +
                "								CASE        \n" +
                "									WHEN (((IFNULL(z.qpa, 0) * pKitQty * IFNULL(z.numOfPosition, 0)) - (z.allocatedPins + z.consumePin)) < 0) THEN 0        \n" +
                "									ELSE ((IFNULL(z.qpa, 0) * pKitQty * IFNULL(z.numOfPosition, 0)) - (z.allocatedPins + + z.consumePin))        \n" +
                "								END        \n" +
                "							ELSE CASE        \n" +
                "								WHEN (((IFNULL(z.qpa, 0) * pKitQty) - (z.allocatedUnit + z.consumeUnits)) < 0) THEN 0        \n" +
                "								ELSE ((IFNULL(z.qpa, 0) * pKitQty) - (z.allocatedUnit + z.consumeUnits))        \n" +
                "							END        \n" +
                "						END        \n" +
                "					END) shortagePerBuild,        \n" +
                "					SUM(IFNULL(FUN_CONVERTUOM(d.uom, z.uomID, IF(d.customerConsign = 0, IFNULL(d.availableStock, 0), 0)), 0)) availabelStock,        \n" +
                "					SUM(IFNULL(FUN_CONVERTUOM(d.uom, z.uomID, IF(d.customerConsign = 1        \n" +
                "						AND d.customerID = pCustomerId, IFNULL(d.availableStock, 0), 0)), 0)) availabelStockCustomerConsign  \n" +
                "			FROM        \n" +
                "				(SELECT l.id AS id,		l.refSalesOrderDetID,	al.id AS rfqLineItemsAlternateID,	l.partID AS partid,		l.lineID,        \n" +
                "					l.cust_lineID,		l.custPN,		l.custPNID,		l.customerRev,	l.customerDescription,	l.refDesig,		l.numOfPosition,        \n" +
                "					l.programingStatus,		l.substitutesAllow,		IFNULL(d.mfgPN, c.mfgPN) AS mfgPN,	l.uomID,  IFNULL(d.isGoodPart, c.isGoodPart) isGoodPart,         \n" +
                "					IFNULL(d.restrictPackagingUseWithpermission, c.restrictPackagingUseWithpermission) restrictPackagingUseWithpermission,          \n" +
                "					IFNULL(d.restrictPackagingUsePermanently, c.restrictPackagingUsePermanently) restrictPackagingUsePermanently, 	    \n" +
                "                    al.restrictUseInBOMExcludingAliasStep,  al.restrictUseInBOMExcludingAliasWithPermissionStep, al.restrictUseInBOMStep, al.restrictUseInBOMWithPermissionStep,    \n" +
                "					IFNULL(d.restrictUsePermanently, c.restrictUsePermanently) restrictUsePermanently, IFNULL(d.restrictUSEwithpermission, c.restrictUSEwithpermission) restrictUSEwithpermission,        \n" +
                "					CONCAT(l.description, '  ', al.description) AS description,		l.isInstall,	l.isPurchase,	l.dnpQty,	l.dnpDesig,        \n" +
                "					l.isBuyDNPQty,		l.numOfRows,	al.uomMismatchedStep,	l.customerPartDesc,		l.isNotRequiredKitAllocation,        \n" +
                "					IFNULL(d.id, c.id) AS mfgPNID,	IFNULL(d.mfgcodeID, c.mfgcodeID) AS mfgCodeID,	IFNULL(d.uom, c.uom) AS uom, c.connecterTypeID,        \n" +
                "					IFNULL(d.noOfRows, c.noOfRows) AS noOfRows,		IFNULL(ka.allocatedQty, 0) allocatedQty,	IFNULL(ka.allocatedUnit, 0) allocatedUnit,        \n" +
                "					IFNULL(ka.allocatedPins, 0) allocatedPins,	IFNULL(ka.consumePin, 0) consumePin,	IFNULL(ka.consumeUnits, 0) consumeUnits,	IFNULL(ka.consumeQty, 0) consumeQty,        \n" +
                "					(CASE        \n" +
                "						WHEN        \n" +
                "							l.isPurchase = 1 OR l.isInstall = 1        \n" +
                "						THEN        \n" +
                "							(IFNULL(l.qpa, 0) + IF(l.isBuyDNPQty = 'Y'        \n" +
                "								OR l.isBuyDNPQty = 'P'        \n" +
                "								OR l.isBuyDNPQty = 'C', IFNULL(l.dnpQty, 0), 0))        \n" +
                "						ELSE (IF(l.isBuyDNPQty = 'Y'        \n" +
                "							OR l.isBuyDNPQty = 'P'        \n" +
                "							OR l.isBuyDNPQty = 'C', IFNULL(l.dnpQty, 0), 0))        \n" +
                "					END) AS qpa        \n" +
                "			FROM        \n" +
                "				kit_allocation_lineitems l        \n" +
                "			JOIN kit_allocation_lineitems_alternatepart al ON l.id = al.refKitAllocationLineItemId AND l.isDeleted = 0 AND al.isDeleted = 0 AND al.mfgPNID IS NOT NULL        \n" +
                "			JOIN component c ON al.mfgPNID = c.id        \n" +
                "			LEFT JOIN component d ON c.packaginggroupID = d.packaginggroupID        \n" +
                "			LEFT OUTER JOIN vu_kit_allocation_summary ka ON al.refSalesOrderDetID = ka.refSalesOrderDetID        \n" +
                "				AND al.partID = ka.assyID        \n" +
                "				AND al.refRfqLineitem = ka.refBOMLineID        \n" +
                "				AND NOT EXISTS( SELECT  1 FROM        \n" +
                "					kit_allocation_lineitems_alternatepart `x`        \n" +
                "				WHERE x.refRfqLineitem = al.refRfqLineitem AND x.mfgPNID = d.id AND d.id <> c.id AND x.isDeleted = 0)        \n" +
                "			WHERE        \n" +
                "				l.partID = pPartID        \n" +
                "					AND l.refSalesOrderDetID = pRefSalesOrderDetID) z        \n" +
                "            LEFT JOIN vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNID) ELSE mfgPNID END))        \n" +
                "			GROUP BY z.id , z.rfqLineItemsAlternateID , z.refSalesOrderDetID , z.mfgPNID , z.partid , z.lineID , z.cust_lineID , z.custPN , z.customerRev ,        \n" +
                "					z.isGoodPart, z.restrictPackagingUsePermanently, z.restrictPackagingUseWithpermission, z.restrictUsePermanently, z.restrictUSEwithpermission,    \n" +
                "					z.restrictUseInBOMExcludingAliasStep,  z.restrictUseInBOMExcludingAliasWithPermissionStep, z.restrictUseInBOMStep, z.restrictUseInBOMWithPermissionStep,    \n" +
                "					z.customerDescription , z.qpa , z.refDesig , z.uomID , z.isInstall , z.isPurchase , z.numOfRows , z.customerPartDesc , z.numOfPosition ,         \n" +
                "					z.isNotRequiredKitAllocation , z.dnpQty , z.dnpDesig , z.isBuyDNPQty , z.programingStatus , z.substitutesAllow,         \n" +
                "					z.mfgCodeID , z.mfgPN , z.noOfRows , z.mfgPNID , z.description) a;        \n" +
                "	ELSE        \n" +
                "  \n" +
                "        # Create Temp Table to Get partID from bifurcate consolidated MFR IDs - consolidatedMfgPNIDs        \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_consolidate_Line_alternateparts;                                                                      \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_consolidate_Line_alternateparts AS        \n" +
                "		SELECT  id, refSalesOrderDetid, rfqLineItemsId, consolidatedLineItemIDs,isAssembly,isDeleted,        \n" +
                "		SUBSTRING_INDEX(SUBSTRING_INDEX(a.consolidatedMfgPNIDs, ',', numbers.n), ',', -1) partid        \n" +
                "			FROM (select 1 n union all        \n" +
                "				  select 2 union all         \n" +
                "				  select 3 union all        \n" +
                "				  select 4 union all         \n" +
                "				  select 5 union all        \n" +
                "				  select 6 union all        \n" +
                "				  select 7 union all        \n" +
                "				  select 8 union all        \n" +
                "				  select 9 union all        \n" +
                "				  select 10 union all        \n" +
                "				  select 11 union all        \n" +
                "				  select 12 union all         \n" +
                "				  select 13 union all        \n" +
                "				  select 14 union all         \n" +
                "				  select 15 union all        \n" +
                "				  select 16 union all        \n" +
                "				  select 17 union all        \n" +
                "				  select 18 union all        \n" +
                "				  select 19 union all        \n" +
                "				  select 20 union all        \n" +
                "				  select 21 union all        \n" +
                "				  select 22 union all         \n" +
                "				  select 23 union all        \n" +
                "				  select 24 union all         \n" +
                "				  select 25        \n" +
                "				  ) numbers INNER JOIN  kit_allocation_consolidate_line_detail a         \n" +
                "			   on CHAR_LENGTH(a.consolidatedMfgPNIDs)        \n" +
                "				 -CHAR_LENGTH(REPLACE(a.consolidatedMfgPNIDs, ',', ''))>=numbers.n-1        \n" +
                "			 WHERE refsalesorderdetid = pRefSalesOrderDetID AND isAssembly = 0 AND isDeleted = 0        \n" +
                "			 ORDER BY id, n;        \n" +
                "  \n" +
                "			SELECT * FROM        \n" +
                "				(SELECT c.id,	 refSalesOrderDetID,	partid,		_lineID,	        \n" +
                "						FUN_GETMFGCODEBYPARTID(partid) AS mfgCode,	FUN_GETMFGPNBYID(partid) AS mfgPN,        \n" +
                "						custPNID,	qpa,	consolidatedQPA,	dnpQPA,		isInstall,	        \n" +
                "						isGoodPart, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, restrictUsePermanently, restrictUSEwithpermission,	        \n" +
                "						FUN_GETUNITNAMEBYID(uomID) uom,		FUN_GETPARTTYPENAMEBYID(parttypeID) partTypeName,	FUN_GETMOUNTINGTYPENAMEBYID(mountingTypeID) mountingTypeName,        \n" +
                "						numOfPosition,		requiredQtyBuild,		requirePinsBuild,	allocatedQty,	 c.allocatedUnit,	consumeUnits,        \n" +
                "						consumeQty,		consumePin,		allocatedPins,		scrapedPins,	notRequiredKitAllocationReason,        \n" +
                "						(CASE        \n" +
                "							WHEN custPNID IS NULL THEN NULL        \n" +
                "							ELSE FUN_GETMFGPNBYID(custPNID)        \n" +
                "						END) custPN,        \n" +
                "						(CASE        \n" +
                "							WHEN isNotRequiredKitAllocation = 1 THEN 'Yes'        \n" +
                "							ELSE 'No'        \n" +
                "						END) AS isNotRequiredKitAllocationValue,        \n" +
                "						(CASE        \n" +
                "							WHEN        \n" +
                "								uomMismatchedStep = 0        \n" +
                "									OR isNotRequiredKitAllocation = 1        \n" +
                "							THEN        \n" +
                "								0        \n" +
                "							ELSE CASE        \n" +
                "								WHEN        \n" +
                "									c.connecterTypeID = - 2        \n" +
                "								THEN        \n" +
                "									CASE        \n" +
                "										WHEN (((IFNULL(c.qpa, 0) * pKitQty * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0        \n" +
                "										ELSE ((IFNULL(c.qpa, 0) * pKitQty * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin))        \n" +
                "									END        \n" +
                "								ELSE CASE        \n" +
                "									WHEN (((IFNULL(c.qpa, 0) * pKitQty) - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0        \n" +
                "									ELSE ((IFNULL(c.qpa, 0) * pKitQty) - (c.allocatedUnit + c.consumeUnits))        \n" +
                "								END        \n" +
                "							END        \n" +
                "						END) shortagePerBuild        \n" +
                "				FROM        \n" +
                "					(SELECT      a.id,		a.lineId AS _lineID,	a.refSalesOrderDetId refSalesOrderDetID,	b.partid,        \n" +
                "							a.rfqLineItemsId,		a.consolidatedpartlineID,	a.consolidateRestrictPartDetail,	a.ConsolidatedLineItemIDs,        \n" +
                "							a.custPNID,		a.isNotRequiredKitAllocation,		a.notRequiredKitAllocationReason,	 a.uomMismatchedStep,        \n" +
                "							a.consolidatedMfgPNIDs mfgPart,		IFNULL(a.kitQPAWithDNP, 0) qpa,		IFNULL(a.kitQPAWithDNP, 0) consolidatedQPA,        \n" +
                "							IFNULL(a.kitDNPWithoutQPA, 0) dnpQPA,	a.uomID,	a.isInstall,	a.connecterTypeID,	 a.partType parttypeID,        \n" +
                "							a.mountingTypeID,	a.numOfPosition,        \n" +
                "							b.isGoodPart, b.restrictPackagingUsePermanently, b.restrictPackagingUseWithpermission, b.restrictUsePermanently, b.restrictUSEwithpermission,        \n" +
                "							(CASE        \n" +
                "								WHEN a.uomMismatchedStep = 0 THEN 0        \n" +
                "								ELSE (IFNULL(a.kitQPAWithDNP, 0) * pKitQty)        \n" +
                "							END) AS requiredQtyBuild,        \n" +
                "							(CASE        \n" +
                "							WHEN        \n" +
                "								(a.uomMismatchedStep = 1        \n" +
                "									AND a.connecterTypeID = - 2)        \n" +
                "							THEN        \n" +
                "								((IFNULL(a.kitQPAWithDNP, 0) * pKitQty) * IFNULL(a.numOfPosition, 0))        \n" +
                "							ELSE 0        \n" +
                "						END) AS requirePinsBuild,        \n" +
                "						IFNULL(b.allocatedQty, 0) allocatedQty,		IFNULL(b.allocatedUnit, 0) allocatedUnit,	IFNULL(b.consumeUnits, 0) consumeUnits,        \n" +
                "						IFNULL(b.consumeQty, 0) consumeQty,		IFNULL(b.allocatedPins, 0) allocatedPins,	IFNULL(b.consumePin, 0) consumePin,		IFNULL(b.scrapedPins, 0) scrapedPins        \n" +
                "				FROM        \n" +
                "					kit_allocation_consolidate_Line_detail a        \n" +
                "				INNER JOIN (SELECT  a.refSalesOrderDetid,	a.rfqLineItemsId,	a.consolidatedLineItemIDs,	a.partid,        \n" +
                "						c.isGoodPart, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.restrictUsePermanently, c.restrictUSEwithpermission,        \n" +
                "                        SUM(b.allocatedQty) allocatedQty,	SUM(b.allocatedunit) allocatedUnit,	SUM(b.AllocatedPins) allocatedPins,        \n" +
                "						SUM(b.ConsumeQty) consumeQty,	SUM(b.ConsumeUnits) consumeUnits,	SUM(b.consumePin) consumePin,	SUM(b.scrapedPins) scrapedPins        \n" +
                "				FROM        \n" +
                "					temp_consolidate_Line_alternateparts a        \n" +
                "				JOIN component c ON a.partid = c.id        \n" +
                "				LEFT JOIN vu_kit_allocation_summary b ON a.refsalesORderDetid = b.refsalesOrderDetId        \n" +
                "					AND FIND_IN_SET(b.refBOMLineID, a.consolidatedLineItemIDs)        \n" +
                "				GROUP BY a.refSalesOrderDetid , a.rfqLineItemsId , a.partid) b ON a.refSalesOrderDetId = b.refSalesOrderDetId        \n" +
                "					AND a.rfqLineItemsId = b.rfqLineItemsId        \n" +
                "					AND a.consolidatedLineItemIDs = b.consolidatedLineItemIDs        \n" +
                "				WHERE a.refSalesOrderDetID = pRefSalesOrderDetID AND a.isAssembly = 0 AND a.isDeleted = 0) AS c        \n" +
                "				LEFT JOIN vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, mfgPart)        \n" +
                "				GROUP BY c.id , _lineID , refSalesOrderDetID , custPNID , isNotRequiredKitAllocation , uomMismatchedStep , qpa ,         \n" +
                "						consolidatedQPA , dnpQPA , uomID , isInstall , c.connecterTypeID , parttypeID , mountingTypeID , numOfPosition ,        \n" +
                "						isGoodPart, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, restrictUsePermanently, restrictUSEwithpermission,         \n" +
                "						notRequiredKitAllocationReason,	requiredQtyBuild , requirePinsBuild , allocatedQty , allocatedUnit , consumeUnits , consumeQty , allocatedPins , scrapedPins , c.partid         \n" +
                "				order by _lineID) AS mainQuery; 				        \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_consolidate_Line_alternateparts;         \n" +
                "    END IF;        \n" +
                "END;  \n" +
                /* **************************** New Script -> 28-04-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4534,'2.00','V1','Bug 32920: Qa Testing issues for #32598: Kit list/Kit page: Give Provision to export kit bom along with stock details - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4534:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 28-04-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getBomProgressBar`;  \n" +
                "CREATE FUNCTION `fun_getBomProgressBar`(          \n" +
                " pPartID INT          \n" +
                "	) RETURNS int  \n" +
                "BEGIN          \n" +
                "	DECLARE pValidCount INT;          \n" +
                "	DECLARE pTotalCount INT;          \n" +
                "	DECLARE pProgress INT;          \n" +
                "	SET pProgress = 0;          \n" +
                "	-- pTotal count          \n" +
                "	SELECT COUNT(1) INTO pTotalCount FROM rfq_lineitems l          \n" +
                "	WHERE l.partID = pPartID AND          \n" +
                "	l.isDeleted = 0;          \n" +
                "  \n" +
                "	 -- p valid count          \n" +
                "	SELECT COUNT(1) INTO pValidCount FROM (          \n" +
                "			SELECT  l.id AS lineID,          \n" +
                "				max(CASE          \n" +
                "					WHEN          \n" +
                "						IFNULL(l.qpaDesignatorStep,1) = 1 AND          \n" +
                "						IFNULL(l.customerApprovalForQPAREFDESStep,1) = 1 AND          \n" +
                "						IFNULL(l.customerApprovalForBuyStep,1) = 1 AND          \n" +
                "						IFNULL(l.dnpQPARefDesStep,1) = 1 AND              \n" +
                "						IFNULL(l.customerApprovalForDNPBuyStep,1) = 1 AND          \n" +
                "						IFNULL(l.customerApprovalForPopulateStep,1) = 1 AND          \n" +
                "						IFNULL(l.customerApprovalForDNPQPAREFDESStep,1) = 1 AND          \n" +
                "						IFNULL(l.duplicateCPNStep,0) = 1 AND          \n" +
                "						IFNULL(l.restrictCPNUseInBOMStep,0) = 0 AND          \n" +
                "						IFNULL(l.restrictCPNUseWithPermissionStep,0) = 1 AND          \n" +
                "						IFNULL(l.restrictCPNUsePermanentlyStep,0) = 1 AND          \n" +
                "						IFNULL(l.requireFunctionalTypeStep,0) = 1 AND          \n" +
                "						IFNULL(l.requireMountingTypeStep,0) = 1 AND          \n" +
                "						IFNULL(p.mfgVerificationStep,0) = 1 AND          \n" +
                "						IFNULL(p.mfgDistMappingStep,0) = 1 AND          \n" +
                "						IFNULL(p.mfgCodeStep,0) = 1 AND          \n" +
                "						IFNULL(p.distVerificationStep,0) = 1 AND          \n" +
                "						IFNULL(p.distCodeStep,0) = 1 AND          \n" +
                "						IFNULL(p.mfgGoodPartMappingStep,0) = 1 AND          \n" +
                "						IFNULL(p.mfgPNStep,0) = 1 AND          \n" +
                "						IFNULL(p.distPNStep,0) = 1 AND          \n" +
                "						IFNULL(p.distGoodPartMappingStep,0) = 1 AND          \n" +
                "						IFNULL(p.nonRohsStep,0) = 1 AND          \n" +
                "						IFNULL(p.epoxyStep,0) = 1  AND          \n" +
                "						IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND          \n" +
                "						IFNULL(p.duplicateMPNInSameLineStep,0) = 1   AND          \n" +
                "						(IFNULL(p.obsoletePartStep,0) = 1 OR(IFNULL(p.obsoletePartStep,0) = 0 AND l.isinstall = 0 AND l.isPurchase = 0 AND (l.isBuyDNPQty = 'C' OR l.isBuyDNPQty = 'N'))) AND         \n" +
                "						#(IFNULL(p.obsoletePartStep,0) = 1 OR (IFNULL(p.obsoletePartStep,0) = 0 AND p.customerApproval = 'A')) AND          \n" +
                "		#				IFNULL(p.mismatchMountingTypeStep,0) = 1   AND         \n" +
                "                       (case when IFNULL(p.mismatchMountingTypeStep,0) = 1 or (IFNULL(p.mismatchMountingTypeStep,0) = 0 and ifnull(approvedMountingType,0) = 1)      \n" +
                "then 1 else 0 end)      \n" +
                " AND         \n" +
                "						(case when IFNULL(p.mismatchFunctionalCategoryStep,0) = 1 or (IFNULL(p.mismatchFunctionalCategoryStep,0) = 0 and ifnull(approvedMountingType,0) = 1)      \n" +
                "then 1 else 0 end)      \n" +
                " AND         \n" +
                "						IFNULL(p.invalidConnectorTypeStep,0) = 1   AND          \n" +
                "						IFNULL(p.mismatchNumberOfRowsStep,0) = 1   AND          \n" +
                "						IFNULL(p.partPinIsLessthenBOMPinStep,0) = 1   AND          \n" +
                "						IFNULL(p.tbdPartStep,0) = 1   AND          \n" +
                "						IFNULL(p.mismatchColorStep,0) = 1   AND          \n" +
                "						IFNULL(p.restrictUsePermanentlyStep,0) = 1   AND          \n" +
                "						IFNULL(p.restrictUseWithPermissionStep,0) = 1  AND          \n" +
                "						p.restrictUseExcludingAliasStep = 1   AND          \n" +
                "						p.restrictUseExcludingAliasWithPermissionStep = 1  AND          \n" +
                "						IFNULL(p.pickupPadRequiredStep,0) = 1   AND          \n" +
                "						IFNULL(p.matingPartRquiredStep,0) = 1    AND          \n" +
                "						IFNULL(p.driverToolsRequiredStep,0) = 1   AND          \n" +
                "						IFNULL(p.functionalTestingRequiredStep,0) = 1    AND          \n" +
                "						IFNULL(p.uomMismatchedStep,0) = 1   AND          \n" +
                "						IFNULL(p.programingRequiredStep,0) = 1     AND          \n" +
                "						IFNULL(p.defaultInvalidMFRStep,0) = 1     AND          \n" +
                "						p.restrictUseInBOMStep = 0   AND          \n" +
                "						p.restrictUseInBOMWithPermissionStep = 0   AND          \n" +
                "						p.restrictUseInBOMExcludingAliasStep = 0   AND          \n" +
                "						p.restrictUseInBOMExcludingAliasWithPermissionStep = 0   AND          \n" +
                "						IFNULL(p.exportControlledStep,0) = 1   AND          \n" +
                "						IFNULL(p.unknownPartStep,0) = 1   AND          \n" +
                "						(IFNULL(p.customerApproval, 'A')  != 'P' AND IFNULL(suggestedGoodPartStep,1) != 0 AND (IFNULL(p.obsoletePartStep,0) = 1 OR (IFNULL(p.obsoletePartStep,0) = 0 AND (l.isinstall = 0 AND l.isPurchase = 0 AND (l.isBuyDNPQty = 'C' OR l.isBuyDNPQty = 'N' )))))AND          \n" +
                "						p.mismatchRequiredProgrammingStep = 1   AND          \n" +
                "						p.mappingPartProgramStep = 1   AND          \n" +
                "						 CASE WHEN (l.qpa IS NULL AND l.dnpQty IS NULL )OR ((l.qpa IS NULL OR l.qpa = 0)AND l.isPurchase)OR (l.uomID = -1 AND ((l.qpa IS NULL AND l.dnpQty IS NULL )OR (l.refDesig IS NULL AND l.dnpDesig IS NULL))) THEN FALSE ELSE TRUE END          \n" +
                "						-- CASE WHEN l.qpa IS NULL OR (l.uomID = -1 AND (l.qpa IS NULL  OR l.refDesig IS NULL)) THEN FALSE ELSE TRUE END          \n" +
                "					THEN 1          \n" +
                "					ELSE 0          \n" +
                "				END) AS ProgressCount          \n" +
                "				FROM rfq_lineitems l          \n" +
                "				LEFT JOIN rfq_lineitems_alternatepart p ON p.rfqLineItemsID = l.id AND p.partID = pPartID          \n" +
                "				WHERE l.partID = pPartID AND p.mfgPNID IS NOT NULL          \n" +
                "                AND IFNULL(suggestedGoodPartStep,1) = 1          \n" +
                "				AND l.isDeleted = 0 AND p.isDeleted = 0          \n" +
                "				GROUP BY l.lineID            \n" +
                "		) AS b          \n" +
                "		WHERE b.ProgressCount=1;          \n" +
                "  \n" +
                "	IF (pTotalCount IS NULL OR pTotalCount = 0) THEN          \n" +
                "		SET pProgress = 0;          \n" +
                "	ELSE          \n" +
                "		SET pProgress = ((pValidCount * 100) / pTotalCount);          \n" +
                "	END IF;          \n" +
                "	RETURN pProgress;          \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 28-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItems`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItems`(                \n" +
                "	IN ppageIndex INT,                \n" +
                "	IN precordPerPage INT,                \n" +
                "	IN pOrderBy VARCHAR(255),                \n" +
                "	IN pWhereClause VARCHAR(16383),                \n" +
                "	IN pPartID INT,                \n" +
                "	IN pPackaging TINYINT              \n" +
                ")  \n" +
                "BEGIN                \n" +
                "	DECLARE pOffset INT;              \n" +
                "	DECLARE rowNumWhere VARCHAR(255);           \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);           \n" +
                "  \n" +
                "  SET SESSION group_concat_max_len = 5000000000;              \n" +
                "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;            \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS Temp_Sproc_GetRFQLineItems;                \n" +
                "           set @RFQLineItemDetail = concat(\"CREATE TEMPORARY TABLE IF NOT EXISTS Temp_Sproc_GetRFQLineItems AS                \n" +
                "			select  rl.id,  IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep, IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep,              \n" +
                "			IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,              \n" +
                "			rl.lineID,  fun_getAssyPIDCodeByID(rl.custPNID) CPNPID, rl.qpa, rl.refDesig,rl.isPurchase, rl.isInstall, rl.dnpQty, rl.dnpDesig,              \n" +
                "			(CASE WHEN rl.isBuyDNPQty = 'Y' THEN 'YES'               \n" +
                "            WHEN rl.isBuyDNPQty = 'C' THEN 'Customer Consigned'               \n" +
                "            WHEN rl.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'              \n" +
                "            ELSE 'NO' END) AS isBuyDNPQty,              \n" +
                "			fun_getUnitNameByID(rl.uomID) unitName, fun_GetBOMLineMountingType(rl.id) as `name`,fun_GetBOMLineFunctionalType(rl.id) as `functionalType`,              \n" +
                "			CONCAT(GROUP_CONCAT(IFNULL(REPLACE(ra.description,'              \n" +
                "			','<br/>'),'') SEPARATOR '<br/>'),(CASE WHEN GROUP_CONCAT(IFNULL(ra.description,'') SEPARATOR '<br/>') = ''  THEN '' ELSE '<br/>'END), IFNULL(REPLACE(rl.description,'','<br/>'),'')) AS internalComment,                \n" +
                "			rl.numOfPosition, rl.valueAddedCost, com.PIDCode, com.category, rl.cust_lineID, rl.level, rl.uomID,   rl.partID, ra.mfgPNID,              \n" +
                "			b.mfgPN, b.PIDList           \n" +
                "			from rfq_lineitems rl              \n" +
                "			LEFT JOIN rfq_lineitems_alternatepart ra ON rl.id =ra.rfqLineItemsID AND rl.isDeleted = 0                \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID AND com.isDeleted = 0                \n" +
                "			inner join               \n" +
                "				(select a.id, a.partid,          \n" +
                "                GROUP_CONCAT(DISTINCT(IFNULL(REPLACE(REPLACE(a.PIDCode,',','***'),',','..'),'N/A')),'@@@',          \n" +
                "                a.RoHSStatusID,'@@@',IFNULL(a.name,''),'@@@', IFNULL(a.rohsIcon,''),'@@@',IFNULL(a.isCustom,0),          \n" +
                "                '@@@',REPLACE(IFNULL(a.feature,''),',',''),'@@@',IFNULL(a.partStatusname,''),'@@@',              \n" +
                "				REPLACE(IFNULL(a.partStatusColor,''),',','***'),'@@@',REPLACE(IFNULL(a.partTBD,''),',','***'),'@@@',              \n" +
                "				IFNULL(a.restrictUseInBOMStep,0) ,'@@@',              \n" +
                "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),'@@@',              \n" +
                "				IFNULL(a.restrictUsePermanentlyStep,1) ,'@@@',              \n" +
                "				IFNULL(a.restrictUseWithPermissionStep,1),'@@@',              \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),'@@@',              \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),'@@@',              \n" +
                "				IFNULL(a.restrictUseExcludingAliasStep,1),'@@@',              \n" +
                "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),'@@@',              \n" +
                "				IFNULL(REPLACE(REPLACE(a.description,',','***'),'\n','<br/>'),''),'@@@','','@@@','','@@@',              \n" +
                "				IFNULL(a.approvedMountingType,0),'@@@',              \n" +
                "				IFNULL(a.mismatchMountingTypeStep,1),'@@@' ,                    \n" +
                "				REPLACE(a.mfgPN,',','***'),'@@@',                    \n" +
                "				a.mfgCode,'@@@',                    \n" +
                "				a.mfgPNID,'@@@',             \n" +
                "                IFNULL(a.isDocumentUpload,0), '@@@',      \n" +
                "                ifnull(a.custAssyPN,''),'@@@' ,   IFNULL(a.mismatchFunctionalCategoryStep,1)    \n" +
                "				ORDER BY a.mfgPN asc separator '\",v_GroupConcatSeparator,\"') AS mfgPn ,              \n" +
                "				GROUP_CONCAT(a.PIDCode) PIDList              \n" +
                "				from (              \n" +
                "					SELECT  `z`.`id` AS `id`, `z`.`partid` AS `partid`, `z`.`isBomLine` AS `isBomLine`, `z`.`mfgPNID` AS `mfgPNID`, `z`.`PIDCode` AS `PIDCode`,              \n" +
                "					`z`.`RoHSStatusID` AS `RoHSStatusID`, FUN_GETROHSNAMEBYID(`z`.`RoHSStatusID`) AS `name`, FUN_GETROHSICONBYID(`z`.`RoHSStatusID`) AS `rohsIcon`,              \n" +
                "					FUN_GETPARTSTATUSNAMEBYID(`z`.`partStatus`) AS `partStatusName`, `z`.`approvedMountingType` AS `approvedMountingType`, `z`.`mismatchMountingTypeStep` AS `mismatchMountingTypeStep`, `z`.`mismatchFunctionalCategoryStep` as mismatchFunctionalCategoryStep,    \n" +
                "					FUN_GETPARTSTATUSCOLORBYID(`z`.`partStatus`) AS `partStatusColor`, FUN_GETPARTTBDDETAILS(`z`.`mfgPNID`) AS `partTBD`, FUN_GETMFGCODEBYID(`z`.`mfgCodeID`) AS `mfgCode`,              \n" +
                "					`z`.`isCustom` AS `iscustom`, `z`.`custAssyPN` as custAssyPN, `z`.`feature` AS `feature`, `z`.`mfgPN` AS `mfgpn`, `z`.`isDocumentUpload` AS `isDocumentUpload`, `z`.`description` AS `description`,              \n" +
                "					MAX(`z`.`restrictUseInBOMStep`) AS `restrictUseInBOMStep`,              \n" +
                "					MAX(`z`.`restrictUseInBOMWithPermissionStep`) AS `restrictUseInBOMWithPermissionStep`,              \n" +
                "					MIN(`z`.`restrictUsePermanentlyStep`) AS `restrictUsePermanentlyStep`,              \n" +
                "					MIN(`z`.`restrictUseWithPermissionStep`) AS `restrictUseWithPermissionStep`,              \n" +
                "					MAX(`z`.`restrictUseInBOMExcludingAliasStep`) AS `restrictUseInBOMExcludingAliasStep`,              \n" +
                "					MAX(`z`.`restrictUseInBOMExcludingAliasWithPermissionStep`) AS `restrictUseInBOMExcludingAliasWithPermissionStep`,              \n" +
                "					MIN(`z`.`restrictUseExcludingAliasStep`) AS `restrictUseExcludingAliasStep`,              \n" +
                "					MIN(`z`.`restrictUseExcludingAliasWithPermissionStep`) AS `restrictUseExcludingAliasWithPermissionStep`              \n" +
                "					FROM              \n" +
                "					(SELECT  `l`.`id` AS `id`, `l`.`partID` AS `partid`, IFNULL(`d`.`id`, `c`.`id`) AS `mfgPNID`,              \n" +
                "							IF((`c`.`id` = IFNULL(`d`.`id`, `c`.`id`)), TRUE, FALSE) AS `isBomLine`,              \n" +
                "							IFNULL(`d`.`mfgcodeID`, `c`.`mfgcodeID`) AS `mfgCodeID`,              \n" +
                "							IFNULL(`d`.`mfgPN`, `c`.`mfgPN`) AS `mfgPN`,              \n" +
                "							IFNULL(`d`.`PIDCode`, `c`.`PIDCode`) AS `PIDCode`,              \n" +
                "							IFNULL(`d`.`RoHSStatusID`, `c`.`RoHSStatusID`) AS `RoHSStatusID`,              \n" +
                "							IFNULL(`d`.`feature`, `c`.`feature`) AS `feature`,              \n" +
                "							IFNULL(`d`.`isCustom`, `c`.`isCustom`) AS `isCustom`,        \n" +
                "                            IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,        \n" +
                "							IFNULL(`d`.`partStatus`, `c`.`partStatus`) AS `partStatus`,              \n" +
                "							IFNULL(`al`.`restrictUseInBOMStep`, 0) AS `restrictUseInBOMStep`,              \n" +
                "							IFNULL(`al`.`restrictUseInBOMWithPermissionStep`, 0) AS `restrictUseInBOMWithPermissionStep`,              \n" +
                "							IF((`c`.`id` = IFNULL(`d`.`id`, `c`.`id`)), `al`.`description`, '') AS `description`,              \n" +
                "							(CASE              \n" +
                "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUsePermanentlyStep`, 1)              \n" +
                "								ELSE (CASE              \n" +
                "									WHEN (IFNULL(`d`.`restrictUsePermanently`, 0) = 1) THEN 0              \n" +
                "									ELSE 1              \n" +
                "								END)              \n" +
                "							END) AS `restrictUsePermanentlyStep`,              \n" +
                "							IFNULL(`al`.`restrictUseWithPermissionStep`, 1) AS `restrictUseWithPermissionStep`,              \n" +
                "							(CASE              \n" +
                "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUseInBOMExcludingAliasStep`, 0)              \n" +
                "								ELSE (CASE              \n" +
                "									WHEN ((((IFNULL(`d`.`restrictUsePermanently`, 0) + IFNULL(`d`.`restrictUSEwithpermission`, 0)) + IFNULL(`d`.`restrictPackagingUsePermanently`, 0)) + IFNULL(`d`.`restrictPackagingUseWithpermission`, 0)) > 0) THEN 1              \n" +
                "									ELSE 0              \n" +
                "								END)              \n" +
                "							END) AS `restrictUseInBOMExcludingAliasStep`,              \n" +
                "							(CASE              \n" +
                "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUseInBOMExcludingAliasWithPermissionStep`, 0)              \n" +
                "								ELSE (CASE              \n" +
                "									WHEN ((((IFNULL(`d`.`restrictUsePermanently`, 0) + IFNULL(`d`.`restrictUSEwithpermission`, 0)) + IFNULL(`d`.`restrictPackagingUsePermanently`, 0)) + IFNULL(`d`.`restrictPackagingUseWithpermission`, 0)) > 0) THEN 1              \n" +
                "									ELSE 0              \n" +
                "								END)              \n" +
                "							END) AS `restrictUseInBOMExcludingAliasWithPermissionStep`,              \n" +
                "							(CASE              \n" +
                "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUseExcludingAliasStep`, 1)              \n" +
                "								ELSE (CASE              \n" +
                "									WHEN ((((IFNULL(`d`.`restrictUsePermanently`, 0) + IFNULL(`d`.`restrictUSEwithpermission`, 0)) + IFNULL(`d`.`restrictPackagingUsePermanently`, 0)) + IFNULL(`d`.`restrictPackagingUseWithpermission`, 0)) > 0) THEN 0              \n" +
                "									ELSE 1              \n" +
                "								END)              \n" +
                "							END) AS `restrictUseExcludingAliasStep`,              \n" +
                "							(CASE              \n" +
                "								WHEN (`al`.`mfgPNID` = IFNULL(`d`.`id`, `al`.`mfgPNID`)) THEN IFNULL(`al`.`restrictUseExcludingAliasWithPermissionStep`, 1)              \n" +
                "								ELSE (CASE              \n" +
                "									WHEN ((((IFNULL(`d`.`restrictUsePermanently`, 0) + IFNULL(`d`.`restrictUSEwithpermission`, 0)) + IFNULL(`d`.`restrictPackagingUsePermanently`, 0)) + IFNULL(`d`.`restrictPackagingUseWithpermission`, 0)) > 0) THEN 0              \n" +
                "									ELSE 1              \n" +
                "								END)              \n" +
                "							END) AS `restrictUseExcludingAliasWithPermissionStep`,              \n" +
                "							IFNULL(`al`.`approvedMountingType`, 0) AS `approvedMountingType`,              \n" +
                "							IFNULL(`al`.`mismatchMountingTypeStep`, 1) AS `mismatchMountingTypeStep`,    \n" +
                "                            IFNULL(`al`.`mismatchFunctionalCategoryStep`, 1) AS `mismatchFunctionalCategoryStep`,              \n" +
                "							IFNULL(`ccl`.`isDocumentUpload`, IFNULL(`ccld`.`isDocumentUpload`, 0)) AS `isDocumentUpload`              \n" +
                "					FROM `rfq_lineitems` `l`              \n" +
                "					JOIN `rfq_lineitems_alternatepart` `al` ON `l`.`id` = `al`.`rfqLineItemsID` AND `l`.`isDeleted` = 0 AND `al`.`isDeleted` = 0              \n" +
                "						AND `al`.`mfgPNID` IS NOT NULL              \n" +
                "					JOIN `component` `c` ON `al`.`mfgPNID` = `c`.`id`              \n" +
                "					LEFT JOIN `component` `d` ON `c`.`packaginggroupID` = `d`.`packaginggroupID`              \n" +
                "						AND NOT EXISTS (SELECT  1 FROM `rfq_lineitems_alternatepart` `x`              \n" +
                "						WHERE `x`.`rfqLineItemsID` = `al`.`rfqLineItemsID` AND `x`.`mfgPNID` = `d`.`id` AND `d`.`id` <> `c`.`id` and `x`.`isDeleted` = 0)                          \n" +
                "					LEFT JOIN `component_customer_loa` `ccl` ON `ccl`.`componentID` = `c`.`id`              \n" +
                "						AND `ccl`.`customerID` = (SELECT `component`.`mfgcodeID` FROM `component` WHERE `component`.`id` = `l`.`partID`)              \n" +
                "						AND `ccl`.`isDeleted` = 0              \n" +
                "					LEFT JOIN `component_customer_loa` `ccld` ON `ccld`.`componentID` = `d`.`id`              \n" +
                "						AND `ccld`.`customerID` = (SELECT  `component`.`mfgcodeID` FROM `component` WHERE `component`.`id` = `l`.`partID`)               \n" +
                "						AND `ccld`.`isDeleted` = 0              \n" +
                "						where l.partID = \", pPartID ,\"              \n" +
                "				) `z`              \n" +
                "				GROUP BY `z`.`id` , `z`.`partid` , `z`.`isBomLine` , `z`.`mfgPNID` , `z`.`mfgCodeID` , `z`.`PIDCode` , `z`.`RoHSStatusID` , `z`.`description` , `z`.`partStatus` , `z`.`approvedMountingType` , `z`.`mismatchMountingTypeStep` , `z`.mismatchFunctionalCategoryStep, `z`.`isCustom` , `z`.`feature` , `z`.`mfgPN` , `z`.`isDocumentUpload`                              \n" +
                "				) a              \n" +
                "			where partID = \", pPartID,\" and (case when \",pPackaging,\" = 1 then 1=1 else a.isBomLine = 1 end)              \n" +
                "				Group by id, partid               \n" +
                "			) b on rl.id = b.id              \n" +
                "			WHERE  rl.partID = \", pPartID ,\" and ra.mfgPNID is not null and ra.isDeleted = 0                   \n" +
                "			GROUP BY rl.id                \n" +
                "			ORDER BY rl.lineID \");               \n" +
                "  \n" +
                "            PREPARE RFQLineItemDetail FROM @RFQLineItemDetail;                \n" +
                "			EXECUTE RFQLineItemDetail;                \n" +
                "			DEALLOCATE PREPARE RFQLineItemDetail;          \n" +
                "  \n" +
                "			IF (pOrderBy IS NOT NULL) THEN                \n" +
                "				SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                \n" +
                "			ELSE                \n" +
                "				SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;                \n" +
                "			END IF;                \n" +
                "  \n" +
                "  \n" +
                "			IF(pWhereClause IS NULL OR pWhereClause = '') THEN                \n" +
                "				SET pWhereClause = '1=1' ;                \n" +
                "			END IF;                \n" +
                "  \n" +
                "  \n" +
                "			IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                \n" +
                "				SET pOffset = (ppageIndex -1) * precordPerPage;                \n" +
                "				SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                \n" +
                "			ELSE                \n" +
                "				SET rowNumWhere = '';                \n" +
                "			END IF;                \n" +
                "  \n" +
                "  \n" +
                "			/* to get total count of rows */                \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM Temp_Sproc_GetRFQLineItems where \", pWhereClause );                \n" +
                "			PREPARE query1 FROM @SQLStatement1;                \n" +
                "			EXECUTE query1;                \n" +
                "			DEALLOCATE PREPARE query1;                \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT * FROM Temp_Sproc_GetRFQLineItems where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                \n" +
                "			PREPARE query2 FROM @SQLStatement2;          \n" +
                "			EXECUTE query2;          \n" +
                "			DEALLOCATE PREPARE query2;          \n" +
                "  \n" +
                "			SET @SQLStatement3= (SELECT fun_getRestrictedPartsinPlannBOM(IFNULL(pPartID,0)));                \n" +
                "			PREPARE query3 FROM @SQLStatement3;                \n" +
                "			EXECUTE query3;                \n" +
                "			DEALLOCATE PREPARE query3;                \n" +
                "			DROP TEMPORARY TABLE Temp_Sproc_GetRFQLineItems;                \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 28-04-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4535,'2.00','V1','Bug 32707: Bug 32767: Bug 32602:  related changes - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4535:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-04-2021 *********************************** */
                "UPDATE page_detail  \n" +
                "SET deletedAt = NOW()  \n" +
                "WHERE isDeleted=1 AND deletedAt IS NULL;  \n" +
                "  \n" +
                "UPDATE page_Detail  \n" +
                "SET isDeleted=1, deletedAt = NOW()  \n" +
                "WHERE isDeleted=0 AND isActive=0;  \n" +
                "  \n" +
                "UPDATE userpagedetail  \n" +
                "SET isDeleted=1, deletedAt = NOW()  \n" +
                "WHERE pageID IN (SELECT pageID FROM page_detail WHERE isDeleted=1);  \n" +
                /* **************************** Add Script Version ->28-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4536,'2.00','V1','Update pagedetail records - Vaibhav '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4536:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-04-2021 *********************************** */
                "ALTER TABLE mfgcodemst_comment_det MODIFY isDeleted TINYINT(1) NOT NULL DEFAULT 0;  \n" +
                "ALTER TABLE mfgcodemst_comment_det ADD CONSTRAINT FK_mfgcodemst_comment_det_mfgCodemstID FOREIGN KEY (mfgCodeId)  REFERENCES mfgCodemst(id);  \n" +
                "ALTER TABLE mfgcodemst_comment_det ADD CONSTRAINT FK_mfgcodemst_comment_det_inspectionID FOREIGN KEY (inspectionRequirementId) REFERENCES inspection_mst(id);  \n" +
                /* **************************** Add Script Version ->29-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4537,'2.00','V1',' Bug 32951: QA Testing of User Story 32181 - Purav '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4537:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-04-2021 *********************************** */
                "UPDATE page_detail SET iconClass = 'mdi mdi-truck-delivery' WHERE pageName = 'Logistics';  \n" +
                /* **************************** Add Script Version ->29-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4538,'2.00','V1',' Update Logistic Log in Menu list - Heena'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4538:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-04-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderSummaryDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderSummaryDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "	IN ppostatus VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(\"  \n" +
                "		SELECT  pom.id,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.poDate,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				pom.termsID,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pom.status,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pom.serialNumber,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.carrierID,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				CASE WHEN pom.shippingInsurance=0 THEN 'No' ELSE 'Yes' END shippingInsuranceName,  \n" +
                "				pom.shippingInsurance,  \n" +
                "				pom.supplierAddress,  \n" +
                "				pom.shippingAddress,  \n" +
                "				pom.intermediateAddress,  \n" +
                "				CASE WHEN pom.isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPO,  \n" +
                "				pom.isBlanketPO,  \n" +
                "				m.mfgcode,  \n" +
                "				pom.poCompleteReason,  \n" +
                "				pom.poCompleteType,  \n" +
                "				pom.cancleReason,  \n" +
                "				concat('(',m.mfgcode,')',' ',m.mfgName) supplierName,  \n" +
                "				pom.poWorkingStatus,  \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='C') poCompletedLine,  \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='P') poPendingLine,  \n" +
                "				case when pom.poWorkingStatus='P' then 'In Progress' when  pom.poWorkingStatus='C' then 'Completed' else 'Canceled' end workingStatusName,  \n" +
                "				IFNULL(vgf.cnt, 0) poDocumentCount,  \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType!=4 and pod.refPurchaseOrderID=pom.id) totalItems,  \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType=4 and pod.refPurchaseOrderID=pom.id) totalOtherItems,  \n" +
                "				fun_getFOBById(pom.freeOnBoardId) freeOnBoard,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				(select sum((pod.qty * pod.price)+ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)) from purchase_order_det pod where pod.refPurchaseOrderID=pom.id and pod.isdeleted=0) totalAmount,  \n" +
                "				fun_getUserNameByID(pom.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pom.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pom.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pom.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pom.id, TRUE) packingSlipId   \n" +
                "		FROM purchase_order_mst pom JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0  \n" +
                "		LEFT JOIN vu_genericfilescount vgf ON vgf.entityID = -20 AND vgf.refTransID = pom.id  \n" +
                "		WHERE pom.isdeleted=0  \n" +
                "	\");  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and pom.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and pom.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (pom.soNumber  like ''%',psearchposotext,'%'' OR pom.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (pom.soNumber  =''',psearchposotext,''' OR pom.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (pom.poDate>=''',pfromDate,''' and pom.poDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (pom.poDate>=''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (pom.poDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and FIND_IN_SET(pom.poWorkingStatus,''', ppostatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' AND exists (select 1 from purchase_order_det pod where pod.refPurchaseOrderID = pom.id and pod.isDeleted = 0 and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,')))');  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-04-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderPerLineDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "	IN ppostatus VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(\"  \n" +
                "		SELECT  pod.id,  \n" +
                "				pom.id as refPurchaseOrderID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pod.mfgPartID,  \n" +
                "				pod.packagingID,  \n" +
                "				pod.supplierPartID,  \n" +
                "				pod.partDescription,  \n" +
                "				pod.pcbPerArray,  \n" +
                "				pod.rohsStatusID,  \n" +
                "				pod.internalRef,  \n" +
                "				pod.qty,  \n" +
                "				pod.price,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				(pod.qty * pod.price) extPrice,  \n" +
                "				pod.totalRelease,  \n" +
                "				pod.lineComment,  \n" +
                "				pod.lineID,  \n" +
                "				pod.supplierQuoteNumber,  \n" +
                "				pom.poDate,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				c.mfgPN,  \n" +
                "				c.pidCode,  \n" +
                "				c.unit,  \n" +
                "				c.iscustom,  \n" +
                "				c.partType,  \n" +
                "				rr.name AS rohsName,  \n" +
                "				rr.rohsIcon,  \n" +
                "				cp.name AS packagingName,  \n" +
                "				mc.mfgCode,  \n" +
                "				mc.mfgName,  \n" +
                "				mc.id As mfgcodeID,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.status,  \n" +
                "				pom.carrierID,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'C' when c.partType=4 and pom.poWorkingStatus='CA' then 'CA' else ifnull(vups.poLineWorkingStatus,'P') end poWorkingStatus,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Closed' when c.partType=4 and pom.poWorkingStatus='CA' then 'Canceled' else ifnull(vups.poLineWorkingDisplayStatus,'Open') end poLineWorkingDisplayStatus,  \n" +
                "				vups.totalReceivedQty,  \n" +
                "				vups.totalPendingQty,  \n" +
                "				vups.poLineCompleteReason,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Auto' else  vups.poLineCompleteType end poLineCompleteType,  \n" +
                "				concat('(',m.mfgcode,')',' ',m.mfgName) supplierName,  \n" +
                "				fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				sc.mfgPN supplierPN,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.termsID,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pod.internalLineComment,  \n" +
                "				m.mfgcode as supplierMfgName,  \n" +
                "				fun_getOtherChargesByPurchaseOrderDetID(pod.id) otherExpense,  \n" +
                "				(SELECT GROUP_CONCAT(polr.instruction SEPARATOR  '<br/>') FROM purchase_order_line_requirement_det polr WHERE polr.refPurchaseOrderDetID=pod.id AND polr.isDeleted=0) purchaseRequirement,  \n" +
                "				(ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)+(pod.qty * pod.price)) totalExtPrice,  \n" +
                "				CONCAT('(',mc.mfgCode,')',' ',mc.mfgName) mfgcodeName,  \n" +
                "				fun_getUserNameByID(pod.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pod.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pod.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pod.updateByRoleId) updatedbyRole,  \n" +
                "				(select pold.shippingDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) shipDate,  \n" +
                "				(select pold.promisedShipDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) promisedShipDate,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pom.id, FALSE) packingSlipDate,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pom.id, TRUE) packingSlipId  \n" +
                "		FROM purchase_order_mst pom  \n" +
                "		left JOIN purchase_order_det pod ON pom.id=pod.refPurchaseOrderID and  pod.isdeleted=0  \n" +
                "		left join vu_purchaseorder_shipping_release vups on vups.refPurchaseOrderDetID= pod.id  \n" +
                "		left JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		left JOIN component c ON c.id=pod.mfgPartID  \n" +
                "		left join component sc on sc.id=pod.supplierPartID  \n" +
                "		left JOIN mfgcodemst mc ON mc.id=c.mfgcodeID  \n" +
                "		LEFT JOIN rfq_rohsmst rr ON rr.id=pod.rohsStatusID  \n" +
                "		LEFT JOIN component_packagingmst cp ON cp.id=pod.packagingID  \n" +
                "		WHERE pom.isdeleted=0  \n" +
                "	\");  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pom.soNumber  like ''%',psearchposotext,'%'' OR pom.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pom.soNumber  =''',psearchposotext,''' OR pom.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate>=''',pfromDate,''' and pom.poDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate>=''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when c.partType=4 and pom.poWorkingStatus=\"C\" then \"C\" else ifnull(vups.poLineWorkingStatus,\"P\") end),''', ppostatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->29-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4539,'2.00','V1',' User Story 32566: Implement Cancel Purchase order Option - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4539:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-04-2021 *********************************** */
                "DROP function IF EXISTS `fun_getLatestPackingSlipDateByPOId`;  \n" +
                "CREATE FUNCTION `fun_getLatestPackingSlipDateByPOId`(  \n" +
                "	pPoid INT,  \n" +
                "    pIsId BOOLEAN  \n" +
                ") RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vCreatedAt DATETIME;  \n" +
                "	DECLARE vResult VARCHAR(50);  \n" +
                "	SELECT max(createdAt) INTO vCreatedAt FROM packing_slip_material_receive WHERE refPurchaseOrderID = pPoid;  \n" +
                "    IF pIsId=1 THEN  \n" +
                "    	SELECT ID INTO vResult FROM packing_slip_material_receive WHERE createdAt=vCreatedAt AND refPurchaseOrderID = pPoid AND isDeleted=0;  \n" +
                "	ELSE  \n" +
                "		SELECT packingSlipDate INTO vResult FROM packing_slip_material_receive WHERE createdAt=vCreatedAt AND refPurchaseOrderID = pPoid AND isDeleted=0;  \n" +
                "	END IF;  \n" +
                "	RETURN vResult;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->29-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4540,'2.00','V1',' User Story 32566: Implement Cancel Purchase order Option - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4540:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-04-2021  ********************************** */
                "DROP function IF EXISTS `fun_getRoleByID`;  \n" +
                "CREATE FUNCTION `fun_getRoleByID`(          \n" +
                "	pRoleID INT       \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN   \n" +
                "	DECLARE vUserRole VARCHAR(255);         \n" +
                "	select `name` INTO vUserRole from roles where id = pRoleID;    \n" +
                "	RETURN vUserRole;      \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-04-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4541,'2.00','V1',' #30210 Task 33019: Show Role in Recycle Screen - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4541:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-04-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveReleaseLineFromPO`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveReleaseLineFromPO`(          \n" +
                "	IN pRefPOId INT,         \n" +
                "	IN pPartID INT,        \n" +
                "	IN pMFGPN VARCHAR(50)         \n" +
                ")  \n" +
                "BEGIN       \n" +
                "SELECT 	polrd.id,						polrd.qty poReleaseLineQty,			polrd.releaseNumber,        \n" +
                "		polrd.shippingDate,				polrd.promisedShipDate,         \n" +
                "		polrd.poLineWorkingStatus,		pod.id refPurchaseOrderDetID,		pod.lineID,        \n" +
                "		pod.qty poLineQty,			      \n" +
                "        (case when polrd.id is null then c.packagingID else pod.packagingID end) packagingID,					      \n" +
                "        pod.internalRef,                cpm.name packagingName,       \n" +
                "        mfgcod.mfgCode mfgCode,         c.mfgcodeID,                        c.mfgPN,      \n" +
                "        c.RoHSStatusID,                 CONCAT('(', mfgcod.mfgCode, ')', ' ',  mfgcod.mfgName) mfgName,      \n" +
                "        fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,      					fun_getRoHSNameByID(c.RoHSStatusID) rohsName,        \n" +
                "		c.id partId,				polrd.receivedQty,    					pod.partDescription,		      \n" +
                "         pod.lineComment,               pod.internalLineComment,            cs.mfgcodeID supplierId,  \n" +
                "        supCode.mfgCode supplierCode,   CONCAT('(', supCode.mfgCode, ')', ' ',  supCode.mfgName) supplierName,     \n" +
                "        cs.mfgpn supplierPN,            cs.id supplierPNId,                 c.packageQty spq,      \n" +
                "        c.unit,							c.uom,								c.uomText,        \n" +
                "		c.partType,					      \n" +
                "        (case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSID,	        \n" +
                "        fun_getRoHSNameByID(case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSName,        \n" +
                "        c.isCustom,						cs.isCustom AS isCustomSupplier        \n" +
                "    FROM purchase_order_det AS pod        \n" +
                "	INNER JOIN component AS c ON  c.id = pod.mfgPartID AND c.id = IFNULL(pPartID, c.id) AND c.mfgpn = IFNULL(pMFGPN, c.mfgPN) AND c.isDeleted = 0            \n" +
                "	INNER JOIN mfgcodemst mfgcod ON mfgcod.id = c.mfgcodeID OR mfgcod.id = c.mfgcodeID AND mfgcod.isDeleted = 0        \n" +
                "	LEFT JOIN purchase_order_line_release_det AS polrd ON  pod.id = polrd.refPurchaseOrderDetID AND polrd.isDeleted = 0        \n" +
                "	LEFT JOIN component_packagingmst AS cpm ON pod.packagingID = cpm.id AND cpm.isDeleted = 0        \n" +
                "	LEFT JOIN component cs ON cs.id = pod.supplierPartID AND cs.isDeleted = 0      \n" +
                "    LEFT JOIN mfgcodemst supCode ON supCode.id = cs.mfgcodeID OR supCode.id = cs.mfgcodeID AND supCode.isDeleted = 0      \n" +
                "	WHERE pod.refPurchaseOrderID = pRefPOid        \n" +
                "    AND pod.isDeleted = 0;         \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-04-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4542,'2.00','V1',' Supplier Code not showing in packing slip - Dharmishtha '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4542:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-04-2021 *********************************** */
                "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(            \n" +
                "	IN pPageIndex INT,            \n" +
                "	IN pRecordPerPage INT,            \n" +
                "	IN pOrderBy VARCHAR(255),            \n" +
                "	IN pWhereClause VARCHAR(16383),            \n" +
                "	IN pReceiptType VARCHAR(10),            \n" +
                "	IN pMfgCodeIds LONGTEXT,            \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,            \n" +
                "	IN pDueDate DATE,            \n" +
                "	IN pAdditionalDays INT,            \n" +
                "	IN pTermsAndAboveDays INT,            \n" +
                "	IN pInvoiceNumber VARCHAR(50),            \n" +
                "	IN pIsExactSearch TINYINT,            \n" +
                "	IN pMfrPnId INT,            \n" +
                "    IN pInvoiceIds LONGTEXT,            \n" +
                "    IN pExactPaymentNumberSearch TINYINT,            \n" +
                "    IN pPaymentNumber VARCHAR(50),            \n" +
                "    IN pPaymentTermsIds LONGTEXT,            \n" +
                "    IN pInvoiceFromDate DATE,            \n" +
                "    IN pInvoiceToDate DATE            \n" +
                ")  \n" +
                "BEGIN            \n" +
                "	DECLARE pOffset INT;                            \n" +
                "	DECLARE rowNumWhere VARCHAR(255);                            \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                            \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                            \n" +
                "    DECLARE vCurrentDate DATE;                            \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;                            \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;                            \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;                            \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"                                \n" +
                "			SELECT 		p.id,                              \n" +
                "					p.systemId,                          \n" +
                "					p.poNumber,                                \n" +
                "                    po.id poId,          \n" +
                "					p.mfgCodeID,                                \n" +
                "					p.supplierSONumber,                                \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,      \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,      \n" +
                "					p.packingSlipDate,                                \n" +
                "					p.invoiceNumber,                                \n" +
                "                    p.lockStatus invoiceLockStatus,      \n" +
                "					p.invoiceDate,                    \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,                    \n" +
                "					p.creditMemoNumber,      \n" +
                "                    p.lockStatus creditMemoLockStatus,      \n" +
                "					p.creditMemoDate,                                \n" +
                "					p.debitMemoNumber,                                \n" +
                "                    p.lockStatus debitMemoLockStatus,      \n" +
                "					p.debitMemoDate,                                \n" +
                "					p.receiptDate,                                \n" +
                "					p.description,                                \n" +
                "					p.billToAddress,                                \n" +
                "					p.shipToAddress,                                \n" +
                "					p.poVersion,                                \n" +
                "					p.isDeleted,                                \n" +
                "					p.receiptType,                                \n" +
                "					p.`status`,                                \n" +
                "					p.applyDate,                                \n" +
                "					p.refParentCreditDebitInvoiceno,                                \n" +
                "					p.refPackingSlipNumberForInvoice,                                \n" +
                "					p.invoiceTotalDue,                                \n" +
                "					p.isTariffInvoice,                                                  \n" +
                "					p.creditMemoType,            \n" +
                "                    (            \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN            \n" +
                "								'Invoice Credit Memo'            \n" +
                "							WHEN p.creditMemoType = 'MC' THEN            \n" +
                "								'Manual Credit Memo'            \n" +
                "							WHEN p.creditMemoType = 'RC' THEN            \n" +
                "								'RMA Credit Memo'            \n" +
                "							WHEN p.creditMemoType = 'ID' THEN            \n" +
                "								'Invoice Debit Memo'            \n" +
                "							WHEN p.creditMemoType = 'MD' THEN            \n" +
                "								'Manual Debit Memo'            \n" +
                "						END            \n" +
                "					) creditMemoTypeValue,            \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,                                             \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,                                  \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,                                  \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,                                  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                                  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,		                                           \n" +
                "                    fun_getMfgNameByID(p.mfgCodeID) supplierName,            \n" +
                "					fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCode,              \n" +
                "					fun_getMfgCodeByID(p.mfgCodeID) supplierCodeName,                                \n" +
                "					(                                      \n" +
                "						SELECT 	IFNULL(g.cnt,0)                                    \n" +
                "						FROM 	vu_genericfilescount g                                       \n" +
                "						WHERE 	g.refTransID = p.id                                       \n" +
                "								AND                                     \n" +
                "								(                                    \n" +
                "									CASE                                     \n" +
                "										WHEN p.receiptType = 'C' THEN g.entityID = -15                                    \n" +
                "										WHEN p.receiptType = 'D' THEN g.entityID = -16                                      \n" +
                "										ELSE g.entityID = -13                                    \n" +
                "									END                                    \n" +
                "								)                             \n" +
                "					) invoiceDocCount,                                      \n" +
                "					(                                      \n" +
                "						SELECT 	IFNULL(g.cnt,0)                                       \n" +
                "						FROM 	vu_genericfilescount g                                       \n" +
                "						WHERE 	g.refTransID = psm.id                           \n" +
                "								AND g.entityID = -14                             \n" +
                "								AND g.gencFileOwnerType = 'packing_slip'                                 \n" +
                "					) packingSlipDocCount,                                                       \n" +
                "					pd.itemReceived,                                                            \n" +
                "					pd.otherChargesItemReceived,                                                                  \n" +
                "					pd.itemDisapproved,                                \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,                                \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,                                \n" +
                "					ps.status parentInvoiceStatus,                                \n" +
                "					ps.invoiceNumber refInvoiceNumber,      \n" +
                "                    ps.lockStatus refInvoiceLockStatus,      \n" +
                "					ps.creditMemoType parentCreditMemoType,                                \n" +
                "					pd.totalExtendedAmount,                  \n" +
                "                    pd.totalDiscount,                  \n" +
                "					pe.totalCreditAmount,                                \n" +
                "					pe.totalDebitAmount,                                \n" +
                "					(                                \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)                                \n" +
                "					) amountToPay,  \n" +
                "                    pd.totalExtendedReceivedPrice,  \n" +
                "					pd.packingDetailNote,                                \n" +
                "					pd.approveLineCount,                                \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN                                        \n" +
                "											p.debitMemoDate                                        \n" +
                "										WHEN p.receiptType = 'C' THEN                                        \n" +
                "											p.creditMemoDate                                        \n" +
                "										ELSE p.invoiceDate                                                \n" +
                "									end), g.termsDays, m.paymentTermsID) paymentDueDate,                                \n" +
                "					g.gencCategoryName paymentTermName,                                \n" +
                " 					m.paymentTermsID paymentTermsID,                                \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,                                                        \n" +
                "					psm.packingSlipModeStatus,                                                \n" +
                "					get_totalSupplierInvoicePaidAmountById(p.id) paidAmount,                                                \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,                                            \n" +
                "					p.invoiceRequireManagementApproval,                                            \n" +
                "					(                                            \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN                                            \n" +
                "								'Yes'                                            \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN                                            \n" +
                "								'No'                                            \n" +
                "						END                                            \n" +
                "					) invoiceRequireManagementApprovalValue,                                             \n" +
                "					p.invoiceApprovalStatus,                                            \n" +
                "					(                                            \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN                                            \n" +
                "								'Approved'                                            \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN                                            \n" +
                "								'Pending'                                            \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN                                            \n" +
                "								'N/A'                                            \n" +
                "						END                                            \n" +
                "					) invoiceApprovalStatusValue,                                            \n" +
                "					p.invoiceApprovedBy,                                            \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,                                            \n" +
                "					p.invoiceApprovalDate,                                            \n" +
                "					p.invoiceApprovalComment,      \n" +
                "					p.internalRemark,      \n" +
                "					p.lockStatus,      \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'      \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'      \n" +
                "						when p.lockStatus = 'LC' then 'Locked'      \n" +
                "						else null end      \n" +
                "					) lockStatusValue,      \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,      \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,      \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                    case when p.receiptType = 'I' then  \n" +
                "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))  \n" +
                "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance  \n" +
                "			FROM packing_slip_material_receive p      \n" +
                "            JOIN mfgcodemst m ON m.id = p.mfgCodeID    \n" +
                "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID    \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0                                \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0                                \n" +
                "            LEFT JOIN 	purchase_order_mst po ON po.poNumber = p.poNumber AND po.isDeleted = 0            \n" +
                "			left join (                                \n" +
                "							select 	a.refPackingSlipMaterialRecID,                                \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,                                \n" +
                "								sum(a.itemReceived) itemReceived,                                                          \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,                                \n" +
                "								sum(a.itemDisapproved) itemDisapproved,                                \n" +
                "								sum(a.approveLineCount) approveLineCount,                                \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,                  \n" +
                "                                sum(discount) totalDiscount,  \n" +
                "								sum(extendedReceivedPrice) totalExtendedReceivedPrice              \n" +
                "							from 	(  \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,                                                           \n" +
                "										psm.packingSlipSerialNumber,                                                           \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,                                              \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,        \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/        \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,        \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,        \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,                                \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,                                \n" +
                "										extendedPrice,                  \n" +
                "                                        discount,  \n" +
                "										extendedReceivedPrice  \n" +
                "									FROM 	packing_slip_material_receive_det psm                                \n" +
                "									WHERE 	psm.isDeleted = 0                                \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)                                \n" +
                "								) a                                                                    \n" +
                "							group by a.refPackingSlipMaterialRecID                                                          \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id                                                                    \n" +
                "				left join (                                                          \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,                                                                     \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,                                                \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,                                                \n" +
                "    									sum(get_totalSupplierInvoicePaidAmountById(ps.id)) totalPaidDebitCreditAmount                                                \n" +
                "							from 		packing_slip_material_receive ps                                                                    \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID                                                                    \n" +
                "								  where ps.receiptType in ('C','D')                                \n" +
                "									and ps.isDeleted = 0                                \n" +
                "									and pd.isDeleted = 0                                \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno                                \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id                                \n" +
                "				WHERE p.`status` in ('PE','I','A','P') and p.isDeleted = 0 \",                                \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),                                    \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND FIND_IN_SET(p.receiptType,'\", pReceiptType ,\"')\") ELSE \"\" END)                                                     \n" +
                "	);                                                                \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                            \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');                            \n" +
                "	END IF;                            \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN                            \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');                            \n" +
                "	END IF;                            \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN                            \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');                            \n" +
                "	END IF;                            \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN                            \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"                            \n" +
                "				and exists (select 1                            \n" +
                "							  from packingslip_invoice_payment pm                            \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id                            \n" +
                "							 where pm.isDeleted = 0                            \n" +
                "							   and pm.isPaymentVoided = 0                            \n" +
                "							   and pm.refPaymentMode = 'P'                            \n" +
                "							   and pd.refPackingslipInvoiceID = p.id                            \n" +
                "							   and pm.paymentNumber \",                            \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END                            \n" +
                "                               ,\") \");                            \n" +
                "    END IF;                            \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;                            \n" +
                "	ELSE                            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                            \n" +
                "	END IF;                            \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                            \n" +
                "		SET pWhereClause = '1=1' ;                            \n" +
                "	END IF;                            \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN                            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                            \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                            \n" +
                "	END IF;                    \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'                     \n" +
                "												   or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");                    \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN                    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'                    \n" +
                "												   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");                    \n" +
                "    END IF;                    \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN                            \n" +
                "		IF pIsExactSearch = 1 THEN                            \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"                            \n" +
                "									AND (                            \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'                            \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'                            \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'                            \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'                            \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'                            \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'                            \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"                            \n" +
                "									  \" ) \"                            \n" +
                "						);                            \n" +
                "		ELSE                            \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"                            \n" +
                "									AND (                            \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'                            \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'                            \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'                            \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'                            \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'                            \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'                            \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"                            \n" +
                "									  \" ) \"                            \n" +
                "						);                            \n" +
                "		END IF;                            \n" +
                "	END IF;                            \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN                            \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (                            \n" +
                "				SELECT 1                            \n" +
                "				  FROM packing_slip_material_receive_det x                            \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0                            \n" +
                "			)                            \n" +
                "		\");                            \n" +
                "	END IF;                            \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN                            \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;                            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                            \n" +
                "	ELSE                            \n" +
                "		SET rowNumWhere = '';                            \n" +
                "	END IF;                            \n" +
                "  \n" +
                "	/* to get total count of rows */                            \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );                            \n" +
                "    PREPARE query1 FROM @SQLStatement1;                            \n" +
                "    EXECUTE query1;                            \n" +
                "	DEALLOCATE PREPARE query1;                            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"                            \n" +
                "			SELECT 	c.*,                            \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,                            \n" +
                "				round(c.paidAmount,2) totalPaidAmount,                            \n" +
                "				round((c.totalExtendedAmount - c.paidAmount),2) paymentAmount,                            \n" +
                "				round((c.totalExtendedAmount - c.paidAmount),2) balanceToPayAmount,                                       \n" +
                "				round((c.totalPaidDebitCreditAmount+c.paidAmount),2) totalPaidAmountToDisableDelete  \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c                            \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);                            \n" +
                "	PREPARE query2 FROM @SQLStatement2;                            \n" +
                "	EXECUTE query2;                            \n" +
                "	DEALLOCATE PREPARE query2;                            \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->29-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4543,'2.00','V1',' - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4543:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_CreateAssemblyRevision;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(                                                    \n" +
                "	IN pFromPartID INT,                                        \n" +
                "    IN pNewEpicorType varchar(50),                                        \n" +
                "    IN pNewAssemblyType INT,                                        \n" +
                "    IN pNewMfgcodeID INT,                                        \n" +
                "    IN pNewCustAssyPN varchar(500),                                        \n" +
                "    IN pNewPartRev varchar(50),                                        \n" +
                "    IN pNewMfgPN varchar(100),                                        \n" +
                "    IN pNewAssyCode varchar(50),                                        \n" +
                "    IN pNewNickName varchar(50),                                        \n" +
                "    IN pNewPIDCode varchar(109),                                  \n" +
                "    IN pIsCPN tinyint,                            \n" +
                "    IN pIsCustom tinyInt,                            \n" +
                "    IN pUserID Int,                                                    \n" +
                "    IN pUserRoleId Int,                                                    \n" +
                "    IN pIsAttribute tinyint,                                                    \n" +
                "    IN pIsSettings tinyint,                                                    \n" +
                "    IN pIsAdditionalAttibute tinyint,                                                    \n" +
                "    IN pIsPackagingDetail tinyint,                                                    \n" +
                "    IN pIsStandards tinyint,                                                    \n" +
                "    IN pIsRequiredFunctionalType tinyint,                                                    \n" +
                "    IN pIsRequiredMountingType tinyint,                                                    \n" +
                "    IN pIsPackagingAliasPart tinyint,                                                    \n" +
                "    IN pIsOtherPartName tinyint,                                                    \n" +
                "    IN pIsAlternatePart tinyint,                                                    \n" +
                "    IN pIsRoHSReplacementPart tinyint,                                                    \n" +
                "    IN pIsDriveTool tinyint,                                                    \n" +
                "    IN pIsProcessMaterial tinyint,                                                    \n" +
                "    IN pIsRequiredMattingParts tinyint,                                                    \n" +
                "    IN pIsPickupPad tinyint,                                                    \n" +
                "    IN pIsFunctionalTesingTool tinyint,                                                    \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,                                                    \n" +
                "    IN pIsBOM tinyint,                            \n" +
                "    IN pIsFluxType tinyInt,                            \n" +
                "    IN pIsComments tinyInt,                \n" +
                "    IN pIsCopyImages tinyInt,                \n" +
                "    IN pIsCopyDatasheet tinyInt,                \n" +
                "    IN pIsCopyDocument tinyInt,                \n" +
                "    IN pIsOperationalAttirbutes tinyInt,                \n" +
                "    IN pIsAcceptableShippinCountry tinyInt,                \n" +
                "    IN pIsTrackSNumber tinyInt,                \n" +
                "    IN pMfgPNDescription varchar(2000),                \n" +
                "    IN pDetailDescription varchar(2000)                \n" +
                ")  \n" +
                "BEGIN                                                    \n" +
                "DECLARE vValidationPassed tinyint;                                        \n" +
                "DECLARE vFromPartCategory tinyint;                                        \n" +
                "DECLARE vFromMfgType varchar(5);                                    \n" +
                "DECLARE vCount INT;                                                  \n" +
                "DECLARE vToPartID INT;                                                  \n" +
                "DECLARE vUserRoleId INT;                      \n" +
                "DECLARE vMisMatchFields longtext;                                           \n" +
                "/*DECLARE EXIT HANDLER FOR SQLEXCEPTION                                                    \n" +
                "BEGIN                                                    \n" +
                "	ROLLBACK;                                                    \n" +
                "	RESIGNAL;                                                    \n" +
                "END;                                                    \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                                                    \n" +
                "  BEGIN                                                    \n" +
                "	ROLLBACK;                                                    \n" +
                "	RESIGNAL;                                                    \n" +
                "END;  */                      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;                        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;                        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;                    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail                    \n" +
                "    select * from component where 1 = 2;                    \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail                    \n" +
                "    select * from component where 1 = 2;                    \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail                    \n" +
                "    select * from component_alternatepn_validations where 1 = 2;                    \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed                                        \n" +
                "  	set vCount = 0;      \n" +
                "    select co.category, m.mfgType, count(co.id)  \n" +
                "      into vFromPartCategory, vFromMfgType, vCount                                   \n" +
                "	  from component co                                     \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID                                    \n" +
                "	 where co.id = pFromPartID and co.isDeleted = 0;     \n" +
                "  \n" +
                "	if vCount = 0 then                                        \n" +
                "		set vValidationPassed = 0;                                        \n" +
                "		select 'PART_NOT_FOUND' as message;                                        \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/                                    \n" +
                "		set pIsAttribute = 1;                                    \n" +
                "        set pIsAdditionalAttibute = 1;                                    \n" +
                "    end if;                                    \n" +
                "  \n" +
                "	set vCount = 0;    \n" +
                "    if (vFromPartCategory = 3) then # check category                                        \n" +
                "	   select count(1) into vCount                                                  \n" +
                "		 from component co                                                  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID                                        \n" +
                "          and co.category = 3                                        \n" +
                "		  and co.custAssyPN = pNewCustAssyPN                                      \n" +
                "		  and co.rev = pNewPartRev                                                  \n" +
                "          and co.isDeleted = 0                                                  \n" +
                "		  and co.deletedAt is null;                                                 \n" +
                "		if vCount > 0 then                                        \n" +
                "			set vValidationPassed = 0;                                        \n" +
                "            select 'DUPLICATE_REV' as message;                                        \n" +
                "        end if;                                        \n" +
                "  \n" +
                "         set vCount = 0;                                        \n" +
                "		 select count(1) into vCount                                        \n" +
                "			 from component co                                        \n" +
                "			where co.nickName != pNewNickName                                        \n" +
                "              and co.category = 3                                        \n" +
                "              and co.custAssyPN = pNewCustAssyPN                                        \n" +
                "              and co.mfgcodeID = pNewMfgcodeID                                        \n" +
                "			  and co.isDeleted = 0                                        \n" +
                "			  and co.deletedAt is null;                                         \n" +
                "		  if vCount > 0 then                                        \n" +
                "			set vValidationPassed = 0;                                        \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,                                        \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName                                        \n" +
                "				 from component co                                        \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID                                        \n" +
                "				where co.nickName != pNewNickName                                        \n" +
                "				  and co.category = 3                                        \n" +
                "				  and co.custAssyPN = pNewCustAssyPN                                        \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID                                        \n" +
                "				  and co.isDeleted = 0                                        \n" +
                "				  and co.deletedAt is null                                        \n" +
                "				  limit 1;                                        \n" +
                "		  end if;                                        \n" +
                "  \n" +
                "		set vCount = 0;                                        \n" +
                "		 select count(1) into vCount                                        \n" +
                "			 from component co                                        \n" +
                "			where co.nickName = pNewNickName                                        \n" +
                "              and co.category = 3                                        \n" +
                "              and co.custAssyPN != pNewCustAssyPN                                        \n" +
                "              and co.mfgcodeID = pNewMfgcodeID                                        \n" +
                "			  and co.isDeleted = 0                                      \n" +
                "			  and co.deletedAt is null;                                        \n" +
                "		 if vCount > 0 then                                        \n" +
                "			set vValidationPassed = 0;                                        \n" +
                "				select 'DUPLICATE_NICKNAME' as message,                                        \n" +
                "                        custAssyPN                                        \n" +
                "				 from component co                                        \n" +
                "				where co.nickName = pNewNickName                                        \n" +
                "				  and co.category = 3                                        \n" +
                "				  and co.custAssyPN != pNewCustAssyPN                                        \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID                                        \n" +
                "				  and co.isDeleted = 0                                      \n" +
                "				  and co.deletedAt is null                                        \n" +
                "				  limit 1;                                        \n" +
                "		  end if;                                        \n" +
                "	end if;                                        \n" +
                "  \n" +
                "    set vCount = 0;                                        \n" +
                "		select count(1) into vCount                                                  \n" +
                "		 from component co                                                  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID                                        \n" +
                "		  and co.mfgPN = pNewMfgPN                                                  \n" +
                "          and co.isDeleted = 0                                      \n" +
                "		  and co.deletedAt is null;                                                 \n" +
                "	 if vCount > 0 then                                        \n" +
                "		set vValidationPassed = 0;                                        \n" +
                "        select 'DUPLICATE_MFGPN' as message;                                        \n" +
                "     end if;                                        \n" +
                "  \n" +
                "    set vCount = 0;                                        \n" +
                "		select count(1) into vCount                                                  \n" +
                "		 from component co                                                  \n" +
                "		where co.PIDCode = pNewPIDCode                                                  \n" +
                "		  and co.isDeleted = 0                                      \n" +
                "		  and co.deletedAt is null;                                             \n" +
                "    if vCount > 0 then                                        \n" +
                "		set vValidationPassed = 0;                                        \n" +
                "        select 'DUPLICATE_PID' as message;                                        \n" +
                "	end if;                                        \n" +
                "  \n" +
                "	if vValidationPassed = 1 then  #1 passed, 0 failed                              \n" +
                "		-- START TRANSACTION;                        \n" +
                "		insert into component(                                                  \n" +
                "				isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,                                                  \n" +
                "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,                                                  \n" +
                "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,                                                  \n" +
                "				partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,                                                  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,                                                  \n" +
                "				countryOfOrigin, htsCode, createdBy, createByRoleId,                                                  \n" +
                "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,                                    \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,              \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,              \n" +
                "                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference)                                        \n" +
                "		select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,                                                  \n" +
                "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,                                                  \n" +
                "				pMfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit, functionalCategoryID, mountingTypeID,                                                  \n" +
                "				partStatus, partStatusText, leadTime, fun_getComponent_Serial_Number(pUserID)/*serialNumber*/, RoHSStatusID,                                                  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,                                                  \n" +
                "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,                                                  \n" +
                "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,pDetailDescription,                                    \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,                            \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),                            \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),                            \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),                            \n" +
                "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,                   \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,                                       \n" +
                "                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),                \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN requiredTestTime ELSE null END),                              \n" +
                "                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),              \n" +
                "                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),              \n" +
                "                (CASE WHEN (pIsDriveTool = 1) THEN driverToolRequired ELSE 0 END),              \n" +
                "                (CASE WHEN (pIsRequiredMattingParts = 1) THEN matingPartRquired ELSE 0 END),              \n" +
                "                (CASE WHEN (pIsPickupPad = 1) THEN pickupPadRequired ELSE 0 END),              \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1) THEN functionalTestingRequired ELSE 0 END),    \n" +
                "                internalReference    \n" +
                "		 from component                                                  \n" +
                "		where id = pFromPartID;                                                  \n" +
                "		set vToPartID = LAST_INSERT_ID();                        \n" +
                "  \n" +
                "		IF pIsAttribute  then                                                      \n" +
                "			UPDATE `component` toPart,                                                     \n" +
                "			(select `id`,`functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,                                                    \n" +
                "			`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,                                                    \n" +
                "			`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,                                                    \n" +
                "			`length`,`width`,`heightText`,`height` from component where id = pFromPartID) fromPart                                                    \n" +
                "			SET                                                    \n" +
                "			toPart.`functionalCategoryID` = fromPart.functionalCategoryID,                                                    \n" +
                "			toPart.`functionalCategoryText` = fromPart.functionalCategoryText,                                                    \n" +
                "			toPart.`mountingTypeID` = fromPart.mountingTypeID,                                                    \n" +
                "			toPart.`mountingTypeText` = fromPart.mountingTypeText,                                                    \n" +
                "			toPart.`operatingTemp` = fromPart.operatingTemp,                                                    \n" +
                "			toPart.`minOperatingTemp` = fromPart.minOperatingTemp,                                                    \n" +
                "			toPart.`maxOperatingTemp` = fromPart.maxOperatingTemp,                                                    \n" +
                "			toPart.`temperatureCoefficient` = fromPart.temperatureCoefficient,                                                    \n" +
                "			toPart.`temperatureCoefficientValue` = fromPart.temperatureCoefficientValue,                                                    \n" +
                "			toPart.`temperatureCoefficientUnit` = fromPart.temperatureCoefficientUnit,                                                    \n" +
                "			toPart.`connecterTypeID` = fromPart.connecterTypeID,                                                    \n" +
                "			toPart.`connectorTypeText` = fromPart.connectorTypeText,                                                    \n" +
                "			toPart.`noOfPositionText` = fromPart.noOfPositionText,                                                    \n" +
                "			toPart.`noOfPosition` = fromPart.noOfPosition,                                                    \n" +
                "			toPart.`noOfRowsText` = fromPart.noOfRowsText,                                                    \n" +
                "			toPart.`noOfRows` = fromPart.noOfRows,                                                    \n" +
                "			toPart.`pitch` = fromPart.pitch,                                                    \n" +
                "			toPart.`pitchMating` = fromPart.pitchMating,                                                    \n" +
                "			toPart.`sizeDimension` = fromPart.sizeDimension,                                                    \n" +
                "			toPart.`length` = fromPart.length,                                                    \n" +
                "			toPart.`width` = fromPart.width,                                                    \n" +
                "			toPart.`heightText` = fromPart.heightText,                                                    \n" +
                "			toPart.`height` = fromPart.height,                                                    \n" +
                "			toPart.`updatedBy` = pUserID,                                                    \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,                                            \n" +
                "			toPart.`updatedAt` = current_timestamp()                                                    \n" +
                "			WHERE toPart.`id` = vToPartID;                                                    \n" +
                "		end if;                                                    \n" +
                "		IF pIsSettings then                                                    \n" +
                "			UPDATE `component` toPart,                                                     \n" +
                "			(select `id`, `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,                                                    \n" +
                "			`selfLifeDays`,`shelfListDaysThresholdPercentage`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,                                                    \n" +
                "			`programingRequired`,`restrictUSEwithpermission`,`bomLock`,`restrictUsePermanently` from component where id = pFromPartID) fromPart                                                    \n" +
                "			SET                                                    \n" +
                "			toPart.`scrapValuePerBuild` = fromPart.scrapValuePerBuild,                                                    \n" +
                "			toPart.`scrapRatePercentagePerBuild` = fromPart.scrapRatePercentagePerBuild,                                                    \n" +
                "			toPart.`plannedValuePerBuild` = fromPart.plannedValuePerBuild,                                                    \n" +
                "			toPart.`plannedOverRunPercentagePerBuild` = fromPart.plannedOverRunPercentagePerBuild,                                                    \n" +
                "			toPart.`selfLifeDays` = fromPart.selfLifeDays,                                                    \n" +
                "			toPart.`shelfListDaysThresholdPercentage` = fromPart.shelfListDaysThresholdPercentage,                                                    \n" +
                "			toPart.`maxPriceLimit` = fromPart.maxPriceLimit,                                                    \n" +
                "			toPart.`maxQtyonHand` = fromPart.maxQtyonHand,                                                    \n" +
                "			toPart.`saftyStock` = fromPart.saftyStock,                                                    \n" +
                "			toPart.`eau` = fromPart.eau,                                                    \n" +
                "			toPart.`businessRisk` = fromPart.businessRisk,                                                                                                       \n" +
                "			toPart.`programingRequired` = fromPart.programingRequired,                                                                                       \n" +
                "			toPart.`restrictUSEwithpermission` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUSEwithpermission END),                                                    \n" +
                "			toPart.`bomLock` = fromPart.bomLock,                                                    \n" +
                "			toPart.`restrictUsePermanently` = (CASE WHEN (pIsCPN = 1) THEN 0 ELSE fromPart.restrictUsePermanently END),                                                    \n" +
                "			toPart.`updatedBy` = pUserID,                                                  \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,                                            \n" +
                "			toPart.`updatedAt` = current_timestamp()                                                    \n" +
                "			WHERE toPart.`id` = vToPartID;                                                  \n" +
                "			INSERT INTO `component_temperature_sensitive_data`                                                    \n" +
                "			(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                                                    \n" +
                "			select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`                                                    \n" +
                "			from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;                                                    \n" +
                "		end if;                                                    \n" +
                "		IF pIsAdditionalAttibute then                                                    \n" +
                "			UPDATE `component` toPart,                                                     \n" +
                "			(select `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`                                                     \n" +
                "			from component where id = pFromPartID) fromPart                                                    \n" +
                "			SET                                                    \n" +
                "			toPart.`tolerance` = fromPart.tolerance,                                                    \n" +
                "			toPart.`voltage` = fromPart.voltage,                                                    \n" +
                "			toPart.`value` = fromPart.value,                                                    \n" +
                "			toPart.`partPackage` = fromPart.partPackage,                                                    \n" +
                "			toPart.`powerRating` = fromPart.powerRating,                                                    \n" +
                "			toPart.`weight` = fromPart.weight,                                                    \n" +
                "			toPart.`feature` = fromPart.feature,                                                    \n" +
                "			toPart.`color` = fromPart.color,                                                    \n" +
                "			toPart.`updatedBy` = pUserID,                                                    \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,                                            \n" +
                "			toPart.`updatedAt` = current_timestamp()                                                    \n" +
                "			WHERE toPart.`id` = vToPartID;                                                    \n" +
                "		end if;                                                    \n" +
                "		IF pIsPackagingDetail then                                                    \n" +
                "			UPDATE `component` toPart,                                                     \n" +
                "			(select `id`, `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,                                                    \n" +
                "			`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom`,`umidSPQ` from component where id = pFromPartID) fromPart                                                    \n" +
                "			SET                                                    \n" +
                "			toPart.`deviceMarking` = fromPart.deviceMarking,                                                    \n" +
                "			toPart.`packagingID` = fromPart.packagingID,                                                    \n" +
                "			toPart.`minimum` = fromPart.minimum,                                                    \n" +
                "			toPart.`mult` = fromPart.mult,                                                    \n" +
                "			toPart.`packageQty` = fromPart.packageQty,                           \n" +
                "			toPart.`umidSPQ` = fromPart.umidSPQ,          \n" +
                "			toPart.`uomClassID` = fromPart.uomClassID,                                                    \n" +
                "			toPart.`uom` = fromPart.uom,                                                    \n" +
                "			toPart.`uomText` = fromPart.uomText,                                                    \n" +
                "			toPart.`unit` = fromPart.unit,                                                    \n" +
                "			toPart.`pcbPerArray` = fromPart.pcbPerArray,                                                    \n" +
                "			toPart.`grossWeight` = fromPart.grossWeight,                                                    \n" +
                "			toPart.`grossWeightUom` = fromPart.grossWeightUom,                                                    \n" +
                "			toPart.`packagingWeight` = fromPart.packagingWeight,                                                    \n" +
                "			toPart.`packagingWeightUom` = fromPart.packagingWeightUom,                                                    \n" +
                "			toPart.`updatedBy` = pUserID,                                                    \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,                                            \n" +
                "			toPart.`updatedAt` = current_timestamp()                                                    \n" +
                "			WHERE toPart.`id` = vToPartID;                                                    \n" +
                "		end if;                                                    \n" +
                "		if pIsStandards then                                                    \n" +
                "			UPDATE `component` toPart,                                                     \n" +
                "			(select `id`, `countryOfOrigin`, `htsCode` from component where id = pFromPartID) fromPart                                                    \n" +
                "			SET                                                    \n" +
                "			toPart.`countryOfOrigin` = fromPart.countryOfOrigin,                                                    \n" +
                "			toPart.`htsCode` = fromPart.htsCode,                                                    \n" +
                "			toPart.`updatedBy` = pUserID,                                                    \n" +
                "			toPart.`updateByRoleId` = pUserRoleId,                                            \n" +
                "			toPart.`updatedAt` = current_timestamp()                                                    \n" +
                "			WHERE toPart.`id` = vToPartID;                                                    \n" +
                "			INSERT INTO `component_standard_details`                                                    \n" +
                "			(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)                                                    \n" +
                "			select vToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`                                                    \n" +
                "			from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null                                                    \n" +
                "			and not exists (select 1 from component_standard_details csd                                                    \n" +
                "			where componentID = vToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));                                                    \n" +
                "		end if;                                                    \n" +
                "		if pIsRequiredMountingType then                                                    \n" +
                "			INSERT INTO `component_requiremountingtype`                                                    \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                                                    \n" +
                "			SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                                                    \n" +
                "			FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                                                     \n" +
                "			and not exists (select 1 from component_requiremountingtype                                                     \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);                \n" +
                "		end if;                                                    \n" +
                "		if pIsRequiredFunctionalType then                                                    \n" +
                "			INSERT INTO `component_requirefunctionaltype`                                                    \n" +
                "			(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                                                    \n" +
                "			SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                                                    \n" +
                "			FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                                                    \n" +
                "			and not exists (select 1 from component_requirefunctionaltype                                                     \n" +
                "			where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);              \n" +
                "		end if;                                                    \n" +
                "		IF pIsAcceptableShippinCountry then                     \n" +
                "			INSERT INTO component_acceptable_shipping_countries                \n" +
                "				(refComponentID,countryID,createdAt,createdBy,createByRoleId)                \n" +
                "			SELECT                 \n" +
                "				vToPartID,countryID,current_timestamp(),pUserID,pUserRoleId                \n" +
                "			FROM                \n" +
                "				component_acceptable_shipping_countries where refComponentID= pFromPartID and isDeleted = 0;                \n" +
                "		end if;                \n" +
                "  \n" +
                "		IF(pIsPackagingAliasPart)                    \n" +
                "		THEN                    \n" +
                "			set vMisMatchFields  = '';                    \n" +
                "			CALL  Sproc_CheckPackagingAlias_Validation(vToPartID,pFromPartID, vMisMatchFields);                    \n" +
                "			set vValidationPassed = (select CASE WHEN (vMisMatchFields  != '') THEN 0 ELSE 1 END);                    \n" +
                "		END IF;                    \n" +
                "		IF(vValidationPassed = 0)                    \n" +
                "		THEN                    \n" +
                "			ROLLBACK;                                                       \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;                        \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;                        \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;                    \n" +
                "			select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;                           \n" +
                "		ELSE                 \n" +
                "			if pIsPackagingAliasPart then                         \n" +
                "				set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);                                                    \n" +
                "				set @ToPackagingAliasID = (select packaginggroupID from component where id = vToPartID);                                                    \n" +
                "				if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then                                                    \n" +
                "					# generate new packaging alias group id                                                    \n" +
                "					set @newPackagingGroupID = (SELECT ifnull(`maxValue`,0) FROM `identity` WHERE `type`= 'PackagingGroupID' AND isdeleted=0 limit 1);                                                    \n" +
                "					# update alias group id as new packaging alias group id in packaging alias table                                                    \n" +
                "					update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);                                                    \n" +
                "					# update packaging alias group id as new packaging alias group id in component table                                                    \n" +
                "					update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);                       \n" +
                "					# update Identity value with new Max Value                     \n" +
                "					UPDATE `identity` SET `maxvalue`= @newPackagingGroupID + 1,`updatedAt`= current_timestamp() ,                  \n" +
                "							`updatedBy`= pUserID, `updateByRoleId`= pUserRoleId WHERE `type`='PackagingGroupID' AND isdeleted=0;                     \n" +
                "				elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then                                                    \n" +
                "					# generate new packaging alias group id                      \n" +
                "					set @newPackagingGroupID = (SELECT ifnull(`maxValue`,0) FROM `identity` WHERE `type`= 'PackagingGroupID' AND isdeleted=0 limit 1);                    \n" +
                "					# Insert data in packaging alias table for ToPartID  & FromPartID                                                  \n" +
                "					INSERT INTO `component_packagingalias`                                                    \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                                                    \n" +
                "					values                    \n" +
                "					(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                    \n" +
                "					INSERT INTO `component_packagingalias`                                                    \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                                                    \n" +
                "					values                    \n" +
                "					(@newPackagingGroupID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                    \n" +
                "					# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId                                                 \n" +
                "					update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,vToPartID);	                     \n" +
                "					# update Identity value with new Max Value                     \n" +
                "					UPDATE `identity` SET `maxvalue`= @newPackagingGroupID + 1,`updatedAt`= current_timestamp() ,                  \n" +
                "							`updatedBy`= pUserID, `updateByRoleId`= pUserRoleId WHERE `type`='PackagingGroupID' AND isdeleted=0;                     \n" +
                "				elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then                                                    \n" +
                "				# Insert data in packaging alias table for ToPartID                                                    \n" +
                "					INSERT INTO `component_packagingalias`                                                    \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                                                    \n" +
                "					values                    \n" +
                "					(@FromPackagingAliasID, vToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                    \n" +
                "				# Update data for packaging alias group id for  ToPartID                    \n" +
                "					update component set packaginggroupID = @FromPackagingAliasID where id = vToPartID;                    \n" +
                "				elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then                                                    \n" +
                "				# Insert data in packaging alias table for ToPartID                                                    \n" +
                "					INSERT INTO `component_packagingalias`                                                    \n" +
                "					(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)                                                    \n" +
                "					values                                                    \n" +
                "					(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);                                                    \n" +
                "				# Update data for packaging alias group id for  FromPartID		                                                    \n" +
                "					update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;                       \n" +
                "				end if;                                                    \n" +
                "			end if;                                                    \n" +
                "			if pIsOtherPartName then                                                    \n" +
                "				INSERT INTO `component_otherpn`                                                    \n" +
                "				(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                                                    \n" +
                "				SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                                                    \n" +
                "				FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                                                    \n" +
                "				and not exists (select 1 from component_otherpn                                                     \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);                                                    \n" +
                "			end if;                                                    \n" +
                "			If pIsAlternatePart then                                                    \n" +
                "				INSERT INTO `component_alternatepn`                                                    \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                                                    \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                                                    \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                                                    \n" +
                "				and not exists (select 1 from component_alternatepn                                                     \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);                                                    \n" +
                "			end if;                                        \n" +
                "			if pIsRoHSReplacementPart then                                  \n" +
                "				INSERT INTO `component_alternatepn`                                                    \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                                                    \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                                                    \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 6 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                                                    \n" +
                "				and not exists (select 1 from component_alternatepn                                                     \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 6);                 \n" +
                "			end if;                                                    \n" +
                "			if pIsDriveTool then                                                    \n" +
                "				INSERT INTO `component_drivetools`                                                    \n" +
                "				(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)                                                    \n" +
                "				SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`                                                    \n" +
                "				FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID                                                    \n" +
                "				and not exists (select 1 from component_drivetools                                                     \n" +
                "				where refComponentID = vToPartID and componentID != vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);                                      				                                                   \n" +
                "			end if;                                                    \n" +
                "			if pIsProcessMaterial then                                                    \n" +
                "				INSERT INTO `component_processmaterial`                                                    \n" +
                "				(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)                                                    \n" +
                "				SELECT vToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`                                                    \n" +
                "				FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != vToPartID                                                    \n" +
                "				and not exists (select 1 from component_processmaterial                                                     \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);                                                     \n" +
                "			end if;                                                    \n" +
                "			if pIsRequiredMattingParts then                                                    \n" +
                "				INSERT INTO `component_alternatepn`                                                    \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                                                    \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                                                    \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                                                    \n" +
                "				and not exists (select 1 from component_alternatepn                                                     \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);                                      				                                                   \n" +
                "			end if;                                                    \n" +
                "			if pIsPickupPad then                                                    \n" +
                "				INSERT INTO `component_alternatepn`                                                    \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                                                    \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                                                    \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                                                    \n" +
                "				and not exists (select 1 from component_alternatepn                                                     \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);              \n" +
                "			end if;                                        \n" +
                "			if pIsFunctionalTesingTool then                                                    \n" +
                "				INSERT INTO `component_alternatepn`                                                    \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)                                                    \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`,`Type`                                                    \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != vToPartID                                                    \n" +
                "				and not exists (select 1 from component_alternatepn                                                     \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);                                      				                                                    \n" +
                "			end if;                                                    \n" +
                "			if pIsFinctionalRestingEquipment then                                                    \n" +
                "				INSERT INTO `component_functionaltestingequipment`                                                    \n" +
                "				(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)                                                    \n" +
                "				SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, vToPartID `refComponentID`                                                    \n" +
                "				FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null                                                    \n" +
                "				and not exists (select 1 from component_functionaltestingequipment                                                     \n" +
                "				where refComponentID = vToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);                                                    \n" +
                "			end if;                                                    \n" +
                "			if (vFromPartCategory = 3) then                                        \n" +
                "				if pIsBOM then                     \n" +
                "					CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);                                            \n" +
                "				end if;                                                  \n" +
                "				call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);                                              \n" +
                "			end if;                              \n" +
                "			if(pIsComments = 1) THEN                             \n" +
                "					INSERT INTO componenet_inspection_requirement_det                            \n" +
                "							(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)                            \n" +
                "					select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),                            \n" +
                "					pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;                            \n" +
                "					INSERT INTO assembly_revision_comments                            \n" +
                "						(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)				                            \n" +
                "					select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where                             \n" +
                "						partID = pFromPartID;                            \n" +
                "			END IF;                      \n" +
                "  \n" +
                "            CALL Sproc_getRefTransDetailForDocument('component',vToPartID,false);                \n" +
                "			IF pIsCopyImages  then                          \n" +
                "				insert into component_images                                                  \n" +
                "						(imageURL, refComponentID, createdBy,createdAt, createByRoleId)                                                  \n" +
                "				select imageURL, vToPartID,pUserID, current_timestamp(), pUserRoleId                \n" +
                "				 from component_images                                                  \n" +
                "				where refComponentID = pFromPartID and isDeleted = false;                   \n" +
                "			end if;                \n" +
                "			IF pIsCopyDatasheet  then                     \n" +
                "				insert into component_datasheets                                                  \n" +
                "						(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)                                                  \n" +
                "				select datasheetURL, vToPartID,pUserID ,current_timestamp(), pUserRoleId                \n" +
                "				from component_datasheets                                                  \n" +
                "					where refComponentID = pFromPartID and isDeleted = false;                       \n" +
                "			end if;                \n" +
                "            IF pIsOperationalAttirbutes  then                     \n" +
                "				INSERT INTO component_dynamic_attribute_mapping_part                \n" +
                "					(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)                \n" +
                "				SELECT                 \n" +
                "					vToPartID,attributeID,attributeValue,current_timestamp(),pUserID,pUserRoleId                \n" +
                "				FROM                \n" +
                "				component_dynamic_attribute_mapping_part where mfgPNID= pFromPartID and isDeleted = 0;                      \n" +
                "			end if;                \n" +
                "            IF pIsCopyDocument then                    \n" +
                "                # [S] - copy document_folder from selected part/assembly level to new part                \n" +
                "				INSERT INTO generic_folder                                                                        \n" +
                "						(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,                                                                        \n" +
                "						`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)                                                                        \n" +
                "				SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,                                                                        \n" +
                "						0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,                                      \n" +
                "						a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId                                                             \n" +
                "				FROM generic_folder a                                       \n" +
                "				WHERE a.refTransID = pFromPartID                                       \n" +
                "				AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;                                                                        \n" +
                "  \n" +
                "				UPDATE generic_folder gf1,                                                                        \n" +
                "				(   SELECT a.gencFolderID, a.copyGencFolderID                                                                        \n" +
                "					FROM generic_folder a WHERE a.refTransID = vToPartID                                   \n" +
                "					AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0                                 \n" +
                "				) gf2                                                                        \n" +
                "				SET gf1.refParentId = gf2.gencFolderID                                                                        \n" +
                "				WHERE gf1.refParentId = gf2.copyGencFolderID                                       \n" +
                "				AND gf1.refTransID = vToPartID                                   \n" +
                "				AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;                                       \n" +
                "				# [E] - copy generic_folder from selected part/assembly level to new part                \n" +
                "  \n" +
                "                INSERT INTO genericfiles                \n" +
                "					(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,                \n" +
                "					entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,                \n" +
                "					refCopyTransID,refCopyGencFileOwnerType,createByRoleId)                \n" +
                "				select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,                \n" +
                "					entityID,gencFileOwnerType,isActive,genFilePath,current_timestamp(),pUserID,isShared,fileGroupBy,refParentId,fileSize,                \n" +
                "					pFromPartID,refCopyGencFileOwnerType,pUserRoleId                 \n" +
                "				from genericfiles where refTransID = pFromPartID and entityID = -9 and isRecycle = 0 and isDeleted = 0;                  \n" +
                "  \n" +
                "                UPDATE genericfiles gf1,                                                                        \n" +
                "				(   SELECT a.gencFolderID, a.copyGencFolderID                                                                        \n" +
                "					FROM generic_folder a WHERE a.refTransID = vToPartID                                   \n" +
                "					AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0                                 \n" +
                "				) gf2                                                                        \n" +
                "				SET gf1.refParentId = gf2.gencFolderID                                                                        \n" +
                "				WHERE gf1.refParentId = gf2.copyGencFolderID                                       \n" +
                "				AND gf1.refTransID = vToPartID                                    \n" +
                "				AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;                           \n" +
                "			end if;                \n" +
                "  \n" +
                "            -- commit;              \n" +
                "            set @documentPathOfFromPart = (select documentPath from component where id = pFromPartID);              \n" +
                "            IF(@documentPathOfFromPart is null)              \n" +
                "            THEN 				              \n" +
                "				CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,false);               \n" +
                "            END IF;              \n" +
                "			select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;                          \n" +
                "		END IF;                    \n" +
                "	end if;                                                 \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4544,'2.00','V1',' Update Sp Sproc_CreateAssemblyRevision - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4544:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-04-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearchPurchaseOrder`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearchPurchaseOrder`(                     \n" +
                "IN pSearch VARCHAR(100),                            \n" +
                "IN pId INT,                            \n" +
                "IN pMfgType VARCHAR(50),                            \n" +
                "IN pRoHSStatusID VARCHAR(100),                            \n" +
                "IN pMfgCodeId INT,                            \n" +
                "IN pCategoryID INT,                            \n" +
                "IN pIsContainCPN TINYINT,                 \n" +
                "IN prefSupplierMfgpnComponentID INT ,                    \n" +
                "IN ppackagingID INT,                    \n" +
                "IN pstrictCustomPart TINYINT,                    \n" +
                "IN psupplierID INT,                \n" +
                "IN pofftheself TINYINT                    \n" +
                ")  \n" +
                "BEGIN                              \n" +
                "   /*<===this logic is added to compare invert rohs category*/                    \n" +
                "   /* this logic used in purchase order when supplier is strictly custom part */         \n" +
                "  \n" +
                "   IF(pstrictCustomPart=1)THEN                 \n" +
                "   DROP TEMPORARY TABLE IF EXISTS tempcomponent;                \n" +
                "   IF(SELECT COUNT(1) FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.supplierID=psupplierID)>0 THEN                \n" +
                "   CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent                \n" +
                "	SELECT smm.refMfgCodeMstID                 \n" +
                "	FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.supplierID=psupplierID                \n" +
                "   UNION                \n" +
                "	SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0                \n" +
                "  \n" +
                "	UNION            \n" +
                "	SELECT psupplierID AS refMfgCodeMstID;              \n" +
                "   ELSE                \n" +
                "   CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent            \n" +
                "   SELECT psupplierID AS refMfgCodeMstID            \n" +
                "   UNION                \n" +
                "	SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.mfgType='MFG' AND mc.isCustOrDisty=1 AND mc.isdeleted=0                \n" +
                "   UNION                \n" +
                "	SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0                \n" +
                "   UNION                \n" +
                "	SELECT c.mfgcodeid AS refMfgCodeMstID FROM component c WHERE (c.parttype=4 OR c.iscpn=1) AND c.isdeleted=0;                \n" +
                "   END IF;                  \n" +
                "          SELECT * FROM                                        \n" +
                " (                                        \n" +
                "	 SELECT `com`.`id`,                                        \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/                                        \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,                                        \n" +
                "		`com`.`mfgPN` orgMfgPN,                            \n" +
                "		`com`.`packaginggroupID`,                \n" +
                "		com.packagingID,                            \n" +
                "        `com`.`PIDCode`,                          \n" +
                "		`com`.`isGoodPart`,                            \n" +
                "		`com`.`RoHSStatusID`,                            \n" +
                "		`com`.`rohsgroupID`,                            \n" +
                "        `com`.`mfgcodeID`,                            \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,                            \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,                     \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                                   \n" +
                "        `com`.`category`,                    \n" +
                "        com.imageURL,                    \n" +
                "        com.documentPath,                    \n" +
                "        `com`.`mfgPNDescription`,                          \n" +
                "        `com`.`minOperatingTemp`,                            \n" +
                "        `com`.`maxOperatingTemp`,                            \n" +
                "        `com`.`value`,                            \n" +
                "        `com`.`partPackage`,                            \n" +
                "        `com`.`powerRating`,                            \n" +
                "        `com`.`functionalCategoryID`,                            \n" +
                "        `com`.`mountingTypeID`,                            \n" +
                "        `com`.`connecterTypeID`,                            \n" +
                "        `com`.`noOfPosition`,                            \n" +
                "        `com`.`noOfRows`,                            \n" +
                "        `com`.`pitch`,                            \n" +
                "        `com`.`pitchMating`,                            \n" +
                "        `com`.`length`,                            \n" +
                "        `com`.`width`,                            \n" +
                "        `com`.`height`,                            \n" +
                "        `com`.`voltage`,                            \n" +
                "        `com`.`weight`,                            \n" +
                "        `com`.`feature`,                            \n" +
                "        `com`.`color`,                            \n" +
                "        `com`.`partStatus`,                            \n" +
                "        `com`.`uom`,                            \n" +
                "        `com`.`uomClassID`,                            \n" +
                "        `com`.`unit`,                            \n" +
                "        `com`.`restrictUsePermanently`,                                              \n" +
                "		`com`.`restrictUSEwithpermission`,                                            \n" +
                "		`com`.`restrictPackagingUsePermanently`,                                            \n" +
                "		`com`.`restrictPackagingUseWithpermission`,                  \n" +
                "		u.abbreviation AS uomName,                  \n" +
                "		u.unitName AS  unitName,                     \n" +
                "                r.rohsIcon,                      \n" +
                "		r.name AS `rohsName`,                            \n" +
                "               `com`.`partPackageID`,                            \n" +
                "                `com`.`bomLock`,                            \n" +
                "		`com`.`businessRisk`,                            \n" +
                "		`com`.`costCategoryID`,                            \n" +
                "		`com`.`deviceMarking`,                            \n" +
                "		`com`.`driverToolRequired`,                            \n" +
                "		`com`.`eau`,                            \n" +
                "		`com`.`epicorType`,                                  \n" +
                "		`com`.`functionalTestingRequired`,                                  \n" +
                "		`com`.`heightText`,                                  \n" +
                "		`com`.`isCPN`,                                  \n" +
                "		`com`.`isCustom`,                                  \n" +
                "		`com`.`leadTime`,                                  \n" +
                "		`com`.`matingPartRquired`,                                  \n" +
                "		`com`.`maxPriceLimit`,                                  \n" +
                "		`com`.`maxQtyonHand`,                                  \n" +
                "		`com`.`minimum`,                                  \n" +
                "		`com`.`mult`,                                  \n" +
                "		`com`.`packageQty`,                                  \n" +
                "		`com`.`partType`,                                  \n" +
                "		`com`.`pcbPerArray`,                                  \n" +
                "		`com`.`pickupPadRequired`,                                  \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,                                  \n" +
                "		`com`.`plannedValuePerBuild`,                                  \n" +
                "		`com`.`programingRequired`,                                  \n" +
                "		`com`.`rfqOnly`,                                  \n" +
                "		`com`.`saftyStock`,                                  \n" +
                "		`com`.`scrapRatePercentagePerBuild`,                                  \n" +
                "		`com`.`scrapValuePerBuild`,                                  \n" +
                "		`com`.`selfLifeDays`,                                  \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,                                  \n" +
                "		`com`.`temperatureCoefficient`,                                  \n" +
                "		`com`.`temperatureCoefficientUnit`,                                  \n" +
                "		`com`.`temperatureCoefficientValue`,                                  \n" +
                "		`com`.`trackSerialNumber`,                                \n" +
                "		`com`.`refSupplierMfgpnComponentID`,                        \n" +
                "                com.refMfgPNMfgCodeId,                      \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,                        \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,                        \n" +
                "                fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`                                  \n" +
                "	FROM `component` AS `com`                          \n" +
                "	 INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isDeleted`=0 AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))                  \n" +
                "         JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID                   \n" +
                "         JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0                   \n" +
                "	WHERE `com`.isdeleted=0                      \n" +
                "	AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)                 \n" +
                "        AND `com`.`id` = IFNULL(pId, `com`.`id`)                 \n" +
                "        AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)                      \n" +
                "        AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)                     \n" +
                "        AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)                \n" +
                "        AND com.mfgcodeid IN (SELECT refMfgCodeMstID FROM tempcomponent)                \n" +
                "        AND (com.isGoodPart=1)                    \n" +
                "    ) AS a                                                    \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR                                                    \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%') OR pidcode LIKE CONCAT('%', pSearch , '%')                                                    \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))                                                    \n" +
                "	)                                  \n" +
                "	ORDER BY mfgPN;                      \n" +
                "  \n" +
                "ELSEIF(pofftheself=1 AND pstrictCustomPart=0) THEN                      \n" +
                "/* this logic used in purchase order                   \n" +
                "  packing slip                  \n" +
                "  UMID management                  \n" +
                "  Component Master                  \n" +
                "  Reserve Stock                  \n" +
                "  Component Assy DFM                  \n" +
                "  Reports                  \n" +
                "  Price Break Update                  \n" +
                "  Customer Part                  \n" +
                "  Good-Bad Mapping Part                  \n" +
                "  Supplier Quote                  \n" +
                "  Supplier RMA                  \n" +
                "   */                                     \n" +
                " SELECT * FROM                                        \n" +
                " (                                        \n" +
                "	 SELECT `com`.`id`,                                        \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/                                        \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,                                        \n" +
                "		`com`.`mfgPN` orgMfgPN,                            \n" +
                "		`com`.`packaginggroupID`,                \n" +
                "		com.packagingID,                            \n" +
                "        `com`.`PIDCode`,                          \n" +
                "		`com`.`isGoodPart`,                            \n" +
                "		`com`.`RoHSStatusID`,                            \n" +
                "		`com`.`rohsgroupID`,                            \n" +
                "        `com`.`mfgcodeID`,                            \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,                            \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,                     \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                                   \n" +
                "        `com`.`category`,                    \n" +
                "        com.imageURL,                    \n" +
                "        com.documentPath,                    \n" +
                "        `com`.`mfgPNDescription`,                          \n" +
                "        `com`.`minOperatingTemp`,                            \n" +
                "        `com`.`maxOperatingTemp`,                            \n" +
                "        `com`.`value`,                            \n" +
                "        `com`.`partPackage`,                            \n" +
                "        `com`.`powerRating`,                            \n" +
                "        `com`.`functionalCategoryID`,                            \n" +
                "        `com`.`mountingTypeID`,                            \n" +
                "        `com`.`connecterTypeID`,                            \n" +
                "        `com`.`noOfPosition`,                            \n" +
                "        `com`.`noOfRows`,                            \n" +
                "        `com`.`pitch`,                            \n" +
                "        `com`.`pitchMating`,                            \n" +
                "        `com`.`length`,                            \n" +
                "        `com`.`width`,                            \n" +
                "        `com`.`height`,                            \n" +
                "        `com`.`voltage`,                            \n" +
                "        `com`.`weight`,                            \n" +
                "        `com`.`feature`,                            \n" +
                "        `com`.`color`,                            \n" +
                "        `com`.`partStatus`,                            \n" +
                "        `com`.`uom`,                            \n" +
                "        `com`.`uomClassID`,                            \n" +
                "        `com`.`unit`,                            \n" +
                "        `com`.`restrictUsePermanently`,                                              \n" +
                "		`com`.`restrictUSEwithpermission`,                                            \n" +
                "		`com`.`restrictPackagingUsePermanently`,                                            \n" +
                "		`com`.`restrictPackagingUseWithpermission`,                                            \n" +
                "              u.abbreviation AS uomName,                  \n" +
                "		u.unitName AS  unitName,                             \n" +
                "        r.rohsIcon,                      \n" +
                "		r.name AS `rohsName`,                            \n" +
                "        `com`.`partPackageID`,                            \n" +
                "        `com`.`bomLock`,                            \n" +
                "		`com`.`businessRisk`,                            \n" +
                "		`com`.`costCategoryID`,                             \n" +
                "		`com`.`deviceMarking`,                            \n" +
                "		`com`.`driverToolRequired`,                            \n" +
                "		`com`.`eau`,                            \n" +
                "		`com`.`epicorType`,                                  \n" +
                "		`com`.`functionalTestingRequired`,                                  \n" +
                "		`com`.`heightText`,                                  \n" +
                "		`com`.`isCPN`,                                  \n" +
                "		`com`.`isCustom`,                                   \n" +
                "		`com`.`leadTime`,                                  \n" +
                "		`com`.`matingPartRquired`,                                  \n" +
                "		`com`.`maxPriceLimit`,                                  \n" +
                "		`com`.`maxQtyonHand`,                                  \n" +
                "		`com`.`minimum`,                                  \n" +
                "		`com`.`mult`,                                  \n" +
                "		`com`.`packageQty`,                                  \n" +
                "		`com`.`partType`,                                  \n" +
                "		`com`.`pcbPerArray`,                                  \n" +
                "		`com`.`pickupPadRequired`,                                  \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,                                  \n" +
                "		`com`.`plannedValuePerBuild`,                                  \n" +
                "		`com`.`programingRequired`,                                  \n" +
                "		`com`.`rfqOnly`,                                  \n" +
                "		`com`.`saftyStock`,                                  \n" +
                "		`com`.`scrapRatePercentagePerBuild`,                                  \n" +
                "		`com`.`scrapValuePerBuild`,                                  \n" +
                "		`com`.`selfLifeDays`,                                  \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,                                  \n" +
                "		`com`.`temperatureCoefficient`,                                  \n" +
                "		`com`.`temperatureCoefficientUnit`,                                  \n" +
                "		`com`.`temperatureCoefficientValue`,                                  \n" +
                "		`com`.`trackSerialNumber`,                                \n" +
                "		`com`.`refSupplierMfgpnComponentID`,                        \n" +
                "                 com.refMfgPNMfgCodeId,                      \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,                        \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,                        \n" +
                "        fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`                                  \n" +
                "	FROM `component` AS `com`                          \n" +
                "	 INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isDeleted`=0 AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))                  \n" +
                "         JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID                   \n" +
                "         JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0                   \n" +
                "	 WHERE (`com`.isdeleted=0)                      \n" +
                "	AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)                 \n" +
                "        AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)                      \n" +
                "        AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)                     \n" +
                "         AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)                 \n" +
                "         AND com.iscustom=0 AND com.category=2 AND com.iscpn=FALSE                \n" +
                "    ) AS a                                                    \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR                                                    \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%') OR (pidcode LIKE CONCAT('%', pSearch , '%'))                                                    \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))                                                    \n" +
                "	)                                  \n" +
                "	ORDER BY mfgPN;                                  \n" +
                "  \n" +
                "  ELSE                     \n" +
                "  /* this logic used in purchase order                   \n" +
                "  packing slip                  \n" +
                "  UMID management                  \n" +
                "  Component Master                  \n" +
                "  Reserve Stock                  \n" +
                "  Component Assy DFM                  \n" +
                "  Reports                  \n" +
                "  Price Break Update                  \n" +
                "  Customer Part                  \n" +
                "  Good-Bad Mapping Part                  \n" +
                "  Supplier Quote                  \n" +
                "  Supplier RMA                  \n" +
                "   */                               \n" +
                "   SELECT * FROM                                  \n" +
                " (                                  \n" +
                "	 SELECT `com`.`id`,                                  \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/                            \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,                            \n" +
                "		`com`.`mfgPN` orgMfgPN,                            \n" +
                "		`com`.`packaginggroupID`,                \n" +
                "		com.packagingID,                                            \n" +
                "		`com`.`PIDCode`,                                            \n" +
                "		`com`.`isGoodPart`,                            \n" +
                "		`com`.`RoHSStatusID`,                            \n" +
                "		`com`.`rohsgroupID`,                            \n" +
                "		`com`.`mfgcodeID`,                            \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,                    \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                                 \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,                            \n" +
                "		`com`.`tolerance`,                      \n" +
                "		`com`.`category`,                    \n" +
                "                 com.imageURL,                    \n" +
                "                 com.documentPath,                    \n" +
                "                `com`.`mfgPNDescription`,                             \n" +
                "		`com`.`minOperatingTemp`,                            \n" +
                "		`com`.`maxOperatingTemp`,                            \n" +
                "		`com`.`value`,                            \n" +
                "		`com`.`partPackage`,                            \n" +
                "		`com`.`powerRating`,                            \n" +
                "		`com`.`functionalCategoryID`,                            \n" +
                "		`com`.`mountingTypeID`,                            \n" +
                "		`com`.`connecterTypeID`,                            \n" +
                "		`com`.`noOfPosition`,                            \n" +
                "		`com`.`noOfRows`,                            \n" +
                "		`com`.`pitch`,                            \n" +
                "		`com`.`pitchMating`,                            \n" +
                "		`com`.`length`,                            \n" +
                "		`com`.`width`,                            \n" +
                "		`com`.`height`,                            \n" +
                "		`com`.`voltage`,                            \n" +
                "		`com`.`weight`,                            \n" +
                "		`com`.`feature`,                            \n" +
                "		`com`.`color`,                                                        \n" +
                "		`com`.`partStatus`,                                                        \n" +
                "		`com`.`uom`,                                                      \n" +
                "                `com`.`uomClassID`,                                        \n" +
                "		`com`.`unit`,                                              \n" +
                "		`com`.`restrictUsePermanently`,                                              \n" +
                "		`com`.`restrictUSEwithpermission`,                                            \n" +
                "		`com`.`restrictPackagingUsePermanently`,                                            \n" +
                "		`com`.`restrictPackagingUseWithpermission`,                                         \n" +
                "		`com`.`packaging`,                                          \n" +
                "		u.abbreviation AS uomName,                  \n" +
                "		u.unitName AS  unitName,                                                  \n" +
                "		r.rohsIcon,                      \n" +
                "		r.name AS `rohsName`,                      \n" +
                "               `com`.`partPackageID`,                                  \n" +
                "               `com`.`bomLock`,                                  \n" +
                "		`com`.`businessRisk`,                                  \n" +
                "		`com`.`costCategoryID`,                                  \n" +
                "		`com`.`deviceMarking`,                                  \n" +
                "		`com`.`driverToolRequired`,                                  \n" +
                "		`com`.`eau`,                                  \n" +
                "		`com`.`epicorType`,                                  \n" +
                "		`com`.`functionalTestingRequired`,                                  \n" +
                "		`com`.`heightText`,                                  \n" +
                "		`com`.`isCPN`,                                  \n" +
                "		`com`.`isCustom`,                                    \n" +
                "		`com`.`leadTime`,                                  \n" +
                "		`com`.`matingPartRquired`,                                  \n" +
                "		`com`.`maxPriceLimit`,                                  \n" +
                "		`com`.`maxQtyonHand`,                                  \n" +
                "		`com`.`minimum`,                                  \n" +
                "		`com`.`mult`,                                  \n" +
                "		`com`.`packageQty`,                                  \n" +
                "		`com`.`partType`,                                  \n" +
                "		`com`.`pcbPerArray`,                                  \n" +
                "		`com`.`pickupPadRequired`,                                  \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,                      \n" +
                "		`com`.`plannedValuePerBuild`,                      \n" +
                "		`com`.`programingRequired`,                      \n" +
                "		`com`.`rfqOnly`,                      \n" +
                "		`com`.`saftyStock`,                      \n" +
                "		`com`.`scrapRatePercentagePerBuild`,                      \n" +
                "		`com`.`scrapValuePerBuild`,                      \n" +
                "		`com`.`selfLifeDays`,                      \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,                      \n" +
                "		`com`.`temperatureCoefficient`,                      \n" +
                "		`com`.`temperatureCoefficientUnit`,                      \n" +
                "		`com`.`temperatureCoefficientValue`,                      \n" +
                "		`com`.`trackSerialNumber`,                      \n" +
                "		`com`.`refSupplierMfgpnComponentID`,                      \n" +
                "                 com.refMfgPNMfgCodeId,                      \n" +
                "                 `com`.`internalReference`,  \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,                      \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,                      \n" +
                "        fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`                      \n" +
                "	FROM `component` AS `com`                      \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isdeleted` =0 AND  `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))                     \n" +
                "	JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID                     \n" +
                "	JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0                      \n" +
                "        WHERE `com`.`isdeleted` =0                 \n" +
                "	AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)                \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)                     \n" +
                "	AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)                     \n" +
                "	AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)                     \n" +
                "        AND `com`.`category` = IFNULL(pCategoryID, `com`.`category`)                      \n" +
                "        AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)              \n" +
                "    ) AS a                      \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR                      \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%') OR (pidcode LIKE CONCAT('%', pSearch , '%'))                     \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))                            \n" +
                ")                      \n" +
                "ORDER BY mfgPN;                            \n" +
                "END IF;                            \n" +
                "END;  \n" +
                /* **************************** New Script -> 30-04-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_mst`;  \n" +
                "CREATE TRIGGER `Trg_AU_purchase_order_mst` AFTER UPDATE ON `purchase_order_mst` FOR EACH ROW BEGIN  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO#',CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SO#',CAST(OLD.soNumber AS CHAR), CAST(new.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Date',CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SO Date',CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.supplierID,0) != IFNULL(NEW.supplierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.supplierID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.supplierID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Terms', CAST(fun_getGenericCategoryCodeNameByID(OLD.termsID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.termsID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.poRevision ,0) != IFNULL(NEW.poRevision ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Revision', CAST(OLD.poRevision AS CHAR), CAST(new.poRevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.shippingComment ,0) != IFNULL(NEW.shippingComment ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Internal Notes', CAST(OLD.shippingComment AS CHAR), CAST(new.shippingComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.poComment ,0) != IFNULL(NEW.poComment ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Comment', CAST(OLD.poComment AS CHAR), CAST(new.poComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.status ,0) != IFNULL(NEW.status ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Status', CAST(CASE WHEN OLD.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), CAST(CASE WHEN NEW.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.carrierID ,0) != IFNULL(NEW.carrierID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber ,0) != IFNULL(NEW.carrierAccountNumber ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isDeleted ,0) != IFNULL(NEW.isDeleted ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'DELETE', CAST(CASE WHEN OLD.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isBlanketPO ,0) != IFNULL(NEW.isBlanketPO ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Blanket PO', CAST(CASE WHEN OLD.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Shipping with Insurance', CAST(CASE WHEN OLD.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.supplierAddress ,0) != IFNULL(NEW.supplierAddress ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Supplier Address', CAST(OLD.supplierAddress AS CHAR), CAST(NEW.supplierAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingAddress ,0) != IFNULL(NEW.shippingAddress ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Bill To / Ship To', CAST(OLD.shippingAddress AS CHAR), CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.intermediateAddress ,0) != IFNULL(NEW.intermediateAddress ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Mark For', CAST(OLD.intermediateAddress AS CHAR), CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.freeOnBoardID ,0) != IFNULL(NEW.freeOnBoardID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'FOB', CAST(fun_getFOBById(OLD.freeOnBoardID) AS CHAR), CAST(fun_getFOBById(NEW.freeOnBoardID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poWorkingStatus ,0) != IFNULL(NEW.poWorkingStatus ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Working Status', CAST(CASE WHEN IFNULL(OLD.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN OLD.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END  AS CHAR), CAST(CASE WHEN IFNULL(NEW.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN NEW.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.cancleReason ,0) != IFNULL(NEW.cancleReason ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Cancellation / Undo Reason', CAST(OLD.cancleReason AS CHAR), CAST(NEW.cancleReason AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4545,'2.00','V1',' Task 33027: Retrieve internal ref# from part master while part scan in purchase order - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4545:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPackingSlipAssemblyDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipAssemblyDetails`(              \n" +
                "	IN partID INT ,                  \n" +
                "	IN cpID INT                   \n" +
                ")  \n" +
                "BEGIN                    \n" +
                "  \n" +
                "	# COFC Report Header details          \n" +
                "	SELECT                       \n" +
                "    cp.id,          \n" +
                "    cp.packingSlipNumber AS PackingSlip,                    \n" +
                "    cp.packingSlipDate AS PackingSlipDate,                    \n" +
                "    cp.soNumber AS SalesOrderNumber,                    \n" +
                "    cp.poNumber AS PONumber,                   \n" +
                "	 cp.soDate AS SODate,                      \n" +
                "    cp.sorevision AS SORevision,                  \n" +
                "    IFNULL(mfg.mfgName, '') AS Customer,                    \n" +
                "    'BAS' AS DepartmentName,                    \n" +
                "    'Paul Khunt' AS ManagerName                    \n" +
                "FROM                    \n" +
                "    customer_packingslip cp                \n" +
                "        LEFT JOIN                    \n" +
                "    mfgcodemst mfg ON mfg.id = cp.customerID                    \n" +
                "        AND mfg.isDeleted = 0                    \n" +
                "WHERE                    \n" +
                "    cp.isDeleted = 0 AND cp.id = cpID            \n" +
                "LIMIT 1;                    \n" +
                "  \n" +
                "  # COFC Report Table details                  \n" +
                "	SELECT                 \n" +
                "    cpd.id AS cpDetID,              \n" +
                "	cpd.custPOLineID AS POLine,    \n" +
                "	ss.releaseNumber,                       \n" +
                "	cpd.lineID AS PSLine,                  \n" +
                "    CASE WHEN (c.partType = 3) THEN sa.shippedqty ELSE cpd.shipQty END AS ShippedQty,                     \n" +
                "    cpd.poQty AS OrderQty,                    \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN        \n" +
                "	fun_getGenericCategoryNameByID(cpd.refChargesTypeID)                      \n" +
                "	WHEN (c.iscustom = 1) THEN                      \n" +
                "	c.custAssyPN                      \n" +
                "	WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN                      \n" +
                "	c.mfgPN                      \n" +
                "	ELSE                      \n" +
                "	''                      \n" +
                "	END) AS PartNumber,                  \n" +
                "    IFNULL(c.rev, '') AS Revision,                    \n" +
                "    sa.woNumber AS WorkOrderNumber,                    \n" +
                "    (CASE WHEN sa.woNumber IS NOT NULL THEN fun_getCertificationByWoNumber(sa.woNumber) ELSE cpd.standrads END) AS Standards,                  \n" +
                "    FUN_GETUOMBYID(c.uom) AS UOM,    	      \n" +
                "    cpd.assyDescription AS Descripton,        \n" +
                "     c.partType,                         \n" +
                "    (SELECT ast.datecode FROM assemblyStock ast WHERE ast.woNumber = sa.woNumber AND ast.isDeleted = 0 LIMIT 1) AS DateCode 	            \n" +
                "FROM  		    	              \n" +
                "    customer_packingslip_det cpd                    \n" +
                "		INNER JOIN  COMPONENT c ON c.id = cpd.partid AND c.isDeleted = 0      \n" +
                "		LEFT JOIN  salesshippingmst ss ON ss.shippingID=cpd.shippingId             \n" +
                "        LEFT JOIN  shippedassembly sa ON cpd.id = sa.refCustPackingSlipDetID AND sa.isDeleted = 0 AND sa.shippedqty <> 0            \n" +
                "WHERE                    \n" +
                "    cpd.isDeleted = 0  AND cpd.refCustPackingSlipID = cpID  AND cpd.partId = partID             \n" +
                "		GROUP BY cpd.custPOLineID, cpd.id, cpd.lineID , sa.woNumber;                 \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->30-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4546,'2.00','V1','Resolved Standard Issue in packing slip for part and CPN - VS'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4546:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-04-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_component`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component`(                  \n" +
                "	IN tableName VARCHAR(255),                  \n" +
                "	IN IDs LONGTEXT,                  \n" +
                "	IN deletedBy INT,                  \n" +
                "	IN entityID VARCHAR(255),                  \n" +
                "	IN refrenceIDs LONGTEXT,                  \n" +
                "	IN countList INT,                  \n" +
                "    IN pRoleID INT                  \n" +
                "    )  \n" +
                "BEGIN                  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                  \n" +
                "BEGIN                  \n" +
                "	ROLLBACK;                  \n" +
                "	RESIGNAL;                  \n" +
                "END;                  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempComponentIds;                  \n" +
                "SET @sqlIds = CONCAT(' create temporary table tempComponentIds                    \n" +
                "					select GROUP_CONCAT(id) id                    \n" +
                "					  from component                    \n" +
                "					 where systemGenerated = false                  \n" +
                "                       and id in (',IDs,')                    \n" +
                "						or refSupplierMfgpnComponentID in (',IDs,') ');                    \n" +
                "		PREPARE stmt FROM @sqlIds;                    \n" +
                "        EXECUTE stmt;                    \n" +
                "		DEALLOCATE PREPARE stmt;        \n" +
                "  \n" +
                "	SELECT id INTO IDs                    \n" +
                "    FROM tempComponentIds;                    \n" +
                "    SET @deletedByUser = deletedBy;                  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempComponent;                  \n" +
                "	SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                  \n" +
                "				select sum(cnt) cnt, msg, min(componentID) componentID              \n" +
                "                from (                  \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                    \n" +
                "					UNION ALL                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_alternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                    \n" +
                "					UNION ALL                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_packagingalias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                    \n" +
                "					UNION ALL                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_processmaterial WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                    \n" +
                "					UNION ALL                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_rohsalternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                    \n" +
                "					UNION ALL                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(mfgPNID) componentID FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)                                    \n" +
                "					UNION ALL                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_drivetools WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                    \n" +
                "					UNION ALL                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg, min(partID) componentID FROM assemblystock WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                                    \n" +
                "					union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg, min(fromPartID) componentID FROM eco_request WHERE deletedAt IS NULL AND fromPartID IN(',IDs,') LIMIT 1)                                    \n" +
                "                    union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg, min(toPartID) componentID FROM eco_request WHERE deletedAt IS NULL AND toPartID IN(',IDs,') LIMIT 1)                                    \n" +
                "					union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(partID) componentID FROM rfq_lineitems_additional_comment WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                                    \n" +
                "					union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assembly_excessstock_location\" else \"\" end as msg, min(partID) componentID FROM workorder_assembly_excessstock_location WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                                    \n" +
                "					union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(refComponentID) componentID FROM component_cust_alias_rev_pn WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                    \n" +
                "					union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg, min(partID) componentID FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                                    \n" +
                "					union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg, min(partID) componentID FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                                    \n" +
                "					union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(refComponentID) componentID FROM rfq_bom_header_component_configuration WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                    \n" +
                "					union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg, min(partID) componentID FROM workorder WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                                    \n" +
                "					union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg, min(partID) componentID FROM shippedassembly WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                                    \n" +
                "					union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"kit_allocation\" else \"\" end as msg, min(assyID) componentID FROM kit_allocation WHERE assyID IN(',IDs,') LIMIT 1)                                    \n" +
                "					union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg, min(partID) componentID FROM rfq_assemblies WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                                    \n" +
                "					union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg, min(partID) componentID FROM salesorderdet WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                                    \n" +
                "					union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det\" else \"\" end as msg, min(partID) componentID FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND partID IN(',IDs,') or refSupplierPartId IN(',IDs,') LIMIT 1)                                    \n" +
                "					union all                                     \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(custPNID) componentID FROM rfq_lineitems WHERE deletedAt IS NULL AND custPNID IN(',IDs,') LIMIT 1)              \n" +
                "					union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(partID) componentID FROM rfq_lineitems WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)              \n" +
                "                    union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(distMfgPNID) componentID FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND distMfgPNID IN(',IDs,') LIMIT 1)              \n" +
                "					union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(mfgPNID) componentID FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)              \n" +
                "					union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(partID) componentID FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)              \n" +
                "                    union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(assyID) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)              \n" +
                "					union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(refcompid) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND refcompid IN(',IDs,') LIMIT 1)              \n" +
                "					union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(RefCPNMFGPNID) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND RefCPNMFGPNID IN(',IDs,') LIMIT 1)              \n" +
                "					union all                                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(refSupplierPartId) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND refSupplierPartId IN(',IDs,') LIMIT 1)              \n" +
                "					union all                                   \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(replacementPartID) componentID FROM component WHERE deletedAt IS NULL AND replacementPartID IN(',IDs,') LIMIT 1)                        \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg, min(assyId) componentID FROM equipment WHERE deletedAt IS NULL and equipmentAs =''S'' AND assyId IN(',IDs,') LIMIT 1)                      \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"componenet_inspection_requirement_det\" else \"\" end as msg, min(partId) componentID FROM componenet_inspection_requirement_det WHERE deletedAt IS NULL AND partId IN(',IDs,') LIMIT 1)                      \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_parts_det\" else \"\" end as msg, min(partID) componentID FROM supplier_quote_parts_det WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)          		            \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_parts_det\" else \"\" end as msg, min(supplierPartID) componentID FROM supplier_quote_parts_det WHERE deletedAt IS NULL AND supplierPartID IN(',IDs,') LIMIT 1)          		            \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_approved_supplier_mst\" else \"\" end as msg, min(partID) componentID FROM component_approved_supplier_mst WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)      \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg, min(mfgPartID) componentID FROM purchase_order_det WHERE deletedAt IS NULL AND (mfgPartID IN(',IDs,') OR supplierPartID IN(',IDs,')) LIMIT 1)      \n" +
                "  \n" +
                "					union all                        \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_approved_supplier_priority_detail\" else \"\" end as msg, min(partID) componentID FROM component_approved_supplier_priority_detail WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)      \n" +
                "                ) q group by msg');                      \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                      \n" +
                "        EXECUTE stmt;                      \n" +
                "		DEALLOCATE PREPARE stmt;        \n" +
                "        IF (countList=FALSE) THEN                      \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempComponent t)=0 THEN                      \n" +
                "				START TRANSACTION;                      \n" +
                "				SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" , packaginggroupID = null  where id IN(',IDs,') and deletedAt is NULL');                      \n" +
                "						PREPARE stmt1 FROM @SQL1;                      \n" +
                "						EXECUTE stmt1;                      \n" +
                "						DEALLOCATE PREPARE stmt1;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update part_sub_assy_relationship set  isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where (partID IN(',IDs,') or prPerPartID IN (',IDs,'))and deletedAt is NULL');                      \n" +
                "						PREPARE stmt1 FROM @SQL1;                      \n" +
                "						EXECUTE stmt1;                      \n" +
                "						DEALLOCATE PREPARE stmt1;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_alternatepn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');                      \n" +
                "						PREPARE stmt1 FROM @SQL1;                      \n" +
                "						EXECUTE stmt1;                      \n" +
                "						DEALLOCATE PREPARE stmt1;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_processmaterial set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');                      \n" +
                "						PREPARE stmt1 FROM @SQL1;                      \n" +
                "						EXECUTE stmt1;                      \n" +
                "						DEALLOCATE PREPARE stmt1;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_drivetools set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');                      \n" +
                "						PREPARE stmt1 FROM @SQL1;                      \n" +
                "						EXECUTE stmt1;                      \n" +
                "						DEALLOCATE PREPARE stmt1;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_cust_alias_rev_pn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refCPNPartID IN(',IDs,') and deletedAt is NULL');                      \n" +
                "						PREPARE stmt1 FROM @SQL1;                      \n" +
                "						EXECUTE stmt1;                      \n" +
                "						DEALLOCATE PREPARE stmt1;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');                      \n" +
                "						PREPARE stmt1 FROM @SQL1;                      \n" +
                "						EXECUTE stmt1;                      \n" +
                "						DEALLOCATE PREPARE stmt1;        \n" +
                "  \n" +
                "				-- start delete packaging alias                      \n" +
                "                SET @SQl1 = CONCAT('update component_packagingalias set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');                      \n" +
                "						PREPARE stmt1 FROM @SQL1;                      \n" +
                "						EXECUTE stmt1;                      \n" +
                "						DEALLOCATE PREPARE stmt1;        \n" +
                "					UPDATE component c        \n" +
                "					   SET packaginggroupID = NULL,                      \n" +
                "							updatedBy = @deletedByUser,                      \n" +
                "							updateByRoleId = pRoleID,                      \n" +
                "							updatedAt = fun_DatetimetoUTCDateTime()                      \n" +
                "					 WHERE isdeleted = FALSE                      \n" +
                "					   AND EXISTS (SELECT c1.componentID        \n" +
                "							 FROM component_packagingalias c1                      \n" +
                "								WHERE c1.isdeleted = FALSE                      \n" +
                "                                  AND c1.componentID = c.id        \n" +
                "								  AND c1.aliasgroupID IN                      \n" +
                "										(SELECT c2.aliasgroupID                      \n" +
                "										   FROM component_packagingalias c2                      \n" +
                "										  WHERE c2.isdeleted = FALSE                      \n" +
                "										  GROUP BY c2.aliasgroupID                      \n" +
                "										 HAVING COUNT(1)=1));                      \n" +
                "  \n" +
                "				UPDATE component_packagingalias a                      \n" +
                "                JOIN (SELECT c2.aliasgroupID                      \n" +
                "							FROM component_packagingalias c2                      \n" +
                "							WHERE c2.isdeleted = FALSE                      \n" +
                "							GROUP BY c2.aliasgroupID                      \n" +
                "							HAVING COUNT(1)=1) b                      \n" +
                "				   SET a.isDeleted = 1,                      \n" +
                "						a.deletedBy = @deletedByUser,                      \n" +
                "						a.deleteByRoleId = pRoleID,                      \n" +
                "						a.deletedAt = fun_DatetimetoUTCDateTime()                      \n" +
                "					WHERE a.isdeleted = FALSE                      \n" +
                "					AND a.aliasgroupID = b.aliasgroupID;                      \n" +
                "				-- end delete packaging alias                      \n" +
                "  \n" +
                "                -- start delete RoHS alias                      \n" +
                "                SET @SQl1 = CONCAT('update component_rohsalternatepn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');                      \n" +
                "						PREPARE stmt1 FROM @SQL1;                      \n" +
                "						EXECUTE stmt1;                      \n" +
                "						DEALLOCATE PREPARE stmt1;        \n" +
                "  \n" +
                "				UPDATE component c        \n" +
                "				 SET rohsgroupID = NULL,                      \n" +
                "					updatedBy = @deletedByUser,                      \n" +
                "					updateByRoleId = pRoleID,                      \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()                      \n" +
                "					WHERE isdeleted = FALSE                      \n" +
                "					  AND EXISTS (                      \n" +
                "						SELECT c1.componentID                      \n" +
                "						 FROM component_rohsalternatepn c1                      \n" +
                "						WHERE c1.isdeleted = FALSE                      \n" +
                "                         AND c1.componentID = c.id        \n" +
                "						  AND c1.aliasgroupID IN                      \n" +
                "								(SELECT c2.aliasgroupID                      \n" +
                "								   FROM component_rohsalternatepn c2                      \n" +
                "									WHERE c2.isdeleted = FALSE                      \n" +
                "									GROUP BY c2.aliasgroupID                      \n" +
                "									HAVING COUNT(1)=1));                      \n" +
                "  \n" +
                "				UPDATE component_rohsalternatepn a                      \n" +
                "                JOIN (SELECT c2.aliasgroupID                      \n" +
                "							   FROM component_rohsalternatepn c2                      \n" +
                "								WHERE c2.isdeleted = FALSE                      \n" +
                "								GROUP BY c2.aliasgroupID                      \n" +
                "								HAVING COUNT(1)=1) b                      \n" +
                "					SET a.isDeleted = 1,                      \n" +
                "						a.deletedBy = @deletedByUser,                      \n" +
                "						a.deleteByRoleId = pRoleID,                      \n" +
                "						a.deletedAt = fun_DatetimetoUTCDateTime()                      \n" +
                "					WHERE a.isdeleted = FALSE                      \n" +
                "					  AND a.aliasgroupID = b.aliasgroupID;                      \n" +
                "                -- start delete RoHS alias                      \n" +
                "  \n" +
                "                SET @SQl1 = CONCAT('update component_otherpn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');                      \n" +
                "						PREPARE stmt1 FROM @SQL1;                      \n" +
                "						EXECUTE stmt1;                      \n" +
                "						DEALLOCATE PREPARE stmt1;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update Component_FunctionalTestingEquipment set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');                      \n" +
                "						PREPARE stmt1 FROM @SQL1;                      \n" +
                "						EXECUTE stmt1;                      \n" +
                "						DEALLOCATE PREPARE stmt1;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_requirefunctionaltype set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');                      \n" +
                "						PREPARE stmt1 FROM @SQL1;                      \n" +
                "						EXECUTE stmt1;                      \n" +
                "						DEALLOCATE PREPARE stmt1;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_requiremountingtype set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');                      \n" +
                "						PREPARE stmt1 FROM @SQL1;                      \n" +
                "						EXECUTE stmt1;                      \n" +
                "						DEALLOCATE PREPARE stmt1;        \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_standard_details set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');                      \n" +
                "						PREPARE stmt1 FROM @SQL1;                      \n" +
                "						EXECUTE stmt1;                      \n" +
                "						DEALLOCATE PREPARE stmt1;        \n" +
                "  \n" +
                "				SELECT * FROM tempComponent WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";                                  \n" +
                "				COMMIT;                                  \n" +
                "			ELSE                                  \n" +
                "					SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempComponent t;                                  \n" +
                "			END IF;                                  \n" +
                "		ELSE                                  \n" +
                "				SELECT t1.cnt,t2.display_page_name AS msg, componentID, mf.mfgType              \n" +
                "				   FROM tempComponent t1                                  \n" +
                "					INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name                  \n" +
                "                    LEFT JOIN component co ON co.id = t1.componentID              \n" +
                "					JOIN mfgcodemst mf ON mf.id = co.mfgcodeid              \n" +
                "					WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"                                  \n" +
                "					ORDER BY t2.display_page_name;                                  \n" +
                "		END IF;                                  \n" +
                "		DROP TEMPORARY TABLE tempComponent;                                  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4547,'2.00','V1',' Bug 33039: Supplier Part deletion must be restricted if in Use - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4547:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-05-2021 *********************************** */
                "drop procedure if exists `Sproc_RetriveReleaseLineFromPO`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveReleaseLineFromPO`(  \n" +
                "	IN pRefPOId INT,  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pMFGPN VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN         \n" +
                "SELECT 	polrd.id,						polrd.qty poReleaseLineQty,			polrd.releaseNumber,          \n" +
                "		polrd.shippingDate,				polrd.promisedShipDate,           \n" +
                "		polrd.poLineWorkingStatus,		pod.id refPurchaseOrderDetID,		pod.lineID,          \n" +
                "		pod.qty poLineQty,			        \n" +
                "        (case when polrd.id is null then c.packagingID else pod.packagingID end) packagingID,					        \n" +
                "        pod.internalRef,                cpm.name packagingName,         \n" +
                "        mfgcod.mfgCode mfgCode,         c.mfgcodeID,                        c.mfgPN,        \n" +
                "        c.RoHSStatusID,                 CONCAT('(', mfgcod.mfgCode, ')', ' ',  mfgcod.mfgName) mfgName,        \n" +
                "        fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,      					fun_getRoHSNameByID(c.RoHSStatusID) rohsName,          \n" +
                "		c.id partId,				polrd.receivedQty,    					pod.partDescription,		        \n" +
                "         pod.lineComment,               pod.internalLineComment,            cs.mfgcodeID supplierId,    \n" +
                "        supCode.mfgCode supplierCode,   CONCAT('(', supCode.mfgCode, ')', ' ',  supCode.mfgName) supplierName,       \n" +
                "        cs.mfgpn supplierPN,            cs.id supplierPNId,                 c.packageQty spq,        \n" +
                "        c.unit,							c.uom,								c.uomText,          \n" +
                "		c.partType,					        \n" +
                "        (case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSID,	          \n" +
                "        fun_getRoHSNameByID(case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSName,          \n" +
                "        c.isCustom,						cs.isCustom AS isCustomSupplier,	c.umidSPQ  \n" +
                "    FROM purchase_order_det AS pod          \n" +
                "	INNER JOIN component AS c ON  c.id = pod.mfgPartID AND c.id = IFNULL(pPartID, c.id) AND c.mfgpn = IFNULL(pMFGPN, c.mfgPN) AND c.isDeleted = 0              \n" +
                "	INNER JOIN mfgcodemst mfgcod ON mfgcod.id = c.mfgcodeID OR mfgcod.id = c.mfgcodeID AND mfgcod.isDeleted = 0          \n" +
                "	LEFT JOIN purchase_order_line_release_det AS polrd ON  pod.id = polrd.refPurchaseOrderDetID AND polrd.isDeleted = 0          \n" +
                "	LEFT JOIN component_packagingmst AS cpm ON pod.packagingID = cpm.id AND cpm.isDeleted = 0          \n" +
                "	LEFT JOIN component cs ON cs.id = pod.supplierPartID AND cs.isDeleted = 0        \n" +
                "    LEFT JOIN mfgcodemst supCode ON supCode.id = cs.mfgcodeID OR supCode.id = cs.mfgcodeID AND supCode.isDeleted = 0        \n" +
                "	WHERE pod.refPurchaseOrderID = pRefPOid          \n" +
                "    AND pod.isDeleted = 0;           \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->03-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4548,'2.00','V1','Bug 33035: QA Testing of User Story 32876: Material Receipt: Change validation for qty based on packaging and UMID SPQ instead on SPQ of Part Master - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4548:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-05-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_checkDelete_component ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_component`(                    \n" +
                "	IN tableName VARCHAR(255),                    \n" +
                "	IN IDs LONGTEXT,                    \n" +
                "	IN deletedBy INT,                    \n" +
                "	IN entityID VARCHAR(255),                    \n" +
                "	IN refrenceIDs LONGTEXT,                    \n" +
                "	IN countList INT,                    \n" +
                "    IN pRoleID INT                    \n" +
                "    )  \n" +
                "BEGIN                    \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION                    \n" +
                "BEGIN                    \n" +
                "	ROLLBACK;                    \n" +
                "	RESIGNAL;                    \n" +
                "END;                    \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING                    \n" +
                "BEGIN                    \n" +
                "	ROLLBACK;                    \n" +
                "	RESIGNAL;                    \n" +
                "END;                    \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempComponentIds;                    \n" +
                "SET @sqlIds = CONCAT(' create temporary table tempComponentIds                      \n" +
                "					select GROUP_CONCAT(id) id                      \n" +
                "					  from component                      \n" +
                "					 where systemGenerated = false                    \n" +
                "                       and id in (',IDs,')                      \n" +
                "						or refSupplierMfgpnComponentID in (',IDs,') ');                      \n" +
                "		PREPARE stmt FROM @sqlIds;                      \n" +
                "        EXECUTE stmt;                      \n" +
                "		DEALLOCATE PREPARE stmt;          \n" +
                "  \n" +
                "	SELECT id INTO IDs                      \n" +
                "    FROM tempComponentIds;                      \n" +
                "    SET @deletedByUser = deletedBy;                    \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempComponent;                    \n" +
                "	SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as                    \n" +
                "				select sum(cnt) cnt, msg, min(componentID) componentID                \n" +
                "                from (                    \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_dataelement WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                      \n" +
                "					UNION ALL                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_alternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                      \n" +
                "					UNION ALL                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_packagingalias WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                      \n" +
                "					UNION ALL                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_processmaterial WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                      \n" +
                "					UNION ALL                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_rohsalternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                      \n" +
                "					UNION ALL                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(mfgPNID) componentID FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)                                      \n" +
                "					UNION ALL                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_drivetools WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)                                      \n" +
                "					UNION ALL                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg, min(partID) componentID FROM assemblystock WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                                      \n" +
                "					union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg, min(fromPartID) componentID FROM eco_request WHERE deletedAt IS NULL AND fromPartID IN(',IDs,') LIMIT 1)                                      \n" +
                "                    union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg, min(toPartID) componentID FROM eco_request WHERE deletedAt IS NULL AND toPartID IN(',IDs,') LIMIT 1)                                      \n" +
                "					union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(partID) componentID FROM rfq_lineitems_additional_comment WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                                      \n" +
                "					union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assembly_excessstock_location\" else \"\" end as msg, min(partID) componentID FROM workorder_assembly_excessstock_location WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                                      \n" +
                "					union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(refComponentID) componentID FROM component_cust_alias_rev_pn WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                      \n" +
                "					union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg, min(partID) componentID FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                                      \n" +
                "					union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg, min(partID) componentID FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                                      \n" +
                "					union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(refComponentID) componentID FROM rfq_bom_header_component_configuration WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)                                      \n" +
                "					union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg, min(partID) componentID FROM workorder WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                                    					  \n" +
                "					union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"kit_allocation\" else \"\" end as msg, min(assyID) componentID FROM kit_allocation WHERE assyID IN(',IDs,') LIMIT 1)                                      \n" +
                "					union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg, min(partID) componentID FROM rfq_assemblies WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                                      \n" +
                "					union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg, min(partID) componentID FROM salesorderdet WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                                      \n" +
                "					union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det\" else \"\" end as msg, min(partID) componentID FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND partID IN(',IDs,') or refSupplierPartId IN(',IDs,') LIMIT 1)                                      \n" +
                "					union all                                       \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(custPNID) componentID FROM rfq_lineitems WHERE deletedAt IS NULL AND custPNID IN(',IDs,') LIMIT 1)                \n" +
                "					union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(partID) componentID FROM rfq_lineitems WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                \n" +
                "                    union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(distMfgPNID) componentID FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND distMfgPNID IN(',IDs,') LIMIT 1)                \n" +
                "					union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(mfgPNID) componentID FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)                \n" +
                "					union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(partID) componentID FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)                \n" +
                "                    union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(assyID) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)                \n" +
                "					union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(refcompid) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND refcompid IN(',IDs,') LIMIT 1)                \n" +
                "					union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(RefCPNMFGPNID) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND RefCPNMFGPNID IN(',IDs,') LIMIT 1)                \n" +
                "					union all                                      \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(refSupplierPartId) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND refSupplierPartId IN(',IDs,') LIMIT 1)                \n" +
                "					union all                                     \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(replacementPartID) componentID FROM component WHERE deletedAt IS NULL AND replacementPartID IN(',IDs,') LIMIT 1)                          \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg, min(assyId) componentID FROM equipment WHERE deletedAt IS NULL and equipmentAs =''S'' AND assyId IN(',IDs,') LIMIT 1)                        \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"componenet_inspection_requirement_det\" else \"\" end as msg, min(partId) componentID FROM componenet_inspection_requirement_det WHERE deletedAt IS NULL AND partId IN(',IDs,') LIMIT 1)                        \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_parts_det\" else \"\" end as msg, min(partID) componentID FROM supplier_quote_parts_det WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)          		              \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_parts_det\" else \"\" end as msg, min(supplierPartID) componentID FROM supplier_quote_parts_det WHERE deletedAt IS NULL AND supplierPartID IN(',IDs,') LIMIT 1)          		              \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_approved_supplier_mst\" else \"\" end as msg, min(partID) componentID FROM component_approved_supplier_mst WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)        \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg, min(mfgPartID) componentID FROM purchase_order_det WHERE deletedAt IS NULL AND (mfgPartID IN(',IDs,') OR supplierPartID IN(',IDs,')) LIMIT 1)          \n" +
                "					union all                          \n" +
                "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_approved_supplier_priority_detail\" else \"\" end as msg, min(partID) componentID FROM component_approved_supplier_priority_detail WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)        \n" +
                "					union all  \n" +
                "                    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip\" else \"\" end as msg, min(partID) componentID FROM customer_packingslip_det WHERE isDeleted = 0 and refCustPackingSlipID in (select id from customer_packingslip where transType = \"P\" and isDeleted = 0) AND partID IN(',IDs,') LIMIT 1)       \n" +
                "                    union all  \n" +
                "                    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_invoice\" else \"\" end as msg, min(partID) componentID FROM customer_packingslip_det WHERE isDeleted = 0 and refCustPackingSlipID in (select id from customer_packingslip where transType = \"I\" and isDeleted = 0) AND partID IN(',IDs,') LIMIT 1)       \n" +
                "                    union all  \n" +
                "                    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_creditmemo\" else \"\" end as msg, min(partID) componentID FROM customer_packingslip_det WHERE isDeleted = 0 and refCustPackingSlipID in (select id from customer_packingslip where transType = \"C\" and isDeleted = 0) AND partID IN(',IDs,') LIMIT 1)                           \n" +
                "                ) q group by msg');                        \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;                        \n" +
                "        EXECUTE stmt;                        \n" +
                "		DEALLOCATE PREPARE stmt;          \n" +
                "        IF (countList=FALSE) THEN                        \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempComponent t)=0 THEN                        \n" +
                "				START TRANSACTION;                        \n" +
                "				SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" , packaginggroupID = null  where id IN(',IDs,') and deletedAt is NULL');                        \n" +
                "						PREPARE stmt1 FROM @SQL1;                        \n" +
                "						EXECUTE stmt1;                        \n" +
                "						DEALLOCATE PREPARE stmt1;          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update part_sub_assy_relationship set  isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where (partID IN(',IDs,') or prPerPartID IN (',IDs,'))and deletedAt is NULL');                        \n" +
                "						PREPARE stmt1 FROM @SQL1;                        \n" +
                "						EXECUTE stmt1;                        \n" +
                "						DEALLOCATE PREPARE stmt1;          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_alternatepn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');                        \n" +
                "						PREPARE stmt1 FROM @SQL1;                        \n" +
                "						EXECUTE stmt1;                        \n" +
                "						DEALLOCATE PREPARE stmt1;          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_processmaterial set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');                        \n" +
                "						PREPARE stmt1 FROM @SQL1;                        \n" +
                "						EXECUTE stmt1;                        \n" +
                "						DEALLOCATE PREPARE stmt1;          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_drivetools set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');                        \n" +
                "						PREPARE stmt1 FROM @SQL1;                        \n" +
                "						EXECUTE stmt1;                        \n" +
                "						DEALLOCATE PREPARE stmt1;          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_cust_alias_rev_pn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refCPNPartID IN(',IDs,') and deletedAt is NULL');                        \n" +
                "						PREPARE stmt1 FROM @SQL1;                        \n" +
                "						EXECUTE stmt1;                        \n" +
                "						DEALLOCATE PREPARE stmt1;          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');                        \n" +
                "						PREPARE stmt1 FROM @SQL1;                        \n" +
                "						EXECUTE stmt1;                        \n" +
                "						DEALLOCATE PREPARE stmt1;          \n" +
                "  \n" +
                "				-- start delete packaging alias                        \n" +
                "                SET @SQl1 = CONCAT('update component_packagingalias set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');                        \n" +
                "						PREPARE stmt1 FROM @SQL1;                        \n" +
                "						EXECUTE stmt1;                        \n" +
                "						DEALLOCATE PREPARE stmt1;          \n" +
                "					UPDATE component c          \n" +
                "					   SET packaginggroupID = NULL,                        \n" +
                "							updatedBy = @deletedByUser,                        \n" +
                "							updateByRoleId = pRoleID,                        \n" +
                "							updatedAt = fun_DatetimetoUTCDateTime()                        \n" +
                "					 WHERE isdeleted = FALSE                        \n" +
                "					   AND EXISTS (SELECT c1.componentID          \n" +
                "							 FROM component_packagingalias c1                        \n" +
                "								WHERE c1.isdeleted = FALSE                        \n" +
                "                                  AND c1.componentID = c.id          \n" +
                "								  AND c1.aliasgroupID IN                        \n" +
                "										(SELECT c2.aliasgroupID                        \n" +
                "										   FROM component_packagingalias c2                        \n" +
                "										  WHERE c2.isdeleted = FALSE                        \n" +
                "										  GROUP BY c2.aliasgroupID                        \n" +
                "										 HAVING COUNT(1)=1));                        \n" +
                "  \n" +
                "				UPDATE component_packagingalias a                        \n" +
                "                JOIN (SELECT c2.aliasgroupID                        \n" +
                "							FROM component_packagingalias c2                        \n" +
                "							WHERE c2.isdeleted = FALSE                        \n" +
                "							GROUP BY c2.aliasgroupID                        \n" +
                "							HAVING COUNT(1)=1) b                        \n" +
                "				   SET a.isDeleted = 1,                        \n" +
                "						a.deletedBy = @deletedByUser,                        \n" +
                "						a.deleteByRoleId = pRoleID,                        \n" +
                "						a.deletedAt = fun_DatetimetoUTCDateTime()                        \n" +
                "					WHERE a.isdeleted = FALSE                        \n" +
                "					AND a.aliasgroupID = b.aliasgroupID;                        \n" +
                "				-- end delete packaging alias                        \n" +
                "  \n" +
                "                -- start delete RoHS alias                        \n" +
                "                SET @SQl1 = CONCAT('update component_rohsalternatepn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');                        \n" +
                "						PREPARE stmt1 FROM @SQL1;                        \n" +
                "						EXECUTE stmt1;                        \n" +
                "						DEALLOCATE PREPARE stmt1;          \n" +
                "  \n" +
                "				UPDATE component c          \n" +
                "				 SET rohsgroupID = NULL,                        \n" +
                "					updatedBy = @deletedByUser,                        \n" +
                "					updateByRoleId = pRoleID,                        \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()                        \n" +
                "					WHERE isdeleted = FALSE                        \n" +
                "					  AND EXISTS (                        \n" +
                "						SELECT c1.componentID                        \n" +
                "						 FROM component_rohsalternatepn c1                        \n" +
                "						WHERE c1.isdeleted = FALSE                        \n" +
                "                         AND c1.componentID = c.id          \n" +
                "						  AND c1.aliasgroupID IN                        \n" +
                "								(SELECT c2.aliasgroupID                        \n" +
                "								   FROM component_rohsalternatepn c2                        \n" +
                "									WHERE c2.isdeleted = FALSE                        \n" +
                "									GROUP BY c2.aliasgroupID                        \n" +
                "									HAVING COUNT(1)=1));                        \n" +
                "  \n" +
                "				UPDATE component_rohsalternatepn a                        \n" +
                "                JOIN (SELECT c2.aliasgroupID                        \n" +
                "							   FROM component_rohsalternatepn c2                        \n" +
                "								WHERE c2.isdeleted = FALSE                        \n" +
                "								GROUP BY c2.aliasgroupID                        \n" +
                "								HAVING COUNT(1)=1) b                        \n" +
                "					SET a.isDeleted = 1,                        \n" +
                "						a.deletedBy = @deletedByUser,                        \n" +
                "						a.deleteByRoleId = pRoleID,                        \n" +
                "						a.deletedAt = fun_DatetimetoUTCDateTime()                        \n" +
                "					WHERE a.isdeleted = FALSE                        \n" +
                "					  AND a.aliasgroupID = b.aliasgroupID;                        \n" +
                "                -- start delete RoHS alias                        \n" +
                "  \n" +
                "                SET @SQl1 = CONCAT('update component_otherpn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');                        \n" +
                "						PREPARE stmt1 FROM @SQL1;                        \n" +
                "						EXECUTE stmt1;                        \n" +
                "						DEALLOCATE PREPARE stmt1;          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update Component_FunctionalTestingEquipment set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');                        \n" +
                "						PREPARE stmt1 FROM @SQL1;                        \n" +
                "						EXECUTE stmt1;                        \n" +
                "						DEALLOCATE PREPARE stmt1;          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_requirefunctionaltype set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');                        \n" +
                "						PREPARE stmt1 FROM @SQL1;                        \n" +
                "						EXECUTE stmt1;                        \n" +
                "						DEALLOCATE PREPARE stmt1;          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_requiremountingtype set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');                        \n" +
                "						PREPARE stmt1 FROM @SQL1;                        \n" +
                "						EXECUTE stmt1;                        \n" +
                "						DEALLOCATE PREPARE stmt1;          \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update component_standard_details set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');                        \n" +
                "						PREPARE stmt1 FROM @SQL1;                        \n" +
                "						EXECUTE stmt1;                        \n" +
                "						DEALLOCATE PREPARE stmt1;          \n" +
                "  \n" +
                "				SELECT * FROM tempComponent WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";                                    \n" +
                "				COMMIT;                                    \n" +
                "			ELSE                                    \n" +
                "					SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempComponent t;                                    \n" +
                "			END IF;                                    \n" +
                "		ELSE                                    \n" +
                "				SELECT t1.cnt,t2.display_page_name AS msg, componentID, mf.mfgType                \n" +
                "				   FROM tempComponent t1                                    \n" +
                "					INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name                    \n" +
                "                    LEFT JOIN component co ON co.id = t1.componentID                \n" +
                "					JOIN mfgcodemst mf ON mf.id = co.mfgcodeid                \n" +
                "					WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"                                    \n" +
                "					ORDER BY t2.display_page_name;                                    \n" +
                "		END IF;                                    \n" +
                "		DROP TEMPORARY TABLE tempComponent;                                    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4549,'2.00','V1','Sproc_checkDelete_component - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4549:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-05-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitAllocationLineItemsForExport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitAllocationLineItemsForExport`(          \n" +
                "IN pPartID INT,          \n" +
                "IN pRefSalesOrderDetID INT,                 \n" +
                "IN pIsConsolidated TINYINT,   \n" +
                "IN pCustomerId INT     \n" +
                ")  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	DECLARE pPOQty INT DEFAULT 0;                                        \n" +
                "	DECLARE pKitQty INT DEFAULT 0;                                        \n" +
                "	DECLARE pMrpQty INT DEFAULT 0;                                        \n" +
                "	DECLARE pAsyKitQty INT DEFAULT 0;    \n" +
                "    DECLARE pAssyQty INT DEFAULT 0;  \n" +
                "  \n" +
                "	IF(pPartID = 0) THEN  \n" +
                "		SELECT IFNULL(s.qty,0), IFNULL(s.mrpQty,0), IFNULL(s.kitQty,0) INTO pPOQty, pMrpQty, pKitQty  \n" +
                "			FROM salesorderdet s  WHERE s.id = pRefSalesOrderDetID AND s.isDeleted = 0;       \n" +
                "	ELSE   \n" +
                "		SELECT  IFNULL(s.qty,0), IFNULL(k.mrpQty,0), IFNULL(k.totalAssyBuildQty,0), IFNULL(k.perAssyBuildQty,0) INTO pPOQty, pMrpQty, pKitQty, pAssyQty  \n" +
                "			FROM kit_allocation_assy_detail k JOIN salesorderdet s ON s.id = k.refSalesOrderDetID   \n" +
                "						AND k.partId = pPartID  \n" +
                "						AND k.refSalesOrderDetID = pRefSalesOrderDetID                                 \n" +
                "						AND k.isDeleted = 0  AND s.isDeleted = 0;   \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pIsConsolidated = 0) THEN          \n" +
                "		SELECT * FROM          \n" +
                "			(SELECT  z.id AS id, z.refSalesOrderDetID, z.rfqLineItemsAlternateID, z.refRfqLineitem, z.mfgPNID,	z.partid, z.lineID AS _lineID,	z.cust_lineID, z.isBomLine,            \n" +
                "					(CASE          \n" +
                "						WHEN z.custPNID IS NULL THEN NULL          \n" +
                "						ELSE FUN_GETMFGPNBYID(z.custPNID)          \n" +
                "					END) custPN, z.restrictUseInBOMExcludingAliasStep,  z.restrictUseInBOMExcludingAliasWithPermissionStep, z.restrictUseInBOMStep, z.restrictUseInBOMWithPermissionStep,         \n" +
                "					z.isGoodPart, z.restrictPackagingUsePermanently, z.restrictPackagingUseWithpermission, z.restrictUsePermanently, z.restrictUSEwithpermission,          \n" +
                "					z.customerRev,	 z.customerDescription,	 z.qpa,	 z.refDesig, purchaseQty,  \n" +
                "                    FUN_GETUOMBYID(z.uomID) AS uom,          \n" +
                "					(CASE          \n" +
                "						WHEN z.isInstall = 1 THEN 'TRUE'          \n" +
                "						ELSE 'FALSE'          \n" +
                "					END) AS isInstall,          \n" +
                "					(CASE          \n" +
                "						WHEN z.isPurchase = 1 THEN 'TRUE'          \n" +
                "						ELSE 'FALSE'          \n" +
                "					END) AS isPurchase,          \n" +
                "					z.numOfRows,	z.numOfPosition,	z.dnpQty,	z.dnpDesig,          \n" +
                "					(CASE          \n" +
                "						WHEN z.substitutesAllow = 3 THEN 'Yes with Customer Approval'          \n" +
                "						WHEN z.substitutesAllow = 2 THEN 'No'          \n" +
                "						ELSE ''          \n" +
                "					END) AS substitutesAllow,          \n" +
                "					(CASE          \n" +
                "						WHEN z.isBuyDNPQty = 'Y' THEN 'YES'          \n" +
                "						WHEN z.isBuyDNPQty = 'C' THEN 'Customer Consigned'          \n" +
                "						WHEN z.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'          \n" +
                "						ELSE 'NO'          \n" +
                "					END) AS isBuyDNPQty,          \n" +
                "					(CASE          \n" +
                "						WHEN z.programingStatus = 1 THEN 'Pre-Assy'          \n" +
                "						WHEN z.programingStatus = 2 THEN 'Post-Assy'          \n" +
                "						WHEN z.programingStatus = 3 THEN 'Cust will program'          \n" +
                "						WHEN z.programingStatus = 4 THEN 'Pre-Programmed'          \n" +
                "						ELSE 'N/A'          \n" +
                "					END) AS programingStatus,          \n" +
                "					fun_getMfgNameByID(z.mfgCodeID) AS mfgName,		z.mfgPN,	z.customerPartDesc,	z.description AS description,          \n" +
                "					z.PIDCode , z.serialNumber , z.productionPN, z.deviceMarking, IF(z.partPackageID, fun_getPackageCaseNameByID(z.partPackageID), z.partPackage) AS partPackage,   \n" +
                "                    fun_getLatestCutomerCommentByLineWise(z.refRfqLineitem, z.rfqLineItemsAlternateID) AS customerApprovalComment,  \n" +
                "                    z.allocatedQty,		z.allocatedUnit,	z.allocatedPins,          \n" +
                "					(CASE          \n" +
                "						WHEN z.uomMismatchedStep = 0 THEN 0          \n" +
                "						ELSE (IFNULL(purchaseQty, 0) * IFNULL(pKitQty, 0))          \n" +
                "					END) requiredKitQty,          \n" +
                "					(CASE          \n" +
                "						WHEN (z.uomMismatchedStep = 0 OR z.connecterTypeID != - 2) THEN  0  \n" +
                "						ELSE (IFNULL(purchaseQty, 0) * IFNULL(pKitQty, 0) * IFNULL(z.numOfPosition, 0))          \n" +
                "					END) requirePinsKitQty,   \n" +
                "                    (CASE          \n" +
                "						WHEN z.uomMismatchedStep = 0 THEN 0    \n" +
                "						ELSE (IFNULL(purchaseQty, 0) * IFNULL(pAssyQty, 0) * IFNULL(pMrpQty, 0))          \n" +
                "					END) requiredMrpQty,          \n" +
                "					(CASE          \n" +
                "						WHEN (z.uomMismatchedStep = 0 OR z.connecterTypeID != - 2) THEN  0  \n" +
                "						ELSE (IFNULL(purchaseQty, 0) * IFNULL(pAssyQty, 0) * IFNULL(pMrpQty, 0) * IFNULL(z.numOfPosition, 0))          \n" +
                "					END) requirePinsMrpQty,   \n" +
                "                    (CASE          \n" +
                "						WHEN (z.uomMismatchedStep = 0 OR z.isNotRequiredKitAllocation = 1) THEN  0  \n" +
                "						ELSE   \n" +
                "                        CASE WHEN z.connecterTypeID = - 2          \n" +
                "							THEN          \n" +
                "								CASE          \n" +
                "									WHEN (((IFNULL(purchaseQty, 0) * IFNULL(pKitQty, 0) * IFNULL(z.numOfPosition, 0)) - (z.allocatedPins + z.consumePin)) < 0) THEN 0          \n" +
                "									ELSE ((IFNULL(purchaseQty, 0) * IFNULL(pKitQty, 0) * IFNULL(z.numOfPosition, 0)) - (z.allocatedPins + + z.consumePin))          \n" +
                "								END          \n" +
                "							ELSE CASE          \n" +
                "								WHEN (((IFNULL(purchaseQty, 0) * IFNULL(pKitQty, 0)) - (z.allocatedUnit + z.consumeUnits)) < 0) THEN 0          \n" +
                "								ELSE ((IFNULL(purchaseQty, 0) * IFNULL(pKitQty, 0)) - (z.allocatedUnit + z.consumeUnits))          \n" +
                "							END          \n" +
                "						END          \n" +
                "					END) shortagePerKitQty,   \n" +
                "					(CASE          \n" +
                "						WHEN          \n" +
                "							z.uomMismatchedStep = 0          \n" +
                "								OR z.isNotRequiredKitAllocation = 1          \n" +
                "						THEN          \n" +
                "							0          \n" +
                "						ELSE CASE          \n" +
                "							WHEN          \n" +
                "								z.connecterTypeID = - 2          \n" +
                "							THEN          \n" +
                "								CASE          \n" +
                "									WHEN (((IFNULL(purchaseQty, 0) * IFNULL(pAssyQty, 0) * IFNULL(pMrpQty, 0) * IFNULL(z.numOfPosition, 0)) - (z.allocatedPins + z.consumePin)) < 0) THEN 0          \n" +
                "									ELSE ((IFNULL(purchaseQty, 0) * IFNULL(pAssyQty, 0) * IFNULL(pMrpQty, 0) * IFNULL(z.numOfPosition, 0)) - (z.allocatedPins + + z.consumePin))          \n" +
                "								END          \n" +
                "							ELSE CASE         \n" +
                "								WHEN (((IFNULL(purchaseQty, 0) * IFNULL(pAssyQty, 0) * IFNULL(pMrpQty, 0)) - (z.allocatedUnit + z.consumeUnits)) < 0) THEN 0          \n" +
                "								ELSE ((IFNULL(purchaseQty, 0) * IFNULL(pAssyQty, 0) * IFNULL(pMrpQty, 0)) - (z.allocatedUnit + z.consumeUnits))          \n" +
                "							END          \n" +
                "						END          \n" +
                "					END) shortageMrpQty, pKitQty AS kitQty, pMrpQty As mrpQty, pPOQty As poQty, pAssyQty AS qpaMultiplier,  \n" +
                "					SUM(IFNULL(FUN_CONVERTUOM(d.uom, z.uomID, IF(d.customerConsign = 0, IFNULL(d.availableStock, 0), 0)), 0)) availabelStock,          \n" +
                "					SUM(IFNULL(FUN_CONVERTUOM(d.uom, z.uomID, IF(d.customerConsign = 1 AND d.customerID = pCustomerId, IFNULL(d.availableStock, 0), 0)), 0)) availabelStockCustomerConsign    \n" +
                "			FROM          \n" +
                "				(SELECT l.id AS id,	l.refRfqLineitem,	l.refSalesOrderDetID,	al.refRfqLineItemAlternatePartId AS rfqLineItemsAlternateID,	l.partID AS partid,		l.lineID,          \n" +
                "					l.cust_lineID,		l.custPN,		l.custPNID,		l.customerRev,	l.customerDescription, l.qpa,	l.refDesig,		l.numOfPosition,          \n" +
                "					l.programingStatus,		l.substitutesAllow,		IFNULL(d.mfgPN, c.mfgPN) AS mfgPN,	l.uomID,  IFNULL(d.isGoodPart, c.isGoodPart) isGoodPart,           \n" +
                "					IFNULL(d.restrictPackagingUseWithpermission, c.restrictPackagingUseWithpermission) restrictPackagingUseWithpermission,            \n" +
                "					IFNULL(d.restrictPackagingUsePermanently, c.restrictPackagingUsePermanently) restrictPackagingUsePermanently, IF((c.id = IFNULL(d.id, c.id)), TRUE, FALSE) AS isBomLine,        \n" +
                "                    al.restrictUseInBOMExcludingAliasStep,  al.restrictUseInBOMExcludingAliasWithPermissionStep, al.restrictUseInBOMStep, al.restrictUseInBOMWithPermissionStep,      \n" +
                "					IFNULL(d.restrictUsePermanently, c.restrictUsePermanently) restrictUsePermanently, IFNULL(d.restrictUSEwithpermission, c.restrictUSEwithpermission) restrictUSEwithpermission,          \n" +
                "					CONCAT(l.description, '  ', al.description) AS description,		l.isInstall,	l.isPurchase,	l.dnpQty,	l.dnpDesig, IFNULL(d.partPackage, c.partPackage) AS partPackage,         \n" +
                "					l.isBuyDNPQty,		l.numOfRows,	al.uomMismatchedStep,	l.customerPartDesc,		l.isNotRequiredKitAllocation,  IF((c.id = IFNULL(d.id, c.id)),   c.partPackageID,d.partPackageID)  AS partPackageID,     \n" +
                "					IFNULL(d.deviceMarking, c.deviceMarking) AS deviceMarking,   IFNULL(d.serialNumber, c.serialNumber) AS serialNumber,  IFNULL(d.PIDCode, c.PIDCode) AS PIDCode,  IFNULL(d.productionPN, c.productionPN) AS productionPN,    \n" +
                "                    IFNULL(d.id, c.id) AS mfgPNID,	IFNULL(d.mfgcodeID, c.mfgcodeID) AS mfgCodeID,	IFNULL(d.uom, c.uom) AS uom, c.connecterTypeID,          \n" +
                "					IFNULL(d.noOfRows, c.noOfRows) AS noOfRows,		IFNULL(ka.allocatedQty, 0) allocatedQty,	IFNULL(ka.allocatedUnit, 0) allocatedUnit,          \n" +
                "					IFNULL(ka.allocatedPins, 0) allocatedPins,	IFNULL(ka.consumePin, 0) consumePin,	IFNULL(ka.consumeUnits, 0) consumeUnits,	IFNULL(ka.consumeQty, 0) consumeQty,  \n" +
                "                    (CASE WHEN  l.isPurchase = 1 OR l.isInstall = 1          \n" +
                "						THEN          \n" +
                "							(IFNULL(l.qpa, 0) + IF(l.isBuyDNPQty = 'Y'          \n" +
                "								OR l.isBuyDNPQty = 'P'          \n" +
                "								OR l.isBuyDNPQty = 'C', IFNULL(l.dnpQty, 0), 0))          \n" +
                "						ELSE (IF(l.isBuyDNPQty = 'Y'          \n" +
                "							OR l.isBuyDNPQty = 'P'          \n" +
                "							OR l.isBuyDNPQty = 'C', IFNULL(l.dnpQty, 0), 0))          \n" +
                "					END) AS purchaseQty  \n" +
                "			FROM          \n" +
                "				kit_allocation_lineitems l          \n" +
                "			JOIN kit_allocation_lineitems_alternatepart al ON l.id = al.refKitAllocationLineItemId AND l.isDeleted = 0 AND al.isDeleted = 0 AND al.mfgPNID IS NOT NULL          \n" +
                "			JOIN component c ON al.mfgPNID = c.id          \n" +
                "			LEFT JOIN component d ON c.packaginggroupID = d.packaginggroupID          \n" +
                "			LEFT OUTER JOIN vu_kit_allocation_summary ka ON al.refSalesOrderDetID = ka.refSalesOrderDetID          \n" +
                "				AND al.partID = ka.assyID          \n" +
                "				AND al.refRfqLineitem = ka.refBOMLineID          \n" +
                "				AND NOT EXISTS( SELECT  1 FROM          \n" +
                "					kit_allocation_lineitems_alternatepart `x`          \n" +
                "				WHERE x.refRfqLineitem = al.refRfqLineitem AND x.mfgPNID = d.id AND d.id <> c.id AND x.isDeleted = 0)          \n" +
                "			WHERE          \n" +
                "				l.partID = pPartID          \n" +
                "					AND l.refSalesOrderDetID = pRefSalesOrderDetID) z          \n" +
                "            LEFT JOIN vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNID) ELSE mfgPNID END))          \n" +
                "			GROUP BY z.id , z.rfqLineItemsAlternateID, z.refRfqLineitem, z.refSalesOrderDetID, z.mfgPNID, z.partid, isBomLine, z.lineID , z.cust_lineID , z.custPN , z.customerRev ,          \n" +
                "					z.isGoodPart, z.restrictPackagingUsePermanently, z.restrictPackagingUseWithpermission, z.restrictUsePermanently, z.restrictUSEwithpermission,      \n" +
                "					z.restrictUseInBOMExcludingAliasStep,  z.restrictUseInBOMExcludingAliasWithPermissionStep, z.restrictUseInBOMStep, z.restrictUseInBOMWithPermissionStep,      \n" +
                "					z.customerDescription , z.qpa , z.refDesig , z.uomID , z.isInstall , z.isPurchase , z.numOfRows , z.customerPartDesc , z.numOfPosition, z.purchaseQty,        \n" +
                "					z.isNotRequiredKitAllocation , z.dnpQty , z.dnpDesig , z.isBuyDNPQty , z.programingStatus , z.substitutesAllow, z.partPackageID, z.partPackage,  \n" +
                "                    z.PIDCode , z.serialNumber , z.productionPN, z.deviceMarking, z.mfgCodeID , z.mfgPN , z.noOfRows , z.mfgPNID , z.description) a;          \n" +
                "	ELSE          \n" +
                "  \n" +
                "        # Create Temp Table to Get partID from bifurcate consolidated MFR IDs - consolidatedMfgPNIDs          \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_consolidate_Line_alternateparts;                                                                        \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_consolidate_Line_alternateparts AS          \n" +
                "		SELECT  id, refSalesOrderDetid, rfqLineItemsId, consolidatedLineItemIDs,isAssembly,isDeleted,          \n" +
                "		SUBSTRING_INDEX(SUBSTRING_INDEX(a.consolidatedMfgPNIDs, ',', numbers.n), ',', -1) partid          \n" +
                "			FROM (select 1 n union all          \n" +
                "				  select 2 union all           \n" +
                "				  select 3 union all          \n" +
                "				  select 4 union all           \n" +
                "				  select 5 union all          \n" +
                "				  select 6 union all          \n" +
                "				  select 7 union all          \n" +
                "				  select 8 union all          \n" +
                "				  select 9 union all          \n" +
                "				  select 10 union all          \n" +
                "				  select 11 union all          \n" +
                "				  select 12 union all           \n" +
                "				  select 13 union all          \n" +
                "				  select 14 union all           \n" +
                "				  select 15 union all          \n" +
                "				  select 16 union all          \n" +
                "				  select 17 union all          \n" +
                "				  select 18 union all          \n" +
                "				  select 19 union all          \n" +
                "				  select 20 union all          \n" +
                "				  select 21 union all          \n" +
                "				  select 22 union all           \n" +
                "				  select 23 union all          \n" +
                "				  select 24 union all           \n" +
                "				  select 25          \n" +
                "				  ) numbers INNER JOIN  kit_allocation_consolidate_line_detail a           \n" +
                "			   on CHAR_LENGTH(a.consolidatedMfgPNIDs)          \n" +
                "				 -CHAR_LENGTH(REPLACE(a.consolidatedMfgPNIDs, ',', ''))>=numbers.n-1          \n" +
                "			 WHERE refsalesorderdetid = pRefSalesOrderDetID AND isAssembly = 0 AND isDeleted = 0          \n" +
                "			 ORDER BY id, n;          \n" +
                "  \n" +
                "			SELECT * FROM          \n" +
                "				(SELECT c.id,	 refSalesOrderDetID,	partid,		_lineID,	rfqLineItemsId,          \n" +
                "						fun_getMfgNameByPartID(partid) AS mfgName,	FUN_GETMFGPNBYID(partid) AS mfgPN,          \n" +
                "						custPNID,	qpa AS purchaseQty,	consolidatedQPA,	dnpQPA,		isInstall,	  \n" +
                "                        PIDCode , serialNumber , productionPN, deviceMarking, fun_getPackageCaseNameByID(partPackageID) AS partPackage,  \n" +
                "						isGoodPart, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, restrictUsePermanently, restrictUSEwithpermission,	          \n" +
                "						FUN_GETUNITNAMEBYID(uomID) uom,		FUN_GETPARTTYPENAMEBYID(parttypeID) partTypeName,	FUN_GETMOUNTINGTYPENAMEBYID(mountingTypeID) mountingTypeName,          \n" +
                "						numOfPosition,	allocatedQty,	 c.allocatedUnit,	consumeUnits,   pKitQty AS kitQty, pMrpQty As mrpQty, pPOQty As poQty,  \n" +
                "						consumeQty,		consumePin,		allocatedPins,		scrapedPins,	notRequiredKitAllocationReason,   \n" +
                "                        (CASE          \n" +
                "								WHEN uomMismatchedStep = 0 THEN 0          \n" +
                "								ELSE (IFNULL(qpa, 0) * pKitQty)          \n" +
                "						END) AS requiredKitQty,          \n" +
                "							(CASE          \n" +
                "							WHEN          \n" +
                "								(uomMismatchedStep = 1          \n" +
                "									AND c.connecterTypeID = - 2)          \n" +
                "							THEN          \n" +
                "								((IFNULL(qpa, 0) * pKitQty) * IFNULL(numOfPosition, 0))          \n" +
                "							ELSE 0          \n" +
                "						END) AS requirePinsKitQty,   \n" +
                "                         (CASE          \n" +
                "								WHEN uomMismatchedStep = 0 THEN 0          \n" +
                "								ELSE (IFNULL(qpa, 0) * pMrpQty)          \n" +
                "						END) AS requiredMrpQty,          \n" +
                "							(CASE          \n" +
                "							WHEN          \n" +
                "								(uomMismatchedStep = 1          \n" +
                "									AND c.connecterTypeID = - 2)          \n" +
                "							THEN          \n" +
                "								((IFNULL(qpa, 0) * pMrpQty) * IFNULL(numOfPosition, 0))          \n" +
                "							ELSE 0          \n" +
                "						END) AS requirePinsMrpQty,   \n" +
                "						(CASE          \n" +
                "							WHEN custPNID IS NULL THEN NULL          \n" +
                "							ELSE FUN_GETMFGPNBYID(custPNID)          \n" +
                "						END) custPN,   \n" +
                "                        (CASE          \n" +
                "							WHEN isNotRequiredKitAllocation = 1 THEN 'Yes'          \n" +
                "							ELSE 'No'          \n" +
                "						END) AS isNotRequiredKitAllocationValue,          \n" +
                "						(CASE          \n" +
                "							WHEN          \n" +
                "								uomMismatchedStep = 0          \n" +
                "									OR isNotRequiredKitAllocation = 1          \n" +
                "							THEN          \n" +
                "								0          \n" +
                "							ELSE CASE          \n" +
                "								WHEN          \n" +
                "									c.connecterTypeID = - 2          \n" +
                "								THEN          \n" +
                "									CASE          \n" +
                "										WHEN (((IFNULL(c.qpa, 0) * pKitQty * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0          \n" +
                "										ELSE ((IFNULL(c.qpa, 0) * pKitQty * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin))          \n" +
                "									END          \n" +
                "								ELSE CASE          \n" +
                "									WHEN (((IFNULL(c.qpa, 0) * pKitQty) - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0          \n" +
                "									ELSE ((IFNULL(c.qpa, 0) * pKitQty) - (c.allocatedUnit + c.consumeUnits))          \n" +
                "								END          \n" +
                "							END          \n" +
                "						END) shortagePerKitQty,  \n" +
                "						(CASE          \n" +
                "							WHEN          \n" +
                "								uomMismatchedStep = 0          \n" +
                "									OR isNotRequiredKitAllocation = 1          \n" +
                "							THEN          \n" +
                "								0          \n" +
                "							ELSE CASE          \n" +
                "								WHEN          \n" +
                "									c.connecterTypeID = - 2          \n" +
                "								THEN          \n" +
                "									CASE          \n" +
                "										WHEN (((IFNULL(c.qpa, 0) * pMrpQty * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0          \n" +
                "										ELSE ((IFNULL(c.qpa, 0) * pMrpQty * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin))          \n" +
                "									END          \n" +
                "								ELSE CASE          \n" +
                "									WHEN (((IFNULL(c.qpa, 0) * pMrpQty) - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0          \n" +
                "									ELSE ((IFNULL(c.qpa, 0) * pMrpQty) - (c.allocatedUnit + c.consumeUnits))          \n" +
                "								END          \n" +
                "							END          \n" +
                "						END) shortageMrpQty          \n" +
                "				FROM          \n" +
                "					(SELECT      a.id,		a.lineId AS _lineID,	a.refSalesOrderDetId refSalesOrderDetID,	b.partid,          \n" +
                "							a.rfqLineItemsId,		a.consolidatedpartlineID,	a.consolidateRestrictPartDetail,	a.ConsolidatedLineItemIDs,          \n" +
                "							a.custPNID,		a.isNotRequiredKitAllocation,		a.notRequiredKitAllocationReason,	 a.uomMismatchedStep,          \n" +
                "							a.consolidatedMfgPNIDs mfgPart,		IFNULL(a.kitQPAWithDNP, 0) qpa,		IFNULL(a.kitQPAWithDNP, 0) consolidatedQPA,          \n" +
                "							IFNULL(a.kitDNPWithoutQPA, 0) dnpQPA,	a.uomID,	a.isInstall,	a.connecterTypeID,	 a.partType parttypeID,          \n" +
                "							a.mountingTypeID,	a.numOfPosition,  b.partPackageID,  b.deviceMarking, b.serialNumber, b.PIDCode, b.productionPN,  \n" +
                "							b.isGoodPart, b.restrictPackagingUsePermanently, b.restrictPackagingUseWithpermission, b.restrictUsePermanently, b.restrictUSEwithpermission,    \n" +
                "							IFNULL(b.allocatedQty, 0) allocatedQty,		IFNULL(b.allocatedUnit, 0) allocatedUnit,	IFNULL(b.consumeUnits, 0) consumeUnits,          \n" +
                "							IFNULL(b.consumeQty, 0) consumeQty,		IFNULL(b.allocatedPins, 0) allocatedPins,	IFNULL(b.consumePin, 0) consumePin,		IFNULL(b.scrapedPins, 0) scrapedPins          \n" +
                "				FROM          \n" +
                "					kit_allocation_consolidate_Line_detail a          \n" +
                "				INNER JOIN (SELECT  a.refSalesOrderDetid,	a.rfqLineItemsId,	a.consolidatedLineItemIDs,	a.partid,   c.partPackageID,  c.deviceMarking, c.serialNumber, c.PIDCode,       \n" +
                "						c.isGoodPart, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.restrictUsePermanently, c.restrictUSEwithpermission,          \n" +
                "                        SUM(b.allocatedQty) allocatedQty,	SUM(b.allocatedunit) allocatedUnit,	SUM(b.AllocatedPins) allocatedPins, c.productionPN,    \n" +
                "						SUM(b.ConsumeQty) consumeQty,	SUM(b.ConsumeUnits) consumeUnits,	SUM(b.consumePin) consumePin,	SUM(b.scrapedPins) scrapedPins          \n" +
                "				FROM          \n" +
                "					temp_consolidate_Line_alternateparts a          \n" +
                "				JOIN component c ON a.partid = c.id          \n" +
                "				LEFT JOIN vu_kit_allocation_summary b ON a.refsalesORderDetid = b.refsalesOrderDetId          \n" +
                "					AND FIND_IN_SET(b.refBOMLineID, a.consolidatedLineItemIDs)          \n" +
                "				GROUP BY a.refSalesOrderDetid , a.rfqLineItemsId , a.partid) b ON a.refSalesOrderDetId = b.refSalesOrderDetId          \n" +
                "					AND a.rfqLineItemsId = b.rfqLineItemsId          \n" +
                "					AND a.consolidatedLineItemIDs = b.consolidatedLineItemIDs          \n" +
                "				WHERE a.refSalesOrderDetID = pRefSalesOrderDetID AND a.isAssembly = 0 AND a.isDeleted = 0) AS c          \n" +
                "				LEFT JOIN vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, mfgPart)          \n" +
                "				GROUP BY c.id , _lineID , refSalesOrderDetID , custPNID , isNotRequiredKitAllocation , uomMismatchedStep , qpa ,  rfqLineItemsId,       \n" +
                "						consolidatedQPA , dnpQPA , uomID , isInstall , c.connecterTypeID , parttypeID , mountingTypeID , numOfPosition ,  \n" +
                "						partPackageID,  deviceMarking, serialNumber, PIDCode, productionPN,  \n" +
                "						isGoodPart, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, restrictUsePermanently, restrictUSEwithpermission,           \n" +
                "						notRequiredKitAllocationReason, allocatedQty , allocatedUnit , consumeUnits , consumeQty , allocatedPins , scrapedPins , c.partid           \n" +
                "				order by _lineID) AS mainQuery; 				          \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_consolidate_Line_alternateparts;           \n" +
                "    END IF;          \n" +
                "END;  \n" +
                /* **************************** New Script -> 03-05-2021  *********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_shipped_report` ;  \n" +
                "CREATE VIEW `vu_salesorder_shipped_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyCode` AS `Company Code`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN ((IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) > 0) THEN 'In Progress'  \n" +
                "            ELSE 'Completed'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`kitNumber` AS `kitNumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`  \n" +
                "    FROM  \n" +
                "        (SELECT   \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`createdAt`) AS `createdDate`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
                "                (SELECT   \n" +
                "                        1  \n" +
                "                    FROM  \n" +
                "                        `workorder_salesorder_details` `x`  \n" +
                "                    WHERE  \n" +
                "                        ((`x`.`salesOrderDetailID` = `a`.`id`)  \n" +
                "                            AND (`x`.`isDeleted` = 0))  \n" +
                "                    LIMIT 1) AS `wosalesOrderDetail`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `cu`.`mfgCode` AS `companyCode`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitNumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                (SELECT   \n" +
                "                        MIN(`ssm`.`shippingDate`)  \n" +
                "                    FROM  \n" +
                "                        `salesshippingmst` `ssm`  \n" +
                "                    WHERE  \n" +
                "                        ((`ssm`.`sDetID` = `a`.`id`)  \n" +
                "                            AND (`ssm`.`isDeleted` = 0))) AS `shippingDate`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                (SELECT   \n" +
                "                        IFNULL(SUM(`shippedassembly`.`shippedqty`), 0)  \n" +
                "                    FROM  \n" +
                "                        `shippedassembly`  \n" +
                "                    WHERE  \n" +
                "                        ((`shippedassembly`.`partID` = `a`.`partID`)  \n" +
                "                            AND (`shippedassembly`.`isDeleted` = 0)  \n" +
                "                            AND `shippedassembly`.`shippingId` IN (SELECT   \n" +
                "                                `salesshippingmst`.`shippingID`  \n" +
                "                            FROM  \n" +
                "                                `salesshippingmst`  \n" +
                "                            WHERE  \n" +
                "                                ((`salesshippingmst`.`sDetID` = `a`.`id`)  \n" +
                "                                    AND (IFNULL(`salesshippingmst`.`isDeleted`, 0) = 0))))) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            ((((((`salesorderdet` `a`  \n" +
                "        JOIN `salesordermst` `sm` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (IFNULL(`sm`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (IFNULL(`cu`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON (((`a`.`partID` = `co`.`id`)  \n" +
                "            AND (IFNULL(`co`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (IFNULL(`roh`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (IFNULL(`cc`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (IFNULL(`gc`.`isDeleted`, 0) = 0))))  \n" +
                "        WHERE  \n" +
                "            ((`a`.`isDeleted` = 0)  \n" +
                "                AND (`a`.`partCategory` = 3))) `a`;  \n" +
                /* **************************** New Script -> 03-05-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPOSOAssemblyList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPOSOAssemblyList`(      \n" +
                "pExcludeCanceled TINYINT,      \n" +
                "pSalesOrderDetailID INT,      \n" +
                "pSearch VARCHAR(500)     \n" +
                ")  \n" +
                "BEGIN                                                     \n" +
                "	SET @SQLStatement1 =\"SELECT 	      \n" +
                "    `Sales Order ID`,  `Sales Order`, 	    `Po Number`,    `Assy ID`,    `Sales Order Status`, 	      \n" +
                "	`Status`, 	   `SalesOrderDetailId`, 	`PartID`, `Customer ID`,      `Assy Name`, 	      \n" +
                "    `NickName`,    `PO Qty`,             	`mrpQty`,     `kitQty`,       `RoHSName`, 		      \n" +
                "    `RohsIcon`,   `materialDueDate`,  `shippingDate`,  `Company Name`, 	  `Po Date`,               \n" +
                "	`kitNumber`,  `status`, `isSkipKitCreation`,  `Company Code`,  \n" +
                "	(SELECT COUNT(1) FROM kit_allocation_assy_detail kasd WHERE kasd.refSalesOrderDetID = vusr.SalesOrderDetailId AND deletedAt IS NULL AND bomAssyLevel > 0) numberOfSubAssy                  \n" +
                "	FROM 	vu_salesorder_shipped_report vusr WHERE isSkipKitCreation !=1 \";      \n" +
                "  \n" +
                "    IF(pExcludeCanceled=1) THEN      \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1,\" AND `status` != 'Canceled'\");          \n" +
                "    END IF;      \n" +
                "	IF(pSearch IS NOT NULL AND pSearch != '') THEN      \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1,\" AND     \n" +
                "							(`Assy ID` LIKE  '%\", pSearch ,\"%' OR     \n" +
                "                            `Po Number` LIKE '%\", pSearch ,\"%' OR     \n" +
                "                            `Sales Order` LIKE '%\", pSearch ,\"%' OR    \n" +
                "                            `PO Qty` LIKE '%\", pSearch ,\"%') \");          \n" +
                "    END IF;      \n" +
                "	IF(pSalesOrderDetailID IS NOT NULL) THEN      \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1,\" AND `SalesOrderDetailId` = \",pSalesOrderDetailID,\" \");          \n" +
                "    END IF;      \n" +
                "  \n" +
                "	-- AND `Sales Order Status` = TRUE;                 \n" +
                "  \n" +
                "	PREPARE mainQuery FROM @SQLStatement1;                                                                                                                                  \n" +
                "	EXECUTE mainQuery;                                                                                                                                  \n" +
                "	DEALLOCATE PREPARE mainQuery;               \n" +
                "END;  \n" +
                /* **************************** New Script -> 03-05-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4550,'2.00','V1',' #32598 Improvement Points - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4550:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-05-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_CreateConsolidateDataForPart`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateConsolidateDataForPart`(              \n" +
                "	IN prfqAssyIDORrefSalesOrderdetID INT,              \n" +
                "    IN ppartID INT              \n" +
                ")  \n" +
                "BEGIN                 \n" +
                "DECLARE v_GroupConcatSeparator text;        \n" +
                "	SET SESSION group_concat_max_len = 500000;       \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;          \n" +
                "       -- Create leavel wise assembly BOM data                \n" +
                "        DROP TEMPORARY TABLE IF EXISTS leveldata;              \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS leveldata AS              \n" +
                "		WITH RECURSIVE cte AS              \n" +
                "		(              \n" +
                "			(              \n" +
                "				SELECT rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id AS lineItemID,rla.id AS alternateID,1 AS LEVEL, com.category,rla.rfqLineItemsID, rl.valueAddedCost,              \n" +
                "				rl.refRFQLineItemID, rl.refDesig,IFNULL(rl.qpa,0) AS qpacount, IFNULL(rl.qpa,0) AS kitqpacount, IFNULL(rl.dnpQty,0) dnpQty, IFNULL(rl.dnpQty,0) kitdnpQty,               \n" +
                "                rl.dnpDesig, IFNULL(rl.dnpDesigCount,0) actualdnpDesigCount, rl.isBuyDNPQty, IFNULL(rl.qpa,0) AS actualQPA, IFNULL(rl.refDesigCount,0) AS actualDesgCount,              \n" +
                "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END) ELSE IFNULL(rl.qpa,0) END) AS qpa1,              \n" +
                "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END) ELSE IFNULL(rl.qpa,0) END) AS kitqpa1,              \n" +
                "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END) ELSE IFNULL(rl.dnpQty,0) END) AS dnpQPA1,              \n" +
                "				(CASE WHEN rl.uomID = -1 THEN (CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END) ELSE IFNULL(rl.dnpQty,0) END) AS kitdnpQPA1,              \n" +
                "				IFNULL(rl.refDesigCount,0) refDesigCount, IFNULL(rl.refDesigCount,0) kitrefDesigCount, IFNULL(rl.dnpDesigCount,0) dnpDesigCount, IFNULL(rl.dnpDesigCount,0) kitdnpDesigCount, rl.qpaDesignatorStep, rl.custPNID,              \n" +
                "				IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep,IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep, IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,              \n" +
                "				CONCAT(rl.custPNID,' | ',IFNULL(rl.restrictCPNUseInBOMStep,0),' | ',IFNULL(rl.restrictCPNUsePermanentlyStep,1),' | ',IFNULL(rl.restrictCPNUseWithPermissionStep,1)) CPNPart,              \n" +
                "				/*              \n" +
                "				CONCAT(rla.mfgCodeID,' | ', rla.mfgPNID,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',              \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',              \n" +
                "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) AS part,              \n" +
                "				*/              \n" +
                "				IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) restrictUseInBOMExcludingAliasStep,              \n" +
                "				IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) restrictUseInBOMExcludingAliasWithPermissionStep,              \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0) restrictUseInBOMStep,              \n" +
                "				IFNULL(rla.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,              \n" +
                "				IFNULL(rla.restrictUseExcludingAliasStep,1) restrictUseExcludingAliasStep,              \n" +
                "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) restrictUseExcludingAliasWithPermissionStep,              \n" +
                "				IFNULL(rla.restrictUsePermanentlyStep,1) restrictUsePermanentlyStep,              \n" +
                "				IFNULL(rla.restrictUseWithPermissionStep,1) restrictUseWithPermissionStep,              \n" +
                "				/* we not required this in functionaly this will be used for check in detail              \n" +
                "				concat(rla.mfgCode,' | ',rla.mfgPN,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',              \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',              \n" +
                "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) as partcode,              \n" +
                "				*/              \n" +
                "				rl.attritionRate,rl.isInstall, rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,rl.isActive,rl.isNoBidsPN,rl.isDraft,rl.lineID,rl.numOfPosition, prfqAssyIDORrefSalesOrderdetID AS rfqAssyIDORrefSalesOrderdetID,              \n" +
                "				rl.uomID,rl.rfqAssyBomID, fun_getAssyPIDCodeByID(rl.partID) PIDCode, com.liveVersion, rl.isNotRequiredKitAllocation,              \n" +
                "                (CASE WHEN rl.isNotRequiredKitAllocation = 1 THEN              \n" +
                "					(SELECT COMMENT FROM rfq_lineitems_approval_comment WHERE errorcode = 19 AND rfqLineItemsID IS NOT NULL ORDER BY id DESC LIMIT 1)              \n" +
                "				ELSE '' END) AS notRequiredKitAllocationReason,              \n" +
                "                rla.approvedMountingType,rla.mismatchMountingTypeStep,rla.uomMismatchedStep,rla.mismatchFunctionalCategoryStep, com.connecterTypeID              \n" +
                "				FROM  rfq_lineitems rl              \n" +
                "				INNER JOIN rfq_lineitems_alternatepart rla ON rla.rfqLineItemsID = rl.id AND rl.isDeleted = 0              \n" +
                "				INNER JOIN component com ON com.id = rla.mfgPNID and com.isGoodPart <> 2      \n" +
                "				INNER JOIN component comp ON comp.id = rl.partID              \n" +
                "				WHERE rl.partId = ppartID  AND ifnull(rla.mfgGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodPartStep,1) = 1 and ifnull(rla.distGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodDistPartStep,1) = 1 AND rla.isDeleted = 0              \n" +
                "			)              \n" +
                "			UNION ALL              \n" +
                "			(              \n" +
                "				SELECT rl.partID,rla.mfgPNID, rla.mfgPN, rla.mfgCodeID, rla.mfgCode, rl.id AS lineItemID,rla.id AS alternateID,cte.level+1 AS LEVEL, com.category,rla.rfqLineItemsID,               \n" +
                "				rl.valueAddedCost, rl.refRFQLineItemID, rl.refDesig,              \n" +
                "				(              \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN              \n" +
                "							(cte.dnpQPA1 + cte.qpa1)              \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN              \n" +
                "							(cte.qpa1) 						                \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN              \n" +
                "							(cte.dnpQPA1)              \n" +
                "					END) * IFNULL(rl.qpa,0)              \n" +
                "				) AS qpacount,               \n" +
                "                (              \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN                       \n" +
                "							0              \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN              \n" +
                "							(cte.qpa1)              \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN              \n" +
                "							(cte.dnpQPA1)              \n" +
                "						ELSE              \n" +
                "							(cte.dnpQPA1 + cte.qpa1)              \n" +
                "					END) * IFNULL(rl.qpa,0)                  \n" +
                "				) AS kitqpacount,               \n" +
                "				(              \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN              \n" +
                "							(cte.dnpQPA1 + cte.qpa1)              \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN              \n" +
                "							(cte.qpa1)              \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN              \n" +
                "							(cte.dnpQPA1)              \n" +
                "					END) * IFNULL(rl.dnpQty,0)              \n" +
                "				) AS dnpQty,              \n" +
                "                (              \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN              \n" +
                "							0              \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN              \n" +
                "							(cte.qpa1)              \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN              \n" +
                "							(cte.dnpQPA1)              \n" +
                "						ELSE              \n" +
                "							(cte.dnpQPA1 + cte.qpa1)              \n" +
                "					END) * IFNULL(rl.dnpQty,0)              \n" +
                "				) AS kitdnpQty,              \n" +
                "				rl.dnpDesig, IFNULL(rl.dnpDesigCount,0) actualdnpDesigCount, rl.isBuyDNPQty, IFNULL(rl.qpa,0) AS actualQPA, IFNULL(rl.refDesigCount,0) AS actualDesgCount,              \n" +
                "				(              \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN              \n" +
                "							(cte.dnpQPA1 + cte.qpa1)              \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN              \n" +
                "							(cte.qpa1)              \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN              \n" +
                "							(cte.dnpQPA1)              \n" +
                "					END)*              \n" +
                "					(CASE WHEN rl.uomID = -1 THEN              \n" +
                "						(CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN              \n" +
                "								IFNULL(rl.refDesigCount,0)              \n" +
                "							ELSE IFNULL(rl.qpa,0)              \n" +
                "						END)              \n" +
                "						ELSE IFNULL(rl.qpa,0)              \n" +
                "					END)              \n" +
                "				) AS qpa1,              \n" +
                "                (              \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN              \n" +
                "							0              \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN              \n" +
                "							(cte.qpa1)              \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN              \n" +
                "							(cte.dnpQPA1)              \n" +
                "						ELSE              \n" +
                "							(cte.dnpQPA1 + cte.qpa1)              \n" +
                "					END)*              \n" +
                "                    (CASE WHEN rl.uomID = -1 THEN              \n" +
                "						(CASE WHEN IFNULL(rl.qpa,0) < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE IFNULL(rl.qpa,0) END)              \n" +
                "					ELSE               \n" +
                "						IFNULL(rl.qpa,0)              \n" +
                "                    END)              \n" +
                "				) AS kitqpa1,              \n" +
                "				(              \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN              \n" +
                "							(cte.dnpQPA1 + cte.qpa1)              \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN              \n" +
                "							(cte.qpa1)              \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN              \n" +
                "							(cte.dnpQPA1)              \n" +
                "					END)*              \n" +
                "					(CASE WHEN rl.uomID = -1 THEN               \n" +
                "						(CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN               \n" +
                "								IFNULL(rl.dnpDesigCount,0)               \n" +
                "							ELSE IFNULL(rl.dnpQty,0)               \n" +
                "						END)               \n" +
                "						ELSE IFNULL(rl.dnpQty,0)               \n" +
                "					END)              \n" +
                "				) AS dnpQPA1,              \n" +
                "                (              \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN              \n" +
                "							0              \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN              \n" +
                "							(cte.qpa1)              \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN              \n" +
                "							(cte.dnpQPA1)              \n" +
                "						ELSE              \n" +
                "							(cte.dnpQPA1 + cte.qpa1)              \n" +
                "					END) *               \n" +
                "                    (CASE WHEN rl.uomID = -1 THEN              \n" +
                "						(CASE WHEN IFNULL(rl.dnpQty,0) < IFNULL(rl.dnpDesigCount,0) THEN IFNULL(rl.dnpDesigCount,0) ELSE IFNULL(rl.dnpQty,0) END)              \n" +
                "					ELSE              \n" +
                "						IFNULL(rl.dnpQty,0)              \n" +
                "					END)              \n" +
                "				) AS kitdnpQPA1,                \n" +
                "				(              \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN              \n" +
                "							(cte.dnpQPA1 + cte.qpa1)              \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN              \n" +
                "							(cte.qpa1)              \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN              \n" +
                "							(cte.dnpQPA1)              \n" +
                "					END) *               \n" +
                "					IFNULL(rl.refDesigCount,0)              \n" +
                "				) refDesigCount,              \n" +
                "                (              \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN              \n" +
                "							0              \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN              \n" +
                "							(cte.qpa1)              \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN              \n" +
                "							(cte.dnpQPA1)              \n" +
                "						ELSE              \n" +
                "							(cte.dnpQPA1 + cte.qpa1)              \n" +
                "					END) * IFNULL(rl.refDesigCount,0)              \n" +
                "				) AS kitrefDesigCount,              \n" +
                "				(              \n" +
                "					(CASE WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN              \n" +
                "							(cte.dnpQPA1 + cte.qpa1)              \n" +
                "						WHEN cte.isPurchase = 1 AND (cte.isBuyDNPQty = 'N' OR cte.isBuyDNPQty = 'C') THEN              \n" +
                "							(cte.qpa1)              \n" +
                "						WHEN cte.isPurchase = 0 AND (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P') THEN              \n" +
                "							(cte.dnpQPA1)              \n" +
                "					END) *              \n" +
                "					IFNULL(rl.dnpDesigCount,0)              \n" +
                "				) dnpDesigCount,              \n" +
                "                (              \n" +
                "					(CASE WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty = 'N')) THEN              \n" +
                "							0              \n" +
                "						WHEN ((cte.isPurchase = 1 OR cte.isInstall = 1) AND (cte.isBuyDNPQty = 'N')) THEN              \n" +
                "							(cte.qpa1)              \n" +
                "						WHEN (cte.isPurchase = 0 AND cte.isInstall = 0 AND (cte.isBuyDNPQty <> 'N')) THEN              \n" +
                "							(cte.dnpQPA1)              \n" +
                "						ELSE              \n" +
                "							(cte.dnpQPA1 + cte.qpa1)              \n" +
                "					END) *              \n" +
                "					IFNULL(rl.dnpDesigCount,0)              \n" +
                "				) kitdnpDesigCount,              \n" +
                "				(CASE WHEN rl.qpaDesignatorStep != cte.qpaDesignatorStep THEN               \n" +
                "						1               \n" +
                "					ELSE rl.qpaDesignatorStep               \n" +
                "				END) AS qpaDesignatorStep ,              \n" +
                "				rl.custPNID, IFNULL(rl.restrictCPNUseInBOMStep,0) restrictCPNUseInBOMStep, IFNULL(rl.restrictCPNUsePermanentlyStep,1) restrictCPNUsePermanentlyStep,               \n" +
                "				IFNULL(rl.restrictCPNUseWithPermissionStep,1) restrictCPNUseWithPermissionStep,              \n" +
                "				CONCAT(rl.custPNID,' | ',IFNULL(rl.restrictCPNUseInBOMStep,0),' | ',IFNULL(rl.restrictCPNUsePermanentlyStep,1),' | ',IFNULL(rl.restrictCPNUseWithPermissionStep,1)) CPNPart,              \n" +
                "				/* CONCAT(rla.mfgCodeID,' | ', rla.mfgPNID,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) ,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) ,' | ',              \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0),' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0) ,' | ',IFNULL(rla.restrictUseExcludingAliasStep,1) ,' | ',IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) ,' | ',              \n" +
                "				IFNULL(rla.restrictUsePermanentlyStep,1) ,' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) AS part,*/              \n" +
                "				IFNULL(rla.restrictUseInBOMExcludingAliasStep,0) restrictUseInBOMExcludingAliasStep,              \n" +
                "				IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0) restrictUseInBOMExcludingAliasWithPermissionStep,              \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0) restrictUseInBOMStep,               \n" +
                "				IFNULL(rla.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,              \n" +
                "				IFNULL(rla.restrictUseExcludingAliasStep,1) restrictUseExcludingAliasStep,              \n" +
                "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1) restrictUseExcludingAliasWithPermissionStep,              \n" +
                "				IFNULL(rla.restrictUsePermanentlyStep,1) restrictUsePermanentlyStep,              \n" +
                "				IFNULL(rla.restrictUseWithPermissionStep,1) restrictUseWithPermissionStep,              \n" +
                "				#com.packaginggroupID,              \n" +
                "				/* we not required this in functionaly this will be used for check in detail              \n" +
                "				concat(rla.mfgCode,' | ',rla.mfgPN,' | ',IFNULL(rla.restrictUseInBOMExcludingAliasStep,0), ' | ',IFNULL(rla.restrictUseInBOMExcludingAliasWithPermissionStep,0),' | ',              \n" +
                "				IFNULL(rla.restrictUseInBOMStep,0), ' | ',IFNULL(rla.restrictUseInBOMWithPermissionStep,0),' | ',IFNULL(rla.restrictUseExcludingAliasStep,1),' | ',              \n" +
                "				IFNULL(rla.restrictUseExcludingAliasWithPermissionStep,1),' | ',IFNULL(rla.restrictUsePermanentlyStep,1),' | ',IFNULL(rla.restrictUseWithPermissionStep,1)) as partcode,              \n" +
                "				*/              \n" +
                "				rl.attritionRate,rl.isInstall, rl.isPurchase,rl.partclassID,rl.partTypeID,rl.leadQty,rl.isActive,rl.isNoBidsPN,rl.isDraft,rl.lineID,rl.numOfPosition, prfqAssyIDORrefSalesOrderdetID AS rfqAssyIDORrefSalesOrderdetID,              \n" +
                "				rl.uomID,rl.rfqAssyBomID,fun_getAssyPIDCodeByID(rl.partID) PIDCode, com.liveVersion,rl.isNotRequiredKitAllocation,              \n" +
                "                (CASE WHEN rl.isNotRequiredKitAllocation = 1 THEN              \n" +
                "					(SELECT COMMENT FROM rfq_lineitems_approval_comment WHERE errorcode = 19 AND rfqLineItemsID IS NOT NULL ORDER BY id DESC LIMIT 1)              \n" +
                "				ELSE '' END) AS notRequiredKitAllocationReason,              \n" +
                "                rla.approvedMountingType,rla.mismatchMountingTypeStep,rla.uomMismatchedStep,rla.mismatchFunctionalCategoryStep,com.connecterTypeID              \n" +
                "				FROM  rfq_lineitems rl              \n" +
                "				INNER JOIN rfq_lineitems_alternatepart rla ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0              \n" +
                "				INNER JOIN component com ON com.id = rla.mfgPNID and com.isGoodPart <> 2             \n" +
                "				INNER JOIN component comp ON comp.id = rl.partID              \n" +
                "				JOIN cte cte ON cte.category = 3 AND rl.partID = cte.mfgPNID AND (cte.isPurchase = 1 OR (cte.isBuyDNPQty = 'Y' OR cte.isBuyDNPQty = 'P'))              \n" +
                "				WHERE ifnull(rla.mfgGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodPartStep,1) = 1 and ifnull(rla.distGoodPartMappingStep,1) = 1 and ifnull(rla.suggestedGoodDistPartStep,1) = 1 AND rla.isDeleted =0              \n" +
                "			)              \n" +
                "		)              \n" +
                "		SELECT cte.* FROM cte              \n" +
                "		ORDER BY lineItemID;              \n" +
                "  \n" +
                "	-- Create Temporary table for Alternate part with packaging alias grouping by lineitem              \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseAlternatepartwithPackagingGroup;              \n" +
                "		set @consolidateAlternatePartDetail = concat(\"CREATE TEMPORARY TABLE temp_LevleWiseAlternatepartwithPackagingGroup AS              \n" +
                "		SELECT a.rfqAssyIDORrefSalesOrderdetID, a.level, a.category, a.rfqlineitemsid, a.partid,              \n" +
                "        (CASE WHEN MIN(a.mountingTypeID) = MAX(a.mountingTypeID) THEN  /* Matched Mounting Type */              \n" +
                "					MIN(a.mountingTypeID)               \n" +
                "			WHEN MIN(a.mountingTypeID) !=  MAX(a.mountingTypeID)  AND MAX(approvedMountingType) = 1 THEN /*Mismatched with Approval Mounting Type */               \n" +
                "					MAX(approvedMountingTypeID)               \n" +
                "			ELSE  -1  /*-1 is TBD in case of Mismatched we need to display TBD mounting type*/ END) mountingtypeID,              \n" +
                "         (CASE WHEN MIN(a.partType) = MAX(a.partType) THEN /* Matched funcitonal Type */              \n" +
                "			MIN(a.partType)               \n" +
                "		ELSE               \n" +
                "			-1   /*-1 is TBD in case of Mismatched we need to display TBD functional type*/              \n" +
                "		END) partType,              \n" +
                "        (CASE WHEN MIN(a.connecterTypeID) = MAX(a.connecterTypeID) THEN  /* Matched connector Type */              \n" +
                "			MIN(a.connecterTypeID)              \n" +
                "		ELSE               \n" +
                "			-1  /*-1 is TBD in case of Mismatched we need to display TBD connector type*/              \n" +
                "		END) AS connecterTypeID,              \n" +
                "        MIN(a.uomMismatchedStep) AS uomMismatchedStep, MIN(a.mismatchFunctionalCategoryStep) AS mismatchFunctionalCategoryStep , MIN(a.mismatchMountingTypeStep) AS mismatchMountingTypeStep,              \n" +
                "        GROUP_CONCAT(a.mfgPNID ORDER BY a.mfgPNID) AS mfgpnIDs,              \n" +
                "        GROUP_CONCAT(CONCAT(a.mfgCodeID, ' | ', a.mfgPNID, ' | ', a.restrictUseInBOMExcludingAliasStep, ' | ',              \n" +
                "						a.restrictUseInBOMExcludingAliasWithPermissionStep, ' | ', a.restrictUseInBOMStep, ' | ',              \n" +
                "						a.restrictUseInBOMWithPermissionStep, ' | ', a.restrictUseExcludingAliasStep, ' | ',              \n" +
                "						a.restrictUseExcludingAliasWithPermissionStep, ' | ', a.restrictUsePermanentlyStep, ' | ',              \n" +
                "						a.restrictUseWithPermissionStep, ' | ', a.connecterTypeID, ' | ', a.partType, ' | ',a.mountingTypeID, ' | ',         \n" +
                "                        a.approvedMountingType ) ORDER BY mfgPNID SEPARATOR '\",v_GroupConcatSeparator,\"') Part,              \n" +
                "		GROUP_CONCAT(CONCAT('{ Level:', a.level, ' | AssyID:', a.AssyID, ' | Item:', TRIM(a.lineID) + 0, ' | PIDCode:', FUN_GETASSYPIDCODEBYID(a.mfgPNID),              \n" +
                "						' | mfgPNID: ', a.mfgPNID, ' | restrictUseInBOMExcludingAliasStep: ', a.restrictUseInBOMExcludingAliasStep,               \n" +
                "						' | restrictUseInBOMExcludingAliasWithPermissionStep:', a.restrictUseInBOMExcludingAliasWithPermissionStep, ' | restrictUseInBOMStep:', a.restrictUseInBOMStep,              \n" +
                "						' | restrictUseInBOMWithPermissionStep:', a.restrictUseInBOMWithPermissionStep, ' | restrictUseExcludingAliasStep:', a.restrictUseExcludingAliasStep,              \n" +
                "						' | restrictUseExcludingAliasWithPermissionStep:', a.restrictUseExcludingAliasWithPermissionStep, ' | restrictUsePermanentlyStep:', a.restrictUsePermanentlyStep,              \n" +
                "						' | restrictUseWithPermissionStep:', a.restrictUseWithPermissionStep, ' |Connector Type:', fun_getConnectorTypeNameByID(a.connecterTypeID) ,        \n" +
                "                        ' | Functional Type:', fun_getPartTypeNameByID(a.partType), ' | Mounting Type:', fun_getMountingTypeNameByID(a.mountingTypeID),         \n" +
                "                        ' | Approved Mounting Type:', approvedMountingTypeName,'}') ORDER BY mfgPNID SEPARATOR '\",v_GroupConcatSeparator,\"') AS mfgPartsWithPackagings              \n" +
                "		FROM               \n" +
                "			(SELECT x.rfqAssyIDORrefSalesOrderdetID, x.level, x.category, x.rfqlineitemsid, x.partid, x.AssyID, x.lineid, x.mfgPNID, x.mfgCodeID, x.mfgPN,              \n" +
                "					x.PIDCode, x.RoHSStatusID, x.feature, x.isCustom, x.partStatus, x.restrictUseInBOMStep, x.restrictUseInBOMWithPermissionStep,              \n" +
                "					x.restrictUsePermanentlyStep, x.restrictUseWithPermissionStep, x.restrictUseInBOMExcludingAliasStep, x.restrictUseInBOMExcludingAliasWithPermissionStep,              \n" +
                "					x.restrictUseExcludingAliasStep, x.restrictUseExcludingAliasWithPermissionStep, x.isDocumentUpload, x.mountingTypeID, x.partType,              \n" +
                "                    x.connecterTypeID, x.uomMismatchedStep, x.mismatchFunctionalCategoryStep, x.approvedMountingType, x.mismatchMountingTypeStep,              \n" +
                "                    x.approvedMountingTypeID, x.approvedMountingTypeName               \n" +
                "				FROM              \n" +
                "				(SELECT al.rfqAssyIDORrefSalesOrderdetID, al.level, al.category, al.rfqlineitemsid, al.lineid, al.partid, al.pidCode AS AssyID, IFNULL(d.id, c.id) AS mfgPNID,              \n" +
                "						IF((c.id = IFNULL(d.id, c.id)), TRUE, FALSE) isBomLine, IFNULL(c.mfgcodeID, d.mfgCodeId) mfgCodeID, IFNULL(d.mfgPN, c.mfgPN) AS mfgPN,              \n" +
                "						IFNULL(d.PIDCode, c.PIDCode) AS PIDCode, IFNULL(d.RoHSStatusID, c.RoHSStatusID) AS RoHSStatusID, IFNULL(d.feature, c.feature) AS feature,              \n" +
                "						IFNULL(d.isCustom, c.isCustom) AS isCustom, IFNULL(d.partStatus, d.partStatus) AS partStatus,               \n" +
                "						IFNULL(d.mountingTypeID,c.mountingTypeID) AS mountingTypeID, IFNULL(d.functionalCategoryID,c.functionalCategoryID) AS partType,               \n" +
                "                        IFNULL(d.connecterTypeID,IFNULL(c.connecterTypeID,-1)) AS connecterTypeID,              \n" +
                "						al.uomMismatchedStep, al.mismatchFunctionalCategoryStep, al.approvedMountingType,              \n" +
                "                        (CASE WHEN al.approvedMountingType = 1 THEN c.mountingTypeID ELSE -1 END) approvedMountingTypeID,              \n" +
                "                        (CASE WHEN al.approvedMountingType = 1 THEN fun_getMountingTypeNameByID(c.mountingTypeID) ELSE '' END) approvedMountingTypeName,              \n" +
                "                        al.mismatchMountingTypeStep,              \n" +
                "						IFNULL(al.restrictUseInBOMStep, 0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/              \n" +
                "						IFNULL(al.restrictUseInBOMWithPermissionStep, 0) restrictUseInBOMWithPermissionStep,              \n" +
                "						(CASE              \n" +
                "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part */              \n" +
                "								IFNULL(al.restrictUsePermanentlyStep, 1)               \n" +
                "							ELSE	 /*Packaging Alias*/                \n" +
                "								(CASE WHEN IFNULL(d.restrictUsePermanently, 0) = 1 THEN 0 ELSE 1 END)  /*Restrct from part master , UI side 0 equal to restrict*/                     \n" +
                "						END) AS restrictUsePermanentlyStep,              \n" +
                "						IFNULL(al.restrictUseWithPermissionStep, 1) restrictUseWithPermissionStep, 	/*Based on BOM Permission Packaging Alias will allow/Disallow  */                     \n" +
                "						(CASE              \n" +
                "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN  /*BOM Part*/              \n" +
                "								IFNULL(al.restrictUseInBOMExcludingAliasStep, 0)	 /*Ui side 1 equal to restrict value*/              \n" +
                "							ELSE               \n" +
                "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 1 ELSE 0 END) /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */              \n" +
                "						END) AS restrictUseInBOMExcludingAliasStep,              \n" +
                "						(CASE               \n" +
                "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part*/              \n" +
                "								IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep, 0)              \n" +
                "							ELSE   /*Packaging Alias*/              \n" +
                "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 1 ELSE 0 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */              \n" +
                "						END) AS restrictUseInBOMExcludingAliasWithPermissionStep,              \n" +
                "						(CASE              \n" +
                "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN 	/*Bom Part*/              \n" +
                "								IFNULL(al.restrictUseExcludingAliasStep, 1)		/*UI Side 0 equal to restrict*/               \n" +
                "							ELSE               \n" +
                "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 0 ELSE 1 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */              \n" +
                "						END) AS restrictUseExcludingAliasStep,              \n" +
                "						(CASE              \n" +
                "							WHEN al.mfgPnId = IFNULL(d.id, al.mfgPnId) THEN /*BOM Part*/                \n" +
                "								IFNULL(al.restrictUseExcludingAliasWithPermissionStep, 1)	 /*UI Side 0 equal to restrict*/              \n" +
                "							ELSE               \n" +
                "								(CASE WHEN (IFNULL(d.restrictUsePermanently, 0) + IFNULL(d.restrictUSEwithpermission, 0) + IFNULL(d.restrictPackagingUsePermanently, 0) + IFNULL(d.restrictPackagingUseWithpermission, 0) > 0) THEN 0 ELSE 1 END)	/*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */              \n" +
                "						END) AS restrictUseExcludingAliasWithPermissionStep,              \n" +
                "						IFNULL(ccl.isDocumentUpload, IFNULL(ccld.isDocumentUpload, 0)) AS isDocumentUpload              \n" +
                "				FROM              \n" +
                "					leveldata al              \n" +
                "				INNER JOIN component c ON al.mfgPNID = c.id              \n" +
                "				LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid and d.isGoodPart <> 2      \n" +
                "				LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id              \n" +
                "					AND ccl.customerID = (SELECT  mfgcodeid FROM component WHERE id = al.partid) AND ccl.isDeleted = 0              \n" +
                "				LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id              \n" +
                "					AND ccld.customerID = (SELECT  mfgcodeid FROM component WHERE id = al.partid) AND ccld.isDeleted = 0              \n" +
                "			) AS X              \n" +
                "			GROUP BY x.rfqAssyIDORrefSalesOrderdetID , x.level , x.category, x.rfqlineitemsid , x.partid , x.AssyID , x.lineid , x.mfgPNID , x.mfgCodeID , x.mfgPN , x.PIDCode , x.RoHSStatusID , x.feature , x.isCustom , x.partStatus , x.restrictUseInBOMStep , x.restrictUseInBOMWithPermissionStep ,               \n" +
                "			x.restrictUsePermanentlyStep , x.restrictUseWithPermissionStep , x.restrictUseInBOMExcludingAliasStep ,               \n" +
                "			x.restrictUseInBOMExcludingAliasWithPermissionStep , x.restrictUseExcludingAliasStep , x.restrictUseExcludingAliasWithPermissionStep , x.isDocumentUpload,              \n" +
                "			x.mountingTypeID, x.partType, x.connecterTypeID, x.uomMismatchedStep, x.mismatchFunctionalCategoryStep, x.approvedMountingType, x.mismatchMountingTypeStep ,x.approvedMountingTypeID, x.approvedMountingTypeName              \n" +
                "		) a              \n" +
                "		GROUP BY a.rfqAssyIDORrefSalesOrderdetID , a.level , a.category, a.rfqlineitemsid , a.partid , a.lineid\");                   \n" +
                "  \n" +
                "		PREPARE query2 FROM @consolidateAlternatePartDetail;        \n" +
                "		EXECUTE query2;        \n" +
                "		DEALLOCATE PREPARE query2;        \n" +
                "  \n" +
                "	-- Create Temporary table for level wise lineitem detail              \n" +
                "        DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseLineItemDetail;              \n" +
                "		CREATE TEMPORARY TABLE temp_LevleWiseLineItemDetail AS              \n" +
                "		SELECT a.rfqAssyIDORrefSalesOrderdetID, a.level, a.rfqlineitemsid, a.partid, a.lineID, a.uomID, a.attritionRate, a.isInstall, a.partclassID, a.partTypeID, a.leadQty,              \n" +
                "				a.isActive, a.isNoBidsPN, a.isDraft, a.numOfPosition,			              \n" +
                "				(CASE WHEN (a.isBuyDNPQty = 'Y' OR a.isBuyDNPQty = 'P') AND a.isPurchase = 1              \n" +
                "					THEN (a.qpa1 + IFNULL(a.dnpQPA1, 0))              \n" +
                "				WHEN (a.isBuyDNPQty = 'Y' OR a.isBuyDNPQty = 'P') AND a.isPurchase = 0              \n" +
                "					THEN (IFNULL(a.dnpQPA1, 0))              \n" +
                "				WHEN (a.isBuyDNPQty = 'N' OR a.isBuyDNPQty = 'C') AND a.isPurchase = 1              \n" +
                "					THEN (a.qpa1)              \n" +
                "				ELSE (a.qpa1 + IFNULL(a.dnpQPA1, 0))              \n" +
                "				END) qpa,  /* QPA count for Pricing */              \n" +
                "                (CASE WHEN (a.isPurchase = 0 AND a.isInstall = 0 AND (a.isBuyDNPQty = 'N')) THEN              \n" +
                "							0              \n" +
                "						WHEN ((a.isPurchase = 1 OR a.isInstall = 1) AND (a.isBuyDNPQty = 'N')) THEN              \n" +
                "							(a.kitqpa1)              \n" +
                "						WHEN (a.isPurchase = 0 AND a.isInstall = 0 AND (a.isBuyDNPQty <> 'N')) THEN              \n" +
                "							(a.kitdnpQPA1)              \n" +
                "						ELSE              \n" +
                "							(a.kitdnpQPA1 + a.kitqpa1)              \n" +
                "				END) AS KitqpawithDNP, /* QPA count for Kit Allocation */              \n" +
                "				a.kitdnpQPA1 AS kitdnpWithoutQPA , /* QPA count for Kit Allocation - Change by CP on 30-04-2021 */              \n" +
                "                a.valueAddedCost, IFNULL(a.refDesig, '') AS refDesig, IFNULL(dnpDesig, '') AS dnpDesig, a.qpaDesignatorStep, a.custPNID,              \n" +
                "				a.restrictCPNUseInBOMStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseWithPermissionStep, a.CPNPart, a.isNotRequiredKitAllocation, a.notRequiredKitAllocationReason,              \n" +
                "				CONCAT('{ Level:', a.level, ' | Part:', a.PIDCode, ' | Item:', TRIM(a.lineID) + 0, ' | QPA:', TRIM(a.qpacount) + 0, ' | DNP QPA:', TRIM(a.dnpQty) + 0,              \n" +
                "						' | Buy DNP QPA:', (CASE WHEN a.isBuyDNPQty = 'Y' THEN 'Yes' WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned' WHEN a.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM' ELSE 'No' END),              \n" +
                "						' | REF DES Count:', TRIM(a.refDesigCount) + 0, ' | Buy QPA:', a.isPurchase, ' | DNP REF DES Count:', TRIM(a.dnpDesigCount) + 0, ' | POPULATE:', a.isInstall,              \n" +
                "						' | PartID:', a.partID, ' | KitAllocationNotRequire:',a.isNotRequiredKitAllocation, '}') AS partlineID,              \n" +
                "				(CASE WHEN a.uomID = - 1              \n" +
                "					THEN (CASE WHEN a.qpacount != IFNULL(a.refDesigCount, 0) THEN 1 ELSE 0 END)              \n" +
                "				ELSE 0              \n" +
                "				END) isqpaMismatchflag,              \n" +
                "				(CASE WHEN a.uomID = - 1              \n" +
                "					THEN (CASE WHEN a.dnpQty != IFNULL(a.dnpDesigCount, 0) THEN 1 ELSE 0 END)              \n" +
                "				ELSE 0              \n" +
                "				END) isdnpQPAMismatchflag,              \n" +
                "				(CASE WHEN isBuyDNPQty = 'Y' OR isBuyDNPQty = 'P' OR isPurchase = 1              \n" +
                "					THEN 1              \n" +
                "				ELSE 0              \n" +
                "				END) isPurchaseWithDNP              \n" +
                "		FROM              \n" +
                "			leveldata a              \n" +
                "		GROUP BY a.rfqAssyIDORrefSalesOrderdetID , a.level , a.rfqlineitemsid , a.partid , a.lineID , a.uomID , a.attritionRate , a.isInstall , a.partclassID , a.partTypeID , a.leadQty ,               \n" +
                "        a.isActive , a.isNoBidsPN , a.isDraft , a.numOfPosition , a.isBuyDNPQty , a.isPurchase , a.qpa1 , a.dnpQPA1 , a.valueAddedCost , a.refDesig , a.dnpDesig , a.qpaDesignatorStep ,              \n" +
                "        a.custPNID , a.restrictCPNUseInBOMStep , a.restrictCPNUsePermanentlyStep , a.restrictCPNUseWithPermissionStep , a.CPNPart, a.isNotRequiredKitAllocation, a.notRequiredKitAllocationReason;              \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "        -- Create Consolidated data in temp table              \n" +
                "        DROP TEMPORARY TABLE IF EXISTS temp_Sproc_CreateRfqConsolidateLineItem;              \n" +
                "		set @finalConsolidateDetail = concat(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_CreateRfqConsolidateLineItem AS                \n" +
                "		SELECT tl.rfqAssyIDORrefSalesOrderdetID, 		tl.isInstall, 			tl.isPurchaseWithDNP, 			tl.uomID,               \n" +
                "				tl.numOfPosition, 	tl.custPNID, 			tl.restrictCPNUseInBOMStep, 	tl.restrictCPNUsePermanentlyStep,               \n" +
                "				tl.restrictCPNUseWithPermissionStep, tl.isNotRequiredKitAllocation, tl.notRequiredKitAllocationReason,              \n" +
                "				mfgpnIDs AS consolidatedmfgPNIDs, tal.Part AS consolidatedPartWithFlagDetail, tal.category, tal.mountingtypeID mountingTypeID,              \n" +
                "                tal.partType, tal.connecterTypeID, tal.uomMismatchedStep, tal.mismatchFunctionalCategoryStep , tal.mismatchMountingTypeStep,              \n" +
                "				MIN(tl.rfqlineitemsid) AS rfqlineitemsid,  (SELECT MIN(lineID) FROM leveldata WHERE rfqLineitemsID = MIN(tl.rfqlineitemsid)) lineid,              \n" +
                "				(CASE WHEN MAX(tl.isqpaMismatchflag) OR MAX(tl.isdnpQPAMismatchflag) THEN 1 ELSE 0 END) isqpaMismatch,              \n" +
                "				SUM(tl.qpa) qpa, SUM(tl.KitqpawithDNP) KitqpawithDNP, SUM(tl.kitdnpWithoutQPA) kitdnpWithoutQPA,              \n" +
                "				GROUP_CONCAT((CASE WHEN tl.dnpDesig = '' THEN tl.refDesig ELSE CONCAT(tl.refDesig,',',tl.dnpDesig) END)) AS consolidatedrefDesig,              \n" +
                "				GROUP_CONCAT(tl.rfqLineItemsID) AS consolidatedLineItemIDs,              \n" +
                "				COUNT(tl.rfqLineItemsID) AS multiple,              \n" +
                "				GROUP_CONCAT(tl.partlineID SEPARATOR '\",v_GroupConcatSeparator,\"') AS consolidatedpartlineID,               \n" +
                "				GROUP_CONCAT(tal.mfgPartsWithPackagings) AS consolidateRestrictPartDetail              \n" +
                "		FROM               \n" +
                "				temp_LevleWiseLineItemDetail tl                \n" +
                "				INNER JOIN temp_LevleWiseAlternatepartwithPackagingGroup tal ON tal.rfqLineItemsID = tl.rfqLineItemsID AND tal.level = tl.level              \n" +
                "		GROUP BY                \n" +
                "					tl.rfqAssyIDORrefSalesOrderdetID, 	tl.isInstall, 			tl.isPurchaseWithDNP, 			tl.uomID, 			tl.numOfPosition,               \n" +
                "					tl.custPNID, 	tl.restrictCPNUseInBOMStep, 		tl.restrictCPNUsePermanentlyStep, 		tl.restrictCPNUseWithPermissionStep,               \n" +
                "					tal.Part, tal.category, tal.mountingtypeID, tal.partType, tal.uomMismatchedStep, tal.mismatchFunctionalCategoryStep , tal.mismatchMountingTypeStep,              \n" +
                "                     tl.isNotRequiredKitAllocation, tl.notRequiredKitAllocationReason              \n" +
                "		ORDER BY rfqlineitemsid\");              \n" +
                "  \n" +
                "		PREPARE query3 FROM @finalConsolidateDetail;        \n" +
                "		EXECUTE query3;        \n" +
                "		DEALLOCATE PREPARE query3;        \n" +
                "  \n" +
                "        -- Drop temporary tables generated for generate consolidate data              \n" +
                "         DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseLineItemDetail;              \n" +
                "		 DROP TEMPORARY TABLE IF EXISTS temp_LevleWiseAlternatepartwithPackagingGroup;              \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03-05-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4551,'2.00','V1','#32598 Improvement Points  - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4551:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-05-2021  ********************************** */
                "UPDATE table_mapping_details SET display_page_name = 'Initial Stock List' WHERE tabel_name = 'assemblystock';  \n" +
                "UPDATE table_mapping_details SET display_page_name = 'Requirement & Comments Template' WHERE tabel_name = 'inspection_template_requirement_det';  \n" +
                "UPDATE table_mapping_details SET display_page_name = 'Requirement & Comments' WHERE tabel_name = 'inspection_mst';  \n" +
                "UPDATE page_detail SET iconClass = 'icon-video' WHERE pageName='Peripheral';  \n" +
                "UPDATE page_detail SET iconClass = 'icons-dashboard' WHERE pageName='Dashboard';  \n" +
                "UPDATE page_detail SET iconClass = 'icons-add-supplier' WHERE pageName='Manage Supplier Detail';  \n" +

                /* **************************** New Script -> 03-05-2021  ********************************** */
                "SELECT pageid INTO @pageidTemplate FROM page_detail WHERE pageName='Part Requirement Template' and isDeleted = 0;  \n" +
                "UPDATE page_detail SET pageName = 'Requirement & Comments Template',menuName = 'Requirement & Comments Template', displayMenuName = 'Requirement & Comments Template' where pageID=@pageidTemplate and isDeleted = 0;  \n" +
                "SELECT pageid INTO @pageidPart FROM page_detail WHERE pageName='Part Requirement(s)' and isDeleted = 0;  \n" +
                "UPDATE page_detail SET pageName = 'Requirement & Comments', menuName = 'Requirement & Comments', displayMenuName = 'Requirement & Comments', iconClass = 'icons-requirement-comment' where pageID=@pageidPart and isDeleted = 0;  \n" +
                "SELECT pageid INTO @pageidInitial FROM page_detail WHERE pageName='Opening Part Balance' and isDeleted = 0;  \n" +
                "UPDATE page_detail SET pageName = 'Initial Stock List', menuName = 'Initial Stock List', displayMenuName = 'Initial Stock List' where pageID=@pageidInitial and isDeleted = 0;  \n" +
                "SELECT pageid INTO @pageidCategory FROM page_detail WHERE pageName='Part Requirement Category' and isDeleted = 0;  \n" +
                "UPDATE page_detail SET pageName = 'Requirement & Comments Category', menuName = 'Requirement & Comments Category', displayMenuName = 'Requirement & Comments Category', iconClass = 'mdi mdi-format-list-checks' where pageID=@pageidCategory and isDeleted = 0;  \n" +
                "SELECT pageid INTO @pageidManage FROM page_detail WHERE pageName='Manage Part Requirement Category Type Generic Category' and isDeleted = 0;  \n" +
                "UPDATE page_detail SET pageName = 'Manage Requirement & Comments Type Generic Category' ,menuName = 'Add Requirement & Comments Category' , displayMenuName = 'Requirement & Comments Category' WHERE pageID=@pageidManage and isDeleted = 0;  \n" +

                /* **************************** New Script -> 03-05-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4552,'2.00','V1',' Update Menu icon and menu label - Heena '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4552:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-05-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetReferenceInspectionRequirementList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReferenceInspectionRequirementList`(            \n" +
                "	IN ppageIndex INT,                                    \n" +
                "	IN precordPerPage INT,                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                    \n" +
                "	IN pWhereClause VARCHAR(16383),        \n" +
                "    IN ID INT         \n" +
                ")  \n" +
                "BEGIN            \n" +
                "    DECLARE pOffset INT;                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;          \n" +
                "    SET @tempquery = CONCAT('(SELECT name as Transaction ,        \n" +
                "					\"Requirement & Comments Template\" as TransactionType ,        \n" +
                "                    null as componentid ,        \n" +
                "                    null as isCustom,        \n" +
                "                    null as restrictUsePermanently,        \n" +
                "                    null as restrictUSEwithpermission,        \n" +
                "                    null as restrictPackagingUseWithpermission,        \n" +
                "                    null as restrictPackagingUsePermanently                                              \n" +
                "                    from inspection_template_requirement_det itrd          \n" +
                "				INNER JOIN inspection_template_mst im ON im.id = itrd.inspectionTemplateId AND im.isDeleted = 0          \n" +
                "				where itrd.isDeleted = 0  and itrd.inspectionRequirementId = ',ID,')            \n" +
                "		UNION ALL               \n" +
                "			(SELECT PIDCode as Transaction ,        \n" +
                "					case when itrd.category = \"P\" then      \n" +
                "							\"Purchasing & Incoming Inspection Comments\"      \n" +
                "						when itrd.category = \"M\" then      \n" +
                "							\"Manufacturing (Production) Comments\"      \n" +
                "                        when itrd.category = \"S\" then      \n" +
                "							\"Shipping Comments\"      \n" +
                "					end TransactionType,      \n" +
                "                    im.id as componentid,        \n" +
                "                    isCustom as isCustom,        \n" +
                "                    restrictUsePermanently as restrictUsePermanently,        \n" +
                "                    restrictUSEwithpermission as restrictUSEwithpermission,        \n" +
                "                    restrictPackagingUseWithpermission as restrictPackagingUseWithpermission,        \n" +
                "                    restrictPackagingUsePermanently as restrictPackagingUsePermanently                            \n" +
                "                    from componenet_inspection_requirement_det itrd          \n" +
                "				INNER JOIN component im ON im.id = itrd.partId AND im.isDeleted = 0          \n" +
                "				where itrd.isDeleted = 0  and itrd.inspectionRequirementId = ',ID,')');        \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                    \n" +
                "			SET pWhereClause = '1=1' ;                                    \n" +
                "		END IF;	                                    \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY TransactionType ASC\") ;                                    \n" +
                "		ELSE                                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                    \n" +
                "		END IF;	                  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                    \n" +
                "		ELSE	                                    \n" +
                "			SET rowNumWhere = '';                                    \n" +
                "		END IF;	                                    \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);                              \n" +
                "  \n" +
                "            PREPARE query2 FROM @SQLStatement2;                            \n" +
                "			EXECUTE query2;                            \n" +
                "			DEALLOCATE PREPARE query2;                          \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c                            \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);              \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;                            \n" +
                "			EXECUTE query1;                            \n" +
                "			DEALLOCATE PREPARE query1;             \n" +
                "END;  \n" +
                /* **************************** New Script -> 03-05-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4553,'2.00','V1',' Update SP to get Inspection Requirement List - Heena '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4553:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-05-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearchPurchaseOrder`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearchPurchaseOrder`(                       \n" +
                "	IN pSearch VARCHAR(300),                              \n" +
                "	IN pId INT,                              \n" +
                "	IN pMfgType VARCHAR(50),                              \n" +
                "	IN pRoHSStatusID VARCHAR(100),                              \n" +
                "	IN pMfgCodeId INT,                              \n" +
                "	IN pCategoryID INT,                              \n" +
                "	IN pIsContainCPN TINYINT,                   \n" +
                "	IN prefSupplierMfgpnComponentID INT ,                      \n" +
                "	IN ppackagingID INT,                      \n" +
                "	IN pstrictCustomPart TINYINT,                      \n" +
                "	IN psupplierID INT,                  \n" +
                "	IN pofftheself TINYINT                      \n" +
                ")  \n" +
                "BEGIN                                \n" +
                "   /*<===this logic is added to compare invert rohs category*/                      \n" +
                "   /* this logic used in purchase order when supplier is strictly custom part */           \n" +
                "  \n" +
                "   IF(pstrictCustomPart=1)THEN                   \n" +
                "   DROP TEMPORARY TABLE IF EXISTS tempcomponent;                  \n" +
                "   IF(SELECT COUNT(1) FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.supplierID=psupplierID)>0 THEN                  \n" +
                "   CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent                  \n" +
                "	SELECT smm.refMfgCodeMstID                   \n" +
                "	FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.supplierID=psupplierID                  \n" +
                "   UNION                  \n" +
                "	SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0                  \n" +
                "  \n" +
                "	UNION              \n" +
                "	SELECT psupplierID AS refMfgCodeMstID;                \n" +
                "   ELSE                  \n" +
                "   CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent              \n" +
                "   SELECT psupplierID AS refMfgCodeMstID              \n" +
                "   UNION                  \n" +
                "	SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.mfgType='MFG' AND mc.isCustOrDisty=1 AND mc.isdeleted=0                  \n" +
                "   UNION                  \n" +
                "	SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0                  \n" +
                "   UNION                  \n" +
                "	SELECT c.mfgcodeid AS refMfgCodeMstID FROM component c WHERE (c.parttype=4 OR c.iscpn=1) AND c.isdeleted=0;                  \n" +
                "   END IF;                    \n" +
                "          SELECT * FROM                                          \n" +
                " (                                          \n" +
                "	 SELECT `com`.`id`,                                          \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/                                          \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,                                          \n" +
                "		`com`.`mfgPN` orgMfgPN,                              \n" +
                "		`com`.`packaginggroupID`,                  \n" +
                "		com.packagingID,                              \n" +
                "        `com`.`PIDCode`,                            \n" +
                "		`com`.`isGoodPart`,                              \n" +
                "		`com`.`RoHSStatusID`,                              \n" +
                "		`com`.`rohsgroupID`,                              \n" +
                "        `com`.`mfgcodeID`,                              \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,                              \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,                       \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                                     \n" +
                "        `com`.`category`,                      \n" +
                "        com.imageURL,                      \n" +
                "        com.documentPath,                      \n" +
                "        `com`.`mfgPNDescription`,                            \n" +
                "        `com`.`minOperatingTemp`,                              \n" +
                "        `com`.`maxOperatingTemp`,                              \n" +
                "        `com`.`value`,                              \n" +
                "        `com`.`partPackage`,                              \n" +
                "        `com`.`powerRating`,                              \n" +
                "        `com`.`functionalCategoryID`,                              \n" +
                "        `com`.`mountingTypeID`,                              \n" +
                "        `com`.`connecterTypeID`,                              \n" +
                "        `com`.`noOfPosition`,                              \n" +
                "        `com`.`noOfRows`,                              \n" +
                "        `com`.`pitch`,                              \n" +
                "        `com`.`pitchMating`,                              \n" +
                "        `com`.`length`,                              \n" +
                "        `com`.`width`,                              \n" +
                "        `com`.`height`,                              \n" +
                "        `com`.`voltage`,                              \n" +
                "        `com`.`weight`,                              \n" +
                "        `com`.`feature`,                              \n" +
                "        `com`.`color`,                              \n" +
                "        `com`.`partStatus`,                              \n" +
                "        `com`.`uom`,                              \n" +
                "        `com`.`uomClassID`,                              \n" +
                "        `com`.`unit`,                              \n" +
                "        `com`.`restrictUsePermanently`,                                                \n" +
                "		`com`.`restrictUSEwithpermission`,                                              \n" +
                "		`com`.`restrictPackagingUsePermanently`,                                              \n" +
                "		`com`.`restrictPackagingUseWithpermission`,                    \n" +
                "		u.abbreviation AS uomName,                    \n" +
                "		u.unitName AS  unitName,                       \n" +
                "                r.rohsIcon,                        \n" +
                "		r.name AS `rohsName`,                              \n" +
                "               `com`.`partPackageID`,                              \n" +
                "                `com`.`bomLock`,                              \n" +
                "		`com`.`businessRisk`,                              \n" +
                "		`com`.`costCategoryID`,                              \n" +
                "		`com`.`deviceMarking`,                              \n" +
                "		`com`.`driverToolRequired`,                              \n" +
                "		`com`.`eau`,                              \n" +
                "		`com`.`epicorType`,                                    \n" +
                "		`com`.`functionalTestingRequired`,                                    \n" +
                "		`com`.`heightText`,                                    \n" +
                "		`com`.`isCPN`,                                    \n" +
                "		`com`.`isCustom`,                                    \n" +
                "		`com`.`leadTime`,                                    \n" +
                "		`com`.`matingPartRquired`,                                    \n" +
                "		`com`.`maxPriceLimit`,                                    \n" +
                "		`com`.`maxQtyonHand`,                                    \n" +
                "		`com`.`minimum`,                                    \n" +
                "		`com`.`mult`,                                    \n" +
                "		`com`.`packageQty`,                                    \n" +
                "		`com`.`partType`,                                    \n" +
                "		`com`.`pcbPerArray`,                                    \n" +
                "		`com`.`pickupPadRequired`,                                    \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,                                    \n" +
                "		`com`.`plannedValuePerBuild`,                                    \n" +
                "		`com`.`programingRequired`,                                    \n" +
                "		`com`.`rfqOnly`,                                    \n" +
                "		`com`.`saftyStock`,                                    \n" +
                "		`com`.`scrapRatePercentagePerBuild`,                                    \n" +
                "		`com`.`scrapValuePerBuild`,                                    \n" +
                "		`com`.`selfLifeDays`,                                    \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,                                    \n" +
                "		`com`.`temperatureCoefficient`,                                    \n" +
                "		`com`.`temperatureCoefficientUnit`,                                    \n" +
                "		`com`.`temperatureCoefficientValue`,                                    \n" +
                "		`com`.`trackSerialNumber`,                                  \n" +
                "		`com`.`refSupplierMfgpnComponentID`,                          \n" +
                "                com.refMfgPNMfgCodeId,                        \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,                          \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,                          \n" +
                "                fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`                                    \n" +
                "	FROM `component` AS `com`                            \n" +
                "	 INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isDeleted`=0 AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))                    \n" +
                "         JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID                     \n" +
                "         JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0                     \n" +
                "	WHERE `com`.isdeleted=0                        \n" +
                "	AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)                   \n" +
                "        AND `com`.`id` = IFNULL(pId, `com`.`id`)                   \n" +
                "        AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)                        \n" +
                "        AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)                       \n" +
                "        AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)                  \n" +
                "        AND com.mfgcodeid IN (SELECT refMfgCodeMstID FROM tempcomponent)                  \n" +
                "        AND (com.isGoodPart=1)                      \n" +
                "    ) AS a                                                      \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR                                                      \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%') OR pidcode LIKE CONCAT('%', pSearch , '%')                                                      \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))                                                      \n" +
                "	)                                    \n" +
                "	ORDER BY mfgPN;                        \n" +
                "  \n" +
                "ELSEIF(pofftheself=1 AND pstrictCustomPart=0) THEN                        \n" +
                "/* this logic used in purchase order                     \n" +
                "  packing slip                    \n" +
                "  UMID management                    \n" +
                "  Component Master                    \n" +
                "  Reserve Stock                    \n" +
                "  Component Assy DFM                    \n" +
                "  Reports                    \n" +
                "  Price Break Update                    \n" +
                "  Customer Part                    \n" +
                "  Good-Bad Mapping Part                    \n" +
                "  Supplier Quote                    \n" +
                "  Supplier RMA                    \n" +
                "   */                                       \n" +
                " SELECT * FROM                                          \n" +
                " (                                          \n" +
                "	 SELECT `com`.`id`,                                          \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/                                          \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,                                          \n" +
                "		`com`.`mfgPN` orgMfgPN,                              \n" +
                "		`com`.`packaginggroupID`,                  \n" +
                "		com.packagingID,                              \n" +
                "        `com`.`PIDCode`,                            \n" +
                "		`com`.`isGoodPart`,                              \n" +
                "		`com`.`RoHSStatusID`,                              \n" +
                "		`com`.`rohsgroupID`,                              \n" +
                "        `com`.`mfgcodeID`,                              \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,                              \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,                       \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                                     \n" +
                "        `com`.`category`,                      \n" +
                "        com.imageURL,                      \n" +
                "        com.documentPath,                      \n" +
                "        `com`.`mfgPNDescription`,                            \n" +
                "        `com`.`minOperatingTemp`,                              \n" +
                "        `com`.`maxOperatingTemp`,                              \n" +
                "        `com`.`value`,                              \n" +
                "        `com`.`partPackage`,                              \n" +
                "        `com`.`powerRating`,                              \n" +
                "        `com`.`functionalCategoryID`,                              \n" +
                "        `com`.`mountingTypeID`,                              \n" +
                "        `com`.`connecterTypeID`,                              \n" +
                "        `com`.`noOfPosition`,                              \n" +
                "        `com`.`noOfRows`,                              \n" +
                "        `com`.`pitch`,                              \n" +
                "        `com`.`pitchMating`,                              \n" +
                "        `com`.`length`,                              \n" +
                "        `com`.`width`,                              \n" +
                "        `com`.`height`,                              \n" +
                "        `com`.`voltage`,                              \n" +
                "        `com`.`weight`,                              \n" +
                "        `com`.`feature`,                              \n" +
                "        `com`.`color`,                              \n" +
                "        `com`.`partStatus`,                              \n" +
                "        `com`.`uom`,                              \n" +
                "        `com`.`uomClassID`,                              \n" +
                "        `com`.`unit`,                              \n" +
                "        `com`.`restrictUsePermanently`,                                                \n" +
                "		`com`.`restrictUSEwithpermission`,                                              \n" +
                "		`com`.`restrictPackagingUsePermanently`,                                              \n" +
                "		`com`.`restrictPackagingUseWithpermission`,                                              \n" +
                "              u.abbreviation AS uomName,                    \n" +
                "		u.unitName AS  unitName,                               \n" +
                "        r.rohsIcon,                        \n" +
                "		r.name AS `rohsName`,                              \n" +
                "        `com`.`partPackageID`,                              \n" +
                "        `com`.`bomLock`,                              \n" +
                "		`com`.`businessRisk`,                              \n" +
                "		`com`.`costCategoryID`,                               \n" +
                "		`com`.`deviceMarking`,                              \n" +
                "		`com`.`driverToolRequired`,                              \n" +
                "		`com`.`eau`,                              \n" +
                "		`com`.`epicorType`,                                    \n" +
                "		`com`.`functionalTestingRequired`,                                    \n" +
                "		`com`.`heightText`,                                    \n" +
                "		`com`.`isCPN`,                                    \n" +
                "		`com`.`isCustom`,                                     \n" +
                "		`com`.`leadTime`,                                    \n" +
                "		`com`.`matingPartRquired`,                                    \n" +
                "		`com`.`maxPriceLimit`,                                    \n" +
                "		`com`.`maxQtyonHand`,                                    \n" +
                "		`com`.`minimum`,                                    \n" +
                "		`com`.`mult`,                                    \n" +
                "		`com`.`packageQty`,                                    \n" +
                "		`com`.`partType`,                                    \n" +
                "		`com`.`pcbPerArray`,                                    \n" +
                "		`com`.`pickupPadRequired`,                                    \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,                                    \n" +
                "		`com`.`plannedValuePerBuild`,                                    \n" +
                "		`com`.`programingRequired`,                                    \n" +
                "		`com`.`rfqOnly`,                                    \n" +
                "		`com`.`saftyStock`,                                    \n" +
                "		`com`.`scrapRatePercentagePerBuild`,                                    \n" +
                "		`com`.`scrapValuePerBuild`,                                    \n" +
                "		`com`.`selfLifeDays`,                                    \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,                                    \n" +
                "		`com`.`temperatureCoefficient`,                                    \n" +
                "		`com`.`temperatureCoefficientUnit`,                                    \n" +
                "		`com`.`temperatureCoefficientValue`,                                    \n" +
                "		`com`.`trackSerialNumber`,                                  \n" +
                "		`com`.`refSupplierMfgpnComponentID`,                          \n" +
                "                 com.refMfgPNMfgCodeId,                        \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,                          \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,                          \n" +
                "        fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`                                    \n" +
                "	FROM `component` AS `com`                            \n" +
                "	 INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isDeleted`=0 AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))                    \n" +
                "         JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID                     \n" +
                "         JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0                     \n" +
                "	 WHERE (`com`.isdeleted=0)                        \n" +
                "	AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)                   \n" +
                "        AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)                        \n" +
                "        AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)                       \n" +
                "         AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)                   \n" +
                "         AND com.iscustom=0 AND com.category=2 AND com.iscpn=FALSE                  \n" +
                "    ) AS a                                                      \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR                                                      \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%') OR (pidcode LIKE CONCAT('%', pSearch , '%'))                                                      \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))                                                      \n" +
                "	)                                    \n" +
                "	ORDER BY mfgPN;                                    \n" +
                "  \n" +
                "  ELSE                       \n" +
                "  /* this logic used in purchase order                     \n" +
                "  packing slip                    \n" +
                "  UMID management                    \n" +
                "  Component Master                    \n" +
                "  Reserve Stock                    \n" +
                "  Component Assy DFM                    \n" +
                "  Reports                    \n" +
                "  Price Break Update                    \n" +
                "  Customer Part                    \n" +
                "  Good-Bad Mapping Part                    \n" +
                "  Supplier Quote                    \n" +
                "  Supplier RMA                    \n" +
                "   */                                 \n" +
                "   SELECT * FROM                                    \n" +
                " (                                    \n" +
                "	 SELECT `com`.`id`,                                    \n" +
                "		/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/                              \n" +
                "        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,                              \n" +
                "		`com`.`mfgPN` orgMfgPN,                              \n" +
                "		`com`.`packaginggroupID`,                  \n" +
                "		com.packagingID,                                              \n" +
                "		`com`.`PIDCode`,                                              \n" +
                "		`com`.`isGoodPart`,                              \n" +
                "		`com`.`RoHSStatusID`,                              \n" +
                "		`com`.`rohsgroupID`,                              \n" +
                "		`com`.`mfgcodeID`,                              \n" +
                "		`mfgCodemst`.`mfgCode` AS `mfgCode`,                      \n" +
                "		`mfgCodemst`.`mfgName` AS `mfgName`,                                   \n" +
                "		`mfgCodemst`.`mfgType` AS `mfgType`,                              \n" +
                "		`com`.`tolerance`,                        \n" +
                "		`com`.`category`,                      \n" +
                "                 com.imageURL,                      \n" +
                "                 com.documentPath,                      \n" +
                "                `com`.`mfgPNDescription`,                               \n" +
                "		`com`.`minOperatingTemp`,                              \n" +
                "		`com`.`maxOperatingTemp`,                              \n" +
                "		`com`.`value`,                              \n" +
                "		`com`.`partPackage`,                              \n" +
                "		`com`.`powerRating`,                              \n" +
                "		`com`.`functionalCategoryID`,                              \n" +
                "		`com`.`mountingTypeID`,                              \n" +
                "		`com`.`connecterTypeID`,                              \n" +
                "		`com`.`noOfPosition`,                              \n" +
                "		`com`.`noOfRows`,                              \n" +
                "		`com`.`pitch`,                              \n" +
                "		`com`.`pitchMating`,                              \n" +
                "		`com`.`length`,                              \n" +
                "		`com`.`width`,                              \n" +
                "		`com`.`height`,                              \n" +
                "		`com`.`voltage`,                              \n" +
                "		`com`.`weight`,                              \n" +
                "		`com`.`feature`,                              \n" +
                "		`com`.`color`,                                                          \n" +
                "		`com`.`partStatus`,                                                          \n" +
                "		`com`.`uom`,                                                        \n" +
                "                `com`.`uomClassID`,                                          \n" +
                "		`com`.`unit`,                                                \n" +
                "		`com`.`restrictUsePermanently`,                                                \n" +
                "		`com`.`restrictUSEwithpermission`,                                              \n" +
                "		`com`.`restrictPackagingUsePermanently`,                                              \n" +
                "		`com`.`restrictPackagingUseWithpermission`,                                           \n" +
                "		`com`.`packaging`,                                            \n" +
                "		u.abbreviation AS uomName,                    \n" +
                "		u.unitName AS  unitName,                                                    \n" +
                "		r.rohsIcon,                        \n" +
                "		r.name AS `rohsName`,                        \n" +
                "               `com`.`partPackageID`,                                    \n" +
                "               `com`.`bomLock`,                                    \n" +
                "		`com`.`businessRisk`,                                    \n" +
                "		`com`.`costCategoryID`,                                    \n" +
                "		`com`.`deviceMarking`,                                    \n" +
                "		`com`.`driverToolRequired`,                                    \n" +
                "		`com`.`eau`,                                    \n" +
                "		`com`.`epicorType`,                                    \n" +
                "		`com`.`functionalTestingRequired`,                                    \n" +
                "		`com`.`heightText`,                                    \n" +
                "		`com`.`isCPN`,                                    \n" +
                "		`com`.`isCustom`,                                      \n" +
                "		`com`.`leadTime`,                                    \n" +
                "		`com`.`matingPartRquired`,                                    \n" +
                "		`com`.`maxPriceLimit`,                                    \n" +
                "		`com`.`maxQtyonHand`,                                    \n" +
                "		`com`.`minimum`,                                    \n" +
                "		`com`.`mult`,                                    \n" +
                "		`com`.`packageQty`,                                    \n" +
                "		`com`.`partType`,                                    \n" +
                "		`com`.`pcbPerArray`,                                    \n" +
                "		`com`.`pickupPadRequired`,                                    \n" +
                "		`com`.`plannedOverRunPercentagePerBuild`,                        \n" +
                "		`com`.`plannedValuePerBuild`,                        \n" +
                "		`com`.`programingRequired`,                        \n" +
                "		`com`.`rfqOnly`,                        \n" +
                "		`com`.`saftyStock`,                        \n" +
                "		`com`.`scrapRatePercentagePerBuild`,                        \n" +
                "		`com`.`scrapValuePerBuild`,                        \n" +
                "		`com`.`selfLifeDays`,                        \n" +
                "		`com`.`shelfListDaysThresholdPercentage`,                        \n" +
                "		`com`.`temperatureCoefficient`,                        \n" +
                "		`com`.`temperatureCoefficientUnit`,                        \n" +
                "		`com`.`temperatureCoefficientValue`,                        \n" +
                "		`com`.`trackSerialNumber`,                        \n" +
                "		`com`.`refSupplierMfgpnComponentID`,                        \n" +
                "                 com.refMfgPNMfgCodeId,                        \n" +
                "                 `com`.`internalReference`,    \n" +
                "		fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgName`,                        \n" +
                "		fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) `supplierPartMfgPn`,                        \n" +
                "        fun_getMfgCodeByID(com.refMfgPNMfgCodeId) `supplierPartMfgCode`                        \n" +
                "	FROM `component` AS `com`                        \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND (`mfgCodemst`.`isdeleted` =0 AND  `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))                       \n" +
                "	JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID                       \n" +
                "	JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0                        \n" +
                "        WHERE `com`.`isdeleted` =0                   \n" +
                "	AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)                  \n" +
                "	AND `com`.`id` = IFNULL(pId, `com`.`id`) AND com.mfgcodeID = IFNULL(pMfgCodeId, com.mfgcodeID)                       \n" +
                "	AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.refSupplierMfgpnComponentID)                       \n" +
                "	AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)                       \n" +
                "        AND `com`.`category` = IFNULL(pCategoryID, `com`.`category`)                        \n" +
                "        AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)                \n" +
                "    ) AS a                        \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR                        \n" +
                "			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%') OR (pidcode LIKE CONCAT('%', pSearch , '%'))                       \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))                              \n" +
                ")                        \n" +
                "ORDER BY mfgPN;                              \n" +
                "END IF;                              \n" +
                "END;  \n" +
                /* **************************** New Script -> 03-05-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4554,'2.00','V1',' Updated SP to get resolve Data too long for search variable - Dharmishtha '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4554:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-05-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getCountOfWOByNickname` ;  \n" +
                "CREATE FUNCTION `fun_getCountOfWOByNickname`(        \n" +
                "	pNickName VARCHAR(255)              \n" +
                ") RETURNS INT  \n" +
                "BEGIN                    \n" +
                "	DECLARE v_WOCount INT(11);    \n" +
                "  \n" +
                "  \n" +
                "	SELECT SUM(a.cnt) INTO v_WOCount FROM (  \n" +
                "		SELECT COUNT(1) cnt FROM workorder WHERE isDeleted=0   \n" +
                "			AND partID IN (SELECT id FROM `component`WHERE nickName=pNickName AND isDeleted=0)  \n" +
                "		UNION ALL  \n" +
                "		SELECT COUNT(1) cnt FROM assemblyStock WHERE isDeleted=0   \n" +
                "			AND partID IN (SELECT id FROM `component`WHERE nickName=pNickName AND isDeleted=0)  \n" +
                "	) a;  \n" +
                "  \n" +
                "	RETURN v_WOCount;    \n" +
                "END;  \n" +
                /* **************************** New Script -> 03-05-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWOBuildDetailInfoByAssyNickName` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOBuildDetailInfoByAssyNickName`(                  \n" +
                "	IN pAssyNickName VARCHAR(50) ,    \n" +
                "	IN pWOSeriesNumber VARCHAR(20)                 \n" +
                "	)  \n" +
                "BEGIN                  \n" +
                "  \n" +
                "	SELECT a.* FROM (  \n" +
                "  		SELECT wo.woID, wo.woNumber, wo.woSeries, wo.buildNumber,     \n" +
                "			'Q2C' AS woTypeText , 'WS' AS woType, wo.partID ,    \n" +
                "			wo.createdAt createdAt, co.PIDCode, co.mfgPN, co.rev, co.isCustom ,    \n" +
                "			rr.name rohsName, rr.rohsIcon rohsIcon    \n" +
                "		FROM workorder wo    \n" +
                "			JOIN `component` co ON wo.partID = co.id AND co.isDeleted=0    \n" +
                "			LEFT JOIN rfq_rohsmst rr ON rr.id = co.roHSStatusID AND rr.isDeleted=0    \n" +
                "		WHERE wo.woSeries = pWOSeriesNumber    \n" +
                "		AND wo.isDeleted = 0    \n" +
                "  \n" +
                "		UNION    \n" +
                "  \n" +
                "		SELECT NULL AS woID, astk.woNumber, NULL AS woSeries, NULL AS buildNumber,     \n" +
                "			'Initial Stock' AS woTypeText , 'OS' AS woType, astk.partID ,    \n" +
                "			astk.createdAt createdAt, co.PIDCode, co.mfgPN, co.rev, co.isCustom ,    \n" +
                "			rr.name rohsName, rr.rohsIcon rohsIcon    \n" +
                "		FROM assemblyStock astk    \n" +
                "			JOIN `component` co ON astk.partID = co.id AND co.isDeleted=0    \n" +
                "			LEFT JOIN rfq_rohsmst rr ON rr.id = co.roHSStatusID AND rr.isDeleted=0    \n" +
                "		WHERE co.nickName = pAssyNickName    \n" +
                "		AND co.category = 3    \n" +
                "		AND astk.`type` = \"OS\"     \n" +
                "		AND astk.isDeleted = 0) a  \n" +
                "  \n" +
                "		ORDER BY a.createdAt DESC;             \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 03-05-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCompNicknameWOBuildSummaryInfo` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCompNicknameWOBuildSummaryInfo`(                  \n" +
                "	IN ppageIndex INT,                  \n" +
                "	IN precordPerPage INT,                  \n" +
                "	IN pOrderBy VARCHAR(255),                  \n" +
                "	IN pWhereClause VARCHAR(16383)                  \n" +
                "	)  \n" +
                "BEGIN                  \n" +
                "  \n" +
                "		DECLARE pOffset INT;                  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;          \n" +
                "  \n" +
                "  		SET @temp_Sproc_RetrieveWOSeriesSumm = CONCAT(\"       \n" +
                "			SELECT 	c.nickName nickName,   \n" +
                "				c.createdAt,   \n" +
                "				lastWOSeriesNumber,    \n" +
                "				lastWOBuildNumber,  \n" +
                "				fun_getCountOfWOByNickname(c.nickName) woCount  \n" +
                "				FROM `component` c    \n" +
                "				LEFT JOIN `component_nickname_wo_build_detail` cnwbd ON c.nickName = cnwbd.nickName                                        \n" +
                "			WHERE c.category=3   \n" +
                "			AND c.`isDeleted` = 0            \n" +
                "		\");                \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                  \n" +
                "			SET pOrderBy = \"ORDER BY c.createdAt DESC\";                  \n" +
                "		ELSE                  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                  \n" +
                "		END IF;	                  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                  \n" +
                "			SET pWhereClause = '1=1' ;                  \n" +
                "		END IF;	                  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                   \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                  \n" +
                "		ELSE	                  \n" +
                "			SET rowNumWhere = '';                  \n" +
                "		END IF;	                  \n" +
                "  \n" +
                "		/* to get total count of rows */                       \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveWOSeriesSumm,\" ) c where 1=1 and \", pWhereClause);                      \n" +
                "		PREPARE query2 FROM @SQLStatement2;                      \n" +
                "		EXECUTE query2;                      \n" +
                "		DEALLOCATE PREPARE query2;                    \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveWOSeriesSumm,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                      \n" +
                "		PREPARE query1 FROM @SQLStatement2;                      \n" +
                "		EXECUTE query1;                      \n" +
                "		DEALLOCATE PREPARE query1;                \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->03-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4555,'2.00','V1','User Story 33155: Initial Stock Changes - Suggested By JV - VS'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4555:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-05-2021 *********************************** */
                "ALTER TABLE `page_detail`   \n" +
                "ADD COLUMN `isReadOnlyDeveloped` TINYINT(1) NULL DEFAULT 0;  \n" +
                /* **************************** Add Script Version -> 04-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4556,'2.00','V1',' User Story 32154: Implement Read only Functionality in part master - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4556:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-05-2021 *********************************** */
                "update page_detail set isReadOnlyDeveloped = 1 where pageRoute = 'app.component.managecomponent.detail';  \n" +

                "DROP procedure IF EXISTS `Sproc_GetPermissionsPageListByRole`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPermissionsPageListByRole`(              \n" +
                "	IN ppageIndex INT,              \n" +
                "	IN precordPerPage INT,              \n" +
                "	IN pOrderBy VARCHAR(255),              \n" +
                "	IN pWhereClause VARCHAR(16383),            \n" +
                "	IN pUserId INT,            \n" +
                "	IN pRoleId INT,      \n" +
                "	IN isShowDefault INT      \n" +
                ")  \n" +
                "BEGIN            \n" +
                "  \n" +
                "	DECLARE pOffset INT;              \n" +
                "	DECLARE rowNumWhere VARCHAR(255);             \n" +
                "	DROP TEMPORARY TABLE IF EXISTS PageResults;            \n" +
                "	SELECT COUNT(*) INTO @result1 FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL;            \n" +
                "  \n" +
                " 	IF (isShowDefault = 1) THEN            \n" +
                " 		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS            \n" +
                " 			SELECT `pd`.`pageRoute`,`rp`.`roleID`, `rp`.`pageID`, `pd`.`pageName`,`pd`.`menuName`, `rp`.`RO`, `rp`.`RW`, `rp`.`isActive`, `rp`.`IsShortcut`,        \n" +
                " 			`pd`.`parentPageID`, `pd`.`isDisplay`, `pd`.`hasChild`,`pd`.`menuRoute`,`pd`.`pageURL`, `pd`.`isAllowAsHomePage`, `pd`.`iconClass`, `pd`.`isReadOnlyDeveloped`  \n" +
                " 			FROM `rolepagedetail` AS `rp`            \n" +
                " 			LEFT JOIN `page_detail` AS `pd` ON `rp`.`pageID` = `pd`.`pageID`            \n" +
                " 			WHERE `rp`.`roleID` = pRoleId         \n" +
                " 			AND `rp`.`deletedAt` IS NULL         \n" +
                " 			AND `pd`.`deletedAt` IS NULL         \n" +
                " 			AND `pd`.`isActive` = 1;            \n" +
                "  \n" +
                " 			INSERT INTO PageResults (pageRoute, roleID, pageID, pageName,menuName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass)            \n" +
                " 			SELECT pageRoute, pRoleId AS roleID, pageID, pageName,menuName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass         \n" +
                " 			FROM page_detail         \n" +
                " 			WHERE deletedAt IS NULL         \n" +
                " 			AND isActive = 1         \n" +
                " 			AND pageID NOT IN (SELECT pageID FROM rolepagedetail         \n" +
                " 			WHERE roleID = pRoleId AND deletedAt IS NULL);            \n" +
                " 	ELSE            \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS PageResults AS            \n" +
                "			SELECT `pd`.`pageRoute`, `up`.`roleID`, `up`.`userID`, `up`.`pageID`, `pd`.`pageName`,`pd`.`menuName`, `up`.`RO`, `up`.`RW`, `up`.`isActive`,         \n" +
                "			`up`.`IsShortcut`, `pd`.`parentPageID`, `pd`.`isDisplay`,`up`.`IsShowInHomePage`,`pd`.`hasChild`,`pd`.`menuRoute`, `pd`.`pageURL`,`pd`.`isAllowAsHomePage`, `pd`.`iconClass`, `pd`.`isReadOnlyDeveloped`  \n" +
                "			FROM `userpagedetail` AS `up`            \n" +
                "			LEFT JOIN `page_detail` AS `pd` ON `up`.`pageID` = `pd`.`pageID`            \n" +
                "			WHERE `up`.`userID` = pUserId         \n" +
                "			AND `up`.`roleID` = pRoleId         \n" +
                "			AND `up`.`deletedAt` IS NULL         \n" +
                "			AND `pd`.`deletedAt` IS NULL         \n" +
                "			AND `pd`.`isActive` = 1;            \n" +
                "  \n" +
                "		INSERT INTO PageResults (pageRoute,roleID, userID, pageID, pageName,menuName, RO, RW, isActive, IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass)            \n" +
                "		SELECT pageRoute, pRoleId AS roleID, pUserId AS userID, pageID, pageName, menuName, 0 AS RO, 0 AS RW, 0 AS isActive, 0 AS IsShortcut, parentPageID, isDisplay, hasChild, menuRoute, pageURL, isAllowAsHomePage, iconClass            \n" +
                "		FROM page_detail WHERE deletedAt IS NULL AND isActive = 1 AND pageID NOT IN (SELECT pageID FROM userpagedetail WHERE userID = pUserId AND roleID = pRoleId AND deletedAt IS NULL);            \n" +
                " 	END IF;            \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"pageName ASC\");              \n" +
                "	ELSE              \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN              \n" +
                "		SET pWhereClause = '1=1' ;              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN               \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		              \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;              \n" +
                "	ELSE	              \n" +
                "		SET rowNumWhere = '';              \n" +
                "	END IF;	              \n" +
                "  \n" +
                "	/* to get total count of rows */              \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM PageResults where \", pWhereClause );              \n" +
                "	PREPARE query1 FROM @SQLStatement1;              \n" +
                "	EXECUTE query1;              \n" +
                "	DEALLOCATE PREPARE query1;              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM PageResults where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);              \n" +
                "	PREPARE query2 FROM @SQLStatement2;              \n" +
                "	EXECUTE query2;              \n" +
                "	DEALLOCATE PREPARE query2;              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS PageResults;            \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4557,'2.00','V1',' User Story 32154: Implement Read only Functionality in part master - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4557:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-05-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetManufacturer`;  \n" +
                "CREATE PROCEDURE `Sproc_GetManufacturer`(                      \n" +
                "	IN ppageIndex INT,                      \n" +
                "	IN precordPerPage INT,                      \n" +
                "	IN pOrderBy VARCHAR(255),                      \n" +
                "	IN pWhereClause VARCHAR(16383),                      \n" +
                "	-- IN pIsMFG TINYINT(1),                      \n" +
                "	IN pmfgType VARCHAR(20),                      \n" +
                "	IN pisCustOrDisty TINYINT          \n" +
                "    )  \n" +
                "BEGIN                       \n" +
                "  \n" +
                "	DECLARE pOffset INT;                      \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                      \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);                             \n" +
                "    DECLARE vTimeZone VARCHAR(50);                             \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                              \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;                     \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(\"                      \n" +
                "  \n" +
                "       SELECT mc.id,mc.mfgCode,mc.mfgType,mc.mfgName,mc.customerType, (case when  mc.customerType='B'  then 'Broker' when   mc.customerType='E' then 'End Customer'  else '' end) as customerTypeName,                        \n" +
                "       (CASE WHEN (mc.isPricingApi=1) THEN 1 ELSE 0 END) isDisabledDelete, mc.isPricingApi , mc.systemGenerated,fun_getDateCodeFormatById(mc.dateCodeFormatID) dateCodeFormat,                                  \n" +
                "		fun_getUserNameByEmployeID(mc.salesCommissionTo) salesCommissionTo,            \n" +
                "		mc.systemID,mc.customerSystemID,                \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.carrierID) carrierName,                \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.rmaCarrierID) rmacarrierName,                \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.rmashippingMethodId) rmaShippingName,                \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.shippingMethodId) ShippingName,                \n" +
                "		mc.carrierAccount,mc.rmaCarrierAccount,case when mc.shippingInsurence =1 then 'Yes' else 'No' end shippingInsuranceName,                \n" +
                "	        case when mc.rmaShippingInsurence =1 then 'Yes' else 'No' end rmashippingInsuranceName,                 \n" +
                "	        mc.shippingInsurence, mc.rmaShippingInsurence,                    \n" +
                "		fun_getUserNameByID(mc.updatedBy) updatedby,                                  \n" +
                "		fun_getUserNameByID(mc.createdBy) createdby,                                 \n" +
                "		fun_getRoleByID(mc.createByRoleId) createdbyRole,                                  \n" +
                "		fun_getRoleByID(mc.updateByRoleId) updatedbyRole,                                  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(mc.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                                        \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(mc.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,         \n" +
                "		(SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(smm.refmfgcodemstid) SEPARATOR '##$$') FROM supplier_mapping_mst smm WHERE smm.supplierid=mc.id and smm.isDeleted= 0) mappingMfr,                                       \n" +
                "       CASE WHEN mc.authorizeType=1 THEN 'Authorized'                                              \n" +
                "            WHEN mc.authorizeType=2 THEN 'Independent'                                              \n" +
                "            WHEN mc.authorizeType=3 THEN 'Authorized & Independent'                                               \n" +
                "            ELSE '' END   authorizeTypeTxt,mc.authorizeType,                                                          \n" +
                "		     wbw.buyBy,wbw.buyDate,wbw.description,wbw.id AS `acquiredID`,                                \n" +
                "            wbw.acquired,                                                               \n" +
                "		(SELECT GROUP_CONCAT(CONCAT(alias, '@@@',fun_getMappingManufacturerCount(id),              \n" +
                "        '@@@',fun_getUserNameByID(createdBy),              \n" +
                "        '@@@',fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"')              \n" +
                "        ) SEPARATOR '!!!!')  FROM mfgcodealias                                                                 \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND mfgcodeId = mc.id  GROUP BY mfgcodeId) AS aliaslist  ,                                                          \n" +
                "		mc.primaryContactName, mc.email , mc.website, mc.contact, mc.comments , mc.phExtension,                                                           \n" +
                "		mc.contactCountryCode,mc.faxNumber, mc.faxCountryCode,mc.isActive, mc.isCompany,                                       \n" +
                "        (CASE WHEN (mc.`isCompany` = 0) THEN 'No'                                                             \n" +
                "				WHEN (mc.`isCompany` = 1) THEN 'Yes' ELSE '' END) AS `isCompanyConvertedValue`,                                \n" +
                "		(CASE WHEN (mc.systemGenerated = 0) THEN 'No'                      \n" +
                "				WHEN (mc.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SyatemGeneratedValue`,                                \n" +
                "		(CASE WHEN (mc.`isActive` = 0) THEN 'Inactive'                      \n" +
                "				WHEN (mc.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`                                                   \n" +
                "		 ,gc.gencCategoryName,                      \n" +
                "		 CASE WHEN mc.isCustOrDisty = 1 THEN 'Both'                      \n" +
                "			WHEN mc.isCustOrDisty = 0 OR mc.isCustOrDisty IS NULL THEN 'Manufacturer Only'                      \n" +
                "		END AS isCustOrDistyText,                      \n" +
                "        mc.displayOrder,          \n" +
                "        mc.invoicesRequireManagementApproval,          \n" +
                "        (CASE WHEN (mc.invoicesRequireManagementApproval = 0) THEN 'No'                      \n" +
                "				WHEN (mc.invoicesRequireManagementApproval = 1) THEN 'Yes' ELSE '' END) AS `invoicesRequireManagementApprovalValue`,      \n" +
                "		mc.taxID,      \n" +
                "        mc.accountRef,      \n" +
                "        mc.paymentMethodID,      \n" +
                "		pc.gencCategoryName paymentMethodName,      \n" +
                "        pc.systemGenerated systemGeneratedPaymentMethod  ,    \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS ChartOfAccounts,    \n" +
                "		mc.acctId    \n" +
                "	FROM mfgcodemst mc        \n" +
                "    LEFT JOIN acct_acctmst aam ON aam.acct_id = mc.acctId AND aam.isDeleted=0    \n" +
                "    LEFT JOIN genericcategory gc ON gc.gencCategoryID = mc.paymentTermsID AND gc.isDeleted = 0      \n" +
                "    LEFT JOIN genericcategory pc ON pc.gencCategoryID = mc.paymentMethodID AND pc.isDeleted = 0      \n" +
                "	LEFT JOIN (SELECT wbwi.buyBy,wbwi.buyDate,wbwi.description,wbwi.id , wbwi.buyTo ,                      \n" +
                "				CONCAT('(', mci.mfgcode,')' , ' ' ,mci.mfgName ) AS `acquired`                      \n" +
                "			FROM  who_bought_who wbwi                      \n" +
                "            JOIN mfgcodemst mci ON wbwi.buyBy = mci.id                      \n" +
                "            AND wbwi.isDeleted = 0) wbw                      \n" +
                "			ON wbw.buyTo = mc.id                      \n" +
                "	WHERE mc.isdeleted = 0                                                           \n" +
                "	AND mc.mfgType = '\", pmfgType , \"' \");                                                \n" +
                "  \n" +
                "	IF(pisCustOrDisty IS NOT NULL OR pisCustOrDisty != '') THEN      \n" +
                "		SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(@temp_Sproc_RetriveWhereUsedComponents,\" and mc.isCustOrDisty = \",pisCustOrDisty);                                           \n" +
                "	END IF;                                                \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN                      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                \n" +
                "	ELSE                                                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" ,\"displayOrder IS NULL, displayOrder ASC ,mfgName ASC\");                      \n" +
                "	END IF;	                                                                \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                \n" +
                "		SET pWhereClause = '1=1' ;                                                                \n" +
                "	END IF;	                                                                \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                \n" +
                "	ELSE	                                                                \n" +
                "		SET rowNumWhere = '';                                                                \n" +
                "	END IF;	                                                                \n" +
                "  \n" +
                "   /* to get total count of rows */                                               \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetriveWhereUsedComponents,\" ) c where 1=1 and \", pWhereClause);                                        \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                              \n" +
                "	EXECUTE query2;                                              \n" +
                "	DEALLOCATE PREPARE query2;                                        \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetriveWhereUsedComponents,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                          \n" +
                "	 PREPARE query1 FROM @SQLStatement2;                                              \n" +
                "	 EXECUTE query1;                                              \n" +
                "	DEALLOCATE PREPARE query1; 	                                        \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 04-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4558,'2.00','V1','Bug 33163: Supplier Master : In list page Supplier Mapping is not updating. - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4558:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-05-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_AU_purchase_order_line_release_det`;  \n" +
                "CREATE TRIGGER `TRG_AU_purchase_order_line_release_det` AFTER UPDATE ON `purchase_order_line_release_det` FOR EACH ROW BEGIN              \n" +
                "	DECLARE vPurchaseOrderDetID INT;          \n" +
                "	DECLARE vPurchaseOrderID INT;          \n" +
                "	DECLARE vStatus VARCHAR(5);        \n" +
                "    DECLARE vPOStatus VARCHAR(5);       \n" +
                "	SELECT `refPurchaseOrderDetID` INTO vPurchaseOrderDetID FROM purchase_order_line_release_det WHERE id = New.id;            \n" +
                "        SELECT refPurchaseOrderID INTO vPurchaseOrderID FROM purchase_order_det WHERE id= vPurchaseOrderDetID;          \n" +
                "        SELECT poWorkingStatus INTO vPOStatus FROM purchase_order_mst WHERE id= vPurchaseOrderID;          \n" +
                "  \n" +
                "	IF (NEW.isDeleted = TRUE OR (IFNULL(NEW.poLineWorkingStatus,0)!=IFNULL(OLD.poLineWorkingStatus,0))OR (IFNULL(NEW.receivedQty,0)!=IFNULL(OLD.receivedQty,0))) AND (vPOStatus!='CA') THEN           \n" +
                "  \n" +
                "	  SELECT IFNULL(MAX(CASE WHEN (poLineWorkingStatus = 'P') THEN 'P' ELSE 'C' END),'P') INTO vStatus FROM  vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=vPurchaseOrderID;      \n" +
                "      IF(vStatus='P') THEN       \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus=vStatus WHERE id=vPurchaseOrderID;       \n" +
                "	  ELSE      \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus=vStatus,poCompleteType=IFNULL(poCompleteType,'Auto') WHERE id=vPurchaseOrderID;       \n" +
                "	  END IF;         \n" +
                "  \n" +
                "	END IF;                \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-05-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_updatePurchaseOrderStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_updatePurchaseOrderStatus`(    \n" +
                "IN pPOID INT,    \n" +
                "IN pupdatedBy VARCHAR(100),    \n" +
                "IN pupdatedRoleID VARCHAR(100),    \n" +
                "IN pcompleteReason VARCHAR(1000),    \n" +
                "IN pcompleteType VARCHAR(20),    \n" +
                "IN pcancellationReason VARCHAR(1000),    \n" +
                "IN ptype VARCHAR(5)    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "  IF pcompleteReason IS NOT NULL THEN    \n" +
                "	UPDATE purchase_order_mst SET poWorkingStatus='C',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,poCompleteReason=pcompleteReason,poCompleteType=pcompleteType  WHERE id=pPOID;    \n" +
                "  \n" +
                "	UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='C',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID,poLineCompleteReason=IFNULL(poLineCompleteReason,pcompleteReason),poLineCompleteType=IFNULL(poLineCompleteType,pcompleteType) WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);    \n" +
                "  ELSEIF pcancellationReason IS NOT NULL THEN    \n" +
                "	IF ptype = 'C' THEN /* for cancellation po */    \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus='CA',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,cancleReason=pcancellationReason,poCompleteType=pcompleteType WHERE id=pPOID;    \n" +
                "  	ELSEIF ptype = 'R' THEN /* for revoke cancellation po */    \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus='P',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,cancleReason=pcancellationReason,poCompleteType=pcompleteType WHERE id=pPOID;    \n" +
                "	END IF;    \n" +
                "  END IF;    \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-05-2021 *********************************** */
                "DROP VIEW IF EXISTS `vu_purchaseorder_shipping_release` ;  \n" +
                "CREATE VIEW `vu_purchaseorder_shipping_release` AS  \n" +
                "    SELECT   \n" +
                "        `pold`.`refPurchaseOrderDetID` AS `refPurchaseOrderDetID`,  \n" +
                "        `pod`.`refPurchaseOrderID` AS `refPurchaseOrderID`,  \n" +
                "        SUM(`pold`.`qty`) AS `totalQty`,  \n" +
                "        SUM(IFNULL(`pold`.`receivedQty`, 0)) AS `totalReceivedQty`,  \n" +
                "        (CASE  \n" +
                "            WHEN ((SUM(`pold`.`qty`) - SUM(IFNULL(`pold`.`receivedQty`, 0))) > 0) THEN (SUM(`pold`.`qty`) - SUM(IFNULL(`pold`.`receivedQty`, 0)))  \n" +
                "            ELSE 0  \n" +
                "        END) AS `totalPendingQty`,  \n" +
                "        MAX((CASE  \n" +
                "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 'P'  \n" +
                "            ELSE 'C'  \n" +
                "        END)) AS `poLineWorkingStatus`,  \n" +
                "        MAX((CASE  \n" +
                "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 'Open'  \n" +
                "            ELSE 'Closed'  \n" +
                "        END)) AS `poLineWorkingDisplayStatus`,  \n" +
                "        MAX((CASE  \n" +
                "            WHEN (`pold`.`poLineCompleteType` = 'Manual') THEN 'Manual'  \n" +
                "            WHEN (`pold`.`poLineCompleteType` = 'Auto') THEN 'Auto'  \n" +
                "            ELSE ''   \n" +
                "        END)) AS `poLineCompleteType`,  \n" +
                "        SUM((CASE  \n" +
                "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 1  \n" +
                "            ELSE 0  \n" +
                "        END)) AS `pendingLineCount`,  \n" +
                "        SUM((CASE  \n" +
                "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'C') THEN 1  \n" +
                "            ELSE 0  \n" +
                "        END)) AS `receivedLineCount`,  \n" +
                "        (CASE  \n" +
                "            WHEN  \n" +
                "                (MAX((CASE  \n" +
                "                    WHEN (`pold`.`poLineCompleteType` = 'Manual') THEN 'Manual'  \n" +
                "                    WHEN (`pold`.`poLineCompleteType` = 'Auto') THEN 'Auto'  \n" +
                "                    ELSE ''  \n" +
                "                END)) = 'Manual')  \n" +
                "            THEN  \n" +
                "                GROUP_CONCAT(CONCAT('Release#:',  \n" +
                "                            ' ',  \n" +
                "                            `pold`.`releaseNumber`,  \n" +
                "                            '    \n" +
                "                                                        ',  \n" +
                "                            'PO Release Complete Type:',  \n" +
                "                            ' ',  \n" +
                "                            `pold`.`poLineCompleteType`,  \n" +
                "                            '    \n" +
                "                                                        ',  \n" +
                "                            'PO Release Complete Reason:',  \n" +
                "                            IFNULL(`pold`.`poLineCompleteReason`, ''))  \n" +
                "                    SEPARATOR '    \n" +
                "                                        ')  \n" +
                "            ELSE ''  \n" +
                "        END) AS `poLineCompleteReason`  \n" +
                "    FROM  \n" +
                "        (`purchase_order_line_release_det` `pold`  \n" +
                "        JOIN `purchase_order_det` `pod` ON ((`pod`.`id` = `pold`.`refPurchaseOrderDetID`)))  \n" +
                "    WHERE  \n" +
                "        (`pold`.`isDeleted` = 0)  \n" +
                "    GROUP BY `pold`.`refPurchaseOrderDetID` , `pod`.`refPurchaseOrderID`;  \n" +
                /* **************************** Add Script Version -> 04-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4559,'2.00','V1','Bug 33120: QA Testing of User Story 32566: Implement Cancel Purchase order Option [03/05/2021] - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4559:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-05-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_AI_packing_slip_material_receive_det`;  \n" +
                "CREATE TRIGGER `TRG_AI_packing_slip_material_receive_det` AFTER INSERT ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN              \n" +
                "	DECLARE PORLINE_OTY INT;          \n" +
                "	DECLARE vTotalQty INT;      \n" +
                "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
                "        SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;          \n" +
                "	IF (NEW.isDeleted = TRUE)THEN           \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',poLineCompleteType=(NULL),poLineCompleteReason=(NULL),receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;            \n" +
                "	ELSEIF( NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND             \n" +
                "		PORLINE_OTY <= vTotalQty) THEN              \n" +
                "			UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto', receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;            \n" +
                "		ELSE               \n" +
                "			UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;            \n" +
                "	END IF;                \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-05-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveReleaseLineFromPO`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveReleaseLineFromPO`(    \n" +
                "	IN pRefPOId INT,    \n" +
                "	IN pPartID INT,    \n" +
                "	IN pMFGPN VARCHAR(50)    \n" +
                ")  \n" +
                "BEGIN           \n" +
                "SELECT 	polrd.id,						polrd.qty poReleaseLineQty,			polrd.releaseNumber,            \n" +
                "		polrd.shippingDate,				polrd.promisedShipDate,             \n" +
                "		polrd.poLineWorkingStatus,		pod.id refPurchaseOrderDetID,		pod.lineID,            \n" +
                "		pod.qty poLineQty,			          \n" +
                "        (case when polrd.id is null then c.packagingID else pod.packagingID end) packagingID,					          \n" +
                "        pod.internalRef,                cpm.name packagingName,           \n" +
                "        mfgcod.mfgCode mfgCode,         c.mfgcodeID,                        c.mfgPN,          \n" +
                "        c.RoHSStatusID,                 CONCAT('(', mfgcod.mfgCode, ')', ' ',  mfgcod.mfgName) mfgName,          \n" +
                "        fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,      					fun_getRoHSNameByID(c.RoHSStatusID) rohsName,            \n" +
                "		c.id partId,				polrd.receivedQty,    					pod.partDescription,		          \n" +
                "         pod.lineComment,               pod.internalLineComment,            cs.mfgcodeID supplierId,      \n" +
                "        supCode.mfgCode supplierCode,   CONCAT('(', supCode.mfgCode, ')', ' ',  supCode.mfgName) supplierName,         \n" +
                "        cs.mfgpn supplierPN,            cs.id supplierPNId,                 c.packageQty spq,          \n" +
                "        c.unit,							c.uom,								c.uomText,            \n" +
                "		c.partType,					          \n" +
                "        (case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSID,	            \n" +
                "        fun_getRoHSNameByID(case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSName,            \n" +
                "        c.isCustom,						cs.isCustom AS isCustomSupplier,	c.umidSPQ, pom.poWorkingStatus   \n" +
                "    FROM purchase_order_det AS pod             \n" +
                "    INNER JOIN purchase_order_mst AS pom ON pod.refPurchaseOrderID = pom.id AND pom.isDeleted=0  \n" +
                "	INNER JOIN component AS c ON  c.id = pod.mfgPartID AND c.id = IFNULL(pPartID, c.id) AND c.mfgpn = IFNULL(pMFGPN, c.mfgPN) AND c.isDeleted = 0                \n" +
                "	INNER JOIN mfgcodemst mfgcod ON mfgcod.id = c.mfgcodeID OR mfgcod.id = c.mfgcodeID AND mfgcod.isDeleted = 0            \n" +
                "	LEFT JOIN purchase_order_line_release_det AS polrd ON  pod.id = polrd.refPurchaseOrderDetID AND polrd.isDeleted = 0            \n" +
                "	LEFT JOIN component_packagingmst AS cpm ON pod.packagingID = cpm.id AND cpm.isDeleted = 0            \n" +
                "	LEFT JOIN component cs ON cs.id = pod.supplierPartID AND cs.isDeleted = 0          \n" +
                "    LEFT JOIN mfgcodemst supCode ON supCode.id = cs.mfgcodeID OR supCode.id = cs.mfgcodeID AND supCode.isDeleted = 0          \n" +
                "	WHERE pod.refPurchaseOrderID = pRefPOid            \n" +
                "    AND pod.isDeleted = 0;             \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-05-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderPerLineDeatils`(    \n" +
                "	IN ppageIndex INT,    \n" +
                "	IN precordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN psupplierID VARCHAR(16000),    \n" +
                "	IN pshippingMethodId VARCHAR(16000),    \n" +
                "	IN psearchposotype VARCHAR(10),    \n" +
                "	IN psearchposotext VARCHAR(1000),    \n" +
                "	IN ppartIds VARCHAR(1000),   \n" +
                "    IN ppolinestatus VARCHAR(10),    \n" +
                "	IN ppostatus VARCHAR(10),    \n" +
                "	IN pfromDate DATE,    \n" +
                "	IN ptoDate DATE    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE vTimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;    \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;    \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(\"    \n" +
                "		SELECT  pod.id,    \n" +
                "				pom.id as refPurchaseOrderID,    \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,    \n" +
                "				pod.mfgPartID,    \n" +
                "				pod.packagingID,    \n" +
                "				pod.supplierPartID,    \n" +
                "				pod.partDescription,    \n" +
                "				pod.pcbPerArray,    \n" +
                "				pod.rohsStatusID,    \n" +
                "				pod.internalRef,    \n" +
                "				pod.qty,    \n" +
                "				pod.price,    \n" +
                "				pom.shippingMethodID,    \n" +
                "				(pod.qty * pod.price) extPrice,    \n" +
                "				pod.totalRelease,    \n" +
                "				pod.lineComment,    \n" +
                "				pod.lineID,    \n" +
                "				pod.supplierQuoteNumber,    \n" +
                "				pom.poDate,    \n" +
                "				pom.poRevision,    \n" +
                "				pom.soNumber,    \n" +
                "				pom.soDate,    \n" +
                "				c.mfgPN,    \n" +
                "				c.pidCode,    \n" +
                "				c.unit,    \n" +
                "				c.iscustom,    \n" +
                "				c.partType,    \n" +
                "				rr.name AS rohsName,    \n" +
                "				rr.rohsIcon,    \n" +
                "				cp.name AS packagingName,    \n" +
                "				mc.mfgCode,    \n" +
                "				mc.mfgName,    \n" +
                "				mc.id As mfgcodeID,    \n" +
                "				pom.poNumber,    \n" +
                "				pom.status,    \n" +
                "				pom.carrierID,    \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'C' when c.partType=4 and pom.poWorkingStatus='CA' then 'CA' else ifnull(vups.poLineWorkingStatus,'P') end poWorkingStatus,    \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Closed' else ifnull(vups.poLineWorkingDisplayStatus,'Open') end poLineWorkingDisplayStatus,    \n" +
                "                case when pom.poWorkingStatus='C' then 'Completed' when pom.poWorkingStatus='CA' then 'Canceled' else 'In Progress' end poWorkingStatusDisplayStatus,    \n" +
                "				vups.totalReceivedQty,    \n" +
                "				vups.totalPendingQty,    \n" +
                "				vups.poLineCompleteReason,    \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Auto' else  vups.poLineCompleteType end poLineCompleteType,    \n" +
                "				concat('(',m.mfgcode,')',' ',m.mfgName) supplierName,    \n" +
                "				fun_getUnitNameByID(c.uom) uomName,    \n" +
                "				sc.mfgPN supplierPN,    \n" +
                "				pom.supplierID,    \n" +
                "				pom.termsID,    \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,    \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,    \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,    \n" +
                "				pom.carrierAccountNumber,    \n" +
                "				pom.poComment,    \n" +
                "				pom.shippingComment,    \n" +
                "				pod.internalLineComment,    \n" +
                "				m.mfgcode as supplierMfgName,    \n" +
                "				fun_getOtherChargesByPurchaseOrderDetID(pod.id) otherExpense,    \n" +
                "				(SELECT GROUP_CONCAT(polr.instruction SEPARATOR  '<br/>') FROM purchase_order_line_requirement_det polr WHERE polr.refPurchaseOrderDetID=pod.id AND polr.isDeleted=0) purchaseRequirement,    \n" +
                "				(ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)+(pod.qty * pod.price)) totalExtPrice,    \n" +
                "				CONCAT('(',mc.mfgCode,')',' ',mc.mfgName) mfgcodeName,    \n" +
                "				fun_getUserNameByID(pod.updatedBy)updatedby,    \n" +
                "				fun_getUserNameByID(pod.createdBy) createdby,    \n" +
                "				fun_getRoleByID(pod.createByRoleId) createdbyRole,    \n" +
                "				fun_getRoleByID(pod.updateByRoleId) updatedbyRole,    \n" +
                "				(select pold.shippingDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) shipDate,    \n" +
                "				(select pold.promisedShipDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) promisedShipDate,    \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,    \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,    \n" +
                "				fun_getLatestPackingSlipDateByPOId(pom.id, FALSE) packingSlipDate,    \n" +
                "				fun_getLatestPackingSlipDateByPOId(pom.id, TRUE) packingSlipId    \n" +
                "		FROM purchase_order_mst pom    \n" +
                "		left JOIN purchase_order_det pod ON pom.id=pod.refPurchaseOrderID and  pod.isdeleted=0    \n" +
                "		left join vu_purchaseorder_shipping_release vups on vups.refPurchaseOrderDetID= pod.id    \n" +
                "		left JOIN mfgcodemst m ON m.id=pom.supplierID    \n" +
                "		left JOIN component c ON c.id=pod.mfgPartID    \n" +
                "		left join component sc on sc.id=pod.supplierPartID    \n" +
                "		left JOIN mfgcodemst mc ON mc.id=c.mfgcodeID    \n" +
                "		LEFT JOIN rfq_rohsmst rr ON rr.id=pod.rohsStatusID    \n" +
                "		LEFT JOIN component_packagingmst cp ON cp.id=pod.packagingID    \n" +
                "		WHERE pom.isdeleted=0    \n" +
                "	\");     \n" +
                "	IF(psupplierID IS NOT NULL)THEN    \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.supplierID in (',psupplierID,')');    \n" +
                "	END IF;    \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN    \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.shippingMethodID in (',pshippingMethodId,')');    \n" +
                "	END IF;    \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN    \n" +
                "		IF(psearchposotype='C')THEN    \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pom.soNumber  like ''%',psearchposotext,'%'' OR pom.poNumber  like ''%',psearchposotext,'%'')');    \n" +
                "		ELSE    \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pom.soNumber  =''',psearchposotext,''' OR pom.poNumber  =''',psearchposotext,''')');    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN    \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate>=''',pfromDate,''' and pom.poDate<=''',ptoDate,''')');    \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN    \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate>=''',pfromDate,''')');    \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN    \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate<=''',ptoDate,''')');    \n" +
                "	END IF;    \n" +
                "    IF(ppolinestatus IS NOT NULL)THEN    \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when c.partType=4 and pom.poWorkingStatus=\"C\" then \"C\" else ifnull(vups.poLineWorkingStatus,\"P\") end),''', ppolinestatus ,''')');    \n" +
                "	END IF;    \n" +
                "	IF(ppostatus IS NOT NULL)THEN    \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when pom.poWorkingStatus=\"C\" then \"C\" when pom.poWorkingStatus=\"CA\" then \"CA\" else \"P\" end),''', ppostatus ,''')');    \n" +
                "	END IF;    \n" +
                "	IF(ppartIds IS NOT NULL)THEN    \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,'))');    \n" +
                "	END IF;    \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);    \n" +
                "	END IF;    \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1';    \n" +
                "	END IF;    \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c where 1=1 and \", pWhereClause);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query1 FROM @SQLStatement2;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-05-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_AI_packing_slip_material_receive_det`;  \n" +
                "CREATE TRIGGER `TRG_AI_packing_slip_material_receive_det` AFTER INSERT ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN              \n" +
                "	DECLARE PORLINE_OTY INT;          \n" +
                "	DECLARE vTotalQty INT;      \n" +
                "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
                "        SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;          \n" +
                "	IF (NEW.isDeleted = TRUE)THEN           \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',poLineCompleteType=(NULL),poLineCompleteReason=(NULL),receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;            \n" +
                "	ELSEIF( NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND             \n" +
                "		PORLINE_OTY <= vTotalQty) THEN              \n" +
                "			UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto', receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;            \n" +
                "		ELSE               \n" +
                "			UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;            \n" +
                "	END IF;                \n" +
                "END;  \n" +
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN                       \n" +
                "	DECLARE v_PackingSlipReceiptType VARCHAR(5);                   \n" +
                "	DECLARE v_CreditMemoType VARCHAR(5);                   \n" +
                "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);                   \n" +
                "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);                   \n" +
                "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);                   \n" +
                "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);              \n" +
                "	DECLARE PORLINE_OTY INT;                  \n" +
                "	DECLARE vTotalQty INT;             \n" +
                "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;                    \n" +
                "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;         \n" +
                "  \n" +
                "	IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN                      \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID AND poLineWorkingStatus!='C';                    \n" +
                "	ELSE                       \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;                 \n" +
                "	END IF;              \n" +
                "  \n" +
                "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),                    \n" +
                "		(                   \n" +
                "			CASE                   \n" +
                "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'                   \n" +
                "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'                   \n" +
                "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'                   \n" +
                "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'                   \n" +
                "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'                   \n" +
                "				ELSE NULL                   \n" +
                "			END                   \n" +
                "		),                   \n" +
                "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),                    \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN                    \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN                   \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),                   \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                   \n" +
                "		END IF;                   \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR PN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN                     \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN                   \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),                   \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                   \n" +
                "		END IF;                   \n" +
                "  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier PN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN                         \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN                   \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),                    \n" +
                "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),                   \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                      \n" +
                "		END IF;                          \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),                    \n" +
                "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN                       \n" +
                "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN                   \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(FORMAT(OLD.invoicePrice, 5) AS CHAR), CAST(FORMAT(new.invoicePrice, 5) AS CHAR),                   \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "		END IF;                   \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN                     \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN                   \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(FORMAT(OLD.purchasePrice, 5) AS CHAR), CAST(FORMAT(new.purchasePrice, 5) AS CHAR),                   \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "		END IF;                   \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',                   \n" +
                "		CAST(                   \n" +
                "			(                   \n" +
                "				CASE                    \n" +
                "					WHEN old.`status` = 'P' THEN 'Pending'                   \n" +
                "					WHEN old.`status` = 'A' THEN 'Approved'                   \n" +
                "					WHEN old.`status` = 'D' THEN 'Disapproved'                    \n" +
                "				END                   \n" +
                "			)                   \n" +
                "		AS CHAR),                   \n" +
                "		CAST(                   \n" +
                "			(                   \n" +
                "				CASE                    \n" +
                "					WHEN new.`status` = 'P' THEN 'Pending'                   \n" +
                "					WHEN new.`status` = 'A' THEN 'Approved'                   \n" +
                "					WHEN new.`status` = 'D' THEN 'Disapproved'                    \n" +
                "				END                   \n" +
                "			)                   \n" +
                "		AS CHAR),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN                        \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN                   \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),                    \n" +
                "			(CASE WHEN OLD.extendedPrice > 0 THEN CAST(FORMAT(OLD.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST((FORMAT(OLD.extendedPrice, 2) * -1) AS CHAR), ')') END),               \n" +
                "			(CASE WHEN new.extendedPrice > 0 THEN CAST(FORMAT(new.extendedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST((FORMAT(new.extendedPrice, 2) * -1) AS CHAR), ')') END),               \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "		END IF;                   \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',                \n" +
                "		(CASE WHEN OLD.extendedReceivedPrice > 0 THEN CAST(FORMAT(OLD.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST((FORMAT(OLD.extendedReceivedPrice, 2) * -1) AS CHAR), ')') END),               \n" +
                "		(CASE WHEN new.extendedReceivedPrice > 0 THEN CAST(FORMAT(new.extendedReceivedPrice, 2) AS CHAR) ELSE CONCAT('(', CAST((FORMAT(new.extendedReceivedPrice, 2) * -1)AS CHAR), ')') END),               \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(FORMAT(OLD.difference, 5) AS CHAR), CAST(FORMAT(new.difference, 5) AS CHAR),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(CAST(OLD.differenceQty AS SIGNED) AS CHAR), CAST(CAST(new.differenceQty AS SIGNED) AS CHAR),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',                   \n" +
                "		CAST(                   \n" +
                "			(                   \n" +
                "				CASE                    \n" +
                "					WHEN old.receivedStatus = 'P' THEN 'Pending'                   \n" +
                "					WHEN old.receivedStatus = 'A' THEN 'Accepted'                   \n" +
                "					WHEN old.receivedStatus = 'R' THEN 'Rejected'                    \n" +
                "				END                   \n" +
                "			)                   \n" +
                "		AS CHAR),                   \n" +
                "		CAST(                   \n" +
                "			(                   \n" +
                "				CASE                    \n" +
                "					WHEN new.receivedStatus = 'P' THEN 'Pending'                   \n" +
                "					WHEN new.receivedStatus = 'A' THEN 'Accepted'                   \n" +
                "					WHEN new.receivedStatus = 'R' THEN 'Rejected'                    \n" +
                "				END                   \n" +
                "			)                   \n" +
                "		AS CHAR),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF v_PackingSlipReceiptType = 'R' THEN                   \n" +
                "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN                   \n" +
                "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;                   \n" +
                "		ELSE                   \n" +
                "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;                   \n" +
                "		END IF;                   \n" +
                "  \n" +
                "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN                   \n" +
                "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;                   \n" +
                "		ELSE                   \n" +
                "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;                   \n" +
                "		END IF;                   \n" +
                "  \n" +
                "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN                   \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;                   \n" +
                "		ELSE                   \n" +
                "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;                   \n" +
                "		END IF;                   \n" +
                "  \n" +
                "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN                   \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;                   \n" +
                "		ELSE                   \n" +
                "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;                   \n" +
                "		END IF;                   \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN                             \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),                   \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "		END IF;                   \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN                             \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),                   \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "		END IF;                   \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN                             \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                               \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,                    \n" +
                "		CONCAT(                   \n" +
                "			(                   \n" +
                "				CASE                   \n" +
                "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '                   \n" +
                "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '                   \n" +
                "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '                   \n" +
                "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '                   \n" +
                "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '                   \n" +
                "					ELSE 'Line# '                   \n" +
                "				END                   \n" +
                "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'                   \n" +
                "		),                   \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                             \n" +
                "	END IF;                   \n" +
                "  \n" +
                "	IF IFNULL(OLD.updatedBy,0) != IFNULL(NEW.updatedBy,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Modified By', CAST(fun_getUserNameByID(OLD.updatedBy) AS CHAR), CAST(fun_getUserNameByID(new.updatedBy) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;               \n" +
                "  \n" +
                "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN                           \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId)                             \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),                 \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId);                           \n" +
                "	END IF;               \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 04-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4560,'2.00','V1','Bug 33120: QA Testing of User Story 32566: Implement Cancel Purchase order Option [03/05/2021] - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4560:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-05-2021 *********************************** */
                "UPDATE page_detail SET menuName='Add Purchase Order Documents' WHERE pageName='Add Purchase Order Documents';  \n" +
                "UPDATE page_detail SET menuName='Add Purchase Order MISC' WHERE pageName='Add Purchase Order MISC';  \n" +
                /* **************************** Add Script Version ->05-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4561,'2.00','V1','Purchase Order Page Name Duplicate-Champak'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4561:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-05-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateCustomerPayment`(              \n" +
                "	IN pCustInvoicePaymentDetList JSON,              \n" +
                "	IN pMfgcodeID INT,              \n" +
                "	IN pPaymentNumber VARCHAR(50),              \n" +
                "	IN pPaymentDate DATE,              \n" +
                "	IN pPaymentAmount DECIMAL(18,8),              \n" +
                "	IN pPaymentType INT,              \n" +
                "	IN pAccountReference VARCHAR(50),              \n" +
                "	IN pBankAccountMasID INT,              \n" +
                "	IN pBankAccountNo VARCHAR(50),              \n" +
                "	IN pBankName VARCHAR(255),              \n" +
                "	IN pRemark VARCHAR(1000),              \n" +
                "	IN pRefPaymentMode VARCHAR(1),              \n" +
                "	IN pTotSelectedInvOfCust INT,             \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,           \n" +
                "	IN pSystemID VARCHAR(20),          \n" +
                "	IN pisZeroPayment INT,    \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,    \n" +
                "	IN pRefCustCreditMemoID INT,     \n" +
                "	IN pRefPaymentType VARCHAR(10) ,      \n" +
                "	IN pUserID INT,              \n" +
                "	IN pUserRoleID INT   \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN              \n" +
                "  \n" +
                "	DECLARE insertedInvPaymentMstID INT;          \n" +
                "	DECLARE vCountExistsCheckNo INT;     \n" +
                "	DECLARE vCountSameCMApplied INT;        \n" +
                "	DECLARE vLockStatusToBe VARCHAR(5);          \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;   \n" +
                "	SET vCountSameCMApplied = 0;         \n" +
                "  \n" +
                "	IF (pRefPaymentType = 'RCV' AND pisConfmTakenForDuplicateCheckNo = 0) THEN          \n" +
                "		/* check duplicate check number if confirmation not taken >> RCV - Receivable */            \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo                    \n" +
                "		FROM packingslip_invoice_payment                    \n" +
                "		WHERE refPaymentMode = pRefPaymentMode   \n" +
                "		AND paymentNumber = pPaymentNumber                    \n" +
                "		AND mfgcodeID = pMfgcodeID          \n" +
                "		AND isPaymentVoided = 0          \n" +
                "		AND isdeleted = 0    ;          \n" +
                "	ELSEIF (pRefPaymentType = 'CCM') THEN		  \n" +
                "		/* check for duplicate credit memo entry >> CCM - Credit Memo */  \n" +
                "		SELECT COUNT(1) INTO vCountSameCMApplied   \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentMode   \n" +
                "		AND refPaymentType = pRefPaymentType    \n" +
                "		AND refCustCreditMemoID = pRefCustCreditMemoID   \n" +
                "		AND isPaymentVoided = 0          \n" +
                "		AND isdeleted = 0    ;       \n" +
                "  \n" +
                "	END IF;       \n" +
                "  \n" +
                "  \n" +
                "	IF(vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0           \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN              \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */                \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;                                                \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS                                                          \n" +
                "		SELECT 	*                                                           \n" +
                "		FROM 	JSON_TABLE(                   \n" +
                "			pCustInvoicePaymentDetList,                                                          \n" +
                "				\"$[*]\" COLUMNS(                  \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",                                                   \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",                                                          \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,              \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,              \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,  \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"              \n" +
                "				)                \n" +
                "			) AS CustInvoicePaymentDetList_JT ;               \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */	                \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;                                                \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS 	              \n" +
                "			SELECT cps.id AS invoiceMstID,               \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,              \n" +
                "				cps.status,              \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det              \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id           \n" +
                "					AND isPaymentVoided = 0              \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet              \n" +
                "			FROM customer_packingslip cps              \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)              \n" +
                "			AND cps.isDeleted = 0              \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */              \n" +
                "		;              \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)               \n" +
                "			> if selected invoice not found from db              \n" +
                "			> original Payment Amount Of Invoice  mismatch              \n" +
                "			> invoice Total Paid Amount mismatch              \n" +
                "			*/	                \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;                                                \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS               \n" +
                "			SELECT tucipl.*              \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl              \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID              \n" +
                "			WHERE (              \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))                \n" +
                "				OR              \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))	              \n" +
                "				OR              \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))              \n" +
                "				)              \n" +
                "			;              \n" +
                "  \n" +
                "	END IF;              \n" +
                "  \n" +
                "	/* set up default temp table if not created */                \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS                \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;              \n" +
                "  \n" +
                "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN              \n" +
                "		-- select 'create';         \n" +
                "  \n" +
                "		/* Lock Status >> Ready To Lock - \"RL\" , Locked - \"LC\" , N/A - \"NA\" */        \n" +
                "		SET vLockStatusToBe = 'NA' ;        \n" +
                "		IF(pTotSelectedInvOfCust > 0) THEN         \n" +
                "			IF((pPaymentAmount - (SELECT IFNULL(SUM(paymentAmountForSelectedInvoice),0)         \n" +
                "							FROM temp_UI_CustInvoicePaymentDetList)) = 0) THEN        \n" +
                "				SET vLockStatusToBe = 'RL' ;        \n" +
                "			END IF;	        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "  \n" +
                "		INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,              \n" +
                "			`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,              \n" +
                "			`bankName`,`remark`,`refPaymentMode`,`systemId` ,         \n" +
                "			`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID` ,    \n" +
                "			`refPaymentType` ,        \n" +
                "			`createdAt`, `createdBy`, `createByRoleId`,    \n" +
                "			`updatedAt`,`updatedBy`,`updateByRoleId`)              \n" +
                "		VALUES(pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,              \n" +
                "			pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,              \n" +
                "			pBankName, pRemark, pRefPaymentMode, pSystemID,              \n" +
                "			vLockStatusToBe,pisZeroPayment, pDepositBatchNumber,  pRefCustCreditMemoID,    \n" +
                "			pRefPaymentType ,  \n" +
                "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,     \n" +
                "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;          \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		SET insertedInvPaymentMstID = LAST_INSERT_ID();                 \n" +
                "  \n" +
                "  \n" +
                "		IF(pTotSelectedInvOfCust > 0) THEN              \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,   \n" +
                "					`appliedDate` ,  \n" +
                "					`createdAt`, `createdBy`,`createByRoleId`,    \n" +
                "					`updatedAt`, `updatedBy`,`updateByRoleId`)              \n" +
                "			SELECT insertedInvPaymentMstID, paymentAmountForSelectedInvoice, invoiceMstID,  \n" +
                "				appliedDate ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,     \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID              \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList ;              \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */	              \n" +
                "			UPDATE customer_packingslip cps              \n" +
                "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID              \n" +
                "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv,              \n" +
                "				cps.updatedBy = pUserID,                 \n" +
                "				cps.updateByRoleId = pUserRoleID ,                \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()              \n" +
                "			WHERE cps.id = tucipdl.invoiceMstID              \n" +
                "			-- and tucipdl.newApplyPaymentStatusOfInv is not null               \n" +
                "			-- and tucipdl.newApplyPaymentStatusOfInv != ''              \n" +
                "			AND cps.isDeleted = 0	;              \n" +
                "  \n" +
                "		END IF;              \n" +
                "  \n" +
                "  \n" +
                "	END IF;              \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */                \n" +
                "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0) OR (vCountExistsCheckNo > 0)  \n" +
                "						OR (vCountSameCMApplied > 0) ) THEN                \n" +
                "		SELECT 0 AS 'spStatus' ;                \n" +
                "	ELSE                \n" +
                "		SELECT 1 AS 'spStatus' ;                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	/* Resp[1] - get all mis match amount records or deleted invoices */                \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;               \n" +
                "  \n" +
                "	/* Resp[2] - newly inserted payment master id  */               \n" +
                "	SELECT insertedInvPaymentMstID AS insertedInvPaymentMstID;           \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */            \n" +
                "	IF (vCountExistsCheckNo > 0) THEN          \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;                \n" +
                "	ELSE                \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;                \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[4] - if credit memo already applied then not allowed to applied same credit memo again  */            \n" +
                "	IF (vCountSameCMApplied > 0) THEN          \n" +
                "		SELECT 1 AS isDuplicateCreditMemoToApply;                \n" +
                "	ELSE                \n" +
                "		SELECT 0 AS isDuplicateCreditMemoToApply;                \n" +
                "	END IF;                \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;                 \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;               \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;              \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 05-05-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustomerPayment`(            \n" +
                "	IN pCustInvoicePaymentDetList JSON,            \n" +
                "	IN pCustomerPaymentMstID INT,            \n" +
                "	IN pMfgcodeID INT,            \n" +
                "	IN pPaymentNumber VARCHAR(50),            \n" +
                "	IN pPaymentDate DATE,            \n" +
                "	IN pPaymentAmount DECIMAL(18,8),            \n" +
                "	IN pPaymentType INT,            \n" +
                "	IN pAccountReference VARCHAR(50),            \n" +
                "	IN pBankAccountMasID INT,            \n" +
                "	IN pBankAccountNo VARCHAR(50),            \n" +
                "	IN pBankName VARCHAR(255),            \n" +
                "	IN pRemark VARCHAR(1000),            \n" +
                "	IN pRefPaymentMode VARCHAR(1),            \n" +
                "	IN pTotSelectedInvOfCust INT,            \n" +
                "	IN pDeleteCustInvPaymentDetList JSON,            \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,          \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,   \n" +
                "	IN pRefPaymentType VARCHAR(10) ,       \n" +
                "	IN pUserID INT,            \n" +
                "	IN pUserRoleID INT            \n" +
                "    )  \n" +
                "BEGIN            \n" +
                "  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE v_db_mainPaymentAmount DECIMAL(18,8) ;         \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;          \n" +
                "  \n" +
                "	IF (pisConfmTakenForDuplicateCheckNo = 0) THEN          \n" +
                "		/* check for duplicate check/payment number if confirmation not taken */            \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo                    \n" +
                "		FROM packingslip_invoice_payment                    \n" +
                "		WHERE refPaymentMode = pRefPaymentMode           \n" +
                "		AND paymentNumber = pPaymentNumber                    \n" +
                "		AND mfgcodeID = pMfgcodeID           \n" +
                "		AND id != pCustomerPaymentMstID          \n" +
                "		AND isPaymentVoided = 0          \n" +
                "		AND isdeleted = 0    ;          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "  \n" +
                "	IF(vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0           \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN            \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */              \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;                                              \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS                                                        \n" +
                "		SELECT 	*                                                         \n" +
                "		FROM 	JSON_TABLE(                 \n" +
                "			pCustInvoicePaymentDetList,                                                        \n" +
                "				\"$[*]\" COLUMNS(                \n" +
                "					`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",            \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",                                                 \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",                                                        \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,            \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,            \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,  \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"             \n" +
                "				)              \n" +
                "			) AS CustInvoicePaymentDetList_JT ;             \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */	              \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;                                              \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS 	            \n" +
                "			SELECT cps.id AS invoiceMstID, cps.status,             \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,            \n" +
                "				pipd.id invPaymentDetMstID,             \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det            \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id           \n" +
                "					AND isPaymentVoided = 0            \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet            \n" +
                "			FROM customer_packingslip cps            \n" +
                "				LEFT JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID            \n" +
                "					 AND pipd.refPayementid = pCustomerPaymentMstID	          \n" +
                "					 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0            \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)            \n" +
                "			AND cps.isDeleted = 0            \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */            \n" +
                "		;            \n" +
                "  \n" +
                "		/* get all deleted invoice payment det (passed from UI but not in db)             \n" +
                "			if selected payment det not found from db - tdacipl.invPaymentDetMstID comes NULL in below query  */            \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;                                              \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS             \n" +
                "			SELECT tucipl.*            \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl            \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID            \n" +
                "			WHERE tucipl.invPaymentDetMstID IS NOT NULL  	             \n" +
                "			AND tucipl.invPaymentDetMstID != IFNULL(tdacipl.invPaymentDetMstID,0)              \n" +
                "			;            \n" +
                "  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)             \n" +
                "			> if selected invoice not found from db > tdacipl.invoiceMstID comes NULL            \n" +
                "			> original Payment Amount Of Invoice  mismatch > tdacipl.originalPayAmountOfInvoice comes NULL            \n" +
                "			> invoice Total Paid Amount mismatch > tdacipl.invTotPaidAmtFromAllPaymentDet comes NULL            \n" +
                "			*/	              \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;                                              \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS             \n" +
                "			SELECT tucipl.* ,             \n" +
                "				tdacipl.invoiceMstID AS invoiceMstIDOfDBAvailable, tdacipl.originalPayAmountOfInvoice AS originalPayAmountOfInvoiceOfDBAvailable,            \n" +
                "				tdacipl.invTotPaidAmtFromAllPaymentDet AS invTotPaidAmtFromAllPaymentDetOfDBAvailable            \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl            \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID            \n" +
                "			WHERE (            \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))              \n" +
                "				OR            \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))	            \n" +
                "				OR            \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))            \n" +
                "				)            \n" +
                "			;            \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)            \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN            \n" +
                "			-- SELECT 'update';            \n" +
                "			IF(pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN             \n" +
                "  \n" +
                "  \n" +
                "				/* get/map all deleting customer Invoice Payment Detail List send from UI */              \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;                                              \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS                                                        \n" +
                "				SELECT 	*                                                         \n" +
                "				FROM 	JSON_TABLE(                 \n" +
                "					pDeleteCustInvPaymentDetList,                                                        \n" +
                "						\"$[*]\" COLUMNS(                \n" +
                "							`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",            \n" +
                "							`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"                                               \n" +
                "						)              \n" +
                "				) AS DeleteCustInvoicePaymentDetList_JT ;             \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;                                              \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS             \n" +
                "					SELECT refCustPackingslipInvoiceID             \n" +
                "					FROM temp_UI_Delete_CustInvoicePaymentDetList ;            \n" +
                "  \n" +
                "  \n" +
                "				/* delete those which are unselected(from UI) inv payment det */            \n" +
                "				UPDATE packingslip_invoice_payment_det             \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,             \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()             \n" +
                "				WHERE id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)           \n" +
                "				AND isPaymentVoided = 0            \n" +
                "				AND isDeleted = 0 ;            \n" +
                "  \n" +
                "  \n" +
                "				/* update invoice payment status */	            \n" +
                "				UPDATE customer_packingslip cps            \n" +
                "					LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet            \n" +
                "						 FROM packingslip_invoice_payment_det            \n" +
                "						WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)            \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0             \n" +
                "						GROUP BY refCustPackingslipInvoiceID ) invPaymentDet            \n" +
                "					 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID                \n" +
                "				SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'             \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND            \n" +
                "								cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'            \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND            \n" +
                "								cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'            \n" +
                "  \n" +
                "							   ELSE cps.paymentStatus END            \n" +
                "							) ,            \n" +
                "					cps.updatedBy = pUserID,               \n" +
                "					cps.updateByRoleId = pUserRoleID ,              \n" +
                "					cps.updatedAt = fun_DatetimetoUTCDateTime()            \n" +
                "				WHERE cps.id IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)            \n" +
                "				AND cps.isDeleted = 0	;            \n" +
                "  \n" +
                "			END IF;            \n" +
                "  \n" +
                "  \n" +
                "			/* update all inv payment det amount whose amount is changed from UI */            \n" +
                "			UPDATE packingslip_invoice_payment_det pipd            \n" +
                "				JOIN (SELECT invPaymentDetMstID, paymentAmountForSelectedInvoice , appliedDate           \n" +
                "					FROM temp_UI_CustInvoicePaymentDetList            \n" +
                "					WHERE invPaymentDetMstID IS NOT NULL) tucipdl            \n" +
                "				ON pipd.id = tucipdl.invPaymentDetMstID            \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedInvoice,0),   \n" +
                "				pipd.appliedDate = tucipdl.appliedDate ,  \n" +
                "				pipd.updatedBy = pUserID,               \n" +
                "				pipd.updateByRoleId = pUserRoleID ,              \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()            \n" +
                "			WHERE IFNULL(pipd.paymentAmount,0) != IFNULL(tucipdl.paymentAmountForSelectedInvoice,0)            \n" +
                "			AND pipd.refPayementid = pCustomerPaymentMstID            \n" +
                "			AND pipd.isPaymentVoided = 0           \n" +
                "			AND pipd.isDeleted = 0             \n" +
                "			;            \n" +
                "  \n" +
                "			/* insert newly selected inv payment det */            \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`appliedDate` ,  \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)            \n" +
                "			SELECT pCustomerPaymentMstID, IFNULL(paymentAmountForSelectedInvoice,0), invoiceMstID,   \n" +
                "				appliedDate ,  \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID            \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList             \n" +
                "			WHERE invPaymentDetMstID IS NULL            \n" +
                "			;            \n" +
                "  \n" +
                "			/* update invoice payment status */	            \n" +
                "			UPDATE customer_packingslip cps            \n" +
                "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID            \n" +
                "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv ,            \n" +
                "				cps.updatedBy = pUserID,               \n" +
                "				cps.updateByRoleId = pUserRoleID ,              \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()	            \n" +
                "			WHERE cps.id = tucipdl.invoiceMstID            \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv IS NOT NULL             \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv != ''            \n" +
                "			AND cps.isDeleted = 0	;	            \n" +
                "  \n" +
                "		END IF;	            \n" +
                "  \n" +
                "  \n" +
                "	ELSE            \n" +
                "  \n" +
                "		IF(vCountExistsCheckNo = 0 AND pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN             \n" +
                "  \n" +
                "			/* get/map all deleting customer Invoice Payment Detail List send from UI */              \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;                                              \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS                                                        \n" +
                "			SELECT 	*                                                         \n" +
                "			FROM 	JSON_TABLE(                 \n" +
                "				pDeleteCustInvPaymentDetList,                                                        \n" +
                "					\"$[*]\" COLUMNS(                \n" +
                "						`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",            \n" +
                "						`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"                                               \n" +
                "					)              \n" +
                "			) AS DeleteCustInvoicePaymentDetList_JT ;             \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;                                              \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS             \n" +
                "				SELECT refCustPackingslipInvoiceID             \n" +
                "				FROM temp_UI_Delete_CustInvoicePaymentDetList ;            \n" +
                "  \n" +
                "  \n" +
                "			/* delete those which are unselected(from UI) inv payment det */            \n" +
                "			UPDATE packingslip_invoice_payment_det             \n" +
                "			SET isDeleted = 1, deletedBy = pUserID,             \n" +
                "				deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()             \n" +
                "			WHERE id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)           \n" +
                "			AND isPaymentVoided = 0            \n" +
                "			AND isDeleted = 0 ;            \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */	            \n" +
                "			UPDATE customer_packingslip cps            \n" +
                "				LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet            \n" +
                "					 FROM packingslip_invoice_payment_det            \n" +
                "					WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)            \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0             \n" +
                "					GROUP BY refCustPackingslipInvoiceID ) invPaymentDet            \n" +
                "				 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID                \n" +
                "			SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'             \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND            \n" +
                "							cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'            \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND            \n" +
                "							cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'            \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END            \n" +
                "						) ,            \n" +
                "				cps.updatedBy = pUserID,               \n" +
                "				cps.updateByRoleId = pUserRoleID ,              \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()            \n" +
                "			WHERE cps.id IN(SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)            \n" +
                "			AND cps.isDeleted = 0	;            \n" +
                "  \n" +
                "		END IF;	            \n" +
                "  \n" +
                "	END IF;            \n" +
                "  \n" +
                "  \n" +
                "	IF (vCountExistsCheckNo = 0) THEN          \n" +
                "		/* update invoice payment master details */            \n" +
                "		UPDATE packingslip_invoice_payment            \n" +
                "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,            \n" +
                "			paymentType = pPaymentType,            \n" +
                "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,            \n" +
                "			bankAccountNo = pBankAccountNo, bankName = pBankName,            \n" +
                "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,    \n" +
                "			updatedBy = pUserID,               \n" +
                "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()             \n" +
                "		WHERE id = pCustomerPaymentMstID          \n" +
                "		AND isPaymentVoided = 0	          \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "		IF (pRefPaymentType = 'RCV') THEN   /* Receivable: 'RCV' */  \n" +
                "			/* update lockStatus based on Payment Variance if record not locked */        \n" +
                "			UPDATE packingslip_invoice_payment psip        \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount                    \n" +
                "						FROM packingslip_invoice_payment_det psipd                      \n" +
                "						WHERE psipd.refPayementid = pCustomerPaymentMstID        \n" +
                "						AND psipd.refCustPackingslipInvoiceID IS NOT NULL                       \n" +
                "						AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0        \n" +
                "						GROUP BY psipd.refPayementid ) invPayDetTemp                       \n" +
                "				ON psip.id = invPayDetTemp.refPayementid        \n" +
                "			SET psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) > 0 THEN 'NA'        \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0 THEN 'RL'        \n" +
                "						ELSE psip.lockStatus END 	        \n" +
                "			WHERE psip.id = pCustomerPaymentMstID          \n" +
                "			AND psip.lockStatus != 'LC'			        \n" +
                "			AND psip.isPaymentVoided = 0	          \n" +
                "			AND psip.isDeleted = 0         \n" +
                "			;   \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pRefPaymentType = 'CCM') THEN   \n" +
                "  \n" +
                "			/* update main payment amount in case of payment from credit memo  */            \n" +
                "			SELECT paymentAmount INTO v_db_mainPaymentAmount                   \n" +
                "			FROM packingslip_invoice_payment                    \n" +
                "			WHERE id = pCustomerPaymentMstID          \n" +
                "			AND isPaymentVoided = 0 AND isdeleted = 0    ;     \n" +
                "  \n" +
                "			/* check db main payment and new payment not match then only update */  \n" +
                "			IF(pPaymentAmount != v_db_mainPaymentAmount) THEN  \n" +
                "				UPDATE packingslip_invoice_payment            \n" +
                "				SET paymentAmount = pPaymentAmount,             \n" +
                "					updatedBy = pUserID,               \n" +
                "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()             \n" +
                "				WHERE id = pCustomerPaymentMstID          \n" +
                "				AND isPaymentVoided = 0	          \n" +
                "				AND isDeleted = 0 ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END IF;       \n" +
                "  \n" +
                "	END IF;	          \n" +
                "  \n" +
                "  \n" +
                "	/* set up default temp table if not created */              \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS              \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;            \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS              \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;            \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */              \n" +
                "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) > 0)             \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0)          \n" +
                "		OR (vCountExistsCheckNo > 0)) THEN              \n" +
                "		SELECT 0 AS 'spStatus' ;              \n" +
                "	ELSE              \n" +
                "		SELECT 1 AS 'spStatus' ;              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	/* Resp[1] - get all deleted invoice payment det (passed from UI but not in db) */              \n" +
                "	SELECT * FROM temp_Deleted_CustInvPayDetList ;             \n" +
                "  \n" +
                "	/* Resp[2] - get all mis match amount records or deleted invoices */              \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;             \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */            \n" +
                "	IF (vCountExistsCheckNo > 0) THEN          \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;                \n" +
                "	ELSE                \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;                \n" +
                "	END IF;            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;               \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;             \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;                                \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs; 	            \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 05-05-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllInvoiceOfCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllInvoiceOfCustomerPayment`(          \n" +
                "	IN pCustomerID INT,          \n" +
                "	IN pPayementID INT,          \n" +
                "	IN pInvoiceTransType VARCHAR(5),        \n" +
                "	IN pisGetOnlyPaidInvoiceFromPayment TINYINT ,  \n" +
                "	IN pIsExcludeZeroValueInv TINYINT          \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "  \n" +
                "	DECLARE v_isPaymentVoided TINYINT ;        \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(15);                                                                             \n" +
                "	DECLARE vTimeZone VARCHAR(50);       \n" +
                "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);      \n" +
                "	DECLARE v_paymentTermsID INT;	    \n" +
                "	DECLARE v_custTermsDays INT;    \n" +
                "	SET v_custTermsDays = NULL;    \n" +
                "  \n" +
                "	SET v_isPaymentVoided = 0;                                                                                                                        \n" +
                "	SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;       \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;       \n" +
                "	SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\")       \n" +
                "			INTO currDateWithAppliedTimeZone ;      \n" +
                "	-- select currDateWithAppliedTimeZone	;      \n" +
                "  \n" +
                "	SELECT paymentTermsID INTO v_paymentTermsID    \n" +
                "	FROM mfgcodemst     \n" +
                "	WHERE id = pCustomerID     \n" +
                "	AND isDeleted = 0 ;    \n" +
                "  \n" +
                "	IF v_paymentTermsID IS NOT NULL THEN     \n" +
                "		SELECT IFNULL(termsDays,0) INTO v_custTermsDays    \n" +
                "		FROM `genericcategory`     \n" +
                "		WHERE `gencCategoryID` = v_paymentTermsID    \n" +
                "		AND categoryType = 'Payment Terms'     \n" +
                "		AND isDeleted = 0 ;    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	IF(pPayementID IS NULL OR pPayementID = '') THEN          \n" +
                "  \n" +
                "		/* add new customer payment case */          \n" +
                "		SELECT *           \n" +
                "		FROM (          \n" +
                "			SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,           \n" +
                "			cps.totalAmount AS originalPayAmountOfInvoice,          \n" +
                "				cps.status, cps.isZeroValue ,    \n" +
                "				v_custTermsDays AS custCurrentTermsDays ,      \n" +
                "				(CASE WHEN cps.totalAmount = 0 THEN 'N/A'    \n" +
                "					WHEN v_paymentTermsID IS NULL THEN ''    \n" +
                "					WHEN fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID) <= CAST(currDateWithAppliedTimeZone AS DATE)      \n" +
                "							THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID))      \n" +
                "					ELSE 0 END) AS noOfDaysLateAfterDueDate,       \n" +
                "				NULL invPaymentDetMstID,  NULL refCustPackingslipInvoiceID,          \n" +
                "				0 AS invPaidAmtFromCurrPaymentDet,          \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det          \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id        \n" +
                "					AND isPaymentVoided = 0           \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet ,  \n" +
                "				(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0   \n" +
                "					WHERE pipd.refCustPackingslipInvoiceID = cps.id    \n" +
                "					AND pip.refCustCreditMemoID IS NOT NULL      \n" +
                "					AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,	  \n" +
                "				NULL AS appliedDate	          \n" +
                "			FROM customer_packingslip cps          \n" +
                "			WHERE cps.customerID = pCustomerID          \n" +
                "			AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */         	          \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */    \n" +
                "			AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
                "			AND cps.isDeleted = 0        \n" +
                "		) tempInv          \n" +
                "		WHERE (          \n" +
                "			(           \n" +
                "				tempInv.originalPayAmountOfInvoice = 0 AND tempInv.invTotPaidAmtFromAllPaymentDet IS NULL          \n" +
                "					/* get all peding to pay inv with 0 amount */          \n" +
                "			)          \n" +
                "			OR          \n" +
                "			(          \n" +
                "				(tempInv.originalPayAmountOfInvoice  - IFNULL(tempInv.invTotPaidAmtFromAllPaymentDet,0)) > 0            \n" +
                "						 /* get all peding to pay inv */	          \n" +
                "			)          \n" +
                "		   )				          \n" +
                "  \n" +
                "		;          \n" +
                "  \n" +
                "	ELSE          \n" +
                "		/* update customer payment case */          \n" +
                "  \n" +
                "		SELECT isPaymentVoided INTO v_isPaymentVoided        \n" +
                "		FROM packingslip_invoice_payment        \n" +
                "		WHERE id = pPayementID         \n" +
                "		AND isDeleted = 0 ;        \n" +
                "  \n" +
                "  \n" +
                "		IF(v_isPaymentVoided = 0) THEN        \n" +
                "  \n" +
                "  \n" +
                "			IF(pisGetOnlyPaidInvoiceFromPayment = 0) THEN         \n" +
                "			/* get already paid invoices + get pending to pay invoices */          \n" +
                "  \n" +
                "				/* get already paid invoices  */          \n" +
                "				SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,           \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,          \n" +
                "					cps.status,  cps.isZeroValue ,      \n" +
                "					v_custTermsDays AS custCurrentTermsDays ,    \n" +
                "					(CASE WHEN cps.totalAmount = 0 THEN 'N/A'      \n" +
                "						WHEN v_paymentTermsID IS NULL THEN ''    \n" +
                "						WHEN fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID) <= CAST(currDateWithAppliedTimeZone AS DATE)      \n" +
                "							THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID))      \n" +
                "						ELSE 0 END) AS noOfDaysLateAfterDueDate,         \n" +
                "					pipd.id invPaymentDetMstID,  pipd.refCustPackingslipInvoiceID,          \n" +
                "					IFNULL(pipd.paymentAmount,0) AS invPaidAmtFromCurrPaymentDet,          \n" +
                "					(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det          \n" +
                "						WHERE refCustPackingslipInvoiceID = cps.id         \n" +
                "						AND isPaymentVoided = 0          \n" +
                "						AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet ,  \n" +
                "					(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0   \n" +
                "						WHERE pipd.refCustPackingslipInvoiceID = cps.id    \n" +
                "						AND pip.refCustCreditMemoID IS NOT NULL      \n" +
                "						AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,	  \n" +
                "					pipd.appliedDate         \n" +
                "				FROM customer_packingslip cps          \n" +
                "					JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID          \n" +
                "								 AND pipd.refPayementid = pPayementID          \n" +
                "								 AND pipd.isPaymentVoided = 0        \n" +
                "								 AND pipd.isDeleted = 0          \n" +
                "				WHERE cps.customerID = pCustomerID          \n" +
                "				AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */           \n" +
                "				AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "				AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)  \n" +
                "				AND cps.isDeleted = 0           \n" +
                "  \n" +
                "				UNION          \n" +
                "  \n" +
                "				/* get pending to pay invoices  */          \n" +
                "				SELECT *           \n" +
                "				FROM (          \n" +
                "					SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,           \n" +
                "					cps.totalAmount AS originalPayAmountOfInvoice,          \n" +
                "						cps.status, cps.isZeroValue ,      \n" +
                "						v_custTermsDays AS custCurrentTermsDays ,    \n" +
                "						(CASE WHEN cps.totalAmount = 0 THEN 'N/A'      \n" +
                "							WHEN v_paymentTermsID IS NULL THEN ''    \n" +
                "							WHEN fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID) <= CAST(currDateWithAppliedTimeZone AS DATE)      \n" +
                "								THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID))      \n" +
                "							ELSE 0 END) AS noOfDaysLateAfterDueDate,          \n" +
                "						NULL invPaymentDetMstID,  NULL refCustPackingslipInvoiceID,          \n" +
                "						0 AS invPaidAmtFromCurrPaymentDet,          \n" +
                "						(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det          \n" +
                "							WHERE refCustPackingslipInvoiceID = cps.id         \n" +
                "							AND isPaymentVoided = 0        \n" +
                "							AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet,  \n" +
                "						(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "								JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0   \n" +
                "							WHERE pipd.refCustPackingslipInvoiceID = cps.id    \n" +
                "							AND pip.refCustCreditMemoID IS NOT NULL      \n" +
                "							AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,		  \n" +
                "						NULL AS appliedDate          \n" +
                "					FROM customer_packingslip cps          \n" +
                "					WHERE cps.customerID = pCustomerID          \n" +
                "					AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */           \n" +
                "					AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */   \n" +
                "					AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)         \n" +
                "					AND cps.id NOT IN (SELECT refCustPackingslipInvoiceID FROM packingslip_invoice_payment_det          \n" +
                "								WHERE refPayementid = pPayementID         \n" +
                "								AND isPaymentVoided = 0        \n" +
                "								AND isDeleted = 0 GROUP BY refCustPackingslipInvoiceID)  \n" +
                "					AND cps.isDeleted = 0  				          \n" +
                "  \n" +
                "				) tempInv          \n" +
                "				WHERE           \n" +
                "				 (          \n" +
                "					(           \n" +
                "						tempInv.originalPayAmountOfInvoice = 0 AND tempInv.invTotPaidAmtFromAllPaymentDet IS NULL          \n" +
                "							/* get all peding to pay inv with 0 amount */          \n" +
                "					)          \n" +
                "					OR          \n" +
                "					(          \n" +
                "						(tempInv.originalPayAmountOfInvoice  - IFNULL(tempInv.invTotPaidAmtFromAllPaymentDet,0)) > 0            \n" +
                "								 /* get all peding to pay inv */	          \n" +
                "					)          \n" +
                "				   )          \n" +
                "				;         \n" +
                "  \n" +
                "			ELSEIF(pisGetOnlyPaidInvoiceFromPayment = 1) THEN        \n" +
                "  \n" +
                "				/* get already paid invoices  */          \n" +
                "				SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,           \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,          \n" +
                "					cps.status,  cps.isZeroValue ,       \n" +
                "					v_custTermsDays AS custCurrentTermsDays ,       \n" +
                "					(CASE WHEN cps.totalAmount = 0 THEN 'N/A'      \n" +
                "						WHEN v_paymentTermsID IS NULL THEN ''    \n" +
                "						WHEN fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID) <= CAST(currDateWithAppliedTimeZone AS DATE)      \n" +
                "							THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID))      \n" +
                "						ELSE 0 END) AS noOfDaysLateAfterDueDate,       \n" +
                "					pipd.id invPaymentDetMstID,  pipd.refCustPackingslipInvoiceID,          \n" +
                "					IFNULL(pipd.paymentAmount,0) AS invPaidAmtFromCurrPaymentDet,          \n" +
                "					(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det          \n" +
                "						WHERE refCustPackingslipInvoiceID = cps.id         \n" +
                "						AND isPaymentVoided = 0          \n" +
                "						AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet ,  \n" +
                "					(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0   \n" +
                "						WHERE pipd.refCustPackingslipInvoiceID = cps.id    \n" +
                "						AND pip.refCustCreditMemoID IS NOT NULL      \n" +
                "						AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,	  \n" +
                "					pipd.appliedDate   		          \n" +
                "				FROM customer_packingslip cps          \n" +
                "					JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID          \n" +
                "								 AND pipd.refPayementid = pPayementID          \n" +
                "								 AND pipd.isPaymentVoided = 0        \n" +
                "								 AND pipd.isDeleted = 0          \n" +
                "				WHERE cps.customerID = pCustomerID          \n" +
                "				AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */           \n" +
                "				AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */   \n" +
                "				AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)   \n" +
                "				AND cps.isDeleted = 0      \n" +
                "				;        \n" +
                "  \n" +
                "			END IF;	        \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		ELSEIF(v_isPaymentVoided = 1) THEN        \n" +
                "  \n" +
                "			/* get already paid invoices only */          \n" +
                "			SELECT cps.id AS invoiceMstID, cps.invoiceNumber, cps.invoiceDate,           \n" +
                "			cps.totalAmount AS originalPayAmountOfInvoice,          \n" +
                "				cps.status, cps.isZeroValue ,      \n" +
                "				v_custTermsDays AS custCurrentTermsDays ,      \n" +
                "				(CASE WHEN cps.totalAmount = 0 THEN 'N/A'      \n" +
                "					WHEN v_paymentTermsID IS NULL THEN ''    \n" +
                "					WHEN fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID) <= CAST(currDateWithAppliedTimeZone AS DATE)      \n" +
                "						THEN DATEDIFF(CAST(currDateWithAppliedTimeZone AS DATE),fun_getDueDateEOM(cps.invoiceDate,v_custTermsDays,v_paymentTermsID))      \n" +
                "					ELSE 0 END) AS noOfDaysLateAfterDueDate,        \n" +
                "				pipd.id invPaymentDetMstID,  pipd.refCustPackingslipInvoiceID,  pipd.isPaymentVoided,        \n" +
                "				IFNULL(pipd.paymentAmount,0) AS invPaidAmtFromCurrPaymentDet,          \n" +
                "				((SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det          \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id         \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0)         \n" +
                "				   --  + IFNULL(pipd.paymentAmount,0)        \n" +
                "				    ) AS invTotPaidAmtFromAllPaymentDet ,  \n" +
                "				(SELECT IFNULL(SUM(pipd.paymentAmount),0) FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0   \n" +
                "					WHERE pipd.refCustPackingslipInvoiceID = cps.id    \n" +
                "					AND pip.refCustCreditMemoID IS NOT NULL      \n" +
                "					AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0) AS invTotPaidAmtFromAllCMPayment ,      \n" +
                "				pipd.appliedDate             \n" +
                "			FROM customer_packingslip cps          \n" +
                "				JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID          \n" +
                "							 AND pipd.refPayementid = pPayementID          \n" +
                "							 AND pipd.isDeleted = 0          \n" +
                "			WHERE cps.customerID = pCustomerID          \n" +
                "			AND cps.transType = pInvoiceTransType   /* here 'I' for invoice */           \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "			AND (CASE WHEN pIsExcludeZeroValueInv = 1 THEN cps.totalAmount > 0 ELSE 1=1 END)   \n" +
                "			AND cps.isDeleted = 0             \n" +
                "			;  	        \n" +
                "  \n" +
                "		END IF;        \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	END IF;          \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* get customer Past Due Balance >> check from current date till pending */      \n" +
                "	SELECT SUM(CASE WHEN a.paymentDueDate <= CAST(currDateWithAppliedTimeZone AS DATE) THEN a.totalOutstandingAmount ELSE 0 END) AS pastDueAmount       \n" +
                "	FROM (        \n" +
                "		SELECT customerID,      \n" +
                "			(IFNULL(totalAmount,0) - IFNULL(get_totalCustomerInvoiceReceivedAmountById(id),0)) AS totalOutstandingAmount ,        \n" +
                "				DATE_ADD(invoiceDate, INTERVAL IFNULL(termsDays,0) DAY) paymentDueDate          \n" +
                "  \n" +
                "		FROM customer_packingslip          \n" +
                "		WHERE customerID = pCustomerID      \n" +
                "		AND transType = pInvoiceTransType   /* here 'I' for invoice */           \n" +
                "		AND isDeleted = 0          \n" +
                "	    ) a          \n" +
                "	GROUP BY a.customerID ;      \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 05-05-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllCreditMemoOfCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllCreditMemoOfCustomerPayment`(    \n" +
                "	IN pCustomerID INT,    \n" +
                "	IN pCreditMemoTransType VARCHAR(5)    \n" +
                "    )  \n" +
                "BEGIN    \n" +
                "  \n" +
                "	SELECT cps.id AS creditMemoMstID,     \n" +
                "		cps.creditMemoNumber, cps.creditMemoDate,    \n" +
                "		cps.refDebitMemoNumber, cps.refDebitMemoDate,     \n" +
                "		IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount ,    \n" +
                "		(SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment  \n" +
                "			WHERE refCustCreditMemoID = cps.id  \n" +
                "			AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo   \n" +
                "	FROM customer_packingslip cps    \n" +
                "	WHERE cps.transType = pCreditMemoTransType  -- 'C' - credit memo    \n" +
                "	AND cps.customerID = pCustomerID    \n" +
                "	AND cps.`status` = 2    \n" +
                "	AND cps.isDeleted = 0     \n" +
                "	;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 05-05-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoicePayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoicePayment`(                                                                                                    \n" +
                "	IN ppageIndex INT,                                                                                                    \n" +
                "	IN precordPerPage INT,                                                                                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                        \n" +
                "	IN pCustomerIDs VARCHAR(16383),                                        \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),                                        \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),                                        \n" +
                "	IN pExactPaymentNumberSearch TINYINT,        \n" +
                "	IN pPaymentNumber VARCHAR(1000),                                         \n" +
                "	IN pInvoiceNumber VARCHAR(1000),                                         \n" +
                "	IN pAmount VARCHAR(50),           \n" +
                "	IN pExactPaymentAmountSearch TINYINT,                                          \n" +
                "	IN pFromDate DATE,                                                      \n" +
                "	IN pToDate DATE,          \n" +
                "	IN pIsDisplayZeroPaymentDataOnly TINYINT,                    \n" +
                "	IN pRefPaymentMode VARCHAR(1) ,  \n" +
                "	IN pRefPaymentType VARCHAR(10)                                         \n" +
                ")  \n" +
                "BEGIN                                                                                                    \n" +
                "	DECLARE pOffset INT;                                                                                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                                                    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                                                 \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                                                  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(5000);  \n" +
                "	DECLARE v_TypeOfPaymentWhereClause VARCHAR(500);  \n" +
                "	DECLARE v_JoinWithCPSForCM VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForAppliedCM VARCHAR(500);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                                                        \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                                                   \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';   \n" +
                "	SET v_JoinWithCPSForCM = '';  \n" +
                "	SET v_FieldsForAppliedCM = '';  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                              \n" +
                "  		SET pWhereClause = '1=1' ;                                              \n" +
                "	END IF;                                                 \n" +
                "  \n" +
                "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN                                                                                                                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');                                                                               \n" +
                "	END IF;	                                         \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN                                                                                                                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');                                                                               \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN                                                                                                                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');                                                                               \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN                                                                                                                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');                                                                                       \n" +
                "	END IF;	   \n" +
                "  \n" +
                "	/* show direct payment data or customer credit memo data */  \n" +
                "  \n" +
                "	IF (pRefPaymentType = 'CCM') THEN  /* CreditMemo: 'CCM' */  \n" +
                "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NOT NULL ');  \n" +
                "		SET v_JoinWithCPSForCM = CONCAT(' JOIN `customer_packingslip` cps ON psip.refCustCreditMemoID = cps.id AND cps.isDeleted = 0 ');  \n" +
                "		SET v_FieldsForAppliedCM = CONCAT(' psip.refCustCreditMemoID , cps.creditMemoDate , cps.creditMemoNumber ,   \n" +
                "			cps.totalAmount AS creditMemoAmount ,  \n" +
                "			IFNULL(cps.totalAmount,0) + IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmtOfCM ,   \n" +
                "			(CASE WHEN (IFNULL(cps.totalAmount,0) + IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0 THEN \"Received & Applied\"          \n" +
                "				ELSE \"Received\" END) AS isPaymentVoidedConvertedValueOfCM ,	  \n" +
                "			');  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NULL ');  \n" +
                "	END IF;                                     \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN                                                                                                                                                                          \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND                              \n" +
                "             EXISTS(                         \n" +
                "			SELECT  1                       \n" +
                "			FROM packingslip_invoice_payment_det                              \n" +
                "			WHERE refPayementid = psip.id             \n" +
                "			AND isDeleted=0                    \n" +
                "			AND refCustPackingslipInvoiceID IN (SELECT id                       \n" +
                "								FROM customer_packingslip                              \n" +
                "								WHERE transType = \"I\"                   \n" +
                "								AND invoiceNumber = \"',pInvoiceNumber,'\"                      \n" +
                "								AND isDeleted=0)                      \n" +
                "			 )');                                                                                     \n" +
                "	END IF;	                                         \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN                                                                                                                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');                                                                                         \n" +
                "	END IF;	                                             \n" +
                "  \n" +
                "	IF(pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN                                              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');                                                    \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN                                              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');                                              \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN                                              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');                                              \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF(pIsDisplayZeroPaymentDataOnly = 1) THEN        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');            \n" +
                "	END IF;                                         \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"              			                                                            \n" +
                "            SELECT 						                                                      \n" +
                "		psip.id,                                                                  \n" +
                "                psip.mfgcodeID,                                              \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,                                 \n" +
                "                psip.isPaymentVoided,                            \n" +
                "                (CASE WHEN psip.isPaymentVoided = 0 THEN        \n" +
                "				(CASE WHEN (invPayDetTemp.invoiceNumberList IS NOT NULL AND         \n" +
                "					(IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0) THEN 'Received & Applied'          \n" +
                "				ELSE 'Received' END)                        \n" +
                "                    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue,                            \n" +
                "		psip.voidPaymentReason,              \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,               \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,                                \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')              \n" +
                "										ELSE NULL END) AS voidedAt,	                          \n" +
                "                psip.refVoidedPaymentNumber,                \n" +
                "                psip.refVoidedPaymentId,                            \n" +
                "                psip.paymentNumber,                                              \n" +
                "                psip.bankName,                                              \n" +
                "                psip.bankAccountNo,                                              \n" +
                "                psip.paymentType,                                              \n" +
                "                psip.bankAccountMasID,             \n" +
                "                psip.systemId ,                                             \n" +
                "                gc.gencCategoryName paymentMethod,                                        \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,                                        \n" +
                "		psip.paymentDate,                                        \n" +
                "                psip.paymentAmount,                                        \n" +
                "		psip.payToAddress payToAddress,                                                       \n" +
                "                psip.accountReference,                                        \n" +
                "                psip.remark,                   \n" +
                "                psip.lockStatus,        \n" +
                "		(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'         \n" +
                "			 WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,	        \n" +
                "                fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,                                \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,                                                                   \n" +
                "                invPayDetTemp.invoiceNumberList,                       \n" +
                "                IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS selectedInvoiceTotPaymentAmount,                    \n" +
                "                IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS adjustmenPendingAmt,             \n" +
                "                (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_packingslip_invoice_payment'            \n" +
                "				AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0) AS totalDocuments ,            \n" +
                "		psip.isZeroPayment , psip.depositBatchNumber ,  \n" +
                "		\" , v_FieldsForAppliedCM ,\"     \n" +
                "		fun_getUserNameByID(psip.createdBy) createdby,                                                                    \n" +
                "		fun_getUserNameByID(psip.updatedBy) updatedby,                                                    \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,	                                                  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,                                                    \n" +
                "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,                                               \n" +
                "		fun_getRoleByID(psip.createByRoleId) createdbyRole                                               \n" +
                "	   FROM packingslip_invoice_payment psip                                         \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0                      \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber, '#####',cps.id SEPARATOR '@@@@@') invoiceNumberList ,                    \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount                    \n" +
                "				    FROM packingslip_invoice_payment_det psipd                      \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id                       \n" +
                "											AND cps.isDeleted = 0                      \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL                       \n" +
                "				     AND psipd.isDeleted = 0                      \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp                       \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "			\",v_JoinWithCPSForCM ,\"                           \n" +
                "            WHERE refPaymentMode = '\",pRefPaymentMode,\"'                       \n" +
                "            AND psip.isDeleted = 0                       \n" +
                "             \" ,v_InvoiceNumberWhereClause ,  \n" +
                "		v_TypeOfPaymentWhereClause  \n" +
                "             );                                                \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                                                    \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";                                                                                                    \n" +
                "	ELSE                                                                                                    \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;                                                                                                    \n" +
                "	END IF;	                                                            		                                        \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                                                     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                                                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                    \n" +
                "	ELSE	                                                                                                    \n" +
                "		SET rowNumWhere = '';                                                                                                    \n" +
                "	END IF;	                                                                                                     \n" +
                "  \n" +
                "	/* to get total count of rows */                                                                                 \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);                                                               			                							                        \n" +
                "  \n" +
                "        PREPARE query1 FROM @SQLStatement1;                                                                                \n" +
                "	EXECUTE query1;                                                                                \n" +
                "	DEALLOCATE PREPARE query1;                                                                              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                	                                                                           \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                \n" +
                "	EXECUTE query2;                                                                                \n" +
                "	DEALLOCATE PREPARE query2;                                                                             \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-05-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustInvPaymentDetailList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustInvPaymentDetailList`(                                                                                                    \n" +
                "	IN ppageIndex INT,                                                                                                    \n" +
                "	IN precordPerPage INT,                                                                                                    \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                                    \n" +
                "	IN pWhereClause VARCHAR(16383),                                        \n" +
                "	IN pCustomerIDs VARCHAR(16383),                                        \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),                                        \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),                                        \n" +
                "	IN pExactPaymentNumberSearch TINYINT,        \n" +
                "	IN pPaymentNumber VARCHAR(50),                                         \n" +
                "	IN pInvoiceNumber VARCHAR(50),                                         \n" +
                "	IN pAmount VARCHAR(50),           \n" +
                "	IN pExactPaymentAmountSearch TINYINT,                                          \n" +
                "	IN pFromDate DATE,                                                      \n" +
                "	IN pToDate DATE,    \n" +
                "	IN pFromInvoiceDate DATE,                                                      \n" +
                "	IN pToInvoiceDate DATE,          \n" +
                "	IN pIsDisplayZeroPaymentDataOnly TINYINT,                    \n" +
                "	IN pRefPaymentMode VARCHAR(1)                                           \n" +
                ")  \n" +
                "BEGIN                                                                                                    \n" +
                "	DECLARE pOffset INT;                                                                                                    \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                                                    \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                                                 \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                                                  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                                                        \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                                                   \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                              \n" +
                "  		SET pWhereClause = '1=1' ;                                              \n" +
                "	END IF;                                                 \n" +
                "  \n" +
                "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN                                                                                                                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');                                                                               \n" +
                "	END IF;	                                         \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN                                                                                                                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');                                                                               \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN                                                                                                                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');                                                                               \n" +
                "	END IF;	                                    \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN                                                                                                                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');                                                                                       \n" +
                "	END IF;	                                         \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN    \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceNumber = \"',pInvoiceNumber,'\"');	                                                                                    \n" +
                "	END IF;	                                         \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN                                                                                                                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');                                                                                         \n" +
                "	END IF;	                                             \n" +
                "  \n" +
                "	IF(pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN                                              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');                                                    \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN                                              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');                                              \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN                                              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');                                              \n" +
                "	END IF;    \n" +
                "  \n" +
                "	IF(pFromInvoiceDate IS NOT NULL AND pToInvoiceDate IS NOT NULL) THEN                                              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate >= \"',pFromInvoiceDate,'\" AND invoiceDate <= \"',pToInvoiceDate,'\" ');                                                    \n" +
                "	ELSEIF(pFromInvoiceDate IS NOT NULL AND pToInvoiceDate IS NULL) THEN                                              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate >= \"',pFromInvoiceDate,'\" ');                                              \n" +
                "	ELSEIF(pToInvoiceDate IS NOT NULL AND pFromInvoiceDate IS NULL) THEN                                              \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate <= \"',pToInvoiceDate,'\" ');                                              \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF(pIsDisplayZeroPaymentDataOnly = 1) THEN        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');            \n" +
                "	END IF;                                         \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"              			                                                            \n" +
                "            SELECT 						                                                      \n" +
                "		psip.id AS paymentMstID ,                                                                  \n" +
                "                psip.mfgcodeID,                                              \n" +
                "		fun_getMfgCodeAndNameByID(psip.mfgcodeID) customerCodeName,                                   \n" +
                "                psip.paymentNumber,                                              \n" +
                "                psip.bankName,                                              \n" +
                "                psip.bankAccountNo,                                              \n" +
                "                psip.paymentType,                                              \n" +
                "                psip.bankAccountMasID,                               \n" +
                "                gc.gencCategoryName paymentMethod,                                        \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,                                        \n" +
                "		psip.paymentDate,                                        \n" +
                "                psip.paymentAmount,                                        \n" +
                "		psip.isZeroPayment , psip.depositBatchNumber ,     \n" +
                "		cps.id AS invoiceMstID, cps.invoiceNumber , cps.invoiceDate ,     \n" +
                "		cps.totalAmount AS invoiceOrgAmount ,     \n" +
                "		psipd.paymentAmount AS invoiceDepositAmount ,     \n" +
                "		fun_getUserNameByID(psip.createdBy) createdby,                                                                    \n" +
                "		fun_getUserNameByID(psip.updatedBy) updatedby,                                                    \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,	                                                  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,                                                    \n" +
                "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,                                               \n" +
                "		fun_getRoleByID(psip.createByRoleId) createdbyRole                                               \n" +
                "	   FROM packingslip_invoice_payment psip                                         \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0       \n" +
                "			JOIN  packingslip_invoice_payment_det psipd ON psip.id = psipd.refPayementid AND psipd.isPaymentVoided = 0 AND psipd.isDeleted = 0   		    \n" +
                "				JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id AND transType = 'I' AND cps.isDeleted = 0                       \n" +
                "            WHERE psip.refPaymentMode = 'R'   \n" +
                "            AND psip.refCustCreditMemoID IS NULL     \n" +
                "            AND psip.isPaymentVoided = 0                     \n" +
                "            AND psip.isDeleted = 0     \n" +
                "             \");                                                \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                                                                                    \n" +
                "		SET pOrderBy = \" ORDER BY paymentDate DESC \";                                                                                                    \n" +
                "	ELSE                                                                                                    \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;                                                                                                    \n" +
                "	END IF;	                                                            		                                        \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                                                     \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                                                    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                                    \n" +
                "	ELSE	                                                                                                    \n" +
                "		SET rowNumWhere = '';                                                                                                    \n" +
                "	END IF;	                                                                                                     \n" +
                "  \n" +
                "	/* to get total count of rows */                                                                                 \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);                                                               			                							                        \n" +
                "  \n" +
                "        PREPARE query1 FROM @SQLStatement1;                                                                                \n" +
                "	EXECUTE query1;                                                                                \n" +
                "	DEALLOCATE PREPARE query1;                                                                              \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                	                                                                           \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                \n" +
                "	EXECUTE query2;                                                                                \n" +
                "	DEALLOCATE PREPARE query2;                                                                             \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-05-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoiceDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(                                                                                \n" +
                "	IN ppageIndex INT,                                                                                \n" +
                "	IN precordPerPage INT,                                                                                \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                \n" +
                "	IN pWhereClause VARCHAR(16383),              	                                                \n" +
                "    IN pFilterStatus LONGTEXT,                                                \n" +
                "    IN pDueDate DATE,                                                \n" +
                "    IN pAdditionalDays INT,                                                \n" +
                "    IN pTermsAndAboveDays INT,                                                \n" +
                "    IN pPoNumber VARCHAR(50),                                               \n" +
                "    IN pIsExactSearchPO TINYINT,                                                \n" +
                "    IN pMfgCodeIds LONGTEXT ,                                              \n" +
                "    IN pPaymentTermsIds LONGTEXT ,                                            \n" +
                "    IN pPartId INT,                                          \n" +
                "    IN pTransType VARCHAR(5) ,                \n" +
                "	IN pFromDate DATE,                \n" +
                "    IN pToDate DATE,            \n" +
                "    IN pPaymentStatusFilter VARCHAR(50)            \n" +
                "    -- IN pChequeNumber  VARCHAR(50)                                                \n" +
                ")  \n" +
                "BEGIN                                                                                \n" +
                "  \n" +
                "	DECLARE pOffset INT;                                                                                \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                                \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                                                                               \n" +
                "	DECLARE vTimeZone VARCHAR(50);    \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(100);	  \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                                                                      \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;   \n" +
                "	SET v_appliedCMPDJoin = '';  \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN    \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.paymentAmount AS receivedAmount , \");  \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'R' AND psip.refPaymentType = 'CCM'  \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");  \n" +
                "	ELSE  \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"                                                                   \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate,                                             \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,                                          \n" +
                "        cp.packingSlipNumber,cp.packingslipDate,                                                \n" +
                "        cp.invoiceNumber,cp.invoiceDate,                                              \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,                                          \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,                                          \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'                                             \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,              \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1                                            \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,                                       \n" +
                "        cp.soNumber,cp.soDate,                                                              \n" +
                "		cp.sorevision,                                                \n" +
                "        cp.refSalesOrderID,                                                \n" +
                "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,                                                 \n" +
                "        cp.refCustInvoiceID,                                                              \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,                                              \n" +
                "		 cp.status,                                           \n" +
                "         cp.subStatus,               \n" +
                "          case	when cp.subStatus = 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'NI'                                                 \n" +
                "				when cp.subStatus > 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'WP'                                                 \n" +
                "                when cp.paymentStatus='PR' and cp.transType = 'I' then 'PTR'                                              \n" +
                "                when cp.paymentStatus='RE' and cp.transType = 'I' then 'PR'                                           \n" +
                "                when cp.transType = 'C' then '' END as paymentStatusCode,            \n" +
                "		 case	when cp.subStatus = 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'Not Invoiced'                                                 \n" +
                "				when cp.subStatus > 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'Waiting For Payment'                                                 \n" +
                "                when cp.paymentStatus='PR' and cp.transType = 'I' then 'Partial Payment Received'                                              \n" +
                "                when cp.paymentStatus='RE' and cp.transType = 'I' then 'Payment Received'                                           \n" +
                "                when cp.transType = 'C' then '' END as paymentStatusValue,                                                \n" +
                "		  cp.paymentStatus,                                             \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,                                      \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,                                              \n" +
                "		  ifnull(cp.totalAmount,0) totalAmount,                                                        \n" +
                "		 (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,                  \n" +
                "         (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,                                                            \n" +
                "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,                                                      \n" +
                "		 concat('(',m.mfgcode,')',' ',m.mfgname) as customerName,          \n" +
                "		 m.mfgcode as customerCode,                                                   \n" +
                "         cp.customerID,                                              \n" +
                "         cp.createdBy as createdById,     \n" +
                "		\",v_receivedAmtSF,\"                                           \n" +
                "		 -- get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,                                      \n" +
                "		 fun_getUserNameByID(cp.updatedBy) updatedby,                                                              \n" +
                "		 fun_getUserNameByID(cp.createdBy) createdby,                                                              \n" +
                "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,                                                              \n" +
                "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,                                                                \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                                                            \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,                                               \n" +
                "         -- fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId)  paymentDueDate,                                                   \n" +
                "         fun_getUserNameByEmployeID(cp.salesCommissionTo) salesCommissionToName,                                                \n" +
                "         cp.termsDays termDays,                                                \n" +
                "         cp.freeOnBoardName,                                              \n" +
                "         cp.isLocked,                                              \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,                                              \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,                                              \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,                                              \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,                                              \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,                                                \n" +
                "         packingSlip.id packingSlipId,                                      \n" +
                "         (select group_concat(paymentNumber)                                      \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd                                       \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0                                       \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,                                  \n" +
                "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,                              \n" +
                "         cp.rmaNumber , cp.systemId, cp.billingAddress , cp.shippingAddress,cp.intermediateAddress ,                            \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,      \n" +
                "         cp.isZeroValue,  fun_getIntToText(cp.isZeroValue) isZeroValueConverted,      \n" +
                "         m.paymentTermsID custPaymentTermsId,      \n" +
                "         fun_getGenericCategoryCodeNameByID(m.paymentTermsID) custPaymentTerms,      \n" +
                "         gc.termsDays custTermsDays,      \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,gc.termsDays,m.paymentTermsID)  paymentDueDate,      \n" +
                "         cp.revision      \n" +
                "	 FROM customer_packingslip cp                                                 \n" +
                "		JOIN mfgcodemst m on m.id = cp.customerID         \n" +
                "		LEFT JOIN  genericcategory gc ON gc.gencCategoryID = m.paymentTermsID  and gc.isDeleted=0      \n" +
                "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'                              \n" +
                "		\" , v_appliedCMPDJoin ,\"  \n" +
                "	WHERE  cp.isDeleted=0                                                              \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");                                                                                \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                 \n" +
                "		IF pTransType = 'I' THEN                                \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";                                                                      \n" +
                "        ELSE                                \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";                                                                      \n" +
                "        END IF;                                    \n" +
                "	ELSE                                                                                \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                                \n" +
                "	END IF;	                                                                                \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                                \n" +
                "		SET pWhereClause = '1=1' ;                                                                                \n" +
                "	END IF;	                                                \n" +
                "    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                                                                        \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');                                                                        \n" +
                "	END IF;                                                  \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN                                                                        \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');                                                                        \n" +
                "	END IF;                                               \n" +
                "  \n" +
                "    IF pPartId IS NOT NULL THEN                                            \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');                                             \n" +
                "    END IF;                                            \n" +
                "	# IF(pChequeNumber IS NOT NULL)THEN                                                              \n" +
                "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');                                                              \n" +
                "	# END IF;                                                  \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN                                                              \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');                                                              \n" +
                "	END IF;                                                   \n" +
                "  \n" +
                "    IF pDueDate IS NOT NULL THEN                                                                      \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                                                                        \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                                                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                                                                        \n" +
                "	END IF;                                                      \n" +
                "  \n" +
                "    IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN                                                      \n" +
                "		IF pIsExactSearchPO = 1 THEN                                                      \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'                                                      \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'                                                      \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'                                                      \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'                                                      \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"                                                      \n" +
                "						);                                                      \n" +
                "		ELSE                                                      \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'                                                      \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'                                                      \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'                                                      \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'                                                      \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"                                                      \n" +
                "						);                                                      \n" +
                "		END IF;                                                      \n" +
                "	END IF;                                                      \n" +
                "   # select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;                                                \n" +
                "  IF pFromDate IS NOT NULL THEN                \n" +
                "        IF pTransType = 'I' THEN                 \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");                \n" +
                "        ELSE                 \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");			                \n" +
                "        END IF;                \n" +
                "    END IF;                \n" +
                "  \n" +
                "    IF pToDate IS NOT NULL THEN                \n" +
                "        IF pTransType = 'I' THEN                 \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");                \n" +
                "        ELSE                 \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");			                \n" +
                "        END IF;                \n" +
                "    END IF;                \n" +
                "  \n" +
                "     IF pPaymentStatusFilter IS NOT NULL THEN            \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');              \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                                 \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                                \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                \n" +
                "	ELSE	                                                                                \n" +
                "		SET rowNumWhere = '';                                                                                \n" +
                "	END IF;	                                                                                \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */                                                                                   \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);                                                                                  \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                  \n" +
                "	EXECUTE query2;                                                                                  \n" +
                "	DEALLOCATE PREPARE query2;                                                                                \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,                                    \n" +
                "		 round((c.totalAmount),2) totalAmount,                                                    \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,                                                    \n" +
                "    				-- round((c.totalAmount - ifnull(c.receivedAmount,0)),2) pendingAmount,   \n" +
                "    			(CASE WHEN c.transType = 'C' THEN ROUND((c.totalAmount + IFNULL(c.receivedAmount,0)),2)   \n" +
                "				ELSE ROUND((c.totalAmount - IFNULL(c.receivedAmount,0)),2) END) AS pendingAmount ,	     \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)       \n" +
                "						else '' end) materialStatus from ( \",                                                 \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                          \n" +
                "  \n" +
                "	--  select @SQLStatement2	;  \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                                                                  \n" +
                "	EXECUTE query1;                                                                                  \n" +
                "	DEALLOCATE PREPARE query1;                                                                              \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-05-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getSupplierInvoicePaymentDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_getSupplierInvoicePaymentDetails`(            \n" +
                "IN ppageIndex INT,            \n" +
                "IN pRecordPerPage INT,            \n" +
                "IN pOrderBy VARCHAR(255),            \n" +
                "IN pWhereClause VARCHAR(16383),            \n" +
                "IN pId INT,            \n" +
                "IN pRefPaymentMode VARCHAR(255)          \n" +
                ")  \n" +
                "BEGIN            \n" +
                "		DECLARE pOffset INT;            \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;     \n" +
                "		DECLARE v_JoinWithCPSForCCM VARCHAR(500);   \n" +
                "		DECLARE v_FieldsForAppliedCCM VARCHAR(500);        \n" +
                "  \n" +
                "		DECLARE vDateTimeDisplayFormat VARCHAR(100);            \n" +
                "		DECLARE vTimeZone VARCHAR(50);            \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;            \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;    \n" +
                "  \n" +
                "		SET v_JoinWithCPSForCCM = '';   \n" +
                "		SET v_FieldsForAppliedCCM = '';  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SET v_JoinWithCPSForCCM = CONCAT(' LEFT JOIN `customer_packingslip` cps ON a.refCustCreditMemoID = cps.id AND cps.isDeleted = 0 ');  \n" +
                "			SET v_FieldsForAppliedCCM = CONCAT(' cps.id AS creditMemoMstID , cps.creditMemoDate , cps.creditMemoNumber , ');  \n" +
                "		END IF;         \n" +
                "  \n" +
                "		SET @temp_Sproc_getSupplierInvoicePaymentDetails =             \n" +
                "		CONCAT(\"select b.id, a.id paymentId, a.paymentNumber as chequeNumber,   \n" +
                "				(CASE WHEN a.refPaymentMode = 'R' THEN  \n" +
                "						(CASE WHEN a.refPaymentType = 'CCM' THEN b.appliedDate ELSE a.paymentDate END)  \n" +
                "					ELSE a.paymentDate END) AS chequeDate ,            \n" +
                "				b.paymentAmount as  chequeAmount,            \n" +
                "				a.bankAccountMasID, a.bankAccountNo, a.bankName,            \n" +
                "				a.paymentType, g.gencCategoryName as paymentTypeName,            \n" +
                "				g.systemGenerated as systemGeneratedPaymentMethod,            \n" +
                "				a.mfgcodeID,      \n" +
                "				fun_getMfgCodeAndNameByID(a.mfgcodeID) supplierCode,      \n" +
                "				a.accountReference,    \n" +
                "				(CASE WHEN a.refPaymentType = 'RCV' THEN 'Receivable'   \n" +
                "					WHEN a.refPaymentType = 'CCM' THEN 'Credit Memo' ELSE '' END) refPaymentTypeText,  \n" +
                "				\",v_FieldsForAppliedCCM,\"    \n" +
                "				a.refPaymentType ,         \n" +
                "				fun_getUserNameByID(a.updatedBy) updatedbyValue,            \n" +
                "				fun_getUserNameByID(a.createdBy) createdbyValue,            \n" +
                "				fun_getRoleByID(a.createByRoleId) createdbyRoleValue,            \n" +
                "				fun_getRoleByID(a.updateByRoleId) updatedbyRoleValue,            \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,            \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(a.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue            \n" +
                "			from packingslip_invoice_payment a            \n" +
                "					join packingslip_invoice_payment_det b ON b.refPayementid = a.id AND b.isDeleted = 0            \n" +
                "					left join genericcategory g on g.gencCategoryID = a.paymentType AND g.isDeleted = 0   \n" +
                "					\",v_JoinWithCPSForCCM,\"          \n" +
                "			where a.isDeleted = 0            \n" +
                "			and a.isPaymentVoided = 0 and b.isPaymentVoided = 0            \n" +
                "			and a.refPaymentMode = '\",pRefPaymentMode,\"'          \n" +
                "			and (b.refPackingslipInvoiceID = \",pId,\" OR b.`refCustPackingslipInvoiceID` = \",pId, \")\");            \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY id ASC\");            \n" +
                "		ELSE            \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN            \n" +
                "			SET pWhereClause = '1=1' ;            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN            \n" +
                "			SET pOffset = (ppageIndex -1) * pRecordPerPage;            \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
                "		ELSE            \n" +
                "			SET rowNumWhere = '';            \n" +
                "		END IF;            \n" +
                "  \n" +
                "		/* to get total count of rows */            \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_getSupplierInvoicePaymentDetails,\" ) c where 1=1 and \", pWhereClause);            \n" +
                "		PREPARE query2 FROM @SQLStatement2;            \n" +
                "		EXECUTE query2;            \n" +
                "		DEALLOCATE PREPARE query2;            \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_getSupplierInvoicePaymentDetails,\" ) c            \n" +
                "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "  \n" +
                "		PREPARE query1 FROM @SQLStatement2;            \n" +
                "		EXECUTE query1;            \n" +
                "		DEALLOCATE PREPARE query1;            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->05-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4562,'2.00','V1',' merge sps from main to dev #32844 - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4562:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-05-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAssyCompListForCustomerPackingSlipMISC`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyCompListForCustomerPackingSlipMISC`(                                \n" +
                "	IN pCustomerID INT,  \n" +
                "	IN pSearch VARCHAR(300),  \n" +
                "	IN pPartID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_respOfGetAcquiredMFRListFn INT;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Customers;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Customers (  \n" +
                "		customerID int  \n" +
                "    );   \n" +
                "  \n" +
                "    /* If Selected customer's isComapny true then make it null as in case of company we have to fetch all customer's assembly*/  \n" +
                "    IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany = 1) > 0 THEN                         \n" +
                "		SET pCustomerID = NULL;                            \n" +
                "	END IF;                         \n" +
                "  \n" +
                "    /* IF customer selected and is comapny is not true then we have select customer based on acquire, and supplier mapping*/  \n" +
                "    IF 	pCustomerID IS NOT NULL THEN  \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID) into v_respOfGetAcquiredMFRListFn;  \n" +
                "        Insert into temp_Customers  \n" +
                "		select buyTo as customerID  \n" +
                "		from acquireCustomers;  \n" +
                "        Insert into temp_Customers  \n" +
                "        select smm.refMfgCodeMstID as customerID  \n" +
                "		from supplier_mapping_mst smm  \n" +
                "		where smm.supplierID = pCustomerID  \n" +
                "        and smm.isDeleted = 0;   \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* Select assembly, sales kit, custom part and cpn part of selected customer and all the off the self MFR parts*/  \n" +
                "	SELECT 	co.id,            	co.mfgPN,				co.PIDCode,			co.mfgPNDescription AS description,  \n" +
                "			co.rev,				co.nickName,			co.partType,		u.unitName,				u.id unitID,  \n" +
                "			ro.rohsIcon,		ro.name AS rohsName,	CONCAT('(', mfg.mfgcode, ')', ' ', co.mfgPN) combinemfgPN,  \n" +
                "			co.mfgcodeID,		FUN_GETMFGCODEANDNAMEBYID(co.mfgcodeID) mfgName,					cst.standards,  \n" +
                "			mfg.mfgType,		co.category,            co.iscustom,		co.isCPN,  \n" +
                "			cst.componentStandardList,					co.rfqOnly  \n" +
                "	FROM 	component co  \n" +
                "	Inner JOIN mfgcodemst mfg ON co.mfgCodeID = mfg.id   \n" +
                "											AND mfg.isDeleted = 0   \n" +
                "											AND mfg.mfgType = 'MFG'  \n" +
                "											-- and mfg.id = (case when co.iscustom = 1 then ifnull(pCustomerID, mfg.id) else mfg.id end)  \n" +
                "                                            and (case when (co.iscustom = 1 and pCustomerID is not null)   \n" +
                "													then (exists (select 1 from temp_Customers ta where ta.customerID = mfg.id))  \n" +
                "                                                    else 1 = 1  \n" +
                "												end)  \n" +
                "	Inner JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "	Inner JOIN uoms u ON co.uom = u.id AND u.isDeleted = 0  \n" +
                "	left join (  \n" +
                "		SELECT 	csd.componentID,  \n" +
                "				GROUP_CONCAT(cs.fullName) componentStandardList,  \n" +
                "                GROUP_CONCAT(CASE WHEN csd.classID IS NULL  \n" +
                "										THEN cs.fullName  \n" +
                "									ELSE  \n" +
                "										(SELECT GROUP_CONCAT(cs.fullName, ' ', IFNULL(className, ''))  \n" +
                "										FROM standard_class s  \n" +
                "										WHERE s.classID = csd.classID and isDeleted = 0)  \n" +
                "							END          \n" +
                "							ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC          \n" +
                "							SEPARATOR ', ') standards  \n" +
                "		FROM component_standard_details csd  \n" +
                "		inner join certificate_standards cs on csd.certificateStandardID = cs.certificateStandardID and cs.isDeleted = 0  \n" +
                "		WHERE csd.isDeleted = 0  \n" +
                "		group by csd.componentID  \n" +
                "    ) cst on co.id = cst.componentID  \n" +
                "	WHERE co.id > 0   \n" +
                "    and co.id = ifnull(pPartID, co.id)  \n" +
                "	AND co.isDeleted = 0  \n" +
                "	AND co.isGoodPart = 1  \n" +
                "	and co.partType != 4  \n" +
                "    and (co.PIDCode like concat('%',pSearch,'%') or mfg.mfgcode like concat('%',pSearch,'%') or co.mfgPN like concat('%',pSearch,'%'));  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->05-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4563,'2.00','V1',' Sales order & Customer PAcking Slip: MFR PN search procedure tuning - Dharmishtha'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4563:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-05-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentBalanceAndPastDue` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentBalanceAndPastDue`(          \n" +
                "	IN pPageIndex INT,          \n" +
                "	IN pRecordPerPage INT,          \n" +
                "	IN pOrderBy VARCHAR(255),          \n" +
                "	IN pWhereClause VARCHAR(16383),     \n" +
                "	IN pRequestType VARCHAR(5),    \n" +
                "	IN pAgedReceivablesDueAsOfDate DATE ,      \n" +
                "	IN pDueDate DATE ,    \n" +
                "	IN pAdditionalDays INT,          \n" +
                "	IN pTermsAndAboveDays INT  ,    \n" +
                "	IN pIsIncludeZeroValueInvoices TINYINT        \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "	/* pRequestType Aged Receivable - 'AR' , Past Due - 'PD'  */    \n" +
                "	DECLARE vDueDate DATE;          \n" +
                "	DECLARE pOffset INT;          \n" +
                "	DECLARE rowNumWhere VARCHAR(255);       \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(15);                                                                             \n" +
                "	DECLARE vTimeZone VARCHAR(50);       \n" +
                "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);      \n" +
                "  \n" +
                "	/* cps.subStatus 2-Invoiced,3-Corrected and Invoiced */    	    \n" +
                "  \n" +
                "	IF (pRequestType = 'AR') THEN	/* pRequestType Aged Receivable - 'AR' */    \n" +
                "		SET vDueDate = pAgedReceivablesDueAsOfDate;    \n" +
                "  \n" +
                "	ELSEIF (pRequestType = 'PD') THEN /* Past Due - 'PD' */    \n" +
                "		IF (pTermsAndAboveDays IS NOT NULL) THEN    \n" +
                "			SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;       \n" +
                "			SELECT fun_getTimeZone() INTO vTimeZone;       \n" +
                "			SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\") INTO currDateWithAppliedTimeZone ;     \n" +
                "			SET vDueDate = DATE_ADD(currDateWithAppliedTimeZone, INTERVAL IFNULL(pTermsAndAboveDays,0) DAY);          \n" +
                "		ELSE    \n" +
                "			SET vDueDate = DATE_ADD(pDueDate, INTERVAL IFNULL(pAdditionalDays,0) DAY);     \n" +
                "		END IF;	    \n" +
                "  \n" +
                "	END IF;    \n" +
                "  \n" +
                "	SET @temp_balanceDue = CONCAT(\"     \n" +
                "	SELECT   \n" +
                "		temp_aged_details.customerID,  \n" +
                "		fun_getMfgCodeAndNameByID(temp_aged_details.customerID) AS customerCodeName,     \n" +
                "		temp_aged_details.termsDays AS custCurrTermDays,  \n" +
                "		SUM(temp_aged_details.invoiceCount) totalInvCount,  \n" +
                "		SUM(temp_aged_details.totalDueAmount) totalAmountOfAgedDueReceivable,  \n" +
                "		SUM(temp_aged_details.currentAmount) totalAmountWithinTerms,  \n" +
                "		SUM(temp_aged_details.agedAmountAs0To30) agedAmountAs0To30,  \n" +
                "		SUM(temp_aged_details.agedAmountAs31To60) agedAmountAs31To60,  \n" +
                "		SUM(temp_aged_details.agedAmountAs61To90) agedAmountAs61To90,  \n" +
                "		SUM(temp_aged_details.agedAmountAs91To120) agedAmountAs91To120,  \n" +
                "		SUM(temp_aged_details.agedAmountAs121more) agedAmountAs121More,  \n" +
                "		SUM(temp_aged_details.totalOutstandingAmount) totalOutstandingAmount,  \n" +
                "		SUM(temp_aged_details.totalCreditMemoAmount) totalCreditMemoAmount,  \n" +
                "		SUM(temp_aged_details.totalUnappliedAmount) totalAdjustmentPendingAmount,  \n" +
                "		SUM(temp_aged_details.totalCreditAmount) totalCreditAmount,  \n" +
                "		(SUM(temp_aged_details.totalCustomerInvoicedAmount) - SUM(temp_aged_details.totalCustomerInvoiceReceivedAmount)) totalOutStandingWithoutCreditMemo,  \n" +
                "		SUM(temp_aged_details.totalDraftAmount) totalNotInvoicedAmount,  \n" +
                "		SUM(temp_aged_details.totalRecievedAmount) totalRecievedAmount,  \n" +
                "		SUM(temp_aged_details.totalCustomerInvoiceReceivedAmount) totalCustomerInvoiceReceivedAmount from (  \n" +
                "			SELECT  \n" +
                "				  `cid`.`customerID`                  AS `customerID`,  \n" +
                "				  `cid`.`refCustPackingslipInvoiceID` AS `refCustPackingslipInvoiceID`,  \n" +
                "				  SUM(`cid`.`invoiceCount`)           AS `invoiceCount`,  \n" +
                "				  `cid`.`DocDate`                     AS `DocDate`,  \n" +
                "				  `cpt`.`paymentTermsID`              AS `paymentTermsID`,  \n" +
                "				  `cpt`.`termsDays`                   AS `termsDays`,  \n" +
                "				  (TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) AS `DueDaysDiff`,  \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 0) THEN (SUM(`cid`.`totalCustomerOutstandingAmount`) + SUM(`cid`.`totalCreditMemoAppliedAmount`) - SUM(`cid`.`totalRecievedAmount`)) ELSE 0 END) AS `totalDueAmount`,  \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) < 0 OR (TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) IS NULL) THEN (SUM(`cid`.`totalCustomerOutstandingAmount`) + SUM(`cid`.`totalCreditMemoAppliedAmount`) - SUM(`cid`.`totalRecievedAmount`)) ELSE 0 END) AS `currentAmount`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 0) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) <= 30)) THEN (SUM(`cid`.`totalCustomerOutstandingAmount`) + SUM(`cid`.`totalCreditMemoAppliedAmount`) - SUM(`cid`.`totalRecievedAmount`)) ELSE 0 END) AS `agedAmountAs0To30`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 31) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) <= 60)) THEN (SUM(`cid`.`totalCustomerOutstandingAmount`) + SUM(`cid`.`totalCreditMemoAppliedAmount`) - SUM(`cid`.`totalRecievedAmount`)) ELSE 0 END) AS `agedAmountAs31To60`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 61) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) <= 90)) THEN (SUM(`cid`.`totalCustomerOutstandingAmount`) + SUM(`cid`.`totalCreditMemoAppliedAmount`) - SUM(`cid`.`totalRecievedAmount`)) ELSE 0 END) AS `agedAmountAs61To90`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 91) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) <= 120)) THEN (SUM(`cid`.`totalCustomerOutstandingAmount`) + SUM(`cid`.`totalCreditMemoAppliedAmount`) - SUM(`cid`.`totalRecievedAmount`)) ELSE 0 END) AS `agedAmountAs91To120`,  \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cpt`.`termsDays` DAY))) >= 121) THEN (SUM(`cid`.`totalCustomerOutstandingAmount`) + SUM(`cid`.`totalCreditMemoAppliedAmount`) - SUM(`cid`.`totalRecievedAmount`)) ELSE 0 END) AS `agedAmountAs121more`,  \n" +
                "				  (SUM(`cid`.`totalCustomerOutstandingAmount`) + SUM(`cid`.`totalCreditMemoAppliedAmount`) - SUM(`cid`.`totalRecievedAmount`)) AS `totalOutstandingAmount`,  \n" +
                "				  (SUM(`cid`.`totalCreditMemoAmount`) + SUM(`cid`.`totalCreditMemoAppliedAmount`))  AS `totalCreditMemoAmount`,  \n" +
                "				  SUM(`cid`.`totalUnappliedAmount`)   AS `totalUnappliedAmount`,  \n" +
                "				  (SUM(`cid`.`totalCreditMemoAmount`) + SUM(`cid`.`totalCreditMemoAppliedAmount`) + SUM(`cid`.`totalUnappliedAmount`)) AS `totalCreditAmount`,  \n" +
                "				  SUM(`cid`.`totalInvoicedAmount`)    AS `totalCustomerInvoicedAmount`,  \n" +
                "				  SUM(`cid`.`totalDraftAmount`)       AS `totalDraftAmount`,  \n" +
                "				  SUM(`cid`.`totalRecievedAmount`)    AS `totalRecievedAmount`,  \n" +
                "				  SUM(`cid`.`totalCustomerInvoiceReceivedAmount`) AS `totalCustomerInvoiceReceivedAmount`  \n" +
                "				FROM ((SELECT  \n" +
                "					 `a`.`customerID`                     AS `customerID`,  \n" +
                "					 `a`.`id`                             AS `refCustPackingslipInvoiceID`,  \n" +
                "					 SUM(IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),1,0)) AS `invoiceCount`,  \n" +
                "					 IF((`a`.`transType` = 'I'),`a`.`invoiceDate`,`a`.`creditMemoDate`) AS `DocDate`,  \n" +
                "					 0                                    AS `totalRecievedAmount`,  \n" +
                "					 0                                    AS `totalCreditMemoAppliedAmount`,  \n" +
                "					 0                                    AS `totalCustomerInvoiceReceivedAmount`,  \n" +
                "					 0                                    AS `totalUnappliedAmount`,  \n" +
                "					 SUM(IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '2')),`a`.`totalAmount`,0)) AS `totalCreditMemoAmount`,  \n" +
                "					 SUM(IF((((`a`.`transType` = 'I') AND (`a`.`subStatus` = '2')) OR (`a`.`subStatus` = '3')),`a`.`totalAmount`,0)) AS `totalInvoicedAmount`,  \n" +
                "					 SUM(IF(((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3')),`a`.`totalAmount`,0)) AS `totalCustomerOutstandingAmount`,  \n" +
                "					 SUM(IF(((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3')),`a`.`totalAmount`,0)) AS `totalDraftAmount`  \n" +
                "				       FROM `customer_packingslip` `a`  \n" +
                "				       WHERE ((`a`.`transType` IN('I','C'))  \n" +
                "					      AND (CASE WHEN \",pIsIncludeZeroValueInvoices,\" = 0 AND a.transType = 'I' THEN a.totalAmount > 0 ELSE 1=1 END)   \n" +
                "					      AND (`a`.`isDeleted` = 0))  \n" +
                "				       GROUP BY `a`.`customerID`,`a`.`id` UNION ALL SELECT  \n" +
                "										      `a`.`mfgcodeID`                       					AS `customerID`,  \n" +
                "										      `b`.`refCustPackingslipInvoiceID`     					AS `refCustPackingslipInvoiceID`,  \n" +
                "										      0                                     					AS `invoiceCount`,  \n" +
                "										      `a`.`paymentDate`                     					AS `DocDate`,  \n" +
                "										      SUM(IF(a.refPaymentType='RCV',IFNULL(`a`.`paymentAmount`,0), 0))  	AS `totalRecievedAmount`,  \n" +
                "										      SUM(IF(a.refPaymentType='CCM',IFNULL(`a`.`paymentAmount`,0), 0))  	AS `totalCreditMemoAppliedAmount`,  \n" +
                "										      SUM(IFNULL(`b`.`paymentAmount`,0))    					AS `totalCustomerInvoiceReceivedAmount`,  \n" +
                "										      ((SUM(`a`.`paymentAmount`) - SUM(IFNULL(`b`.`paymentAmount`,0))) * -(1)) 	AS `totalUnappliedAmount`,  \n" +
                "										      0                                     					AS `totalCreditMemoAmount`,  \n" +
                "										      0                                     					AS `totalInvoicedAmount`,  \n" +
                "										      0                                     					AS `totalCustomerOutstandingAmount`,  \n" +
                "										      0                                     					AS `totalDraftAmount`  \n" +
                "										    FROM (`packingslip_invoice_payment` `a`  \n" +
                "										       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "											 ON ((`b`.`refPayementid` = `a`.`id`)))  \n" +
                "										    WHERE ((`a`.`isDeleted` = 0)  \n" +
                "											   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "											   AND (`a`.`refPaymentMode` = 'R'))  \n" +
                "										    GROUP BY `a`.`mfgcodeID`,`b`.`refCustPackingslipInvoiceID`) `cid`  \n" +
                "				   JOIN `vu_customer_payment_terms` `cpt`  \n" +
                "				     ON ((`cid`.`customerID` = `cpt`.`mfgCodeID`)))  \n" +
                "				GROUP BY `cid`.`customerID`,`cid`.`refCustPackingslipInvoiceID`,`cid`.`DocDate`  \n" +
                "		) as temp_aged_details  \n" +
                "		GROUP BY temp_aged_details.customerID, fun_getMfgCodeAndNameByID(temp_aged_details.customerID), temp_aged_details.termsDays\");  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN          \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;          \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;          \n" +
                "	ELSE          \n" +
                "		SET rowNumWhere = '';          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY totalOutstandingAmount desc, customerCodeName asc\") ;          \n" +
                "	ELSE          \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN          \n" +
                "		SET pWhereClause = '1=1' ;          \n" +
                "	END IF;          \n" +
                "  \n" +
                "	/* to get total count of rows */          \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_balanceDue ,\" ) c where \", pWhereClause );          \n" +
                "	PREPARE query1 FROM @SQLStatement1;          \n" +
                "	EXECUTE query1;          \n" +
                "	DEALLOCATE PREPARE query1;          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"          \n" +
                "			SELECT 	c.*          \n" +
                "			FROM 	(\", @temp_balanceDue ,\" ) c          \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);    \n" +
                "	--  select @SQLStatement2 ;    \n" +
                "	PREPARE query2 FROM @SQLStatement2;          \n" +
                "	EXECUTE query2;          \n" +
                "	DEALLOCATE PREPARE query2;          \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->05-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4564,'2.00','V1','SP Changes for Aged Receiviable - VS'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4564:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-05-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderPerLineDeatils`(      \n" +
                "	IN ppageIndex INT,      \n" +
                "	IN precordPerPage INT,      \n" +
                "	IN pOrderBy VARCHAR(255),      \n" +
                "	IN pWhereClause VARCHAR(16383),      \n" +
                "	IN psupplierID VARCHAR(16000),      \n" +
                "	IN pshippingMethodId VARCHAR(16000),      \n" +
                "	IN psearchposotype VARCHAR(10),      \n" +
                "	IN psearchposotext VARCHAR(1000),      \n" +
                "	IN ppartIds VARCHAR(1000),     \n" +
                "    IN ppolinestatus VARCHAR(10),      \n" +
                "	IN ppostatus VARCHAR(10),      \n" +
                "	IN pfromDate DATE,      \n" +
                "	IN ptoDate DATE      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "	DECLARE pOffset INT;      \n" +
                "	DECLARE rowNumWhere VARCHAR(255);      \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);      \n" +
                "	DECLARE vTimeZone VARCHAR(50);      \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;      \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;      \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(\"      \n" +
                "		SELECT  pod.id,      \n" +
                "				pom.id as refPurchaseOrderID,      \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,      \n" +
                "				pod.mfgPartID,      \n" +
                "				pod.packagingID,      \n" +
                "				pod.supplierPartID,      \n" +
                "				pod.partDescription,      \n" +
                "				pod.pcbPerArray,      \n" +
                "				pod.rohsStatusID,      \n" +
                "				pod.internalRef,      \n" +
                "				pod.qty,      \n" +
                "				pod.price,      \n" +
                "				pom.shippingMethodID,      \n" +
                "				(pod.qty * pod.price) extPrice,      \n" +
                "				pod.totalRelease,      \n" +
                "				pod.lineComment,      \n" +
                "				pod.lineID,      \n" +
                "				pod.supplierQuoteNumber,      \n" +
                "				pom.poDate,      \n" +
                "				pom.poRevision,      \n" +
                "				pom.soNumber,      \n" +
                "				pom.soDate,      \n" +
                "				c.mfgPN,      \n" +
                "				c.pidCode,      \n" +
                "				c.unit,      \n" +
                "				c.iscustom,      \n" +
                "				c.partType,      \n" +
                "				rr.name AS rohsName,      \n" +
                "				rr.rohsIcon,      \n" +
                "				cp.name AS packagingName,      \n" +
                "				mc.mfgCode,      \n" +
                "				mc.mfgName,      \n" +
                "				mc.id As mfgcodeID,      \n" +
                "				pom.poNumber,      \n" +
                "				pom.status,      \n" +
                "				pom.carrierID,      \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'C' when c.partType=4 and pom.poWorkingStatus='CA' then 'CA' else ifnull(vups.poLineWorkingStatus,'P') end poWorkingStatus,      \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Closed' else ifnull(vups.poLineWorkingDisplayStatus,'Open') end poLineWorkingDisplayStatus,      \n" +
                "                case when pom.poWorkingStatus='C' then 'Completed' when pom.poWorkingStatus='CA' then 'Canceled' else 'In Progress' end poWorkingStatusDisplayStatus,      \n" +
                "				vups.totalReceivedQty,      \n" +
                "				vups.totalPendingQty,      \n" +
                "				vups.poLineCompleteReason,      \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Auto' else  vups.poLineCompleteType end poLineCompleteType,      \n" +
                "				concat('(',m.mfgcode,')',' ',m.mfgName) supplierName,      \n" +
                "				fun_getUnitNameByID(c.uom) uomName,      \n" +
                "				sc.mfgPN supplierPN,      \n" +
                "				pom.supplierID,      \n" +
                "				pom.termsID,      \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,      \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,      \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,      \n" +
                "				pom.carrierAccountNumber,      \n" +
                "				pom.poComment,      \n" +
                "				pom.shippingComment,      \n" +
                "				pod.internalLineComment,      \n" +
                "				m.mfgcode as supplierMfgName,      \n" +
                "				fun_getOtherChargesByPurchaseOrderDetID(pod.id) otherExpense,      \n" +
                "				(SELECT GROUP_CONCAT(polr.instruction SEPARATOR  '<br/>') FROM purchase_order_line_requirement_det polr WHERE polr.refPurchaseOrderDetID=pod.id AND polr.isDeleted=0) purchaseRequirement,      \n" +
                "				(ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)+(pod.qty * pod.price)) totalExtPrice,      \n" +
                "				CONCAT('(',mc.mfgCode,')',' ',mc.mfgName) mfgcodeName,      \n" +
                "				fun_getUserNameByID(pod.updatedBy)updatedby,      \n" +
                "				fun_getUserNameByID(pod.createdBy) createdby,      \n" +
                "				fun_getRoleByID(pod.createByRoleId) createdbyRole,      \n" +
                "				fun_getRoleByID(pod.updateByRoleId) updatedbyRole,      \n" +
                "				(select pold.shippingDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) shipDate,      \n" +
                "				(select pold.promisedShipDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) promisedShipDate,      \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,      \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,      \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, FALSE) packingSlipDate,      \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, TRUE) packingSlipId      \n" +
                "		FROM purchase_order_mst pom      \n" +
                "		left JOIN purchase_order_det pod ON pom.id=pod.refPurchaseOrderID and  pod.isdeleted=0      \n" +
                "		left join vu_purchaseorder_shipping_release vups on vups.refPurchaseOrderDetID= pod.id      \n" +
                "		left JOIN mfgcodemst m ON m.id=pom.supplierID      \n" +
                "		left JOIN component c ON c.id=pod.mfgPartID      \n" +
                "		left join component sc on sc.id=pod.supplierPartID      \n" +
                "		left JOIN mfgcodemst mc ON mc.id=c.mfgcodeID      \n" +
                "		LEFT JOIN rfq_rohsmst rr ON rr.id=pod.rohsStatusID      \n" +
                "		LEFT JOIN component_packagingmst cp ON cp.id=pod.packagingID      \n" +
                "		WHERE pom.isdeleted=0      \n" +
                "	\");       \n" +
                "	IF(psupplierID IS NOT NULL)THEN      \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.supplierID in (',psupplierID,')');      \n" +
                "	END IF;      \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN      \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.shippingMethodID in (',pshippingMethodId,')');      \n" +
                "	END IF;      \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN      \n" +
                "		IF(psearchposotype='C')THEN      \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pom.soNumber  like ''%',psearchposotext,'%'' OR pom.poNumber  like ''%',psearchposotext,'%'')');      \n" +
                "		ELSE      \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pom.soNumber  =''',psearchposotext,''' OR pom.poNumber  =''',psearchposotext,''')');      \n" +
                "		END IF;      \n" +
                "	END IF;      \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN      \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate>=''',pfromDate,''' and pom.poDate<=''',ptoDate,''')');      \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN      \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate>=''',pfromDate,''')');      \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN      \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate<=''',ptoDate,''')');      \n" +
                "	END IF;      \n" +
                "    IF(ppolinestatus IS NOT NULL)THEN      \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when c.partType=4 and pom.poWorkingStatus=\"C\" then \"C\" else ifnull(vups.poLineWorkingStatus,\"P\") end),''', ppolinestatus ,''')');      \n" +
                "	END IF;      \n" +
                "	IF(ppostatus IS NOT NULL)THEN      \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when pom.poWorkingStatus=\"C\" then \"C\" when pom.poWorkingStatus=\"CA\" then \"CA\" else \"P\" end),''', ppostatus ,''')');      \n" +
                "	END IF;      \n" +
                "	IF(ppartIds IS NOT NULL)THEN      \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,'))');      \n" +
                "	END IF;      \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN      \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";      \n" +
                "	ELSE      \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);      \n" +
                "	END IF;      \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN      \n" +
                "		SET pWhereClause = '1=1';      \n" +
                "	END IF;      \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN      \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;      \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);      \n" +
                "	ELSE      \n" +
                "		SET rowNumWhere = '';      \n" +
                "	END IF;      \n" +
                "	/* to get total count of rows */      \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c where 1=1 and \", pWhereClause);      \n" +
                "	PREPARE query2 FROM @SQLStatement2;      \n" +
                "	EXECUTE query2;      \n" +
                "	DEALLOCATE PREPARE query2;      \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);      \n" +
                "	PREPARE query1 FROM @SQLStatement2;      \n" +
                "	EXECUTE query1;       \n" +
                "	DEALLOCATE PREPARE query1;      \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-05-2021 *********************************** */
                "DROP function IF EXISTS `fun_getLatestPackingSlipDateByPOId`;  \n" +
                "CREATE FUNCTION `fun_getLatestPackingSlipDateByPOId`(    \n" +
                "	pPoid INT,    \n" +
                "    pIsId BOOLEAN    \n" +
                ") RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN    \n" +
                "	DECLARE vCreatedAt DATETIME;    \n" +
                "	DECLARE vResult VARCHAR(50);     \n" +
                "	SELECT max(createdAt) INTO vResult FROM packing_slip_material_receive_det WHERE refPurchaseOrderDetID=pPoid AND isDeleted=0;    \n" +
                "    IF pIsId=1 THEN    \n" +
                "    	SELECT refPackingSlipMaterialRecID INTO vResult FROM packing_slip_material_receive_det WHERE createdAt=vResult AND refPurchaseOrderDetID = pPoid AND isDeleted=0;    \n" +
                "	ELSE  \n" +
                "		SELECT CAST(vResult as Date) INTO vResult;  \n" +
                "	END IF;    \n" +
                "	RETURN vResult;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4565,'2.00','V1','User Story 32566: Implement Cancel Purchase order Option - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4565:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-05-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWOBuildDetailInfoByAssyNickName` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOBuildDetailInfoByAssyNickName`(                    \n" +
                "	IN pAssyNickName VARCHAR(50) ,      \n" +
                "	IN pWOSeriesNumber VARCHAR(20)                   \n" +
                "	)  \n" +
                "BEGIN                    \n" +
                "  \n" +
                "	SELECT a.* FROM (    \n" +
                "  		SELECT wo.woID, wo.woNumber, wo.woSeries, wo.buildNumber,       \n" +
                "			'Q2C' AS woTypeText , 'WS' AS woType, wo.partID ,      \n" +
                "			wo.createdAt createdAt, co.PIDCode, co.mfgPN, co.rev, co.isCustom ,      \n" +
                "			rr.name rohsName, rr.rohsIcon rohsIcon      \n" +
                "		FROM workorder wo      \n" +
                "			JOIN `component` co ON wo.partID = co.id AND co.isDeleted=0      \n" +
                "			LEFT JOIN rfq_rohsmst rr ON rr.id = co.roHSStatusID AND rr.isDeleted=0      \n" +
                "		WHERE wo.woSeries = pWOSeriesNumber      \n" +
                "		AND wo.isDeleted = 0      \n" +
                "  \n" +
                "		UNION      \n" +
                "  \n" +
                "		SELECT NULL AS woID, astk.woNumber, NULL AS woSeries, NULL AS buildNumber,       \n" +
                "			'Initial Stock' AS woTypeText , 'OS' AS woType, astk.partID ,      \n" +
                "			astk.createdAt createdAt, co.PIDCode, co.mfgPN, co.rev, co.isCustom ,      \n" +
                "			rr.name rohsName, rr.rohsIcon rohsIcon      \n" +
                "		FROM assemblyStock astk      \n" +
                "			JOIN `component` co ON astk.partID = co.id AND co.isDeleted=0      \n" +
                "			LEFT JOIN rfq_rohsmst rr ON rr.id = co.roHSStatusID AND rr.isDeleted=0      \n" +
                "		WHERE co.nickName = pAssyNickName      \n" +
                "		AND co.category = 3      \n" +
                "		AND astk.`type` = \"OS\"       \n" +
                "		AND astk.isDeleted = 0) a    \n" +
                "  \n" +
                "		ORDER BY a.createdAt DESC;               \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 05-05-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCompNicknameWOBuildSummaryInfo` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCompNicknameWOBuildSummaryInfo`(                    \n" +
                "	IN ppageIndex INT,                    \n" +
                "	IN precordPerPage INT,                    \n" +
                "	IN pOrderBy VARCHAR(255),                    \n" +
                "	IN pWhereClause VARCHAR(16383)                    \n" +
                "	)  \n" +
                "BEGIN                    \n" +
                "  \n" +
                "		DECLARE pOffset INT;                    \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;            \n" +
                "  \n" +
                "  		SET @temp_Sproc_RetrieveWOSeriesSumm = CONCAT(\"         \n" +
                "		SELECT c.nickName, MAX(c.createdAt) createdAt,    \n" +
                "				lastWOSeriesNumber,      \n" +
                "				lastWOBuildNumber,    \n" +
                "				fun_getCountOfWOByNickname(c.nickName) woCount    \n" +
                "				FROM `component` c      \n" +
                "				LEFT JOIN `component_nickname_wo_build_detail` cnwbd ON c.nickName = cnwbd.nickName                                          \n" +
                "			WHERE c.category=3     \n" +
                "			AND c.`isDeleted` = 0  \n" +
                "			GROUP BY c.nickName, lastWOSeriesNumber, lastWOBuildNumber, fun_getCountOfWOByNickname(c.nickName)           \n" +
                "		\");                  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                    \n" +
                "			SET pOrderBy = \"ORDER BY createdAt DESC\";                    \n" +
                "		ELSE                    \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                    \n" +
                "		END IF;	                    \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                    \n" +
                "			SET pWhereClause = '1=1' ;                    \n" +
                "		END IF;	                    \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                     \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                    \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                    \n" +
                "		ELSE	                    \n" +
                "			SET rowNumWhere = '';                    \n" +
                "		END IF;	                    \n" +
                "  \n" +
                "		/* to get total count of rows */                         \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveWOSeriesSumm,\" ) c where 1=1 and \", pWhereClause);                        \n" +
                "		PREPARE query2 FROM @SQLStatement2;                        \n" +
                "		EXECUTE query2;                        \n" +
                "		DEALLOCATE PREPARE query2;                      \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveWOSeriesSumm,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                        \n" +
                "		PREPARE query1 FROM @SQLStatement2;                        \n" +
                "		EXECUTE query1;                        \n" +
                "		DEALLOCATE PREPARE query1;                  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->05-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4566,'2.00','V1','Bug 33169: Dev Testing issues for #33155: Initial Stock Changes - Suggested By JV: Resolved Initial Stock Bug - VS '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4566:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 05-05-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(      \n" +
                "IN ppartID INT      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;      \n" +
                "CREATE TEMPORARY TABLE tempRfq_lineitems AS      \n" +
                "SELECT a.id, a.lineID, a.cust_lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,            \n" +
                "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT isCPN FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPN,            \n" +
                "(CASE WHEN b.unitName IS NULL THEN a.org_uomName ELSE b.unitName END) AS uomID,      \n" +
                "(CASE WHEN a.programingStatus = 1 THEN 'Pre-Assy'       \n" +
                "		WHEN a.programingStatus = 2 THEN 'Post-Assy'       \n" +
                "        WHEN a.programingStatus = 3 THEN 'Cust will program'       \n" +
                "        WHEN a.programingStatus = 4 THEN 'Pre-Programmed'       \n" +
                "        ELSE 'N/A' END) AS programingStatus,      \n" +
                "CASE WHEN a.substitutesAllow IS NULL THEN a.org_substitutesAllow ELSE CASE WHEN a.substitutesAllow = 3 THEN 'Yes with Customer Approval' WHEN a.substitutesAllow = 2 THEN 'No' ELSE '' END END AS substitutesAllow,      \n" +
                "CASE WHEN (SELECT COUNT(1) FROM kit_allocation WHERE refBOMLineID = a.id AND `status` = 'A') > 0 THEN 1 ELSE 0 END AS allocatedInKit,      \n" +
                "a.description, a.level, a.numOfPosition, a.numOfRows, a.customerRev,            \n" +
                "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT programingRequired FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPNProgrammingRequire,      \n" +
                "a.customerDescription, a.customerPartDesc, part.partTypeName as partclassID, a.isInstall, a.isPurchase, a.isNotRequiredKitAllocation,      \n" +
                "a.isSupplierToBuy, a.leadQty, a.attritionRate, a.valueAddedCost, a.refRFQLineItemID, a.dnpQty, a.dnpDesig, a.qpaDesignatorStep,      \n" +
                "a.duplicateCPNStep, a.restrictCPNUseWithPermissionStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseInBOMStep,      \n" +
                "a.requireMountingTypeStep, a.requireFunctionalTypeStep, a.dnpInvalidREFDESStep, a.requireMountingTypeError,      \n" +
                "a.requireFunctionalTypeError, a.qpaDesignatorColorPriority, a.mergeLines, a.lineMergeStep,      \n" +
                "(CASE WHEN a.isBuyDNPQty = 'Y' THEN 'YES'       \n" +
                "	WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned'       \n" +
                "    WHEN a.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'       \n" +
                "    ELSE 'NO' END) AS isBuyDNPQty,        \n" +
                "a.isObsoleteLine,      \n" +
                "a.customerApprovalForQPAREFDESStep,      \n" +
                "a.customerApprovalForBuyStep,      \n" +
                "a.customerApprovalForPopulateStep,      \n" +
                "a.dnpQPARefDesStep,      \n" +
                "a.customerApprovalForDNPQPAREFDESStep,      \n" +
                "a.customerApprovalForDNPBuyStep,      \n" +
                "a.customerApprovalCPN,      \n" +
                "fun_getLatestCutomerComment(a.id, 2) qpaCustomerApprovalComment,      \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedQPA,        \n" +
                "fun_getLatestCutomerComment(a.id, 18) dnpqpaCustomerApprovalComment,      \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedDNPQPA,       \n" +
                "fun_getLatestCutomerComment(a.id, 3) buyCustomerApprovalComment,      \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuy,      \n" +
                "fun_getLatestCutomerComment(a.id, 17) buyDNPCustomerApprovalComment,      \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuyDNP,        \n" +
                "fun_getLatestCutomerComment(a.id, 4) populateCustomerApprovalComment,      \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPopulate,      \n" +
                "fun_getLatestCutomerComment(a.id, 5) cpnCustomerApprovalComment,      \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedCPN,      \n" +
                "fun_getLatestCutomerComment(a.id, 19) kitAllocationNotRequiredComment,      \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 19 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isNotRequiredKitAllocationApproved,        \n" +
                "ac.description AS additionalComment,      \n" +
                "ac.id AS additionalCommentId      \n" +
                "FROM rfq_lineitems a      \n" +
                "LEFT JOIN uoms b ON a.uomID = b.id AND IFNULL(b.isDeleted,0) = 0      \n" +
                "LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0      \n" +
                "LEFT JOIN rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = a.id AND IFNULL(ac.isDeleted,0) = 0      \n" +
                "WHERE IFNULL(a.isDeleted,0) = 0 AND a.partID = ppartID;         \n" +
                "  \n" +
                "SELECT b.id,            \n" +
                "b.lineID,      \n" +
                "b.cust_lineID,      \n" +
                "b.qpa,      \n" +
                "b.refDesig,      \n" +
                "(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgName ELSE a.mfgCode END) AS mfgCode,      \n" +
                "a.mfgCodeID,      \n" +
                "mcm.acquisitionDetail,      \n" +
                "a.mfgPN,      \n" +
                "a.mfgPNID,      \n" +
                "(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgName ELSE a.distributor END) AS distributor,	      \n" +
                "mcmDist.acquisitionDetail AS distAcquisitionDetail,      \n" +
                "a.distMfgCodeID,      \n" +
                "a.distPN,      \n" +
                "a.distMfgPNID,      \n" +
                "b.custPN,      \n" +
                "b.custPNID,      \n" +
                "b.isCustPN,      \n" +
                "b.uomID,      \n" +
                "b.programingStatus,      \n" +
                "b.substitutesAllow,      \n" +
                "b.allocatedInKit,      \n" +
                "a.description descriptionAlternate,      \n" +
                "b.description,      \n" +
                "b.level,      \n" +
                "b.numOfPosition,      \n" +
                "b.numOfRows,      \n" +
                "b.customerRev,                \n" +
                "b.isCustPNProgrammingRequire,              \n" +
                "b.customerDescription,      \n" +
                "b.customerPartDesc,      \n" +
                "b.partclassID,      \n" +
                "b.isInstall,      \n" +
                "b.isPurchase,         \n" +
                "b.isNotRequiredKitAllocation,      \n" +
                "b.isSupplierToBuy,        \n" +
                "b.leadQty,      \n" +
                "b.attritionRate,      \n" +
                "b.valueAddedCost,      \n" +
                "b.refRFQLineItemID,      \n" +
                "b.dnpQty,      \n" +
                "b.dnpDesig,      \n" +
                "a.id AS rfqAlternatePartID,      \n" +
                "b.qpaDesignatorStep,      \n" +
                "b.qpaDesignatorColorPriority,      \n" +
                "b.duplicateCPNStep,      \n" +
                "b.dnpInvalidREFDESStep,      \n" +
                "b.restrictCPNUseWithPermissionStep,      \n" +
                "b.restrictCPNUsePermanentlyStep,      \n" +
                "b.restrictCPNUseInBOMStep,      \n" +
                "b.requireMountingTypeStep,      \n" +
                "b.requireFunctionalTypeStep,        \n" +
                "b.requireMountingTypeError,      \n" +
                "b.requireFunctionalTypeError,      \n" +
                "b.isBuyDNPQty,      \n" +
                "b.isObsoleteLine,      \n" +
                "b.customerApprovalForQPAREFDESStep,      \n" +
                "b.customerApprovalForBuyStep,      \n" +
                "b.customerApprovalForPopulateStep,        \n" +
                "b.dnpQPARefDesStep,      \n" +
                "b.customerApprovalForDNPQPAREFDESStep,      \n" +
                "b.customerApprovalForDNPBuyStep,      \n" +
                "b.customerApprovalCPN,      \n" +
                "b.qpaCustomerApprovalComment,        \n" +
                "b.dnpqpaCustomerApprovalComment,      \n" +
                "b.buyCustomerApprovalComment,        \n" +
                "b.buyDNPCustomerApprovalComment,      \n" +
                "b.populateCustomerApprovalComment,      \n" +
                "b.cpnCustomerApprovalComment,        \n" +
                "b.isCustomerApprovedQPA,       \n" +
                "b.isCustomerApprovedBuy,      \n" +
                "b.isCustomerApprovedDNPQPA,      \n" +
                "b.isCustomerApprovedBuyDNP,      \n" +
                "b.isCustomerApprovedPopulate,      \n" +
                "b.isCustomerApprovedCPN,           \n" +
                "b.kitAllocationNotRequiredComment,      \n" +
                "b.isNotRequiredKitAllocationApproved,      \n" +
                "a.mfgVerificationStep,      \n" +
                "a.mfgDistMappingStep,      \n" +
                "a.mfgCodeStep,      \n" +
                "a.customerApproval,      \n" +
                "a.isCustomerUnAppoval,      \n" +
                "a.org_mfgCode,      \n" +
                "a.org_mfgPN,      \n" +
                "a.org_distributor,      \n" +
                "a.org_distPN,      \n" +
                "a.distVerificationStep,      \n" +
                "a.distCodeStep,      \n" +
                "a.getMFGPNStep,      \n" +
                "a.obsoletePartStep,      \n" +
                "a.mfgGoodPartMappingStep,      \n" +
                "a.mfgPNStep,      \n" +
                "a.distPNStep,      \n" +
                "a.badMfgPN,      \n" +
                "a.distGoodPartMappingStep,      \n" +
                "a.nonRohsStep,      \n" +
                "a.epoxyStep,      \n" +
                "a.invalidConnectorTypeStep,      \n" +
                "a.duplicateMPNInSameLineStep,      \n" +
                "a.mismatchMountingTypeStep,      \n" +
                "a.mismatchFunctionalCategoryStep,      \n" +
                "a.mismatchFunctionalCategoryStep,      \n" +
                "a.restrictUseWithPermissionStep,      \n" +
                "a.restrictUsePermanentlyStep,      \n" +
                "a.partPinIsLessthenBOMPinStep,         \n" +
                "a.mismatchRequiredProgrammingStep,               \n" +
                "a.mappingPartProgramStep,                 \n" +
                "a.exportControlledStep,      \n" +
                "a.tbdPartStep,      \n" +
                "a.userData1,      \n" +
                "a.userData2,      \n" +
                "a.userData3,      \n" +
                "a.userData4,      \n" +
                "a.userData5,      \n" +
                "a.userData6,      \n" +
                "a.userData7,      \n" +
                "a.userData8,      \n" +
                "a.userData9,      \n" +
                "a.userData10,      \n" +
                "a.pickupPadRequiredStep,      \n" +
                "a.matingPartRquiredStep,           \n" +
                "a.suggestedGoodPartStep,             \n" +
                "a.suggestedGoodDistPartStep,      \n" +
                "a.driverToolsRequiredStep,      \n" +
                "a.functionalTestingRequiredStep,      \n" +
                "a.mismatchCustomPartStep,      \n" +
                "a.mismatchValueStep,             \n" +
                "a.approvedMountingType,      \n" +
                "a.mismatchPackageStep,      \n" +
                "a.mismatchPowerStep,      \n" +
                "a.mismatchToleranceStep,      \n" +
                "a.mismatchTempratureStep,      \n" +
                "a.mismatchNumberOfRowsStep,      \n" +
                "a.uomMismatchedStep,      \n" +
                "a.programingRequiredStep,      \n" +
                "a.mismatchProgrammingStatusStep,      \n" +
                "a.mismatchColorStep,      \n" +
                "a.restrictUseInBOMStep,      \n" +
                "a.restrictUseInBOMWithPermissionStep,      \n" +
                "a.restrictUseInBOMExcludingAliasStep,      \n" +
                "a.restrictUseInBOMExcludingAliasWithPermissionStep,             \n" +
                "a.restrictUseExcludingAliasStep,      \n" +
                "a.restrictUseExcludingAliasWithPermissionStep,             \n" +
                "a.unknownPartStep,      \n" +
                "a.defaultInvalidMFRStep,      \n" +
                "a.isUnlockApprovedPart,       \n" +
                "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN                 \n" +
                "cpnPart.partTypeName              \n" +
                "ELSE                 \n" +
                "part.partTypeName END) AS parttypeID,               \n" +
                "a.parttypeID AS functionalID,        \n" +
                "part.isTemperatureSensitive AS isFunctionalTemperatureSensitive,                 \n" +
                "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN                 \n" +
                "cpnMount.name             \n" +
                "ELSE                 \n" +
                "mount.name END) AS mountingtypeID,	              \n" +
                "a.mountingtypeID AS mountingID,      \n" +
                "cat.categoryname partcategoryID,      \n" +
                "(SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,      \n" +
                "(SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,      \n" +
                "(SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,      \n" +
                "(SELECT (SELECT rh.refMainCategoryID FROM rfq_rohsmst rh WHERE rh.id = co.RoHSStatusID) FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) refMainCategoryID,      \n" +
                "CASE WHEN      \n" +
                "(co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR      \n" +
                "EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE co.partStatus = cp.id AND cp.name != 'Active' AND cp.isDeleted = 0)      \n" +
                "THEN 1 ELSE 0 END isObsolete,      \n" +
                "co.PIDCode,       \n" +
                "co.mfgPNDescription,      \n" +
                "co.pitch,      \n" +
                "co.noOfRows,      \n" +
                "IFNULL(pkg.name, co.partPackage) AS partPackage,      \n" +
                "co.value,      \n" +
                "co.tolerance,      \n" +
                "co.voltage,              \n" +
                "co.isCustom,      \n" +
                "co.packaging,      \n" +
                "co.deviceMarking,      \n" +
                "co.powerRating,      \n" +
                "co.minOperatingTemp,      \n" +
                "co.maxOperatingTemp,      \n" +
                "co.connecterTypeID,      \n" +
                "co.driverToolRequired,       \n" +
                "co.matingPartRquired,       \n" +
                "co.pickupPadRequired,       \n" +
                "co.programingRequired,       \n" +
                "co.dataSheetLink,                \n" +
                "co.isCPN,                \n" +
                "(SELECT GROUP_CONCAT(ComponentID) FROM component_drivetools WHERE refComponentID = co.id AND isDeleted = 0) AS driveToolIDs,       \n" +
                "(SELECT GROUP_CONCAT(ComponentID) FROM component_alternatepn WHERE refComponentID = co.id AND isDeleted = 0 AND `type` = 3) AS programingRequiredIDs,            \n" +
                "(SELECT GROUP_CONCAT(attributeID) FROM component_dynamic_attribute_mapping_part WHERE mfgPNID = co.id AND deletedAt IS NULL) AS operationalAttributeIDs,        \n" +
                "(SELECT pickTemperatureAbove FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxSolderingTemperature,      \n" +
                "(SELECT timeLiquidusSecond FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxTemperatureTime,      \n" +
                "co.isTemperatureSensitive,      \n" +
                "co.noOfPosition AS componentLead,      \n" +
                "fun_getPartStatusNameByID(co.partStatus) AS partStatus,      \n" +
                "fun_getPartStatusColorCodeByID(co.partStatus) AS partStatuscolorCode,      \n" +
                "co.createdBy,      \n" +
                "(SELECT u.unitName FROM UOMs u WHERE u.id = co.uom ) AS uom,      \n" +
                "co.color,      \n" +
                "co.uom AS partUOMID,            \n" +
                "co.serialNumber,          \n" +
                "CASE WHEN            \n" +
                "(SELECT COUNT(cs.isExportControlled) AS isExportControlled  FROM component c            \n" +
                "LEFT JOIN component_standard_details csd ON csd.componentID = c.id AND IFNULL(csd.isDeleted,0) = 0            \n" +
                "LEFT JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1            \n" +
                "WHERE c.id = co.id) > 0 THEN 1 ELSE 0 END isExportControlled,              \n" +
                "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16 ) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) partCustomerApprovalComment,        \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPart,      \n" +
                "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.errorCode = 20 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) ApprovedMountingTypeComment,  \n" +
                "b.additionalComment ,      \n" +
                "b.additionalCommentId,        \n" +
                "a.suggestedByApplicationMsg,        \n" +
                "a.suggestedByApplicationStep        \n" +
                "FROM rfq_lineitems_alternatepart a      \n" +
                "LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0      \n" +
                "LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0      \n" +
                "LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0      \n" +
                "LEFT JOIN rfq_parttypemst part ON co.functionalCategoryID = part.id           \n" +
                "LEFT JOIN rfq_mountingtypemst mount ON co.mountingtypeID = mount.id                \n" +
                "LEFT JOIN rfq_partcategory cat ON co.category = cat.id           \n" +
                "LEFT JOIN rfq_packagecasetypemst pkg ON co.partPackageID = pkg.id           \n" +
                "JOIN tempRfq_lineitems b ON a.rfqLineItemsID = b.id      \n" +
                "LEFT JOIN component cpn ON b.custPNID = cpn.id AND cpn.isDeleted = 0      \n" +
                "LEFT JOIN rfq_parttypemst cpnPart ON cpn.functionalCategoryID = cpnPart.id      \n" +
                "LEFT JOIN rfq_mountingtypemst cpnMount ON cpn.mountingtypeID = cpnMount.id               \n" +
                "WHERE IFNULL(a.isDeleted,0) = 0 AND b.id IS NOT NULL ORDER BY b.lineID, a.id;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-05-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPartProgrammingRefDesgDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPartProgrammingRefDesgDetail`(    \n" +
                "	IN pPartID INT    \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "		/* get Detail for part with RequireProgramming status true and selected as Pre-Assy or Post Assy in Programming status and Yes With PrePrgramm in isDNPBuy */          \n" +
                "			select 	rla.mountingtypeID,	rla.parttypeID,	com.programingRequired ,	rl.refDesig,	rl.dnpDesig, trim(rl.lineID)+0 as lineID,          \n" +
                "					rl.id,	rl.isBuyDNPQty,	rl.isInstall,	rl.isPurchase,	rl.programingStatus,	com.PIDCode,	com.mfgPN,          \n" +
                "                    rla.mfgPNID,	ro.name,	ro.rohsIcon,	com.RoHSStatusID,	com.mfgPNDescription, com.isCustom, com.custAssyPN,      \n" +
                "                    fun_getMfgNameByID(com.mfgcodeID) mfrCode,com.mfgcodeID,    \n" +
                "				rla.pickupPadRequiredStep,      \n" +
                "				rla.matingPartRquiredStep,           \n" +
                "				rla.suggestedGoodPartStep,             \n" +
                "				rla.suggestedGoodDistPartStep,      \n" +
                "				rla.driverToolsRequiredStep,      \n" +
                "				rla.functionalTestingRequiredStep,      \n" +
                "				rla.mismatchCustomPartStep,      \n" +
                "				rla.mismatchValueStep,             \n" +
                "				rla.approvedMountingType,      \n" +
                "				rla.mismatchPackageStep,      \n" +
                "				rla.mismatchPowerStep,      \n" +
                "				rla.mismatchToleranceStep,      \n" +
                "				rla.mismatchTempratureStep,      \n" +
                "				rla.mismatchNumberOfRowsStep,      \n" +
                "				rla.uomMismatchedStep,      \n" +
                "				rla.programingRequiredStep,      \n" +
                "				rla.mismatchProgrammingStatusStep,      \n" +
                "				rla.mismatchColorStep,      \n" +
                "				rla.restrictUseInBOMStep,      \n" +
                "				rla.restrictUseInBOMWithPermissionStep,      \n" +
                "				rla.restrictUseInBOMExcludingAliasStep,      \n" +
                "				rla.restrictUseInBOMExcludingAliasWithPermissionStep,             \n" +
                "				rla.restrictUseExcludingAliasStep,      \n" +
                "				rla.restrictUseExcludingAliasWithPermissionStep,             \n" +
                "				rla.unknownPartStep,      \n" +
                "				rla.defaultInvalidMFRStep,      \n" +
                "				rla.suggestedByApplicationStep,    \n" +
                "				rla.mfgVerificationStep,      \n" +
                "				rla.mfgDistMappingStep,      \n" +
                "				rla.mfgCodeStep,      \n" +
                "				rla.customerApproval,      \n" +
                "				rla.isCustomerUnAppoval,      \n" +
                "				rla.org_mfgCode,      \n" +
                "				rla.org_mfgPN,      \n" +
                "				rla.org_distributor,      \n" +
                "				rla.org_distPN,      \n" +
                "				rla.distVerificationStep,      \n" +
                "				rla.distCodeStep,      \n" +
                "				rla.getMFGPNStep,      \n" +
                "				rla.obsoletePartStep,      \n" +
                "				rla.mfgGoodPartMappingStep,      \n" +
                "				rla.mfgPNStep,      \n" +
                "				rla.distPNStep,      \n" +
                "				rla.badMfgPN,      \n" +
                "				rla.distGoodPartMappingStep,      \n" +
                "				rla.nonRohsStep,      \n" +
                "				rla.epoxyStep,      \n" +
                "				rla.invalidConnectorTypeStep,      \n" +
                "				rla.duplicateMPNInSameLineStep,      \n" +
                "				rla.mismatchMountingTypeStep,      \n" +
                "				rla.mismatchFunctionalCategoryStep,      \n" +
                "				rla.mismatchFunctionalCategoryStep,      \n" +
                "				rla.restrictUseWithPermissionStep,      \n" +
                "				rla.restrictUsePermanentlyStep,      \n" +
                "				rla.partPinIsLessthenBOMPinStep,         \n" +
                "				rla.mismatchRequiredProgrammingStep,               \n" +
                "				rla.mappingPartProgramStep,                 \n" +
                "				rla.exportControlledStep,      \n" +
                "				rla.tbdPartStep    \n" +
                "			from rfq_lineitems rl          \n" +
                "			join rfq_lineitems_alternatepart rla on rla.rfqLineItemsID = rl.id and rla.isdeleted = 0          \n" +
                "			join component com on com.id = rla.mfgPNID and com.isdeleted = 0          \n" +
                "			join rfq_rohsmst ro on ro.id = com.RoHSStatusID and ro.isDeleted = 0          \n" +
                "			left join component CPNCom on CPNCom.id = rl.custPNID and CPNCom.isDeleted = 0          \n" +
                "			where rl.partid = pPartID and rl.isdeleted = 0 and (com.programingRequired = 1 OR CPNCom.programingRequired = 1)          \n" +
                "			and rl.programingStatus in (1,2);          \n" +
                "  \n" +
                "		/* Get Detail of Part where Part Have Selected Software as Mounting type or Functional Type */          \n" +
                "			select rla.mountingtypeID,	rla.parttypeID,	com.programingRequired,	rl.refDesig,	rl.dnpDesig,	trim(rl.lineID)+0 as lineID,	rl.id,          \n" +
                "					rl.isBuyDNPQty,	rl.isInstall,	rl.isPurchase,	rl.programingStatus,	rl.customerPartDesc,	com.mfgPN,	com.PIDCode, rla.mfgPNID,          \n" +
                "					com.RoHSStatusID,	ro.name,	ro.rohsIcon,	com.mfgPNDescription, com.isCustom,  com.custAssyPN,    \n" +
                "                    fun_getMfgNameByID(com.mfgcodeID) mfrCode,com.mfgcodeID,    \n" +
                "                    rla.pickupPadRequiredStep,      \n" +
                "				rla.matingPartRquiredStep,           \n" +
                "				rla.suggestedGoodPartStep,             \n" +
                "				rla.suggestedGoodDistPartStep,      \n" +
                "				rla.driverToolsRequiredStep,      \n" +
                "				rla.functionalTestingRequiredStep,      \n" +
                "				rla.mismatchCustomPartStep,      \n" +
                "				rla.mismatchValueStep,             \n" +
                "				rla.approvedMountingType,      \n" +
                "				rla.mismatchPackageStep,      \n" +
                "				rla.mismatchPowerStep,      \n" +
                "				rla.mismatchToleranceStep,      \n" +
                "				rla.mismatchTempratureStep,      \n" +
                "				rla.mismatchNumberOfRowsStep,      \n" +
                "				rla.uomMismatchedStep,      \n" +
                "				rla.programingRequiredStep,      \n" +
                "				rla.mismatchProgrammingStatusStep,      \n" +
                "				rla.mismatchColorStep,      \n" +
                "				rla.restrictUseInBOMStep,      \n" +
                "				rla.restrictUseInBOMWithPermissionStep,      \n" +
                "				rla.restrictUseInBOMExcludingAliasStep,      \n" +
                "				rla.restrictUseInBOMExcludingAliasWithPermissionStep,             \n" +
                "				rla.restrictUseExcludingAliasStep,      \n" +
                "				rla.restrictUseExcludingAliasWithPermissionStep,             \n" +
                "				rla.unknownPartStep,      \n" +
                "				rla.defaultInvalidMFRStep,      \n" +
                "				rla.suggestedByApplicationStep,    \n" +
                "				rla.mfgVerificationStep,      \n" +
                "				rla.mfgDistMappingStep,      \n" +
                "				rla.mfgCodeStep,      \n" +
                "				rla.customerApproval,      \n" +
                "				rla.isCustomerUnAppoval,      \n" +
                "				rla.org_mfgCode,      \n" +
                "				rla.org_mfgPN,      \n" +
                "				rla.org_distributor,      \n" +
                "				rla.org_distPN,      \n" +
                "				rla.distVerificationStep,      \n" +
                "				rla.distCodeStep,      \n" +
                "				rla.getMFGPNStep,      \n" +
                "				rla.obsoletePartStep,      \n" +
                "				rla.mfgGoodPartMappingStep,      \n" +
                "				rla.mfgPNStep,      \n" +
                "				rla.distPNStep,      \n" +
                "				rla.badMfgPN,      \n" +
                "				rla.distGoodPartMappingStep,      \n" +
                "				rla.nonRohsStep,      \n" +
                "				rla.epoxyStep,      \n" +
                "				rla.invalidConnectorTypeStep,      \n" +
                "				rla.duplicateMPNInSameLineStep,      \n" +
                "				rla.mismatchMountingTypeStep,      \n" +
                "				rla.mismatchFunctionalCategoryStep,      \n" +
                "				rla.mismatchFunctionalCategoryStep,      \n" +
                "				rla.restrictUseWithPermissionStep,      \n" +
                "				rla.restrictUsePermanentlyStep,      \n" +
                "				rla.partPinIsLessthenBOMPinStep,         \n" +
                "				rla.mismatchRequiredProgrammingStep,               \n" +
                "				rla.mappingPartProgramStep,                 \n" +
                "				rla.exportControlledStep,      \n" +
                "				rla.tbdPartStep    \n" +
                "			from rfq_lineitems rl          \n" +
                "			join rfq_lineitems_alternatepart rla on rla.rfqLineItemsID = rl.id and rla.isdeleted = 0          \n" +
                "			join component com on com.id = rla.mfgPNID and com.isdeleted = 0          \n" +
                "			Join rfq_rohsmst ro on ro.id = com.RoHSStatusID and ro.isDeleted = 0          \n" +
                "            where rl.partid = pPartID and rl.isInstall = 1 and rl.isdeleted = 0 and (rla.mountingtypeID = -2 or rla.parttypeID = -2);          \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 05-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4567,'2.00','V1','Bug 33224: BOM : Showing MFR Code instead of MFR Name in packaging alias pop-up related changes - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4567:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-05-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustomerPayment`(            \n" +
                "	IN pCustInvoicePaymentDetList JSON,            \n" +
                "	IN pCustomerPaymentMstID INT,            \n" +
                "	IN pMfgcodeID INT,            \n" +
                "	IN pPaymentNumber VARCHAR(50),            \n" +
                "	IN pPaymentDate DATE,            \n" +
                "	IN pPaymentAmount DECIMAL(18,8),            \n" +
                "	IN pPaymentType INT,            \n" +
                "	IN pAccountReference VARCHAR(50),            \n" +
                "	IN pBankAccountMasID INT,            \n" +
                "	IN pBankAccountNo VARCHAR(50),            \n" +
                "	IN pBankName VARCHAR(255),            \n" +
                "	IN pRemark VARCHAR(1000),            \n" +
                "	IN pRefPaymentMode VARCHAR(1),            \n" +
                "	IN pTotSelectedInvOfCust INT,            \n" +
                "	IN pDeleteCustInvPaymentDetList JSON,            \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,          \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,   \n" +
                "	IN pRefPaymentType VARCHAR(10) ,       \n" +
                "	IN pUserID INT,            \n" +
                "	IN pUserRoleID INT            \n" +
                "    )  \n" +
                "BEGIN            \n" +
                "  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE v_db_mainPaymentAmount DECIMAL(18,8) ;         \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;          \n" +
                "  \n" +
                "	IF (pisConfmTakenForDuplicateCheckNo = 0) THEN          \n" +
                "		/* check for duplicate check/payment number if confirmation not taken */            \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo                    \n" +
                "		FROM packingslip_invoice_payment                    \n" +
                "		WHERE refPaymentMode = pRefPaymentMode           \n" +
                "		AND paymentNumber = pPaymentNumber                    \n" +
                "		AND mfgcodeID = pMfgcodeID           \n" +
                "		AND id != pCustomerPaymentMstID          \n" +
                "		AND isPaymentVoided = 0          \n" +
                "		AND isdeleted = 0    ;          \n" +
                "	END IF;	          \n" +
                "  \n" +
                "  \n" +
                "	IF(vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0           \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN            \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */              \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;                                              \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS                                                        \n" +
                "		SELECT 	*                                                         \n" +
                "		FROM 	JSON_TABLE(                 \n" +
                "			pCustInvoicePaymentDetList,                                                        \n" +
                "				\"$[*]\" COLUMNS(                \n" +
                "					`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",            \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",                                                 \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",                                                        \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,            \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,            \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,  \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"             \n" +
                "				)              \n" +
                "			) AS CustInvoicePaymentDetList_JT ;             \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */	              \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;                                              \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS 	            \n" +
                "			SELECT cps.id AS invoiceMstID, cps.status,             \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,            \n" +
                "				pipd.id invPaymentDetMstID,             \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det            \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id           \n" +
                "					AND isPaymentVoided = 0            \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet            \n" +
                "			FROM customer_packingslip cps            \n" +
                "				LEFT JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID            \n" +
                "					 AND pipd.refPayementid = pCustomerPaymentMstID	          \n" +
                "					 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0            \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)            \n" +
                "			AND cps.isDeleted = 0            \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */            \n" +
                "		;            \n" +
                "  \n" +
                "		/* get all deleted invoice payment det (passed from UI but not in db)             \n" +
                "			if selected payment det not found from db - tdacipl.invPaymentDetMstID comes NULL in below query  */            \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;                                              \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS             \n" +
                "			SELECT tucipl.*            \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl            \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID            \n" +
                "			WHERE tucipl.invPaymentDetMstID IS NOT NULL  	             \n" +
                "			AND tucipl.invPaymentDetMstID != IFNULL(tdacipl.invPaymentDetMstID,0)              \n" +
                "			;            \n" +
                "  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)             \n" +
                "			> if selected invoice not found from db > tdacipl.invoiceMstID comes NULL            \n" +
                "			> original Payment Amount Of Invoice  mismatch > tdacipl.originalPayAmountOfInvoice comes NULL            \n" +
                "			> invoice Total Paid Amount mismatch > tdacipl.invTotPaidAmtFromAllPaymentDet comes NULL            \n" +
                "			*/	              \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;                                              \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS             \n" +
                "			SELECT tucipl.* ,             \n" +
                "				tdacipl.invoiceMstID AS invoiceMstIDOfDBAvailable, tdacipl.originalPayAmountOfInvoice AS originalPayAmountOfInvoiceOfDBAvailable,            \n" +
                "				tdacipl.invTotPaidAmtFromAllPaymentDet AS invTotPaidAmtFromAllPaymentDetOfDBAvailable            \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl            \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID            \n" +
                "			WHERE (            \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))              \n" +
                "				OR            \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))	            \n" +
                "				OR            \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))            \n" +
                "				)            \n" +
                "			;            \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)            \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN            \n" +
                "			-- SELECT 'update';            \n" +
                "			IF(pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN             \n" +
                "  \n" +
                "  \n" +
                "				/* get/map all deleting customer Invoice Payment Detail List send from UI */              \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;                                              \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS                                                        \n" +
                "				SELECT 	*                                                         \n" +
                "				FROM 	JSON_TABLE(                 \n" +
                "					pDeleteCustInvPaymentDetList,                                                        \n" +
                "						\"$[*]\" COLUMNS(                \n" +
                "							`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",            \n" +
                "							`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"                                               \n" +
                "						)              \n" +
                "				) AS DeleteCustInvoicePaymentDetList_JT ;             \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;                                              \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS             \n" +
                "					SELECT refCustPackingslipInvoiceID             \n" +
                "					FROM temp_UI_Delete_CustInvoicePaymentDetList ;            \n" +
                "  \n" +
                "  \n" +
                "				/* delete those which are unselected(from UI) inv payment det */            \n" +
                "				UPDATE packingslip_invoice_payment_det             \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,             \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()             \n" +
                "				WHERE id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)           \n" +
                "				AND isPaymentVoided = 0            \n" +
                "				AND isDeleted = 0 ;            \n" +
                "  \n" +
                "  \n" +
                "				/* update invoice payment status */	            \n" +
                "				UPDATE customer_packingslip cps            \n" +
                "					LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet            \n" +
                "						 FROM packingslip_invoice_payment_det            \n" +
                "						WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)            \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0             \n" +
                "						GROUP BY refCustPackingslipInvoiceID ) invPaymentDet            \n" +
                "					 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID                \n" +
                "				SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'             \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND            \n" +
                "								cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'            \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND            \n" +
                "								cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'            \n" +
                "  \n" +
                "							   ELSE cps.paymentStatus END            \n" +
                "							) ,            \n" +
                "					cps.updatedBy = pUserID,               \n" +
                "					cps.updateByRoleId = pUserRoleID ,              \n" +
                "					cps.updatedAt = fun_DatetimetoUTCDateTime()            \n" +
                "				WHERE cps.id IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)            \n" +
                "				AND cps.isDeleted = 0	;            \n" +
                "  \n" +
                "			END IF;            \n" +
                "  \n" +
                "  \n" +
                "			/* update all inv payment det amount whose amount is changed from UI */            \n" +
                "			UPDATE packingslip_invoice_payment_det pipd            \n" +
                "				JOIN (SELECT invPaymentDetMstID, paymentAmountForSelectedInvoice , appliedDate           \n" +
                "					FROM temp_UI_CustInvoicePaymentDetList            \n" +
                "					WHERE invPaymentDetMstID IS NOT NULL) tucipdl            \n" +
                "				ON pipd.id = tucipdl.invPaymentDetMstID            \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedInvoice,0),   \n" +
                "				pipd.appliedDate = tucipdl.appliedDate ,  \n" +
                "				pipd.updatedBy = pUserID,               \n" +
                "				pipd.updateByRoleId = pUserRoleID ,              \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()            \n" +
                "			WHERE (IFNULL(pipd.paymentAmount,0) != IFNULL(tucipdl.paymentAmountForSelectedInvoice,0)  \n" +
                "				OR pipd.appliedDate != tucipdl.appliedDate)  \n" +
                "			AND pipd.refPayementid = pCustomerPaymentMstID            \n" +
                "			AND pipd.isPaymentVoided = 0           \n" +
                "			AND pipd.isDeleted = 0             \n" +
                "			;            \n" +
                "  \n" +
                "			/* insert newly selected inv payment det */            \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,  \n" +
                "				`appliedDate` ,  \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)            \n" +
                "			SELECT pCustomerPaymentMstID, IFNULL(paymentAmountForSelectedInvoice,0), invoiceMstID,   \n" +
                "				appliedDate ,  \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID            \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList             \n" +
                "			WHERE invPaymentDetMstID IS NULL            \n" +
                "			;            \n" +
                "  \n" +
                "			/* update invoice payment status */	            \n" +
                "			UPDATE customer_packingslip cps            \n" +
                "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID            \n" +
                "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv ,            \n" +
                "				cps.updatedBy = pUserID,               \n" +
                "				cps.updateByRoleId = pUserRoleID ,              \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()	            \n" +
                "			WHERE cps.id = tucipdl.invoiceMstID            \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv IS NOT NULL             \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv != ''            \n" +
                "			AND cps.isDeleted = 0	;	            \n" +
                "  \n" +
                "		END IF;	            \n" +
                "  \n" +
                "  \n" +
                "	ELSE            \n" +
                "  \n" +
                "		IF(vCountExistsCheckNo = 0 AND pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN             \n" +
                "  \n" +
                "			/* get/map all deleting customer Invoice Payment Detail List send from UI */              \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;                                              \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS                                                        \n" +
                "			SELECT 	*                                                         \n" +
                "			FROM 	JSON_TABLE(                 \n" +
                "				pDeleteCustInvPaymentDetList,                                                        \n" +
                "					\"$[*]\" COLUMNS(                \n" +
                "						`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",            \n" +
                "						`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"                                               \n" +
                "					)              \n" +
                "			) AS DeleteCustInvoicePaymentDetList_JT ;             \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;                                              \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS             \n" +
                "				SELECT refCustPackingslipInvoiceID             \n" +
                "				FROM temp_UI_Delete_CustInvoicePaymentDetList ;            \n" +
                "  \n" +
                "  \n" +
                "			/* delete those which are unselected(from UI) inv payment det */            \n" +
                "			UPDATE packingslip_invoice_payment_det             \n" +
                "			SET isDeleted = 1, deletedBy = pUserID,             \n" +
                "				deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()             \n" +
                "			WHERE id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)           \n" +
                "			AND isPaymentVoided = 0            \n" +
                "			AND isDeleted = 0 ;            \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */	            \n" +
                "			UPDATE customer_packingslip cps            \n" +
                "				LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet            \n" +
                "					 FROM packingslip_invoice_payment_det            \n" +
                "					WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)            \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0             \n" +
                "					GROUP BY refCustPackingslipInvoiceID ) invPaymentDet            \n" +
                "				 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID                \n" +
                "			SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'             \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND            \n" +
                "							cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'            \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND            \n" +
                "							cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'            \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END            \n" +
                "						) ,            \n" +
                "				cps.updatedBy = pUserID,               \n" +
                "				cps.updateByRoleId = pUserRoleID ,              \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()            \n" +
                "			WHERE cps.id IN(SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)            \n" +
                "			AND cps.isDeleted = 0	;            \n" +
                "  \n" +
                "		END IF;	            \n" +
                "  \n" +
                "	END IF;            \n" +
                "  \n" +
                "  \n" +
                "	IF (vCountExistsCheckNo = 0) THEN          \n" +
                "		/* update invoice payment master details */            \n" +
                "		UPDATE packingslip_invoice_payment            \n" +
                "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,            \n" +
                "			paymentType = pPaymentType,            \n" +
                "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,            \n" +
                "			bankAccountNo = pBankAccountNo, bankName = pBankName,            \n" +
                "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,    \n" +
                "			updatedBy = pUserID,               \n" +
                "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()             \n" +
                "		WHERE id = pCustomerPaymentMstID          \n" +
                "		AND isPaymentVoided = 0	          \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "		IF (pRefPaymentType = 'RCV') THEN   /* Receivable: 'RCV' */  \n" +
                "			/* update lockStatus based on Payment Variance if record not locked */        \n" +
                "			UPDATE packingslip_invoice_payment psip        \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount                    \n" +
                "						FROM packingslip_invoice_payment_det psipd                      \n" +
                "						WHERE psipd.refPayementid = pCustomerPaymentMstID        \n" +
                "						AND psipd.refCustPackingslipInvoiceID IS NOT NULL                       \n" +
                "						AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0        \n" +
                "						GROUP BY psipd.refPayementid ) invPayDetTemp                       \n" +
                "				ON psip.id = invPayDetTemp.refPayementid        \n" +
                "			SET psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) > 0 THEN 'NA'        \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0 THEN 'RL'        \n" +
                "						ELSE psip.lockStatus END 	        \n" +
                "			WHERE psip.id = pCustomerPaymentMstID          \n" +
                "			AND psip.lockStatus != 'LC'			        \n" +
                "			AND psip.isPaymentVoided = 0	          \n" +
                "			AND psip.isDeleted = 0         \n" +
                "			;   \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pRefPaymentType = 'CCM') THEN   \n" +
                "  \n" +
                "			/* update main payment amount in case of payment from credit memo  */            \n" +
                "			SELECT paymentAmount INTO v_db_mainPaymentAmount                   \n" +
                "			FROM packingslip_invoice_payment                    \n" +
                "			WHERE id = pCustomerPaymentMstID          \n" +
                "			AND isPaymentVoided = 0 AND isdeleted = 0    ;     \n" +
                "  \n" +
                "			/* check db main payment and new payment not match then only update */  \n" +
                "			IF(pPaymentAmount != v_db_mainPaymentAmount) THEN  \n" +
                "				UPDATE packingslip_invoice_payment            \n" +
                "				SET paymentAmount = pPaymentAmount,             \n" +
                "					updatedBy = pUserID,               \n" +
                "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()             \n" +
                "				WHERE id = pCustomerPaymentMstID          \n" +
                "				AND isPaymentVoided = 0	          \n" +
                "				AND isDeleted = 0 ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END IF;       \n" +
                "  \n" +
                "	END IF;	          \n" +
                "  \n" +
                "  \n" +
                "	/* set up default temp table if not created */              \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS              \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;            \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS              \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;            \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */              \n" +
                "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) > 0)             \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0)          \n" +
                "		OR (vCountExistsCheckNo > 0)) THEN              \n" +
                "		SELECT 0 AS 'spStatus' ;              \n" +
                "	ELSE              \n" +
                "		SELECT 1 AS 'spStatus' ;              \n" +
                "	END IF;              \n" +
                "  \n" +
                "	/* Resp[1] - get all deleted invoice payment det (passed from UI but not in db) */              \n" +
                "	SELECT * FROM temp_Deleted_CustInvPayDetList ;             \n" +
                "  \n" +
                "	/* Resp[2] - get all mis match amount records or deleted invoices */              \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;             \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */            \n" +
                "	IF (vCountExistsCheckNo > 0) THEN          \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;                \n" +
                "	ELSE                \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;                \n" +
                "	END IF;            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;               \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;             \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;                                \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs; 	            \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 06-04-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerInvoiceDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceDetail`(                                                                                                                      \n" +
                "	IN invoiceID INT      ,    \n" +
                "    IN pTransType VARCHAR(5)    \n" +
                ")  \n" +
                "BEGIN                                                     \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                                                               \n" +
                "	DECLARE vTimeZone VARCHAR(50);                                                               \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;                                                      \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;                                            \n" +
                "	                 SELECT inv.id,   inv.transType,                             \n" +
                "						inv.packingSlipNumber,inv.packingSlipDate,                                    \n" +
                "                        -- (SELECT packing.id FROM customer_packingSlip packing WHERE packing.refCustInvoiceID = inv.id AND packing.isDeleted = 0) packingSlipID,                                \n" +
                "                        cps.id packingSlipID,      \n" +
                "						inv.refSalesOrderId  ,          \n" +
                "                        inv.systemID,                                  \n" +
                "						fun_getMfgCodeAndNameByID(inv.customerID) customerName,                \n" +
                "                        fun_getMfgNameByID(inv.customerID) customerNameOnly,                \n" +
                "                        inv.customerID,inv.poNumber,inv.poDate,                                              \n" +
                "						inv.soNumber,inv.soDate,                                          \n" +
                "                        inv.packingSlipType,inv.`status`,                                          \n" +
                "                        fun_getGenericCategoryCodeNameByID(inv.shippingMethodId) shippingMethod,inv.shippingMethodId,                                          \n" +
                "						inv.shipToId,inv.contactPersonId,inv.intermediateShipmentId, inv.billToId,                                             \n" +
                "						inv.invoiceNumber,inv.invoiceDate,                                  \n" +
                "                        inv.headerComment  ,   inv.packingSlipComment,                                       \n" +
                "						inv.freeOnBoardId,inv.salesCommissionTo,                                                                  \n" +
                "						CONCAT('(',fun_getEmployeeInitialNameByEmpID(inv.salesCommissionTo),') ',fun_getEmployeeNameByEmpID(inv.salesCommissionTo) ) salesCommName,  						                                        \n" +
                "						fun_getFOBById(inv.freeOnBoardId) FOBName,                                          \n" +
                "						fun_getGenericCategoryNameByID(inv.termsId) terms, inv.termsId,                                          \n" +
                "                        inv.intermediateShipmentId ,                                          \n" +
                "						inv.billingAddress,                                          \n" +
                "						inv.shippingAddress,                                          \n" +
                "						inv.intermediateAddress,                                  \n" +
                "                        inv.isLocked,                                  \n" +
                "                        inv.subStatus,                                  \n" +
                "                        inv.paymentStatus,                                  \n" +
                "                        inv.packingSlipType,                                  \n" +
                "                        fun_getUserNameByID(inv.lockedBy) lockedBy ,                                  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,vTimeZone,vDateTimeDisplayFormat) lockedAt,                                                              \n" +
                "                        inv.creditMemoNumber, inv.creditMemoDate,                            \n" +
                "						inv.refDebitMemoNumber, inv.refDebitMemoDate,   inv.rmaNumber,                        \n" +
                "                        (CASE WHEN inv.packingSlipType = 1 THEN 'MISC' WHEN inv.packingSlipType = 2 THEN 'PO/SO' END) packingSlipTypeText,      \n" +
                "                        inv.isZeroValue,      \n" +
                "                        inv.revision,      \n" +
                "                        cps.subStatus packingSlipSubStatus,      \n" +
                "                        (CASE WHEN cps.subStatus = 5 AND (inv.subStatus = 4 OR inv.subStatus = 5) THEN CONCAT( fun_getCustomerInvoiceSubStatusName(cps.subStatus, 'P'),' - ', fun_getCustomerInvoiceSubStatusName(inv.subStatus, 'I'))       \n" +
                "						ELSE '' END) materialStatus ,    \n" +
                "                        inv.isAlreadyPublished ,  \n" +
                "                        (CASE WHEN inv.transType = 'I' THEN 0   \n" +
                "				ELSE (SELECT COUNT(1) FROM packingslip_invoice_payment WHERE refCustCreditMemoID = inv.id   \n" +
                "					AND refPaymentMode = 'R' AND refPaymentType = 'CCM'   \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0) END) AS creditMemoAppliedInPaymentCount   \n" +
                "		FROM customer_packingslip inv       \n" +
                "                 LEFT JOIN customer_packingslip cps ON cps.refCustInvoiceID = inv.id AND cps.isDeleted = 0  AND cps.transType = 'P'    \n" +
                "                 WHERE inv.id = invoiceID    \n" +
                "                 AND inv.transType = pTransType;                                              \n" +
                "  \n" +
                "  \n" +
                "				 SELECT cpd.refSalesorderDetid,                                  \n" +
                "					cpd.id,                                  \n" +
                "                    cpd.refCustPackingSlipID,                              \n" +
                "					cpd.custPOLineID,                                  \n" +
                "					cpd.reflineID AS packingSlipSerialNumber,                              \n" +
                "                    cpd.lineID,                          \n" +
                "                    co.PIDCode,                        \n" +
                "                    co.mfgcodeID,            \n" +
                "                    ss.releaseNumber,                        \n" +
                "                    fun_getMfgCodeAndNameByID(co.mfgcodeID) mfgName,                        \n" +
                "					co.mfgpn,                                  \n" +
                "                    fun_getRoHSIconByPartID(cpd.partId) rohsIcon,                                  \n" +
                "					fun_getRoHSNameByPartID(cpd.partId) rohsName,                                  \n" +
                "                    cpd.partId,                                  \n" +
                "                    cpd.refChargesTypeID,                                             \n" +
                "					#(select c.partType from component c where c.isDeleted = 0 and c.id = partId) partType,                                            \n" +
                "					cpd.shipQty,cpd.unitPrice,cpd.extendedPrice,                                  \n" +
                "                    fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,                                  \n" +
                "                    #(IFNULL(shipQty,0)*IFNULL(unitPrice,0)) extPrice,                                   \n" +
                "                    CASE WHEN co.partType = 4 THEN FALSE ELSE TRUE END materialType,                  \n" +
                "                    othercharges AS lineOtherCharges,                                   \n" +
                "                    (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,                                  \n" +
                "					cpd.shippingNotes,                                  \n" +
                "                    cpd.internalComment,                                  \n" +
                "                    cpd.assyDescription,                                  \n" +
                "					fun_getUserNameByID(cpd.updatedBy) updatedby,                                                  \n" +
                "					fun_getUserNameByID(cpd.createdBy) createdby,                                                  \n" +
                "					fun_getRoleByID(cpd.createByRoleId) createdbyRole,                                                  \n" +
                "					fun_getRoleByID(cpd.updateByRoleId) updatedbyRole ,                                  \n" +
                "                    fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,                                                              \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(cpd.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt ,                          \n" +
                "                    (SELECT sod.quoteNumber FROM  salesorderdet sod WHERE sod.id = refSalesorderDetid AND sod.isDeleted = 0) quoteNumber,                  \n" +
                "                    co.partType,                  \n" +
                "                    vu.packingLineID,                \n" +
                "                    (CASE WHEN vu.packingDetID IS NOT NULL THEN 1 ELSE 0 END) isFromPackingSlip,    					          \n" +
                "                    co.isCustom, co.isCPN , co.nickName ,               \n" +
                "                    (SELECT GROUP_CONCAT(cert.fullName)FROM  certificate_standards cert               \n" +
                "						WHERE cert.certificateStandardID IN (SELECT compstd.certificateStandardID              \n" +
                "							FROM component_standard_details compstd WHERE compstd.componentID = co.id AND compstd.isDeleted= 0) )componentStandardList,          \n" +
                "					quoteFrom,refAssyQtyTurnTimeID,quoteNumber,refRFQGroupID,refRFQQtyTurnTimeID,          \n" +
                "                    (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,          \n" +
                "                    IFNULL(assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'           \n" +
                "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'          \n" +
                "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )          \n" +
                "					FROM rfq_assy_quantity_turn_time rfqAssyTurn           \n" +
                "				JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0          \n" +
                "                    WHERE rfqAssyTurn.id = cpd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,      \n" +
                "                    cpd.isZeroValue,      \n" +
                "                    fun_getIntToText(cpd.isZeroValue) isZeroValueConverted      \n" +
                "				 FROM customer_packingslip_det cpd                        \n" +
                "                 LEFT JOIN COMPONENT co ON co.id = cpd.partId AND co.isDeleted = 0             \n" +
                "                 LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0                     \n" +
                "                 LEFT JOIN vu_inv_ps_so_line_detail vu ON vu.invDetId= cpd.id AND vu.invoiceId = cpd.refCustPackingSlipId                  \n" +
                "                 WHERE cpd.refCustPackingSlipID = invoiceID AND cpd.isdeleted=0          \n" +
                "                 ORDER BY cpd.lineID ASC;                                            \n" +
                "  \n" +
                "                 SELECT cpOther.id,                              \n" +
                "						cpOther.refCustomerPackingSlipDetID,                                    \n" +
                "						cpOther.partID,                                                 \n" +
                "						fun_getMFGPNByID(cpOther.partID) mfgPN,                                    \n" +
                "                        fun_getRoHSIconByPartID(cpOther.partID) rohsIcon,                                    \n" +
                "                        fun_getRoHSNameByPartID(cpOther.partID) rohsName,                                     \n" +
                "                        cpOther.qty,                                     \n" +
                "                        cpOther.price,        \n" +
                "                        cpOther.lineComment,        \n" +
                "                         cpOther.lineInternalComment,                     \n" +
                "                        (IFNULL(cpOther.qty,0)*IFNULL(cpOther.price,0)) extOtherPrice,                                  \n" +
                "                        cpOther.frequency ,                              \n" +
                "						(CASE  	WHEN (cpOther.frequency = 1) THEN 'Every'                                                                                                                       \n" +
                "								WHEN (cpOther.frequency = 2) THEN 'First'                                             \n" +
                "								WHEN (cpOther.frequency = 3) THEN  'Last'                                             \n" +
                "								ELSE ''                                                                                   \n" +
                "						END) AS frequencyName                                             \n" +
                "                 FROM customer_packingslip_otherexpense_details cpOther                                     \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cpOther.refCustomerPackingSlipDetId AND cpd.isDeleted = 0                                    \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID                                    \n" +
                "                 AND cpOther.isdeleted=0;                                              \n" +
                "  \n" +
                "                  --  Tracking Number                                          \n" +
                "                SELECT id,trackNumber                                           \n" +
                "                FROM customer_packing_slip_track_number                                          \n" +
                "                WHERE refCustPackingSlipID = invoiceID                                          \n" +
                "                AND isDeleted = 0;              \n" +
                "  \n" +
                "                -- sales commission attribute          \n" +
                "                SELECT cca.id,          \n" +
                "					cca.refCustPackingSlipDetID,          \n" +
                "                    cca.unitPrice,          \n" +
                "                    cca.refQuoteAttributeId,          \n" +
                "                    cca.commissionPercentage,          \n" +
                "                    cca.commissionValue,          \n" +
                "                    cca.org_commissionPercentage,          \n" +
                "                    cca.org_commissionValue,          \n" +
                "                    cca.category,          \n" +
                "                    cca.partId,          \n" +
                "                    cca.refComponentSalesPriceBreakID,          \n" +
                "                    cca.org_unitPrice,          \n" +
                "                    (cca.commissionValue * cpd.shipQty) extendedCommissionValue,          \n" +
                "                    (cca.org_commissionValue * cpd.shipQty) extendedOrgCommissionValue,          \n" +
                "                    IFNULL(qd.fieldName,'Sales Commission') fieldName          \n" +
                "				FROM customer_packingslip_commission_attribute cca           \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0                                    \n" +
                "                 LEFT JOIN quotecharges_dynamic_fields_mst qd ON cca.refQuoteAttributeId = qd.id  AND qd.isDeleted = 0          \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID                                    \n" +
                "                 AND cca.isdeleted=0;              \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->06-04-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4568,'2.00','V1',' Sproc_GetCustomerInvoiceDetail merge from Main to Dev - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4568:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-05-2021 *********************************** */
                "INSERT INTO `table_mapping_details`(`tabel_name`,`display_page_name`) VALUES('packing_slip_material_receive_det_material_receipt','Material Receipts');  \n" +
                "INSERT INTO `table_mapping_details`(`tabel_name`,`display_page_name`) VALUES('packing_slip_material_receive_det_invoice','Supplier Invoice');  \n" +
                "INSERT INTO `table_mapping_details`(`tabel_name`,`display_page_name`) VALUES('packing_slip_material_receive_det_credit_memo','Supplier Credit Memo');  \n" +
                "INSERT INTO `table_mapping_details`(`tabel_name`,`display_page_name`) VALUES('packing_slip_material_receive_det_debit_memo','Supplier Debit Memo');  \n" +
                "INSERT INTO `table_mapping_details`(`tabel_name`,`display_page_name`) VALUES('packing_slip_material_receive_det_supplier_rma','Supplier RMA');  \n" +
                "update table_mapping_details set display_page_name = 'Material Receipts' where display_page_name = 'Material Details';  \n" +
                /* **************************** Add Script Version -> 05-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4569,'2.00','V1','Bug 33039: Supplier Part deletion must be restricted if in Use - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4569:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-05-2021 *********************************** */
                // mistakly check in blank version
                /* **************************** Add Script Version ->05-052021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4570,'2.00','V1',' - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4570:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-05-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAssyCompListForCustomerPackingSlipMISC`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyCompListForCustomerPackingSlipMISC`(                                  \n" +
                "	IN pCustomerID INT,    \n" +
                "	IN pSearch VARCHAR(300),    \n" +
                "	IN pPartID INT    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE v_respOfGetAcquiredMFRListFn INT;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Customers;    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Customers (    \n" +
                "		customerID int    \n" +
                "    );     \n" +
                "    /* If Selected customer's isComapny true then make it null as in case of company we have to fetch all customer's assembly*/    \n" +
                "    IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany = 1) > 0 THEN                           \n" +
                "		SET pCustomerID = NULL;                              \n" +
                "	END IF;                           \n" +
                "  \n" +
                "    /* IF customer selected and is comapny is not true then we have select customer based on acquire, and supplier mapping*/    \n" +
                "    IF 	pCustomerID IS NOT NULL THEN    \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID) into v_respOfGetAcquiredMFRListFn;    \n" +
                "        Insert into temp_Customers    \n" +
                "		select buyTo as customerID    \n" +
                "		from acquireCustomers;    \n" +
                "        Insert into temp_Customers    \n" +
                "        select smm.refMfgCodeMstID as customerID    \n" +
                "		from supplier_mapping_mst smm    \n" +
                "		where smm.supplierID = pCustomerID    \n" +
                "        and smm.isDeleted = 0;     \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/* Select assembly, sales kit, custom part and cpn part of selected customer and all the off the self MFR parts*/    \n" +
                "	SELECT 	co.id,            	co.mfgPN,				co.PIDCode,			co.mfgPNDescription AS description,    \n" +
                "			co.rev,				co.nickName,			co.partType,		u.unitName,				u.id unitID,    \n" +
                "			ro.rohsIcon,		ro.name AS rohsName,	CONCAT('(', mfg.mfgcode, ')', ' ', co.mfgPN) combinemfgPN,    \n" +
                "			co.mfgcodeID,		FUN_GETMFGCODEANDNAMEBYID(co.mfgcodeID) mfgName,					cst.standards,    \n" +
                "			mfg.mfgType,		co.category,            co.iscustom,		co.isCPN,    \n" +
                "			cst.componentStandardList,					co.rfqOnly    \n" +
                "	FROM 	component co    \n" +
                "	Inner JOIN mfgcodemst mfg ON co.mfgCodeID = mfg.id     \n" +
                "											AND mfg.isDeleted = 0     \n" +
                "											AND mfg.mfgType = 'MFG'    \n" +
                "											-- and mfg.id = (case when co.iscustom = 1 then ifnull(pCustomerID, mfg.id) else mfg.id end)    \n" +
                "                                            and (case when (co.iscustom = 1 and pCustomerID is not null)     \n" +
                "													then (exists (select 1 from temp_Customers ta where ta.customerID = mfg.id))    \n" +
                "                                                    else 1 = 1    \n" +
                "												end)    \n" +
                "	Inner JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND ro.isDeleted = 0    \n" +
                "	Inner JOIN uoms u ON co.uom = u.id AND u.isDeleted = 0    \n" +
                "	left join (    \n" +
                "		SELECT 	csd.componentID,    \n" +
                "				GROUP_CONCAT(cs.fullName) componentStandardList,    \n" +
                "                GROUP_CONCAT(CASE WHEN csd.classID IS NULL    \n" +
                "										THEN cs.fullName    \n" +
                "									ELSE    \n" +
                "										(SELECT GROUP_CONCAT(cs.fullName, ' ', IFNULL(className, ''))    \n" +
                "										FROM standard_class s    \n" +
                "										WHERE s.classID = csd.classID and isDeleted = 0)    \n" +
                "							END            \n" +
                "							ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC            \n" +
                "							SEPARATOR ', ') standards    \n" +
                "		FROM component_standard_details csd    \n" +
                "		inner join certificate_standards cs on csd.certificateStandardID = cs.certificateStandardID and cs.isDeleted = 0    \n" +
                "		WHERE csd.isDeleted = 0    \n" +
                "		group by csd.componentID    \n" +
                "    ) cst on co.id = cst.componentID    \n" +
                "	WHERE co.id > 0     \n" +
                "    and co.id = ifnull(pPartID, co.id)    \n" +
                "	AND co.isDeleted = 0    \n" +
                "	AND co.isGoodPart = 1    \n" +
                "	and co.partType != 4    \n" +
                "    and (Case when pSearch   \n" +
                "				then (co.PIDCode like concat('%',pSearch,'%') or mfg.mfgcode like concat('%',pSearch,'%') or co.mfgPN like concat('%',pSearch,'%'))  \n" +
                "				else 1 = 1  \n" +
                "		end);    \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->05-052021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4571,'2.00','V1',' Procedure correction for MFR search of Salesorder - Dharmishtha'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4571:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-05-2021 *********************************** */
                "ALTER TABLE purchase_order_mst ADD CancellationConfirmed TINYINT(1) NOT NULL DEFAULT 0;  \n" +
                /* **************************** Add Script Version -> 05-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4572,'2.00','V1','User Story 32566: Implement Cancel Purchase order Option - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4572:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-05-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderSummaryDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderSummaryDeatils`(    \n" +
                "	IN ppageIndex INT,    \n" +
                "	IN precordPerPage INT,    \n" +
                "	IN pOrderBy VARCHAR(255),    \n" +
                "	IN pWhereClause VARCHAR(16383),    \n" +
                "	IN psupplierID VARCHAR(16000),    \n" +
                "	IN pshippingMethodId VARCHAR(16000),    \n" +
                "	IN psearchposotype VARCHAR(10),    \n" +
                "	IN psearchposotext VARCHAR(1000),    \n" +
                "	IN ppartIds VARCHAR(1000),    \n" +
                "	IN ppostatus VARCHAR(10),    \n" +
                "	IN pfromDate DATE,    \n" +
                "	IN ptoDate DATE    \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE pOffset INT;    \n" +
                "	DECLARE rowNumWhere VARCHAR(255);    \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);    \n" +
                "	DECLARE vTimeZone VARCHAR(50);    \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;    \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;    \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(\"    \n" +
                "		SELECT  pom.id,    \n" +
                "				pom.poNumber,    \n" +
                "				pom.supplierID,    \n" +
                "				pom.poDate,    \n" +
                "				pom.soNumber,    \n" +
                "				pom.soDate,    \n" +
                "				pom.termsID,    \n" +
                "				pom.shippingMethodID,    \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,    \n" +
                "				pom.status,    \n" +
                "				pom.poComment,    \n" +
                "				pom.shippingComment,    \n" +
                "				pom.serialNumber,    \n" +
                "				pom.poRevision,    \n" +
                "				pom.carrierID,    \n" +
                "				pom.carrierAccountNumber,    \n" +
                "				CASE WHEN pom.shippingInsurance=0 THEN 'No' ELSE 'Yes' END shippingInsuranceName,    \n" +
                "				pom.shippingInsurance,    \n" +
                "				pom.supplierAddress,    \n" +
                "				pom.shippingAddress,    \n" +
                "				pom.intermediateAddress,    \n" +
                "				CASE WHEN pom.isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPO,    \n" +
                "				pom.isBlanketPO,    \n" +
                "				m.mfgcode,    \n" +
                "				pom.poCompleteReason,    \n" +
                "				pom.poCompleteType,    \n" +
                "				pom.cancleReason,    \n" +
                "				concat('(',m.mfgcode,')',' ',m.mfgName) supplierName,    \n" +
                "				pom.poWorkingStatus,    \n" +
                "                pom.CancellationConfirmed,   \n" +
                "                CASE WHEN pom.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END CancellationConfirmedStatus,    \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='C') poCompletedLine,    \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='P') poPendingLine,    \n" +
                "				case when pom.poWorkingStatus='P' then 'In Progress' when  pom.poWorkingStatus='C' then 'Completed' else 'Canceled' end workingStatusName,    \n" +
                "				IFNULL(vgf.cnt, 0) poDocumentCount,    \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType!=4 and pod.refPurchaseOrderID=pom.id) totalItems,    \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType=4 and pod.refPurchaseOrderID=pom.id) totalOtherItems,    \n" +
                "				fun_getFOBById(pom.freeOnBoardId) freeOnBoard,    \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,    \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,    \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,    \n" +
                "				(select sum((pod.qty * pod.price)+ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)) from purchase_order_det pod where pod.refPurchaseOrderID=pom.id and pod.isdeleted=0) totalAmount,    \n" +
                "				fun_getUserNameByID(pom.updatedBy)updatedby,    \n" +
                "				fun_getUserNameByID(pom.createdBy) createdby,    \n" +
                "				fun_getRoleByID(pom.createByRoleId) createdbyRole,    \n" +
                "				fun_getRoleByID(pom.updateByRoleId) updatedbyRole,    \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,    \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,    \n" +
                "				fun_getLatestPackingSlipDateByPOId(pom.id, TRUE) packingSlipId     \n" +
                "		FROM purchase_order_mst pom JOIN mfgcodemst m ON m.id=pom.supplierID    \n" +
                "		LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0    \n" +
                "		LEFT JOIN vu_genericfilescount vgf ON vgf.entityID = -20 AND vgf.refTransID = pom.id    \n" +
                "		WHERE pom.isdeleted=0    \n" +
                "	\");    \n" +
                "	IF(psupplierID IS NOT NULL)THEN    \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and pom.supplierID in (',psupplierID,')');    \n" +
                "	END IF;    \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN    \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and pom.shippingMethodID in (',pshippingMethodId,')');    \n" +
                "	END IF;    \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN    \n" +
                "		IF(psearchposotype='C')THEN    \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (pom.soNumber  like ''%',psearchposotext,'%'' OR pom.poNumber  like ''%',psearchposotext,'%'')');    \n" +
                "		ELSE    \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (pom.soNumber  =''',psearchposotext,''' OR pom.poNumber  =''',psearchposotext,''')');    \n" +
                "		END IF;    \n" +
                "	END IF;    \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN    \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (pom.poDate>=''',pfromDate,''' and pom.poDate<=''',ptoDate,''')');    \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN    \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (pom.poDate>=''',pfromDate,''')');    \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN    \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (pom.poDate<=''',ptoDate,''')');    \n" +
                "	END IF;    \n" +
                "	IF(ppostatus IS NOT NULL)THEN    \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and FIND_IN_SET(pom.poWorkingStatus,''', ppostatus ,''')');    \n" +
                "	END IF;    \n" +
                "	IF(ppartIds IS NOT NULL)THEN    \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' AND exists (select 1 from purchase_order_det pod where pod.refPurchaseOrderID = pom.id and pod.isDeleted = 0 and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,')))');    \n" +
                "	END IF;    \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN    \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";    \n" +
                "	ELSE    \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);    \n" +
                "	END IF;    \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN    \n" +
                "		SET pWhereClause = '1=1';    \n" +
                "	END IF;    \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN    \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;    \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);    \n" +
                "	ELSE    \n" +
                "		SET rowNumWhere = '';    \n" +
                "	END IF;    \n" +
                "	/* to get total count of rows */    \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c where 1=1 and \", pWhereClause);    \n" +
                "	PREPARE query2 FROM @SQLStatement2;    \n" +
                "	EXECUTE query2;    \n" +
                "	DEALLOCATE PREPARE query2;    \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);    \n" +
                "	PREPARE query1 FROM @SQLStatement2;    \n" +
                "	EXECUTE query1;    \n" +
                "	DEALLOCATE PREPARE query1;    \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-05-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_updatePurchaseOrderStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_updatePurchaseOrderStatus`(      \n" +
                "IN pPOID INT,      \n" +
                "IN pupdatedBy VARCHAR(100),      \n" +
                "IN pupdatedRoleID VARCHAR(100),      \n" +
                "IN pcompleteReason VARCHAR(1000),      \n" +
                "IN pcompleteType VARCHAR(20),      \n" +
                "IN pcancellationReason VARCHAR(1000),      \n" +
                "IN ptype VARCHAR(5),  \n" +
                "IN pCancellationConfirmed TINYINT  \n" +
                ")  \n" +
                "BEGIN      \n" +
                "  IF pcompleteReason IS NOT NULL THEN      \n" +
                "	UPDATE purchase_order_mst SET poWorkingStatus='C',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,poCompleteReason=pcompleteReason,poCompleteType=pcompleteType  WHERE id=pPOID;      \n" +
                "  \n" +
                "	UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='C',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID,poLineCompleteReason=IFNULL(poLineCompleteReason,pcompleteReason),poLineCompleteType=IFNULL(poLineCompleteType,pcompleteType) WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);      \n" +
                "  ELSEIF pcancellationReason IS NOT NULL THEN      \n" +
                "	IF ptype = 'C' THEN /* for cancellation po */      \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus='CA',CancellationConfirmed=pCancellationConfirmed,updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,cancleReason=pcancellationReason,poCompleteType=pcompleteType WHERE id=pPOID;      \n" +
                "  	ELSEIF ptype = 'R' THEN /* for revoke cancellation po */      \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus='P',CancellationConfirmed=0,updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,cancleReason=pcancellationReason,poCompleteType=pcompleteType WHERE id=pPOID;      \n" +
                "	END IF;      \n" +
                "  END IF;      \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-05-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_mst`;  \n" +
                "CREATE TRIGGER `Trg_AU_purchase_order_mst` AFTER UPDATE ON `purchase_order_mst` FOR EACH ROW BEGIN    \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO#',CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SO#',CAST(OLD.soNumber AS CHAR), CAST(new.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "    END IF;    \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Date',CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SO Date',CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.supplierID,0) != IFNULL(NEW.supplierID,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.supplierID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.supplierID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Terms', CAST(fun_getGenericCategoryCodeNameByID(OLD.termsID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.termsID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.poRevision ,0) != IFNULL(NEW.poRevision ,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Revision', CAST(OLD.poRevision AS CHAR), CAST(new.poRevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "    END IF;    \n" +
                "	IF IFNULL(OLD.shippingComment ,0) != IFNULL(NEW.shippingComment ,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Internal Notes', CAST(OLD.shippingComment AS CHAR), CAST(new.shippingComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.poComment ,0) != IFNULL(NEW.poComment ,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Comment', CAST(OLD.poComment AS CHAR), CAST(new.poComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.status ,0) != IFNULL(NEW.status ,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Status', CAST(CASE WHEN OLD.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), CAST(CASE WHEN NEW.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "	IF IFNULL(OLD.carrierID ,0) != IFNULL(NEW.carrierID ,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "    END IF;    \n" +
                "	IF IFNULL(OLD.carrierAccountNumber ,0) != IFNULL(NEW.carrierAccountNumber ,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.isDeleted ,0) != IFNULL(NEW.isDeleted ,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'DELETE', CAST(CASE WHEN OLD.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.isBlanketPO ,0) != IFNULL(NEW.isBlanketPO ,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Blanket PO', CAST(CASE WHEN OLD.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "    END IF;    \n" +
                "    IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Shipping with Insurance', CAST(CASE WHEN OLD.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "    END IF;    \n" +
                "    IF IFNULL(OLD.supplierAddress ,0) != IFNULL(NEW.supplierAddress ,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Supplier Address', CAST(OLD.supplierAddress AS CHAR), CAST(NEW.supplierAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.shippingAddress ,0) != IFNULL(NEW.shippingAddress ,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Bill To / Ship To', CAST(OLD.shippingAddress AS CHAR), CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "    IF IFNULL(OLD.intermediateAddress ,0) != IFNULL(NEW.intermediateAddress ,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Mark For', CAST(OLD.intermediateAddress AS CHAR), CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "    END IF;    \n" +
                "    IF IFNULL(OLD.freeOnBoardID ,0) != IFNULL(NEW.freeOnBoardID ,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'FOB', CAST(fun_getFOBById(OLD.freeOnBoardID) AS CHAR), CAST(fun_getFOBById(NEW.freeOnBoardID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "    END IF;    \n" +
                "    IF IFNULL(OLD.poWorkingStatus ,0) != IFNULL(NEW.poWorkingStatus ,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Working Status', CAST(CASE WHEN IFNULL(OLD.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN OLD.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END  AS CHAR), CAST(CASE WHEN IFNULL(NEW.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN NEW.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "    END IF;    \n" +
                "	IF IFNULL(OLD.cancleReason ,0) != IFNULL(NEW.cancleReason ,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Cancellation / Undo Reason', CAST(OLD.cancleReason AS CHAR), CAST(NEW.cancleReason AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;     \n" +
                "    IF IFNULL(OLD.CancellationConfirmed ,0) != IFNULL(NEW.CancellationConfirmed ,0) THEN    \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Cancellation Confirmed',  CAST(CASE WHEN OLD.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);    \n" +
                "	END IF;    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4573,'2.00','V1','User Story 32566: Implement Cancel Purchase order Option - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4573:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-05-2021 *********************************** */
                "drop procedure if exists `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(    \n" +
                "	IN pPageIndex INT,            \n" +
                "	IN pRecordPerPage INT,            \n" +
                "	IN pOrderBy VARCHAR(255),            \n" +
                "	IN pWhereClause VARCHAR(16383),            \n" +
                "	IN pPackingSlipID INT,            \n" +
                "    IN pInvoiceLineId INT            \n" +
                ")  \n" +
                "BEGIN            \n" +
                "	DECLARE pOffset INT;            \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;            \n" +
                "	DECLARE v_ParentPackingSlipId INT;            \n" +
                "	DECLARE v_InvoiceSlipId INT;            \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);            \n" +
                "	DECLARE v_TimeZone VARCHAR(50);            \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;            \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;            \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;            \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;            \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS            \n" +
                "	SELECT 	*,            \n" +
                "		(            \n" +
                "			CASE            \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'            \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'            \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'            \n" +
                "				ELSE NULL            \n" +
                "			END            \n" +
                "		) AS receivedStatusValue            \n" +
                "	FROM 	(            \n" +
                "		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,            \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,            \n" +
                "				p.nickname, 					p.partID, 								p.scanLabel,            \n" +
                "				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,            \n" +
                "				p.binID, 						p.warehouseID, 							p.parentWarehouseID,            \n" +
                "				p.invoicePrice, 				p.disputedPrice,            \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,            \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,            \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,            \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,            \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,            \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,            \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,            \n" +
                "				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,            \n" +
                "				p.discount,            \n" +
                "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,            \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,            \n" +
                "				p.refCreditDebitInvoiceNo,            \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated,            \n" +
                "				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,            \n" +
                "				fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,            \n" +
                "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,            \n" +
                "				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,            \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,            \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,            \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,            \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,            \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,            \n" +
                "				sc.packagingID supplierPackagingId,		c.umidSPQ spq,                     c.packageQty,                  c.isCustom,            \n" +
                "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,            \n" +
                "				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,        \n" +
                "				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,                      \n" +
                "				fun_getRoHSNameByID(p.rohsstatus) prohsName,                \n" +
                "				(            \n" +
                "					CASE            \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN            \n" +
                "							p.receivedStatus            \n" +
                "						ELSE            \n" +
                "							(SELECT receivedStatus            \n" +
                "							FROM 	packing_slip_material_receive_det            \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId            \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber            \n" +
                "									AND isDeleted = 0 LIMIT 1)            \n" +
                "					END            \n" +
                "				) receivedStatus,            \n" +
                "				p.remark,            \n" +
                "				p.internalRemark,            \n" +
                "				p.comment,            \n" +
                "				p.internalRef,            \n" +
                "				p.purchaseInspectionComment,            \n" +
                "				(            \n" +
                "					CASE            \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN            \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')            \n" +
                "						ELSE            \n" +
                "							(SELECT COUNT(1)            \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp            \n" +
                "							WHERE EXISTS (            \n" +
                "									SELECT 	1            \n" +
                "									FROM 	packing_slip_material_receive_det pslip            \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId            \n" +
                "											AND 	pslip.id = psmp.lineId            \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber            \n" +
                "											AND	pslip.isDeleted = 0)            \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')            \n" +
                "					END            \n" +
                "				) AS purchaseRequirementCount,            \n" +
                "				(            \n" +
                "					CASE            \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN            \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')            \n" +
                "						ELSE            \n" +
                "							(SELECT COUNT(1)            \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm            \n" +
                "							WHERE 	EXISTS (            \n" +
                "									SELECT 	1            \n" +
                "									FROM 	packing_slip_material_receive_det psmr            \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId            \n" +
                "										AND	psmr.id = psm.lineId            \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber            \n" +
                "										AND 	psmr.isDeleted = 0            \n" +
                "									)            \n" +
                "								AND psm.inspectionStatus = 'R'            \n" +
                "								AND psm.isDeleted = 0            \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')            \n" +
                "					END            \n" +
                "				) AS rejectedPurchaseRequirementCount,            \n" +
                "				(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,            \n" +
                "				(CASE WHEN `status` = 'A' THEN 'Approved' WHEN `status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,            \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,            \n" +
                "				(SELECT SUM(css.pkgQty) FROM component_sid_stock_packing_detail csspd LEFT JOIN 	component_sid_stock css  ON css.id = csspd.refComponentSidStockID AND css.isDeleted = 0            \n" +
                "				 WHERE csspd.isDeleted = 0 AND csspd.refPackingSlipDetailID = p.id) AS TotalUMIDCount,            \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,            \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,            \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,            \n" +
                "				ps.refInvoiceIdForMemo,            \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,            \n" +
                "				ps.refInvoiceNumberForMemo,            \n" +
                "				(            \n" +
                "					CASE            \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL            \n" +
                "						ELSE            \n" +
                "							(SELECT `status`            \n" +
                "							FROM 	packing_slip_material_receive_det            \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId            \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber            \n" +
                "									AND isDeleted = 0)            \n" +
                "					END            \n" +
                "				) invoiceStatus,            \n" +
                "				(            \n" +
                "					CASE            \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL            \n" +
                "						ELSE            \n" +
                "							(SELECT refCreditDebitInvoiceNo            \n" +
                "							FROM 	packing_slip_material_receive_det            \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId            \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber            \n" +
                "									AND isDeleted = 0)            \n" +
                "					END            \n" +
                "				) invoiceLineHasMemo,            \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,            \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd            \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'            \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id            \n" +
                "					AND pd.partId = p.partID) commentCount,            \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,            \n" +
                "				p.refPackingSlipIdForRma,            \n" +
                "				p.refPackingSlipDetIdForRMA,            \n" +
                "				p.refInvoiceIdForRma,            \n" +
                "				p.refPackingSlipForRma,            \n" +
                "				p.refInvoiceForRma,            \n" +
                "				rm.packingSlipQty parentDetailLinePackingSlipQty,            \n" +
                "				rm.invoicePrice parentDetailLineInvoicePrice,            \n" +
                "				rm.extendedPrice parentDetailLineExtendedPrice,            \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipNumberById(p.refPackingSlipIdForRma) ELSE refPackingSlipForRma END) refPackingSlipNumber,            \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE refInvoiceForRma END) refInvoiceNumber,            \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma) ELSE NULL END) refPackingSlipSupplierId            \n" +
                "		FROM		packing_slip_material_receive_det p            \n" +
                "		LEFT JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0            \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL            \n" +
                "		LEFT JOIN	(            \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo            \n" +
                "					FROM 	packing_slip_material_receive_det ps            \n" +
                "					WHERE 	ps.isDeleted = 0            \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId            \n" +
                "		LEFT JOIN 	(            \n" +
                "					SELECT 	packingSlipSerialNumber, packingSlipQty, invoicePrice, extendedPrice            \n" +
                "					FROM 	packing_slip_material_receive_det            \n" +
                "					WHERE 	isDeleted = 0 AND refPackingSlipMaterialRecID = v_ParentPackingSlipId            \n" +
                "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber            \n" +
                "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0            \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID            \n" +
                "		AND 		p.isDeleted = 0            \n" +
                "	) a;            \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;      \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS            \n" +
                "	SELECT 		ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID            \n" +
                "	FROM		packing_slip_material_receive_det psm            \n" +
                "	INNER JOIN  	packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID            \n" +
                "					AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)            \n" +
                "	WHERE		EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)            \n" +
                "	AND			ps.receiptType = 'P'            \n" +
                "	AND			psm.isDeleted = 0            \n" +
                "	GROUP BY 	ps.poNumber, psm.partID, psm.packagingID;            \n" +
                "  \n" +
                "	-- Set received qty detail            \n" +
                "	UPDATE 	packingSlipResult r, tempReceivedQtyResult q            \n" +
                "	SET 	r.totalReceivedQty = q.totalReceivedQty,            \n" +
                "		r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))            \n" +
                "	WHERE 	r.partID = q.partID AND r.packagingID = q.packagingID;            \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN            \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;            \n" +
                "	ELSE            \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN            \n" +
                "		SET pWhereClause = '1=1' ;            \n" +
                "	END IF;            \n" +
                "  \n" +
                "    IF pInvoiceLineId IS NOT NULL THEN            \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;            \n" +
                "    END IF;            \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN            \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;            \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;            \n" +
                "	ELSE            \n" +
                "		SET rowNumWhere = '';            \n" +
                "	END IF;            \n" +
                "  \n" +
                "	/* to get total count of rows */            \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );            \n" +
                "	PREPARE query1 FROM @SQLStatement1;            \n" +
                "	EXECUTE query1;            \n" +
                "	DEALLOCATE PREPARE query1;            \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);            \n" +
                "	PREPARE query2 FROM @SQLStatement2;            \n" +
                "	EXECUTE query2;            \n" +
                "	DEALLOCATE PREPARE query2;            \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,            \n" +
                "											invoiceTotalDue As invoiceTotalDue,            \n" +
                "									   ifnull((select round(sum(b.paymentAmount),2)            \n" +
                "										  from packingslip_invoice_payment a            \n" +
                "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid            \n" +
                "										 where b.refPackingslipInvoiceID = c.id            \n" +
                "                                           and a.refPaymentMode = 'P'            \n" +
                "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal            \n" +
                "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");            \n" +
                "	PREPARE query3 FROM @SQLStatement3;            \n" +
                "	EXECUTE query3;            \n" +
                "	DEALLOCATE PREPARE query3;            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->06-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4574,'2.00','V1','Task 33254: 33255: Suggested changes on UMID and packing slip Page by JV on 05-05-2021 - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4574:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-05-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber`(                                                                                                      \n" +
                "	IN pPackingSlipNumber VARCHAR(100)                              \n" +
                ")  \n" +
                "BEGIN                                     \n" +
                "	DECLARE v_CountOfPSRecord INT;                               \n" +
                "        DECLARE v_CountOfSIRecord INT;                              \n" +
                "        DECLARE v_StringOfMFGCode VARCHAR(255);                              \n" +
                "        DECLARE Status_Check TINYINT;                              \n" +
                "	DECLARE vPackingSlipId INT;                      \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_CustomerPackingSlip_Validation_Error;                                                                                                         \n" +
                "	CREATE TEMPORARY TABLE temp_CustomerPackingSlip_Validation_Error                                                  \n" +
                "	(                                                                                                        \n" +
                "		IsSuccess BOOLEAN,                              \n" +
                "		Error VARCHAR(1000)                                 \n" +
                "	);                                                   \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO v_CountOfPSRecord                                   \n" +
                "	FROM 	customer_packingslip                                   \n" +
                "	WHERE 	packingSlipNumber = pPackingSlipNumber                                \n" +
                "			AND transType = 'P'                                \n" +
                "			AND deletedAt IS NULL;                                  \n" +
                "  \n" +
                "	IF (v_CountOfPSRecord = 0) THEN                                  \n" +
                "		INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT('Customer Packing Slip# <b>',pPackingSlipNumber,'</b> not found.'));                                  \n" +
                "		SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;                                  \n" +
                "	ELSE                                \n" +
                "  \n" +
                "		SELECT 	refCustInvoiceID, GROUP_CONCAT(fullCustCode),`subStatus` ,id                      \n" +
                "        INTO v_CountOfSIRecord, v_StringOfMFGCode,Status_Check  ,  vPackingSlipId                                \n" +
                "		FROM 	(                                  \n" +
                "				SELECT 	id, packingSlipNumber, fun_getMfgCodeAndNameByID(customerID) fullCustCode,`subStatus`,refCustInvoiceID                                  \n" +
                "				FROM 	customer_packingslip                                   \n" +
                "				WHERE 	packingSlipNumber = pPackingSlipNumber                               \n" +
                "						AND transType = 'P'                               \n" +
                "						AND isDeleted =0                               \n" +
                "		) a;                               \n" +
                "			IF(Status_Check=1)THEN      /* status 1-> Draft */                        \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT(\"Customer Packing Slip# <b>\",pPackingSlipNumber,\"</b> is in <b>Draft</b>. So you cannot get any details of packing slip.\"));                                  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;                                  \n" +
                "			ELSEIF(v_CountOfSIRecord IS NOT NULL)THEN                              \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT(\"Customer Packing Slip# <b>\",pPackingSlipNumber,\"'s</b> customer invoice is already created for customer \",v_StringOfMFGCode,\".\"));                                  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;                               \n" +
                "			ELSE                              \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (TRUE, '');                                  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;                               \n" +
                "  \n" +
                "				SELECT packingSlipNumber,packingSlipDate,                      \n" +
                "                fun_getMfgCodeAndNameByID(customerID) customerName,                      \n" +
                "                customerID,                      \n" +
                "                    id AS packingSlipID,                      \n" +
                "                    poNumber, poDate,                            \n" +
                "					soNumber, soDate, refSalesOrderId,sorevision,                      \n" +
                "                    packingSlipType,                 \n" +
                "                    (CASE WHEN packingSlipType = 1 THEN 'MISC' WHEN packingSlipType = 2 THEN 'PO' END) packingSlipTypeText,                \n" +
                "					fun_getGenericCategoryCodeNameByID(shippingMethodId) shippingMethod,      shippingMethodId,                                    \n" +
                "                    fun_getGenericCategoryNameByID(termsId) terms,termsId,                      \n" +
                "                    shipToId, billToId ,                      \n" +
                "                    freeOnBoardId,salesCommissionTo,                      \n" +
                "                    fun_getEmployeeInitialNameByEmpID(salesCommissionTo) salesCommInitial,                      \n" +
                "                    CONCAT('(',fun_getEmployeeInitialNameByEmpID(salesCommissionTo),') ',fun_getEmployeeNameByEmpID(salesCommissionTo) ) salesCommName,  						                    \n" +
                "                    fun_getFOBById(freeOnBoardId) FOBName,                      \n" +
                "                    contactPersonId,                      \n" +
                "                    intermediateShipmentId ,                      \n" +
                "                    billingAddress,                      \n" +
                "                    shippingAddress,                      \n" +
                "                    intermediateAddress,                \n" +
                "                    packingSlipComment,        \n" +
                "                    headerComment                \n" +
                "				 FROM customer_packingslip WHERE packingSlipNumber = pPackingSlipNumber                               \n" +
                "						AND transType = 'P'                              \n" +
                "						AND isDeleted = 0 ;                                 \n" +
                "  \n" +
                "				SELECT  cpd.custPOLineID,  \n" +
                "						cpd.refSalesorderDetid,  \n" +
                "						cpd.reflineID AS packingSlipSerialNumber,  \n" +
                "                        fun_getMFGPNByID(cpd.partId) mfgpn,  \n" +
                "                        fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "                        fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "                        cpd.partId,cpd.refChargesTypeID,                            \n" +
                "					(SELECT c.partType FROM component c WHERE c.isDeleted = 0 AND c.id = cpd.partId) partType,                          \n" +
                "						cpd.shipQty,  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.price, cpd.unitPrice) unitPrice,        \n" +
                "						cpd.assyDescription,        \n" +
                "						fun_getAssyPIDCodeByID(cpd.partId)	PIDCode,        \n" +
                "						fun_getMfgCodeAndNameByPartID(cpd.partId) mfgName,        \n" +
                "						(SELECT ss.releaseNumber FROM salesshippingmst ss WHERE  ss.shippingId = cpd.shippingId AND ss.isdeleted=0) releaseNumber,                  \n" +
                "						fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,                  \n" +
                "						(IFNULL(cpd.shipQty,0)* IF(cp.packingSlipType = 2 ,0,IFNULL(cpd.unitPrice,0))) extPrice,                   \n" +
                "						cpd.otherCharges AS lineOtherCharges,                          \n" +
                "						0 totalExtPrice ,       \n" +
                "						1 isFromPackingSlip,      \n" +
                "						IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) quoteFrom,   \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,   \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,      \n" +
                "						IF(cp.packingSlipType = 2 ,sod.quoteNumber, cpd.quoteNumber) quoteNumber,   \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refRFQGroupID ,cpd.refRFQGroupID) refRFQGroupID,   \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,      \n" +
                "						(CASE 	WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 1 THEN 'From RFQ'   \n" +
                "								WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 3 THEN 'N/A'   \n" +
                "                                WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 2 THEN 'From Part Master' ELSE '' END) quoteFromText       \n" +
                "				 FROM customer_packingslip_det cpd   \n" +
                "                 LEFT JOIN customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and cp.isDeleted = 0  \n" +
                "                 LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "                 WHERE cpd.refCustPackingSlipID IN (                              \n" +
                "							SELECT 	id                                 \n" +
                "							FROM 	customer_packingslip                                    \n" +
                "							WHERE 	packingSlipNumber = pPackingSlipNumber                               \n" +
                "									AND transType = 'P'                              \n" +
                "									AND isDeleted=0	)   \n" +
                "                AND cpd.isDeleted=0                   \n" +
                "                ORDER BY refSalesorderdetid,shippingId ASC;                             \n" +
                "  \n" +
                "                -- get other charges                  \n" +
                "                -- 1, Every 2 First 3 Last                  \n" +
                "			  SELECT dtl.refCustPackingSlipID ,                   \n" +
                "					 dtl.refSalesorderDetid,                                       \n" +
                "                     dtl.remainingQty,                   \n" +
                "                     sother.partID,                  \n" +
                "                     fun_getMFGPNByID(sother.partID) mfgPN,                  \n" +
                "					 fun_getRoHSIconByPartID(sother.partID) rohsIcon,                  \n" +
                "					 fun_getRoHSNameByPartID(sother.partID) rohsName,                   \n" +
                "                     sother.price ,                   \n" +
                "                     sother.qty,                  \n" +
                "                     (IFNULL(sother.qty,0)*IFNULL(sother.price,0)) extOtherPrice,                    \n" +
                "                     sother.frequency,     \n" +
                "                      sother.lineComment,     \n" +
                "                       sother.lineInternalComment,                  \n" +
                "                     (CASE  WHEN (sother.frequency = 1) THEN 'Every'                                                                                                     \n" +
                "							WHEN (sother.frequency = 2) THEN 'First'                           \n" +
                "							WHEN (sother.frequency = 3) THEN  'Last'                           \n" +
                "							ELSE ''                                                                 \n" +
                "						END) AS frequencyName                     \n" +
                "				FROM (                  \n" +
                "					SELECT b.refCustPackingSlipID , b.refSalesorderDetid, b.poQty, b.shipQty ,b.remainingQty, b.packingslipIndex ,b.shippingId,b.calcFrequency FROM          \n" +
                "					 	(SELECT  a.refCustPackingSlipID , a.refSalesorderDetid, a.poQty, a.shipQty ,a.remainingQty, a.packingslipIndex ,a.shippingId,                  \n" +
                "						CASE WHEN packingslipIndex = 1 AND  remainingQty > 0 THEN '1,2'                  \n" +
                "							 WHEN packingslipIndex = 1 AND  remainingQty = 0 THEN '1,2,3'                  \n" +
                "							 WHEN packingslipIndex > 1 AND  remainingQty > 0 THEN '1'                   \n" +
                "							 WHEN packingslipIndex > 1 AND  remainingQty =  0 THEN '1,3' END AS calcFrequency                   \n" +
                "						FROM (                  \n" +
                "							SELECT cpd2.refCustPackingSlipID,cpd2.refSalesorderDetid,cpd2.poQty,cpd2.shipQty ,                   \n" +
                "								cpd2.remainingQty,cpd2.shippingId,                     \n" +
                "                                cpd2.partID,                  \n" +
                "								row_number() over(PARTITION BY cpd1.refSalesorderDetid,cpd1.shippingId  ORDER BY cpd2.id ) packingslipIndex                  \n" +
                "							FROM customer_packingslip_det cpd1                   \n" +
                "							JOIN customer_packingslip_det cpd2 ON cpd2.refSalesOrderDetid = cpd1.refSalesOrderDetid AND cpd2.isDeleted = 0                  \n" +
                "							WHERE cpd1.refCustPackingSlipID = vPackingSlipId                  \n" +
                "                            AND cpd1.isDeleted = 0                  \n" +
                "						) AS a          \n" +
                "						)AS b  GROUP BY b.refCustPackingSlipID,b.refSalesorderDetid,b.poQty, b.shipQty ,b.remainingQty, b.packingslipIndex ,b.shippingId,b.calcFrequency                 \n" +
                "				) AS dtl                  \n" +
                "				JOIN salesorder_otherexpense_details sother                   \n" +
                "                ON sother.refSalesOrderDetID = dtl.refSalesorderDetid AND sother.isDeleted = 0                  \n" +
                "				WHERE FIND_IN_SET ( sother.frequency ,dtl.calcFrequency)                   \n" +
                "				AND dtl.refCustPackingSlipID = vPackingSlipId;                  \n" +
                "  \n" +
                "  \n" +
                "                 --  Tracking Number                      \n" +
                "                SELECT trackNumber                       \n" +
                "                FROM customer_packing_slip_track_number                      \n" +
                "                WHERE refCustPackingSlipID = vPackingSlipId                      \n" +
                "                AND isDeleted = 0;                      \n" +
                "			END IF;                              \n" +
                "	END IF;                                 \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  04-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4575,'2.00','V1','Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4575:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-05-2021  *********************************** */
                "drop procedure if exists Sproc_GetUMIDListForCustomerPackingSlip;  \n" +
                "CREATE PROCEDURE `Sproc_GetUMIDListForCustomerPackingSlip`(	       \n" +
                "	IN pOrderBy VARCHAR(255),																																		      \n" +
                "	IN pWhereClause VARCHAR(16383),                                                                                                        \n" +
                "	IN pPartId INT,                                                                                          \n" +
                "	IN pExpiredDay INT,                            \n" +
                "	IN pPackingSlipDetId INT      \n" +
                ")  \n" +
                "BEGIN                                                                                                                                             \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                   \n" +
                "	DECLARE v_TimeZone VARCHAR(50);             \n" +
                "    DECLARE vUMIDWhereClause VARCHAR(1000);      \n" +
                "	DECLARE vPackagingAliasPart VARCHAR(1000);    \n" +
                "    DECLARE vCplAvlPart VARCHAR(1000);    \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                          \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                          \n" +
                "  \n" +
                "	#SET vInnerJoinMainQuery = ' ', vComponentWhereClause ='', vKitWhereClause='', vUMIDWhereClause = '';                                                                                                              \n" +
                "	# Get AVL part list of CPN part    \n" +
                "    select group_concat(refComponentID) into vCplAvlPart    \n" +
                "	from  component_cust_alias_rev_pn     \n" +
                "    where refCPNPartID = pPartId    \n" +
                "    and isDeleted = 0;    \n" +
                "	#Get Packaging Alias part list    \n" +
                "	select group_concat(a.componentID) into vPackagingAliasPart    \n" +
                "	from component_packagingalias   a    \n" +
                "	where a.aliasgroupID in     \n" +
                "	(select b.aliasgroupID from component_packagingalias b where b.componentID = pPartId)    \n" +
                "	and a.componentID <> pPartId    \n" +
                "	and a.isDeleted = 0;    \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN                                                                                                        \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);                                                                                            \n" +
                "	ELSE                                                                                                        \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";                                                                                                        \n" +
                "	END IF;                                                                                                        \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN                                                                                                                                                \n" +
                "		SET pWhereClause = ' 1=1';                                                                                                          \n" +
                "	END IF;	                                                                                            \n" +
                "  \n" +
                "	/*IF(pExpireMaterial = 1) THEN                                                    \n" +
                "		IF(pExpiredDay = 0) THEN                                                     \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND expiryDate is not null AND expiryDate < fun_DatetimetoUTCDateTime()');                                                    \n" +
                "		ELSE                                                    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND expiryDate is not null AND expiryDate < fun_DatetimetoUTCDateTime() + INTERVAL ',pExpiredDay,' DAY');                                                    \n" +
                "		END IF;	                                                    \n" +
                "	END IF;	                */      \n" +
                "  \n" +
                "#select    pPartId;     \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN                                                                                             \n" +
                "		SET vUMIDWhereClause = CONCAT(' AND (css.refcompid = ', pPartId);               \n" +
                "	END IF;       \n" +
                "  \n" +
                "#select    vPackagingAliasPart;        \n" +
                "    IF vPackagingAliasPart IS NOT NULL THEN    \n" +
                "		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ' OR  css.refcompid in (' , vPackagingAliasPart,')');               \n" +
                "    END IF;    \n" +
                "#select    vCplAvlPart;       \n" +
                "    IF vCplAvlPart IS NOT NULL THEN    \n" +
                "		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ' OR  css.refcompid in ( ', vCplAvlPart, ')');               \n" +
                "    END IF;    \n" +
                "#select     vUMIDWhereClause;    \n" +
                "    IF (vUMIDWhereClause IS NOT NULL  OR  vUMIDWhereClause != '') THEN    \n" +
                "		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ')');    \n" +
                "    END IF;    \n" +
                "    if pPackingSlipDetId is not null then      \n" +
                "		SET pWhereClause  =  CONCAT(pWhereClause , ' or ( tempUMID.id in (select refsidid from shippedassembly sa where (sa.partID =', pPartId );        	  \n" +
                "        IF vPackagingAliasPart IS NOT NULL THEN    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' OR  sa.partID in (' , vPackagingAliasPart,')');               \n" +
                "		END IF;    \n" +
                "		IF vCplAvlPart IS NOT NULL THEN    \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' OR  sa.partID in ( ', vCplAvlPart, ')');               \n" +
                "		END IF;           \n" +
                "		SET pWhereClause  =  CONCAT(pWhereClause , ') and sa.refCustPackingSlipDetID =',pPackingSlipDetId, ') and  tempUMID.isinStk =0 ) ');        	          \n" +
                "	end if;       \n" +
                "    SET pWhereClause  =  CONCAT(pWhereClause , ' or ( tempUMID.isinStk = 0 and tempUMID.pkgQty > 0 ) ');      \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;                                                                                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);                                                                                            \n" +
                "	/*IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN                                                                                             \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)                                                                                             \n" +
                "		SELECT 	k.refUIDId                                                                                             \n" +
                "		FROM 	kit_allocation k                                                                                            \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)                                                                                            \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)                                                                                    \n" +
                "		AND	k.status = 'A';                                                                		                            \n" +
                "		SET vKitWhereClause = CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs)');                                                                                            \n" +
                "	END IF;                      */      \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT(\"                                                                                                        \n" +
                "					SELECT 		id, 			scanlabel, 			uid, 			    	pkgQty, 			uom, 			                      \n" +
                "							uomName,		printStatus, 		        costCategoryID,			costCategory,			lotCode, 		                      \n" +
                "							dateCode,		refcompid,			mfgcodeID,		        mfgPN, 				PIDCode, 		                      \n" +
                "							packaginggroupID,	mfg,				packageQty, 		         		                      \n" +
                "							RoHSStatusID,		rohsIcon, 		        rohsName,			binID,				warehouseID,		                      \n" +
                "							location,		warehouse,			department, 		        customerID,			receiveMaterialType,	                      \n" +
                "							displayReceiveMaterialType,				spq,				pcbPerArray, 		        stockInventoryType, 	                      \n" +
                "							customer,			pkgUnit,   		        orgPkgUnit, 		                      \n" +
                "							cpn,				mfgAvailable, 		        customerConsign,                                                                                                   \n" +
                "							refCPNMFGPNID, 		        mfgPNDescription,		nickName, 		                      \n" +
                "							refSupplierPartId,	supplierMFGCode, 	        supplieMFGPN,			packaging,			packagingName, 		                      \n" +
                "							expiryDate,		allocatedToKit,			orgQty, 		        orgRecBin,			orgRecBinName,		                      \n" +
                "							orgRecWarehouse,	orgRecWHName,			fromBin, 		        fromBinName, 		        fromWarehouse, 			                      \n" +
                "							fromWHName,		fromDepartment,			fromDepartmentName, 	        specialNote,			orgRecDepartment, 		                      \n" +
                "							orgRecDepartmentName,	updatedAt, 		        updatedBy,			umidModifiedBy, 	        createdAt, 			                      \n" +
                "							createdBy,		createdByName,			isinStk,			packingSlipId,		        	                      \n" +
                "							packingSupplierName, 	expiredStatus,			umidPrefix,                     createdbyRole,			updatedbyRole,			              \n" +
                "							refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		        restrictUsePermanently,		restrictUSEwithpermission,	              \n" +
                "							restrictPackagingUsePermanently,			restrictPackagingUseWithpermission,						              \n" +
                "							countOfRestrictUMID,	departmentID,			warehouseType,			totalScrapUnit,			((totalScrapUnit/orgPkgUnit)*100) perScrapQty,           	              \n" +
                "							tentativePrice,		((totalScrapUnit/orgPkgUnit)*tentativePrice) costScrapQty,	isTransit,		                                                     \n" +
                "									               externalPartPackage,		partPackage,			createdUserCode, 	                      \n" +
                "							mfrDateCodeFormatID,	mfrDateCodeFormat,		mfrDateCode,           		        			                     \n" +
                "							UMIDrohsStatusID,       UMIDrohsStatus,        		isCustom,        		internalPartPackage,    	woNumber,        \n" +
                "							detailDescription ,reservedForCustomer,isEachUOM              \n" +
                "		FROM 		(		                                                                                                  \n" +
                "					SELECT 		css.id,			css.scanlabel,			css.uid,			css.pkgQty,			css.uom,						                        \n" +
                "							fun_getUnitNameByID(css.uom) uomName,			css.printStatus,		css.costCategoryID,                  			                        \n" +
                "							fun_getCostCategoryNameByID(css.costCategoryID, FALSE) costCategory,			css.lotCode,			css.dateCode,                  				                        \n" +
                "							css.refcompid,		c.mfgcodeID,			c.mfgPN,			c.PIDCode,			c.packaginggroupID,				                        \n" +
                "							fun_getMfgCodeAndNameByID(c.mfgcodeID) mfg,		c.packageQty,			                                  \n" +
                "							css.prefix umidPrefix,	      \n" +
                "                            c.RoHSStatusID,					                        \n" +
                "							fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,		fun_getRoHSNameByID(c.RoHSStatusID)  rohsName,			css.binID,    					                        \n" +
                "							fun_getBinNameByID(css.binID) location,			css.customerID,			fun_getMfgCodeAndNameByID(css.customerID) customer,                                                                                                  \n" +
                "							IFNULL(css.orgPkgUnit, 0) orgPkgUnit,			css.pkgUnit,					              \n" +
                "							fun_getWarehouseNameByBinID(css.binID) warehouse,	      \n" +
                "                            fun_getWarehouseIDByBinID(css.binID) warehouseID,		      \n" +
                "                            fun_getDepartmentNameByBinID(css.binID) department,                                                                                                  \n" +
                "							(                        \n" +
                "								CASE                         \n" +
                "									WHEN (css.cpn = 0) THEN 'No'                         \n" +
                "									WHEN (css.cpn = 1) THEN 'Yes'                         \n" +
                "									ELSE ''                         \n" +
                "								END                        \n" +
                "							) AS cpn,                                                                                                                     \n" +
                "							(                        \n" +
                "								CASE 	WHEN (css.mfgAvailabel = 0) THEN 'No'                         \n" +
                "									WHEN (css.mfgAvailabel = 1) THEN 'Yes'                         \n" +
                "									ELSE ''                         \n" +
                "								END                        \n" +
                "							) AS mfgAvailable,                                                                                                  \n" +
                "							(                        \n" +
                "								CASE 	WHEN (css.customerConsign = 0) THEN 'No'                         \n" +
                "									WHEN (css.customerConsign = 1) THEN 'Yes'                         \n" +
                "									ELSE ''                         \n" +
                "								END                        \n" +
                "							) AS customerConsign,				                                                                                                             \n" +
                "							css.refCPNMFGPNID,			                                  \n" +
                "							c.mfgPNDescription,			css.receiveMaterialType,							      \n" +
                "                            css.spq,                                                  \n" +
                "							(                                                  \n" +
                "								CASE                                                   \n" +
                "									WHEN  css.receiveMaterialType = 'PP' THEN                                                  \n" +
                "										'Purchased Part'                                                  \n" +
                "									WHEN  css.receiveMaterialType = 'WC' THEN                                                  \n" +
                "										'Customer Consigned (with CPN) Part'                                                  \n" +
                "									WHEN  css.receiveMaterialType = 'WOC' THEN                                                  \n" +
                "										'Customer Consigned (without CPN) Part'                                                  \n" +
                "									WHEN  css.receiveMaterialType = 'PR' THEN                                                  \n" +
                "										'Purchased & Reserved Part'                                                  \n" +
                "									ELSE                                                  \n" +
                "										NULL                                                  \n" +
                "								END                                                  \n" +
                "  \n" +
                "							) displayReceiveMaterialType,       \n" +
                "                            fun_getMfgNameByID(css.customerId) As reservedForCustomer,      \n" +
                "							css.stockInventoryType,                                          							                                                  \n" +
                "							css.pcbPerArray,				css.nickName,					css.packaging,					                        \n" +
                "							fun_getPackagingNameByID(css.packaging) packagingName,						css.refSupplierPartId, 				                        \n" +
                "							fun_getMfgCodeAndNameByPartID(css.refSupplierPartId) supplierMFGCode,	          		fun_getMFGPNByID(css.refSupplierPartId) supplieMFGPN,                                                                                                                    \n" +
                "							css.expiryDate,					      \n" +
                "                            fun_getAllocatedKitsNameByID(css.id, 'A') allocatedToKit,                                                                                                  \n" +
                "							css.orgQty,					css.specialNote,				css.fromBin,					                        \n" +
                "							fun_getBinNameByID( css.fromBin) fromBinName,		css.fromWarehouse,      			                        \n" +
                "							fun_getWarehouseNameByID(css.fromWarehouse) fromWHName,						css.fromDepartment,     			                        \n" +
                "							fun_getWarehouseNameByID(css.fromDepartment) fromDepartmentName,				css.orgRecBin,          			                        \n" +
                "							fun_getBinNameByID(css.orgRecBin) orgRecBinName,						css.orgRecWarehouse,    			                        \n" +
                "							fun_getWarehouseNameByID(css.orgRecWarehouse) orgRecWHName, 					css.orgRecDepartment,   			                        \n" +
                "							fun_getWarehouseNameByID(css.orgRecDepartment) orgRecDepartmentName,                                                                                                  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,          					                        \n" +
                "							css.updatedBy,					fun_getUserNameByID(css.updatedBy) AS umidModifiedBy,                                                                                                    \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,				                        \n" +
                "							css.createdAt createdAtFilter,                    \n" +
                "							css.createdBy,					fun_getUserNameByID(css.createdBy) createdByName,                                                                                              \n" +
                "							css.isinStk,                                                          \n" +
                "							fun_getRoleByID(css.createByRoleId) createdbyRole,                                                            \n" +
                "		                                        fun_getRoleByID(css.updateByRoleId) updatedbyRole,  					                                                                        							        \n" +
                "							(                                                \n" +
                "								CASE                                                \n" +
                "									WHEN  css.stockInventoryType = 'NI' THEN                                                  \n" +
                "										CONCAT('(', a.mfgCode, ') ', a.mfgName)              \n" +
                "									ELSE              \n" +
                "										NULL              \n" +
                "								END                                                \n" +
                "							) packingSupplierName,                   \n" +
                "							a.packingSlipId,                                                      \n" +
                "							 fun_getDepartmentIDByBinID(css.binID) departmentID,                                                           \n" +
                "							 fun_getWareHouseTypeByBinID(css.binID) warehouseType  ,                                                                                \n" +
                "							(                        \n" +
                "								CASE 	WHEN (css.expiryDate < fun_DatetimetoUTCDateTime()) THEN 'Expired'                         \n" +
                "									ELSE NULL                         \n" +
                "								END                        \n" +
                "							) AS expiredStatus,                                                                            \n" +
                "							refRestrictUMIDId, 				  	isUMIDRestrict,                                                                            \n" +
                "							(                        \n" +
                "								CASE 	WHEN (css.isUMIDRestrict = 0) THEN 'No'                         \n" +
                "									WHEN (css.isUMIDRestrict = 1) THEN 'Yes'                         \n" +
                "									ELSE ''                         \n" +
                "								END                        \n" +
                "							) AS UMIDRestricted,                                                                        \n" +
                "							c.restrictUsePermanently,						c.restrictUSEwithpermission,                                                                         \n" +
                "							c.restrictPackagingUsePermanently,					c.restrictPackagingUseWithpermission,                                                          							      \n" +
                "							IFNULL(c.price, 0) tentativePrice,					fun_getTotalUMIDScrapUnit(css.id) totalScrapUnit,                        \n" +
                "							fun_getCountOfRestrictUMID(css.id) countOfRestrictUMID,         	fun_getUMIDTransitStatus(css.uid) isTransit,                               \n" +
                "							c.partPackage externalPartPackage,                                    \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackage,		                        \n" +
                "							fun_getUserCodeByID(css.createdBy) createdUserCode,                   	css.mfrDateCodeFormatID,                                              \n" +
                "							fun_getMFRDateCodeFormatByID(css.mfrDateCodeFormatID) mfrDateCodeFormat,                        \n" +
                "							css.mfrDateCode,		css.rohsStatusID UMIDrohsStatusID,                        \n" +
                "							fun_getRoHSNameByID(css.rohsStatusID) UMIDrohsStatus,			c.isCustom,                      \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) internalPartPackage,    	css.woNumber,        \n" +
                "							c.detailDescription,  \n" +
                "                            (case when css.uom = -1 then true else false end) isEachUOM  \n" +
                "					FROM 		component_sid_stock css force index(FK_component_sid_stock_refcompid)                                                                                                      \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id       \n" +
                "					LEFT JOIN 	(              \n" +
                "								SELECT 		cspd.refComponentSidStockID, mcm.mfgCode, ps.packingSlipNumber, mcm.mfgName, ps.id packingSlipId              \n" +
                "								FROM 		component_sid_stock_packing_detail cspd                        \n" +
                "								INNER JOIN 	packing_slip_material_receive_det psd force index(PRIMARY) ON cspd.refPackingSlipDetailID = psd.id AND psd.isDeleted = 0              \n" +
                "								INNER JOIN 	packing_slip_material_receive ps force index(PRIMARY) ON psd.refPackingSlipMaterialRecID = ps.id AND ps.isDeleted = 0              \n" +
                "								INNER JOIN 	mfgcodemst mcm ON mcm.id = ps.mfgCodeID AND mcm.isDeleted = 0              \n" +
                "								GROUP BY 	cspd.refComponentSidStockID, mcm.mfgCode, ps.packingSlipNumber, mcm.mfgName, ps.id              \n" +
                "							) a ON a.refComponentSidStockID = css.id                                                      \n" +
                "					WHERE 		(css.isdeleted is null or css.isdeleted = 0)\",                                                                                             \n" +
                "								vUMIDWhereClause,\") As tempUMID                                                                                                   \n" +
                "				WHERE\", pWhereClause                        \n" +
                "			);                                                                                    \n" +
                "  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");              \n" +
                "	PREPARE query1 FROM @SQLStatement1;                                                                                                                                              \n" +
                "	EXECUTE query1;                                                                                                                                              \n" +
                "	DEALLOCATE PREPARE query1;                                                                                                          \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");                                                                                                        \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                                                                              \n" +
                "	EXECUTE query2;                                                                                                                                              \n" +
                "	DEALLOCATE PREPARE query2;                           \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy);                   \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;                                                                                                                                              \n" +
                "	EXECUTE mainQuery;                                                                                                                                              \n" +
                "	DEALLOCATE PREPARE mainQuery;                                                                                                       \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  04-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4576,'2.00','V1','Sproc_GetUMIDListForCustomerPackingSlip -Shweta'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4576:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-05-2021  *********************************** */
                "drop procedure if exists Sproc_RetrieveCustomerPackingShippingDetail;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingShippingDetail`(                                          \n" +
                "	IN ppageIndex INT,                                          \n" +
                "	IN precordPerPage INT,                                          \n" +
                "	IN pOrderBy VARCHAR(255),                                          \n" +
                "	IN pWhereClause VARCHAR(16383),                            \n" +
                "	IN prefCustPackingSlipID INT                                  \n" +
                "	)  \n" +
                "BEGIN                                          \n" +
                "  \n" +
                "	DECLARE pOffset INT;                                          \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                             \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);                                         \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                                      \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                                \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;                                    \n" +
                "  \n" +
                "  SET @tempQuerypackingSlip = CONCAT(\"SELECT cpd.id, cpd.refCustPackingSlipID,cpd.refSalesorderDetid,                       \n" +
                "			cpd.partId , cpd.custPOLineID, cpd.assyDescription,                           \n" +
                "			cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,cpd.shippingNotes,cpd.shippingId,              \n" +
                "			cpd.internalComment,                       \n" +
                "			cpd.binID, cpd.whID,        \n" +
                "			ss.qty as releaseLineQty,               \n" +
                "			cpd.standrads,        \n" +
                "			ss.releaseNumber,                               \n" +
                "			fun_getUserNameByID(cpd.updatedBy) updatedby,                                \n" +
                "			fun_getUserNameByID(cpd.createdBy) createdby,                              \n" +
                "			fun_getRoleByID(cpd.createByRoleId) createdbyRole,                                \n" +
                "			fun_getRoleByID(cpd.updateByRoleId) updatedbyRole,                             \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                        \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,			                        \n" +
                "			c.mfgpn,c.pidcode PIDCode,c.nickName,c.mfgpndescription,rr.name as rohsName,rr.rohsIcon, c.partType ,                            \n" +
                "			fun_getUnitNameByID(c.uom) unitMeaser ,                          \n" +
                "			cpd.reflineID as lineID ,              \n" +
                "			     fun_getMfgCodeAndNameByID(c.mfgcodeid) mfgName,              \n" +
                "			     c.mfgcodeid ,                \n" +
                "			cpd.lineID AS lineIDSequenceNum   ,                \n" +
                "			(SELECT GROUP_CONCAT(DISTINCT woNumber SEPARATOR ', ') FROM shippedassembly                 \n" +
                "			   WHERE refCustPackingSlipDetID = cpd.id AND isDeleted = 0 AND shippedqty > 0) shippedFromWONumbers ,                \n" +
                "			(SELECT GROUP_CONCAT(DISTINCT css.uid) FROM shippedassembly sa                \n" +
                "					JOIN component_sid_stock css ON sa.refsidid = css.id AND  css.isDeleted = 0                \n" +
                "			  WHERE sa.refCustPackingSlipDetID = cpd.id AND sa.isDeleted = 0 AND sa.shippedqty > 0) shippedFromUMIDs ,            \n" +
                "             cpd.refLineId soLineId ,            \n" +
                "             CASE WHEN c.partType = 4 THEN FALSE ELSE TRUE END materialType,            \n" +
                "             (select mfg.mfgType from mfgcodemst mfg where mfg.id = c.mfgcodeID and mfg.isDeleted = 0) mfgType,            \n" +
                "             cpd.componentStockType,            \n" +
                "             if(cp.packingSlipType = 2, sod.price, cpd.unitPrice)  unitPrice,           \n" +
                "             if(cp.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,   \n" +
                "             if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) quoteFrom,   \n" +
                "             if(cp.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,          \n" +
                "             c.isCustom,c.isCPN,          \n" +
                "             if(cp.packingSlipType = 2, cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,          \n" +
                "             (select group_concat(cert.fullName)from  certificate_standards cert           \n" +
                "						where cert.certificateStandardID in (select compstd.certificateStandardID          \n" +
                "							from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,      \n" +
                "            if(cp.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "            if(cp.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
                "            if(cp.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,    \n" +
                "			(case when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText		    \n" +
                "		FROM `customer_packingslip_det` AS cpd                  \n" +
                "			left join component c on c.id=cpd.partid                 \n" +
                "			left join rfq_rohsmst rr on rr.id=c.rohsStatusID          \n" +
                "			left join salesshippingmst ss on ss.shippingID=cpd.shippingID and ss.isdeleted=0   \n" +
                "            left join salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0    \n" +
                "            left join customer_packingslip cp on cp.id  = cpd.refCustPackingSlipID and cp.isDeleted = 0  \n" +
                "		WHERE cpd.isDeleted=0 and cpd.refCustPackingSlipID=\",IFNULL(prefCustPackingSlipID,0));                                  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY lineIDSequenceNum ASC\") ;                                          \n" +
                "		ELSE                                          \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                          \n" +
                "		END IF;	                                          \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                          \n" +
                "			SET pWhereClause = '1=1' ;                                          \n" +
                "		END IF;	                                          \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                           \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                          \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                          \n" +
                "		ELSE	                                          \n" +
                "			SET rowNumWhere = '';                                          \n" +
                "		END IF;	                                          \n" +
                "        /* to get total count of rows */                                       \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempQuerypackingSlip,\" ) c where 1=1 and \", pWhereClause);                                      \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;                                      \n" +
                "			EXECUTE query2;                                      \n" +
                "			DEALLOCATE PREPARE query2;                                    \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempQuerypackingSlip,\" ) c                                      \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                \n" +
                "			PREPARE query1 FROM @SQLStatement2;                                      \n" +
                "			EXECUTE query1;                                      \n" +
                "			DEALLOCATE PREPARE query1;                                    \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->  04-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4577,'2.00','V1','Sproc_RetrieveCustomerPackingShippingDetail -Shweta'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4577:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-05-2021  *********************************** */
                "drop procedure if exists Sproc_SaveCustomerInvoiceDetail;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustomerInvoiceDetail`(                                          \n" +
                "	IN pTransType VARCHAR(5),                                  \n" +
                "	IN pInvoiceType VARCHAR(1),                                      \n" +
                "	IN pInvoiceID INT,              	                                      \n" +
                "    IN pInvData JSON,                                      \n" +
                "    IN pPackingSlipID INT,                                      \n" +
                "	IN puserID INT,                                                \n" +
                "	IN puserRoleID INT ,                                            \n" +
                "	IN pCustomerInvoiceSystemIDTypeConst VARCHAR(50),          \n" +
                "    IN pSystemId VARCHAR(20)  ,        \n" +
                "    IN pPackingSlipType INT        \n" +
                ")  \n" +
                "BEGIN                                                       \n" +
                "	DECLARE v_maxCurrSystemIDForInv VARCHAR(20) ;                    \n" +
                "	DECLARE v_prefix VARCHAR(20);                                            \n" +
                "	DECLARE vTermsDays INT ;       \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_customerInvoice;                                                                        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customerInvoice AS                                                                                  \n" +
                "	SELECT 	*                                                                                   \n" +
                "	FROM 	JSON_TABLE(                                           \n" +
                "			pInvData,                                                                                  \n" +
                "			\"$[*]\" COLUMNS(    			                                     \n" +
                "				`transType` VARCHAR(5) PATH \"$.transType\",                                      \n" +
                "				`invoiceID` INT PATH \"$.invoiceID\",                                      \n" +
                "				`packingSlipID` INT PATH \"$.packingSlipID\",                                       \n" +
                "                `packingSlipType` INT PATH \"$.packingSlipType\",                                      \n" +
                "				`customerID` INT PATH \"$.customerID\" ,                                                                                  \n" +
                "				`status` INT PATH \"$.status\",                                      \n" +
                "				`subStatus` INT PATH \"$.subStatus\",                                      \n" +
                "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",                                                                                  \n" +
                "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",                                                                                  \n" +
                "				`poDate` DATE PATH \"$.poDate\",                                       \n" +
                "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",                                                                                  \n" +
                "				`soDate` DATE PATH \"$.soDate\",                                          \n" +
                "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,                                        \n" +
                "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,                                        \n" +
                "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,                                        \n" +
                "				`invoiceNumber` VARCHAR(50) PATH \"$.invoiceNumber\" ,                                        \n" +
                "				`invoiceDate` DATE PATH \"$.invoiceDate\" ,                                        \n" +
                "				`shippingMethodID` INT PATH \"$.shippingMethodID\",                                      \n" +
                "				`headerComment` TEXT PATH \"$.headerComment\" ,                                      \n" +
                "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,                                      \n" +
                "				`billingAddress` TEXT PATH \"$.billingAddress\" ,                                      \n" +
                "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,                                      \n" +
                "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,                                      \n" +
                "                `billToId` INT PATH \"$.billToId\" ,                                      \n" +
                "				`shipToId` INT PATH \"$.shipToId\" ,                                      \n" +
                "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,                                      \n" +
                "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,                                      \n" +
                "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,                                      \n" +
                "				`termsId` INT PATH \"$.termsId\" ,                                      \n" +
                "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,                                  \n" +
                "                `creditMemoNumber` VARCHAR(50) PATH \"$.creditMemoNumber\" ,                                        \n" +
                "				`creditMemoDate` DATE PATH \"$.creditMemoDate\" ,                                   \n" +
                "                `refDebitMemoNumber` VARCHAR(50) PATH \"$.refDebitMemoNumber\" ,                                        \n" +
                "				`refDebitMemoDate` DATE PATH \"$.refDebitMemoDate\",                                   \n" +
                "                `rmaNumber`  VARCHAR(50) PATH \"$.rmaNumber\" ,                  \n" +
                "                `contactPersonId` INT PATH \"$.contactPersonId\",      \n" +
                "                `revision` VARCHAR(10) PATH \"$.revision\",      \n" +
                "                `isZeroValue` TINYINT PATH \"$.isZeroValue\",    \n" +
                "                `isAlreadyPublished` TINYINT PATH \"$.isAlreadyPublished\"    \n" +
                "			)                                        \n" +
                "		) AS CustInv_JT;                \n" +
                "  \n" +
                "		SELECT  termsDays INTO 	vTermsDays                                      \n" +
                "		FROM genericCategory gc                                       \n" +
                "		WHERE gc.gencCategoryID IN (SELECT temp.termsId FROM temp_customerInvoice temp)                                      \n" +
                "		AND categoryType = 'Payment Terms';         \n" +
                "	  IF(pInvoiceID IS NULL)THEN               \n" +
                "  \n" +
                "			/* get max identity value of 'CustomerInvoiceSystemID' for systemID */                                            \n" +
                "			/* SELECT `maxValue`,prefix INTO v_maxCurrSystemIDForInv,v_prefix                                            \n" +
                "			FROM `identity`                                            \n" +
                "			WHERE `type` = pCustomerInvoiceSystemIDTypeConst ; */                                           \n" +
                "  \n" +
                "  \n" +
                "			INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,                                            \n" +
                "				poNumber,poDate,soNumber,soDate,packingSlipNumber,                                            \n" +
                "				packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                                            \n" +
                "				packingSlipComment,headerComment,sorevision,                                            \n" +
                "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,                                            \n" +
                "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,                                          \n" +
                "				billingAddress,shippingAddress,intermediateAddress ,subStatus, paymentStatus ,                                       \n" +
                "				totalAmount,termsDays, freeOnBoardName, creditMemoNumber,creditMemoDate ,                          \n" +
                "                refDebitMemoNumber,refDebitMemoDate, rmaNumber , billToId,shipToId ,intermediateShipmentId,      \n" +
                "                contactPersonId, revision, isZeroValue ,isAlreadyPublished)                                                 \n" +
                "			SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,                                            \n" +
                "					poNumber,poDate,soNumber,soDate,packingSlipNumber,                                            \n" +
                "					packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,                                       \n" +
                "					packingSlipComment,headerComment,sorevision,                                            \n" +
                "					freeOnBoardId,puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,                                           \n" +
                "					puserRoleID,'W' , pSystemId, termsID ,salesCommissionTo,                                          \n" +
                "					billingAddress, shippingAddress, intermediateAddress,subStatus , 'PE' ,                                      \n" +
                "					ifnull(totalAmount,0),vTermsDays ,   fun_getFOBById(freeOnBoardId) ,creditMemoNumber,creditMemoDate ,                          \n" +
                "                    refDebitMemoNumber,refDebitMemoDate , rmaNumber  , billToId,shipToId ,intermediateShipmentId ,      \n" +
                "                    contactPersonId,  lpad(ifnull(revision,0),2,'0'), ifnull(isZeroValue,0), isAlreadyPublished                    \n" +
                "			FROM temp_customerInvoice ;			                                      \n" +
                "  \n" +
                "		 SET pInvoiceID=LAST_INSERT_ID();                                              \n" +
                "  \n" +
                "		 UPDATE customer_packingslip                                             \n" +
                "		 SET refCustInvoiceID=LAST_INSERT_ID(),packingSlipStatus='A'                                             \n" +
                "		 WHERE id= pPackingSlipID;                                                \n" +
                "  \n" +
                "         IF pPackingSlipID IS NOT NULL THEN     \n" +
                "			-- FOR PO/SO flow quote related data not store in packing slip. retrieve it from sales order    \n" +
                "			 INSERT INTO customer_packingslip_det(refCustPackingSlipID,refSalesorderDetid,partId,custPOLineID,                                            \n" +
                "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  extendedPrice,                                          \n" +
                "					shippingNotes,whID,binID,createdBy,updatedBy,createdAt, updatedAt,                                            \n" +
                "					createByRoleId,updateByRoleId,shippingId,reflineID,otherCharges,                                            \n" +
                "					assyDescription,lineID, internalComment, quoteNumber,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,      \n" +
                "                    refRFQGroupID,refRFQQtyTurnTimeID, isZeroValue)                                                \n" +
                "			  SELECT LAST_INSERT_ID(),cpd.refSalesorderDetid,cpd.partId,cpd.custPOLineID,                                            \n" +
                "					cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,  \n" +
                "                    IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice),    \n" +
                "                    (cpd.shipQty * (IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice))),                                         \n" +
                "					cpd.shippingNotes,cpd.whID,cpd.binID,  \n" +
                "                    puserID,puserID,  fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),                                          \n" +
                "					puserRoleID,puserRoleID,  \n" +
                "                    cpd.shippingId,cpd.reflineID,cpd.otherCharges,                                            \n" +
                "					cpd.assyDescription, cpd.lineID, cpd.internalComment ,  \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.quoteNumber,cpd.quoteNumber),  \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.quoteFrom,cpd.quoteFrom),  \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID,cpd.refAssyQtyTurnTimeID),  \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText),      \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.refRFQGroupID,cpd.refRFQGroupID),  \n" +
                "                    IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) ,   \n" +
                "                    cpd.isZeroValue                                          \n" +
                "			FROM customer_packingslip_det   cpd          \n" +
                "            LEFT JOIN customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and cp.isDeleted = 0  \n" +
                "            LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "			WHERE cpd.refCustPackingSlipID= pPackingSlipID                                             \n" +
                "			AND cpd.isDeleted = 0;              \n" +
                "  \n" +
                "            IF pPackingSlipType = 2 THEn -- PO/SO INV        \n" +
                "				INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,	unitPrice, refQuoteAttributeId,            \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,            \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,            \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)            \n" +
                "				select cpd.id refCustPackingSlipDetID,	sca.unitPrice, sca.refQuoteAttributeId,            \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,            \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,            \n" +
                "							sca.org_unitPrice, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID             \n" +
                "					From salesorderdet_commission_attribute sca            \n" +
                "					join customer_packingslip_det cpd on cpd.refSalesorderDetid=sca.refSalesorderDetid and cpd.isDeleted = 0              \n" +
                "					and cpd.refCustPackingSlipID =  pInvoiceID;              \n" +
                "  \n" +
                "             ELSEIF pPackingSlipType = 1 THEN -- MISC packing slip INV   \n" +
                "					-- SP to generate line wise sales commission.        \n" +
                "                    CALL Sproc_GetSalesCommissionDetailsForMultiplePart(pInvoiceID);        \n" +
                "  \n" +
                "                    INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,	unitPrice, refQuoteAttributeId,            \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,            \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,            \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)            \n" +
                "					select sca.refCustPackingSlipDetID,	sca.unitPrice, sca.refQuoteAttributeId,            \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,            \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,            \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID             \n" +
                "					From temp_salesCommission sca         \n" +
                "					join customer_packingslip_det cpd on cpd.id = sca.refCustPackingSlipDetID and cpd.isDeleted = 0              \n" +
                "					and cpd.refCustPackingSlipID =  pInvoiceID;        \n" +
                "             END IF;               \n" +
                "		END IF;                                      \n" +
                "		/*update maxvalue + 1 as 'CustomerInvoiceSystemID' for invoice systemID */                                             \n" +
                "		UPDATE `identity`                                            \n" +
                "		SET `maxValue` =  CAST(substring_index(pSystemId,IF(pTransType='I','CINV','CCM'),-1) as UNSIGNED) + 1                                            \n" +
                "		WHERE `type` = pCustomerInvoiceSystemIDTypeConst ;            \n" +
                "  \n" +
                "	  ELSE                                            \n" +
                "  \n" +
                "		IF pInvoiceType = 'I' AND pTransType = 'I' THEN                                      \n" +
                "			UPDATE customer_packingslip cp                                      \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                                      \n" +
                "            SET cp.invoiceDate= tci.invoiceDate,                                      \n" +
                "				cp.`status`= tci.status,  			                                            \n" +
                "				cp.subStatus = tci.subStatus,                                      \n" +
                "                cp.headerComment= tci.headerComment,                                      \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                                      \n" +
                "				cp.totalAmount = ifnull(tci.totalAmount,0) ,                            \n" +
                "                cp.updatedAt = fun_DatetimetoUTCDateTime(),                            \n" +
                "                cp.updatedBy = puserID,                            \n" +
                "                cp.updateByRoleId = puserRoleID  ,                  \n" +
                "                cp.billingAddress= tci.billingAddress,                                      \n" +
                "				cp.shippingAddress= tci.shippingAddress,                                      \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,                  \n" +
                "                cp.contactPersonId = tci.contactPersonId,                  \n" +
                "                cp.billToId = tci.billToId,                        \n" +
                "                cp.shipToId  = tci.shipToId,                        \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId,      \n" +
                "                cp.revision = lpad(tci.revision,2,'0'),      \n" +
                "                cp.isZeroValue = ifnull(tci.isZeroValue,0)  ,    \n" +
                "                cp.isAlreadyPublished = ifnull(tci.isAlreadyPublished,0)      \n" +
                "			WHERE cp.id=pInvoiceID    \n" +
                "            and cp.transType = pTransType;                                         \n" +
                "        ELSE                                        \n" +
                "        # in case of tariff invoice & credit memo update all other field                                      \n" +
                "			UPDATE customer_packingslip  cp                                        \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id                                      \n" +
                "			SET	cp.status= tci.status,                                      \n" +
                "				cp.subStatus= tci.subStatus,                                      \n" +
                "				cp.poNumber= tci.poNumber,                                      \n" +
                "				cp.poDate= tci.poDate,                                      \n" +
                "				cp.soNumber= tci.soNumber,                                      \n" +
                "				cp.soDate= tci.soDate,                                      \n" +
                "				cp.packingSlipNumber= tci.packingSlipNumber,                                      \n" +
                "				cp.packingSlipDate= tci.packingSlipDate,                                      \n" +
                "				cp.invoiceDate= tci.invoiceDate,                                      \n" +
                "				cp.shippingMethodID= tci.shippingMethodID,                                      \n" +
                "				cp.headerComment= tci.headerComment,                                      \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,                                      \n" +
                "				cp.billingAddress= tci.billingAddress,                                      \n" +
                "				cp.shippingAddress= tci.shippingAddress,                                      \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,                                      \n" +
                "				cp.totalAmount= ifnull(tci.totalAmount,0),                                      \n" +
                "				cp.freeOnBoardId= tci.freeOnBoardId,                                      \n" +
                "				cp.termsId= tci.termsId,       \n" +
                "                cp.termsDays = vTermsDays,      \n" +
                "				cp.salesCommissionTo= tci.salesCommissionTo ,                                  \n" +
                "                cp.refDebitMemoNumber = tci.refDebitMemoNumber,                                  \n" +
                "                cp.refDebitMemoDate = tci.refDebitMemoDate,                            \n" +
                "                cp.updatedAt = fun_DatetimetoUTCDateTime(),                            \n" +
                "                cp.updatedBy = puserID,                            \n" +
                "                cp.updateByRoleId = puserRoleID,                          \n" +
                "                cp.rmaNumber= tci.rmaNumber,                        \n" +
                "                cp.billToId = tci.billToId,                        \n" +
                "                cp.shipToId  = tci.shipToId,                        \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId ,                      \n" +
                "                cp.invoiceNumber = tci.invoiceNumber ,                  \n" +
                "                cp.contactPersonId = tci.contactPersonId,      \n" +
                "                cp.revision =  lpad(tci.revision,2,'0'),      \n" +
                "                cp.isZeroValue = ifnull(tci.isZeroValue,0),    \n" +
                "                cp.isAlreadyPublished = ifnull(tci.isAlreadyPublished,0)      \n" +
                "			 WHERE cp.id = pInvoiceID    \n" +
                "             and cp.transType = pTransType;                                         \n" +
                "  \n" +
                "            END IF;                                      \n" +
                "  \n" +
                "  \n" +
                "	  END IF;                                               \n" +
                "  \n" +
                "	  SELECT pInvoiceID invoiceID;                                                \n" +
                "       -- detail Id                                        \n" +
                "      SELECT id  detId ,refSalesorderDetId , reflineID                                        \n" +
                "      FROM customer_packingslip_det                                         \n" +
                "      WHERE  refCustPackingSlipID = pInvoiceID                                         \n" +
                "      AND isDeleted = 0;                                        \n" +
                "	  DROP TEMPORARY TABLE IF EXISTS temp_part_data ;        \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  04-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4578,'2.00','V1','Sproc_SaveCustomerInvoiceDetail - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4578:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-05-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_SaveShippedAssemblyDetFromPackingSlip;  \n" +
                "CREATE PROCEDURE `Sproc_SaveShippedAssemblyDetFromPackingSlip`(        \n" +
                "	IN pShipAssyList JSON,        \n" +
                "	IN pIsConfirmationTakenForDeallocateUMID INT,        \n" +
                "	IN pPartID INT,        \n" +
                "	IN pRefCustPackingSlipDetID INT,        \n" +
                "	IN pCustomerID INT,        \n" +
                "	IN pShippedNotes TEXT,        \n" +
                "	IN pShippingId INT,        \n" +
                "	IN pToBinIDOfEmptyBin INT,        \n" +
                "	IN pTransTypeForUMID VARCHAR(100),        \n" +
                "	IN pActionPerformedForUMIDZeroOut VARCHAR(100),        \n" +
                "	IN pActionPerformedForUMIDConsumed VARCHAR(100),        \n" +
                "	IN pActionPerformedForUMIDAdjust VARCHAR(100),        \n" +
                "	IN pUserID VARCHAR(50),                  \n" +
                "	IN pUserRoleID VARCHAR(50) ,      \n" +
                "    IN pIsComponentStock TINYINT      \n" +
                "    )  \n" +
                "BEGIN        \n" +
                "  \n" +
                "	DECLARE i INT DEFAULT 0;                                      \n" +
                "	DECLARE totUIShipAssy INT DEFAULT 0;          \n" +
                "	DECLARE lv_sa_woNumber VARCHAR(20);        \n" +
                "	DECLARE lv_sa_refsidid INT;        \n" +
                "	DECLARE lv_sa_pkid INT;        \n" +
                "	DECLARE lv_sa_umid VARCHAR(20);        \n" +
                "	DECLARE lv_sa_shippedqty INT;        \n" +
                "	DECLARE lv_db_sa_shippedqty INT;        \n" +
                "	DECLARE lv_cpsd_refSalesorderDetid INT;        \n" +
                "	DECLARE lv_uomIDOfAssy INT;        \n" +
                "	DECLARE vPackagingAliasPart VARCHAR(1000);    \n" +
                "    DECLARE vCplAvlPart VARCHAR(1000);    \n" +
                "  \n" +
                "	# Get AVL part list of CPN part    \n" +
                "    select group_concat(refComponentID) into vCplAvlPart    \n" +
                "	from  component_cust_alias_rev_pn     \n" +
                "    where refCPNPartID = pPartID    \n" +
                "    and isDeleted = 0;    \n" +
                "	#Get Packaging Alias part list    \n" +
                "	select group_concat(a.componentID) into vPackagingAliasPart    \n" +
                "	from component_packagingalias   a    \n" +
                "	where a.aliasgroupID in     \n" +
                "	(select b.aliasgroupID from component_packagingalias b where b.componentID = pPartId)    \n" +
                "	and a.componentID <> pPartID    \n" +
                "	and a.isDeleted = 0;    \n" +
                "  \n" +
                "	/* get/map all ship assembly list passed from UI */        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UIShipAssyList;                                        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UIShipAssyList AS                                                  \n" +
                "	SELECT 	*                                                   \n" +
                "	FROM 	JSON_TABLE(           \n" +
                "		pShipAssyList,                                                  \n" +
                "			\"$[*]\" COLUMNS(    				                                           \n" +
                "				`shippedqty` INT PATH \"$.shippedqty\",                                                  \n" +
                "				`woOPID` INT PATH \"$.woOPID\" ,                                                  \n" +
                "				`workorderID` INT PATH \"$.workorderID\",      \n" +
                "				`partID` INT PATH \"$.partID\",                                                  \n" +
                "				`woNumber` VARCHAR(20) PATH \"$.woNumber\",                                                  \n" +
                "				`stockType` VARCHAR(10) PATH \"$.stockType\",                                    \n" +
                "				`refsidid` INT PATH \"$.refsidid\" ,        \n" +
                "				`originalQty` INT PATH \"$.originalQty\" ,        \n" +
                "				`UMID` VARCHAR(20) PATH \"$.UMID\"  ,      \n" +
                "                `shippedUom` INT PATH \"$.shippedUom\"      \n" +
                "			)        \n" +
                "		) AS ShipAssy_JT;        \n" +
                "  \n" +
                "	SELECT uom INTO lv_uomIDOfAssy        \n" +
                "		FROM component        \n" +
                "		WHERE id = pPartID ;        \n" +
                "  \n" +
                "	/* get all ship assembly/stock list available in data base */	        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DBAvailableAssyStockList;      \n" +
                "    IF(pIsComponentStock IS NOT NULL AND pIsComponentStock = TRUE) THEN      \n" +
                "    CREATE TEMPORARY TABLE IF NOT EXISTS temp_DBAvailableAssyStockList AS        \n" +
                "			SELECT 0 opStock,                        \n" +
                "			null woID,                                \n" +
                "			null woNumber,                        \n" +
                "			null assyID,            \n" +
                "			css.pkgQty availableQty,              			      \n" +
                "			css.pkgQty actualAvalilableQty,           \n" +
                "			css.refcompid partID,                                                \n" +
                "			null stockType,          \n" +
                "			null stockTypeName,                   \n" +
                "			css.orgQty buildQty,                  \n" +
                "			css.uid UMID,                  \n" +
                "			css.id refsidid                       \n" +
                "			FROM  component_sid_stock  css                     				      \n" +
                "			WHERE ( css.refcompid = pPartID or find_in_set(css.refcompid,vPackagingAliasPart ) or find_in_set(css.refcompid,vCplAvlPart) )  \n" +
                "            and css.isDeleted = 0;      \n" +
                "    ELSE       \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DBAvailableAssyStockList AS        \n" +
                "			SELECT vucp.opStock,                        \n" +
                "			vucp.woID,                                \n" +
                "			vucp.woNumber,                        \n" +
                "			vucp.assyID,            \n" +
                "			vucp.availableQty,                    \n" +
                "			#get available qty - shipped qty only, no need to deduct package qty of work order again                 \n" +
                "			-- (`vucp`.`availableQtyWithUMIDStock`-`vucp`.`totalUMIDCountAfterShipped`) AS `availableQty`,                                  \n" +
                "			-- (`vucp`.`availableQtyWithUMIDStock`-`vucp`.`totalUMIDCountAfterShipped`) AS `actualAvalilableQty` ,          \n" +
                "			vucp.actualAvalilableQty,           \n" +
                "			vucp.partID,                        \n" +
                "			-- vucp.selectedQty,                                          \n" +
                "			vucp.stockType,          \n" +
                "			vucp.stockTypeName,                   \n" +
                "					w.buildQty,                  \n" +
                "					NULL AS UMID,                  \n" +
                "			NULL AS refsidid                       \n" +
                "					FROM  vu_customer_packing_slip_qty  vucp                           \n" +
                "				LEFT JOIN workorder w ON w.woID=vucp.woID AND w.isDeleted = 0                         \n" +
                "				LEFT JOIN workorder_salesorder_details wsd ON wsd.woId=w.woID AND wsd.isDeleted = 0                  \n" +
                "				LEFT JOIN salesorderdet sd ON sd.id=wsd.salesOrderDetailId AND sd.partCategory=3 AND sd.isDeleted = 0						        \n" +
                "				-- LEFT JOIN salesordermst sm ON sm.id=sd.refSalesOrderID                          \n" +
                "			WHERE vucp.partID=pPartID                        \n" +
                "			GROUP BY vucp.opStock,                        \n" +
                "			vucp.woID,                        \n" +
                "			vucp.lastWOOPID,                        \n" +
                "			vucp.woNumber,                        \n" +
                "			vucp.assyID,                        \n" +
                "			vucp.availableQty,                        \n" +
                "			vucp.actualAvalilableQty,                        \n" +
                "			vucp.partID,                        \n" +
                "			vucp.rohsIcon,                        \n" +
                "			vucp.rohsName,                        \n" +
                "			vucp.mfgPN,                        \n" +
                "			vucp.selectedQty,                        \n" +
                "			vucp.warehouseName,                        \n" +
                "			vucp.binName,                        \n" +
                "			vucp.binID,                        \n" +
                "			vucp.totalUMIDCount,                        \n" +
                "			vucp.departmentName,                     \n" +
                "			vucp.stockType,                    \n" +
                "			vucp.stockTypeName,                       \n" +
                "			w.buildQty,w.dateCode                  \n" +
                "  \n" +
                "			UNION ALL                  \n" +
                "  \n" +
                "			SELECT SUM(css.orgQty) AS opStock,                        \n" +
                "				css.woID,                                   \n" +
                "				css.woNumber,                      \n" +
                "				 `fun_getAssyPIDCodeByID`(`css`.`refcompid`)  AS `assyID`,                \n" +
                "				SUM(`css`.`pkgQty`)  AS `availableQty` ,                            \n" +
                "				SUM(`css`.`pkgQty`) AS actualAvalilableQty,                        \n" +
                "				css.refcompid partID,                 \n" +
                "				-- 0 AS selectedQty,                        \n" +
                "				'US' AS stockType,         \n" +
                "				'UMID Stock' AS stockTypeName,                              \n" +
                "				wo.buildQty,                  \n" +
                "				css.uid AS UMID,                  \n" +
                "				css.id AS refsidid                  \n" +
                "			FROM component_sid_stock css                  \n" +
                "				LEFT JOIN workorder wo ON wo.woID=css.woID                          \n" +
                "				LEFT JOIN vu_workorder_salesorder_details vu_wsd ON vu_wsd.woID=css.woID                   \n" +
                "			WHERE  css.refcompid = pPartID   \n" +
                "			AND css.stockInventoryType = 'AI'                  \n" +
                "			AND IFNULL(css.pkgQty,0) > 0                  \n" +
                "			AND css.isDeleted = 0                  \n" +
                "			GROUP BY `css`.`woID` ,`css`.`woNumber` , `css`.`refcompid`, `css`.`binID`,                  \n" +
                "					vu_wsd.salesOrderNumber, vu_wsd.poNumber, wo.buildQty,                  \n" +
                "					css.uid, css.id, wo.dateCode                  \n" +
                "			;        \n" +
                "	END IF;      \n" +
                "  \n" +
                "	/* get all added shipped asembly details for ref customer packing slip det */        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_ShipAssyList_Of_RefCustPSDet;                                        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_ShipAssyList_Of_RefCustPSDet AS        \n" +
                "	SELECT 	id, partID, workorderID, shippedqty, customerID,         \n" +
                "			refCustPackingSlipDetID, woNumber, stockType, refsidid        \n" +
                "	FROM 	shippedassembly        \n" +
                "	WHERE 	refCustPackingSlipDetID = pRefCustPackingSlipDetID        \n" +
                "	AND 	isDeleted = 0 ;	        \n" +
                "  \n" +
                "  \n" +
                "	/* get all not available qty count (ship specific from UI but total not available in db)  */	        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UINotAvailableQtyShipList;                                        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UINotAvailableQtyShipList AS        \n" +
                "	SELECT  tsal.shippedqty,         \n" +
                "		tdaasl.availableQty,tdaasl.buildQty, tdaasl.woNumber, tdaasl.UMID ,        \n" +
                "		tdaasl.refsidid, tdaasl.woID, tdaasl.stockTypeName, tdaasl.opStock	        \n" +
                "	FROM temp_UIShipAssyList tsal        \n" +
                "		JOIN temp_DBAvailableAssyStockList tdaasl         \n" +
                "			ON (tsal.woNumber = tdaasl.woNumber AND tsal.refsidid <=> tdaasl.refsidid)        \n" +
                "		LEFT JOIN temp_DB_ShipAssyList_Of_RefCustPSDet tdsarcps	        \n" +
                "			ON (tsal.woNumber = tdsarcps.woNumber AND tsal.refsidid <=> tdsarcps.refsidid)        \n" +
                "	WHERE (tdaasl.availableQty - (IFNULL(tsal.shippedqty,0) - IFNULL(tdsarcps.shippedqty,0))) < 0  ;        \n" +
                "  \n" +
                "  \n" +
                "	/* if all ship qty from UI is available (available in db to ship)  */        \n" +
                "	IF ((SELECT COUNT(1) FROM temp_UINotAvailableQtyShipList) = 0) THEN        \n" +
                "  #select pIsConfirmationTakenForDeallocateUMID;      \n" +
                "		/***************** UMID: kit deallocation confirmation *******************/        \n" +
                "		IF(pIsConfirmationTakenForDeallocateUMID = 0) THEN        \n" +
                "			IF(pIsComponentStock IS NOT NULL AND pIsComponentStock = TRUE) THEN      \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UMID_Confirmation_Require_ShipAssyList;                                        \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UMID_Confirmation_Require_ShipAssyList AS        \n" +
                "					SELECT tusal.shippedqty,         \n" +
                "						tdaasl.availableQty,tdaasl.buildQty, tdaasl.woNumber, tdaasl.UMID ,        \n" +
                "						tdaasl.refsidid, tdaasl.woID, tdaasl.stockTypeName, tdaasl.opStock        \n" +
                "					FROM temp_UIShipAssyList tusal         \n" +
                "						JOIN temp_DBAvailableAssyStockList tdaasl  ON tusal.refsidid <=> tdaasl.refsidid      \n" +
                "					WHERE tusal.refsidid IS NOT NULL         \n" +
                "					AND tusal.UMID IS NOT NULL         \n" +
                "                    AND tusal.shippedqty > 0      \n" +
                "					AND tusal.shippedqty > (        \n" +
                "							(SELECT SUM(pkgQty) FROM component_sid_stock                \n" +
                "								WHERE uid = tusal.UMID AND isDeleted = 0) /* tot_stock_umid */        \n" +
                "							   -         \n" +
                "							   (SELECT SUM((allocatedQty - IFNULL(consumeQty,0) - IFNULL(returnQty,0)))         \n" +
                "								FROM kit_allocation WHERE uid = tusal.UMID AND STATUS IN ('A','R')                \n" +
                "								GROUP BY uid) /* allocated_stock_umid */        \n" +
                "							   )  ;       \n" +
                "			ELSE      \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UMID_Confirmation_Require_ShipAssyList;                                        \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UMID_Confirmation_Require_ShipAssyList AS        \n" +
                "					SELECT tusal.shippedqty,         \n" +
                "						tdaasl.availableQty,tdaasl.buildQty, tdaasl.woNumber, tdaasl.UMID ,        \n" +
                "						tdaasl.refsidid, tdaasl.woID, tdaasl.stockTypeName, tdaasl.opStock        \n" +
                "					FROM temp_UIShipAssyList tusal         \n" +
                "						JOIN temp_DBAvailableAssyStockList tdaasl         \n" +
                "							ON (tusal.woNumber = tdaasl.woNumber AND tusal.refsidid <=> tdaasl.refsidid)        \n" +
                "					WHERE tusal.refsidid IS NOT NULL         \n" +
                "					AND tusal.UMID IS NOT NULL         \n" +
                "					AND tusal.shippedqty > (        \n" +
                "							(SELECT SUM(pkgQty) FROM component_sid_stock                \n" +
                "								WHERE uid = tusal.UMID AND isDeleted = 0) /* tot_stock_umid */        \n" +
                "							   -         \n" +
                "							   (SELECT SUM((allocatedQty - IFNULL(consumeQty,0) - IFNULL(returnQty,0)))         \n" +
                "								FROM kit_allocation WHERE uid = tusal.UMID AND STATUS IN ('A','R')                \n" +
                "								GROUP BY uid) /* allocated_stock_umid */        \n" +
                "							   )  ;       \n" +
                "            END IF;      \n" +
                "		ELSE         \n" +
                "			/* set up default temp table if not created */        \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UMID_Confirmation_Require_ShipAssyList AS        \n" +
                "				SELECT 1 FROM temp_UINotAvailableQtyShipList WHERE 1=0 ;        \n" +
                "		END IF;	        \n" +
                "  \n" +
                "		/* if confirmation already taken or no any confirmation list then go for create/update */ 	         \n" +
                "		IF(pIsConfirmationTakenForDeallocateUMID = 1 OR        \n" +
                "			(SELECT COUNT(1) FROM temp_UMID_Confirmation_Require_ShipAssyList) = 0) THEN        \n" +
                "  \n" +
                "			/*****************  create/update shipped assebly table     *******************/        \n" +
                "  \n" +
                "			/* get all UMID details for ref customer packing slip det */        \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_db_comp_sid_stock_list;                                        \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_db_comp_sid_stock_list AS                                                                  \n" +
                "			SELECT 	csd.id,			csd.uid,		csd.refcompid,                        \n" +
                "				csd.binID,		b.warehouseID,		w.parentWHID deptWHID,	                        \n" +
                "				csd.orgQty,		csd.orgPkgUnit,		csd.pkgQty,		                        \n" +
                "				csd.pkgUnit,		csd.uom,		csd.createdAt                                                            \n" +
                "			FROM 	component_sid_stock   csd                        \n" +
                "				JOIN 	binmst b ON csd.binID = b.id                        \n" +
                "				JOIN 	warehousemst w ON b.warehouseID = w.id                        \n" +
                "			WHERE   csd.id IN (SELECT refsidid FROM temp_UIShipAssyList WHERE refsidid IS NOT NULL AND UMID IS NOT NULL)                         \n" +
                "			AND 	csd.isdeleted = 0 ;        \n" +
                "  \n" +
                "			/* get required customer_packingslip_details */        \n" +
                "			SELECT refSalesorderDetid INTO lv_cpsd_refSalesorderDetid        \n" +
                "			FROM customer_packingslip_det        \n" +
                "			WHERE id = pRefCustPackingSlipDetID AND isDeleted = 0 ;        \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO totUIShipAssy FROM temp_UIShipAssyList ;        \n" +
                "			SET i=0;                                    \n" +
                "  #select totUIShipAssy;      \n" +
                "  \n" +
                "			temp_UIShipAssyListLoop: WHILE i < totUIShipAssy DO        \n" +
                "  \n" +
                "				SET lv_sa_woNumber = NULL;        \n" +
                "				SET lv_sa_refsidid = NULL;        \n" +
                "				SET lv_sa_umid = NULL;        \n" +
                "				SET lv_sa_shippedqty = 0;        \n" +
                "  \n" +
                "				SELECT woNumber, refsidid, umid, shippedqty         \n" +
                "					INTO lv_sa_woNumber , lv_sa_refsidid , lv_sa_umid , lv_sa_shippedqty        \n" +
                "				FROM temp_UIShipAssyList LIMIT i,1 ;        \n" +
                "  \n" +
                "  #select 'Line 261';      \n" +
                "				SET lv_sa_pkid = NULL;        \n" +
                "				SET lv_db_sa_shippedqty = NULL;        \n" +
                "  \n" +
                "				/* get id from db data if exists in shipped assembly table */        \n" +
                "                /* in case of component stock  there will be no stock */      \n" +
                "				SELECT id,shippedqty INTO lv_sa_pkid , lv_db_sa_shippedqty        \n" +
                "				FROM (        \n" +
                "					SELECT id , shippedqty          \n" +
                "					FROM temp_DB_ShipAssyList_Of_RefCustPSDet        \n" +
                "					WHERE (partID = pPartID or find_in_set(partID,vPackagingAliasPart ) or find_in_set(partID,vCplAvlPart) )  \n" +
                "					AND case when pIsComponentStock = 1 then 1=1 else woNumber = lv_sa_woNumber  end      \n" +
                "					AND refCustPackingSlipDetID = pRefCustPackingSlipDetID        \n" +
                "					AND (CASE WHEN lv_sa_refsidid IS NULL THEN refsidid IS NULL        \n" +
                "						ELSE refsidid = lv_sa_refsidid END)        \n" +
                "					UNION        \n" +
                "					SELECT NULL AS id , 0 AS shippedqty        \n" +
                "					LIMIT 1        \n" +
                "				) tdbsa ;        \n" +
                "				/* shipped qty from UI =  db value then no change so no need to process */        \n" +
                "				IF(IFNULL(lv_sa_shippedqty,0) = IFNULL(lv_db_sa_shippedqty,0)) THEN        \n" +
                "					SET i = i + 1;        \n" +
                "					ITERATE temp_UIShipAssyListLoop;        \n" +
                "				END IF;        \n" +
                "  \n" +
                "  #select  'line 286',lv_sa_shippedqty, lv_db_sa_shippedqty,lv_uomIDOfAssy;      \n" +
                "				IF(lv_sa_umid IS NOT NULL) THEN          \n" +
                "				/* if change stock from UMID then check consume/adjustment UMID case */        \n" +
                "					CALL Sproc_CheckKitAndDeallocateUMIDForShipAssyFromPS(lv_sa_umid, lv_sa_refsidid,        \n" +
                "						lv_sa_shippedqty, lv_db_sa_shippedqty, pToBinIDOfEmptyBin, pTransTypeForUMID,        \n" +
                "						pActionPerformedForUMIDZeroOut, pActionPerformedForUMIDConsumed, pActionPerformedForUMIDAdjust,         \n" +
                "						lv_cpsd_refSalesorderDetid, pPartID,lv_uomIDOfAssy, pUserID, pUserRoleID);                             \n" +
                "				END IF;         \n" +
                "  #select lv_sa_pkid;      \n" +
                "				IF(lv_sa_pkid IS NULL OR lv_sa_pkid = '') THEN        \n" +
                "					/* create new entry of shippedassembly */        \n" +
                "					INSERT INTO shippedassembly(`partID`,`workorderID`,`shippingId`,`shippedqty`,        \n" +
                "						`customerID`,`woOPID`,`shippedNotes`,`refCustPackingSlipDetID`,        \n" +
                "						`woNumber`,`stockType`,`refsidid`,`originalQty`,        \n" +
                "						`createdBy`,`updatedBy`,`createByRoleId`,`updateByRoleId`,`shippedUom`)        \n" +
                "					SELECT partID, workorderID, pShippingId, shippedqty,         \n" +
                "						pCustomerID, woOPID, pShippedNotes, pRefCustPackingSlipDetID,        \n" +
                "						woNumber, stockType, refsidid, originalQty,        \n" +
                "						pUserID, pUserID, pUserRoleID, pUserRoleID,shippedUOM        \n" +
                "					FROM temp_UIShipAssyList         \n" +
                "					LIMIT i,1 ; 	        \n" +
                "  \n" +
                "  \n" +
                "				ELSE        \n" +
                "					/* update exists entry of shippedassembly */        \n" +
                "					UPDATE shippedassembly salo        \n" +
                "						JOIN (SELECT lv_sa_pkid AS id, shippedqty         \n" +
                "								FROM temp_UIShipAssyList LIMIT i,1) tsali        \n" +
                "						ON salo.id = tsali.id        \n" +
                "					SET salo.shippedqty = tsali.shippedqty,         \n" +
                "						salo.shippingId = pShippingId,         \n" +
                "						salo.updatedBy = pUserID,         \n" +
                "						salo.updateByRoleId = pUserRoleID ,        \n" +
                "						salo.updatedAt = fun_DatetimetoUTCDateTime()          \n" +
                "					WHERE salo.id = lv_sa_pkid ;         \n" +
                "  \n" +
                "  \n" +
                "				END IF;        \n" +
                "  \n" +
                "  \n" +
                "				SET i = i + 1;                                      \n" +
                "			END WHILE temp_UIShipAssyListLoop;        \n" +
                "		END IF;         \n" +
                "  \n" +
                "	END IF;	        \n" +
                "  \n" +
                "  \n" +
                "	/* set up default temp table if not created */        \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UMID_Confirmation_Require_ShipAssyList AS        \n" +
                "		SELECT 1 FROM temp_UINotAvailableQtyShipList WHERE 1=0 ;        \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */        \n" +
                "	IF((SELECT COUNT(1) FROM temp_UINotAvailableQtyShipList) > 0 OR        \n" +
                "		(SELECT COUNT(1) FROM temp_UMID_Confirmation_Require_ShipAssyList) > 0) THEN        \n" +
                "		SELECT 0 AS 'spStatus' ;        \n" +
                "	ELSE        \n" +
                "		SELECT 1 AS 'spStatus' ;        \n" +
                "	END IF;        \n" +
                "  \n" +
                "	/* Resp[1] - get all ship list > not available qty(mismatch qty)  */        \n" +
                "	SELECT * FROM temp_UINotAvailableQtyShipList ;        \n" +
                "  \n" +
                "	/* Resp[2] - get all ship list > confirmation required for deallocate kit  */        \n" +
                "	SELECT * FROM temp_UMID_Confirmation_Require_ShipAssyList ;		        \n" +
                "  \n" +
                "	/*        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UIShipAssyList;        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DBAvailableAssyStockList;            \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UINotAvailableQtyShipList;          \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_ShipAssyList_Of_RefCustPSDet;         \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UMID_Confirmation_Require_ShipAssyList ;        \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_db_comp_sid_stock_list ;        \n" +
                "  	*/        \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->  04-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4579,'2.00','V1','Sproc_SaveShippedAssemblyDetFromPackingSlip - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4579:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-05-2021  *********************************** */
                "drop trigger if exists Trg_AI_customer_packingslip_det;  \n" +
                "CREATE TRIGGER `Trg_AI_customer_packingslip_det` AFTER INSERT ON `customer_packingslip_det` FOR EACH ROW BEGIN            \n" +
                "	DECLARE vTransType VARCHAR(5);  \n" +
                "	SELECT transType INTO vTransType           \n" +
                "	FROM customer_packingslip           \n" +
                "	WHERE isDeleted = 0 AND id = NEW.refCustPackingSlipID;  \n" +
                "  \n" +
                "  IF(new.refsalesorderdetid IS NOT NULL and vTransType='P')THEN    \n" +
                "    IF(SELECT SUM(cpd.shipQty)>=SUM(ss.qty) FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID  JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0    \n" +
                "           WHERE cpd.isdeleted=0 AND cpd.refsalesorderdetid=new.refsalesorderdetid AND cp.transType='P') THEN    \n" +
                "           UPDATE SalesOrderDet SET salesOrderDetStatus=2 WHERE id=New.refsalesorderdetid;    \n" +
                "           END IF;    \n" +
                "  END IF;                      \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->  04-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4580,'2.00','V1','Trg_AI_customer_packingslip_det - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4580:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-05-2021 *********************************** */
                "DROP function IF EXISTS `fun_getLatestPackingSlipDateByPOId`;  \n" +
                "CREATE FUNCTION `fun_getLatestPackingSlipDateByPOId`(      \n" +
                "	pPoid INT,      \n" +
                "    pIsId BOOLEAN      \n" +
                ") RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN      \n" +
                "	DECLARE vCreatedAt DATETIME;      \n" +
                "	DECLARE vResult VARCHAR(50);    \n" +
                "    DECLARE vMaterialReceiptID INT(11);  \n" +
                "	SELECT max(psm.receiptDate), psm.id INTO vResult, vMaterialReceiptID FROM packing_slip_material_receive psm   \n" +
                "    INNER JOIN packing_slip_material_receive_det psmr on psmr.refPackingSlipMaterialRecID=psm.id and psmr.isdeleted=0 and refPurchaseOrderDetID=pPoid;  \n" +
                "  \n" +
                "    IF pIsId=1 THEN      \n" +
                "    	SELECT id INTO vResult FROM packing_slip_material_receive WHERE id=vMaterialReceiptID AND isDeleted=0;      \n" +
                "	END IF;      \n" +
                "	RETURN vResult;      \n" +
                "END;  \n" +
                /* **************************** New Script -> 06-05-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_updatePurchaseOrderStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_updatePurchaseOrderStatus`(        \n" +
                "IN pPOID INT,        \n" +
                "IN pupdatedBy VARCHAR(100),        \n" +
                "IN pupdatedRoleID VARCHAR(100),        \n" +
                "IN pupdatedAt VARCHAR(100),        \n" +
                "IN pcompleteReason VARCHAR(1000),        \n" +
                "IN pcompleteType VARCHAR(20),        \n" +
                "IN pcancellationReason VARCHAR(1000),        \n" +
                "IN ptype VARCHAR(5),    \n" +
                "IN pCancellationConfirmed TINYINT    \n" +
                ")  \n" +
                "BEGIN        \n" +
                "  IF pcompleteReason IS NOT NULL THEN        \n" +
                "	UPDATE purchase_order_mst SET poWorkingStatus='C',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,poCompleteReason=pcompleteReason,poCompleteType=pcompleteType  WHERE id=pPOID;        \n" +
                "  \n" +
                "	UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='C',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID,poLineCompleteReason=IFNULL(poLineCompleteReason,pcompleteReason),poLineCompleteType=IFNULL(poLineCompleteType,pcompleteType) WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);        \n" +
                "  ELSEIF pcancellationReason IS NOT NULL THEN        \n" +
                "	IF ptype = 'C' THEN /* for cancellation po */        \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus='CA',CancellationConfirmed=pCancellationConfirmed,updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,updatedAt=pupdatedAt,cancleReason=pcancellationReason,poCompleteType=pcompleteType WHERE id=pPOID;        \n" +
                "  	ELSEIF ptype = 'R' THEN /* for revoke cancellation po */        \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus='P',CancellationConfirmed=0,updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,updatedAt=pupdatedAt,cancleReason=pcancellationReason,poCompleteType=pcompleteType WHERE id=pPOID;        \n" +
                "	END IF;        \n" +
                "  END IF;        \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->06-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4581,'2.00','V1','Bug 33241: Material Receipt: user able to change Received status for the part which having the part requirement [User Story 32566: Implement Cancel Purchase order Option] - Jay'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4581:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-05-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAssyCompListForCustomerPackingSlipMISC`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyCompListForCustomerPackingSlipMISC`(                                  \n" +
                "	IN pCustomerID INT,    \n" +
                "	IN pSearch VARCHAR(300),    \n" +
                "	IN pPartID INT  \n" +
                ")  \n" +
                "BEGIN    \n" +
                "	DECLARE v_respOfGetAcquiredMFRListFn INT;    \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Customers;    \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Customers (    \n" +
                "		customerID int    \n" +
                "    );     \n" +
                "    /* If Selected customer's isComapny true then make it null as in case of company we have to fetch all customer's assembly*/    \n" +
                "    IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany = 1) > 0 THEN                           \n" +
                "		SET pCustomerID = NULL;                              \n" +
                "	END IF;                           \n" +
                "  \n" +
                "    /* IF customer selected and is comapny is not true then we have select customer based on acquire, and supplier mapping*/    \n" +
                "    IF 	pCustomerID IS NOT NULL THEN    \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID) into v_respOfGetAcquiredMFRListFn;    \n" +
                "        Insert into temp_Customers    \n" +
                "		select buyTo as customerID    \n" +
                "		from acquireCustomers;    \n" +
                "        Insert into temp_Customers    \n" +
                "        select smm.refMfgCodeMstID as customerID    \n" +
                "		from supplier_mapping_mst smm    \n" +
                "		where smm.supplierID = pCustomerID    \n" +
                "        and smm.isDeleted = 0;     \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/* Select assembly, sales kit, custom part and cpn part of selected customer and all the off the self MFR parts*/    \n" +
                "	SELECT *   \n" +
                "    FROM (  \n" +
                "		SELECT 	co.id,            	co.mfgPN,				co.PIDCode,			co.mfgPNDescription AS description,    \n" +
                "				co.rev,				co.nickName,			co.partType,		u.unitName,				u.id unitID,    \n" +
                "				ro.rohsIcon,		ro.name AS rohsName,	CONCAT('(', mfg.mfgcode, ')', ' ', co.mfgPN) combinemfgPN,    \n" +
                "				co.mfgcodeID,		FUN_GETMFGCODEANDNAMEBYID(co.mfgcodeID) mfgName,					cst.standards,    \n" +
                "				mfg.mfgType,		co.category,            co.iscustom,		co.isCPN,    \n" +
                "				cst.componentStandardList,					co.rfqOnly    \n" +
                "		FROM 	component co    \n" +
                "		Inner JOIN mfgcodemst mfg ON co.mfgCodeID = mfg.id     \n" +
                "												AND mfg.isDeleted = 0     \n" +
                "												AND mfg.mfgType = 'MFG'    \n" +
                "												-- and mfg.id = (case when co.iscustom = 1 then ifnull(pCustomerID, mfg.id) else mfg.id end)    \n" +
                "												and (case when (co.iscustom = 1 and pCustomerID is not null)     \n" +
                "														then (exists (select 1 from temp_Customers ta where ta.customerID = mfg.id))    \n" +
                "														else 1 = 1    \n" +
                "													end)    \n" +
                "		Inner JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND ro.isDeleted = 0    \n" +
                "		Inner JOIN uoms u ON co.uom = u.id AND u.isDeleted = 0    \n" +
                "		left join (    \n" +
                "			SELECT 	csd.componentID,    \n" +
                "					GROUP_CONCAT(cs.fullName) componentStandardList,    \n" +
                "					GROUP_CONCAT(CASE WHEN csd.classID IS NULL    \n" +
                "											THEN cs.fullName    \n" +
                "										ELSE    \n" +
                "											(SELECT GROUP_CONCAT(cs.fullName, ' ', IFNULL(className, ''))    \n" +
                "											FROM standard_class s    \n" +
                "											WHERE s.classID = csd.classID and isDeleted = 0)    \n" +
                "								END            \n" +
                "								ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC            \n" +
                "								SEPARATOR ', ') standards    \n" +
                "			FROM component_standard_details csd    \n" +
                "			inner join certificate_standards cs on csd.certificateStandardID = cs.certificateStandardID and cs.isDeleted = 0    \n" +
                "			WHERE csd.isDeleted = 0    \n" +
                "			group by csd.componentID    \n" +
                "		) cst on co.id = cst.componentID    \n" +
                "		WHERE co.id > 0     \n" +
                "		and co.id = ifnull(pPartID, co.id)    \n" +
                "		AND co.isDeleted = 0    \n" +
                "		AND co.isGoodPart = 1    \n" +
                "		and co.partType != 4    \n" +
                "    ) as co  \n" +
                "    where (Case when pSearch is not null  \n" +
                "				then (co.PIDCode like concat('%',pSearch,'%') or co.combinemfgPN like concat('%',pSearch,'%'))  \n" +
                "				else 1 = 1  \n" +
                "		end);    \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4582,'2.00','V1','Corrected search criteria for MFR search in saleorder procedure - Dharmishtha '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4582:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 07-05-2021 *********************************** */
                "update rfq_lineitems_errorcode  \n" +
                "set description = replace(description, '<% Rev %>', '<% CPN Rev %>'),  \n" +
                "systemVariable = replace(systemVariable, '<% Rev %>', '<% CPN Rev %>')  \n" +
                "where description like '%<% Rev %>%';  \n" +
                /* **************************** Add Script Version -> 07-05-2021 *********************************** */
                "UPDATE `page_detail` SET `pageName` = 'Bill Of Material Reasons',  \n" +
                " `menuName` = 'Bill Of Material Approval Reasons',  \n" +
                " `displayMenuName` = 'Bill Of Material Approval Reasons' WHERE `pageName` = 'Bill Of Material Reason';  \n" +
                "  \n" +
                "  \n" +
                "UPDATE `rfq_lineitems_errorcode` SET `errorColor` = '#9afbbd' WHERE (`errorCode` = 'MAPPARTPROGRAMREFDES');  \n" +
                "UPDATE `rfq_lineitems_errorcode` SET `errorColor` = '#fc6668' WHERE (`errorCode` = 'MISMATCHFUNCTIONALCATEGOR');  \n" +
                "UPDATE `rfq_lineitems_errorcode` SET `errorColor` = '#fc6668' WHERE (`errorCode` = 'PROGRAMINGREQUIRED');  \n" +
                "UPDATE `rfq_lineitems_errorcode` SET `description` = 'Part detail has been modified. Please approve.' WHERE (`errorCode` = 'CA');  \n" +
                "UPDATE `rfq_lineitems_errorcode` SET `description` = 'Part require programming. Programming status should not be `Who Will Program`. Please select appropriate option from programming list.' WHERE (`errorCode` = 'PROGRAMINGREQUIRED');  \n" +
                /* **************************** Add Script Version -> 07-05-2021 *********************************** */
                /* **************************** Add Script Version -> 07-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4583,'2.00','V1','User Story 32636: Demo Improvement Points of User story #29967 & #30241 give by Jaybhai related changes - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4583:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 07-05-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQLineItemsByID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByID`(      \n" +
                "IN ppartID INT      \n" +
                ")  \n" +
                "BEGIN      \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempRfq_lineitems;      \n" +
                "CREATE TEMPORARY TABLE tempRfq_lineitems AS      \n" +
                "SELECT a.id, a.lineID, a.cust_lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,            \n" +
                "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT isCPN FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPN,            \n" +
                "(CASE WHEN b.unitName IS NULL THEN a.org_uomName ELSE b.unitName END) AS uomID,      \n" +
                "(CASE WHEN a.programingStatus = 1 THEN 'Pre-Assy'       \n" +
                "		WHEN a.programingStatus = 2 THEN 'Post-Assy'       \n" +
                "        WHEN a.programingStatus = 3 THEN 'Cust will program'       \n" +
                "        WHEN a.programingStatus = 4 THEN 'Pre-Programmed'       \n" +
                "        WHEN a.programingStatus = 5 THEN 'Who Will Program'       \n" +
                "        ELSE 'N/A' END) AS programingStatus,      \n" +
                "CASE WHEN a.substitutesAllow IS NULL THEN a.org_substitutesAllow ELSE CASE WHEN a.substitutesAllow = 3 THEN 'Yes with Customer Approval' WHEN a.substitutesAllow = 2 THEN 'No' ELSE '' END END AS substitutesAllow,      \n" +
                "CASE WHEN (SELECT COUNT(1) FROM kit_allocation WHERE refBOMLineID = a.id AND `status` = 'A') > 0 THEN 1 ELSE 0 END AS allocatedInKit,      \n" +
                "a.description, a.level, a.numOfPosition, a.numOfRows, a.customerRev,            \n" +
                "(CASE WHEN a.custPNID IS NOT NULL THEN (SELECT programingRequired FROM component WHERE id = a.custPNID) ELSE 0 END) AS isCustPNProgrammingRequire,      \n" +
                "a.customerDescription, a.customerPartDesc, part.partTypeName as partclassID, a.isInstall, a.isPurchase, a.isNotRequiredKitAllocation,      \n" +
                "a.isSupplierToBuy, a.leadQty, a.attritionRate, a.valueAddedCost, a.refRFQLineItemID, a.dnpQty, a.dnpDesig, a.qpaDesignatorStep,      \n" +
                "a.duplicateCPNStep, a.restrictCPNUseWithPermissionStep, a.restrictCPNUsePermanentlyStep, a.restrictCPNUseInBOMStep,      \n" +
                "a.requireMountingTypeStep, a.requireFunctionalTypeStep, a.dnpInvalidREFDESStep, a.requireMountingTypeError,      \n" +
                "a.requireFunctionalTypeError, a.qpaDesignatorColorPriority, a.mergeLines, a.lineMergeStep,      \n" +
                "(CASE WHEN a.isBuyDNPQty = 'Y' THEN 'YES'       \n" +
                "	WHEN a.isBuyDNPQty = 'C' THEN 'Customer Consigned'       \n" +
                "    WHEN a.isBuyDNPQty = 'P' THEN 'YES PRE-ASSY PROGRAM'       \n" +
                "    ELSE 'NO' END) AS isBuyDNPQty,        \n" +
                "a.isObsoleteLine,      \n" +
                "a.customerApprovalForQPAREFDESStep,      \n" +
                "a.customerApprovalForBuyStep,      \n" +
                "a.customerApprovalForPopulateStep,      \n" +
                "a.dnpQPARefDesStep,      \n" +
                "a.customerApprovalForDNPQPAREFDESStep,      \n" +
                "a.customerApprovalForDNPBuyStep,      \n" +
                "a.customerApprovalCPN,      \n" +
                "fun_getLatestCutomerComment(a.id, 2) qpaCustomerApprovalComment,      \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 2 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedQPA,        \n" +
                "fun_getLatestCutomerComment(a.id, 18) dnpqpaCustomerApprovalComment,      \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 18 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isCustomerApprovedDNPQPA,       \n" +
                "fun_getLatestCutomerComment(a.id, 3) buyCustomerApprovalComment,      \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 3 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuy,      \n" +
                "fun_getLatestCutomerComment(a.id, 17) buyDNPCustomerApprovalComment,      \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 17 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedBuyDNP,        \n" +
                "fun_getLatestCutomerComment(a.id, 4) populateCustomerApprovalComment,      \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 4 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPopulate,      \n" +
                "fun_getLatestCutomerComment(a.id, 5) cpnCustomerApprovalComment,      \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 5 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedCPN,      \n" +
                "fun_getLatestCutomerComment(a.id, 19) kitAllocationNotRequiredComment,      \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsID = a.id AND rac.errorCode = 19 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1)isNotRequiredKitAllocationApproved,        \n" +
                "ac.description AS additionalComment,      \n" +
                "ac.id AS additionalCommentId      \n" +
                "FROM rfq_lineitems a      \n" +
                "LEFT JOIN uoms b ON a.uomID = b.id AND IFNULL(b.isDeleted,0) = 0      \n" +
                "LEFT JOIN rfq_parttypemst part ON a.partTypeID = part.id AND IFNULL(part.isDeleted,0) = 0      \n" +
                "LEFT JOIN rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = a.id AND IFNULL(ac.isDeleted,0) = 0      \n" +
                "WHERE IFNULL(a.isDeleted,0) = 0 AND a.partID = ppartID;         \n" +
                "  \n" +
                "SELECT b.id,            \n" +
                "b.lineID,      \n" +
                "b.cust_lineID,      \n" +
                "b.qpa,      \n" +
                "b.refDesig,      \n" +
                "(CASE WHEN a.mfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcm.mfgName ELSE a.mfgCode END) AS mfgCode,      \n" +
                "a.mfgCodeID,      \n" +
                "mcm.acquisitionDetail,      \n" +
                "a.mfgPN,      \n" +
                "a.mfgPNID,      \n" +
                "(CASE WHEN a.distMfgCodeID IS NOT NULL AND IFNULL(a.customerApproval, 'N') != 'P' THEN mcmDist.mfgName ELSE a.distributor END) AS distributor,	      \n" +
                "mcmDist.acquisitionDetail AS distAcquisitionDetail,      \n" +
                "a.distMfgCodeID,      \n" +
                "a.distPN,      \n" +
                "a.distMfgPNID,      \n" +
                "b.custPN,      \n" +
                "b.custPNID,      \n" +
                "b.isCustPN,      \n" +
                "b.uomID,      \n" +
                "b.programingStatus,      \n" +
                "b.substitutesAllow,      \n" +
                "b.allocatedInKit,      \n" +
                "a.description descriptionAlternate,      \n" +
                "b.description,      \n" +
                "b.level,      \n" +
                "b.numOfPosition,      \n" +
                "b.numOfRows,      \n" +
                "b.customerRev,                \n" +
                "b.isCustPNProgrammingRequire,              \n" +
                "b.customerDescription,      \n" +
                "b.customerPartDesc,      \n" +
                "b.partclassID,      \n" +
                "b.isInstall,      \n" +
                "b.isPurchase,         \n" +
                "b.isNotRequiredKitAllocation,      \n" +
                "b.isSupplierToBuy,        \n" +
                "b.leadQty,      \n" +
                "b.attritionRate,      \n" +
                "b.valueAddedCost,      \n" +
                "b.refRFQLineItemID,      \n" +
                "b.dnpQty,      \n" +
                "b.dnpDesig,      \n" +
                "a.id AS rfqAlternatePartID,      \n" +
                "b.qpaDesignatorStep,      \n" +
                "b.qpaDesignatorColorPriority,      \n" +
                "b.duplicateCPNStep,      \n" +
                "b.dnpInvalidREFDESStep,      \n" +
                "b.restrictCPNUseWithPermissionStep,      \n" +
                "b.restrictCPNUsePermanentlyStep,      \n" +
                "b.restrictCPNUseInBOMStep,      \n" +
                "b.requireMountingTypeStep,      \n" +
                "b.requireFunctionalTypeStep,        \n" +
                "b.requireMountingTypeError,      \n" +
                "b.requireFunctionalTypeError,      \n" +
                "b.isBuyDNPQty,      \n" +
                "b.isObsoleteLine,      \n" +
                "b.customerApprovalForQPAREFDESStep,      \n" +
                "b.customerApprovalForBuyStep,      \n" +
                "b.customerApprovalForPopulateStep,        \n" +
                "b.dnpQPARefDesStep,      \n" +
                "b.customerApprovalForDNPQPAREFDESStep,      \n" +
                "b.customerApprovalForDNPBuyStep,      \n" +
                "b.customerApprovalCPN,      \n" +
                "b.qpaCustomerApprovalComment,        \n" +
                "b.dnpqpaCustomerApprovalComment,      \n" +
                "b.buyCustomerApprovalComment,        \n" +
                "b.buyDNPCustomerApprovalComment,      \n" +
                "b.populateCustomerApprovalComment,      \n" +
                "b.cpnCustomerApprovalComment,        \n" +
                "b.isCustomerApprovedQPA,       \n" +
                "b.isCustomerApprovedBuy,      \n" +
                "b.isCustomerApprovedDNPQPA,      \n" +
                "b.isCustomerApprovedBuyDNP,      \n" +
                "b.isCustomerApprovedPopulate,      \n" +
                "b.isCustomerApprovedCPN,           \n" +
                "b.kitAllocationNotRequiredComment,      \n" +
                "b.isNotRequiredKitAllocationApproved,      \n" +
                "a.mfgVerificationStep,      \n" +
                "a.mfgDistMappingStep,      \n" +
                "a.mfgCodeStep,      \n" +
                "a.customerApproval,      \n" +
                "a.isCustomerUnAppoval,      \n" +
                "a.org_mfgCode,      \n" +
                "a.org_mfgPN,      \n" +
                "a.org_distributor,      \n" +
                "a.org_distPN,      \n" +
                "a.distVerificationStep,      \n" +
                "a.distCodeStep,      \n" +
                "a.getMFGPNStep,      \n" +
                "a.obsoletePartStep,      \n" +
                "a.mfgGoodPartMappingStep,      \n" +
                "a.mfgPNStep,      \n" +
                "a.distPNStep,      \n" +
                "a.badMfgPN,      \n" +
                "a.distGoodPartMappingStep,      \n" +
                "a.nonRohsStep,      \n" +
                "a.epoxyStep,      \n" +
                "a.invalidConnectorTypeStep,      \n" +
                "a.duplicateMPNInSameLineStep,      \n" +
                "a.mismatchMountingTypeStep,      \n" +
                "a.mismatchFunctionalCategoryStep,      \n" +
                "a.mismatchFunctionalCategoryStep,      \n" +
                "a.restrictUseWithPermissionStep,      \n" +
                "a.restrictUsePermanentlyStep,      \n" +
                "a.partPinIsLessthenBOMPinStep,         \n" +
                "a.mismatchRequiredProgrammingStep,               \n" +
                "a.mappingPartProgramStep,                 \n" +
                "a.exportControlledStep,      \n" +
                "a.tbdPartStep,      \n" +
                "a.userData1,      \n" +
                "a.userData2,      \n" +
                "a.userData3,      \n" +
                "a.userData4,      \n" +
                "a.userData5,      \n" +
                "a.userData6,      \n" +
                "a.userData7,      \n" +
                "a.userData8,      \n" +
                "a.userData9,      \n" +
                "a.userData10,      \n" +
                "a.pickupPadRequiredStep,      \n" +
                "a.matingPartRquiredStep,           \n" +
                "a.suggestedGoodPartStep,             \n" +
                "a.suggestedGoodDistPartStep,      \n" +
                "a.driverToolsRequiredStep,      \n" +
                "a.functionalTestingRequiredStep,      \n" +
                "a.mismatchCustomPartStep,      \n" +
                "a.mismatchValueStep,             \n" +
                "a.approvedMountingType,      \n" +
                "a.mismatchPackageStep,      \n" +
                "a.mismatchPowerStep,      \n" +
                "a.mismatchToleranceStep,      \n" +
                "a.mismatchTempratureStep,      \n" +
                "a.mismatchNumberOfRowsStep,      \n" +
                "a.uomMismatchedStep,      \n" +
                "a.programingRequiredStep,      \n" +
                "a.mismatchProgrammingStatusStep,      \n" +
                "a.mismatchColorStep,      \n" +
                "a.restrictUseInBOMStep,      \n" +
                "a.restrictUseInBOMWithPermissionStep,      \n" +
                "a.restrictUseInBOMExcludingAliasStep,      \n" +
                "a.restrictUseInBOMExcludingAliasWithPermissionStep,             \n" +
                "a.restrictUseExcludingAliasStep,      \n" +
                "a.restrictUseExcludingAliasWithPermissionStep,             \n" +
                "a.unknownPartStep,      \n" +
                "a.defaultInvalidMFRStep,      \n" +
                "a.isUnlockApprovedPart,       \n" +
                "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN                 \n" +
                "cpnPart.partTypeName              \n" +
                "ELSE                 \n" +
                "part.partTypeName END) AS parttypeID,               \n" +
                "a.parttypeID AS functionalID,        \n" +
                "part.isTemperatureSensitive AS isFunctionalTemperatureSensitive,                 \n" +
                "(CASE WHEN co.id = -3 AND b.custPnID IS NOT NULL THEN                 \n" +
                "cpnMount.name             \n" +
                "ELSE                 \n" +
                "mount.name END) AS mountingtypeID,	              \n" +
                "a.mountingtypeID AS mountingID,      \n" +
                "cat.categoryname partcategoryID,      \n" +
                "(SELECT co.isGoodPart FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isMFGGoodPart,      \n" +
                "(SELECT co.isGoodPart FROM component co WHERE co.id = a.distMfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) isDistGoodPart,      \n" +
                "(SELECT co.RoHSStatusID FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) RoHSStatusID,      \n" +
                "(SELECT (SELECT rh.refMainCategoryID FROM rfq_rohsmst rh WHERE rh.id = co.RoHSStatusID) FROM component co WHERE co.id = a.mfgPNID AND co.isDeleted = 0 AND co.deletedAt IS NULL) refMainCategoryID,      \n" +
                "CASE WHEN      \n" +
                "(co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR      \n" +
                "EXISTS (SELECT 1 FROM component_partstatusmst cp WHERE co.partStatus = cp.id AND cp.name != 'Active' AND cp.isDeleted = 0)      \n" +
                "THEN 1 ELSE 0 END isObsolete,      \n" +
                "co.PIDCode,       \n" +
                "co.mfgPNDescription,      \n" +
                "co.pitch,      \n" +
                "co.noOfRows,      \n" +
                "IFNULL(pkg.name, co.partPackage) AS partPackage,      \n" +
                "co.value,      \n" +
                "co.tolerance,      \n" +
                "co.voltage,              \n" +
                "co.isCustom,      \n" +
                "co.packaging,      \n" +
                "co.deviceMarking,      \n" +
                "co.powerRating,      \n" +
                "co.minOperatingTemp,      \n" +
                "co.maxOperatingTemp,      \n" +
                "co.connecterTypeID,      \n" +
                "co.driverToolRequired,       \n" +
                "co.matingPartRquired,       \n" +
                "co.pickupPadRequired,       \n" +
                "co.programingRequired,       \n" +
                "co.dataSheetLink,                \n" +
                "co.isCPN,                \n" +
                "(SELECT GROUP_CONCAT(ComponentID) FROM component_drivetools WHERE refComponentID = co.id AND isDeleted = 0) AS driveToolIDs,       \n" +
                "(SELECT GROUP_CONCAT(ComponentID) FROM component_alternatepn WHERE refComponentID = co.id AND isDeleted = 0 AND `type` = 3) AS programingRequiredIDs,            \n" +
                "(SELECT GROUP_CONCAT(attributeID) FROM component_dynamic_attribute_mapping_part WHERE mfgPNID = co.id AND deletedAt IS NULL) AS operationalAttributeIDs,        \n" +
                "(SELECT pickTemperatureAbove FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxSolderingTemperature,      \n" +
                "(SELECT timeLiquidusSecond FROM component_temperature_sensitive_data WHERE refComponentID = co.id AND isDeleted = 0 ORDER BY pickTemperatureAbove ASC LIMIT 1) AS maxTemperatureTime,      \n" +
                "co.isTemperatureSensitive,      \n" +
                "co.noOfPosition AS componentLead,      \n" +
                "fun_getPartStatusNameByID(co.partStatus) AS partStatus,      \n" +
                "fun_getPartStatusColorCodeByID(co.partStatus) AS partStatuscolorCode,      \n" +
                "co.createdBy,      \n" +
                "(SELECT u.unitName FROM UOMs u WHERE u.id = co.uom ) AS uom,      \n" +
                "co.color,      \n" +
                "co.uom AS partUOMID,            \n" +
                "co.serialNumber,          \n" +
                "CASE WHEN            \n" +
                "(SELECT COUNT(cs.isExportControlled) AS isExportControlled  FROM component c            \n" +
                "LEFT JOIN component_standard_details csd ON csd.componentID = c.id AND IFNULL(csd.isDeleted,0) = 0            \n" +
                "LEFT JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isExportControlled = 1            \n" +
                "WHERE c.id = co.id) > 0 THEN 1 ELSE 0 END isExportControlled,              \n" +
                "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16 ) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) partCustomerApprovalComment,        \n" +
                "(SELECT rac.`isCustomerApproved` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND (rac.errorCode = 1 OR rac.errorCode = 10 OR rac.errorCode = 8 OR rac.errorCode = 11 OR rac.errorCode = 12 OR rac.errorCode = 13 OR rac.errorCode = 14 OR rac.errorCode = 15 OR rac.errorCode = 16) AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) isCustomerApprovedPart,      \n" +
                "(SELECT rac.`comment` FROM rfq_lineitems_approval_comment rac WHERE rac.rfqLineItemsAlternatePartID = a.id AND rac.errorCode = 20 AND rac.isDeleted = 0 ORDER BY rac.id DESC LIMIT 1) ApprovedMountingTypeComment,  \n" +
                "b.additionalComment ,      \n" +
                "b.additionalCommentId,        \n" +
                "a.suggestedByApplicationMsg,        \n" +
                "a.suggestedByApplicationStep        \n" +
                "FROM rfq_lineitems_alternatepart a      \n" +
                "LEFT JOIN component co ON a.mfgPNID = co.id AND co.isDeleted = 0      \n" +
                "LEFT JOIN mfgcodemst mcm ON a.mfgCodeID = mcm.id AND mcm.isDeleted = 0      \n" +
                "LEFT JOIN mfgcodemst mcmDist ON a.distMfgCodeID = mcmDist.id AND mcmDist.isDeleted = 0      \n" +
                "LEFT JOIN rfq_parttypemst part ON co.functionalCategoryID = part.id           \n" +
                "LEFT JOIN rfq_mountingtypemst mount ON co.mountingtypeID = mount.id                \n" +
                "LEFT JOIN rfq_partcategory cat ON co.category = cat.id           \n" +
                "LEFT JOIN rfq_packagecasetypemst pkg ON co.partPackageID = pkg.id           \n" +
                "JOIN tempRfq_lineitems b ON a.rfqLineItemsID = b.id      \n" +
                "LEFT JOIN component cpn ON b.custPNID = cpn.id AND cpn.isDeleted = 0      \n" +
                "LEFT JOIN rfq_parttypemst cpnPart ON cpn.functionalCategoryID = cpnPart.id      \n" +
                "LEFT JOIN rfq_mountingtypemst cpnMount ON cpn.mountingtypeID = cpnMount.id               \n" +
                "WHERE IFNULL(a.isDeleted,0) = 0 AND b.id IS NOT NULL ORDER BY b.lineID, a.id;      \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-05-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPartProgrammingRefDesgDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPartProgrammingRefDesgDetail`(    \n" +
                "	IN pPartID INT    \n" +
                "    )  \n" +
                "BEGIN          \n" +
                "		/* get Detail for part with RequireProgramming status true and selected as Pre-Assy or Post Assy in Programming status and Yes With PrePrgramm in isDNPBuy */          \n" +
                "			select 	rla.mountingtypeID,	rla.parttypeID,	com.programingRequired ,	rl.refDesig,	rl.dnpDesig, trim(rl.lineID)+0 as lineID,          \n" +
                "					rl.id,	rl.isBuyDNPQty,	rl.isInstall,	rl.isPurchase,	rl.programingStatus,	com.PIDCode,	com.mfgPN,          \n" +
                "                    rla.mfgPNID,	ro.name,	ro.rohsIcon,	com.RoHSStatusID,	com.mfgPNDescription, com.isCustom, com.custAssyPN,      \n" +
                "                    fun_getMfgNameByID(com.mfgcodeID) mfrCode,com.mfgcodeID,   \n" +
                "                    rl.restrictCPNUsePermanentlyStep,  \n" +
                "                    rl.restrictCPNUseWithPermissionStep,  \n" +
                "                    rl.restrictCPNUseInBOMStep,  \n" +
                "                    rla.isUnlockApprovedPart,  \n" +
                "				rla.pickupPadRequiredStep,      \n" +
                "				rla.matingPartRquiredStep,           \n" +
                "				rla.suggestedGoodPartStep,             \n" +
                "				rla.suggestedGoodDistPartStep,      \n" +
                "				rla.driverToolsRequiredStep,      \n" +
                "				rla.functionalTestingRequiredStep,      \n" +
                "				rla.mismatchCustomPartStep,      \n" +
                "				rla.mismatchValueStep,             \n" +
                "				rla.approvedMountingType,      \n" +
                "				rla.mismatchPackageStep,      \n" +
                "				rla.mismatchPowerStep,      \n" +
                "				rla.mismatchToleranceStep,      \n" +
                "				rla.mismatchTempratureStep,      \n" +
                "				rla.mismatchNumberOfRowsStep,      \n" +
                "				rla.uomMismatchedStep,      \n" +
                "				rla.programingRequiredStep,      \n" +
                "				rla.mismatchProgrammingStatusStep,      \n" +
                "				rla.mismatchColorStep,      \n" +
                "				rla.restrictUseInBOMStep,      \n" +
                "				rla.restrictUseInBOMWithPermissionStep,      \n" +
                "				rla.restrictUseInBOMExcludingAliasStep,      \n" +
                "				rla.restrictUseInBOMExcludingAliasWithPermissionStep,             \n" +
                "				rla.restrictUseExcludingAliasStep,      \n" +
                "				rla.restrictUseExcludingAliasWithPermissionStep,             \n" +
                "				rla.unknownPartStep,      \n" +
                "				rla.defaultInvalidMFRStep,      \n" +
                "				rla.suggestedByApplicationStep,    \n" +
                "				rla.mfgVerificationStep,      \n" +
                "				rla.mfgDistMappingStep,      \n" +
                "				rla.mfgCodeStep,      \n" +
                "				rla.customerApproval,      \n" +
                "				rla.isCustomerUnAppoval,      \n" +
                "				rla.org_mfgCode,      \n" +
                "				rla.org_mfgPN,      \n" +
                "				rla.org_distributor,      \n" +
                "				rla.org_distPN,      \n" +
                "				rla.distVerificationStep,      \n" +
                "				rla.distCodeStep,      \n" +
                "				rla.getMFGPNStep,      \n" +
                "				rla.obsoletePartStep,      \n" +
                "				rla.mfgGoodPartMappingStep,      \n" +
                "				rla.mfgPNStep,      \n" +
                "				rla.distPNStep,      \n" +
                "				rla.badMfgPN,      \n" +
                "				rla.distGoodPartMappingStep,      \n" +
                "				rla.nonRohsStep,      \n" +
                "				rla.epoxyStep,      \n" +
                "				rla.invalidConnectorTypeStep,      \n" +
                "				rla.duplicateMPNInSameLineStep,      \n" +
                "				rla.mismatchMountingTypeStep,      \n" +
                "				rla.mismatchFunctionalCategoryStep,      \n" +
                "				rla.mismatchFunctionalCategoryStep,      \n" +
                "				rla.restrictUseWithPermissionStep,      \n" +
                "				rla.restrictUsePermanentlyStep,      \n" +
                "				rla.partPinIsLessthenBOMPinStep,         \n" +
                "				rla.mismatchRequiredProgrammingStep,               \n" +
                "				rla.mappingPartProgramStep,                 \n" +
                "				rla.exportControlledStep,      \n" +
                "				rla.tbdPartStep    \n" +
                "			from rfq_lineitems rl          \n" +
                "			join rfq_lineitems_alternatepart rla on rla.rfqLineItemsID = rl.id and rla.isdeleted = 0          \n" +
                "			join component com on com.id = rla.mfgPNID and com.isdeleted = 0          \n" +
                "			join rfq_rohsmst ro on ro.id = com.RoHSStatusID and ro.isDeleted = 0          \n" +
                "			left join component CPNCom on CPNCom.id = rl.custPNID and CPNCom.isDeleted = 0          \n" +
                "			where rl.partid = pPartID and rl.isdeleted = 0 and (com.programingRequired = 1 OR CPNCom.programingRequired = 1)          \n" +
                "			and rl.programingStatus in (1,2);          \n" +
                "  \n" +
                "		/* Get Detail of Part where Part Have Selected Software as Mounting type or Functional Type */          \n" +
                "			select rla.mountingtypeID,	rla.parttypeID,	com.programingRequired,	rl.refDesig,	rl.dnpDesig,	trim(rl.lineID)+0 as lineID,	rl.id,          \n" +
                "					rl.isBuyDNPQty,	rl.isInstall,	rl.isPurchase,	rl.programingStatus,	rl.customerPartDesc,	com.mfgPN,	com.PIDCode, rla.mfgPNID,          \n" +
                "					com.RoHSStatusID,	ro.name,	ro.rohsIcon,	com.mfgPNDescription, com.isCustom,  com.custAssyPN,    \n" +
                "                    fun_getMfgNameByID(com.mfgcodeID) mfrCode,com.mfgcodeID,    \n" +
                "                    rla.pickupPadRequiredStep, rla.isUnlockApprovedPart,   \n" +
                "                    rl.restrictCPNUsePermanentlyStep,  \n" +
                "                    rl.restrictCPNUseWithPermissionStep,  \n" +
                "                    rl.restrictCPNUseInBOMStep,  \n" +
                "				rla.matingPartRquiredStep,           \n" +
                "				rla.suggestedGoodPartStep,             \n" +
                "				rla.suggestedGoodDistPartStep,      \n" +
                "				rla.driverToolsRequiredStep,      \n" +
                "				rla.functionalTestingRequiredStep,      \n" +
                "				rla.mismatchCustomPartStep,      \n" +
                "				rla.mismatchValueStep,             \n" +
                "				rla.approvedMountingType,      \n" +
                "				rla.mismatchPackageStep,      \n" +
                "				rla.mismatchPowerStep,      \n" +
                "				rla.mismatchToleranceStep,      \n" +
                "				rla.mismatchTempratureStep,      \n" +
                "				rla.mismatchNumberOfRowsStep,      \n" +
                "				rla.uomMismatchedStep,      \n" +
                "				rla.programingRequiredStep,      \n" +
                "				rla.mismatchProgrammingStatusStep,      \n" +
                "				rla.mismatchColorStep,      \n" +
                "				rla.restrictUseInBOMStep,      \n" +
                "				rla.restrictUseInBOMWithPermissionStep,      \n" +
                "				rla.restrictUseInBOMExcludingAliasStep,      \n" +
                "				rla.restrictUseInBOMExcludingAliasWithPermissionStep,             \n" +
                "				rla.restrictUseExcludingAliasStep,      \n" +
                "				rla.restrictUseExcludingAliasWithPermissionStep,             \n" +
                "				rla.unknownPartStep,      \n" +
                "				rla.defaultInvalidMFRStep,      \n" +
                "				rla.suggestedByApplicationStep,    \n" +
                "				rla.mfgVerificationStep,      \n" +
                "				rla.mfgDistMappingStep,      \n" +
                "				rla.mfgCodeStep,      \n" +
                "				rla.customerApproval,      \n" +
                "				rla.isCustomerUnAppoval,      \n" +
                "				rla.org_mfgCode,      \n" +
                "				rla.org_mfgPN,      \n" +
                "				rla.org_distributor,      \n" +
                "				rla.org_distPN,      \n" +
                "				rla.distVerificationStep,      \n" +
                "				rla.distCodeStep,      \n" +
                "				rla.getMFGPNStep,      \n" +
                "				rla.obsoletePartStep,      \n" +
                "				rla.mfgGoodPartMappingStep,      \n" +
                "				rla.mfgPNStep,      \n" +
                "				rla.distPNStep,      \n" +
                "				rla.badMfgPN,      \n" +
                "				rla.distGoodPartMappingStep,      \n" +
                "				rla.nonRohsStep,      \n" +
                "				rla.epoxyStep,      \n" +
                "				rla.invalidConnectorTypeStep,      \n" +
                "				rla.duplicateMPNInSameLineStep,      \n" +
                "				rla.mismatchMountingTypeStep,      \n" +
                "				rla.mismatchFunctionalCategoryStep,      \n" +
                "				rla.mismatchFunctionalCategoryStep,      \n" +
                "				rla.restrictUseWithPermissionStep,      \n" +
                "				rla.restrictUsePermanentlyStep,      \n" +
                "				rla.partPinIsLessthenBOMPinStep,         \n" +
                "				rla.mismatchRequiredProgrammingStep,               \n" +
                "				rla.mappingPartProgramStep,                 \n" +
                "				rla.exportControlledStep,      \n" +
                "				rla.tbdPartStep    \n" +
                "			from rfq_lineitems rl          \n" +
                "			join rfq_lineitems_alternatepart rla on rla.rfqLineItemsID = rl.id and rla.isdeleted = 0          \n" +
                "			join component com on com.id = rla.mfgPNID and com.isdeleted = 0          \n" +
                "			Join rfq_rohsmst ro on ro.id = com.RoHSStatusID and ro.isDeleted = 0          \n" +
                "            where rl.partid = pPartID and rl.isInstall = 1 and rl.isdeleted = 0 and (rla.mountingtypeID = -2 or rla.parttypeID = -2);          \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4584,'2.00','V1','User Story 32636: Demo Improvement Points of User story #29967 & #30241 give by Jaybhai related changes - Shirish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4584:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-05-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPurchaseIncomingInspectionList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPurchaseIncomingInspectionList`(              \n" +
                "    IN ppageIndex INT(11),                                      \n" +
                "	IN precordPerPage INT(11),                                      \n" +
                "	IN pOrderBy VARCHAR(255),                                      \n" +
                "	IN pWhereClause VARCHAR(16383)              \n" +
                ")  \n" +
                "BEGIN              \n" +
                "	DECLARE pOffset INT(11);                                      \n" +
                "	DECLARE rowNumWhere VARCHAR(255);          \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);                         \n" +
                "	DECLARE v_TimeZone VARCHAR(50);                      \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;                \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;             \n" +
                "  \n" +
                "	SET @tempQuery = CONCAT(\"SELECT im.id, im.isActive, gc.`gencCategoryID`,    \n" +
                "			(CASE WHEN (`im`.`isActive` = 0) THEN 'Inactive'                       \n" +
                "				WHEN (`im`.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`,      \n" +
                "			case when im.requiementType = 'R' then        \n" +
                "				'Requirement'        \n" +
                "				when im.requiementType = 'C' then        \n" +
                "				'Comment'        \n" +
                "			end requiementType,  \n" +
                "			case when im.id < 0 then  \n" +
                "				1  \n" +
                "				when im.id > 0 then  \n" +
                "				0  \n" +
                "			end isSystemGenerated,  \n" +
                "			im.requirement,            \n" +
                "			fun_checkForInspectionId(im.id) isRequirementReference,            \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(im.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,                   \n" +
                "			fun_getUserNameByID(im.createdBy) createdBy,         							              \n" +
                "			fun_getUserNameByID(im.updatedBy) updatedBy,                  \n" +
                "			fun_getRoleByID(im.createByRoleId) createByRoleId,                        \n" +
                "			fun_getRoleByID(im.updateByRoleId) updateByRoleId,                        \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(im.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,              \n" +
                "            case when gc.gencCategoryCode is not null then concat('(',gc.gencCategoryCode,') ',gc.gencCategoryName) else gc.gencCategoryName End AS partRequirementCategoryName    \n" +
                "            FROM `inspection_mst` AS im                         \n" +
                "            JOIN `genericcategory` AS gc                      \n" +
                "				ON im.`partRequirementCategoryID` = gc.`gencCategoryID`                      \n" +
                "				AND gc.`isDeleted`=0         \n" +
                "			WHERE im.isDeleted = 0  \");                    \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                      \n" +
                "			SET pWhereClause = '1=1' ;                                      \n" +
                "		END IF;	                                      \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY requirement ASC\") ;                                      \n" +
                "		ELSE                                      \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                      \n" +
                "		END IF;	                    \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                       \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage; 		                                      \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                      \n" +
                "		ELSE	                                      \n" +
                "			SET rowNumWhere = '';                                      \n" +
                "		END IF;	                                      \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);                                \n" +
                "			PREPARE query2 FROM @SQLStatement2;                              \n" +
                "			EXECUTE query2;                              \n" +
                "			DEALLOCATE PREPARE query2;                            \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c                              \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                              \n" +
                "			PREPARE query1 FROM @SQLStatement1;                              \n" +
                "			EXECUTE query1;                              \n" +
                "			DEALLOCATE PREPARE query1;                     \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->07-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4585,'2.00','V1',' Bug 33161: Requirement & Comment: While selecting the template, received console error Cannot read property requiementType of null - Purav '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4585:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-05-2021 *********************************** */
                "SET @TBDid = (SELECT gencCategoryID FROM genericcategory WHERE gencCategoryName = 'TBD');  \n" +
                "INSERT INTO inspection_mst  \n" +
                "            (`id`,  \n" +
                "             `requirement`,  \n" +
                "             `createdBy`,  \n" +
                "             `isDeleted`,  \n" +
                "             `createByRoleId`,  \n" +
                "             `requiementType`,  \n" +
                "             `isActive`,  \n" +
                "             `partRequirementCategoryID`)  \n" +
                "VALUES ( -1,'Default Autorized Comment',1,0,1,'C', 1, @TBDid);  \n" +
                /* **************************** Add Script Version ->07-05-2021*********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4586,'2.00','V1',' Bug 33161: Requirement & Comment: While selecting the template, received console error Cannot read property requiementType of null - Purav '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4586:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-05-21  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPendingSalesShippingDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(                                            \n" +
                "	IN psalesorderDetID INT ,                                          \n" +
                "	IN packingSlipID INT,        \n" +
                "	IN ppackingslipDetID INT                                           \n" +
                "    )  \n" +
                "BEGIN                                             \n" +
                " SELECT ss.shippingID,                              \n" +
                "        ss.sDetId,                              \n" +
                "		IFNULL(sd.custPOLineNumber ,1)   custPOLineNumber,                              \n" +
                "        IFNULL(ss.releaseNumber,1) releaseNumber,                              \n" +
                "        ss.qty,                              \n" +
                "        ss.shippingDate,                                          \n" +
                "        ss.releaseNotes,                              \n" +
                "        sd.tentativeBuild,                              \n" +
                "        sd.qty AS poQty,                              \n" +
                "        sd.partID,                              \n" +
                "        sd.price,                              \n" +
                "        sd.lineID,                    \n" +
                "        sd.internalComment,                      \n" +
                "        sd.partDescription,                    \n" +
                "        sd.remark,        \n" +
                "        c.iscustom,                                            \n" +
                "         c.mfgpn,                              \n" +
                "         c.mfgpndescription,                              \n" +
                "         c.pidcode,                              \n" +
                "         fun_getUnitNameByID(c.uom) unitMeaser,                              \n" +
                "         c.nickName,                  \n" +
                "         c.mfgcodeID,                  \n" +
                "         fun_getMfgCodeAndNameByID(c.mfgcodeID)mfgName,                                     \n" +
                "	(CASE WHEN ss.shippingMethodID IS NULL THEN som.shippingMethodID                        \n" +
                "			ELSE ss.shippingMethodID END) shippingMethodID ,                            \n" +
                "	(CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddressID                        \n" +
                "			ELSE ss.shippingAddressID END) shippingAddressID ,	                                 \n" +
                "	fun_getRoHSIconByPartID(sd.partID) rohsIcon,                              \n" +
                "	fun_getRoHSNameByPartID(sd.partID) rohsName,                  \n" +
                "	fun_getCertificationByPartID(sd.partID)standards,                                      \n" +
                "	CONCAT(IFNULL(ss.releaseNumber,1),' | ',ss.qty,' | ',DATE_FORMAT(ss.shippingDate, '%m-%d-%y')) shipping,                               \n" +
                "	(SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd WHERE refsalesorderdetid=ss.sDetId                         \n" +
                "		AND cpd.refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE transType = 'P' AND isDeleted = 0)                        \n" +
                "		AND cpd.isdeleted=0) shippedQty ,                        \n" +
                "	(CASE WHEN ss.shippingMethodID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.shippingMethodID))                        \n" +
                "		ELSE (fun_getGenericCategoryCodeNameByID(ss.shippingMethodID)) END) shippingMethodText,          \n" +
                "		c.partType,          \n" +
                "        (SELECT mfg.mfgType FROM mfgcodemst mfg WHERE mfg.id = c.mfgcodeid AND mfg.isDeleted = 0 ) mfgType,      \n" +
                "        sd.quoteNumber,sd.quoteFrom, sd.refAssyQtyTurnTimeID, sd.refRFQGroupID, sd.refRFQQtyTurnTimeID  ,      \n" +
                "        IFNULL(sd.assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'       \n" +
                "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'      \n" +
                "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )      \n" +
                "					FROM rfq_assy_quantity_turn_time rfqAssyTurn       \n" +
                "				JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0      \n" +
                "                    WHERE rfqAssyTurn.id = sd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
                "						c.category partCategory  \n" +
                " FROM salesshippingmst ss                                 \n" +
                "	JOIN salesorderdet sd ON ss.sDetID=sd.id                       \n" +
                "	JOIN salesordermst som ON som.id = sd.refSalesOrderID                        \n" +
                "	JOIN COMPONENT c ON c.id=sd.partid           \n" +
                "  \n" +
                "WHERE sd.id=psalesorderDetID                        \n" +
                "AND  sd.isDeleted = 0 AND         \n" +
                "(CASE WHEN ppackingslipDetID IS NULL THEN        \n" +
                "	ss.qty > (SELECT     \n" +
                "	IFNULL(SUM(cpd.shipqty),0) FROM customer_packingslip_det cpd WHERE cpd.shippingId=ss.shippingID     \n" +
                "		AND cpd.isdeleted=0 AND refCustPackingSlipID IN (    \n" +
                "		SELECT id FROM customer_packingslip WHERE transType=\"P\"))        \n" +
                "ELSE         \n" +
                "	ss.qty=ss.qty        \n" +
                "END)        \n" +
                "AND ss.isdeleted=0                \n" +
                "ORDER BY ss.releaseNumber,ss.shippingDate;                                            \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4587,'2.00','V1',' Sproc_GetPendingSalesShippingDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 4587:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-05-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateCustomerPayment`(                \n" +
                "	IN pCustInvoicePaymentDetList JSON,                \n" +
                "	IN pMfgcodeID INT,                \n" +
                "	IN pPaymentNumber VARCHAR(50),                \n" +
                "	IN pPaymentDate DATE,                \n" +
                "	IN pPaymentAmount DECIMAL(18,8),                \n" +
                "	IN pPaymentType INT,                \n" +
                "	IN pAccountReference VARCHAR(50),                \n" +
                "	IN pBankAccountMasID INT,                \n" +
                "	IN pBankAccountNo VARCHAR(50),                \n" +
                "	IN pBankName VARCHAR(255),                \n" +
                "	IN pRemark VARCHAR(1000),                \n" +
                "	IN pRefPaymentMode VARCHAR(1),                \n" +
                "	IN pTotSelectedInvOfCust INT,               \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,             \n" +
                "	IN pSystemID VARCHAR(20),            \n" +
                "	IN pisZeroPayment INT,      \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,      \n" +
                "	IN pRefCustCreditMemoID INT,       \n" +
                "	IN pRefPaymentType VARCHAR(10) ,        \n" +
                "	IN pUserID INT,                \n" +
                "	IN pUserRoleID INT     \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN                \n" +
                "  \n" +
                "	DECLARE insertedInvPaymentMstID INT;            \n" +
                "	DECLARE vCountExistsCheckNo INT;       \n" +
                "	DECLARE vCountSameCMApplied INT;          \n" +
                "	DECLARE vLockStatusToBe VARCHAR(5);            \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;     \n" +
                "	SET vCountSameCMApplied = 0;           \n" +
                "  \n" +
                "	IF (pRefPaymentType = 'RCV' AND pisConfmTakenForDuplicateCheckNo = 0) THEN            \n" +
                "		/* check duplicate check number if confirmation not taken >> RCV - Receivable */              \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo                      \n" +
                "		FROM packingslip_invoice_payment                      \n" +
                "		WHERE refPaymentMode = pRefPaymentMode     \n" +
                "		AND paymentNumber = pPaymentNumber                      \n" +
                "		AND mfgcodeID = pMfgcodeID            \n" +
                "		AND isPaymentVoided = 0            \n" +
                "		AND isdeleted = 0    ;            \n" +
                "	ELSEIF (pRefPaymentType = 'CCM') THEN		    \n" +
                "		/* check for duplicate credit memo entry >> CCM - Credit Memo */    \n" +
                "		SELECT COUNT(1) INTO vCountSameCMApplied     \n" +
                "		FROM packingslip_invoice_payment    \n" +
                "		WHERE refPaymentMode = pRefPaymentMode     \n" +
                "		AND refPaymentType = pRefPaymentType      \n" +
                "		AND refCustCreditMemoID = pRefCustCreditMemoID     \n" +
                "		AND isPaymentVoided = 0            \n" +
                "		AND isdeleted = 0    ;         \n" +
                "  \n" +
                "	END IF;         \n" +
                "  \n" +
                "  \n" +
                "	IF(vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0             \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN                \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */                  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;                                                  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS                                                            \n" +
                "		SELECT 	*                                                             \n" +
                "		FROM 	JSON_TABLE(                     \n" +
                "			pCustInvoicePaymentDetList,                                                            \n" +
                "				\"$[*]\" COLUMNS(                    \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",                                                     \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",                                                            \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,                \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,                \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,    \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"                \n" +
                "				)                  \n" +
                "			) AS CustInvoicePaymentDetList_JT ;                 \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */	                  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;                                                  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS 	                \n" +
                "			SELECT cps.id AS invoiceMstID,                 \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,                \n" +
                "				cps.status,                \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det                \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id             \n" +
                "					AND isPaymentVoided = 0                \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet                \n" +
                "			FROM customer_packingslip cps                \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)                \n" +
                "			AND cps.isDeleted = 0                \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */                \n" +
                "		;                \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)                 \n" +
                "			> if selected invoice not found from db                \n" +
                "			> original Payment Amount Of Invoice  mismatch                \n" +
                "			> invoice Total Paid Amount mismatch                \n" +
                "			*/	                  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;                                                  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS                 \n" +
                "			SELECT tucipl.*                \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl                \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID                \n" +
                "			WHERE (                \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))                  \n" +
                "				OR                \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))	                \n" +
                "				OR                \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))                \n" +
                "				)                \n" +
                "			;                \n" +
                "  \n" +
                "	END IF;                \n" +
                "  \n" +
                "	/* set up default temp table if not created */                  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS                  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;                \n" +
                "  \n" +
                "	IF (vCountSameCMApplied = 0 AND vCountExistsCheckNo = 0 AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN                \n" +
                "		-- select 'create';           \n" +
                "  \n" +
                "		/* Lock Status >> Ready To Lock - \"RL\" , Locked - \"LC\" , N/A - \"NA\" */          \n" +
                "		SET vLockStatusToBe = 'NA' ;          \n" +
                "		IF(pTotSelectedInvOfCust > 0) THEN           \n" +
                "			IF((pPaymentAmount - (SELECT IFNULL(SUM(paymentAmountForSelectedInvoice),0)           \n" +
                "							FROM temp_UI_CustInvoicePaymentDetList)) = 0) THEN          \n" +
                "				SET vLockStatusToBe = 'RL' ;          \n" +
                "			END IF;	          \n" +
                "		END IF;	          \n" +
                "  \n" +
                "  \n" +
                "		INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,                \n" +
                "			`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,                \n" +
                "			`bankName`,`remark`,`refPaymentMode`,`systemId` ,           \n" +
                "			`lockStatus`, `isZeroPayment` , `depositBatchNumber` , `refCustCreditMemoID` ,      \n" +
                "			`refPaymentType` ,          \n" +
                "			`createdAt`, `createdBy`, `createByRoleId`,      \n" +
                "			`updatedAt`,`updatedBy`,`updateByRoleId`)                \n" +
                "		VALUES(pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,                \n" +
                "			pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,                \n" +
                "			pBankName, pRemark, pRefPaymentMode, pSystemID,                \n" +
                "			vLockStatusToBe,pisZeroPayment, pDepositBatchNumber,  pRefCustCreditMemoID,      \n" +
                "			pRefPaymentType ,    \n" +
                "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,       \n" +
                "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;            \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		SET insertedInvPaymentMstID = LAST_INSERT_ID();                   \n" +
                "  \n" +
                "  \n" +
                "		IF(pTotSelectedInvOfCust > 0) THEN                \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,     \n" +
                "					`appliedDate` ,    \n" +
                "					`createdAt`, `createdBy`,`createByRoleId`,      \n" +
                "					`updatedAt`, `updatedBy`,`updateByRoleId`)                \n" +
                "			SELECT insertedInvPaymentMstID, paymentAmountForSelectedInvoice, invoiceMstID,    \n" +
                "				appliedDate ,    \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,       \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID                \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList ;                \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */	                \n" +
                "			UPDATE customer_packingslip cps                \n" +
                "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID                \n" +
                "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv,                \n" +
                "				cps.updatedBy = pUserID,                   \n" +
                "				cps.updateByRoleId = pUserRoleID ,                  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()                \n" +
                "			WHERE cps.id = tucipdl.invoiceMstID                \n" +
                "			-- and tucipdl.newApplyPaymentStatusOfInv is not null                 \n" +
                "			-- and tucipdl.newApplyPaymentStatusOfInv != ''                \n" +
                "			AND cps.isDeleted = 0	;   \n" +
                "  \n" +
                "			/* update customer credit memo - payment status   */  \n" +
                "			IF (pRefPaymentType = 'CCM') THEN  /* CCM - Credit Memo */  \n" +
                "				UPDATE customer_packingslip            \n" +
                "				SET paymentStatus = ( CASE WHEN ABS(totalAmount) > pPaymentAmount THEN 'PR'            \n" +
                "							 WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE'            \n" +
                "							 ELSE paymentStatus END            \n" +
                "							) ,            \n" +
                "					updatedBy = pUserID,               \n" +
                "					updateByRoleId = pUserRoleID ,              \n" +
                "					updatedAt = fun_DatetimetoUTCDateTime()            \n" +
                "				WHERE id = pRefCustCreditMemoID  \n" +
                "				AND isDeleted = 0	  \n" +
                "				;                \n" +
                "			END IF;   \n" +
                "		END IF;                \n" +
                "  \n" +
                "  \n" +
                "	END IF;                \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */                  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0) OR (vCountExistsCheckNo > 0)    \n" +
                "						OR (vCountSameCMApplied > 0) ) THEN                  \n" +
                "		SELECT 0 AS 'spStatus' ;                  \n" +
                "	ELSE                  \n" +
                "		SELECT 1 AS 'spStatus' ;                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "	/* Resp[1] - get all mis match amount records or deleted invoices */                  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;                 \n" +
                "  \n" +
                "	/* Resp[2] - newly inserted payment master id  */                 \n" +
                "	SELECT insertedInvPaymentMstID AS insertedInvPaymentMstID;             \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */              \n" +
                "	IF (vCountExistsCheckNo > 0) THEN            \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;                  \n" +
                "	ELSE                  \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;                  \n" +
                "	END IF;    \n" +
                "  \n" +
                "	/* Resp[4] - if credit memo already applied then not allowed to applied same credit memo again  */              \n" +
                "	IF (vCountSameCMApplied > 0) THEN            \n" +
                "		SELECT 1 AS isDuplicateCreditMemoToApply;                  \n" +
                "	ELSE                  \n" +
                "		SELECT 0 AS isDuplicateCreditMemoToApply;                  \n" +
                "	END IF;                  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;                   \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;                 \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;                \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 07-05-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerPayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustomerPayment`(              \n" +
                "	IN pCustInvoicePaymentDetList JSON,              \n" +
                "	IN pCustomerPaymentMstID INT,              \n" +
                "	IN pMfgcodeID INT,              \n" +
                "	IN pPaymentNumber VARCHAR(50),              \n" +
                "	IN pPaymentDate DATE,              \n" +
                "	IN pPaymentAmount DECIMAL(18,8),              \n" +
                "	IN pPaymentType INT,              \n" +
                "	IN pAccountReference VARCHAR(50),              \n" +
                "	IN pBankAccountMasID INT,              \n" +
                "	IN pBankAccountNo VARCHAR(50),              \n" +
                "	IN pBankName VARCHAR(255),              \n" +
                "	IN pRemark VARCHAR(1000),              \n" +
                "	IN pRefPaymentMode VARCHAR(1),              \n" +
                "	IN pTotSelectedInvOfCust INT,              \n" +
                "	IN pDeleteCustInvPaymentDetList JSON,              \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,            \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,    \n" +
                "	IN pRefCustCreditMemoID INT,   \n" +
                "	IN pRefPaymentType VARCHAR(10) ,         \n" +
                "	IN pUserID INT,              \n" +
                "	IN pUserRoleID INT              \n" +
                "    )  \n" +
                "BEGIN              \n" +
                "  \n" +
                "	DECLARE vCountExistsCheckNo INT;    \n" +
                "	DECLARE v_db_mainPaymentAmount DECIMAL(18,8) ;           \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;            \n" +
                "  \n" +
                "	IF (pisConfmTakenForDuplicateCheckNo = 0) THEN            \n" +
                "		/* check for duplicate check/payment number if confirmation not taken */              \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo                      \n" +
                "		FROM packingslip_invoice_payment                      \n" +
                "		WHERE refPaymentMode = pRefPaymentMode             \n" +
                "		AND paymentNumber = pPaymentNumber                      \n" +
                "		AND mfgcodeID = pMfgcodeID             \n" +
                "		AND id != pCustomerPaymentMstID            \n" +
                "		AND isPaymentVoided = 0            \n" +
                "		AND isdeleted = 0    ;            \n" +
                "	END IF;	            \n" +
                "  \n" +
                "  \n" +
                "	IF(vCountExistsCheckNo = 0 AND pTotSelectedInvOfCust > 0             \n" +
                "					AND pCustInvoicePaymentDetList IS NOT NULL AND pCustInvoicePaymentDetList != '') THEN              \n" +
                "  \n" +
                "		/* get/map all Customer Invoice Payment Detail List send from UI */                \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;                                                \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustInvoicePaymentDetList AS                                                          \n" +
                "		SELECT 	*                                                           \n" +
                "		FROM 	JSON_TABLE(                   \n" +
                "			pCustInvoicePaymentDetList,                                                          \n" +
                "				\"$[*]\" COLUMNS(                  \n" +
                "					`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",              \n" +
                "					`invoiceMstID` INT PATH \"$.invoiceMstID\",                                                   \n" +
                "					`originalPayAmountOfInvoice` DECIMAL(18,8) PATH \"$.originalPayAmountOfInvoice\",                                                          \n" +
                "					`invTotPaidAmtFromAllPaymentDet` DECIMAL(18,8) PATH \"$.invTotPaidAmtFromAllPaymentDet\" ,              \n" +
                "					`paymentAmountForSelectedInvoice` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedInvoice\" ,              \n" +
                "					`newApplyPaymentStatusOfInv` VARCHAR(2) PATH \"$.newApplyPaymentStatusOfInv\" ,    \n" +
                "					`appliedDate` DATE PATH \"$.appliedDate\"               \n" +
                "				)                \n" +
                "			) AS CustInvoicePaymentDetList_JT ;               \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		/* get all customer invoice > against total payment list > available in data base */	                \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;                                                \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustInvoicePaymentDetList AS 	              \n" +
                "			SELECT cps.id AS invoiceMstID, cps.status,               \n" +
                "				cps.totalAmount AS originalPayAmountOfInvoice,              \n" +
                "				pipd.id invPaymentDetMstID,               \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det              \n" +
                "					WHERE refCustPackingslipInvoiceID = cps.id             \n" +
                "					AND isPaymentVoided = 0              \n" +
                "					AND isDeleted = 0) AS invTotPaidAmtFromAllPaymentDet              \n" +
                "			FROM customer_packingslip cps              \n" +
                "				LEFT JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID              \n" +
                "					 AND pipd.refPayementid = pCustomerPaymentMstID	            \n" +
                "					 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0              \n" +
                "			WHERE cps.id IN (SELECT invoiceMstID FROM temp_UI_CustInvoicePaymentDetList)              \n" +
                "			AND cps.isDeleted = 0              \n" +
                "			AND cps.subStatus IN (2,3)  /* 2-Invoiced,3-Corrected and Invoiced */              \n" +
                "		;              \n" +
                "  \n" +
                "		/* get all deleted invoice payment det (passed from UI but not in db)               \n" +
                "			if selected payment det not found from db - tdacipl.invPaymentDetMstID comes NULL in below query  */              \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;                                                \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS               \n" +
                "			SELECT tucipl.*              \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl              \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID              \n" +
                "			WHERE tucipl.invPaymentDetMstID IS NOT NULL  	               \n" +
                "			AND tucipl.invPaymentDetMstID != IFNULL(tdacipl.invPaymentDetMstID,0)                \n" +
                "			;              \n" +
                "  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)               \n" +
                "			> if selected invoice not found from db > tdacipl.invoiceMstID comes NULL              \n" +
                "			> original Payment Amount Of Invoice  mismatch > tdacipl.originalPayAmountOfInvoice comes NULL              \n" +
                "			> invoice Total Paid Amount mismatch > tdacipl.invTotPaidAmtFromAllPaymentDet comes NULL              \n" +
                "			*/	                \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;                                                \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS               \n" +
                "			SELECT tucipl.* ,               \n" +
                "				tdacipl.invoiceMstID AS invoiceMstIDOfDBAvailable, tdacipl.originalPayAmountOfInvoice AS originalPayAmountOfInvoiceOfDBAvailable,              \n" +
                "				tdacipl.invTotPaidAmtFromAllPaymentDet AS invTotPaidAmtFromAllPaymentDetOfDBAvailable              \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList tucipl              \n" +
                "				LEFT JOIN temp_DB_Available_CustInvoicePaymentDetList tdacipl ON tucipl.invoiceMstID=tdacipl.invoiceMstID              \n" +
                "			WHERE (              \n" +
                "				(tucipl.invoiceMstID != IFNULL(tdacipl.invoiceMstID,0))                \n" +
                "				OR              \n" +
                "				(IFNULL(tucipl.originalPayAmountOfInvoice,0) != IFNULL(tdacipl.originalPayAmountOfInvoice,0))	              \n" +
                "				OR              \n" +
                "				(IFNULL(tucipl.invTotPaidAmtFromAllPaymentDet,0) != IFNULL(tdacipl.invTotPaidAmtFromAllPaymentDet,0))              \n" +
                "				)              \n" +
                "			;              \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) = 0)              \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) = 0)) THEN              \n" +
                "			-- SELECT 'update';              \n" +
                "			IF(pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN               \n" +
                "  \n" +
                "  \n" +
                "				/* get/map all deleting customer Invoice Payment Detail List send from UI */                \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;                                                \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS                                                          \n" +
                "				SELECT 	*                                                           \n" +
                "				FROM 	JSON_TABLE(                   \n" +
                "					pDeleteCustInvPaymentDetList,                                                          \n" +
                "						\"$[*]\" COLUMNS(                  \n" +
                "							`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",              \n" +
                "							`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"                                                 \n" +
                "						)                \n" +
                "				) AS DeleteCustInvoicePaymentDetList_JT ;               \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;                                                \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS               \n" +
                "					SELECT refCustPackingslipInvoiceID               \n" +
                "					FROM temp_UI_Delete_CustInvoicePaymentDetList ;              \n" +
                "  \n" +
                "  \n" +
                "				/* delete those which are unselected(from UI) inv payment det */              \n" +
                "				UPDATE packingslip_invoice_payment_det               \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,               \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()               \n" +
                "				WHERE id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)             \n" +
                "				AND isPaymentVoided = 0              \n" +
                "				AND isDeleted = 0 ;              \n" +
                "  \n" +
                "  \n" +
                "				/* update invoice payment status */	              \n" +
                "				UPDATE customer_packingslip cps              \n" +
                "					LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet              \n" +
                "						 FROM packingslip_invoice_payment_det              \n" +
                "						WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)              \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0               \n" +
                "						GROUP BY refCustPackingslipInvoiceID ) invPaymentDet              \n" +
                "					 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID                  \n" +
                "				SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'               \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND              \n" +
                "								cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'              \n" +
                "  \n" +
                "							   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND              \n" +
                "								cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'              \n" +
                "  \n" +
                "							   ELSE cps.paymentStatus END              \n" +
                "							) ,              \n" +
                "					cps.updatedBy = pUserID,                 \n" +
                "					cps.updateByRoleId = pUserRoleID ,                \n" +
                "					cps.updatedAt = fun_DatetimetoUTCDateTime()              \n" +
                "				WHERE cps.id IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)              \n" +
                "				AND cps.isDeleted = 0	;              \n" +
                "  \n" +
                "			END IF;              \n" +
                "  \n" +
                "  \n" +
                "			/* update all inv payment det amount whose amount is changed from UI */              \n" +
                "			UPDATE packingslip_invoice_payment_det pipd              \n" +
                "				JOIN (SELECT invPaymentDetMstID, paymentAmountForSelectedInvoice , appliedDate             \n" +
                "					FROM temp_UI_CustInvoicePaymentDetList              \n" +
                "					WHERE invPaymentDetMstID IS NOT NULL) tucipdl              \n" +
                "				ON pipd.id = tucipdl.invPaymentDetMstID              \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedInvoice,0),     \n" +
                "				pipd.appliedDate = tucipdl.appliedDate ,    \n" +
                "				pipd.updatedBy = pUserID,                 \n" +
                "				pipd.updateByRoleId = pUserRoleID ,                \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()              \n" +
                "			WHERE (IFNULL(pipd.paymentAmount,0) != IFNULL(tucipdl.paymentAmountForSelectedInvoice,0)    \n" +
                "				OR pipd.appliedDate != tucipdl.appliedDate)    \n" +
                "			AND pipd.refPayementid = pCustomerPaymentMstID              \n" +
                "			AND pipd.isPaymentVoided = 0             \n" +
                "			AND pipd.isDeleted = 0               \n" +
                "			;              \n" +
                "  \n" +
                "			/* insert newly selected inv payment det */              \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refCustPackingslipInvoiceID`,    \n" +
                "				`appliedDate` ,    \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)              \n" +
                "			SELECT pCustomerPaymentMstID, IFNULL(paymentAmountForSelectedInvoice,0), invoiceMstID,     \n" +
                "				appliedDate ,    \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID              \n" +
                "			FROM temp_UI_CustInvoicePaymentDetList               \n" +
                "			WHERE invPaymentDetMstID IS NULL              \n" +
                "			;              \n" +
                "  \n" +
                "			/* update invoice payment status */	              \n" +
                "			UPDATE customer_packingslip cps              \n" +
                "				JOIN temp_UI_CustInvoicePaymentDetList tucipdl ON cps.id = tucipdl.invoiceMstID              \n" +
                "			SET cps.paymentStatus = tucipdl.newApplyPaymentStatusOfInv ,              \n" +
                "				cps.updatedBy = pUserID,                 \n" +
                "				cps.updateByRoleId = pUserRoleID ,                \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()	              \n" +
                "			WHERE cps.id = tucipdl.invoiceMstID              \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv IS NOT NULL               \n" +
                "			AND tucipdl.newApplyPaymentStatusOfInv != ''              \n" +
                "			AND cps.isDeleted = 0	;	              \n" +
                "  \n" +
                "		END IF;	              \n" +
                "  \n" +
                "  \n" +
                "	ELSE              \n" +
                "  \n" +
                "		IF(vCountExistsCheckNo = 0 AND pDeleteCustInvPaymentDetList IS NOT NULL AND pDeleteCustInvPaymentDetList != '') THEN               \n" +
                "  \n" +
                "			/* get/map all deleting customer Invoice Payment Detail List send from UI */                \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;                                                \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustInvoicePaymentDetList AS                                                          \n" +
                "			SELECT 	*                                                           \n" +
                "			FROM 	JSON_TABLE(                   \n" +
                "				pDeleteCustInvPaymentDetList,                                                          \n" +
                "					\"$[*]\" COLUMNS(                  \n" +
                "						`invPaymentDetMstID` INT PATH \"$.invPaymentDetMstID\",              \n" +
                "						`refCustPackingslipInvoiceID` INT PATH \"$.refCustPackingslipInvoiceID\"                                                 \n" +
                "					)                \n" +
                "			) AS DeleteCustInvoicePaymentDetList_JT ;               \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs;                                                \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs AS               \n" +
                "				SELECT refCustPackingslipInvoiceID               \n" +
                "				FROM temp_UI_Delete_CustInvoicePaymentDetList ;              \n" +
                "  \n" +
                "  \n" +
                "			/* delete those which are unselected(from UI) inv payment det */              \n" +
                "			UPDATE packingslip_invoice_payment_det               \n" +
                "			SET isDeleted = 1, deletedBy = pUserID,               \n" +
                "				deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()               \n" +
                "			WHERE id IN (SELECT invPaymentDetMstID FROM temp_UI_Delete_CustInvoicePaymentDetList)             \n" +
                "			AND isPaymentVoided = 0              \n" +
                "			AND isDeleted = 0 ;              \n" +
                "  \n" +
                "  \n" +
                "			/* update invoice payment status */	              \n" +
                "			UPDATE customer_packingslip cps              \n" +
                "				LEFT JOIN ( SELECT refCustPackingslipInvoiceID, SUM(paymentAmount) AS invTotPaidAmtFromAllPaymentDet              \n" +
                "					 FROM packingslip_invoice_payment_det              \n" +
                "					WHERE refCustPackingslipInvoiceID IN (SELECT refCustPackingslipInvoiceID FROM temp_UI_Delete_CustInvoicePaymentDetList)              \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0               \n" +
                "					GROUP BY refCustPackingslipInvoiceID ) invPaymentDet              \n" +
                "				 ON cps.id = invPaymentDet.refCustPackingslipInvoiceID                  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NULL THEN 'PE'               \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND              \n" +
                "							cps.totalAmount > invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'PR'              \n" +
                "  \n" +
                "						   WHEN invPaymentDet.invTotPaidAmtFromAllPaymentDet IS NOT NULL AND              \n" +
                "							cps.totalAmount = invPaymentDet.invTotPaidAmtFromAllPaymentDet THEN 'RE'              \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END              \n" +
                "						) ,              \n" +
                "				cps.updatedBy = pUserID,                 \n" +
                "				cps.updateByRoleId = pUserRoleID ,                \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()              \n" +
                "			WHERE cps.id IN(SELECT refCustPackingslipInvoiceID FROM temp_UI_ChangeStatus_CustInvoiceMstIDs)              \n" +
                "			AND cps.isDeleted = 0	;              \n" +
                "  \n" +
                "		END IF;	              \n" +
                "  \n" +
                "	END IF;              \n" +
                "  \n" +
                "  \n" +
                "	IF (vCountExistsCheckNo = 0) THEN            \n" +
                "		/* update invoice payment master details */              \n" +
                "		UPDATE packingslip_invoice_payment              \n" +
                "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,              \n" +
                "			paymentType = pPaymentType,              \n" +
                "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,              \n" +
                "			bankAccountNo = pBankAccountNo, bankName = pBankName,              \n" +
                "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,      \n" +
                "			updatedBy = pUserID,                 \n" +
                "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()               \n" +
                "		WHERE id = pCustomerPaymentMstID            \n" +
                "		AND isPaymentVoided = 0	            \n" +
                "		AND isDeleted = 0 ;    \n" +
                "  \n" +
                "		IF (pRefPaymentType = 'RCV') THEN   /* Receivable: 'RCV' */    \n" +
                "			/* update lockStatus based on Payment Variance if record not locked */          \n" +
                "			UPDATE packingslip_invoice_payment psip          \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount                      \n" +
                "						FROM packingslip_invoice_payment_det psipd                        \n" +
                "						WHERE psipd.refPayementid = pCustomerPaymentMstID          \n" +
                "						AND psipd.refCustPackingslipInvoiceID IS NOT NULL                         \n" +
                "						AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0          \n" +
                "						GROUP BY psipd.refPayementid ) invPayDetTemp                         \n" +
                "				ON psip.id = invPayDetTemp.refPayementid          \n" +
                "			SET psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) > 0 THEN 'NA'          \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0)) = 0 THEN 'RL'          \n" +
                "						ELSE psip.lockStatus END 	          \n" +
                "			WHERE psip.id = pCustomerPaymentMstID            \n" +
                "			AND psip.lockStatus != 'LC'			          \n" +
                "			AND psip.isPaymentVoided = 0	            \n" +
                "			AND psip.isDeleted = 0           \n" +
                "			;     \n" +
                "		END IF;    \n" +
                "  \n" +
                "		IF (pRefPaymentType = 'CCM') THEN   /* CCM - Credit Memo */   \n" +
                "  \n" +
                "			/* update main payment amount in case of payment from credit memo  */              \n" +
                "			SELECT paymentAmount INTO v_db_mainPaymentAmount                     \n" +
                "			FROM packingslip_invoice_payment                      \n" +
                "			WHERE id = pCustomerPaymentMstID            \n" +
                "			AND isPaymentVoided = 0 AND isdeleted = 0    ;       \n" +
                "  \n" +
                "			/* check db main payment and new payment not match then only update */    \n" +
                "			IF (pPaymentAmount != v_db_mainPaymentAmount) THEN    \n" +
                "				UPDATE packingslip_invoice_payment              \n" +
                "				SET paymentAmount = pPaymentAmount,               \n" +
                "					updatedBy = pUserID,                 \n" +
                "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()               \n" +
                "				WHERE id = pCustomerPaymentMstID            \n" +
                "				AND isPaymentVoided = 0	            \n" +
                "				AND isDeleted = 0 ;    \n" +
                "			END IF;   \n" +
                "  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status */  \n" +
                "			UPDATE customer_packingslip            \n" +
                "			SET paymentStatus = ( CASE WHEN ABS(totalAmount) > pPaymentAmount THEN 'PR'            \n" +
                "						 WHEN ABS(totalAmount) = pPaymentAmount THEN 'RE'            \n" +
                "						 ELSE paymentStatus END            \n" +
                "						) ,            \n" +
                "				updatedBy = pUserID,               \n" +
                "				updateByRoleId = pUserRoleID ,              \n" +
                "				updatedAt = fun_DatetimetoUTCDateTime()            \n" +
                "			WHERE id = pRefCustCreditMemoID  \n" +
                "			AND isDeleted = 0	  \n" +
                "			;                \n" +
                "  \n" +
                "		END IF;         \n" +
                "  \n" +
                "	END IF;	            \n" +
                "  \n" +
                "  \n" +
                "	/* set up default temp table if not created */                \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustInvPayDetList AS                \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;              \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList AS                \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;              \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */                \n" +
                "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustInvPayDetList) > 0)               \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustInvPayDetList) > 0)            \n" +
                "		OR (vCountExistsCheckNo > 0)) THEN                \n" +
                "		SELECT 0 AS 'spStatus' ;                \n" +
                "	ELSE                \n" +
                "		SELECT 1 AS 'spStatus' ;                \n" +
                "	END IF;                \n" +
                "  \n" +
                "	/* Resp[1] - get all deleted invoice payment det (passed from UI but not in db) */                \n" +
                "	SELECT * FROM temp_Deleted_CustInvPayDetList ;               \n" +
                "  \n" +
                "	/* Resp[2] - get all mis match amount records or deleted invoices */                \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustInvPayDetList ;               \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[3] - duplicate check or payment number then require confirmation  */              \n" +
                "	IF (vCountExistsCheckNo > 0) THEN            \n" +
                "		SELECT 1 AS isDuplicateChkPaymentNo;                  \n" +
                "	ELSE                  \n" +
                "		SELECT 0 AS isDuplicateChkPaymentNo;                  \n" +
                "	END IF;              \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustInvoicePaymentDetList;                 \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustInvoicePaymentDetList;               \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustInvPayDetList;              \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustInvPayDetList;              \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustInvoicePaymentDetList;                                  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_ChangeStatus_CustInvoiceMstIDs; 	              \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 07-05-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoiceDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(                                                                                  \n" +
                "	IN ppageIndex INT,                                                                                  \n" +
                "	IN precordPerPage INT,                                                                                  \n" +
                "	IN pOrderBy VARCHAR(255),                                                                                  \n" +
                "	IN pWhereClause VARCHAR(16383),              	                                                  \n" +
                "    IN pFilterStatus LONGTEXT,                                                  \n" +
                "    IN pDueDate DATE,                                                  \n" +
                "    IN pAdditionalDays INT,                                                  \n" +
                "    IN pTermsAndAboveDays INT,                                                  \n" +
                "    IN pPoNumber VARCHAR(50),                                                 \n" +
                "    IN pIsExactSearchPO TINYINT,                                                  \n" +
                "    IN pMfgCodeIds LONGTEXT ,                                                \n" +
                "    IN pPaymentTermsIds LONGTEXT ,                                              \n" +
                "    IN pPartId INT,                                            \n" +
                "    IN pTransType VARCHAR(5) ,                  \n" +
                "	IN pFromDate DATE,                  \n" +
                "    IN pToDate DATE,              \n" +
                "    IN pPaymentStatusFilter VARCHAR(50) ,  \n" +
                "    IN pCreditAppliedStatusFilter  VARCHAR(100)              \n" +
                "    -- IN pChequeNumber  VARCHAR(50)                                                  \n" +
                ")  \n" +
                "BEGIN                                                                                  \n" +
                "  \n" +
                "	DECLARE pOffset INT;                                                                                  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;                                                                                  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);                                                                                 \n" +
                "	DECLARE vTimeZone VARCHAR(50);      \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(100);	    \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);    \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;                                                                        \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;     \n" +
                "	SET v_appliedCMPDJoin = '';    \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN      \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.paymentAmount AS receivedAmount , \");    \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'R' AND psip.refPaymentType = 'CCM'    \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");    \n" +
                "	ELSE    \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount , ');    \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"                                                                     \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate,                                               \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,                                            \n" +
                "        cp.packingSlipNumber,cp.packingslipDate,                                                  \n" +
                "        cp.invoiceNumber,cp.invoiceDate,                                                \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,                                            \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,                                            \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'                                               \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,                \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1                                              \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,                                         \n" +
                "        cp.soNumber,cp.soDate,                                                                \n" +
                "		cp.sorevision,                                                  \n" +
                "        cp.refSalesOrderID,                                                  \n" +
                "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,                                                   \n" +
                "        cp.refCustInvoiceID,                                                                \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,                                                \n" +
                "		 cp.status,                                             \n" +
                "         cp.subStatus,                 \n" +
                "          case	when cp.subStatus = 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'NI'                                                   \n" +
                "				when cp.subStatus > 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'WP'                                                   \n" +
                "                when cp.paymentStatus='PR' and cp.transType = 'I' then 'PTR'                                                \n" +
                "                when cp.paymentStatus='RE' and cp.transType = 'I' then 'PR'                                             \n" +
                "                when cp.transType = 'C' then '' END as paymentStatusCode,              \n" +
                "		 case	when cp.subStatus = 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'Not Invoiced'                                                   \n" +
                "				when cp.subStatus > 1 and cp.paymentStatus='PE' and cp.transType = 'I' then 'Waiting For Payment'                                                   \n" +
                "                when cp.paymentStatus='PR' and cp.transType = 'I' then 'Partial Payment Received'                                                \n" +
                "                when cp.paymentStatus='RE' and cp.transType = 'I' then 'Payment Received'                                             \n" +
                "                when cp.transType = 'C' then '' END as paymentStatusValue,    \n" +
                "		(CASE WHEN cp.transType = 'C' THEN   \n" +
                "			(CASE WHEN  cp.paymentStatus='PE' then 'Unapplied Credit'  WHEN cp.paymentStatus='PR' THEN 'Partial Credit Applied'   \n" +
                "					WHEN  cp.paymentStatus='RE' THEN 'Full Credit Applied' ELSE '' END)   \n" +
                "			ELSE '' END) AS creditAppliedStatus ,                              \n" +
                "		  cp.paymentStatus,                                               \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,                                        \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,                                                \n" +
                "		  ifnull(cp.totalAmount,0) totalAmount,                                                          \n" +
                "		 (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,                    \n" +
                "         (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,                                                              \n" +
                "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,                                                        \n" +
                "		 concat('(',m.mfgcode,')',' ',m.mfgname) as customerName,            \n" +
                "		 m.mfgcode as customerCode,                                                     \n" +
                "         cp.customerID,                                                \n" +
                "         cp.createdBy as createdById,       \n" +
                "		\",v_receivedAmtSF,\"                                             \n" +
                "		 -- get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,                                        \n" +
                "		 fun_getUserNameByID(cp.updatedBy) updatedby,                                                                \n" +
                "		 fun_getUserNameByID(cp.createdBy) createdby,                                                                \n" +
                "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,                                                                \n" +
                "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,                                                                  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,                                                              \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,                                                 \n" +
                "         -- fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId)  paymentDueDate,                                                     \n" +
                "         fun_getUserNameByEmployeID(cp.salesCommissionTo) salesCommissionToName,                                                  \n" +
                "         cp.termsDays termDays,                                                  \n" +
                "         cp.freeOnBoardName,                                                \n" +
                "         cp.isLocked,                                                \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,                                                \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,                                                \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,                                                \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,                                                \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,                                                  \n" +
                "         packingSlip.id packingSlipId,                                        \n" +
                "         (select group_concat(paymentNumber)                                        \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd                                         \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0                                         \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,                                    \n" +
                "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,                                \n" +
                "         cp.rmaNumber , cp.systemId, cp.billingAddress , cp.shippingAddress,cp.intermediateAddress ,                              \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,        \n" +
                "         cp.isZeroValue,  fun_getIntToText(cp.isZeroValue) isZeroValueConverted,        \n" +
                "         m.paymentTermsID custPaymentTermsId,        \n" +
                "         fun_getGenericCategoryCodeNameByID(m.paymentTermsID) custPaymentTerms,        \n" +
                "         gc.termsDays custTermsDays,        \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,gc.termsDays,m.paymentTermsID)  paymentDueDate,        \n" +
                "         cp.revision        \n" +
                "	 FROM customer_packingslip cp                                                   \n" +
                "		JOIN mfgcodemst m on m.id = cp.customerID           \n" +
                "		LEFT JOIN  genericcategory gc ON gc.gencCategoryID = m.paymentTermsID  and gc.isDeleted=0        \n" +
                "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'                                \n" +
                "		\" , v_appliedCMPDJoin ,\"    \n" +
                "	WHERE  cp.isDeleted=0                                                                \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");                                                                                  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN                                   \n" +
                "		IF pTransType = 'I' THEN                                  \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";                                                                        \n" +
                "        ELSE                                  \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";                                                                        \n" +
                "        END IF;                                      \n" +
                "	ELSE                                                                                  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;                                                                                  \n" +
                "	END IF;	                                                                                  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN                                                                                  \n" +
                "		SET pWhereClause = '1=1' ;                                                                                  \n" +
                "	END IF;	                                                  \n" +
                "    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN                                                                          \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');                                                                          \n" +
                "	END IF;                                                    \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN                                                                          \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');                                                                          \n" +
                "	END IF;                                                 \n" +
                "  \n" +
                "    IF pPartId IS NOT NULL THEN                                              \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');                                               \n" +
                "    END IF;                                              \n" +
                "	# IF(pChequeNumber IS NOT NULL)THEN                                                                \n" +
                "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');                                                                \n" +
                "	# END IF;                                                    \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN                                                                \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');                                                                \n" +
                "	END IF;                                                     \n" +
                "  \n" +
                "    IF pDueDate IS NOT NULL THEN                                                                        \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");                                                                          \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN                                                                          \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");                                                                          \n" +
                "	END IF;                                                        \n" +
                "  \n" +
                "    IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN                                                        \n" +
                "		IF pIsExactSearchPO = 1 THEN                                                        \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'                                                        \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'                                                        \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'                                                        \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'                                                        \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"                                                        \n" +
                "						);                                                        \n" +
                "		ELSE                                                        \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'                                                        \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'                                                        \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'                                                        \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'                                                        \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"                                                        \n" +
                "						);                                                        \n" +
                "		END IF;                                                        \n" +
                "	END IF;                                                        \n" +
                "   # select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;                                                  \n" +
                "  IF pFromDate IS NOT NULL THEN                  \n" +
                "        IF pTransType = 'I' THEN                   \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");                  \n" +
                "        ELSE                   \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");			                  \n" +
                "        END IF;                  \n" +
                "    END IF;                  \n" +
                "  \n" +
                "    IF pToDate IS NOT NULL THEN                  \n" +
                "        IF pTransType = 'I' THEN                   \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");                  \n" +
                "        ELSE                   \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");			                  \n" +
                "        END IF;                  \n" +
                "    END IF;                  \n" +
                "  \n" +
                "     IF pPaymentStatusFilter IS NOT NULL THEN              \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');                \n" +
                "	END IF;    \n" +
                "  \n" +
                "  \n" +
                "	IF pCreditAppliedStatusFilter IS NOT NULL THEN              \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.creditAppliedStatus,''', pCreditAppliedStatusFilter ,''')');                \n" +
                "	END IF;              \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN                                                                                   \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage; 		                                                                                  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;                                                                                  \n" +
                "	ELSE	                                                                                  \n" +
                "		SET rowNumWhere = '';                                                                                  \n" +
                "	END IF;	                                                                                  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */                                                                                     \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);                                                                                    \n" +
                "	PREPARE query2 FROM @SQLStatement2;                                                                                    \n" +
                "	EXECUTE query2;                                                                                    \n" +
                "	DEALLOCATE PREPARE query2;                                                                                  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,                                      \n" +
                "		 round((c.totalAmount),2) totalAmount,                                                      \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,                                                      \n" +
                "    				-- round((c.totalAmount - ifnull(c.receivedAmount,0)),2) pendingAmount,     \n" +
                "    			(CASE WHEN c.transType = 'C' THEN ROUND((c.totalAmount + IFNULL(c.receivedAmount,0)),2)     \n" +
                "				ELSE ROUND((c.totalAmount - IFNULL(c.receivedAmount,0)),2) END) AS pendingAmount ,	       \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)         \n" +
                "						else '' end) materialStatus from ( \",                                                   \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);                                            \n" +
                "  \n" +
                "	--  select @SQLStatement2	;    \n" +
                "	PREPARE query1 FROM @SQLStatement2;                                                                                    \n" +
                "	EXECUTE query1;                                                                                    \n" +
                "	DEALLOCATE PREPARE query1;                                                                                \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-05-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (4588,'2.00','V1',' Merged from main to dev customer payment sps - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
    }
    return allDbChangesArray;
});

// sample
//break;
//case 4450:
//  allDbChangesArray.push(
//  /* **************************** New Script -> 06-04-2021 *********************************** */
//  put your formatted script here
//  /* **************************** Add Script Version ->06-04-2021*********************************** */
//  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
//  "VALUES (4451,'2.00','V1',' Sample entry - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
//  );
//break;

/* ******** **********************/
// Please Note : Don't forgot to set schemaVersion as '2.00' instead of '1.00' as branch is Dev Branch
/* ******** **********************/